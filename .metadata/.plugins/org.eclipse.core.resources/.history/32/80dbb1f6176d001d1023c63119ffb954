/*
 * OBD.c
 *
 *  Created on: 23. 11. 2022
 *      Author: miros
 */
#include "OBD.h"

UART_HandleTypeDef huart2;
obd_protocol usedProtocol;

void OBD2_PrintResponse(uint8_t* rxFrame)
{
	char txTest2 [TX_DATA_LENGTH] = {0};

	for(int i = 0; i < sizeof(rxFrame); i++)
	{
		char value[2];
		int n = sprintf(value, "%x", rxFrame[i]);
		strcat(txTest2, value);
	}
	strcat(txTest2, "\n\r");
	HAL_UART_Transmit(&huart2, txTest2, sizeof(txTest2),10);
}

void OBD2_Request(obd_protocol obd, uint8_t pid)
{
	uint8_t txData[TX_DATA_LENGTH] = {0x02, 0x01, pid, 0x00, 0x00, 0x00, 0x00, 0x00};
	if(obd == OBD_PROTO_CAN)
	{
		CAN_SEND_MESSAGE(txData);
	}
}

int OBD2_PID_Parse(uint8_t* rxFrame)
{
	int value = 0;
	switch(rxFrame[2])
	{
	case 0x04:
		value = (100/255)*rxFrame[3];
		break;
	case 0x05:
		value = rxFrame[3] - 40;
		break;
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rxFrame[3] - 100;
		break;
	case 0x0A:
		value = 3 * rxFrame[3];
		break;
	case 0x0B:
		value = rxFrame[3];
		break;
	case 0x0C:
		value = (256*rxFrame[3] + rxFrame[4])/4;
		break;
	case 0x0D:
		value = rxFrame[3];
		break;
	case 0x0E:
		value = (rxFrame[3]/2) - 64;
		break;
	case 0x0F:
		value = rxFrame[3] - 40;
		break;
	case 0x10:
		value = (256*rxFrame[3] + rxFrame[4])/100;
		break;
	case 0x11:
		value = (100/255)*rxFrame[3];
		break;
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rxFrame[3] / 200;
		break;
	case 0x1F: case 0x21:
		value = 256*rxFrame[3] + rxFrame[4];
		break;
	case 0x23:
		value = 10*(256*rxFrame[3] + rxFrame[4]);
		break;
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (2/65536)*(256*rxFrame[3] + rxFrame[4]);
		break;
	case 0x2C:
		value = (100/255)*rxFrame[3];
		break;
	case 0x2D:
		value = (100/128)*rxFrame[3]-100;
		break;
	case 0x2E: case 0x2F:
		value = (100/255)*rxFrame[3];
		break;
	case 0x30:
		value = rxFrame[3];
		break;
	case 0x31:
		value = 256*rxFrame[3] + rxFrame[4];
		break;
	}
	return value;
}

void OBD2_Init(void)
{
	usedProtocol = KLine_Init();
}
