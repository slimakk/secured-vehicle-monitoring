/*
 * KLine.c
 *
 *  Created on: Nov 4, 2022
 *      Author: miros
 */
#include "KLine.h"
#include "stm32l4xx_hal.h"

uint8_t UART_RX_Buf[3] = {0};
uint8_t ECU_Addr = 0;

UART_HandleTypeDef huart1;

obd_protocol kline_init(UART_HandleTypeDef *huart){
	HAL_UART_DeInit(huart);
	MX_GPIO_klineUart_init();
	UART_PIN_State(1);
	HAL_Delay(3000);
	UART_PIN_State(0); //0
	HAL_Delay(200);
	UART_PIN_State(1);//11
	HAL_Delay(400);
	UART_PIN_State(0);//00
	HAL_Delay(400);
	UART_PIN_State(1);//11
	HAL_Delay(400);
	UART_PIN_State(0);//00
	HAL_Delay(400);
	UART_PIN_State(1);//1
	HAL_Delay(200);
	if (HAL_UART_Init(huart) != HAL_OK)
	{
	    Error_Handler();
	}
	HAL_Delay(20);

	HAL_UART_Receive(huart, &UART_RX_Buf, 3, 200);

	if(UART_RX_Buf[0] != 0x55)
	{
		return OBD_NONE;
	}
	else if(UART_RX_Buf[1] == UART_RX_Buf[2])
	{
		if(UART_RX_Buf[1] == 0x08 || 0x94)
		{
			uint8_t inv_RX = ~UART_RX_Buf[1];
			HAL_Delay(25);
			HAL_UART_Transmit(huart, &inv_RX, 1, 50);
			HAL_UART_Receive(huart, &ECU_Addr, 1, 100);
			return OBD_PROTO_ISO9141;
		}
	}
	else
	{
		uint8_t inv_RX = ~UART_RX_Buf[1];
		HAL_Delay(25);
		HAL_UART_Transmit(&huart, &inv_RX, 1, 50);
		HAL_UART_Receive(&huart, &ECU_Addr, 1, 100);
		return OBD_PROTO_KWP2000_SLOW;
	}
}

obd_protocol KWP2000_f_init(UART_HandleTypeDef *huart)
{
	uint8_t startCom[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
	uint8_t respCom[7]={0};
	uint8_t crc = 0;
	HAL_UART_DeInit(huart);
	MX_GPIO_klineUart_init();
	UART_PIN_State(true);
	HAL_Delay(25);
	UART_PIN_State(false);
	HAL_Delay(25);
	if (HAL_UART_Init(&huart) != HAL_OK)
	{
		Error_Handler();
	}
	HAL_UART_Transmit(&huart, &startCom, 5, 50);
	HAL_Delay(20);
	HAL_UART_Receive_IT(&huart, &respCom, 7);
	for(int i = 0; i<6; i++)
	{
		crc = crc + respCom[i];
	}
	if(crc == respCom[6])
	{
		ECU_Addr = respCom[2];
		return OBD_PROTO_KWP2000_FAST;
	}

	else
		return OBD_NONE;
}

void MX_GPIO_klineUart_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
}

void UART_PIN_State(int state)
{
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
	}
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}
