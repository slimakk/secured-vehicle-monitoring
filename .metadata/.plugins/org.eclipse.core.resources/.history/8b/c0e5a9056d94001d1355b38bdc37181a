/*
 * KLine.c
 *
 *  Created on: Nov 4, 2022
 *      Author: miros
 */
#include "KLine.h"
#include "main.h"

uint8_t UART_RX_Buf[3] = {0};
extern uint8_t uartBuf[10];
static uint8_t ECU_Addr = 0;
uint8_t invRX = 0;
static uint8_t KLine_RX_Buf[16];

UART_HandleTypeDef huart1;

obd_protocol KLine_Init(void){
	//HAL_UART_DeInit(&huart1);
	MX_GPIO_KLineUART_Init();
	UART_PIN_State(1);
	HAL_Delay(3000);
	UART_PIN_State(0); //0
	HAL_Delay(200);
	UART_PIN_State(1);//11
	HAL_Delay(400);
	UART_PIN_State(0);//00
	HAL_Delay(400);
	UART_PIN_State(1);//11
	HAL_Delay(400);
	UART_PIN_State(0);//00
	HAL_Delay(400);
	UART_PIN_State(1);//1
	//HAL_Delay(200);
	MX_USART1_UART_Init();

	HAL_UART_Receive(&huart1, uartBuf, 3, 500);

	if(uartBuf[0] != 0x55)
	{
		return OBD_NONE;
	}
	else if(uartBuf[1] == uartBuf[2])
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			invRX = ~uartBuf[1];
			HAL_Delay(25);
			HAL_UART_Transmit(&huart1, invRX, 1, 50);
			HAL_UART_Receive(&huart1, &ECU_Addr, 1, 100);
			return OBD_PROTO_ISO9141;
		}
	}
	else
	{
		uint8_t inv_RX = ~UART_RX_Buf[1];
		HAL_Delay(25);
		HAL_UART_Transmit(&huart1, &inv_RX, 1, 50);
		HAL_UART_Receive(&huart1, &ECU_Addr, 1, 100);
		return OBD_PROTO_KWP2000_SLOW;
	}
}

obd_protocol KWP2000_Fast_Init(void)
{
	uint8_t startCom[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
	uint8_t respCom[7]={0};
	uint8_t crc = 0;
	HAL_UART_DeInit(&huart1);
	MX_GPIO_KLineUART_Init();
	UART_PIN_State(0);
	HAL_Delay(25);
	UART_PIN_State(1);
	HAL_Delay(25);
//	if (HAL_UART_Init(&huart1) != HAL_OK)
//	{
//		Error_Handler();
//	}
//	HAL_UART_Transmit(&huart1, startCom, 5, 50);
//	HAL_Delay(20);
//	HAL_UART_Receive_IT(&huart1, respCom, 7);
//	for(int i = 0; i<6; i++)
//	{
//		crc = crc + respCom[i];
//	}
	if(crc == respCom[6])
	{
		ECU_Addr = respCom[2];
		return OBD_PROTO_KWP2000_FAST;
	}

	else
		return OBD_NONE;
}

void MX_GPIO_KLineUART_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
}

void UART_PIN_State(int state)
{
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
	}
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}

void KLine_SEND_MESSAGE(uint8_t* txFrame)
{
	uint8_t messageFrame[] = {0x68, 0x6A, 0xF1, txFrame[0], txFrame[1], 0};
	uint8_t checksum = 0;
	for(int i = 0; i < sizeof(messageFrame); i++)
	{
		checksum += messageFrame[i];
	}
	messageFrame[sizeof(messageFrame)-1] = checksum;

	HAL_UART_Transmit(&huart1, messageFrame, sizeof(messageFrame), 10);

	uint16_t rxLen = 0;
	uint8_t pidLength = PID_Get_Lenght(txFrame[1]);
	uint8_t rxFrame[pidLength];

	HAL_UARTEx_ReceiveToIdle(&huart1, KLine_RX_Buf, pidLength+6, &rxLen, 1000);

	if(Verify_Checksum(KLine_RX_Buf, rxLen))
	{
		int j = 0;
		for(int i = 3; i < pidLength + 3; i++)
		{

			rxFrame[j] = KLine_RX_Buf[i];
			j++;
		}

		OBD2_ShowOnDisplay(OBD2_PID_Parse(rxFrame));
	}
}

void KWP2000_SEND_MESSAGE(uint8_t* txFrame)
{
	uint8_t messageFrame[] = {0xC2, ECU_Addr, 0xF1, txFrame[0], txFrame[1], 0};
	uint8_t checksum = 0;
	for(int i = 0; i < sizeof(messageFrame); i++)
	{
		checksum += messageFrame[i];
	}
	messageFrame[sizeof(messageFrame)-1] = checksum;

	HAL_UART_Transmit(&huart1, messageFrame, sizeof(messageFrame), 10);

	uint16_t rxLen = 0;
	uint8_t rxFrame[8];

	HAL_UARTEx_ReceiveToIdle(&huart1, KLine_RX_Buf, 8, &rxLen, 1000);

	if(Verify_Checksum(KLine_RX_Buf, rxLen))
	{
		OBD2_ShowOnDisplay(OBD2_PID_Parse(rxFrame));
	}
}

int Verify_Checksum (uint8_t *data, uint8_t lenght)
{
	uint8_t checksum = 0;
	for(int i = 0; i < lenght; i++)
	{
		checksum += data[i];
	}
	if(data[lenght - 1] == checksum)
	{
		return 1;
	}
	return 0;
}
void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 10400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
}

