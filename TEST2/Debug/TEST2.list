
TEST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eac  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004090  08004090  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004098  08004098  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  080040ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080040ac  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ceb4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f79  00000000  00000000  0002cef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002ee70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002f870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002114e  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb4c  00000000  00000000  000512e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c70cd  00000000  00000000  0005de32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124eff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  00124f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004020 	.word	0x08004020

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004020 	.word	0x08004020

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_DMA_Init+0x38>)
 80004d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004da:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <MX_DMA_Init+0x38>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6493      	str	r3, [r2, #72]	; 0x48
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_DMA_Init+0x38>)
 80004e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	200f      	movs	r0, #15
 80004f4:	f000 fc8b 	bl	8000e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004f8:	200f      	movs	r0, #15
 80004fa:	f000 fca4 	bl	8000e46 <HAL_NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <MX_GPIO_Init+0x108>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a3b      	ldr	r2, [pc, #236]	; (8000614 <MX_GPIO_Init+0x108>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b39      	ldr	r3, [pc, #228]	; (8000614 <MX_GPIO_Init+0x108>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	4b36      	ldr	r3, [pc, #216]	; (8000614 <MX_GPIO_Init+0x108>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a35      	ldr	r2, [pc, #212]	; (8000614 <MX_GPIO_Init+0x108>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b33      	ldr	r3, [pc, #204]	; (8000614 <MX_GPIO_Init+0x108>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b30      	ldr	r3, [pc, #192]	; (8000614 <MX_GPIO_Init+0x108>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	4a2f      	ldr	r2, [pc, #188]	; (8000614 <MX_GPIO_Init+0x108>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055e:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <MX_GPIO_Init+0x108>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <MX_GPIO_Init+0x108>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <MX_GPIO_Init+0x108>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_GPIO_Init+0x108>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	21b0      	movs	r1, #176	; 0xb0
 8000586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058a:	f001 f867 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000594:	4820      	ldr	r0, [pc, #128]	; (8000618 <MX_GPIO_Init+0x10c>)
 8000596:	f001 f861 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800059a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	481a      	ldr	r0, [pc, #104]	; (800061c <MX_GPIO_Init+0x110>)
 80005b2:	f000 fed9 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80005b6:	23b0      	movs	r3, #176	; 0xb0
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f000 feca 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80005d4:	2340      	movs	r3, #64	; 0x40
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f000 febd 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4619      	mov	r1, r3
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <MX_GPIO_Init+0x10c>)
 8000608:	f000 feae 	bl	8001368 <HAL_GPIO_Init>

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48000400 	.word	0x48000400
 800061c:	48000800 	.word	0x48000800

08000620 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <HAL_UART_RxCpltCallback+0x1c>)
 800062e:	f001 f82d 	bl	800168c <HAL_GPIO_TogglePin>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	48000400 	.word	0x48000400

08000640 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800064c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <HAL_UARTEx_RxEventCallback+0x20>)
 8000652:	f001 f81b 	bl	800168c <HAL_GPIO_TogglePin>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	48000400 	.word	0x48000400

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fa56 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f82a 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f7ff ff4c 	bl	800050c <MX_GPIO_Init>
  MX_DMA_Init();
 8000674:	f7ff ff2c 	bl	80004d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000678:	f000 f91e 	bl	80008b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800067c:	f000 f8ec 	bl	8000858 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive(&huart1,rx,2,10000);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx, 20);
 8000680:	2214      	movs	r2, #20
 8000682:	490c      	ldr	r1, [pc, #48]	; (80006b4 <main+0x50>)
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0x54>)
 8000686:	f003 fc44 	bl	8003f12 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UART_Transmit(&huart1, "ahoj", 5, 1000);
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	2205      	movs	r2, #5
 8000690:	490a      	ldr	r1, [pc, #40]	; (80006bc <main+0x58>)
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <main+0x54>)
 8000694:	f002 fa3a 	bl	8002b0c <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart1, "test", 5, 1000);
 8000698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069c:	2205      	movs	r2, #5
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <main+0x5c>)
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <main+0x54>)
 80006a2:	f002 fa33 	bl	8002b0c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __NOP();
 80006a6:	bf00      	nop
//	  HAL_UART_Transmit(&huart1, "test", 5, 1000);
	  HAL_Delay(5000);
 80006a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80006ac:	f000 fab0 	bl	8000c10 <HAL_Delay>
	  __NOP();
 80006b0:	e7f9      	b.n	80006a6 <main+0x42>
 80006b2:	bf00      	nop
 80006b4:	20000028 	.word	0x20000028
 80006b8:	20000034 	.word	0x20000034
 80006bc:	08004038 	.word	0x08004038
 80006c0:	08004040 	.word	0x08004040

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	; 0x58
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2244      	movs	r2, #68	; 0x44
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fc9c 	bl	8004010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ea:	f000 fff7 	bl	80016dc <HAL_PWREx_ControlVoltageScaling>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006f4:	f000 f837 	bl	8000766 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000700:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000702:	2310      	movs	r3, #16
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000712:	230a      	movs	r3, #10
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000716:	2307      	movs	r3, #7
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4618      	mov	r0, r3
 8000728:	f001 f82e 	bl	8001788 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000732:	f000 f818 	bl	8000766 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2303      	movs	r3, #3
 800073c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	2104      	movs	r1, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fc2e 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075a:	f000 f804 	bl	8000766 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3758      	adds	r7, #88	; 0x58
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076a:	b672      	cpsid	i
}
 800076c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076e:	e7fe      	b.n	800076e <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x44>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_MspInit+0x44>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6613      	str	r3, [r2, #96]	; 0x60
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x44>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6593      	str	r3, [r2, #88]	; 0x58
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f9e4 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <DMA1_Channel5_IRQHandler+0x10>)
 8000812:	f000 fcca 	bl	80011aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000013c 	.word	0x2000013c

08000820 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <USART1_IRQHandler+0x10>)
 8000826:	f002 fa05 	bl	8002c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000034 	.word	0x20000034

08000834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART1_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART1_UART_Init+0x58>)
 800089c:	f002 f8e8 	bl	8002a70 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f7ff ff5e 	bl	8000766 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000034 	.word	0x20000034
 80008b4:	40013800 	.word	0x40013800

080008b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008be:	4a15      	ldr	r2, [pc, #84]	; (8000914 <MX_USART2_UART_Init+0x5c>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USART2_UART_Init+0x58>)
 80008fc:	f002 f8b8 	bl	8002a70 <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000906:	f7ff ff2e 	bl	8000766 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000b8 	.word	0x200000b8
 8000914:	40004400 	.word	0x40004400

08000918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0a4      	sub	sp, #144	; 0x90
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	2260      	movs	r2, #96	; 0x60
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f003 fb69 	bl	8004010 <memset>
  if(uartHandle->Instance==USART1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a5b      	ldr	r2, [pc, #364]	; (8000ab0 <HAL_UART_MspInit+0x198>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d16e      	bne.n	8000a26 <HAL_UART_MspInit+0x10e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000948:	2301      	movs	r3, #1
 800094a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800094c:	2300      	movs	r3, #0
 800094e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fd4f 	bl	80023f8 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000960:	f7ff ff01 	bl	8000766 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000964:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 8000966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000968:	4a52      	ldr	r2, [pc, #328]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 800096a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096e:	6613      	str	r3, [r2, #96]	; 0x60
 8000970:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 8000972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b4d      	ldr	r3, [pc, #308]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	4a4c      	ldr	r2, [pc, #304]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000988:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000994:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000998:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ac:	2307      	movs	r3, #7
 80009ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f000 fcd4 	bl	8001368 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009c2:	4a3e      	ldr	r2, [pc, #248]	; (8000abc <HAL_UART_MspInit+0x1a4>)
 80009c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80009c6:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009cc:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009de:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e4:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80009ea:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009ec:	2220      	movs	r2, #32
 80009ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009f8:	482f      	ldr	r0, [pc, #188]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 80009fa:	f000 fa3f 	bl	8000e7c <HAL_DMA_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000a04:	f7ff feaf 	bl	8000766 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a2b      	ldr	r2, [pc, #172]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 8000a0c:	671a      	str	r2, [r3, #112]	; 0x70
 8000a0e:	4a2a      	ldr	r2, [pc, #168]	; (8000ab8 <HAL_UART_MspInit+0x1a0>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2025      	movs	r0, #37	; 0x25
 8000a1a:	f000 f9f8 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a1e:	2025      	movs	r0, #37	; 0x25
 8000a20:	f000 fa11 	bl	8000e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a24:	e03f      	b.n	8000aa6 <HAL_UART_MspInit+0x18e>
  else if(uartHandle->Instance==USART2)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <HAL_UART_MspInit+0x1a8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d13a      	bne.n	8000aa6 <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fcdb 	bl	80023f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_UART_MspInit+0x134>
      Error_Handler();
 8000a48:	f7ff fe8d 	bl	8000766 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 8000a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a50:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 8000a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a56:	6593      	str	r3, [r2, #88]	; 0x58
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 8000a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0x19c>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fc61 	bl	8001368 <HAL_GPIO_Init>
}
 8000aa6:	bf00      	nop
 8000aa8:	3790      	adds	r7, #144	; 0x90
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	2000013c 	.word	0x2000013c
 8000abc:	40020058 	.word	0x40020058
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac8:	f7ff feb4 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <LoopForever+0xe>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	; (8000b10 <LoopForever+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af2:	f003 fa69 	bl	8003fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000af6:	f7ff fdb5 	bl	8000664 <main>

08000afa <LoopForever>:

LoopForever:
    b LoopForever
 8000afa:	e7fe      	b.n	8000afa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000afc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b08:	080040a0 	.word	0x080040a0
  ldr r2, =_sbss
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b10:	20000188 	.word	0x20000188

08000b14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_Init+0x3c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_Init+0x3c>)
 8000b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f000 f962 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f80f 	bl	8000b58 <HAL_InitTick>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	e001      	b.n	8000b4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b46:	f7ff fe13 	bl	8000770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d023      	beq.n	8000bb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_InitTick+0x70>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f96d 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10f      	bne.n	8000bae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d809      	bhi.n	8000ba8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f937 	bl	8000e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_InitTick+0x74>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e001      	b.n	8000bb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000184 	.word	0x20000184

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000184 	.word	0x20000184

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff3e 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff31 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e098      	b.n	8000fc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <HAL_DMA_Init+0x150>)
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d80f      	bhi.n	8000eba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b4b      	ldr	r3, [pc, #300]	; (8000fd0 <HAL_DMA_Init+0x154>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a4b      	ldr	r2, [pc, #300]	; (8000fd4 <HAL_DMA_Init+0x158>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	091b      	lsrs	r3, r3, #4
 8000eac:	009a      	lsls	r2, r3, #2
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <HAL_DMA_Init+0x15c>)
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb8:	e00e      	b.n	8000ed8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_DMA_Init+0x160>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a43      	ldr	r2, [pc, #268]	; (8000fd4 <HAL_DMA_Init+0x158>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	009a      	lsls	r2, r3, #2
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a42      	ldr	r2, [pc, #264]	; (8000fe0 <HAL_DMA_Init+0x164>)
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2202      	movs	r2, #2
 8000edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ef2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f32:	d039      	beq.n	8000fa8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <HAL_DMA_Init+0x15c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d11a      	bne.n	8000f74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HAL_DMA_Init+0x168>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f003 031c 	and.w	r3, r3, #28
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	4924      	ldr	r1, [pc, #144]	; (8000fe4 <HAL_DMA_Init+0x168>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_DMA_Init+0x168>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6859      	ldr	r1, [r3, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f64:	f003 031c 	and.w	r3, r3, #28
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	491d      	ldr	r1, [pc, #116]	; (8000fe4 <HAL_DMA_Init+0x168>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
 8000f72:	e019      	b.n	8000fa8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_DMA_Init+0x16c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7c:	f003 031c 	and.w	r3, r3, #28
 8000f80:	210f      	movs	r1, #15
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	4917      	ldr	r1, [pc, #92]	; (8000fe8 <HAL_DMA_Init+0x16c>)
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_DMA_Init+0x16c>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6859      	ldr	r1, [r3, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f003 031c 	and.w	r3, r3, #28
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	4911      	ldr	r1, [pc, #68]	; (8000fe8 <HAL_DMA_Init+0x16c>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40020407 	.word	0x40020407
 8000fd0:	bffdfff8 	.word	0xbffdfff8
 8000fd4:	cccccccd 	.word	0xcccccccd
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	bffdfbf8 	.word	0xbffdfbf8
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	400200a8 	.word	0x400200a8
 8000fe8:	400204a8 	.word	0x400204a8

08000fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <HAL_DMA_Start_IT+0x20>
 8001008:	2302      	movs	r3, #2
 800100a:	e04b      	b.n	80010a4 <HAL_DMA_Start_IT+0xb8>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b01      	cmp	r3, #1
 800101e:	d13a      	bne.n	8001096 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2202      	movs	r2, #2
 8001024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f95f 	bl	8001308 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	2b00      	cmp	r3, #0
 8001050:	d008      	beq.n	8001064 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 020e 	orr.w	r2, r2, #14
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e00f      	b.n	8001084 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0204 	bic.w	r2, r2, #4
 8001072:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 020a 	orr.w	r2, r2, #10
 8001082:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e005      	b.n	80010a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800109e:	2302      	movs	r3, #2
 80010a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d008      	beq.n	80010d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2204      	movs	r2, #4
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e022      	b.n	800111c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 020e 	bic.w	r2, r2, #14
 80010e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0201 	bic.w	r2, r2, #1
 80010f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f003 021c 	and.w	r2, r3, #28
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d005      	beq.n	800114c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2204      	movs	r2, #4
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e029      	b.n	80011a0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 020e 	bic.w	r2, r2, #14
 800115a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f003 021c 	and.w	r2, r3, #28
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	4798      	blx	r3
    }
  }
  return status;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f003 031c 	and.w	r3, r3, #28
 80011ca:	2204      	movs	r2, #4
 80011cc:	409a      	lsls	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d026      	beq.n	8001224 <HAL_DMA_IRQHandler+0x7a>
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d021      	beq.n	8001224 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d107      	bne.n	80011fe <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0204 	bic.w	r2, r2, #4
 80011fc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 021c 	and.w	r2, r3, #28
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2104      	movs	r1, #4
 800120c:	fa01 f202 	lsl.w	r2, r1, r2
 8001210:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	2b00      	cmp	r3, #0
 8001218:	d071      	beq.n	80012fe <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001222:	e06c      	b.n	80012fe <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	f003 031c 	and.w	r3, r3, #28
 800122c:	2202      	movs	r2, #2
 800122e:	409a      	lsls	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d02e      	beq.n	8001296 <HAL_DMA_IRQHandler+0xec>
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d029      	beq.n	8001296 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10b      	bne.n	8001268 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 020a 	bic.w	r2, r2, #10
 800125e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f003 021c 	and.w	r2, r3, #28
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	2102      	movs	r1, #2
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	2b00      	cmp	r3, #0
 800128a:	d038      	beq.n	80012fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001294:	e033      	b.n	80012fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f003 031c 	and.w	r3, r3, #28
 800129e:	2208      	movs	r2, #8
 80012a0:	409a      	lsls	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d02a      	beq.n	8001300 <HAL_DMA_IRQHandler+0x156>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d025      	beq.n	8001300 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 020e 	bic.w	r2, r2, #14
 80012c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f003 021c 	and.w	r2, r3, #28
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
}
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f003 021c 	and.w	r2, r3, #28
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f202 	lsl.w	r2, r1, r2
 8001328:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b10      	cmp	r3, #16
 8001338:	d108      	bne.n	800134c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800134a:	e007      	b.n	800135c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	60da      	str	r2, [r3, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e154      	b.n	8001622 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8146 	beq.w	800161c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	6939      	ldr	r1, [r7, #16]
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0203 	and.w	r2, r3, #3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80a0 	beq.w	800161c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_GPIO_Init+0x2d8>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e0:	4a57      	ldr	r2, [pc, #348]	; (8001640 <HAL_GPIO_Init+0x2d8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6613      	str	r3, [r2, #96]	; 0x60
 80014e8:	4b55      	ldr	r3, [pc, #340]	; (8001640 <HAL_GPIO_Init+0x2d8>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a53      	ldr	r2, [pc, #332]	; (8001644 <HAL_GPIO_Init+0x2dc>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151e:	d019      	beq.n	8001554 <HAL_GPIO_Init+0x1ec>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a49      	ldr	r2, [pc, #292]	; (8001648 <HAL_GPIO_Init+0x2e0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_GPIO_Init+0x1e8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a48      	ldr	r2, [pc, #288]	; (800164c <HAL_GPIO_Init+0x2e4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00d      	beq.n	800154c <HAL_GPIO_Init+0x1e4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a47      	ldr	r2, [pc, #284]	; (8001650 <HAL_GPIO_Init+0x2e8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x1e0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a46      	ldr	r2, [pc, #280]	; (8001654 <HAL_GPIO_Init+0x2ec>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_GPIO_Init+0x1dc>
 8001540:	2304      	movs	r3, #4
 8001542:	e008      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001544:	2307      	movs	r3, #7
 8001546:	e006      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001548:	2303      	movs	r3, #3
 800154a:	e004      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 800154c:	2302      	movs	r3, #2
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001554:	2300      	movs	r3, #0
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001566:	4937      	ldr	r1, [pc, #220]	; (8001644 <HAL_GPIO_Init+0x2dc>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001574:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001598:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c2:	4a25      	ldr	r2, [pc, #148]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ec:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_GPIO_Init+0x2f0>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	f47f aea3 	bne.w	8001378 <HAL_GPIO_Init+0x10>
  }
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000
 8001648:	48000400 	.word	0x48000400
 800164c:	48000800 	.word	0x48000800
 8001650:	48000c00 	.word	0x48000c00
 8001654:	48001000 	.word	0x48001000
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001678:	e002      	b.n	8001680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4013      	ands	r3, r2
 80016a4:	041a      	lsls	r2, r3, #16
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43d9      	mvns	r1, r3
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	400b      	ands	r3, r1
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40007000 	.word	0x40007000

080016dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ea:	d130      	bne.n	800174e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ec:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f8:	d038      	beq.n	800176c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001702:	4a1e      	ldr	r2, [pc, #120]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2232      	movs	r2, #50	; 0x32
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0c9b      	lsrs	r3, r3, #18
 800171c:	3301      	adds	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001720:	e002      	b.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3b01      	subs	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001734:	d102      	bne.n	800173c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f2      	bne.n	8001722 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001748:	d110      	bne.n	800176c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e00f      	b.n	800176e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175a:	d007      	beq.n	800176c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001764:	4a05      	ldr	r2, [pc, #20]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40007000 	.word	0x40007000
 8001780:	20000000 	.word	0x20000000
 8001784:	431bde83 	.word	0x431bde83

08001788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f000 bc02 	b.w	8001fa0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179c:	4b96      	ldr	r3, [pc, #600]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a6:	4b94      	ldr	r3, [pc, #592]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80e4 	beq.w	8001986 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <HAL_RCC_OscConfig+0x4c>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	f040 808b 	bne.w	80018e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	f040 8087 	bne.w	80018e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017d4:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_OscConfig+0x64>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e3d9      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1a      	ldr	r2, [r3, #32]
 80017f0:	4b81      	ldr	r3, [pc, #516]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d004      	beq.n	8001806 <HAL_RCC_OscConfig+0x7e>
 80017fc:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001804:	e005      	b.n	8001812 <HAL_RCC_OscConfig+0x8a>
 8001806:	4b7c      	ldr	r3, [pc, #496]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001812:	4293      	cmp	r3, r2
 8001814:	d223      	bcs.n	800185e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fd8c 	bl	8002338 <RCC_SetFlashLatencyFromMSIRange>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e3ba      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800182a:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a72      	ldr	r2, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b70      	ldr	r3, [pc, #448]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	496d      	ldr	r1, [pc, #436]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001848:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	4968      	ldr	r1, [pc, #416]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
 800185c:	e025      	b.n	80018aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185e:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4960      	ldr	r1, [pc, #384]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187c:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	495b      	ldr	r1, [pc, #364]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800188c:	4313      	orrs	r3, r2
 800188e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fd4c 	bl	8002338 <RCC_SetFlashLatencyFromMSIRange>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e37a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018aa:	f000 fc81 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	4950      	ldr	r1, [pc, #320]	; (80019fc <HAL_RCC_OscConfig+0x274>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a4e      	ldr	r2, [pc, #312]	; (8001a00 <HAL_RCC_OscConfig+0x278>)
 80018c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018ca:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_RCC_OscConfig+0x27c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f942 	bl	8000b58 <HAL_InitTick>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d052      	beq.n	8001984 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	e35e      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d032      	beq.n	8001950 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018ea:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a42      	ldr	r2, [pc, #264]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f6:	f7ff f97f 	bl	8000bf8 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018fe:	f7ff f97b 	bl	8000bf8 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e347      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001910:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4930      	ldr	r1, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	492b      	ldr	r1, [pc, #172]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
 800194e:	e01a      	b.n	8001986 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800195c:	f7ff f94c 	bl	8000bf8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001964:	f7ff f948 	bl	8000bf8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e314      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x1dc>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d073      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b08      	cmp	r3, #8
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_OscConfig+0x21c>
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d10e      	bne.n	80019bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d10b      	bne.n	80019bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d063      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d15f      	bne.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e2f1      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x24c>
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e025      	b.n	8001a20 <HAL_RCC_OscConfig+0x298>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019dc:	d114      	bne.n	8001a08 <HAL_RCC_OscConfig+0x280>
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a02      	ldr	r2, [pc, #8]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e013      	b.n	8001a20 <HAL_RCC_OscConfig+0x298>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	08004048 	.word	0x08004048
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000004 	.word	0x20000004
 8001a08:	4ba0      	ldr	r3, [pc, #640]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a9f      	ldr	r2, [pc, #636]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b9d      	ldr	r3, [pc, #628]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a9c      	ldr	r2, [pc, #624]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f8e6 	bl	8000bf8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff f8e2 	bl	8000bf8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e2ae      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0x2a8>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f8d2 	bl	8000bf8 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff f8ce 	bl	8000bf8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e29a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6a:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x2d0>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d060      	beq.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_OscConfig+0x310>
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d119      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d116      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a98:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x328>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e277      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab0:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	4973      	ldr	r1, [pc, #460]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac4:	e040      	b.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d023      	beq.n	8001b16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ace:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ada:	f7ff f88d 	bl	8000bf8 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff f889 	bl	8000bf8 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e255      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af4:	4b65      	ldr	r3, [pc, #404]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	495f      	ldr	r1, [pc, #380]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
 8001b14:	e018      	b.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b16:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a5c      	ldr	r2, [pc, #368]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff f869 	bl	8000bf8 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff f865 	bl	8000bf8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e231      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03c      	beq.n	8001bce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5c:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b62:	4a4a      	ldr	r2, [pc, #296]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f844 	bl	8000bf8 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff f840 	bl	8000bf8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e20c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ef      	beq.n	8001b74 <HAL_RCC_OscConfig+0x3ec>
 8001b94:	e01b      	b.n	8001bce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9c:	4a3b      	ldr	r2, [pc, #236]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f827 	bl	8000bf8 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff f823 	bl	8000bf8 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e1ef      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ef      	bne.n	8001bae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80a6 	beq.w	8001d28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10d      	bne.n	8001c08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	4a26      	ldr	r2, [pc, #152]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c04:	2301      	movs	r3, #1
 8001c06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_RCC_OscConfig+0x508>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d118      	bne.n	8001c46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_OscConfig+0x508>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_RCC_OscConfig+0x508>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c20:	f7fe ffea 	bl	8000bf8 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7fe ffe6 	bl	8000bf8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1b2      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <HAL_RCC_OscConfig+0x508>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d108      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4d8>
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c5e:	e029      	b.n	8001cb4 <HAL_RCC_OscConfig+0x52c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d115      	bne.n	8001c94 <HAL_RCC_OscConfig+0x50c>
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a03      	ldr	r2, [pc, #12]	; (8001c8c <HAL_RCC_OscConfig+0x504>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c88:	e014      	b.n	8001cb4 <HAL_RCC_OscConfig+0x52c>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40007000 	.word	0x40007000
 8001c94:	4b9a      	ldr	r3, [pc, #616]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9a:	4a99      	ldr	r2, [pc, #612]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001c9c:	f023 0301 	bic.w	r3, r3, #1
 8001ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca4:	4b96      	ldr	r3, [pc, #600]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a95      	ldr	r2, [pc, #596]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d016      	beq.n	8001cea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7fe ff9c 	bl	8000bf8 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7fe ff98 	bl	8000bf8 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e162      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cda:	4b89      	ldr	r3, [pc, #548]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ed      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x53c>
 8001ce8:	e015      	b.n	8001d16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7fe ff85 	bl	8000bf8 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7fe ff81 	bl	8000bf8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e14b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d08:	4b7d      	ldr	r3, [pc, #500]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ed      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1c:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	4a77      	ldr	r2, [pc, #476]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d03c      	beq.n	8001dae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d3c:	4b70      	ldr	r3, [pc, #448]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d42:	4a6f      	ldr	r2, [pc, #444]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7fe ff54 	bl	8000bf8 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d54:	f7fe ff50 	bl	8000bf8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e11c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d66:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ef      	beq.n	8001d54 <HAL_RCC_OscConfig+0x5cc>
 8001d74:	e01b      	b.n	8001dae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d76:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	4a60      	ldr	r2, [pc, #384]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff37 	bl	8000bf8 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d8e:	f7fe ff33 	bl	8000bf8 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0ff      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001da0:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ef      	bne.n	8001d8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80f3 	beq.w	8001f9e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	f040 80c9 	bne.w	8001f54 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dc2:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0203 	and.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d12c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	3b01      	subs	r3, #1
 8001de2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d123      	bne.n	8001e30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d11b      	bne.n	8001e30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d113      	bne.n	8001e30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	3b01      	subs	r3, #1
 8001e16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d109      	bne.n	8001e30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d06b      	beq.n	8001f08 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d062      	beq.n	8001efc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e36:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0ac      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2d      	ldr	r2, [pc, #180]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e52:	f7fe fed1 	bl	8000bf8 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe fecd 	bl	8000bf8 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e099      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6c:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x77c>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e88:	3a01      	subs	r2, #1
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e92:	0212      	lsls	r2, r2, #8
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e9a:	0852      	lsrs	r2, r2, #1
 8001e9c:	3a01      	subs	r2, #1
 8001e9e:	0552      	lsls	r2, r2, #21
 8001ea0:	4311      	orrs	r1, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ea6:	0852      	lsrs	r2, r2, #1
 8001ea8:	3a01      	subs	r2, #1
 8001eaa:	0652      	lsls	r2, r2, #25
 8001eac:	4311      	orrs	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eb2:	06d2      	lsls	r2, r2, #27
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	4912      	ldr	r1, [pc, #72]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed4:	f7fe fe90 	bl	8000bf8 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fe8c 	bl	8000bf8 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e058      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_RCC_OscConfig+0x778>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001efa:	e050      	b.n	8001f9e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e04f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
 8001f00:	40021000 	.word	0x40021000
 8001f04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d144      	bne.n	8001f9e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f20:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a20      	ldr	r2, [pc, #128]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f2c:	f7fe fe64 	bl	8000bf8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe fe60 	bl	8000bf8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e02c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x7ac>
 8001f52:	e024      	b.n	8001f9e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d01f      	beq.n	8001f9a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe fe47 	bl	8000bf8 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe fe43 	bl	8000bf8 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e00f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4905      	ldr	r1, [pc, #20]	; (8001fa8 <HAL_RCC_OscConfig+0x820>)
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x824>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
 8001f98:	e001      	b.n	8001f9e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	feeefffc 	.word	0xfeeefffc

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0e7      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b75      	ldr	r3, [pc, #468]	; (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d910      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b72      	ldr	r3, [pc, #456]	; (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4970      	ldr	r1, [pc, #448]	; (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b6e      	ldr	r3, [pc, #440]	; (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0cf      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d010      	beq.n	8002022 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800200c:	429a      	cmp	r2, r3
 800200e:	d908      	bls.n	8002022 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4960      	ldr	r1, [pc, #384]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d04c      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002036:	4b5a      	ldr	r3, [pc, #360]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d121      	bne.n	8002086 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e0a6      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204e:	4b54      	ldr	r3, [pc, #336]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d115      	bne.n	8002086 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e09a      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002066:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e08e      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002076:	4b4a      	ldr	r3, [pc, #296]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e086      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4943      	ldr	r1, [pc, #268]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002098:	f7fe fdae 	bl	8000bf8 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7fe fdaa 	bl	8000bf8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e06e      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d208      	bcs.n	80020f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	492b      	ldr	r1, [pc, #172]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f6:	4b29      	ldr	r3, [pc, #164]	; (800219c <HAL_RCC_ClockConfig+0x1ec>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d210      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 0207 	bic.w	r2, r3, #7
 800210c:	4923      	ldr	r1, [pc, #140]	; (800219c <HAL_RCC_ClockConfig+0x1ec>)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_RCC_ClockConfig+0x1ec>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e036      	b.n	8002194 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	4918      	ldr	r1, [pc, #96]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4910      	ldr	r1, [pc, #64]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002164:	f000 f824 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	490b      	ldr	r1, [pc, #44]	; (80021a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002182:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x1fc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fce5 	bl	8000b58 <HAL_InitTick>
 800218e:	4603      	mov	r3, r0
 8002190:	72fb      	strb	r3, [r7, #11]

  return status;
 8002192:	7afb      	ldrb	r3, [r7, #11]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40022000 	.word	0x40022000
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08004048 	.word	0x08004048
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000004 	.word	0x20000004

080021b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c8:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x34>
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d121      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d11e      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021e4:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f0:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e005      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800220c:	4a2b      	ldr	r2, [pc, #172]	; (80022bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002214:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10d      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d102      	bne.n	800222e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	e004      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d101      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002234:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002236:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d134      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800223e:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d003      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0xa6>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d003      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0xac>
 8002254:	e005      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002258:	617b      	str	r3, [r7, #20]
      break;
 800225a:	e005      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e002      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	617b      	str	r3, [r7, #20]
      break;
 8002266:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	3301      	adds	r3, #1
 8002274:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	fb03 f202 	mul.w	r2, r3, r2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	0e5b      	lsrs	r3, r3, #25
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	3301      	adds	r3, #1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022a8:	69bb      	ldr	r3, [r7, #24]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	08004060 	.word	0x08004060
 80022c0:	00f42400 	.word	0x00f42400
 80022c4:	007a1200 	.word	0x007a1200

080022c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_RCC_GetHCLKFreq+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000000 	.word	0x20000000

080022e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022e4:	f7ff fff0 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4904      	ldr	r1, [pc, #16]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022f6:	5ccb      	ldrb	r3, [r1, r3]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	08004058 	.word	0x08004058

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002310:	f7ff ffda 	bl	80022c8 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0adb      	lsrs	r3, r3, #11
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4904      	ldr	r1, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08004058 	.word	0x08004058

08002338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002350:	f7ff f9b6 	bl	80016c0 <HAL_PWREx_GetVoltageRange>
 8002354:	6178      	str	r0, [r7, #20]
 8002356:	e014      	b.n	8002382 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002362:	6593      	str	r3, [r2, #88]	; 0x58
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002370:	f7ff f9a6 	bl	80016c0 <HAL_PWREx_GetVoltageRange>
 8002374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002380:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002388:	d10b      	bne.n	80023a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d919      	bls.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2ba0      	cmp	r3, #160	; 0xa0
 8002394:	d902      	bls.n	800239c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002396:	2302      	movs	r3, #2
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e013      	b.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800239c:	2301      	movs	r3, #1
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	e010      	b.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d902      	bls.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023a8:	2303      	movs	r3, #3
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	e00a      	b.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d102      	bne.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023b4:	2302      	movs	r3, #2
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e004      	b.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b70      	cmp	r3, #112	; 0x70
 80023be:	d101      	bne.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c0:	2301      	movs	r3, #1
 80023c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 0207 	bic.w	r2, r3, #7
 80023cc:	4909      	ldr	r1, [pc, #36]	; (80023f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d001      	beq.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40022000 	.word	0x40022000

080023f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002400:	2300      	movs	r3, #0
 8002402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002404:	2300      	movs	r3, #0
 8002406:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002410:	2b00      	cmp	r3, #0
 8002412:	d031      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800241c:	d01a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800241e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002422:	d814      	bhi.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002428:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800242c:	d10f      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800242e:	4b5d      	ldr	r3, [pc, #372]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a5c      	ldr	r2, [pc, #368]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800243a:	e00c      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f000 fa22 	bl	800288c <RCCEx_PLLSAI1_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800244c:	e003      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	74fb      	strb	r3, [r7, #19]
      break;
 8002452:	e000      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800245c:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	494e      	ldr	r1, [pc, #312]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002472:	e001      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 809e 	beq.w	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b40      	ldr	r3, [pc, #256]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	4a3f      	ldr	r2, [pc, #252]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6593      	str	r3, [r2, #88]	; 0x58
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b8:	2301      	movs	r3, #1
 80024ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a39      	ldr	r2, [pc, #228]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024c8:	f7fe fb96 	bl	8000bf8 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ce:	e009      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d0:	f7fe fb92 	bl	8000bf8 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d902      	bls.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	74fb      	strb	r3, [r7, #19]
        break;
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ef      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d15a      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002500:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01e      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	429a      	cmp	r2, r3
 8002510:	d019      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800253e:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d016      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fb52 	bl	8000bf8 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002556:	e00b      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe fb4e 	bl	8000bf8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d902      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	74fb      	strb	r3, [r7, #19]
            break;
 800256e:	e006      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0ec      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10b      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	4904      	ldr	r1, [pc, #16]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800259a:	e009      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800259c:	7cfb      	ldrb	r3, [r7, #19]
 800259e:	74bb      	strb	r3, [r7, #18]
 80025a0:	e006      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b0:	7c7b      	ldrb	r3, [r7, #17]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4b8d      	ldr	r3, [pc, #564]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	4a8c      	ldr	r2, [pc, #560]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ce:	4b87      	ldr	r3, [pc, #540]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f023 0203 	bic.w	r2, r3, #3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4983      	ldr	r1, [pc, #524]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f0:	4b7e      	ldr	r3, [pc, #504]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 020c 	bic.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	497b      	ldr	r1, [pc, #492]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002612:	4b76      	ldr	r3, [pc, #472]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002618:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	4972      	ldr	r1, [pc, #456]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002634:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	496a      	ldr	r1, [pc, #424]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002656:	4b65      	ldr	r3, [pc, #404]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	4961      	ldr	r1, [pc, #388]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002678:	4b5c      	ldr	r3, [pc, #368]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4959      	ldr	r1, [pc, #356]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	4950      	ldr	r1, [pc, #320]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026bc:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	4948      	ldr	r1, [pc, #288]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026de:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	493f      	ldr	r1, [pc, #252]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d028      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002700:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800270e:	4937      	ldr	r1, [pc, #220]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800271e:	d106      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002720:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4a31      	ldr	r2, [pc, #196]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272a:	60d3      	str	r3, [r2, #12]
 800272c:	e011      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002736:	d10c      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3304      	adds	r3, #4
 800273c:	2101      	movs	r1, #1
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f8a4 	bl	800288c <RCCEx_PLLSAI1_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d028      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800275e:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	491f      	ldr	r1, [pc, #124]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800277c:	d106      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002788:	60d3      	str	r3, [r2, #12]
 800278a:	e011      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f875 	bl	800288c <RCCEx_PLLSAI1_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02b      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027da:	d109      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a02      	ldr	r2, [pc, #8]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e6:	60d3      	str	r3, [r2, #12]
 80027e8:	e014      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f8:	d10c      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f843 	bl	800288c <RCCEx_PLLSAI1_Config>
 8002806:	4603      	mov	r3, r0
 8002808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01c      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800283e:	d10c      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	2102      	movs	r1, #2
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f820 	bl	800288c <RCCEx_PLLSAI1_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	4904      	ldr	r1, [pc, #16]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800287c:	7cbb      	ldrb	r3, [r7, #18]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000

0800288c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800289a:	4b74      	ldr	r3, [pc, #464]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d018      	beq.n	80028d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028a6:	4b71      	ldr	r3, [pc, #452]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d10d      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
       ||
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028be:	4b6b      	ldr	r3, [pc, #428]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
       ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d047      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e044      	b.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d018      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0x86>
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d825      	bhi.n	8002930 <RCCEx_PLLSAI1_Config+0xa4>
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d002      	beq.n	80028ee <RCCEx_PLLSAI1_Config+0x62>
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d009      	beq.n	8002900 <RCCEx_PLLSAI1_Config+0x74>
 80028ec:	e020      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ee:	4b5f      	ldr	r3, [pc, #380]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d11d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fe:	e01a      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002900:	4b5a      	ldr	r3, [pc, #360]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d116      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e013      	b.n	800293a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002912:	4b56      	ldr	r3, [pc, #344]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800292e:	e006      	b.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e004      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002936:	bf00      	nop
 8002938:	e002      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293a:	bf00      	nop
 800293c:	e000      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002946:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	430b      	orrs	r3, r1
 800295c:	4943      	ldr	r1, [pc, #268]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800295e:	4313      	orrs	r3, r2
 8002960:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d17c      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002968:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a3f      	ldr	r2, [pc, #252]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800296e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe f940 	bl	8000bf8 <HAL_GetTick>
 8002978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800297a:	e009      	b.n	8002990 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800297c:	f7fe f93c 	bl	8000bf8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d902      	bls.n	8002990 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	73fb      	strb	r3, [r7, #15]
        break;
 800298e:	e005      	b.n	800299c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ef      	bne.n	800297c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d15f      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d110      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a8:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80029b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	0211      	lsls	r1, r2, #8
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	06d2      	lsls	r2, r2, #27
 80029c0:	430a      	orrs	r2, r1
 80029c2:	492a      	ldr	r1, [pc, #168]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	610b      	str	r3, [r1, #16]
 80029c8:	e027      	b.n	8002a1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d112      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d0:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6892      	ldr	r2, [r2, #8]
 80029e0:	0211      	lsls	r1, r2, #8
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6912      	ldr	r2, [r2, #16]
 80029e6:	0852      	lsrs	r2, r2, #1
 80029e8:	3a01      	subs	r2, #1
 80029ea:	0552      	lsls	r2, r2, #21
 80029ec:	430a      	orrs	r2, r1
 80029ee:	491f      	ldr	r1, [pc, #124]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	610b      	str	r3, [r1, #16]
 80029f4:	e011      	b.n	8002a1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6892      	ldr	r2, [r2, #8]
 8002a06:	0211      	lsls	r1, r2, #8
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6952      	ldr	r2, [r2, #20]
 8002a0c:	0852      	lsrs	r2, r2, #1
 8002a0e:	3a01      	subs	r2, #1
 8002a10:	0652      	lsls	r2, r2, #25
 8002a12:	430a      	orrs	r2, r1
 8002a14:	4915      	ldr	r1, [pc, #84]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe f8e7 	bl	8000bf8 <HAL_GetTick>
 8002a2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a2c:	e009      	b.n	8002a42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a2e:	f7fe f8e3 	bl	8000bf8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d902      	bls.n	8002a42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	73fb      	strb	r3, [r7, #15]
          break;
 8002a40:	e005      	b.n	8002a4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0ef      	beq.n	8002a2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000

08002a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e040      	b.n	8002b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fd ff40 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2224      	movs	r2, #36	; 0x24
 8002a9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fbc0 	bl	8003234 <UART_SetConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e022      	b.n	8002b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fe0e 	bl	80036e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fe95 	bl	800382c <UART_CheckIdleState>
 8002b02:	4603      	mov	r3, r0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	f040 8082 	bne.w	8002c2a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_UART_Transmit+0x26>
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e07a      	b.n	8002c2c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_UART_Transmit+0x38>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e073      	b.n	8002c2c <HAL_UART_Transmit+0x120>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2221      	movs	r2, #33	; 0x21
 8002b58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b5a:	f7fe f84d 	bl	8000bf8 <HAL_GetTick>
 8002b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	88fa      	ldrh	r2, [r7, #6]
 8002b64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	88fa      	ldrh	r2, [r7, #6]
 8002b6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b78:	d108      	bne.n	8002b8c <HAL_UART_Transmit+0x80>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	e003      	b.n	8002b94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b9c:	e02d      	b.n	8002bfa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fe88 	bl	80038be <UART_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e039      	b.n	8002c2c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	881a      	ldrh	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	e008      	b.n	8002be8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	b292      	uxth	r2, r2
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1cb      	bne.n	8002b9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2140      	movs	r1, #64	; 0x40
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 fe54 	bl	80038be <UART_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e005      	b.n	8002c2c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b0ba      	sub	sp, #232	; 0xe8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c62:	4013      	ands	r3, r2
 8002c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d115      	bne.n	8002c9c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00f      	beq.n	8002c9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 82a6 	beq.w	80031de <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
      }
      return;
 8002c9a:	e2a0      	b.n	80031de <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8117 	beq.w	8002ed4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_UART_IRQHandler+0x298>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 810a 	beq.w	8002ed4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d011      	beq.n	8002cf0 <HAL_UART_IRQHandler+0xbc>
 8002ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00b      	beq.n	8002cf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d011      	beq.n	8002d20 <HAL_UART_IRQHandler+0xec>
 8002cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d16:	f043 0204 	orr.w	r2, r3, #4
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d011      	beq.n	8002d50 <HAL_UART_IRQHandler+0x11c>
 8002d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00b      	beq.n	8002d50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2208      	movs	r2, #8
 8002d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d82:	f043 0208 	orr.w	r2, r3, #8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d012      	beq.n	8002dbe <HAL_UART_IRQHandler+0x18a>
 8002d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00c      	beq.n	8002dbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 820c 	beq.w	80031e2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d005      	beq.n	8002e16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d04f      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fee2 	bl	8003be0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d141      	bne.n	8002eae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3308      	adds	r3, #8
 8002e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3308      	adds	r3, #8
 8002e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1d9      	bne.n	8002e2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d013      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <HAL_UART_IRQHandler+0x29c>)
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe f94c 	bl	8001128 <HAL_DMA_Abort_IT>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d017      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	e00f      	b.n	8002ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f9ba 	bl	8003220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	e00b      	b.n	8002ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9b6 	bl	8003220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e007      	b.n	8002ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9b2 	bl	8003220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002ec4:	e18d      	b.n	80031e2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec6:	bf00      	nop
    return;
 8002ec8:	e18b      	b.n	80031e2 <HAL_UART_IRQHandler+0x5ae>
 8002eca:	bf00      	nop
 8002ecc:	04000120 	.word	0x04000120
 8002ed0:	08003e7f 	.word	0x08003e7f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	f040 8146 	bne.w	800316a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 813f 	beq.w	800316a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8138 	beq.w	800316a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2210      	movs	r2, #16
 8002f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	f040 80b4 	bne.w	800307a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 815f 	beq.w	80031e6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f32:	429a      	cmp	r2, r3
 8002f34:	f080 8157 	bcs.w	80031e6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 8085 	bne.w	800305e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1da      	bne.n	8002f54 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e1      	bne.n	8002f9e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3308      	adds	r3, #8
 8002fe0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fe4:	e853 3f00 	ldrex	r3, [r3]
 8002fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ffe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003000:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003004:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800300c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e3      	bne.n	8002fda <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800302c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302e:	f023 0310 	bic.w	r3, r3, #16
 8003032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003040:	65bb      	str	r3, [r7, #88]	; 0x58
 8003042:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003046:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800304e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e4      	bne.n	800301e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe f827 	bl	80010ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800306a:	b29b      	uxth	r3, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	b29b      	uxth	r3, r3
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fd fae4 	bl	8000640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003078:	e0b5      	b.n	80031e6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003086:	b29b      	uxth	r3, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80a7 	beq.w	80031ea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800309c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a2 	beq.w	80031ea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ae:	e853 3f00 	ldrex	r3, [r3]
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030c8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e4      	bne.n	80030a6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3308      	adds	r3, #8
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	623b      	str	r3, [r7, #32]
   return(result);
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3308      	adds	r3, #8
 80030fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003100:	633a      	str	r2, [r7, #48]	; 0x30
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e3      	bne.n	80030dc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	60fb      	str	r3, [r7, #12]
   return(result);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0310 	bic.w	r3, r3, #16
 800313a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	69b9      	ldr	r1, [r7, #24]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	617b      	str	r3, [r7, #20]
   return(result);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e4      	bne.n	8003126 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800315c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fa6c 	bl	8000640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003168:	e03f      	b.n	80031ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <HAL_UART_IRQHandler+0x560>
 8003176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800317a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800318a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 feb6 	bl	8003efe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003192:	e02d      	b.n	80031f0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00e      	beq.n	80031be <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01c      	beq.n	80031ee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
    }
    return;
 80031bc:	e017      	b.n	80031ee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d012      	beq.n	80031f0 <HAL_UART_IRQHandler+0x5bc>
 80031ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fe67 	bl	8003eaa <UART_EndTransmit_IT>
    return;
 80031dc:	e008      	b.n	80031f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80031de:	bf00      	nop
 80031e0:	e006      	b.n	80031f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80031e2:	bf00      	nop
 80031e4:	e004      	b.n	80031f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80031e6:	bf00      	nop
 80031e8:	e002      	b.n	80031f0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80031ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80031f0:	37e8      	adds	r7, #232	; 0xe8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop

080031f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003238:	b08a      	sub	sp, #40	; 0x28
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	431a      	orrs	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	4313      	orrs	r3, r2
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b9e      	ldr	r3, [pc, #632]	; (80034dc <UART_SetConfig+0x2a8>)
 8003264:	4013      	ands	r3, r2
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800326c:	430b      	orrs	r3, r1
 800326e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a93      	ldr	r2, [pc, #588]	; (80034e0 <UART_SetConfig+0x2ac>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329c:	4313      	orrs	r3, r2
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a8a      	ldr	r2, [pc, #552]	; (80034e4 <UART_SetConfig+0x2b0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d126      	bne.n	800330c <UART_SetConfig+0xd8>
 80032be:	4b8a      	ldr	r3, [pc, #552]	; (80034e8 <UART_SetConfig+0x2b4>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d81b      	bhi.n	8003304 <UART_SetConfig+0xd0>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0xa0>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	080032e5 	.word	0x080032e5
 80032d8:	080032f5 	.word	0x080032f5
 80032dc:	080032ed 	.word	0x080032ed
 80032e0:	080032fd 	.word	0x080032fd
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ea:	e0ab      	b.n	8003444 <UART_SetConfig+0x210>
 80032ec:	2302      	movs	r3, #2
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f2:	e0a7      	b.n	8003444 <UART_SetConfig+0x210>
 80032f4:	2304      	movs	r3, #4
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e0a3      	b.n	8003444 <UART_SetConfig+0x210>
 80032fc:	2308      	movs	r3, #8
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003302:	e09f      	b.n	8003444 <UART_SetConfig+0x210>
 8003304:	2310      	movs	r3, #16
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e09b      	b.n	8003444 <UART_SetConfig+0x210>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a76      	ldr	r2, [pc, #472]	; (80034ec <UART_SetConfig+0x2b8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d138      	bne.n	8003388 <UART_SetConfig+0x154>
 8003316:	4b74      	ldr	r3, [pc, #464]	; (80034e8 <UART_SetConfig+0x2b4>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d82d      	bhi.n	8003380 <UART_SetConfig+0x14c>
 8003324:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0xf8>)
 8003326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332a:	bf00      	nop
 800332c:	08003361 	.word	0x08003361
 8003330:	08003381 	.word	0x08003381
 8003334:	08003381 	.word	0x08003381
 8003338:	08003381 	.word	0x08003381
 800333c:	08003371 	.word	0x08003371
 8003340:	08003381 	.word	0x08003381
 8003344:	08003381 	.word	0x08003381
 8003348:	08003381 	.word	0x08003381
 800334c:	08003369 	.word	0x08003369
 8003350:	08003381 	.word	0x08003381
 8003354:	08003381 	.word	0x08003381
 8003358:	08003381 	.word	0x08003381
 800335c:	08003379 	.word	0x08003379
 8003360:	2300      	movs	r3, #0
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003366:	e06d      	b.n	8003444 <UART_SetConfig+0x210>
 8003368:	2302      	movs	r3, #2
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336e:	e069      	b.n	8003444 <UART_SetConfig+0x210>
 8003370:	2304      	movs	r3, #4
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003376:	e065      	b.n	8003444 <UART_SetConfig+0x210>
 8003378:	2308      	movs	r3, #8
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337e:	e061      	b.n	8003444 <UART_SetConfig+0x210>
 8003380:	2310      	movs	r3, #16
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003386:	e05d      	b.n	8003444 <UART_SetConfig+0x210>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a58      	ldr	r2, [pc, #352]	; (80034f0 <UART_SetConfig+0x2bc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d125      	bne.n	80033de <UART_SetConfig+0x1aa>
 8003392:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <UART_SetConfig+0x2b4>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800339c:	2b30      	cmp	r3, #48	; 0x30
 800339e:	d016      	beq.n	80033ce <UART_SetConfig+0x19a>
 80033a0:	2b30      	cmp	r3, #48	; 0x30
 80033a2:	d818      	bhi.n	80033d6 <UART_SetConfig+0x1a2>
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d00a      	beq.n	80033be <UART_SetConfig+0x18a>
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d814      	bhi.n	80033d6 <UART_SetConfig+0x1a2>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <UART_SetConfig+0x182>
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d008      	beq.n	80033c6 <UART_SetConfig+0x192>
 80033b4:	e00f      	b.n	80033d6 <UART_SetConfig+0x1a2>
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033bc:	e042      	b.n	8003444 <UART_SetConfig+0x210>
 80033be:	2302      	movs	r3, #2
 80033c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c4:	e03e      	b.n	8003444 <UART_SetConfig+0x210>
 80033c6:	2304      	movs	r3, #4
 80033c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033cc:	e03a      	b.n	8003444 <UART_SetConfig+0x210>
 80033ce:	2308      	movs	r3, #8
 80033d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d4:	e036      	b.n	8003444 <UART_SetConfig+0x210>
 80033d6:	2310      	movs	r3, #16
 80033d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033dc:	e032      	b.n	8003444 <UART_SetConfig+0x210>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a3f      	ldr	r2, [pc, #252]	; (80034e0 <UART_SetConfig+0x2ac>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d12a      	bne.n	800343e <UART_SetConfig+0x20a>
 80033e8:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <UART_SetConfig+0x2b4>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033f6:	d01a      	beq.n	800342e <UART_SetConfig+0x1fa>
 80033f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033fc:	d81b      	bhi.n	8003436 <UART_SetConfig+0x202>
 80033fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003402:	d00c      	beq.n	800341e <UART_SetConfig+0x1ea>
 8003404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003408:	d815      	bhi.n	8003436 <UART_SetConfig+0x202>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <UART_SetConfig+0x1e2>
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003412:	d008      	beq.n	8003426 <UART_SetConfig+0x1f2>
 8003414:	e00f      	b.n	8003436 <UART_SetConfig+0x202>
 8003416:	2300      	movs	r3, #0
 8003418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341c:	e012      	b.n	8003444 <UART_SetConfig+0x210>
 800341e:	2302      	movs	r3, #2
 8003420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003424:	e00e      	b.n	8003444 <UART_SetConfig+0x210>
 8003426:	2304      	movs	r3, #4
 8003428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342c:	e00a      	b.n	8003444 <UART_SetConfig+0x210>
 800342e:	2308      	movs	r3, #8
 8003430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003434:	e006      	b.n	8003444 <UART_SetConfig+0x210>
 8003436:	2310      	movs	r3, #16
 8003438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800343c:	e002      	b.n	8003444 <UART_SetConfig+0x210>
 800343e:	2310      	movs	r3, #16
 8003440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <UART_SetConfig+0x2ac>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f040 808a 	bne.w	8003564 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003454:	2b08      	cmp	r3, #8
 8003456:	d824      	bhi.n	80034a2 <UART_SetConfig+0x26e>
 8003458:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <UART_SetConfig+0x22c>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003485 	.word	0x08003485
 8003464:	080034a3 	.word	0x080034a3
 8003468:	0800348d 	.word	0x0800348d
 800346c:	080034a3 	.word	0x080034a3
 8003470:	08003493 	.word	0x08003493
 8003474:	080034a3 	.word	0x080034a3
 8003478:	080034a3 	.word	0x080034a3
 800347c:	080034a3 	.word	0x080034a3
 8003480:	0800349b 	.word	0x0800349b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7fe ff2c 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 8003488:	61f8      	str	r0, [r7, #28]
        break;
 800348a:	e010      	b.n	80034ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <UART_SetConfig+0x2c0>)
 800348e:	61fb      	str	r3, [r7, #28]
        break;
 8003490:	e00d      	b.n	80034ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003492:	f7fe fe8d 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8003496:	61f8      	str	r0, [r7, #28]
        break;
 8003498:	e009      	b.n	80034ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	61fb      	str	r3, [r7, #28]
        break;
 80034a0:	e005      	b.n	80034ae <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8109 	beq.w	80036c8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d305      	bcc.n	80034d2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d912      	bls.n	80034f8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034d8:	e0f6      	b.n	80036c8 <UART_SetConfig+0x494>
 80034da:	bf00      	nop
 80034dc:	efff69f3 	.word	0xefff69f3
 80034e0:	40008000 	.word	0x40008000
 80034e4:	40013800 	.word	0x40013800
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40004400 	.word	0x40004400
 80034f0:	40004800 	.word	0x40004800
 80034f4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2200      	movs	r2, #0
 80034fc:	461c      	mov	r4, r3
 80034fe:	4615      	mov	r5, r2
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	022b      	lsls	r3, r5, #8
 800350a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800350e:	0222      	lsls	r2, r4, #8
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	6849      	ldr	r1, [r1, #4]
 8003514:	0849      	lsrs	r1, r1, #1
 8003516:	2000      	movs	r0, #0
 8003518:	4688      	mov	r8, r1
 800351a:	4681      	mov	r9, r0
 800351c:	eb12 0a08 	adds.w	sl, r2, r8
 8003520:	eb43 0b09 	adc.w	fp, r3, r9
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003532:	4650      	mov	r0, sl
 8003534:	4659      	mov	r1, fp
 8003536:	f7fc fe49 	bl	80001cc <__aeabi_uldivmod>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4613      	mov	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003548:	d308      	bcc.n	800355c <UART_SetConfig+0x328>
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003550:	d204      	bcs.n	800355c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	e0b5      	b.n	80036c8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003562:	e0b1      	b.n	80036c8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356c:	d15d      	bne.n	800362a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800356e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003572:	2b08      	cmp	r3, #8
 8003574:	d827      	bhi.n	80035c6 <UART_SetConfig+0x392>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <UART_SetConfig+0x348>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035a1 	.word	0x080035a1
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035b1 	.word	0x080035b1
 8003588:	080035c7 	.word	0x080035c7
 800358c:	080035b7 	.word	0x080035b7
 8003590:	080035c7 	.word	0x080035c7
 8003594:	080035c7 	.word	0x080035c7
 8003598:	080035c7 	.word	0x080035c7
 800359c:	080035bf 	.word	0x080035bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a0:	f7fe fe9e 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 80035a4:	61f8      	str	r0, [r7, #28]
        break;
 80035a6:	e014      	b.n	80035d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a8:	f7fe feb0 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 80035ac:	61f8      	str	r0, [r7, #28]
        break;
 80035ae:	e010      	b.n	80035d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b0:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <UART_SetConfig+0x4b0>)
 80035b2:	61fb      	str	r3, [r7, #28]
        break;
 80035b4:	e00d      	b.n	80035d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b6:	f7fe fdfb 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 80035ba:	61f8      	str	r0, [r7, #28]
        break;
 80035bc:	e009      	b.n	80035d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c2:	61fb      	str	r3, [r7, #28]
        break;
 80035c4:	e005      	b.n	80035d2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d077      	beq.n	80036c8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005a      	lsls	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	441a      	add	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b0f      	cmp	r3, #15
 80035f2:	d916      	bls.n	8003622 <UART_SetConfig+0x3ee>
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fa:	d212      	bcs.n	8003622 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f023 030f 	bic.w	r3, r3, #15
 8003604:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	b29a      	uxth	r2, r3
 8003612:	8afb      	ldrh	r3, [r7, #22]
 8003614:	4313      	orrs	r3, r2
 8003616:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	8afa      	ldrh	r2, [r7, #22]
 800361e:	60da      	str	r2, [r3, #12]
 8003620:	e052      	b.n	80036c8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003628:	e04e      	b.n	80036c8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800362a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800362e:	2b08      	cmp	r3, #8
 8003630:	d827      	bhi.n	8003682 <UART_SetConfig+0x44e>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UART_SetConfig+0x404>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	0800365d 	.word	0x0800365d
 800363c:	08003665 	.word	0x08003665
 8003640:	0800366d 	.word	0x0800366d
 8003644:	08003683 	.word	0x08003683
 8003648:	08003673 	.word	0x08003673
 800364c:	08003683 	.word	0x08003683
 8003650:	08003683 	.word	0x08003683
 8003654:	08003683 	.word	0x08003683
 8003658:	0800367b 	.word	0x0800367b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7fe fe40 	bl	80022e0 <HAL_RCC_GetPCLK1Freq>
 8003660:	61f8      	str	r0, [r7, #28]
        break;
 8003662:	e014      	b.n	800368e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003664:	f7fe fe52 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8003668:	61f8      	str	r0, [r7, #28]
        break;
 800366a:	e010      	b.n	800368e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <UART_SetConfig+0x4b0>)
 800366e:	61fb      	str	r3, [r7, #28]
        break;
 8003670:	e00d      	b.n	800368e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003672:	f7fe fd9d 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 8003676:	61f8      	str	r0, [r7, #28]
        break;
 8003678:	e009      	b.n	800368e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367e:	61fb      	str	r3, [r7, #28]
        break;
 8003680:	e005      	b.n	800368e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800368c:	bf00      	nop
    }

    if (pclk != 0U)
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d019      	beq.n	80036c8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	085a      	lsrs	r2, r3, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	441a      	add	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	d909      	bls.n	80036c2 <UART_SetConfig+0x48e>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d205      	bcs.n	80036c2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60da      	str	r2, [r3, #12]
 80036c0:	e002      	b.n	80036c8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3728      	adds	r7, #40	; 0x28
 80036dc:	46bd      	mov	sp, r7
 80036de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036e2:	bf00      	nop
 80036e4:	00f42400 	.word	0x00f42400

080036e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01a      	beq.n	80037fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e6:	d10a      	bne.n	80037fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
  }
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af02      	add	r7, sp, #8
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800383c:	f7fd f9dc 	bl	8000bf8 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d10e      	bne.n	800386e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f82d 	bl	80038be <UART_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e023      	b.n	80038b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b04      	cmp	r3, #4
 800387a:	d10e      	bne.n	800389a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800387c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f817 	bl	80038be <UART_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e00d      	b.n	80038b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b09c      	sub	sp, #112	; 0x70
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ce:	e0a5      	b.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	f000 80a1 	beq.w	8003a1c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7fd f98d 	bl	8000bf8 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80038ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d13e      	bne.n	800396e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003900:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003904:	667b      	str	r3, [r7, #100]	; 0x64
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800390e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003910:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003914:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800391c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e6      	bne.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3308      	adds	r3, #8
 8003928:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	663b      	str	r3, [r7, #96]	; 0x60
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3308      	adds	r3, #8
 8003940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003942:	64ba      	str	r2, [r7, #72]	; 0x48
 8003944:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e5      	bne.n	8003922 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e067      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d04f      	beq.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398a:	d147      	bne.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003994:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
 80039b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e6      	bne.n	8003996 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3308      	adds	r3, #8
 80039ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	613b      	str	r3, [r7, #16]
   return(result);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	66bb      	str	r3, [r7, #104]	; 0x68
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3308      	adds	r3, #8
 80039e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039e8:	623a      	str	r2, [r7, #32]
 80039ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	6a3a      	ldr	r2, [r7, #32]
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e5      	bne.n	80039c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e010      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	f43f af4a 	beq.w	80038d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3770      	adds	r7, #112	; 0x70
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b096      	sub	sp, #88	; 0x58
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2222      	movs	r2, #34	; 0x22
 8003a70:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d02b      	beq.n	8003ad2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a42      	ldr	r2, [pc, #264]	; (8003b88 <UART_Start_Receive_DMA+0x140>)
 8003a80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a41      	ldr	r2, [pc, #260]	; (8003b8c <UART_Start_Receive_DMA+0x144>)
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a40      	ldr	r2, [pc, #256]	; (8003b90 <UART_Start_Receive_DMA+0x148>)
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	2200      	movs	r2, #0
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3324      	adds	r3, #36	; 0x24
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	461a      	mov	r2, r3
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	f7fd fa9d 	bl	8000fec <HAL_DMA_Start_IT>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2210      	movs	r2, #16
 8003abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e055      	b.n	8003b7e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d018      	beq.n	8003b14 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af6:	657b      	str	r3, [r7, #84]	; 0x54
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b02:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b34:	637a      	str	r2, [r7, #52]	; 0x34
 8003b36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	613b      	str	r3, [r7, #16]
   return(result);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b68:	623a      	str	r2, [r7, #32]
 8003b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	69f9      	ldr	r1, [r7, #28]
 8003b6e:	6a3a      	ldr	r2, [r7, #32]
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e5      	bne.n	8003b48 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3758      	adds	r7, #88	; 0x58
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	08003ca7 	.word	0x08003ca7
 8003b8c:	08003dcb 	.word	0x08003dcb
 8003b90:	08003e03 	.word	0x08003e03

08003b94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	; 0x24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbe:	6979      	ldr	r1, [r7, #20]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e6      	bne.n	8003b9c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003bd4:	bf00      	nop
 8003bd6:	3724      	adds	r7, #36	; 0x24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b095      	sub	sp, #84	; 0x54
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c06:	643b      	str	r3, [r7, #64]	; 0x40
 8003c08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e6      	bne.n	8003be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3308      	adds	r3, #8
 8003c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3308      	adds	r3, #8
 8003c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e5      	bne.n	8003c1a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d118      	bne.n	8003c88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f023 0310 	bic.w	r3, r3, #16
 8003c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	613b      	str	r3, [r7, #16]
   return(result);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e6      	bne.n	8003c56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003c9a:	bf00      	nop
 8003c9c:	3754      	adds	r7, #84	; 0x54
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b09c      	sub	sp, #112	; 0x70
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d170      	bne.n	8003da4 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8003cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ce8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e6      	bne.n	8003cca <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	667b      	str	r3, [r7, #100]	; 0x64
 8003d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d1c:	647a      	str	r2, [r7, #68]	; 0x44
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e5      	bne.n	8003cfc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d46:	663b      	str	r3, [r7, #96]	; 0x60
 8003d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d50:	633a      	str	r2, [r7, #48]	; 0x30
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d66:	2220      	movs	r2, #32
 8003d68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d118      	bne.n	8003da4 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0310 	bic.w	r3, r3, #16
 8003d86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	69b9      	ldr	r1, [r7, #24]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e6      	bne.n	8003d72 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d107      	bne.n	8003dbc <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003db2:	4619      	mov	r1, r3
 8003db4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003db6:	f7fc fc43 	bl	8000640 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dba:	e002      	b.n	8003dc2 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8003dbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003dbe:	f7fc fc2f 	bl	8000620 <HAL_UART_RxCpltCallback>
}
 8003dc2:	bf00      	nop
 8003dc4:	3770      	adds	r7, #112	; 0x70
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d109      	bne.n	8003df4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	4619      	mov	r1, r3
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7fc fc27 	bl	8000640 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003df2:	e002      	b.n	8003dfa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff fa09 	bl	800320c <HAL_UART_RxHalfCpltCallback>
}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e14:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b80      	cmp	r3, #128	; 0x80
 8003e28:	d109      	bne.n	8003e3e <UART_DMAError+0x3c>
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b21      	cmp	r3, #33	; 0x21
 8003e2e:	d106      	bne.n	8003e3e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003e38:	6978      	ldr	r0, [r7, #20]
 8003e3a:	f7ff feab 	bl	8003b94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d109      	bne.n	8003e60 <UART_DMAError+0x5e>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b22      	cmp	r3, #34	; 0x22
 8003e50:	d106      	bne.n	8003e60 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003e5a:	6978      	ldr	r0, [r7, #20]
 8003e5c:	f7ff fec0 	bl	8003be0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e66:	f043 0210 	orr.w	r2, r3, #16
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e70:	6978      	ldr	r0, [r7, #20]
 8003e72:	f7ff f9d5 	bl	8003220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff f9bf 	bl	8003220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b088      	sub	sp, #32
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed4:	6979      	ldr	r1, [r7, #20]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	e841 2300 	strex	r3, r2, [r1]
 8003edc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1e6      	bne.n	8003eb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff f981 	bl	80031f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef6:	bf00      	nop
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b08c      	sub	sp, #48	; 0x30
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d14a      	bne.n	8003fbe <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e043      	b.n	8003fc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e03c      	b.n	8003fc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	461a      	mov	r2, r3
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff fd74 	bl	8003a48 <UART_Start_Receive_DMA>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003f66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d124      	bne.n	8003fb8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d11d      	bne.n	8003fb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2210      	movs	r2, #16
 8003f7c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	617b      	str	r3, [r7, #20]
   return(result);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f043 0310 	orr.w	r3, r3, #16
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6a39      	ldr	r1, [r7, #32]
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e6      	bne.n	8003f7e <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8003fb0:	e002      	b.n	8003fb8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003fbc:	e000      	b.n	8003fc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
  }
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3730      	adds	r7, #48	; 0x30
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <__libc_init_array>:
 8003fc8:	b570      	push	{r4, r5, r6, lr}
 8003fca:	4d0d      	ldr	r5, [pc, #52]	; (8004000 <__libc_init_array+0x38>)
 8003fcc:	4c0d      	ldr	r4, [pc, #52]	; (8004004 <__libc_init_array+0x3c>)
 8003fce:	1b64      	subs	r4, r4, r5
 8003fd0:	10a4      	asrs	r4, r4, #2
 8003fd2:	2600      	movs	r6, #0
 8003fd4:	42a6      	cmp	r6, r4
 8003fd6:	d109      	bne.n	8003fec <__libc_init_array+0x24>
 8003fd8:	4d0b      	ldr	r5, [pc, #44]	; (8004008 <__libc_init_array+0x40>)
 8003fda:	4c0c      	ldr	r4, [pc, #48]	; (800400c <__libc_init_array+0x44>)
 8003fdc:	f000 f820 	bl	8004020 <_init>
 8003fe0:	1b64      	subs	r4, r4, r5
 8003fe2:	10a4      	asrs	r4, r4, #2
 8003fe4:	2600      	movs	r6, #0
 8003fe6:	42a6      	cmp	r6, r4
 8003fe8:	d105      	bne.n	8003ff6 <__libc_init_array+0x2e>
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
 8003fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff0:	4798      	blx	r3
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	e7ee      	b.n	8003fd4 <__libc_init_array+0xc>
 8003ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffa:	4798      	blx	r3
 8003ffc:	3601      	adds	r6, #1
 8003ffe:	e7f2      	b.n	8003fe6 <__libc_init_array+0x1e>
 8004000:	08004098 	.word	0x08004098
 8004004:	08004098 	.word	0x08004098
 8004008:	08004098 	.word	0x08004098
 800400c:	0800409c 	.word	0x0800409c

08004010 <memset>:
 8004010:	4402      	add	r2, r0
 8004012:	4603      	mov	r3, r0
 8004014:	4293      	cmp	r3, r2
 8004016:	d100      	bne.n	800401a <memset+0xa>
 8004018:	4770      	bx	lr
 800401a:	f803 1b01 	strb.w	r1, [r3], #1
 800401e:	e7f9      	b.n	8004014 <memset+0x4>

08004020 <_init>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	bf00      	nop
 8004024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004026:	bc08      	pop	{r3}
 8004028:	469e      	mov	lr, r3
 800402a:	4770      	bx	lr

0800402c <_fini>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	bf00      	nop
 8004030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004032:	bc08      	pop	{r3}
 8004034:	469e      	mov	lr, r3
 8004036:	4770      	bx	lr
