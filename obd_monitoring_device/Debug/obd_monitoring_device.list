
obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a25c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ff4  0800a3f0  0800a3f0  0001a3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3e4  0800c3e4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3e4  0800c3e4  0001c3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3ec  0800c3ec  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3ec  0800c3ec  0001c3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3f0  0800c3f0  0001c3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c3f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200001ec  0800c5e0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  0800c5e0  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c8b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003259  00000000  00000000  00033ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00037100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00038170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023755  00000000  00000000  00039088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f8e  00000000  00000000  0005c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc2f8  00000000  00000000  0007276b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ea63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005450  00000000  00000000  0013eab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3d4 	.word	0x0800a3d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a3d4 	.word	0x0800a3d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CAN1_Init>:
extern IWDG_HandleTypeDef hiwdg;
CAN_HandleTypeDef hcan1;
uint32_t tx_mailbox;

void MX_CAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_CAN1_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f6e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f9c:	f001 fde4 	bl	8002b68 <HAL_CAN_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_CAN1_Init+0x5e>
	{
	  Error_Handler();
 8000fa6:	f001 f931 	bl	800220c <Error_Handler>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000208 	.word	0x20000208
 8000fb4:	40006400 	.word	0x40006400

08000fb8 <canConfig>:

void canConfig(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8000fca:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000fce:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8000fd4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fd8:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <canConfig+0x64>)
 8000fec:	f001 fec1 	bl	8002d72 <HAL_CAN_ConfigFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <canConfig+0x42>
	{
		Error_Handler();
 8000ff6:	f001 f909 	bl	800220c <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <canConfig+0x64>)
 8000ffc:	f001 ff83 	bl	8002f06 <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <canConfig+0x52>
	{
		Error_Handler();
 8001006:	f001 f901 	bl	800220c <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <canConfig+0x64>)
 800100e:	f002 f9a0 	bl	8003352 <HAL_CAN_ActivateNotification>
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000208 	.word	0x20000208

08001020 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	f107 0210 	add.w	r2, r7, #16
 8001030:	2100      	movs	r1, #0
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001034:	f002 f87b 	bl	800312e <HAL_CAN_GetRxMessage>

	float resp_value = OBD2_PID_Parse(rx_data);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fb23 	bl	8001688 <OBD2_PID_Parse>
 8001042:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	OBD2_ShowOnDisplay(resp_value);
 8001046:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800104a:	f000 ff03 	bl	8001e54 <OBD2_ShowOnDisplay>

	HAL_IWDG_Refresh(&hiwdg);
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001050:	f003 fd12 	bl	8004a78 <HAL_IWDG_Refresh>
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	; 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000208 	.word	0x20000208
 8001060:	2000032c 	.word	0x2000032c

08001064 <CAN_SEND_MESSAGE>:

void CAN_SEND_MESSAGE(uint8_t *txFrame)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = DEVICE_CAN_ID;
 800106c:	f240 73df 	movw	r3, #2015	; 0x7df
 8001070:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 8001072:	2308      	movs	r3, #8
 8001074:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, txFrame, &tx_mailbox) != HAL_OK)
 800107e:	f107 0108 	add.w	r1, r7, #8
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <CAN_SEND_MESSAGE+0x3c>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <CAN_SEND_MESSAGE+0x40>)
 8001088:	f001 ff81 	bl	8002f8e <HAL_CAN_AddTxMessage>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <CAN_SEND_MESSAGE+0x32>
	{
		Error_Handler();
 8001092:	f001 f8bb 	bl	800220c <Error_Handler>
	}

}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000230 	.word	0x20000230
 80010a4:	20000208 	.word	0x20000208

080010a8 <KLine_Init>:
static void MX_GPIO_KLineUART_Init(void);
static void UART_PIN_State(uint8_t state);
static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght);
static void MX_USART1_UART_Init(uint16_t baud_rate);

obd_protocol KLine_Init(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 80010ae:	f000 f911 	bl	80012d4 <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 80010b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010b6:	f001 fd33 	bl	8002b20 <HAL_Delay>
	UART_PIN_State(0); //0
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f920 	bl	8001300 <UART_PIN_State>
	HAL_Delay(200);
 80010c0:	20c8      	movs	r0, #200	; 0xc8
 80010c2:	f001 fd2d 	bl	8002b20 <HAL_Delay>
	UART_PIN_State(1);//11
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 f91a 	bl	8001300 <UART_PIN_State>
	HAL_Delay(400);
 80010cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010d0:	f001 fd26 	bl	8002b20 <HAL_Delay>
	UART_PIN_State(0);//00
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f913 	bl	8001300 <UART_PIN_State>
	HAL_Delay(400);
 80010da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010de:	f001 fd1f 	bl	8002b20 <HAL_Delay>
	UART_PIN_State(1);//11
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 f90c 	bl	8001300 <UART_PIN_State>
	HAL_Delay(400);
 80010e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010ec:	f001 fd18 	bl	8002b20 <HAL_Delay>
	UART_PIN_State(0);//00
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 f905 	bl	8001300 <UART_PIN_State>
	HAL_Delay(400);
 80010f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010fa:	f001 fd11 	bl	8002b20 <HAL_Delay>
	UART_PIN_State(1);//1
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 f8fe 	bl	8001300 <UART_PIN_State>

	MX_USART1_UART_Init(10400);
 8001104:	f642 00a0 	movw	r0, #10400	; 0x28a0
 8001108:	f000 fa12 	bl	8001530 <MX_USART1_UART_Init>

	HAL_UART_Receive(&huart1, uartBuf, 3, 500);
 800110c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001110:	2203      	movs	r2, #3
 8001112:	492d      	ldr	r1, [pc, #180]	; (80011c8 <KLine_Init+0x120>)
 8001114:	482d      	ldr	r0, [pc, #180]	; (80011cc <KLine_Init+0x124>)
 8001116:	f004 ff92 	bl	800603e <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <KLine_Init+0x120>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b55      	cmp	r3, #85	; 0x55
 8001120:	d001      	beq.n	8001126 <KLine_Init+0x7e>
	{
		return OBD_NONE;
 8001122:	2300      	movs	r3, #0
 8001124:	e04b      	b.n	80011be <KLine_Init+0x116>
	}
	else if(uartBuf[1] == uartBuf[2])
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <KLine_Init+0x120>)
 8001128:	785a      	ldrb	r2, [r3, #1]
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <KLine_Init+0x120>)
 800112c:	789b      	ldrb	r3, [r3, #2]
 800112e:	429a      	cmp	r2, r3
 8001130:	d126      	bne.n	8001180 <KLine_Init+0xd8>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <KLine_Init+0x120>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	43db      	mvns	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 800113c:	2019      	movs	r0, #25
 800113e:	f001 fcef 	bl	8002b20 <HAL_Delay>
			HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 8001142:	1df9      	adds	r1, r7, #7
 8001144:	2332      	movs	r3, #50	; 0x32
 8001146:	2201      	movs	r2, #1
 8001148:	4820      	ldr	r0, [pc, #128]	; (80011cc <KLine_Init+0x124>)
 800114a:	f004 fee4 	bl	8005f16 <HAL_UART_Transmit>
			HAL_Delay(25);
 800114e:	2019      	movs	r0, #25
 8001150:	f001 fce6 	bl	8002b20 <HAL_Delay>
			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <KLine_Init+0x124>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	8b1b      	ldrh	r3, [r3, #24]
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <KLine_Init+0x124>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0208 	orr.w	r2, r2, #8
 8001164:	b292      	uxth	r2, r2
 8001166:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2201      	movs	r2, #1
 800116c:	4918      	ldr	r1, [pc, #96]	; (80011d0 <KLine_Init+0x128>)
 800116e:	4817      	ldr	r0, [pc, #92]	; (80011cc <KLine_Init+0x124>)
 8001170:	f004 ff65 	bl	800603e <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
			kline_kb = uartBuf[1];
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <KLine_Init+0x120>)
 8001176:	785a      	ldrb	r2, [r3, #1]
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <KLine_Init+0x12c>)
 800117a:	701a      	strb	r2, [r3, #0]
			return OBD_PROTO_ISO9141;
 800117c:	2301      	movs	r3, #1
 800117e:	e01e      	b.n	80011be <KLine_Init+0x116>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <KLine_Init+0x120>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	43db      	mvns	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 800118a:	2019      	movs	r0, #25
 800118c:	f001 fcc8 	bl	8002b20 <HAL_Delay>
		HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 8001190:	1db9      	adds	r1, r7, #6
 8001192:	2332      	movs	r3, #50	; 0x32
 8001194:	2201      	movs	r2, #1
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <KLine_Init+0x124>)
 8001198:	f004 febd 	bl	8005f16 <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <KLine_Init+0x124>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	8b1b      	ldrh	r3, [r3, #24]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <KLine_Init+0x124>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0208 	orr.w	r2, r2, #8
 80011ac:	b292      	uxth	r2, r2
 80011ae:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	2201      	movs	r2, #1
 80011b4:	4906      	ldr	r1, [pc, #24]	; (80011d0 <KLine_Init+0x128>)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <KLine_Init+0x124>)
 80011b8:	f004 ff41 	bl	800603e <HAL_UART_Receive>
		return OBD_PROTO_KWP2000_SLOW;
 80011bc:	2302      	movs	r3, #2
	}
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000384 	.word	0x20000384
 80011cc:	20000250 	.word	0x20000250
 80011d0:	2000024a 	.word	0x2000024a
 80011d4:	2000024b 	.word	0x2000024b

080011d8 <KWP2000_Fast_Init>:

obd_protocol KWP2000_Fast_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 80011de:	4a39      	ldr	r2, [pc, #228]	; (80012c4 <KWP2000_Fast_Init+0xec>)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e8:	6018      	str	r0, [r3, #0]
 80011ea:	3304      	adds	r3, #4
 80011ec:	7019      	strb	r1, [r3, #0]
	uint8_t resp_msg[7]={0};
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	2100      	movs	r1, #0
 80011f8:	460a      	mov	r2, r1
 80011fa:	801a      	strh	r2, [r3, #0]
 80011fc:	460a      	mov	r2, r1
 80011fe:	709a      	strb	r2, [r3, #2]
	checksum = 0;
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <KWP2000_Fast_Init+0xf0>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]

	HAL_UART_DeInit(&huart1);
 8001206:	4831      	ldr	r0, [pc, #196]	; (80012cc <KWP2000_Fast_Init+0xf4>)
 8001208:	f004 fe38 	bl	8005e7c <HAL_UART_DeInit>
	HAL_Delay(3000);
 800120c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001210:	f001 fc86 	bl	8002b20 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 8001214:	f000 f85e 	bl	80012d4 <MX_GPIO_KLineUART_Init>
	UART_PIN_State(0);
 8001218:	2000      	movs	r0, #0
 800121a:	f000 f871 	bl	8001300 <UART_PIN_State>
	HAL_Delay(25);
 800121e:	2019      	movs	r0, #25
 8001220:	f001 fc7e 	bl	8002b20 <HAL_Delay>
	UART_PIN_State(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f000 f86b 	bl	8001300 <UART_PIN_State>
	HAL_Delay(25);
 800122a:	2019      	movs	r0, #25
 800122c:	f001 fc78 	bl	8002b20 <HAL_Delay>
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001230:	4826      	ldr	r0, [pc, #152]	; (80012cc <KWP2000_Fast_Init+0xf4>)
 8001232:	f004 fdd5 	bl	8005de0 <HAL_UART_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <KWP2000_Fast_Init+0x68>
	{
		Error_Handler();
 800123c:	f000 ffe6 	bl	800220c <Error_Handler>
	}
	HAL_UART_Transmit(&huart1, start_msg, 5, 50);
 8001240:	f107 010c 	add.w	r1, r7, #12
 8001244:	2332      	movs	r3, #50	; 0x32
 8001246:	2205      	movs	r2, #5
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <KWP2000_Fast_Init+0xf4>)
 800124a:	f004 fe64 	bl	8005f16 <HAL_UART_Transmit>
	HAL_Delay(20);
 800124e:	2014      	movs	r0, #20
 8001250:	f001 fc66 	bl	8002b20 <HAL_Delay>
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <KWP2000_Fast_Init+0xf4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	8b1b      	ldrh	r3, [r3, #24]
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <KWP2000_Fast_Init+0xf4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0208 	orr.w	r2, r2, #8
 8001264:	b292      	uxth	r2, r2
 8001266:	831a      	strh	r2, [r3, #24]
	HAL_UART_Receive(&huart1, resp_msg, 7, 500);
 8001268:	1d39      	adds	r1, r7, #4
 800126a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800126e:	2207      	movs	r2, #7
 8001270:	4816      	ldr	r0, [pc, #88]	; (80012cc <KWP2000_Fast_Init+0xf4>)
 8001272:	f004 fee4 	bl	800603e <HAL_UART_Receive>
	for(int i = 0; i < 6; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e00c      	b.n	8001296 <KWP2000_Fast_Init+0xbe>
	{
		checksum = checksum + resp_msg[i];
 800127c:	1d3a      	adds	r2, r7, #4
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4413      	add	r3, r2
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <KWP2000_Fast_Init+0xf0>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4413      	add	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <KWP2000_Fast_Init+0xf0>)
 800128e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2b05      	cmp	r3, #5
 800129a:	ddef      	ble.n	800127c <KWP2000_Fast_Init+0xa4>
	}
	checksum = checksum % 256;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <KWP2000_Fast_Init+0xf0>)
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <KWP2000_Fast_Init+0xf0>)
 80012a2:	701a      	strb	r2, [r3, #0]
	if(checksum == resp_msg[6])
 80012a4:	7aba      	ldrb	r2, [r7, #10]
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <KWP2000_Fast_Init+0xf0>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d104      	bne.n	80012b8 <KWP2000_Fast_Init+0xe0>
	{
		ecu_addr = resp_msg[2];
 80012ae:	79ba      	ldrb	r2, [r7, #6]
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <KWP2000_Fast_Init+0xf8>)
 80012b2:	701a      	strb	r2, [r3, #0]
		return OBD_PROTO_KWP2000_FAST;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e000      	b.n	80012ba <KWP2000_Fast_Init+0xe2>
	}
	else
		return OBD_NONE;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800a3f0 	.word	0x0800a3f0
 80012c8:	20000249 	.word	0x20000249
 80012cc:	20000250 	.word	0x20000250
 80012d0:	2000024a 	.word	0x2000024a

080012d4 <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
 80012da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f4:	f002 fd52 	bl	8003d9c <HAL_GPIO_Init>
}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <UART_PIN_State>:

static void UART_PIN_State(uint8_t state)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10e      	bne.n	800132e <UART_PIN_State+0x2e>
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f002 feb9 	bl	8004090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f002 feb2 	bl	8004090 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}
 800132c:	e00d      	b.n	800134a <UART_PIN_State+0x4a>
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001338:	f002 feaa 	bl	8004090 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f002 fea3 	bl	8004090 <HAL_GPIO_WritePin>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <KLine_SEND_MESSAGE>:

void KLine_SEND_MESSAGE(uint8_t* tx_frame)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 800135c:	2368      	movs	r3, #104	; 0x68
 800135e:	733b      	strb	r3, [r7, #12]
 8001360:	236a      	movs	r3, #106	; 0x6a
 8001362:	737b      	strb	r3, [r7, #13]
 8001364:	23f1      	movs	r3, #241	; 0xf1
 8001366:	73bb      	strb	r3, [r7, #14]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	743b      	strb	r3, [r7, #16]
 8001374:	2300      	movs	r3, #0
 8001376:	747b      	strb	r3, [r7, #17]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3301      	adds	r3, #1
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fda0 	bl	8001ec4 <PID_Get_Lenght>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <KLine_SEND_MESSAGE+0xb0>)
 800138a:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <KLine_SEND_MESSAGE+0xb4>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	e00d      	b.n	80013b4 <KLine_SEND_MESSAGE+0x60>
	{
		checksum += kline_msg[i];
 8001398:	f107 020c 	add.w	r2, r7, #12
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	4413      	add	r3, r2
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <KLine_SEND_MESSAGE+0xb4>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <KLine_SEND_MESSAGE+0xb4>)
 80013ac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d9ee      	bls.n	8001398 <KLine_SEND_MESSAGE+0x44>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <KLine_SEND_MESSAGE+0xb4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	747b      	strb	r3, [r7, #17]

	HAL_UART_Transmit(&huart1, kline_msg, sizeof(kline_msg), 12);
 80013c0:	f107 010c 	add.w	r1, r7, #12
 80013c4:	230c      	movs	r3, #12
 80013c6:	2206      	movs	r2, #6
 80013c8:	4810      	ldr	r0, [pc, #64]	; (800140c <KLine_SEND_MESSAGE+0xb8>)
 80013ca:	f004 fda4 	bl	8005f16 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <KLine_SEND_MESSAGE+0xb8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	8b1b      	ldrh	r3, [r3, #24]
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <KLine_SEND_MESSAGE+0xb8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0208 	orr.w	r2, r2, #8
 80013de:	b292      	uxth	r2, r2
 80013e0:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 4);
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <KLine_SEND_MESSAGE+0xb0>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	3304      	adds	r3, #4
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	; (8001410 <KLine_SEND_MESSAGE+0xbc>)
 80013f0:	4806      	ldr	r0, [pc, #24]	; (800140c <KLine_SEND_MESSAGE+0xb8>)
 80013f2:	f004 fef5 	bl	80061e0 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80013f6:	203c      	movs	r0, #60	; 0x3c
 80013f8:	f001 fb92 	bl	8002b20 <HAL_Delay>
}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000024c 	.word	0x2000024c
 8001408:	20000249 	.word	0x20000249
 800140c:	20000250 	.word	0x20000250
 8001410:	20000234 	.word	0x20000234

08001414 <KWP2000_SEND_MESSAGE>:

void KWP2000_SEND_MESSAGE(uint8_t* tx_frame)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, ecu_addr, 0xF1, tx_frame[0], tx_frame[1], 0};
 800141c:	23c2      	movs	r3, #194	; 0xc2
 800141e:	733b      	strb	r3, [r7, #12]
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <KWP2000_SEND_MESSAGE+0xb4>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	737b      	strb	r3, [r7, #13]
 8001426:	23f1      	movs	r3, #241	; 0xf1
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	785b      	ldrb	r3, [r3, #1]
 8001434:	743b      	strb	r3, [r7, #16]
 8001436:	2300      	movs	r3, #0
 8001438:	747b      	strb	r3, [r7, #17]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3301      	adds	r3, #1
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fd3f 	bl	8001ec4 <PID_Get_Lenght>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <KWP2000_SEND_MESSAGE+0xb8>)
 800144c:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <KWP2000_SEND_MESSAGE+0xbc>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00d      	b.n	8001476 <KWP2000_SEND_MESSAGE+0x62>
	{
		checksum += kwp_msg[i];
 800145a:	f107 020c 	add.w	r2, r7, #12
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	4413      	add	r3, r2
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <KWP2000_SEND_MESSAGE+0xbc>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <KWP2000_SEND_MESSAGE+0xbc>)
 800146e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b04      	cmp	r3, #4
 800147a:	d9ee      	bls.n	800145a <KWP2000_SEND_MESSAGE+0x46>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <KWP2000_SEND_MESSAGE+0xbc>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	747b      	strb	r3, [r7, #17]

	HAL_UART_Transmit(&huart1, kwp_msg, sizeof(kwp_msg), 12);
 8001482:	f107 010c 	add.w	r1, r7, #12
 8001486:	230c      	movs	r3, #12
 8001488:	2206      	movs	r2, #6
 800148a:	4812      	ldr	r0, [pc, #72]	; (80014d4 <KWP2000_SEND_MESSAGE+0xc0>)
 800148c:	f004 fd43 	bl	8005f16 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <KWP2000_SEND_MESSAGE+0xc0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	8b1b      	ldrh	r3, [r3, #24]
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <KWP2000_SEND_MESSAGE+0xc0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0208 	orr.w	r2, r2, #8
 80014a0:	b292      	uxth	r2, r2
 80014a2:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 4);
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <KWP2000_SEND_MESSAGE+0xb8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3304      	adds	r3, #4
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	4909      	ldr	r1, [pc, #36]	; (80014d8 <KWP2000_SEND_MESSAGE+0xc4>)
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <KWP2000_SEND_MESSAGE+0xc0>)
 80014b4:	f004 fe94 	bl	80061e0 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80014b8:	203c      	movs	r0, #60	; 0x3c
 80014ba:	f001 fb31 	bl	8002b20 <HAL_Delay>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000024a 	.word	0x2000024a
 80014cc:	2000024c 	.word	0x2000024c
 80014d0:	20000249 	.word	0x20000249
 80014d4:	20000250 	.word	0x20000250
 80014d8:	20000234 	.word	0x20000234

080014dc <Verify_Checksum>:

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	e009      	b.n	8001506 <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	4413      	add	r3, r2
 80014fe:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght; i++)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	3301      	adds	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbf1      	blt.n	80014f2 <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	3b01      	subs	r3, #1
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	429a      	cmp	r2, r3
 800151c:	d101      	bne.n	8001522 <Verify_Checksum+0x46>
	{
		return 1;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <Verify_Checksum+0x48>
	}
	return 0;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(uint16_t baud_rate)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
  huart1.Instance = USART1;
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_USART1_UART_Init+0x68>)
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <MX_USART1_UART_Init+0x6c>)
 800153e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud_rate;
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <MX_USART1_UART_Init+0x68>)
 8001544:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_USART1_UART_Init+0x68>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_USART1_UART_Init+0x68>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_USART1_UART_Init+0x68>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_USART1_UART_Init+0x68>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_USART1_UART_Init+0x68>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_USART1_UART_Init+0x68>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_USART1_UART_Init+0x68>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_USART1_UART_Init+0x68>)
 8001572:	2201      	movs	r2, #1
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_USART1_UART_Init+0x68>)
 8001578:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_USART1_UART_Init+0x68>)
 8001580:	f004 fc2e 	bl	8005de0 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800158a:	f000 fe3f 	bl	800220c <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000250 	.word	0x20000250
 800159c:	40013800 	.word	0x40013800

080015a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	if(Verify_Checksum(kline_rx_buf, pid_length + 4))
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_UART_RxCpltCallback+0x6c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	3304      	adds	r3, #4
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4619      	mov	r1, r3
 80015b2:	4817      	ldr	r0, [pc, #92]	; (8001610 <HAL_UART_RxCpltCallback+0x70>)
 80015b4:	f7ff ff92 	bl	80014dc <Verify_Checksum>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d022      	beq.n	8001604 <HAL_UART_RxCpltCallback+0x64>
	{
		uint8_t j = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 80015c2:	2302      	movs	r3, #2
 80015c4:	73bb      	strb	r3, [r7, #14]
 80015c6:	e00b      	b.n	80015e0 <HAL_UART_RxCpltCallback+0x40>
		{
			rx_frame[j] = kline_rx_buf[i];
 80015c8:	7bba      	ldrb	r2, [r7, #14]
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	4910      	ldr	r1, [pc, #64]	; (8001610 <HAL_UART_RxCpltCallback+0x70>)
 80015ce:	5c89      	ldrb	r1, [r1, r2]
 80015d0:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_UART_RxCpltCallback+0x74>)
 80015d2:	54d1      	strb	r1, [r2, r3]
			j++;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	3301      	adds	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 80015da:	7bbb      	ldrb	r3, [r7, #14]
 80015dc:	3301      	adds	r3, #1
 80015de:	73bb      	strb	r3, [r7, #14]
 80015e0:	7bba      	ldrb	r2, [r7, #14]
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_UART_RxCpltCallback+0x6c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	3304      	adds	r3, #4
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dded      	ble.n	80015c8 <HAL_UART_RxCpltCallback+0x28>
		}

		OBD2_ShowOnDisplay(OBD2_PID_Parse(rx_frame));
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <HAL_UART_RxCpltCallback+0x74>)
 80015ee:	f000 f84b 	bl	8001688 <OBD2_PID_Parse>
 80015f2:	eef0 7a40 	vmov.f32	s15, s0
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	f000 fc2b 	bl	8001e54 <OBD2_ShowOnDisplay>

		HAL_IWDG_Refresh(&hiwdg);
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_UART_RxCpltCallback+0x78>)
 8001600:	f003 fa3a 	bl	8004a78 <HAL_IWDG_Refresh>
	}
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000024c 	.word	0x2000024c
 8001610:	20000234 	.word	0x20000234
 8001614:	20000244 	.word	0x20000244
 8001618:	2000032c 	.word	0x2000032c

0800161c <OBD2_Request>:
//	strcat(txTest2, "\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t *)txTest2, sizeof(txTest2),10);
//}

void OBD2_Request(OBD obd)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	80b8      	strh	r0, [r7, #4]
	if(obd.used_protocol == OBD_PROTO_CAN)
 8001624:	793b      	ldrb	r3, [r7, #4]
 8001626:	2b04      	cmp	r3, #4
 8001628:	d115      	bne.n	8001656 <OBD2_Request+0x3a>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 800162a:	2302      	movs	r3, #2
 800162c:	743b      	strb	r3, [r7, #16]
 800162e:	2301      	movs	r3, #1
 8001630:	747b      	strb	r3, [r7, #17]
 8001632:	797b      	ldrb	r3, [r7, #5]
 8001634:	74bb      	strb	r3, [r7, #18]
 8001636:	2300      	movs	r3, #0
 8001638:	74fb      	strb	r3, [r7, #19]
 800163a:	2300      	movs	r3, #0
 800163c:	753b      	strb	r3, [r7, #20]
 800163e:	2300      	movs	r3, #0
 8001640:	757b      	strb	r3, [r7, #21]
 8001642:	2300      	movs	r3, #0
 8001644:	75bb      	strb	r3, [r7, #22]
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]
		CAN_SEND_MESSAGE(tx_data_CAN);
 800164a:	f107 0310 	add.w	r3, r7, #16
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fd08 	bl	8001064 <CAN_SEND_MESSAGE>
		else
		{
			KWP2000_SEND_MESSAGE(tx_data_ISO);
		}
	}
}
 8001654:	e011      	b.n	800167a <OBD2_Request+0x5e>
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 8001656:	2301      	movs	r3, #1
 8001658:	733b      	strb	r3, [r7, #12]
 800165a:	797b      	ldrb	r3, [r7, #5]
 800165c:	737b      	strb	r3, [r7, #13]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 800165e:	793b      	ldrb	r3, [r7, #4]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d105      	bne.n	8001670 <OBD2_Request+0x54>
			KLine_SEND_MESSAGE(tx_data_ISO);
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fe73 	bl	8001354 <KLine_SEND_MESSAGE>
}
 800166e:	e004      	b.n	800167a <OBD2_Request+0x5e>
			KWP2000_SEND_MESSAGE(tx_data_ISO);
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fecd 	bl	8001414 <KWP2000_SEND_MESSAGE>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	0000      	movs	r0, r0
 8001684:	0000      	movs	r0, r0
	...

08001688 <OBD2_PID_Parse>:

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3302      	adds	r3, #2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3b04      	subs	r3, #4
 800169e:	2ba2      	cmp	r3, #162	; 0xa2
 80016a0:	f200 8399 	bhi.w	8001dd6 <OBD2_PID_Parse+0x74e>
 80016a4:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <OBD2_PID_Parse+0x24>)
 80016a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016aa:	bf00      	nop
 80016ac:	08001939 	.word	0x08001939
 80016b0:	08001941 	.word	0x08001941
 80016b4:	08001957 	.word	0x08001957
 80016b8:	08001957 	.word	0x08001957
 80016bc:	08001957 	.word	0x08001957
 80016c0:	08001957 	.word	0x08001957
 80016c4:	0800195d 	.word	0x0800195d
 80016c8:	08001979 	.word	0x08001979
 80016cc:	0800198d 	.word	0x0800198d
 80016d0:	080019b3 	.word	0x080019b3
 80016d4:	080019c7 	.word	0x080019c7
 80016d8:	080019e1 	.word	0x080019e1
 80016dc:	080019f7 	.word	0x080019f7
 80016e0:	08001a21 	.word	0x08001a21
 80016e4:	08001dd7 	.word	0x08001dd7
 80016e8:	08001dd7 	.word	0x08001dd7
 80016ec:	08001a29 	.word	0x08001a29
 80016f0:	08001a29 	.word	0x08001a29
 80016f4:	08001a29 	.word	0x08001a29
 80016f8:	08001a29 	.word	0x08001a29
 80016fc:	08001a29 	.word	0x08001a29
 8001700:	08001a29 	.word	0x08001a29
 8001704:	08001a29 	.word	0x08001a29
 8001708:	08001a29 	.word	0x08001a29
 800170c:	08001dd7 	.word	0x08001dd7
 8001710:	08001dd7 	.word	0x08001dd7
 8001714:	08001dd7 	.word	0x08001dd7
 8001718:	08001a47 	.word	0x08001a47
 800171c:	08001dd7 	.word	0x08001dd7
 8001720:	08001a47 	.word	0x08001a47
 8001724:	08001a65 	.word	0x08001a65
 8001728:	08001a95 	.word	0x08001a95
 800172c:	08001abb 	.word	0x08001abb
 8001730:	08001abb 	.word	0x08001abb
 8001734:	08001abb 	.word	0x08001abb
 8001738:	08001abb 	.word	0x08001abb
 800173c:	08001abb 	.word	0x08001abb
 8001740:	08001abb 	.word	0x08001abb
 8001744:	08001abb 	.word	0x08001abb
 8001748:	08001abb 	.word	0x08001abb
 800174c:	08001ac3 	.word	0x08001ac3
 8001750:	08001acb 	.word	0x08001acb
 8001754:	08001ad1 	.word	0x08001ad1
 8001758:	08001ad1 	.word	0x08001ad1
 800175c:	08001ad9 	.word	0x08001ad9
 8001760:	08001aed 	.word	0x08001aed
 8001764:	08001b0b 	.word	0x08001b0b
 8001768:	08001b31 	.word	0x08001b31
 800176c:	08001b45 	.word	0x08001b45
 8001770:	08001b45 	.word	0x08001b45
 8001774:	08001b45 	.word	0x08001b45
 8001778:	08001b45 	.word	0x08001b45
 800177c:	08001b45 	.word	0x08001b45
 8001780:	08001b45 	.word	0x08001b45
 8001784:	08001b45 	.word	0x08001b45
 8001788:	08001b45 	.word	0x08001b45
 800178c:	08001b4d 	.word	0x08001b4d
 8001790:	08001b4d 	.word	0x08001b4d
 8001794:	08001b4d 	.word	0x08001b4d
 8001798:	08001b4d 	.word	0x08001b4d
 800179c:	08001dd7 	.word	0x08001dd7
 80017a0:	08001dd7 	.word	0x08001dd7
 80017a4:	08001b79 	.word	0x08001b79
 80017a8:	08001ba3 	.word	0x08001ba3
 80017ac:	08001bab 	.word	0x08001bab
 80017b0:	08001bb3 	.word	0x08001bb3
 80017b4:	08001bbb 	.word	0x08001bbb
 80017b8:	08001bd1 	.word	0x08001bd1
 80017bc:	08001bd1 	.word	0x08001bd1
 80017c0:	08001bd1 	.word	0x08001bd1
 80017c4:	08001bd1 	.word	0x08001bd1
 80017c8:	08001bd1 	.word	0x08001bd1
 80017cc:	08001bd1 	.word	0x08001bd1
 80017d0:	08001bd9 	.word	0x08001bd9
 80017d4:	08001bd9 	.word	0x08001bd9
 80017d8:	08001bf7 	.word	0x08001bf7
 80017dc:	08001dd7 	.word	0x08001dd7
 80017e0:	08001dd7 	.word	0x08001dd7
 80017e4:	08001c0b 	.word	0x08001c0b
 80017e8:	08001c2d 	.word	0x08001c2d
 80017ec:	08001c5f 	.word	0x08001c5f
 80017f0:	08001c83 	.word	0x08001c83
 80017f4:	08001c83 	.word	0x08001c83
 80017f8:	08001c83 	.word	0x08001c83
 80017fc:	08001c83 	.word	0x08001c83
 8001800:	08001c89 	.word	0x08001c89
 8001804:	08001ca7 	.word	0x08001ca7
 8001808:	08001ca7 	.word	0x08001ca7
 800180c:	08001caf 	.word	0x08001caf
 8001810:	08001cc5 	.word	0x08001cc5
 8001814:	08001ccb 	.word	0x08001ccb
 8001818:	08001dd7 	.word	0x08001dd7
 800181c:	08001dd7 	.word	0x08001dd7
 8001820:	08001cfd 	.word	0x08001cfd
 8001824:	08001cfd 	.word	0x08001cfd
 8001828:	08001d13 	.word	0x08001d13
 800182c:	08001d31 	.word	0x08001d31
 8001830:	08001dd7 	.word	0x08001dd7
 8001834:	08001d47 	.word	0x08001d47
 8001838:	08001d4f 	.word	0x08001d4f
 800183c:	08001d4f 	.word	0x08001d4f
 8001840:	08001dd7 	.word	0x08001dd7
 8001844:	08001dd7 	.word	0x08001dd7
 8001848:	08001dd7 	.word	0x08001dd7
 800184c:	08001dd7 	.word	0x08001dd7
 8001850:	08001dd7 	.word	0x08001dd7
 8001854:	08001dd7 	.word	0x08001dd7
 8001858:	08001dd7 	.word	0x08001dd7
 800185c:	08001dd7 	.word	0x08001dd7
 8001860:	08001dd7 	.word	0x08001dd7
 8001864:	08001dd7 	.word	0x08001dd7
 8001868:	08001dd7 	.word	0x08001dd7
 800186c:	08001dd7 	.word	0x08001dd7
 8001870:	08001dd7 	.word	0x08001dd7
 8001874:	08001dd7 	.word	0x08001dd7
 8001878:	08001dd7 	.word	0x08001dd7
 800187c:	08001dd7 	.word	0x08001dd7
 8001880:	08001dd7 	.word	0x08001dd7
 8001884:	08001dd7 	.word	0x08001dd7
 8001888:	08001dd7 	.word	0x08001dd7
 800188c:	08001d65 	.word	0x08001d65
 8001890:	08001dd7 	.word	0x08001dd7
 8001894:	08001dd7 	.word	0x08001dd7
 8001898:	08001dd7 	.word	0x08001dd7
 800189c:	08001dd7 	.word	0x08001dd7
 80018a0:	08001dd7 	.word	0x08001dd7
 80018a4:	08001dd7 	.word	0x08001dd7
 80018a8:	08001dd7 	.word	0x08001dd7
 80018ac:	08001dd7 	.word	0x08001dd7
 80018b0:	08001dd7 	.word	0x08001dd7
 80018b4:	08001dd7 	.word	0x08001dd7
 80018b8:	08001dd7 	.word	0x08001dd7
 80018bc:	08001dd7 	.word	0x08001dd7
 80018c0:	08001dd7 	.word	0x08001dd7
 80018c4:	08001dd7 	.word	0x08001dd7
 80018c8:	08001dd7 	.word	0x08001dd7
 80018cc:	08001dd7 	.word	0x08001dd7
 80018d0:	08001dd7 	.word	0x08001dd7
 80018d4:	08001dd7 	.word	0x08001dd7
 80018d8:	08001dd7 	.word	0x08001dd7
 80018dc:	08001dd7 	.word	0x08001dd7
 80018e0:	08001dd7 	.word	0x08001dd7
 80018e4:	08001dd7 	.word	0x08001dd7
 80018e8:	08001dd7 	.word	0x08001dd7
 80018ec:	08001dd7 	.word	0x08001dd7
 80018f0:	08001dd7 	.word	0x08001dd7
 80018f4:	08001dd7 	.word	0x08001dd7
 80018f8:	08001dd7 	.word	0x08001dd7
 80018fc:	08001dd7 	.word	0x08001dd7
 8001900:	08001dd7 	.word	0x08001dd7
 8001904:	08001dd7 	.word	0x08001dd7
 8001908:	08001dd7 	.word	0x08001dd7
 800190c:	08001dd7 	.word	0x08001dd7
 8001910:	08001dd7 	.word	0x08001dd7
 8001914:	08001dd7 	.word	0x08001dd7
 8001918:	08001dd7 	.word	0x08001dd7
 800191c:	08001dd7 	.word	0x08001dd7
 8001920:	08001dd7 	.word	0x08001dd7
 8001924:	08001dd7 	.word	0x08001dd7
 8001928:	08001dd7 	.word	0x08001dd7
 800192c:	08001dd7 	.word	0x08001dd7
 8001930:	08001dd7 	.word	0x08001dd7
 8001934:	08001d91 	.word	0x08001d91
	{
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
		break;
 800193e:	e24a      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x05:
		value = rx_frame[3] - 40;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3303      	adds	r3, #3
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3b28      	subs	r3, #40	; 0x28
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001950:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001954:	e23f      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001956:	4bb2      	ldr	r3, [pc, #712]	; (8001c20 <OBD2_PID_Parse+0x598>)
 8001958:	60fb      	str	r3, [r7, #12]
		break;
 800195a:	e23c      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x0A:
		value = 3 * rx_frame[3];
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3303      	adds	r3, #3
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001972:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001976:	e22e      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x0B:
		value = rx_frame[3];
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3303      	adds	r3, #3
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001986:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800198a:	e224      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3303      	adds	r3, #3
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	3204      	adds	r2, #4
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	da00      	bge.n	80019a2 <OBD2_PID_Parse+0x31a>
 80019a0:	3303      	adds	r3, #3
 80019a2:	109b      	asrs	r3, r3, #2
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ac:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019b0:	e211      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x0D:
		value = rx_frame[3];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3303      	adds	r3, #3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019c4:	e207      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3303      	adds	r3, #3
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3b40      	subs	r3, #64	; 0x40
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019de:	e1fa      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x0F:
		value = rx_frame[3] - 40;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3303      	adds	r3, #3
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	3b28      	subs	r3, #40	; 0x28
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019f4:	e1ef      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3303      	adds	r3, #3
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	3204      	adds	r2, #4
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	4a87      	ldr	r2, [pc, #540]	; (8001c24 <OBD2_PID_Parse+0x59c>)
 8001a08:	fb82 1203 	smull	r1, r2, r2, r3
 8001a0c:	1152      	asrs	r2, r2, #5
 8001a0e:	17db      	asrs	r3, r3, #31
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a1e:	e1da      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
		break;
 8001a26:	e1d6      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3303      	adds	r3, #3
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4a7d      	ldr	r2, [pc, #500]	; (8001c24 <OBD2_PID_Parse+0x59c>)
 8001a30:	fba2 2303 	umull	r2, r3, r2, r3
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a40:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a44:	e1c7      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	3204      	adds	r2, #4
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a62:	e1b8      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3303      	adds	r3, #3
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	3204      	adds	r2, #4
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd55 	bl	8000524 <__aeabi_i2d>
 8001a7a:	a367      	add	r3, pc, #412	; (adr r3, 8001c18 <OBD2_PID_Parse+0x590>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fdba 	bl	80005f8 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff f88c 	bl	8000ba8 <__aeabi_d2f>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3303      	adds	r3, #3
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	3204      	adds	r2, #4
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ab8:	e18d      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
		break;
 8001ac0:	e189      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
		break;
 8001ac8:	e185      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001aca:	4b55      	ldr	r3, [pc, #340]	; (8001c20 <OBD2_PID_Parse+0x598>)
 8001acc:	60fb      	str	r3, [r7, #12]
		break;
 8001ace:	e182      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
		break;
 8001ad6:	e17e      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x30:
		value = rx_frame[3];
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3303      	adds	r3, #3
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aea:	e174      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3303      	adds	r3, #3
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	3204      	adds	r2, #4
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b04:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b08:	e165      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	3204      	adds	r2, #4
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da00      	bge.n	8001b20 <OBD2_PID_Parse+0x498>
 8001b1e:	3303      	adds	r3, #3
 8001b20:	109b      	asrs	r3, r3, #2
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b2e:	e152      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x33:
		value = rx_frame[3];
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3303      	adds	r3, #3
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b42:	e148      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
		break;
 8001b4a:	e144      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3303      	adds	r3, #3
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	3204      	adds	r2, #4
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	4a31      	ldr	r2, [pc, #196]	; (8001c24 <OBD2_PID_Parse+0x59c>)
 8001b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b62:	1152      	asrs	r2, r2, #5
 8001b64:	17db      	asrs	r3, r3, #31
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	3b28      	subs	r3, #40	; 0x28
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b72:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b76:	e12e      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3303      	adds	r3, #3
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	3204      	adds	r2, #4
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	4a27      	ldr	r2, [pc, #156]	; (8001c28 <OBD2_PID_Parse+0x5a0>)
 8001b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b8e:	1192      	asrs	r2, r2, #6
 8001b90:	17db      	asrs	r3, r3, #31
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ba0:	e119      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
		break;
 8001ba8:	e115      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
		break;
 8001bb0:	e111      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
		break;
 8001bb8:	e10d      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x46:
		value = rx_frame[3] - 40;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	3b28      	subs	r3, #40	; 0x28
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001bce:	e102      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
		break;
 8001bd6:	e0fe      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3303      	adds	r3, #3
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	3204      	adds	r2, #4
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001bf4:	e0ef      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x4F:
		value = rx_frame[3];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c04:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c08:	e0e5      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
		break;
 8001c10:	e0e1      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
 8001c12:	bf00      	nop
 8001c14:	f3af 8000 	nop.w
 8001c18:	10624dd3 	.word	0x10624dd3
 8001c1c:	3fb43958 	.word	0x3fb43958
 8001c20:	c2c80000 	.word	0xc2c80000
 8001c24:	51eb851f 	.word	0x51eb851f
 8001c28:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3303      	adds	r3, #3
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	3204      	adds	r2, #4
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc71 	bl	8000524 <__aeabi_i2d>
 8001c42:	a370      	add	r3, pc, #448	; (adr r3, 8001e04 <OBD2_PID_Parse+0x77c>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fcd6 	bl	80005f8 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe ffa8 	bl	8000ba8 <__aeabi_d2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]
		break;
 8001c5c:	e0bb      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3303      	adds	r3, #3
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	3204      	adds	r2, #4
 8001c6a:	7812      	ldrb	r2, [r2, #0]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001c72:	3b7f      	subs	r3, #127	; 0x7f
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c80:	e0a9      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <OBD2_PID_Parse+0x770>)
 8001c84:	60fb      	str	r3, [r7, #12]
		break;
 8001c86:	e0a6      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3303      	adds	r3, #3
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	3204      	adds	r2, #4
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ca4:	e097      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
		break;
 8001cac:	e093      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3303      	adds	r3, #3
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3b28      	subs	r3, #40	; 0x28
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbe:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cc2:	e088      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <OBD2_PID_Parse+0x774>)
 8001cc6:	60fb      	str	r3, [r7, #12]
		break;
 8001cc8:	e085      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3303      	adds	r3, #3
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	3204      	adds	r2, #4
 8001cd6:	7812      	ldrb	r2, [r2, #0]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc22 	bl	8000524 <__aeabi_i2d>
 8001ce0:	a341      	add	r3, pc, #260	; (adr r3, 8001de8 <OBD2_PID_Parse+0x760>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fc87 	bl	80005f8 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe ff59 	bl	8000ba8 <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	60fb      	str	r3, [r7, #12]
		break;
 8001cfa:	e06c      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3303      	adds	r3, #3
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	3b7d      	subs	r3, #125	; 0x7d
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d10:	e061      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3303      	adds	r3, #3
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	3204      	adds	r2, #4
 8001d1e:	7812      	ldrb	r2, [r2, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d2e:	e052      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3303      	adds	r3, #3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	3b7d      	subs	r3, #125	; 0x7d
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d44:	e047      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
		break;
 8001d4c:	e043      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3303      	adds	r3, #3
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3b28      	subs	r3, #40	; 0x28
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d62:	e038      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3303      	adds	r3, #3
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	3204      	adds	r2, #4
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <OBD2_PID_Parse+0x778>)
 8001d76:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7a:	1152      	asrs	r2, r2, #5
 8001d7c:	17db      	asrs	r3, r3, #31
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	3b28      	subs	r3, #40	; 0x28
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d8e:	e022      	b.n	8001dd6 <OBD2_PID_Parse+0x74e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3303      	adds	r3, #3
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	061a      	lsls	r2, r3, #24
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	041b      	lsls	r3, r3, #16
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3305      	adds	r3, #5
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	4313      	orrs	r3, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	3206      	adds	r2, #6
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbb5 	bl	8000524 <__aeabi_i2d>
 8001dba:	a30d      	add	r3, pc, #52	; (adr r3, 8001df0 <OBD2_PID_Parse+0x768>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fc1a 	bl	80005f8 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe feec 	bl	8000ba8 <__aeabi_d2f>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60fb      	str	r3, [r7, #12]
		break;
 8001dd4:	bf00      	nop
	}
	return value;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	ee07 3a90 	vmov	s15, r3
}
 8001ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	9999999a 	.word	0x9999999a
 8001dec:	3fa99999 	.word	0x3fa99999
 8001df0:	9999999a 	.word	0x9999999a
 8001df4:	3fb99999 	.word	0x3fb99999
 8001df8:	c2c80000 	.word	0xc2c80000
 8001dfc:	c3520000 	.word	0xc3520000
 8001e00:	51eb851f 	.word	0x51eb851f
 8001e04:	47ae147b 	.word	0x47ae147b
 8001e08:	3f747ae1 	.word	0x3f747ae1

08001e0c <OBD2_Init>:

obd_protocol OBD2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	used_protocol = KLine_Init();
 8001e10:	f7ff f94a 	bl	80010a8 <KLine_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <OBD2_Init+0x44>)
 8001e1a:	701a      	strb	r2, [r3, #0]
	if(used_protocol == OBD_NONE)
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <OBD2_Init+0x44>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d110      	bne.n	8001e46 <OBD2_Init+0x3a>
	{
		used_protocol = KWP2000_Fast_Init();
 8001e24:	f7ff f9d8 	bl	80011d8 <KWP2000_Fast_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <OBD2_Init+0x44>)
 8001e2e:	701a      	strb	r2, [r3, #0]
		if(used_protocol == OBD_NONE)
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <OBD2_Init+0x44>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d106      	bne.n	8001e46 <OBD2_Init+0x3a>
		{
			used_protocol = OBD_PROTO_CAN;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <OBD2_Init+0x44>)
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	701a      	strb	r2, [r3, #0]
			MX_CAN1_Init();
 8001e3e:	f7ff f885 	bl	8000f4c <MX_CAN1_Init>
			canConfig();
 8001e42:	f7ff f8b9 	bl	8000fb8 <canConfig>
		}
	}
	return used_protocol;
 8001e46:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <OBD2_Init+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200002d4 	.word	0x200002d4

08001e54 <OBD2_ShowOnDisplay>:

void OBD2_ShowOnDisplay(float value)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	snprintf(str, 10, "%f", value);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fb72 	bl	8000548 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	f107 000c 	add.w	r0, r7, #12
 8001e6c:	e9cd 2300 	strd	r2, r3, [sp]
 8001e70:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <OBD2_ShowOnDisplay+0x60>)
 8001e72:	210a      	movs	r1, #10
 8001e74:	f006 f830 	bl	8007ed8 <sniprintf>
	ssd1306_SetCursor(0,0);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 fd92 	bl	80029a4 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f000 fc41 	bl	8002708 <ssd1306_Fill>
	ssd1306_WriteString("Teplota", Font_7x10, White);
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <OBD2_ShowOnDisplay+0x64>)
 8001e88:	2301      	movs	r3, #1
 8001e8a:	ca06      	ldmia	r2, {r1, r2}
 8001e8c:	480b      	ldr	r0, [pc, #44]	; (8001ebc <OBD2_ShowOnDisplay+0x68>)
 8001e8e:	f000 fd63 	bl	8002958 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 20);
 8001e92:	2114      	movs	r1, #20
 8001e94:	2028      	movs	r0, #40	; 0x28
 8001e96:	f000 fd85 	bl	80029a4 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, White);
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <OBD2_ShowOnDisplay+0x6c>)
 8001e9c:	f107 000c 	add.w	r0, r7, #12
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	ca06      	ldmia	r2, {r1, r2}
 8001ea4:	f000 fd58 	bl	8002958 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ea8:	f000 fc52 	bl	8002750 <ssd1306_UpdateScreen>
}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	0800a3f8 	.word	0x0800a3f8
 8001eb8:	20000004 	.word	0x20000004
 8001ebc:	0800a3fc 	.word	0x0800a3fc
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <PID_Get_Lenght>:
		[0x7C] = { 2 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 4 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	return PID_LUT[pid][0];
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4a03      	ldr	r2, [pc, #12]	; (8001ee0 <PID_Get_Lenght+0x1c>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	0800a40c 	.word	0x0800a40c

08001ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ee8:	f000 fda6 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eec:	f000 f836 	bl	8001f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef0:	f000 f902 	bl	80020f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ef4:	f000 f8e2 	bl	80020bc <MX_DMA_Init>
  MX_I2C2_Init();
 8001ef8:	f000 f882 	bl	8002000 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8001efc:	f000 fb9a 	bl	8002634 <ssd1306_Init>
  ssd1306_Fill(Black);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 fc01 	bl	8002708 <ssd1306_Fill>
  ssd1306_WriteString("Teplota", Font_7x10, White);
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <main+0x6c>)
 8001f08:	2301      	movs	r3, #1
 8001f0a:	ca06      	ldmia	r2, {r1, r2}
 8001f0c:	4811      	ldr	r0, [pc, #68]	; (8001f54 <main+0x70>)
 8001f0e:	f000 fd23 	bl	8002958 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001f12:	f000 fc1d 	bl	8002750 <ssd1306_UpdateScreen>



  obd_comm.used_protocol = OBD2_Init();
 8001f16:	f7ff ff79 	bl	8001e0c <OBD2_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <main+0x74>)
 8001f20:	701a      	strb	r2, [r3, #0]

  obd_comm.pid = 0x05;
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <main+0x74>)
 8001f24:	2205      	movs	r2, #5
 8001f26:	705a      	strb	r2, [r3, #1]

  MX_IWDG_Init();
 8001f28:	f000 f8aa 	bl	8002080 <MX_IWDG_Init>

  OBD2_Request(obd_comm);
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <main+0x74>)
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	f7ff fb74 	bl	800161c <OBD2_Request>

  OBD2_Request(obd_comm);
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <main+0x74>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	f7ff fb70 	bl	800161c <OBD2_Request>

  OBD2_Request(obd_comm);
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <main+0x74>)
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	f7ff fb6c 	bl	800161c <OBD2_Request>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  OBD2_Request(obd_comm);
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <main+0x74>)
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	f7ff fb68 	bl	800161c <OBD2_Request>
 8001f4c:	e7fa      	b.n	8001f44 <main+0x60>
 8001f4e:	bf00      	nop
 8001f50:	20000004 	.word	0x20000004
 8001f54:	0800a404 	.word	0x0800a404
 8001f58:	20000390 	.word	0x20000390

08001f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b096      	sub	sp, #88	; 0x58
 8001f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	2244      	movs	r2, #68	; 0x44
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 fb42 	bl	80075f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f70:	463b      	mov	r3, r7
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
 8001f7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f82:	f002 fd97 	bl	8004ab4 <HAL_PWREx_ControlVoltageScaling>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f8c:	f000 f93e 	bl	800220c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f90:	2309      	movs	r3, #9
 8001f92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001faa:	230a      	movs	r3, #10
 8001fac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fae:	2307      	movs	r3, #7
 8001fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 fdce 	bl	8004b60 <HAL_RCC_OscConfig>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001fca:	f000 f91f 	bl	800220c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fce:	230f      	movs	r3, #15
 8001fd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 f9ce 	bl	8005388 <HAL_RCC_ClockConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ff2:	f000 f90b 	bl	800220c <Error_Handler>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3758      	adds	r7, #88	; 0x58
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_I2C2_Init+0x74>)
 8002006:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <MX_I2C2_Init+0x78>)
 8002008:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <MX_I2C2_Init+0x74>)
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <MX_I2C2_Init+0x7c>)
 800200e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_I2C2_Init+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <MX_I2C2_Init+0x74>)
 8002018:	2201      	movs	r2, #1
 800201a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <MX_I2C2_Init+0x74>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_I2C2_Init+0x74>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <MX_I2C2_Init+0x74>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_I2C2_Init+0x74>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_I2C2_Init+0x74>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800203a:	480e      	ldr	r0, [pc, #56]	; (8002074 <MX_I2C2_Init+0x74>)
 800203c:	f002 f840 	bl	80040c0 <HAL_I2C_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002046:	f000 f8e1 	bl	800220c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800204a:	2100      	movs	r1, #0
 800204c:	4809      	ldr	r0, [pc, #36]	; (8002074 <MX_I2C2_Init+0x74>)
 800204e:	f002 fc2d 	bl	80048ac <HAL_I2CEx_ConfigAnalogFilter>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002058:	f000 f8d8 	bl	800220c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800205c:	2100      	movs	r1, #0
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_I2C2_Init+0x74>)
 8002060:	f002 fc6f 	bl	8004942 <HAL_I2CEx_ConfigDigitalFilter>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800206a:	f000 f8cf 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200002d8 	.word	0x200002d8
 8002078:	40005800 	.word	0x40005800
 800207c:	10909cec 	.word	0x10909cec

08002080 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_IWDG_Init+0x34>)
 8002086:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <MX_IWDG_Init+0x38>)
 8002088:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <MX_IWDG_Init+0x34>)
 800208c:	2204      	movs	r2, #4
 800208e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <MX_IWDG_Init+0x34>)
 8002092:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002096:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_IWDG_Init+0x34>)
 800209a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800209e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <MX_IWDG_Init+0x34>)
 80020a2:	f002 fc9a 	bl	80049da <HAL_IWDG_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80020ac:	f000 f8ae 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	2000032c 	.word	0x2000032c
 80020b8:	40003000 	.word	0x40003000

080020bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <MX_DMA_Init+0x38>)
 80020c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <MX_DMA_Init+0x38>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6493      	str	r3, [r2, #72]	; 0x48
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <MX_DMA_Init+0x38>)
 80020d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	200f      	movs	r0, #15
 80020e0:	f001 fc67 	bl	80039b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80020e4:	200f      	movs	r0, #15
 80020e6:	f001 fc80 	bl	80039ea <HAL_NVIC_EnableIRQ>

}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000

080020f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800210e:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <MX_GPIO_Init+0x108>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	4a3b      	ldr	r2, [pc, #236]	; (8002200 <MX_GPIO_Init+0x108>)
 8002114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <MX_GPIO_Init+0x108>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <MX_GPIO_Init+0x108>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	4a35      	ldr	r2, [pc, #212]	; (8002200 <MX_GPIO_Init+0x108>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002132:	4b33      	ldr	r3, [pc, #204]	; (8002200 <MX_GPIO_Init+0x108>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <MX_GPIO_Init+0x108>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <MX_GPIO_Init+0x108>)
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <MX_GPIO_Init+0x108>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <MX_GPIO_Init+0x108>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a29      	ldr	r2, [pc, #164]	; (8002200 <MX_GPIO_Init+0x108>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002162:	4b27      	ldr	r3, [pc, #156]	; (8002200 <MX_GPIO_Init+0x108>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002174:	4823      	ldr	r0, [pc, #140]	; (8002204 <MX_GPIO_Init+0x10c>)
 8002176:	f001 ff8b 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002184:	f001 ff84 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BAT_V_Pin */
  GPIO_InitStruct.Pin = BAT_V_Pin;
 8002188:	2320      	movs	r3, #32
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800218c:	230b      	movs	r3, #11
 800218e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	481a      	ldr	r0, [pc, #104]	; (8002204 <MX_GPIO_Init+0x10c>)
 800219c:	f001 fdfe 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_S_Pin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 80021a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4812      	ldr	r0, [pc, #72]	; (8002204 <MX_GPIO_Init+0x10c>)
 80021ba:	f001 fdef 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LLine_Pin */
  GPIO_InitStruct.Pin = LLine_Pin;
 80021be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LLine_GPIO_Port, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021da:	f001 fddf 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BTN_Pin */
  GPIO_InitStruct.Pin = LCD_BTN_Pin;
 80021de:	2320      	movs	r3, #32
 80021e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_BTN_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_GPIO_Init+0x110>)
 80021f2:	f001 fdd3 	bl	8003d9c <HAL_GPIO_Init>

}
 80021f6:	bf00      	nop
 80021f8:	3728      	adds	r7, #40	; 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	48000800 	.word	0x48000800
 8002208:	48000400 	.word	0x48000400

0800220c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002210:	b672      	cpsid	i
}
 8002212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002214:	e7fe      	b.n	8002214 <Error_Handler+0x8>
	...

08002218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_MspInit+0x44>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_MspInit+0x44>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6613      	str	r3, [r2, #96]	; 0x60
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_MspInit+0x44>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_MspInit+0x44>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <HAL_MspInit+0x44>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	; 0x58
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_MspInit+0x44>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0a0      	sub	sp, #128	; 0x80
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002278:	f107 0310 	add.w	r3, r7, #16
 800227c:	225c      	movs	r2, #92	; 0x5c
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f005 f9b7 	bl	80075f4 <memset>
  if(hi2c->Instance==I2C2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_I2C_MspInit+0xa8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d136      	bne.n	80022fe <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002294:	2300      	movs	r3, #0
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	4618      	mov	r0, r3
 800229e:	f003 fa95 	bl	80057cc <HAL_RCCEx_PeriphCLKConfig>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80022a8:	f7ff ffb0 	bl	800220c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ac:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_I2C_MspInit+0xac>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_I2C_MspInit+0xac>)
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b8:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_I2C_MspInit+0xac>)
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80022c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ca:	2312      	movs	r3, #18
 80022cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022d6:	2304      	movs	r3, #4
 80022d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022de:	4619      	mov	r1, r3
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <HAL_I2C_MspInit+0xb0>)
 80022e2:	f001 fd5b 	bl	8003d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_I2C_MspInit+0xac>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	4a08      	ldr	r2, [pc, #32]	; (800230c <HAL_I2C_MspInit+0xac>)
 80022ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f0:	6593      	str	r3, [r2, #88]	; 0x58
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_I2C_MspInit+0xac>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3780      	adds	r7, #128	; 0x80
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40005800 	.word	0x40005800
 800230c:	40021000 	.word	0x40021000
 8002310:	48000400 	.word	0x48000400

08002314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <NMI_Handler+0x4>

0800231a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <HardFault_Handler+0x4>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <MemManage_Handler+0x4>

08002326 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <UsageFault_Handler+0x4>

08002332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002360:	f000 fbbe 	bl	8002ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <DMA1_Channel5_IRQHandler+0x10>)
 800236e:	f001 fc35 	bl	8003bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000033c 	.word	0x2000033c

0800237c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <CAN1_RX0_IRQHandler+0x10>)
 8002382:	f001 f80c 	bl	800339e <HAL_CAN_IRQHandler>
  /* USER CODE END CAN1_RX0_IRQn 0 */

  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000208 	.word	0x20000208

08002390 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <CAN1_RX1_IRQHandler+0x10>)
 8002396:	f001 f802 	bl	800339e <HAL_CAN_IRQHandler>
  /* USER CODE END CAN1_RX1_IRQn 0 */

  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000208 	.word	0x20000208

080023a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <USART1_IRQHandler+0x10>)
 80023aa:	f003 ff6f 	bl	800628c <HAL_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000250 	.word	0x20000250

080023b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
	return 1;
 80023bc:	2301      	movs	r3, #1
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_kill>:

int _kill(int pid, int sig)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023d2:	f005 f8d7 	bl	8007584 <__errno>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2216      	movs	r2, #22
 80023da:	601a      	str	r2, [r3, #0]
	return -1;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_exit>:

void _exit (int status)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ffe7 	bl	80023c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023fa:	e7fe      	b.n	80023fa <_exit+0x12>

080023fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e00a      	b.n	8002424 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800240e:	f3af 8000 	nop.w
 8002412:	4601      	mov	r1, r0
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	b2ca      	uxtb	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	dbf0      	blt.n	800240e <_read+0x12>
	}

return len;
 800242c:	687b      	ldr	r3, [r7, #4]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e009      	b.n	800245c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	60ba      	str	r2, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3301      	adds	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	dbf1      	blt.n	8002448 <_write+0x12>
	}
	return len;
 8002464:	687b      	ldr	r3, [r7, #4]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <_close>:

int _close(int file)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
	return -1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002496:	605a      	str	r2, [r3, #4]
	return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_isatty>:

int _isatty(int file)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
	return 1;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
	return 0;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <_sbrk+0x5c>)
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <_sbrk+0x60>)
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ec:	4b13      	ldr	r3, [pc, #76]	; (800253c <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <_sbrk+0x64>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <_sbrk+0x68>)
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	429a      	cmp	r2, r3
 8002506:	d207      	bcs.n	8002518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002508:	f005 f83c 	bl	8007584 <__errno>
 800250c:	4603      	mov	r3, r0
 800250e:	220c      	movs	r2, #12
 8002510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	e009      	b.n	800252c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <_sbrk+0x64>)
 8002528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800252a:	68fb      	ldr	r3, [r7, #12]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20010000 	.word	0x20010000
 8002538:	00000400 	.word	0x00000400
 800253c:	20000394 	.word	0x20000394
 8002540:	200007b8 	.word	0x200007b8

08002544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8002548:	4b08      	ldr	r3, [pc, #32]	; (800256c <SystemInit+0x28>)
 800254a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800254e:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <SystemInit+0x28>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <SystemInit+0x28>)
 8002558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800255c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002574:	f7ff ffe6 	bl	8002544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002578:	480c      	ldr	r0, [pc, #48]	; (80025ac <LoopForever+0x6>)
  ldr r1, =_edata
 800257a:	490d      	ldr	r1, [pc, #52]	; (80025b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <LoopForever+0xe>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002580:	e002      	b.n	8002588 <LoopCopyDataInit>

08002582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002586:	3304      	adds	r3, #4

08002588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800258c:	d3f9      	bcc.n	8002582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002590:	4c0a      	ldr	r4, [pc, #40]	; (80025bc <LoopForever+0x16>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002594:	e001      	b.n	800259a <LoopFillZerobss>

08002596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002598:	3204      	adds	r2, #4

0800259a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800259c:	d3fb      	bcc.n	8002596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800259e:	f004 fff7 	bl	8007590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025a2:	f7ff fc9f 	bl	8001ee4 <main>

080025a6 <LoopForever>:

LoopForever:
    b LoopForever
 80025a6:	e7fe      	b.n	80025a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80025b4:	0800c3f4 	.word	0x0800c3f4
  ldr r2, =_sbss
 80025b8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80025bc:	200007b4 	.word	0x200007b4

080025c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC1_IRQHandler>

080025c2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af04      	add	r7, sp, #16
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	9302      	str	r3, [sp, #8]
 80025e0:	2301      	movs	r3, #1
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2301      	movs	r3, #1
 80025ea:	2200      	movs	r2, #0
 80025ec:	2178      	movs	r1, #120	; 0x78
 80025ee:	4803      	ldr	r0, [pc, #12]	; (80025fc <ssd1306_WriteCommand+0x2c>)
 80025f0:	f001 fdf6 	bl	80041e0 <HAL_I2C_Mem_Write>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200002d8 	.word	0x200002d8

08002600 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af04      	add	r7, sp, #16
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f04f 32ff 	mov.w	r2, #4294967295
 8002612:	9202      	str	r2, [sp, #8]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2301      	movs	r3, #1
 800261c:	2240      	movs	r2, #64	; 0x40
 800261e:	2178      	movs	r1, #120	; 0x78
 8002620:	4803      	ldr	r0, [pc, #12]	; (8002630 <ssd1306_WriteData+0x30>)
 8002622:	f001 fddd 	bl	80041e0 <HAL_I2C_Mem_Write>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200002d8 	.word	0x200002d8

08002634 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002638:	f7ff ffc3 	bl	80025c2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800263c:	2064      	movs	r0, #100	; 0x64
 800263e:	f000 fa6f 	bl	8002b20 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002642:	2000      	movs	r0, #0
 8002644:	f000 f9da 	bl	80029fc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002648:	2020      	movs	r0, #32
 800264a:	f7ff ffc1 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800264e:	2000      	movs	r0, #0
 8002650:	f7ff ffbe 	bl	80025d0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002654:	20b0      	movs	r0, #176	; 0xb0
 8002656:	f7ff ffbb 	bl	80025d0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800265a:	20c8      	movs	r0, #200	; 0xc8
 800265c:	f7ff ffb8 	bl	80025d0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff ffb5 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002666:	2010      	movs	r0, #16
 8002668:	f7ff ffb2 	bl	80025d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800266c:	2040      	movs	r0, #64	; 0x40
 800266e:	f7ff ffaf 	bl	80025d0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002672:	20ff      	movs	r0, #255	; 0xff
 8002674:	f000 f9ae 	bl	80029d4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002678:	20a1      	movs	r0, #161	; 0xa1
 800267a:	f7ff ffa9 	bl	80025d0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800267e:	20a6      	movs	r0, #166	; 0xa6
 8002680:	f7ff ffa6 	bl	80025d0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002684:	20a8      	movs	r0, #168	; 0xa8
 8002686:	f7ff ffa3 	bl	80025d0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800268a:	203f      	movs	r0, #63	; 0x3f
 800268c:	f7ff ffa0 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002690:	20a4      	movs	r0, #164	; 0xa4
 8002692:	f7ff ff9d 	bl	80025d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002696:	20d3      	movs	r0, #211	; 0xd3
 8002698:	f7ff ff9a 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff ff97 	bl	80025d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80026a2:	20d5      	movs	r0, #213	; 0xd5
 80026a4:	f7ff ff94 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80026a8:	20f0      	movs	r0, #240	; 0xf0
 80026aa:	f7ff ff91 	bl	80025d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80026ae:	20d9      	movs	r0, #217	; 0xd9
 80026b0:	f7ff ff8e 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80026b4:	2022      	movs	r0, #34	; 0x22
 80026b6:	f7ff ff8b 	bl	80025d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80026ba:	20da      	movs	r0, #218	; 0xda
 80026bc:	f7ff ff88 	bl	80025d0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80026c0:	2012      	movs	r0, #18
 80026c2:	f7ff ff85 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80026c6:	20db      	movs	r0, #219	; 0xdb
 80026c8:	f7ff ff82 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80026cc:	2020      	movs	r0, #32
 80026ce:	f7ff ff7f 	bl	80025d0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80026d2:	208d      	movs	r0, #141	; 0x8d
 80026d4:	f7ff ff7c 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80026d8:	2014      	movs	r0, #20
 80026da:	f7ff ff79 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80026de:	2001      	movs	r0, #1
 80026e0:	f000 f98c 	bl	80029fc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f000 f80f 	bl	8002708 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80026ea:	f000 f831 	bl	8002750 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <ssd1306_Init+0xd0>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <ssd1306_Init+0xd0>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80026fa:	4b02      	ldr	r3, [pc, #8]	; (8002704 <ssd1306_Init+0xd0>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	711a      	strb	r2, [r3, #4]
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000798 	.word	0x20000798

08002708 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e00d      	b.n	8002734 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <ssd1306_Fill+0x1a>
 800271e:	2100      	movs	r1, #0
 8002720:	e000      	b.n	8002724 <ssd1306_Fill+0x1c>
 8002722:	21ff      	movs	r1, #255	; 0xff
 8002724:	4a09      	ldr	r2, [pc, #36]	; (800274c <ssd1306_Fill+0x44>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4413      	add	r3, r2
 800272a:	460a      	mov	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3301      	adds	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d3ed      	bcc.n	8002718 <ssd1306_Fill+0x10>
    }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000398 	.word	0x20000398

08002750 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002756:	2300      	movs	r3, #0
 8002758:	71fb      	strb	r3, [r7, #7]
 800275a:	e016      	b.n	800278a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	3b50      	subs	r3, #80	; 0x50
 8002760:	b2db      	uxtb	r3, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff ff34 	bl	80025d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002768:	2000      	movs	r0, #0
 800276a:	f7ff ff31 	bl	80025d0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800276e:	2010      	movs	r0, #16
 8002770:	f7ff ff2e 	bl	80025d0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	01db      	lsls	r3, r3, #7
 8002778:	4a08      	ldr	r2, [pc, #32]	; (800279c <ssd1306_UpdateScreen+0x4c>)
 800277a:	4413      	add	r3, r2
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff3e 	bl	8002600 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	3301      	adds	r3, #1
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	2b07      	cmp	r3, #7
 800278e:	d9e5      	bls.n	800275c <ssd1306_UpdateScreen+0xc>
    }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000398 	.word	0x20000398

080027a0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
 80027aa:	460b      	mov	r3, r1
 80027ac:	71bb      	strb	r3, [r7, #6]
 80027ae:	4613      	mov	r3, r2
 80027b0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db3d      	blt.n	8002836 <ssd1306_DrawPixel+0x96>
 80027ba:	79bb      	ldrb	r3, [r7, #6]
 80027bc:	2b3f      	cmp	r3, #63	; 0x3f
 80027be:	d83a      	bhi.n	8002836 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80027c0:	797b      	ldrb	r3, [r7, #5]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d11a      	bne.n	80027fc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027c6:	79fa      	ldrb	r2, [r7, #7]
 80027c8:	79bb      	ldrb	r3, [r7, #6]
 80027ca:	08db      	lsrs	r3, r3, #3
 80027cc:	b2d8      	uxtb	r0, r3
 80027ce:	4603      	mov	r3, r0
 80027d0:	01db      	lsls	r3, r3, #7
 80027d2:	4413      	add	r3, r2
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <ssd1306_DrawPixel+0xa4>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	b25a      	sxtb	r2, r3
 80027da:	79bb      	ldrb	r3, [r7, #6]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	4313      	orrs	r3, r2
 80027ea:	b259      	sxtb	r1, r3
 80027ec:	79fa      	ldrb	r2, [r7, #7]
 80027ee:	4603      	mov	r3, r0
 80027f0:	01db      	lsls	r3, r3, #7
 80027f2:	4413      	add	r3, r2
 80027f4:	b2c9      	uxtb	r1, r1
 80027f6:	4a13      	ldr	r2, [pc, #76]	; (8002844 <ssd1306_DrawPixel+0xa4>)
 80027f8:	54d1      	strb	r1, [r2, r3]
 80027fa:	e01d      	b.n	8002838 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027fc:	79fa      	ldrb	r2, [r7, #7]
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	08db      	lsrs	r3, r3, #3
 8002802:	b2d8      	uxtb	r0, r3
 8002804:	4603      	mov	r3, r0
 8002806:	01db      	lsls	r3, r3, #7
 8002808:	4413      	add	r3, r2
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <ssd1306_DrawPixel+0xa4>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	b25a      	sxtb	r2, r3
 8002810:	79bb      	ldrb	r3, [r7, #6]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	2101      	movs	r1, #1
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	b25b      	sxtb	r3, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	b25b      	sxtb	r3, r3
 8002822:	4013      	ands	r3, r2
 8002824:	b259      	sxtb	r1, r3
 8002826:	79fa      	ldrb	r2, [r7, #7]
 8002828:	4603      	mov	r3, r0
 800282a:	01db      	lsls	r3, r3, #7
 800282c:	4413      	add	r3, r2
 800282e:	b2c9      	uxtb	r1, r1
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <ssd1306_DrawPixel+0xa4>)
 8002832:	54d1      	strb	r1, [r2, r3]
 8002834:	e000      	b.n	8002838 <ssd1306_DrawPixel+0x98>
        return;
 8002836:	bf00      	nop
    }
}
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000398 	.word	0x20000398

08002848 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	4604      	mov	r4, r0
 8002850:	1d38      	adds	r0, r7, #4
 8002852:	e880 0006 	stmia.w	r0, {r1, r2}
 8002856:	461a      	mov	r2, r3
 8002858:	4623      	mov	r3, r4
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	4613      	mov	r3, r2
 800285e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b1f      	cmp	r3, #31
 8002864:	d902      	bls.n	800286c <ssd1306_WriteChar+0x24>
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b7e      	cmp	r3, #126	; 0x7e
 800286a:	d901      	bls.n	8002870 <ssd1306_WriteChar+0x28>
        return 0;
 800286c:	2300      	movs	r3, #0
 800286e:	e06d      	b.n	800294c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002870:	4b38      	ldr	r3, [pc, #224]	; (8002954 <ssd1306_WriteChar+0x10c>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	793b      	ldrb	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	dc06      	bgt.n	800288c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800287e:	4b35      	ldr	r3, [pc, #212]	; (8002954 <ssd1306_WriteChar+0x10c>)
 8002880:	885b      	ldrh	r3, [r3, #2]
 8002882:	461a      	mov	r2, r3
 8002884:	797b      	ldrb	r3, [r7, #5]
 8002886:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	dd01      	ble.n	8002890 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800288c:	2300      	movs	r3, #0
 800288e:	e05d      	b.n	800294c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	e04c      	b.n	8002930 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	3b20      	subs	r3, #32
 800289c:	7979      	ldrb	r1, [r7, #5]
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4619      	mov	r1, r3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	440b      	add	r3, r1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	e034      	b.n	8002920 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d012      	beq.n	80028ec <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <ssd1306_WriteChar+0x10c>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	b2d8      	uxtb	r0, r3
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <ssd1306_WriteChar+0x10c>)
 80028d6:	885b      	ldrh	r3, [r3, #2]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4413      	add	r3, r2
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	7bba      	ldrb	r2, [r7, #14]
 80028e4:	4619      	mov	r1, r3
 80028e6:	f7ff ff5b 	bl	80027a0 <ssd1306_DrawPixel>
 80028ea:	e016      	b.n	800291a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <ssd1306_WriteChar+0x10c>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	b2d8      	uxtb	r0, r3
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <ssd1306_WriteChar+0x10c>)
 80028fc:	885b      	ldrh	r3, [r3, #2]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4413      	add	r3, r2
 8002906:	b2d9      	uxtb	r1, r3
 8002908:	7bbb      	ldrb	r3, [r7, #14]
 800290a:	2b00      	cmp	r3, #0
 800290c:	bf0c      	ite	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	2300      	movne	r3, #0
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	f7ff ff43 	bl	80027a0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3301      	adds	r3, #1
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	793b      	ldrb	r3, [r7, #4]
 8002922:	461a      	mov	r2, r3
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4293      	cmp	r3, r2
 8002928:	d3c5      	bcc.n	80028b6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3301      	adds	r3, #1
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	797b      	ldrb	r3, [r7, #5]
 8002932:	461a      	mov	r2, r3
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4293      	cmp	r3, r2
 8002938:	d3ad      	bcc.n	8002896 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <ssd1306_WriteChar+0x10c>)
 800293c:	881a      	ldrh	r2, [r3, #0]
 800293e:	793b      	ldrb	r3, [r7, #4]
 8002940:	b29b      	uxth	r3, r3
 8002942:	4413      	add	r3, r2
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b03      	ldr	r3, [pc, #12]	; (8002954 <ssd1306_WriteChar+0x10c>)
 8002948:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3724      	adds	r7, #36	; 0x24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd90      	pop	{r4, r7, pc}
 8002954:	20000798 	.word	0x20000798

08002958 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	1d38      	adds	r0, r7, #4
 8002962:	e880 0006 	stmia.w	r0, {r1, r2}
 8002966:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002968:	e012      	b.n	8002990 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	7818      	ldrb	r0, [r3, #0]
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	1d3a      	adds	r2, r7, #4
 8002972:	ca06      	ldmia	r2, {r1, r2}
 8002974:	f7ff ff68 	bl	8002848 <ssd1306_WriteChar>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d002      	beq.n	800298a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	e008      	b.n	800299c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e8      	bne.n	800296a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	781b      	ldrb	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	460a      	mov	r2, r1
 80029ae:	71fb      	strb	r3, [r7, #7]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <ssd1306_SetCursor+0x2c>)
 80029ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80029bc:	79bb      	ldrb	r3, [r7, #6]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <ssd1306_SetCursor+0x2c>)
 80029c2:	805a      	strh	r2, [r3, #2]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	20000798 	.word	0x20000798

080029d4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80029de:	2381      	movs	r3, #129	; 0x81
 80029e0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fdf3 	bl	80025d0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fdef 	bl	80025d0 <ssd1306_WriteCommand>
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002a0c:	23af      	movs	r3, #175	; 0xaf
 8002a0e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <ssd1306_SetDisplayOn+0x38>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	715a      	strb	r2, [r3, #5]
 8002a16:	e004      	b.n	8002a22 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002a18:	23ae      	movs	r3, #174	; 0xae
 8002a1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <ssd1306_SetDisplayOn+0x38>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fdd3 	bl	80025d0 <ssd1306_WriteCommand>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000798 	.word	0x20000798

08002a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a42:	2003      	movs	r0, #3
 8002a44:	f000 ffaa 	bl	800399c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f000 f80d 	bl	8002a68 <HAL_InitTick>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	e001      	b.n	8002a5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a5a:	f7ff fbdd 	bl	8002218 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d023      	beq.n	8002ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_InitTick+0x70>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 ffb7 	bl	8003a06 <HAL_SYSTICK_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d809      	bhi.n	8002ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f000 ff81 	bl	80039b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <HAL_InitTick+0x74>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e007      	b.n	8002ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e004      	b.n	8002ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e001      	b.n	8002ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000018 	.word	0x20000018
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	20000014 	.word	0x20000014

08002ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x20>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x24>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_IncTick+0x24>)
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000018 	.word	0x20000018
 8002b04:	200007a0 	.word	0x200007a0

08002b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_GetTick+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	200007a0 	.word	0x200007a0

08002b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff ffee 	bl	8002b08 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d005      	beq.n	8002b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_Delay+0x44>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b46:	bf00      	nop
 8002b48:	f7ff ffde 	bl	8002b08 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d8f7      	bhi.n	8002b48 <HAL_Delay+0x28>
  {
  }
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000018 	.word	0x20000018

08002b68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0ed      	b.n	8002d56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8e9 	bl	8002d5e <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7ff ffb4 	bl	8002b08 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ba2:	e012      	b.n	8002bca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ba4:	f7ff ffb0 	bl	8002b08 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b0a      	cmp	r3, #10
 8002bb0:	d90b      	bls.n	8002bca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0c5      	b.n	8002d56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0e5      	beq.n	8002ba4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0202 	bic.w	r2, r2, #2
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be8:	f7ff ff8e 	bl	8002b08 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bee:	e012      	b.n	8002c16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bf0:	f7ff ff8a 	bl	8002b08 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b0a      	cmp	r3, #10
 8002bfc:	d90b      	bls.n	8002c16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e09f      	b.n	8002d56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e5      	bne.n	8002bf0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7e1b      	ldrb	r3, [r3, #24]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d108      	bne.n	8002c3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e007      	b.n	8002c4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7e5b      	ldrb	r3, [r3, #25]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d108      	bne.n	8002c68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e007      	b.n	8002c78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7e9b      	ldrb	r3, [r3, #26]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d108      	bne.n	8002c92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0220 	orr.w	r2, r2, #32
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e007      	b.n	8002ca2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0220 	bic.w	r2, r2, #32
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7edb      	ldrb	r3, [r3, #27]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0210 	bic.w	r2, r2, #16
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e007      	b.n	8002ccc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0210 	orr.w	r2, r2, #16
 8002cca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7f1b      	ldrb	r3, [r3, #28]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d108      	bne.n	8002ce6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0208 	orr.w	r2, r2, #8
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e007      	b.n	8002cf6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0208 	bic.w	r2, r2, #8
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7f5b      	ldrb	r3, [r3, #29]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d108      	bne.n	8002d10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0204 	orr.w	r2, r2, #4
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e007      	b.n	8002d20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0204 	bic.w	r2, r2, #4
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	ea42 0103 	orr.w	r1, r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	1e5a      	subs	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d88:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d8a:	7cfb      	ldrb	r3, [r7, #19]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d003      	beq.n	8002d98 <HAL_CAN_ConfigFilter+0x26>
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	f040 80aa 	bne.w	8002eec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	2201      	movs	r2, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d123      	bne.n	8002e1a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	401a      	ands	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002df4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3248      	adds	r2, #72	; 0x48
 8002dfa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e10:	6979      	ldr	r1, [r7, #20]
 8002e12:	3348      	adds	r3, #72	; 0x48
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d122      	bne.n	8002e68 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3248      	adds	r2, #72	; 0x48
 8002e48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e5e:	6979      	ldr	r1, [r7, #20]
 8002e60:	3348      	adds	r3, #72	; 0x48
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d109      	bne.n	8002e84 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e82:	e007      	b.n	8002e94 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002eae:	e007      	b.n	8002ec0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ede:	f023 0201 	bic.w	r2, r3, #1
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e006      	b.n	8002efa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d12e      	bne.n	8002f78 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f32:	f7ff fde9 	bl	8002b08 <HAL_GetTick>
 8002f36:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f38:	e012      	b.n	8002f60 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f3a:	f7ff fde5 	bl	8002b08 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b0a      	cmp	r3, #10
 8002f46:	d90b      	bls.n	8002f60 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2205      	movs	r2, #5
 8002f58:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e012      	b.n	8002f86 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1e5      	bne.n	8002f3a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e006      	b.n	8002f86 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b089      	sub	sp, #36	; 0x24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fac:	7ffb      	ldrb	r3, [r7, #31]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d003      	beq.n	8002fba <HAL_CAN_AddTxMessage+0x2c>
 8002fb2:	7ffb      	ldrb	r3, [r7, #31]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	f040 80ad 	bne.w	8003114 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d105      	bne.n	8002fda <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8095 	beq.w	8003104 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	0e1b      	lsrs	r3, r3, #24
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10d      	bne.n	8003012 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	6809      	ldr	r1, [r1, #0]
 8003004:	431a      	orrs	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3318      	adds	r3, #24
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	440b      	add	r3, r1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e00f      	b.n	8003032 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800301c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003022:	68f9      	ldr	r1, [r7, #12]
 8003024:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003026:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3318      	adds	r3, #24
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	440b      	add	r3, r1
 8003030:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3318      	adds	r3, #24
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	440b      	add	r3, r1
 8003042:	3304      	adds	r3, #4
 8003044:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	7d1b      	ldrb	r3, [r3, #20]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d111      	bne.n	8003072 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3318      	adds	r3, #24
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	4413      	add	r3, r2
 800305a:	3304      	adds	r3, #4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	6811      	ldr	r1, [r2, #0]
 8003062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	3318      	adds	r3, #24
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	440b      	add	r3, r1
 800306e:	3304      	adds	r3, #4
 8003070:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3307      	adds	r3, #7
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	061a      	lsls	r2, r3, #24
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3306      	adds	r3, #6
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3305      	adds	r3, #5
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	4313      	orrs	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	3204      	adds	r2, #4
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	4610      	mov	r0, r2
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	6811      	ldr	r1, [r2, #0]
 800309a:	ea43 0200 	orr.w	r2, r3, r0
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	440b      	add	r3, r1
 80030a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3303      	adds	r3, #3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	061a      	lsls	r2, r3, #24
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3302      	adds	r3, #2
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3301      	adds	r3, #1
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	4313      	orrs	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	7812      	ldrb	r2, [r2, #0]
 80030ca:	4610      	mov	r0, r2
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	6811      	ldr	r1, [r2, #0]
 80030d0:	ea43 0200 	orr.w	r2, r3, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	440b      	add	r3, r1
 80030da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80030de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3318      	adds	r3, #24
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	4413      	add	r3, r2
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6811      	ldr	r1, [r2, #0]
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3318      	adds	r3, #24
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	440b      	add	r3, r1
 80030fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e00e      	b.n	8003122 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e006      	b.n	8003122 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
  }
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800312e:	b480      	push	{r7}
 8003130:	b087      	sub	sp, #28
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003142:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d003      	beq.n	8003152 <HAL_CAN_GetRxMessage+0x24>
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b02      	cmp	r3, #2
 800314e:	f040 80f3 	bne.w	8003338 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10e      	bne.n	8003176 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d116      	bne.n	8003194 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0e7      	b.n	8003346 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d107      	bne.n	8003194 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0d8      	b.n	8003346 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	331b      	adds	r3, #27
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	4413      	add	r3, r2
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0204 	and.w	r2, r3, #4
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	331b      	adds	r3, #27
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	4413      	add	r3, r2
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0d5b      	lsrs	r3, r3, #21
 80031c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	331b      	adds	r3, #27
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	4413      	add	r3, r2
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	08db      	lsrs	r3, r3, #3
 80031dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	331b      	adds	r3, #27
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	4413      	add	r3, r2
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0202 	and.w	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	331b      	adds	r3, #27
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4413      	add	r3, r2
 8003206:	3304      	adds	r3, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	331b      	adds	r3, #27
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	b2da      	uxtb	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	331b      	adds	r3, #27
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	0c1b      	lsrs	r3, r3, #16
 800323c:	b29a      	uxth	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	4413      	add	r3, r2
 800324c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	4413      	add	r3, r2
 8003262:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0a1a      	lsrs	r2, r3, #8
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	4413      	add	r3, r2
 800327c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0c1a      	lsrs	r2, r3, #16
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	3302      	adds	r3, #2
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	4413      	add	r3, r2
 8003296:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0e1a      	lsrs	r2, r3, #24
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	3303      	adds	r3, #3
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	3304      	adds	r3, #4
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0a1a      	lsrs	r2, r3, #8
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	3305      	adds	r3, #5
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0c1a      	lsrs	r2, r3, #16
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3306      	adds	r3, #6
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0e1a      	lsrs	r2, r3, #24
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	3307      	adds	r3, #7
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0220 	orr.w	r2, r2, #32
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e007      	b.n	8003334 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0220 	orr.w	r2, r2, #32
 8003332:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e006      	b.n	8003346 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
  }
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003352:	b480      	push	{r7}
 8003354:	b085      	sub	sp, #20
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003362:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d002      	beq.n	8003370 <HAL_CAN_ActivateNotification+0x1e>
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d109      	bne.n	8003384 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6959      	ldr	r1, [r3, #20]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e006      	b.n	8003392 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b08a      	sub	sp, #40	; 0x28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d07c      	beq.n	80034de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d023      	beq.n	8003436 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f983 	bl	800370c <HAL_CAN_TxMailbox0CompleteCallback>
 8003406:	e016      	b.n	8003436 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	e00c      	b.n	8003436 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
 800342e:	e002      	b.n	8003436 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f989 	bl	8003748 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d024      	beq.n	800348a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003448:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f963 	bl	8003720 <HAL_CAN_TxMailbox1CompleteCallback>
 800345a:	e016      	b.n	800348a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	e00c      	b.n	800348a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003476:	2b00      	cmp	r3, #0
 8003478:	d004      	beq.n	8003484 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
 8003482:	e002      	b.n	800348a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f969 	bl	800375c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d024      	beq.n	80034de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800349c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f943 	bl	8003734 <HAL_CAN_TxMailbox2CompleteCallback>
 80034ae:	e016      	b.n	80034de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d004      	beq.n	80034c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
 80034c2:	e00c      	b.n	80034de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	e002      	b.n	80034de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f949 	bl	8003770 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00c      	beq.n	8003502 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2210      	movs	r2, #16
 8003500:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2208      	movs	r2, #8
 800351c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f930 	bl	8003784 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fd fd6f 	bl	8001020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00c      	beq.n	8003566 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800355c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2210      	movs	r2, #16
 8003564:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2208      	movs	r2, #8
 8003580:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f912 	bl	80037ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f8f9 	bl	8003798 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2210      	movs	r2, #16
 80035c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8fc 	bl	80037c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2208      	movs	r2, #8
 80035e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f8f5 	bl	80037d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d07b      	beq.n	80036ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d072      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	f043 0302 	orr.w	r3, r3, #2
 8003634:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003658:	2b00      	cmp	r3, #0
 800365a:	d043      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003662:	2b00      	cmp	r3, #0
 8003664:	d03e      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800366c:	2b60      	cmp	r3, #96	; 0x60
 800366e:	d02b      	beq.n	80036c8 <HAL_CAN_IRQHandler+0x32a>
 8003670:	2b60      	cmp	r3, #96	; 0x60
 8003672:	d82e      	bhi.n	80036d2 <HAL_CAN_IRQHandler+0x334>
 8003674:	2b50      	cmp	r3, #80	; 0x50
 8003676:	d022      	beq.n	80036be <HAL_CAN_IRQHandler+0x320>
 8003678:	2b50      	cmp	r3, #80	; 0x50
 800367a:	d82a      	bhi.n	80036d2 <HAL_CAN_IRQHandler+0x334>
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d019      	beq.n	80036b4 <HAL_CAN_IRQHandler+0x316>
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	d826      	bhi.n	80036d2 <HAL_CAN_IRQHandler+0x334>
 8003684:	2b30      	cmp	r3, #48	; 0x30
 8003686:	d010      	beq.n	80036aa <HAL_CAN_IRQHandler+0x30c>
 8003688:	2b30      	cmp	r3, #48	; 0x30
 800368a:	d822      	bhi.n	80036d2 <HAL_CAN_IRQHandler+0x334>
 800368c:	2b10      	cmp	r3, #16
 800368e:	d002      	beq.n	8003696 <HAL_CAN_IRQHandler+0x2f8>
 8003690:	2b20      	cmp	r3, #32
 8003692:	d005      	beq.n	80036a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003694:	e01d      	b.n	80036d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f043 0308 	orr.w	r3, r3, #8
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800369e:	e019      	b.n	80036d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f043 0310 	orr.w	r3, r3, #16
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036a8:	e014      	b.n	80036d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f043 0320 	orr.w	r3, r3, #32
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036b2:	e00f      	b.n	80036d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036bc:	e00a      	b.n	80036d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036c6:	e005      	b.n	80036d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036d0:	e000      	b.n	80036d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80036d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2204      	movs	r2, #4
 80036ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f872 	bl	80037e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003704:	bf00      	nop
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <__NVIC_SetPriorityGrouping+0x44>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003818:	4013      	ands	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800382e:	4a04      	ldr	r2, [pc, #16]	; (8003840 <__NVIC_SetPriorityGrouping+0x44>)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	60d3      	str	r3, [r2, #12]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <__NVIC_GetPriorityGrouping+0x18>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f003 0307 	and.w	r3, r3, #7
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	db0b      	blt.n	800388a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	4907      	ldr	r1, [pc, #28]	; (8003898 <__NVIC_EnableIRQ+0x38>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2001      	movs	r0, #1
 8003882:	fa00 f202 	lsl.w	r2, r0, r2
 8003886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000e100 	.word	0xe000e100

0800389c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	6039      	str	r1, [r7, #0]
 80038a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	db0a      	blt.n	80038c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	490c      	ldr	r1, [pc, #48]	; (80038e8 <__NVIC_SetPriority+0x4c>)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	0112      	lsls	r2, r2, #4
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	440b      	add	r3, r1
 80038c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c4:	e00a      	b.n	80038dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	4908      	ldr	r1, [pc, #32]	; (80038ec <__NVIC_SetPriority+0x50>)
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	3b04      	subs	r3, #4
 80038d4:	0112      	lsls	r2, r2, #4
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	440b      	add	r3, r1
 80038da:	761a      	strb	r2, [r3, #24]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000e100 	.word	0xe000e100
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f1c3 0307 	rsb	r3, r3, #7
 800390a:	2b04      	cmp	r3, #4
 800390c:	bf28      	it	cs
 800390e:	2304      	movcs	r3, #4
 8003910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3304      	adds	r3, #4
 8003916:	2b06      	cmp	r3, #6
 8003918:	d902      	bls.n	8003920 <NVIC_EncodePriority+0x30>
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3b03      	subs	r3, #3
 800391e:	e000      	b.n	8003922 <NVIC_EncodePriority+0x32>
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003924:	f04f 32ff 	mov.w	r2, #4294967295
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43da      	mvns	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	401a      	ands	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003938:	f04f 31ff 	mov.w	r1, #4294967295
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	fa01 f303 	lsl.w	r3, r1, r3
 8003942:	43d9      	mvns	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003948:	4313      	orrs	r3, r2
         );
}
 800394a:	4618      	mov	r0, r3
 800394c:	3724      	adds	r7, #36	; 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3b01      	subs	r3, #1
 8003964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003968:	d301      	bcc.n	800396e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800396a:	2301      	movs	r3, #1
 800396c:	e00f      	b.n	800398e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <SysTick_Config+0x40>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003976:	210f      	movs	r1, #15
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	f7ff ff8e 	bl	800389c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <SysTick_Config+0x40>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003986:	4b04      	ldr	r3, [pc, #16]	; (8003998 <SysTick_Config+0x40>)
 8003988:	2207      	movs	r2, #7
 800398a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	e000e010 	.word	0xe000e010

0800399c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff29 	bl	80037fc <__NVIC_SetPriorityGrouping>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4603      	mov	r3, r0
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039c4:	f7ff ff3e 	bl	8003844 <__NVIC_GetPriorityGrouping>
 80039c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	6978      	ldr	r0, [r7, #20]
 80039d0:	f7ff ff8e 	bl	80038f0 <NVIC_EncodePriority>
 80039d4:	4602      	mov	r2, r0
 80039d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff5d 	bl	800389c <__NVIC_SetPriority>
}
 80039e2:	bf00      	nop
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	4603      	mov	r3, r0
 80039f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff31 	bl	8003860 <__NVIC_EnableIRQ>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff ffa2 	bl	8003958 <SysTick_Config>
 8003a14:	4603      	mov	r3, r0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_DMA_Start_IT+0x20>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e04b      	b.n	8003ad6 <HAL_DMA_Start_IT+0xb8>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d13a      	bne.n	8003ac8 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f95f 	bl	8003d3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 020e 	orr.w	r2, r2, #14
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e00f      	b.n	8003ab6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0204 	bic.w	r2, r2, #4
 8003aa4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 020a 	orr.w	r2, r2, #10
 8003ab4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e005      	b.n	8003ad4 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d008      	beq.n	8003b08 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2204      	movs	r2, #4
 8003afa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e022      	b.n	8003b4e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 020e 	bic.w	r2, r2, #14
 8003b16:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	f003 021c 	and.w	r2, r3, #28
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2101      	movs	r1, #1
 8003b36:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d005      	beq.n	8003b7e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2204      	movs	r2, #4
 8003b76:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e029      	b.n	8003bd2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 020e 	bic.w	r2, r2, #14
 8003b8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f003 021c 	and.w	r2, r3, #28
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2101      	movs	r1, #1
 8003bac:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3
    }
  }
  return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f003 031c 	and.w	r3, r3, #28
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d026      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x7a>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d021      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0204 	bic.w	r2, r2, #4
 8003c2e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	f003 021c 	and.w	r2, r3, #28
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	2104      	movs	r1, #4
 8003c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c42:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d071      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c54:	e06c      	b.n	8003d30 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f003 031c 	and.w	r3, r3, #28
 8003c5e:	2202      	movs	r2, #2
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d02e      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0xec>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d029      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10b      	bne.n	8003c9a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 020a 	bic.w	r2, r2, #10
 8003c90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f003 021c 	and.w	r2, r3, #28
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d038      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003cc6:	e033      	b.n	8003d30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	f003 031c 	and.w	r3, r3, #28
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d02a      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x156>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d025      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 020e 	bic.w	r2, r2, #14
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f003 021c 	and.w	r2, r3, #28
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2101      	movs	r1, #1
 8003d04:	fa01 f202 	lsl.w	r2, r1, r2
 8003d08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
}
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	f003 021c 	and.w	r2, r3, #28
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d108      	bne.n	8003d7e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d7c:	e007      	b.n	8003d8e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	60da      	str	r2, [r3, #12]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003daa:	e154      	b.n	8004056 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8146 	beq.w	8004050 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d005      	beq.n	8003ddc <HAL_GPIO_Init+0x40>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d130      	bne.n	8003e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e12:	2201      	movs	r2, #1
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	f003 0201 	and.w	r2, r3, #1
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d017      	beq.n	8003e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d123      	bne.n	8003ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	08da      	lsrs	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	08da      	lsrs	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3208      	adds	r2, #8
 8003ec8:	6939      	ldr	r1, [r7, #16]
 8003eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0203 	and.w	r2, r3, #3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80a0 	beq.w	8004050 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f10:	4b58      	ldr	r3, [pc, #352]	; (8004074 <HAL_GPIO_Init+0x2d8>)
 8003f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f14:	4a57      	ldr	r2, [pc, #348]	; (8004074 <HAL_GPIO_Init+0x2d8>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6613      	str	r3, [r2, #96]	; 0x60
 8003f1c:	4b55      	ldr	r3, [pc, #340]	; (8004074 <HAL_GPIO_Init+0x2d8>)
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f28:	4a53      	ldr	r2, [pc, #332]	; (8004078 <HAL_GPIO_Init+0x2dc>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	3302      	adds	r3, #2
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	220f      	movs	r2, #15
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f52:	d019      	beq.n	8003f88 <HAL_GPIO_Init+0x1ec>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a49      	ldr	r2, [pc, #292]	; (800407c <HAL_GPIO_Init+0x2e0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_GPIO_Init+0x1e8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a48      	ldr	r2, [pc, #288]	; (8004080 <HAL_GPIO_Init+0x2e4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00d      	beq.n	8003f80 <HAL_GPIO_Init+0x1e4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a47      	ldr	r2, [pc, #284]	; (8004084 <HAL_GPIO_Init+0x2e8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_GPIO_Init+0x1e0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a46      	ldr	r2, [pc, #280]	; (8004088 <HAL_GPIO_Init+0x2ec>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_GPIO_Init+0x1dc>
 8003f74:	2304      	movs	r3, #4
 8003f76:	e008      	b.n	8003f8a <HAL_GPIO_Init+0x1ee>
 8003f78:	2307      	movs	r3, #7
 8003f7a:	e006      	b.n	8003f8a <HAL_GPIO_Init+0x1ee>
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e004      	b.n	8003f8a <HAL_GPIO_Init+0x1ee>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e002      	b.n	8003f8a <HAL_GPIO_Init+0x1ee>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_GPIO_Init+0x1ee>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	f002 0203 	and.w	r2, r2, #3
 8003f90:	0092      	lsls	r2, r2, #2
 8003f92:	4093      	lsls	r3, r2
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f9a:	4937      	ldr	r1, [pc, #220]	; (8004078 <HAL_GPIO_Init+0x2dc>)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fa8:	4b38      	ldr	r3, [pc, #224]	; (800408c <HAL_GPIO_Init+0x2f0>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fcc:	4a2f      	ldr	r2, [pc, #188]	; (800408c <HAL_GPIO_Init+0x2f0>)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_GPIO_Init+0x2f0>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ff6:	4a25      	ldr	r2, [pc, #148]	; (800408c <HAL_GPIO_Init+0x2f0>)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ffc:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_GPIO_Init+0x2f0>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	43db      	mvns	r3, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004020:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_GPIO_Init+0x2f0>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004026:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_GPIO_Init+0x2f0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800404a:	4a10      	ldr	r2, [pc, #64]	; (800408c <HAL_GPIO_Init+0x2f0>)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3301      	adds	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f aea3 	bne.w	8003dac <HAL_GPIO_Init+0x10>
  }
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40021000 	.word	0x40021000
 8004078:	40010000 	.word	0x40010000
 800407c:	48000400 	.word	0x48000400
 8004080:	48000800 	.word	0x48000800
 8004084:	48000c00 	.word	0x48000c00
 8004088:	48001000 	.word	0x48001000
 800408c:	40010400 	.word	0x40010400

08004090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
 800409c:	4613      	mov	r3, r2
 800409e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040a0:	787b      	ldrb	r3, [r7, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040ac:	e002      	b.n	80040b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040ae:	887a      	ldrh	r2, [r7, #2]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e081      	b.n	80041d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe f8ba 	bl	8002260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	; 0x24
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004110:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004120:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d107      	bne.n	800413a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	e006      	b.n	8004148 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004146:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d104      	bne.n	800415a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004158:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800417c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69d9      	ldr	r1, [r3, #28]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1a      	ldr	r2, [r3, #32]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	4608      	mov	r0, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	461a      	mov	r2, r3
 80041ee:	4603      	mov	r3, r0
 80041f0:	817b      	strh	r3, [r7, #10]
 80041f2:	460b      	mov	r3, r1
 80041f4:	813b      	strh	r3, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b20      	cmp	r3, #32
 8004204:	f040 80f9 	bne.w	80043fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_I2C_Mem_Write+0x34>
 800420e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	d105      	bne.n	8004220 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0ed      	b.n	80043fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_I2C_Mem_Write+0x4e>
 800422a:	2302      	movs	r3, #2
 800422c:	e0e6      	b.n	80043fc <HAL_I2C_Mem_Write+0x21c>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004236:	f7fe fc67 	bl	8002b08 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2319      	movs	r3, #25
 8004242:	2201      	movs	r2, #1
 8004244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f955 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0d1      	b.n	80043fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2221      	movs	r2, #33	; 0x21
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2240      	movs	r2, #64	; 0x40
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004280:	88f8      	ldrh	r0, [r7, #6]
 8004282:	893a      	ldrh	r2, [r7, #8]
 8004284:	8979      	ldrh	r1, [r7, #10]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4603      	mov	r3, r0
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f8b9 	bl	8004408 <I2C_RequestMemoryWrite>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0a9      	b.n	80043fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2bff      	cmp	r3, #255	; 0xff
 80042b0:	d90e      	bls.n	80042d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	22ff      	movs	r2, #255	; 0xff
 80042b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	8979      	ldrh	r1, [r7, #10]
 80042c0:	2300      	movs	r3, #0
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fabd 	bl	8004848 <I2C_TransferConfig>
 80042ce:	e00f      	b.n	80042f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	8979      	ldrh	r1, [r7, #10]
 80042e2:	2300      	movs	r3, #0
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 faac 	bl	8004848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f93f 	bl	8004578 <I2C_WaitOnTXISFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e07b      	b.n	80043fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d034      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x1c8>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d130      	bne.n	80043a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	2200      	movs	r2, #0
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f8d1 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e04d      	b.n	80043fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2bff      	cmp	r3, #255	; 0xff
 8004368:	d90e      	bls.n	8004388 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	22ff      	movs	r2, #255	; 0xff
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	b2da      	uxtb	r2, r3
 8004376:	8979      	ldrh	r1, [r7, #10]
 8004378:	2300      	movs	r3, #0
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fa61 	bl	8004848 <I2C_TransferConfig>
 8004386:	e00f      	b.n	80043a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	b2da      	uxtb	r2, r3
 8004398:	8979      	ldrh	r1, [r7, #10]
 800439a:	2300      	movs	r3, #0
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fa50 	bl	8004848 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d19e      	bne.n	80042f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f91e 	bl	80045f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e01a      	b.n	80043fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2220      	movs	r2, #32
 80043cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <HAL_I2C_Mem_Write+0x224>)
 80043da:	400b      	ands	r3, r1
 80043dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
  }
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	fe00e800 	.word	0xfe00e800

08004408 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	460b      	mov	r3, r1
 800441c:	813b      	strh	r3, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	8979      	ldrh	r1, [r7, #10]
 8004428:	4b20      	ldr	r3, [pc, #128]	; (80044ac <I2C_RequestMemoryWrite+0xa4>)
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fa09 	bl	8004848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	69b9      	ldr	r1, [r7, #24]
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f89c 	bl	8004578 <I2C_WaitOnTXISFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e02c      	b.n	80044a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004450:	893b      	ldrh	r3, [r7, #8]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	629a      	str	r2, [r3, #40]	; 0x28
 800445a:	e015      	b.n	8004488 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800445c:	893b      	ldrh	r3, [r7, #8]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	b29b      	uxth	r3, r3
 8004462:	b2da      	uxtb	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	69b9      	ldr	r1, [r7, #24]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f882 	bl	8004578 <I2C_WaitOnTXISFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e012      	b.n	80044a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800447e:	893b      	ldrh	r3, [r7, #8]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2200      	movs	r2, #0
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f830 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	80002000 	.word	0x80002000

080044b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d103      	bne.n	80044ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d007      	beq.n	80044ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	619a      	str	r2, [r3, #24]
  }
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004508:	e022      	b.n	8004550 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d01e      	beq.n	8004550 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fe faf9 	bl	8002b08 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d113      	bne.n	8004550 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e00f      	b.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	4013      	ands	r3, r2
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	429a      	cmp	r2, r3
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	429a      	cmp	r2, r3
 800456c:	d0cd      	beq.n	800450a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004584:	e02c      	b.n	80045e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f870 	bl	8004670 <I2C_IsErrorOccurred>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e02a      	b.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d01e      	beq.n	80045e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7fe fab1 	bl	8002b08 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d113      	bne.n	80045e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e007      	b.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d1cb      	bne.n	8004586 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004604:	e028      	b.n	8004658 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f830 	bl	8004670 <I2C_IsErrorOccurred>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e026      	b.n	8004668 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461a:	f7fe fa75 	bl	8002b08 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d302      	bcc.n	8004630 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d113      	bne.n	8004658 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e007      	b.n	8004668 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b20      	cmp	r3, #32
 8004664:	d1cf      	bne.n	8004606 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b00      	cmp	r3, #0
 800469a:	d075      	beq.n	8004788 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2210      	movs	r2, #16
 80046a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046a4:	e056      	b.n	8004754 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d052      	beq.n	8004754 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fe fa2b 	bl	8002b08 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_IsErrorOccurred+0x54>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d147      	bne.n	8004754 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e6:	d12e      	bne.n	8004746 <I2C_IsErrorOccurred+0xd6>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ee:	d02a      	beq.n	8004746 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d027      	beq.n	8004746 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004704:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004706:	f7fe f9ff 	bl	8002b08 <HAL_GetTick>
 800470a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800470c:	e01b      	b.n	8004746 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800470e:	f7fe f9fb 	bl	8002b08 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b19      	cmp	r3, #25
 800471a:	d914      	bls.n	8004746 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	f043 0220 	orr.w	r2, r3, #32
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b20      	cmp	r3, #32
 8004752:	d1dc      	bne.n	800470e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b20      	cmp	r3, #32
 8004760:	d003      	beq.n	800476a <I2C_IsErrorOccurred+0xfa>
 8004762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004766:	2b00      	cmp	r3, #0
 8004768:	d09d      	beq.n	80046a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800476a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2220      	movs	r2, #32
 8004778:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	f043 0304 	orr.w	r3, r3, #4
 8004780:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00b      	beq.n	80047d4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f043 0308 	orr.w	r3, r3, #8
 80047c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d01c      	beq.n	8004838 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff fe56 	bl	80044b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <I2C_IsErrorOccurred+0x1d4>)
 8004810:	400b      	ands	r3, r1
 8004812:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	431a      	orrs	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800483c:	4618      	mov	r0, r3
 800483e:	3728      	adds	r7, #40	; 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	fe00e800 	.word	0xfe00e800

08004848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	817b      	strh	r3, [r7, #10]
 8004856:	4613      	mov	r3, r2
 8004858:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004860:	7a7b      	ldrb	r3, [r7, #9]
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004868:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	4313      	orrs	r3, r2
 8004872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004876:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	0d5b      	lsrs	r3, r3, #21
 8004882:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004886:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <I2C_TransferConfig+0x60>)
 8004888:	430b      	orrs	r3, r1
 800488a:	43db      	mvns	r3, r3
 800488c:	ea02 0103 	and.w	r1, r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800489a:	bf00      	nop
 800489c:	371c      	adds	r7, #28
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	03ff63ff 	.word	0x03ff63ff

080048ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d138      	bne.n	8004934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e032      	b.n	8004936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0201 	bic.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6819      	ldr	r1, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b20      	cmp	r3, #32
 8004956:	d139      	bne.n	80049cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004962:	2302      	movs	r3, #2
 8004964:	e033      	b.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2224      	movs	r2, #36	; 0x24
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004994:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e041      	b.n	8004a70 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80049f4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f245 5255 	movw	r2, #21845	; 0x5555
 80049fe:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6852      	ldr	r2, [r2, #4]
 8004a08:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6892      	ldr	r2, [r2, #8]
 8004a12:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004a14:	f7fe f878 	bl	8002b08 <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a1a:	e00f      	b.n	8004a3c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004a1c:	f7fe f874 	bl	8002b08 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b31      	cmp	r3, #49	; 0x31
 8004a28:	d908      	bls.n	8004a3c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e019      	b.n	8004a70 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e8      	bne.n	8004a1c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d005      	beq.n	8004a64 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	68d2      	ldr	r2, [r2, #12]
 8004a60:	611a      	str	r2, [r3, #16]
 8004a62:	e004      	b.n	8004a6e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004a88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40007000 	.word	0x40007000

08004ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac2:	d130      	bne.n	8004b26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ac4:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad0:	d038      	beq.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ad2:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ada:	4a1e      	ldr	r2, [pc, #120]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ae0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2232      	movs	r2, #50	; 0x32
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	4a1b      	ldr	r2, [pc, #108]	; (8004b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	0c9b      	lsrs	r3, r3, #18
 8004af4:	3301      	adds	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af8:	e002      	b.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d102      	bne.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f2      	bne.n	8004afa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b20:	d110      	bne.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e00f      	b.n	8004b46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b32:	d007      	beq.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b34:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b3c:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40007000 	.word	0x40007000
 8004b58:	20000000 	.word	0x20000000
 8004b5c:	431bde83 	.word	0x431bde83

08004b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f000 bc02 	b.w	8005378 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b74:	4b96      	ldr	r3, [pc, #600]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b7e:	4b94      	ldr	r3, [pc, #592]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80e4 	beq.w	8004d5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_RCC_OscConfig+0x4c>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	f040 808b 	bne.w	8004cba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	f040 8087 	bne.w	8004cba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bac:	4b88      	ldr	r3, [pc, #544]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x64>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e3d9      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1a      	ldr	r2, [r3, #32]
 8004bc8:	4b81      	ldr	r3, [pc, #516]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <HAL_RCC_OscConfig+0x7e>
 8004bd4:	4b7e      	ldr	r3, [pc, #504]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bdc:	e005      	b.n	8004bea <HAL_RCC_OscConfig+0x8a>
 8004bde:	4b7c      	ldr	r3, [pc, #496]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d223      	bcs.n	8004c36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fd8a 	bl	800570c <RCC_SetFlashLatencyFromMSIRange>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e3ba      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c02:	4b73      	ldr	r3, [pc, #460]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a72      	ldr	r2, [pc, #456]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c08:	f043 0308 	orr.w	r3, r3, #8
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b70      	ldr	r3, [pc, #448]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	496d      	ldr	r1, [pc, #436]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c20:	4b6b      	ldr	r3, [pc, #428]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	4968      	ldr	r1, [pc, #416]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]
 8004c34:	e025      	b.n	8004c82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c36:	4b66      	ldr	r3, [pc, #408]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a65      	ldr	r2, [pc, #404]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	f043 0308 	orr.w	r3, r3, #8
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	4b63      	ldr	r3, [pc, #396]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	4960      	ldr	r1, [pc, #384]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c54:	4b5e      	ldr	r3, [pc, #376]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	495b      	ldr	r1, [pc, #364]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fd4a 	bl	800570c <RCC_SetFlashLatencyFromMSIRange>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e37a      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c82:	f000 fc81 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b51      	ldr	r3, [pc, #324]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	4950      	ldr	r1, [pc, #320]	; (8004dd4 <HAL_RCC_OscConfig+0x274>)
 8004c94:	5ccb      	ldrb	r3, [r1, r3]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	4a4e      	ldr	r2, [pc, #312]	; (8004dd8 <HAL_RCC_OscConfig+0x278>)
 8004ca0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ca2:	4b4e      	ldr	r3, [pc, #312]	; (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd fede 	bl	8002a68 <HAL_InitTick>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d052      	beq.n	8004d5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	e35e      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d032      	beq.n	8004d28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cc2:	4b43      	ldr	r3, [pc, #268]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a42      	ldr	r2, [pc, #264]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cce:	f7fd ff1b 	bl	8002b08 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cd6:	f7fd ff17 	bl	8002b08 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e347      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ce8:	4b39      	ldr	r3, [pc, #228]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cf4:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	f043 0308 	orr.w	r3, r3, #8
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	4930      	ldr	r1, [pc, #192]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d12:	4b2f      	ldr	r3, [pc, #188]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	492b      	ldr	r1, [pc, #172]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]
 8004d26:	e01a      	b.n	8004d5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d28:	4b29      	ldr	r3, [pc, #164]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d34:	f7fd fee8 	bl	8002b08 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d3c:	f7fd fee4 	bl	8002b08 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e314      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d4e:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x1dc>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d073      	beq.n	8004e52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_OscConfig+0x21c>
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	2b0c      	cmp	r3, #12
 8004d74:	d10e      	bne.n	8004d94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d10b      	bne.n	8004d94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d063      	beq.n	8004e50 <HAL_RCC_OscConfig+0x2f0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d15f      	bne.n	8004e50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e2f1      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_OscConfig+0x24c>
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	e025      	b.n	8004df8 <HAL_RCC_OscConfig+0x298>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004db4:	d114      	bne.n	8004de0 <HAL_RCC_OscConfig+0x280>
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a05      	ldr	r2, [pc, #20]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a02      	ldr	r2, [pc, #8]	; (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e013      	b.n	8004df8 <HAL_RCC_OscConfig+0x298>
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	0800a50c 	.word	0x0800a50c
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	20000014 	.word	0x20000014
 8004de0:	4ba0      	ldr	r3, [pc, #640]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a9f      	ldr	r2, [pc, #636]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b9d      	ldr	r3, [pc, #628]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a9c      	ldr	r2, [pc, #624]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fd fe82 	bl	8002b08 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fd fe7e 	bl	8002b08 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e2ae      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e1a:	4b92      	ldr	r3, [pc, #584]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x2a8>
 8004e26:	e014      	b.n	8004e52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fd fe6e 	bl	8002b08 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fd fe6a 	bl	8002b08 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e29a      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e42:	4b88      	ldr	r3, [pc, #544]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2d0>
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d060      	beq.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_OscConfig+0x310>
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	d119      	bne.n	8004e9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d116      	bne.n	8004e9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e70:	4b7c      	ldr	r3, [pc, #496]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_OscConfig+0x328>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e277      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e88:	4b76      	ldr	r3, [pc, #472]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	4973      	ldr	r1, [pc, #460]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9c:	e040      	b.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d023      	beq.n	8004eee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea6:	4b6f      	ldr	r3, [pc, #444]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a6e      	ldr	r2, [pc, #440]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fd fe29 	bl	8002b08 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eba:	f7fd fe25 	bl	8002b08 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e255      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ecc:	4b65      	ldr	r3, [pc, #404]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed8:	4b62      	ldr	r3, [pc, #392]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	495f      	ldr	r1, [pc, #380]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
 8004eec:	e018      	b.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eee:	4b5d      	ldr	r3, [pc, #372]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a5c      	ldr	r2, [pc, #368]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fd fe05 	bl	8002b08 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f02:	f7fd fe01 	bl	8002b08 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e231      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f14:	4b53      	ldr	r3, [pc, #332]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d03c      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01c      	beq.n	8004f6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f34:	4b4b      	ldr	r3, [pc, #300]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f3a:	4a4a      	ldr	r2, [pc, #296]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fd fde0 	bl	8002b08 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7fd fddc 	bl	8002b08 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e20c      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f5e:	4b41      	ldr	r3, [pc, #260]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ef      	beq.n	8004f4c <HAL_RCC_OscConfig+0x3ec>
 8004f6c:	e01b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f6e:	4b3d      	ldr	r3, [pc, #244]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f74:	4a3b      	ldr	r2, [pc, #236]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7e:	f7fd fdc3 	bl	8002b08 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f86:	f7fd fdbf 	bl	8002b08 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e1ef      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f98:	4b32      	ldr	r3, [pc, #200]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ef      	bne.n	8004f86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80a6 	beq.w	8005100 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10d      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc4:	4b27      	ldr	r3, [pc, #156]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	4a26      	ldr	r2, [pc, #152]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fce:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd0:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe0:	4b21      	ldr	r3, [pc, #132]	; (8005068 <HAL_RCC_OscConfig+0x508>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d118      	bne.n	800501e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fec:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <HAL_RCC_OscConfig+0x508>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <HAL_RCC_OscConfig+0x508>)
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff8:	f7fd fd86 	bl	8002b08 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005000:	f7fd fd82 	bl	8002b08 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e1b2      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <HAL_RCC_OscConfig+0x508>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d108      	bne.n	8005038 <HAL_RCC_OscConfig+0x4d8>
 8005026:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005036:	e029      	b.n	800508c <HAL_RCC_OscConfig+0x52c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b05      	cmp	r3, #5
 800503e:	d115      	bne.n	800506c <HAL_RCC_OscConfig+0x50c>
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	4a07      	ldr	r2, [pc, #28]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8005048:	f043 0304 	orr.w	r3, r3, #4
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	4a03      	ldr	r2, [pc, #12]	; (8005064 <HAL_RCC_OscConfig+0x504>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005060:	e014      	b.n	800508c <HAL_RCC_OscConfig+0x52c>
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000
 8005068:	40007000 	.word	0x40007000
 800506c:	4b9a      	ldr	r3, [pc, #616]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	4a99      	ldr	r2, [pc, #612]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800507c:	4b96      	ldr	r3, [pc, #600]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	4a95      	ldr	r2, [pc, #596]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005084:	f023 0304 	bic.w	r3, r3, #4
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fd fd38 	bl	8002b08 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fd fd34 	bl	8002b08 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e162      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b2:	4b89      	ldr	r3, [pc, #548]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ed      	beq.n	800509c <HAL_RCC_OscConfig+0x53c>
 80050c0:	e015      	b.n	80050ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fd fd21 	bl	8002b08 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fd fd1d 	bl	8002b08 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e14b      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050e0:	4b7d      	ldr	r3, [pc, #500]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ed      	bne.n	80050ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ee:	7ffb      	ldrb	r3, [r7, #31]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f4:	4b78      	ldr	r3, [pc, #480]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	4a77      	ldr	r2, [pc, #476]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d03c      	beq.n	8005186 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01c      	beq.n	800514e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005114:	4b70      	ldr	r3, [pc, #448]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800511a:	4a6f      	ldr	r2, [pc, #444]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fd fcf0 	bl	8002b08 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800512c:	f7fd fcec 	bl	8002b08 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e11c      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800513e:	4b66      	ldr	r3, [pc, #408]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ef      	beq.n	800512c <HAL_RCC_OscConfig+0x5cc>
 800514c:	e01b      	b.n	8005186 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800514e:	4b62      	ldr	r3, [pc, #392]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005154:	4a60      	ldr	r2, [pc, #384]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fd fcd3 	bl	8002b08 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005166:	f7fd fccf 	bl	8002b08 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e0ff      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005178:	4b57      	ldr	r3, [pc, #348]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 800517a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1ef      	bne.n	8005166 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80f3 	beq.w	8005376 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	2b02      	cmp	r3, #2
 8005196:	f040 80c9 	bne.w	800532c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800519a:	4b4f      	ldr	r3, [pc, #316]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f003 0203 	and.w	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d12c      	bne.n	8005208 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	3b01      	subs	r3, #1
 80051ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d123      	bne.n	8005208 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d11b      	bne.n	8005208 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d113      	bne.n	8005208 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	3b01      	subs	r3, #1
 80051ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d109      	bne.n	8005208 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	3b01      	subs	r3, #1
 8005202:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005204:	429a      	cmp	r2, r3
 8005206:	d06b      	beq.n	80052e0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b0c      	cmp	r3, #12
 800520c:	d062      	beq.n	80052d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800520e:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e0ac      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800521e:	4b2e      	ldr	r3, [pc, #184]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a2d      	ldr	r2, [pc, #180]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005228:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800522a:	f7fd fc6d 	bl	8002b08 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005232:	f7fd fc69 	bl	8002b08 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e099      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005244:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005250:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	4b21      	ldr	r3, [pc, #132]	; (80052dc <HAL_RCC_OscConfig+0x77c>)
 8005256:	4013      	ands	r3, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005260:	3a01      	subs	r2, #1
 8005262:	0112      	lsls	r2, r2, #4
 8005264:	4311      	orrs	r1, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800526a:	0212      	lsls	r2, r2, #8
 800526c:	4311      	orrs	r1, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005272:	0852      	lsrs	r2, r2, #1
 8005274:	3a01      	subs	r2, #1
 8005276:	0552      	lsls	r2, r2, #21
 8005278:	4311      	orrs	r1, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800527e:	0852      	lsrs	r2, r2, #1
 8005280:	3a01      	subs	r2, #1
 8005282:	0652      	lsls	r2, r2, #25
 8005284:	4311      	orrs	r1, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800528a:	06d2      	lsls	r2, r2, #27
 800528c:	430a      	orrs	r2, r1
 800528e:	4912      	ldr	r1, [pc, #72]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005290:	4313      	orrs	r3, r2
 8005292:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0f      	ldr	r2, [pc, #60]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 800529a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800529e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052a0:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 80052a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052ac:	f7fd fc2c 	bl	8002b08 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b4:	f7fd fc28 	bl	8002b08 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e058      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c6:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <HAL_RCC_OscConfig+0x778>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052d2:	e050      	b.n	8005376 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e04f      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
 80052d8:	40021000 	.word	0x40021000
 80052dc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d144      	bne.n	8005376 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052ec:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a23      	ldr	r2, [pc, #140]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 80052f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052f8:	4b21      	ldr	r3, [pc, #132]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4a20      	ldr	r2, [pc, #128]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 80052fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005302:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005304:	f7fd fc00 	bl	8002b08 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530a:	e008      	b.n	800531e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800530c:	f7fd fbfc 	bl	8002b08 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e02c      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800531e:	4b18      	ldr	r3, [pc, #96]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x7ac>
 800532a:	e024      	b.n	8005376 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b0c      	cmp	r3, #12
 8005330:	d01f      	beq.n	8005372 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a12      	ldr	r2, [pc, #72]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 8005338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800533c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533e:	f7fd fbe3 	bl	8002b08 <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005344:	e008      	b.n	8005358 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005346:	f7fd fbdf 	bl	8002b08 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e00f      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	4905      	ldr	r1, [pc, #20]	; (8005380 <HAL_RCC_OscConfig+0x820>)
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_RCC_OscConfig+0x824>)
 800536c:	4013      	ands	r3, r2
 800536e:	60cb      	str	r3, [r1, #12]
 8005370:	e001      	b.n	8005376 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000
 8005384:	feeefffc 	.word	0xfeeefffc

08005388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e0e7      	b.n	800556c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800539c:	4b75      	ldr	r3, [pc, #468]	; (8005574 <HAL_RCC_ClockConfig+0x1ec>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d910      	bls.n	80053cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053aa:	4b72      	ldr	r3, [pc, #456]	; (8005574 <HAL_RCC_ClockConfig+0x1ec>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f023 0207 	bic.w	r2, r3, #7
 80053b2:	4970      	ldr	r1, [pc, #448]	; (8005574 <HAL_RCC_ClockConfig+0x1ec>)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ba:	4b6e      	ldr	r3, [pc, #440]	; (8005574 <HAL_RCC_ClockConfig+0x1ec>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0cf      	b.n	800556c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d010      	beq.n	80053fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	4b66      	ldr	r3, [pc, #408]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d908      	bls.n	80053fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e8:	4b63      	ldr	r3, [pc, #396]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4960      	ldr	r1, [pc, #384]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d04c      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800540e:	4b5a      	ldr	r3, [pc, #360]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d121      	bne.n	800545e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e0a6      	b.n	800556c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d107      	bne.n	8005436 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005426:	4b54      	ldr	r3, [pc, #336]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d115      	bne.n	800545e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e09a      	b.n	800556c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800543e:	4b4e      	ldr	r3, [pc, #312]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e08e      	b.n	800556c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800544e:	4b4a      	ldr	r3, [pc, #296]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e086      	b.n	800556c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b46      	ldr	r3, [pc, #280]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4943      	ldr	r1, [pc, #268]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005470:	f7fd fb4a 	bl	8002b08 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fd fb46 	bl	8002b08 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e06e      	b.n	800556c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b3a      	ldr	r3, [pc, #232]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	4b31      	ldr	r3, [pc, #196]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d208      	bcs.n	80054ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054bc:	4b2e      	ldr	r3, [pc, #184]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	492b      	ldr	r1, [pc, #172]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054ce:	4b29      	ldr	r3, [pc, #164]	; (8005574 <HAL_RCC_ClockConfig+0x1ec>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d210      	bcs.n	80054fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054dc:	4b25      	ldr	r3, [pc, #148]	; (8005574 <HAL_RCC_ClockConfig+0x1ec>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 0207 	bic.w	r2, r3, #7
 80054e4:	4923      	ldr	r1, [pc, #140]	; (8005574 <HAL_RCC_ClockConfig+0x1ec>)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ec:	4b21      	ldr	r3, [pc, #132]	; (8005574 <HAL_RCC_ClockConfig+0x1ec>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d001      	beq.n	80054fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e036      	b.n	800556c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	4918      	ldr	r1, [pc, #96]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 8005518:	4313      	orrs	r3, r2
 800551a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005528:	4b13      	ldr	r3, [pc, #76]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4910      	ldr	r1, [pc, #64]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 8005538:	4313      	orrs	r3, r2
 800553a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800553c:	f000 f824 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8005540:	4602      	mov	r2, r0
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <HAL_RCC_ClockConfig+0x1f0>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	091b      	lsrs	r3, r3, #4
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	490b      	ldr	r1, [pc, #44]	; (800557c <HAL_RCC_ClockConfig+0x1f4>)
 800554e:	5ccb      	ldrb	r3, [r1, r3]
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <HAL_RCC_ClockConfig+0x1f8>)
 800555a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <HAL_RCC_ClockConfig+0x1fc>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f7fd fa81 	bl	8002a68 <HAL_InitTick>
 8005566:	4603      	mov	r3, r0
 8005568:	72fb      	strb	r3, [r7, #11]

  return status;
 800556a:	7afb      	ldrb	r3, [r7, #11]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40022000 	.word	0x40022000
 8005578:	40021000 	.word	0x40021000
 800557c:	0800a50c 	.word	0x0800a50c
 8005580:	20000000 	.word	0x20000000
 8005584:	20000014 	.word	0x20000014

08005588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005596:	4b3e      	ldr	r3, [pc, #248]	; (8005690 <HAL_RCC_GetSysClockFreq+0x108>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055a0:	4b3b      	ldr	r3, [pc, #236]	; (8005690 <HAL_RCC_GetSysClockFreq+0x108>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x34>
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	d121      	bne.n	80055fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d11e      	bne.n	80055fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055bc:	4b34      	ldr	r3, [pc, #208]	; (8005690 <HAL_RCC_GetSysClockFreq+0x108>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d107      	bne.n	80055d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055c8:	4b31      	ldr	r3, [pc, #196]	; (8005690 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	61fb      	str	r3, [r7, #28]
 80055d6:	e005      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055d8:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <HAL_RCC_GetSysClockFreq+0x108>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	091b      	lsrs	r3, r3, #4
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055e4:	4a2b      	ldr	r2, [pc, #172]	; (8005694 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055f8:	e00a      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d102      	bne.n	8005606 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005600:	4b25      	ldr	r3, [pc, #148]	; (8005698 <HAL_RCC_GetSysClockFreq+0x110>)
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	e004      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d101      	bne.n	8005610 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800560c:	4b22      	ldr	r3, [pc, #136]	; (8005698 <HAL_RCC_GetSysClockFreq+0x110>)
 800560e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b0c      	cmp	r3, #12
 8005614:	d134      	bne.n	8005680 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005616:	4b1e      	ldr	r3, [pc, #120]	; (8005690 <HAL_RCC_GetSysClockFreq+0x108>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d003      	beq.n	800562e <HAL_RCC_GetSysClockFreq+0xa6>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d003      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0xac>
 800562c:	e005      	b.n	800563a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800562e:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <HAL_RCC_GetSysClockFreq+0x110>)
 8005630:	617b      	str	r3, [r7, #20]
      break;
 8005632:	e005      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005634:	4b18      	ldr	r3, [pc, #96]	; (8005698 <HAL_RCC_GetSysClockFreq+0x110>)
 8005636:	617b      	str	r3, [r7, #20]
      break;
 8005638:	e002      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	617b      	str	r3, [r7, #20]
      break;
 800563e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <HAL_RCC_GetSysClockFreq+0x108>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	3301      	adds	r3, #1
 800564c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800564e:	4b10      	ldr	r3, [pc, #64]	; (8005690 <HAL_RCC_GetSysClockFreq+0x108>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	fb03 f202 	mul.w	r2, r3, r2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <HAL_RCC_GetSysClockFreq+0x108>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	0e5b      	lsrs	r3, r3, #25
 800566c:	f003 0303 	and.w	r3, r3, #3
 8005670:	3301      	adds	r3, #1
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005680:	69bb      	ldr	r3, [r7, #24]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3724      	adds	r7, #36	; 0x24
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000
 8005694:	0800a524 	.word	0x0800a524
 8005698:	00f42400 	.word	0x00f42400

0800569c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056a0:	4b03      	ldr	r3, [pc, #12]	; (80056b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056a2:	681b      	ldr	r3, [r3, #0]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20000000 	.word	0x20000000

080056b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056b8:	f7ff fff0 	bl	800569c <HAL_RCC_GetHCLKFreq>
 80056bc:	4602      	mov	r2, r0
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	0a1b      	lsrs	r3, r3, #8
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	4904      	ldr	r1, [pc, #16]	; (80056dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80056ca:	5ccb      	ldrb	r3, [r1, r3]
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40021000 	.word	0x40021000
 80056dc:	0800a51c 	.word	0x0800a51c

080056e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056e4:	f7ff ffda 	bl	800569c <HAL_RCC_GetHCLKFreq>
 80056e8:	4602      	mov	r2, r0
 80056ea:	4b06      	ldr	r3, [pc, #24]	; (8005704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	0adb      	lsrs	r3, r3, #11
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	4904      	ldr	r1, [pc, #16]	; (8005708 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056f6:	5ccb      	ldrb	r3, [r1, r3]
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005700:	4618      	mov	r0, r3
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40021000 	.word	0x40021000
 8005708:	0800a51c 	.word	0x0800a51c

0800570c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005718:	4b2a      	ldr	r3, [pc, #168]	; (80057c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005724:	f7ff f9b8 	bl	8004a98 <HAL_PWREx_GetVoltageRange>
 8005728:	6178      	str	r0, [r7, #20]
 800572a:	e014      	b.n	8005756 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800572c:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800572e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005730:	4a24      	ldr	r2, [pc, #144]	; (80057c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005736:	6593      	str	r3, [r2, #88]	; 0x58
 8005738:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800573a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005744:	f7ff f9a8 	bl	8004a98 <HAL_PWREx_GetVoltageRange>
 8005748:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800574a:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005754:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575c:	d10b      	bne.n	8005776 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	d919      	bls.n	8005798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2ba0      	cmp	r3, #160	; 0xa0
 8005768:	d902      	bls.n	8005770 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800576a:	2302      	movs	r3, #2
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	e013      	b.n	8005798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005770:	2301      	movs	r3, #1
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e010      	b.n	8005798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d902      	bls.n	8005782 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800577c:	2303      	movs	r3, #3
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	e00a      	b.n	8005798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b80      	cmp	r3, #128	; 0x80
 8005786:	d102      	bne.n	800578e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005788:	2302      	movs	r3, #2
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	e004      	b.n	8005798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b70      	cmp	r3, #112	; 0x70
 8005792:	d101      	bne.n	8005798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005794:	2301      	movs	r3, #1
 8005796:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f023 0207 	bic.w	r2, r3, #7
 80057a0:	4909      	ldr	r1, [pc, #36]	; (80057c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057a8:	4b07      	ldr	r3, [pc, #28]	; (80057c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d001      	beq.n	80057ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40021000 	.word	0x40021000
 80057c8:	40022000 	.word	0x40022000

080057cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057d4:	2300      	movs	r3, #0
 80057d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057d8:	2300      	movs	r3, #0
 80057da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d031      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057f0:	d01a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80057f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057f6:	d814      	bhi.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005800:	d10f      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005802:	4b5d      	ldr	r3, [pc, #372]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	4a5c      	ldr	r2, [pc, #368]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800580e:	e00c      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	2100      	movs	r1, #0
 8005816:	4618      	mov	r0, r3
 8005818:	f000 f9f0 	bl	8005bfc <RCCEx_PLLSAI1_Config>
 800581c:	4603      	mov	r3, r0
 800581e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005820:	e003      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	74fb      	strb	r3, [r7, #19]
      break;
 8005826:	e000      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005830:	4b51      	ldr	r3, [pc, #324]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	494e      	ldr	r1, [pc, #312]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005846:	e001      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 809e 	beq.w	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585a:	2300      	movs	r3, #0
 800585c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800585e:	4b46      	ldr	r3, [pc, #280]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005874:	4b40      	ldr	r3, [pc, #256]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	4a3f      	ldr	r2, [pc, #252]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587e:	6593      	str	r3, [r2, #88]	; 0x58
 8005880:	4b3d      	ldr	r3, [pc, #244]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588c:	2301      	movs	r3, #1
 800588e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005890:	4b3a      	ldr	r3, [pc, #232]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a39      	ldr	r2, [pc, #228]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800589c:	f7fd f934 	bl	8002b08 <HAL_GetTick>
 80058a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058a2:	e009      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a4:	f7fd f930 	bl	8002b08 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d902      	bls.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	74fb      	strb	r3, [r7, #19]
        break;
 80058b6:	e005      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058b8:	4b30      	ldr	r3, [pc, #192]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ef      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d15a      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058ca:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01e      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d019      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058f2:	4b21      	ldr	r3, [pc, #132]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f8:	4a1f      	ldr	r2, [pc, #124]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005902:	4b1d      	ldr	r3, [pc, #116]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005908:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800590a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005912:	4a19      	ldr	r2, [pc, #100]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d016      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fd f8f0 	bl	8002b08 <HAL_GetTick>
 8005928:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592a:	e00b      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592c:	f7fd f8ec 	bl	8002b08 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f241 3288 	movw	r2, #5000	; 0x1388
 800593a:	4293      	cmp	r3, r2
 800593c:	d902      	bls.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	74fb      	strb	r3, [r7, #19]
            break;
 8005942:	e006      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ec      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005952:	7cfb      	ldrb	r3, [r7, #19]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005958:	4b07      	ldr	r3, [pc, #28]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005966:	4904      	ldr	r1, [pc, #16]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800596e:	e009      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005970:	7cfb      	ldrb	r3, [r7, #19]
 8005972:	74bb      	strb	r3, [r7, #18]
 8005974:	e006      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000
 800597c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	7cfb      	ldrb	r3, [r7, #19]
 8005982:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005984:	7c7b      	ldrb	r3, [r7, #17]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d105      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598a:	4b9b      	ldr	r3, [pc, #620]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800598c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598e:	4a9a      	ldr	r2, [pc, #616]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005994:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059a2:	4b95      	ldr	r3, [pc, #596]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f023 0203 	bic.w	r2, r3, #3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	4991      	ldr	r1, [pc, #580]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059c4:	4b8c      	ldr	r3, [pc, #560]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f023 020c 	bic.w	r2, r3, #12
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	4989      	ldr	r1, [pc, #548]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059e6:	4b84      	ldr	r3, [pc, #528]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	4980      	ldr	r1, [pc, #512]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a08:	4b7b      	ldr	r3, [pc, #492]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	4978      	ldr	r1, [pc, #480]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a2a:	4b73      	ldr	r3, [pc, #460]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a38:	496f      	ldr	r1, [pc, #444]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a4c:	4b6a      	ldr	r3, [pc, #424]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	4967      	ldr	r1, [pc, #412]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a6e:	4b62      	ldr	r3, [pc, #392]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	495e      	ldr	r1, [pc, #376]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a90:	4b59      	ldr	r3, [pc, #356]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	4956      	ldr	r1, [pc, #344]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ab2:	4b51      	ldr	r3, [pc, #324]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	494d      	ldr	r1, [pc, #308]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d028      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ad4:	4b48      	ldr	r3, [pc, #288]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae2:	4945      	ldr	r1, [pc, #276]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af2:	d106      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af4:	4b40      	ldr	r3, [pc, #256]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a3f      	ldr	r2, [pc, #252]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afe:	60d3      	str	r3, [r2, #12]
 8005b00:	e011      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b0a:	d10c      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	2101      	movs	r1, #1
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f872 	bl	8005bfc <RCCEx_PLLSAI1_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005b22:	7cfb      	ldrb	r3, [r7, #19]
 8005b24:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d028      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b32:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b40:	492d      	ldr	r1, [pc, #180]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b50:	d106      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b52:	4b29      	ldr	r3, [pc, #164]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	4a28      	ldr	r2, [pc, #160]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b5c:	60d3      	str	r3, [r2, #12]
 8005b5e:	e011      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b68:	d10c      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 f843 	bl	8005bfc <RCCEx_PLLSAI1_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b7a:	7cfb      	ldrb	r3, [r7, #19]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005b80:	7cfb      	ldrb	r3, [r7, #19]
 8005b82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01c      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b90:	4b19      	ldr	r3, [pc, #100]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9e:	4916      	ldr	r1, [pc, #88]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bae:	d10c      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f820 	bl	8005bfc <RCCEx_PLLSAI1_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bc0:	7cfb      	ldrb	r3, [r7, #19]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005bc6:	7cfb      	ldrb	r3, [r7, #19]
 8005bc8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bd6:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	4904      	ldr	r1, [pc, #16]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005bec:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000

08005bfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c0a:	4b74      	ldr	r3, [pc, #464]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d018      	beq.n	8005c48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c16:	4b71      	ldr	r3, [pc, #452]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0203 	and.w	r2, r3, #3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d10d      	bne.n	8005c42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
       ||
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c2e:	4b6b      	ldr	r3, [pc, #428]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	091b      	lsrs	r3, r3, #4
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
       ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d047      	beq.n	8005cd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
 8005c46:	e044      	b.n	8005cd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d018      	beq.n	8005c82 <RCCEx_PLLSAI1_Config+0x86>
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d825      	bhi.n	8005ca0 <RCCEx_PLLSAI1_Config+0xa4>
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d002      	beq.n	8005c5e <RCCEx_PLLSAI1_Config+0x62>
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d009      	beq.n	8005c70 <RCCEx_PLLSAI1_Config+0x74>
 8005c5c:	e020      	b.n	8005ca0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c5e:	4b5f      	ldr	r3, [pc, #380]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d11d      	bne.n	8005ca6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c6e:	e01a      	b.n	8005ca6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c70:	4b5a      	ldr	r3, [pc, #360]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d116      	bne.n	8005caa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c80:	e013      	b.n	8005caa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c82:	4b56      	ldr	r3, [pc, #344]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10f      	bne.n	8005cae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c8e:	4b53      	ldr	r3, [pc, #332]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c9e:	e006      	b.n	8005cae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca4:	e004      	b.n	8005cb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cae:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10d      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cb6:	4b49      	ldr	r3, [pc, #292]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6819      	ldr	r1, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	4943      	ldr	r1, [pc, #268]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d17c      	bne.n	8005dd2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005cd8:	4b40      	ldr	r3, [pc, #256]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a3f      	ldr	r2, [pc, #252]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ce2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce4:	f7fc ff10 	bl	8002b08 <HAL_GetTick>
 8005ce8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cea:	e009      	b.n	8005d00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cec:	f7fc ff0c 	bl	8002b08 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d902      	bls.n	8005d00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	73fb      	strb	r3, [r7, #15]
        break;
 8005cfe:	e005      	b.n	8005d0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d00:	4b36      	ldr	r3, [pc, #216]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1ef      	bne.n	8005cec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d15f      	bne.n	8005dd2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d110      	bne.n	8005d3a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d18:	4b30      	ldr	r3, [pc, #192]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6892      	ldr	r2, [r2, #8]
 8005d28:	0211      	lsls	r1, r2, #8
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	68d2      	ldr	r2, [r2, #12]
 8005d2e:	06d2      	lsls	r2, r2, #27
 8005d30:	430a      	orrs	r2, r1
 8005d32:	492a      	ldr	r1, [pc, #168]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	610b      	str	r3, [r1, #16]
 8005d38:	e027      	b.n	8005d8a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d112      	bne.n	8005d66 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d40:	4b26      	ldr	r3, [pc, #152]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6892      	ldr	r2, [r2, #8]
 8005d50:	0211      	lsls	r1, r2, #8
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6912      	ldr	r2, [r2, #16]
 8005d56:	0852      	lsrs	r2, r2, #1
 8005d58:	3a01      	subs	r2, #1
 8005d5a:	0552      	lsls	r2, r2, #21
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	491f      	ldr	r1, [pc, #124]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	610b      	str	r3, [r1, #16]
 8005d64:	e011      	b.n	8005d8a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d66:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6892      	ldr	r2, [r2, #8]
 8005d76:	0211      	lsls	r1, r2, #8
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6952      	ldr	r2, [r2, #20]
 8005d7c:	0852      	lsrs	r2, r2, #1
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	0652      	lsls	r2, r2, #25
 8005d82:	430a      	orrs	r2, r1
 8005d84:	4915      	ldr	r1, [pc, #84]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d8a:	4b14      	ldr	r3, [pc, #80]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d96:	f7fc feb7 	bl	8002b08 <HAL_GetTick>
 8005d9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d9c:	e009      	b.n	8005db2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d9e:	f7fc feb3 	bl	8002b08 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d902      	bls.n	8005db2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	73fb      	strb	r3, [r7, #15]
          break;
 8005db0:	e005      	b.n	8005dbe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005db2:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0ef      	beq.n	8005d9e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	4903      	ldr	r1, [pc, #12]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40021000 	.word	0x40021000

08005de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e040      	b.n	8005e74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f873 	bl	8005eee <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2224      	movs	r2, #36	; 0x24
 8005e0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fd40 	bl	80068a4 <UART_SetConfig>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e022      	b.n	8005e74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 ff8e 	bl	8006d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 f815 	bl	8006e9c <UART_CheckIdleState>
 8005e72:	4603      	mov	r3, r0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e02b      	b.n	8005ee6 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2224      	movs	r2, #36	; 0x24
 8005e92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0201 	bic.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f820 	bl	8005f02 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b08a      	sub	sp, #40	; 0x28
 8005f1a:	af02      	add	r7, sp, #8
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	603b      	str	r3, [r7, #0]
 8005f22:	4613      	mov	r3, r2
 8005f24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	f040 8082 	bne.w	8006034 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_UART_Transmit+0x26>
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e07a      	b.n	8006036 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_UART_Transmit+0x38>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e073      	b.n	8006036 <HAL_UART_Transmit+0x120>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2221      	movs	r2, #33	; 0x21
 8005f62:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f64:	f7fc fdd0 	bl	8002b08 <HAL_GetTick>
 8005f68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f82:	d108      	bne.n	8005f96 <HAL_UART_Transmit+0x80>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	e003      	b.n	8005f9e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005fa6:	e02d      	b.n	8006004 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2180      	movs	r1, #128	; 0x80
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 ffbb 	bl	8006f2e <UART_WaitOnFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e039      	b.n	8006036 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	881a      	ldrh	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd4:	b292      	uxth	r2, r2
 8005fd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	3302      	adds	r3, #2
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e008      	b.n	8005ff2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	781a      	ldrb	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b292      	uxth	r2, r2
 8005fea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1cb      	bne.n	8005fa8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2200      	movs	r2, #0
 8006018:	2140      	movs	r1, #64	; 0x40
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 ff87 	bl	8006f2e <UART_WaitOnFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e005      	b.n	8006036 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2220      	movs	r2, #32
 800602e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e000      	b.n	8006036 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006034:	2302      	movs	r3, #2
  }
}
 8006036:	4618      	mov	r0, r3
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b08a      	sub	sp, #40	; 0x28
 8006042:	af02      	add	r7, sp, #8
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006052:	2b20      	cmp	r3, #32
 8006054:	f040 80bf 	bne.w	80061d6 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_UART_Receive+0x26>
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0b7      	b.n	80061d8 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_UART_Receive+0x38>
 8006072:	2302      	movs	r3, #2
 8006074:	e0b0      	b.n	80061d8 <HAL_UART_Receive+0x19a>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2222      	movs	r2, #34	; 0x22
 800608a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006092:	f7fc fd39 	bl	8002b08 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b0:	d10e      	bne.n	80060d0 <HAL_UART_Receive+0x92>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d105      	bne.n	80060c6 <HAL_UART_Receive+0x88>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060c4:	e02d      	b.n	8006122 <HAL_UART_Receive+0xe4>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	22ff      	movs	r2, #255	; 0xff
 80060ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060ce:	e028      	b.n	8006122 <HAL_UART_Receive+0xe4>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10d      	bne.n	80060f4 <HAL_UART_Receive+0xb6>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <HAL_UART_Receive+0xac>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	22ff      	movs	r2, #255	; 0xff
 80060e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060e8:	e01b      	b.n	8006122 <HAL_UART_Receive+0xe4>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	227f      	movs	r2, #127	; 0x7f
 80060ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80060f2:	e016      	b.n	8006122 <HAL_UART_Receive+0xe4>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060fc:	d10d      	bne.n	800611a <HAL_UART_Receive+0xdc>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <HAL_UART_Receive+0xd2>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	227f      	movs	r2, #127	; 0x7f
 800610a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800610e:	e008      	b.n	8006122 <HAL_UART_Receive+0xe4>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	223f      	movs	r2, #63	; 0x3f
 8006114:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006118:	e003      	b.n	8006122 <HAL_UART_Receive+0xe4>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006128:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006132:	d108      	bne.n	8006146 <HAL_UART_Receive+0x108>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d104      	bne.n	8006146 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800613c:	2300      	movs	r3, #0
 800613e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e003      	b.n	800614e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006156:	e033      	b.n	80061c0 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2200      	movs	r2, #0
 8006160:	2120      	movs	r1, #32
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fee3 	bl	8006f2e <UART_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e032      	b.n	80061d8 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10c      	bne.n	8006192 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800617e:	b29a      	uxth	r2, r3
 8006180:	8a7b      	ldrh	r3, [r7, #18]
 8006182:	4013      	ands	r3, r2
 8006184:	b29a      	uxth	r2, r3
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	3302      	adds	r3, #2
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	e00d      	b.n	80061ae <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006198:	b29b      	uxth	r3, r3
 800619a:	b2da      	uxtb	r2, r3
 800619c:	8a7b      	ldrh	r3, [r7, #18]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	4013      	ands	r3, r2
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1c5      	bne.n	8006158 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e000      	b.n	80061d8 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80061d6:	2302      	movs	r3, #2
  }
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	d142      	bne.n	800627c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <HAL_UART_Receive_DMA+0x22>
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e03b      	b.n	800627e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_UART_Receive_DMA+0x34>
 8006210:	2302      	movs	r3, #2
 8006212:	e034      	b.n	800627e <HAL_UART_Receive_DMA+0x9e>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a18      	ldr	r2, [pc, #96]	; (8006288 <HAL_UART_Receive_DMA+0xa8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d01f      	beq.n	800626c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d018      	beq.n	800626c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	613b      	str	r3, [r7, #16]
   return(result);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	61bb      	str	r3, [r7, #24]
   return(result);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	461a      	mov	r2, r3
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 ff20 	bl	80070b8 <UART_Start_Receive_DMA>
 8006278:	4603      	mov	r3, r0
 800627a:	e000      	b.n	800627e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3728      	adds	r7, #40	; 0x28
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40008000 	.word	0x40008000

0800628c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b0ba      	sub	sp, #232	; 0xe8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80062ba:	4013      	ands	r3, r2
 80062bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d115      	bne.n	80062f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00f      	beq.n	80062f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 82a6 	beq.w	8006836 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
      }
      return;
 80062f2:	e2a0      	b.n	8006836 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80062f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8117 	beq.w	800652c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800630a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800630e:	4b85      	ldr	r3, [pc, #532]	; (8006524 <HAL_UART_IRQHandler+0x298>)
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 810a 	beq.w	800652c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d011      	beq.n	8006348 <HAL_UART_IRQHandler+0xbc>
 8006324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2201      	movs	r2, #1
 8006336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800633e:	f043 0201 	orr.w	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d011      	beq.n	8006378 <HAL_UART_IRQHandler+0xec>
 8006354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2202      	movs	r2, #2
 8006366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636e:	f043 0204 	orr.w	r2, r3, #4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d011      	beq.n	80063a8 <HAL_UART_IRQHandler+0x11c>
 8006384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00b      	beq.n	80063a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2204      	movs	r2, #4
 8006396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800639e:	f043 0202 	orr.w	r2, r3, #2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d017      	beq.n	80063e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d105      	bne.n	80063cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2208      	movs	r2, #8
 80063d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063da:	f043 0208 	orr.w	r2, r3, #8
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d012      	beq.n	8006416 <HAL_UART_IRQHandler+0x18a>
 80063f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00c      	beq.n	8006416 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800640c:	f043 0220 	orr.w	r2, r3, #32
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 820c 	beq.w	800683a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00d      	beq.n	800644a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800642e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d007      	beq.n	800644a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b40      	cmp	r3, #64	; 0x40
 8006460:	d005      	beq.n	800646e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006466:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800646a:	2b00      	cmp	r3, #0
 800646c:	d04f      	beq.n	800650e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 feee 	bl	8007250 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647e:	2b40      	cmp	r3, #64	; 0x40
 8006480:	d141      	bne.n	8006506 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800649c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3308      	adds	r3, #8
 80064aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1d9      	bne.n	8006482 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d013      	beq.n	80064fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	4a13      	ldr	r2, [pc, #76]	; (8006528 <HAL_UART_IRQHandler+0x29c>)
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fd fb39 	bl	8003b5a <HAL_DMA_Abort_IT>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d017      	beq.n	800651e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064fc:	e00f      	b.n	800651e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9ba 	bl	8006878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	e00b      	b.n	800651e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9b6 	bl	8006878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650c:	e007      	b.n	800651e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f9b2 	bl	8006878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800651c:	e18d      	b.n	800683a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651e:	bf00      	nop
    return;
 8006520:	e18b      	b.n	800683a <HAL_UART_IRQHandler+0x5ae>
 8006522:	bf00      	nop
 8006524:	04000120 	.word	0x04000120
 8006528:	080074ef 	.word	0x080074ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006530:	2b01      	cmp	r3, #1
 8006532:	f040 8146 	bne.w	80067c2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 813f 	beq.w	80067c2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8138 	beq.w	80067c2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2210      	movs	r2, #16
 8006558:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b40      	cmp	r3, #64	; 0x40
 8006566:	f040 80b4 	bne.w	80066d2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006576:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 815f 	beq.w	800683e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800658a:	429a      	cmp	r2, r3
 800658c:	f080 8157 	bcs.w	800683e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006596:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f040 8085 	bne.w	80066b6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1da      	bne.n	80065ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3308      	adds	r3, #8
 8006616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800661a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800661e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006622:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800662c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e1      	bne.n	80065f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3308      	adds	r3, #8
 8006638:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3308      	adds	r3, #8
 8006652:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006656:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006658:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800665c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e3      	bne.n	8006632 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006686:	f023 0310 	bic.w	r3, r3, #16
 800668a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006698:	65bb      	str	r3, [r7, #88]	; 0x58
 800669a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800669e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e4      	bne.n	8006676 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd fa14 	bl	8003ade <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f8de 	bl	800688c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066d0:	e0b5      	b.n	800683e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 80a7 	beq.w	8006842 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80066f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80a2 	beq.w	8006842 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800670c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006720:	647b      	str	r3, [r7, #68]	; 0x44
 8006722:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e4      	bne.n	80066fe <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	623b      	str	r3, [r7, #32]
   return(result);
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006758:	633a      	str	r2, [r7, #48]	; 0x30
 800675a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800675e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e3      	bne.n	8006734 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	60fb      	str	r3, [r7, #12]
   return(result);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0310 	bic.w	r3, r3, #16
 8006792:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	69b9      	ldr	r1, [r7, #24]
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	617b      	str	r3, [r7, #20]
   return(result);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e4      	bne.n	800677e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f866 	bl	800688c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067c0:	e03f      	b.n	8006842 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00e      	beq.n	80067ec <HAL_UART_IRQHandler+0x560>
 80067ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d008      	beq.n	80067ec <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fec2 	bl	800756e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067ea:	e02d      	b.n	8006848 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00e      	beq.n	8006816 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01c      	beq.n	8006846 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
    }
    return;
 8006814:	e017      	b.n	8006846 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d012      	beq.n	8006848 <HAL_UART_IRQHandler+0x5bc>
 8006822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00c      	beq.n	8006848 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fe73 	bl	800751a <UART_EndTransmit_IT>
    return;
 8006834:	e008      	b.n	8006848 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006836:	bf00      	nop
 8006838:	e006      	b.n	8006848 <HAL_UART_IRQHandler+0x5bc>
    return;
 800683a:	bf00      	nop
 800683c:	e004      	b.n	8006848 <HAL_UART_IRQHandler+0x5bc>
      return;
 800683e:	bf00      	nop
 8006840:	e002      	b.n	8006848 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006842:	bf00      	nop
 8006844:	e000      	b.n	8006848 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006846:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006848:	37e8      	adds	r7, #232	; 0xe8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop

08006850 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068a8:	b08a      	sub	sp, #40	; 0x28
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b9e      	ldr	r3, [pc, #632]	; (8006b4c <UART_SetConfig+0x2a8>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068dc:	430b      	orrs	r3, r1
 80068de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a93      	ldr	r2, [pc, #588]	; (8006b50 <UART_SetConfig+0x2ac>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690c:	4313      	orrs	r3, r2
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006920:	430a      	orrs	r2, r1
 8006922:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a8a      	ldr	r2, [pc, #552]	; (8006b54 <UART_SetConfig+0x2b0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d126      	bne.n	800697c <UART_SetConfig+0xd8>
 800692e:	4b8a      	ldr	r3, [pc, #552]	; (8006b58 <UART_SetConfig+0x2b4>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	2b03      	cmp	r3, #3
 800693a:	d81b      	bhi.n	8006974 <UART_SetConfig+0xd0>
 800693c:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <UART_SetConfig+0xa0>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	08006955 	.word	0x08006955
 8006948:	08006965 	.word	0x08006965
 800694c:	0800695d 	.word	0x0800695d
 8006950:	0800696d 	.word	0x0800696d
 8006954:	2301      	movs	r3, #1
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695a:	e0ab      	b.n	8006ab4 <UART_SetConfig+0x210>
 800695c:	2302      	movs	r3, #2
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e0a7      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006964:	2304      	movs	r3, #4
 8006966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800696a:	e0a3      	b.n	8006ab4 <UART_SetConfig+0x210>
 800696c:	2308      	movs	r3, #8
 800696e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006972:	e09f      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006974:	2310      	movs	r3, #16
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800697a:	e09b      	b.n	8006ab4 <UART_SetConfig+0x210>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a76      	ldr	r2, [pc, #472]	; (8006b5c <UART_SetConfig+0x2b8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d138      	bne.n	80069f8 <UART_SetConfig+0x154>
 8006986:	4b74      	ldr	r3, [pc, #464]	; (8006b58 <UART_SetConfig+0x2b4>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f003 030c 	and.w	r3, r3, #12
 8006990:	2b0c      	cmp	r3, #12
 8006992:	d82d      	bhi.n	80069f0 <UART_SetConfig+0x14c>
 8006994:	a201      	add	r2, pc, #4	; (adr r2, 800699c <UART_SetConfig+0xf8>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069d1 	.word	0x080069d1
 80069a0:	080069f1 	.word	0x080069f1
 80069a4:	080069f1 	.word	0x080069f1
 80069a8:	080069f1 	.word	0x080069f1
 80069ac:	080069e1 	.word	0x080069e1
 80069b0:	080069f1 	.word	0x080069f1
 80069b4:	080069f1 	.word	0x080069f1
 80069b8:	080069f1 	.word	0x080069f1
 80069bc:	080069d9 	.word	0x080069d9
 80069c0:	080069f1 	.word	0x080069f1
 80069c4:	080069f1 	.word	0x080069f1
 80069c8:	080069f1 	.word	0x080069f1
 80069cc:	080069e9 	.word	0x080069e9
 80069d0:	2300      	movs	r3, #0
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e06d      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069d8:	2302      	movs	r3, #2
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e069      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069e0:	2304      	movs	r3, #4
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e065      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069e8:	2308      	movs	r3, #8
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	e061      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069f0:	2310      	movs	r3, #16
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e05d      	b.n	8006ab4 <UART_SetConfig+0x210>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a58      	ldr	r2, [pc, #352]	; (8006b60 <UART_SetConfig+0x2bc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d125      	bne.n	8006a4e <UART_SetConfig+0x1aa>
 8006a02:	4b55      	ldr	r3, [pc, #340]	; (8006b58 <UART_SetConfig+0x2b4>)
 8006a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a0c:	2b30      	cmp	r3, #48	; 0x30
 8006a0e:	d016      	beq.n	8006a3e <UART_SetConfig+0x19a>
 8006a10:	2b30      	cmp	r3, #48	; 0x30
 8006a12:	d818      	bhi.n	8006a46 <UART_SetConfig+0x1a2>
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d00a      	beq.n	8006a2e <UART_SetConfig+0x18a>
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d814      	bhi.n	8006a46 <UART_SetConfig+0x1a2>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <UART_SetConfig+0x182>
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d008      	beq.n	8006a36 <UART_SetConfig+0x192>
 8006a24:	e00f      	b.n	8006a46 <UART_SetConfig+0x1a2>
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2c:	e042      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a2e:	2302      	movs	r3, #2
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a34:	e03e      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a36:	2304      	movs	r3, #4
 8006a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3c:	e03a      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a3e:	2308      	movs	r3, #8
 8006a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a44:	e036      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a46:	2310      	movs	r3, #16
 8006a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4c:	e032      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a3f      	ldr	r2, [pc, #252]	; (8006b50 <UART_SetConfig+0x2ac>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d12a      	bne.n	8006aae <UART_SetConfig+0x20a>
 8006a58:	4b3f      	ldr	r3, [pc, #252]	; (8006b58 <UART_SetConfig+0x2b4>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a66:	d01a      	beq.n	8006a9e <UART_SetConfig+0x1fa>
 8006a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a6c:	d81b      	bhi.n	8006aa6 <UART_SetConfig+0x202>
 8006a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a72:	d00c      	beq.n	8006a8e <UART_SetConfig+0x1ea>
 8006a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a78:	d815      	bhi.n	8006aa6 <UART_SetConfig+0x202>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <UART_SetConfig+0x1e2>
 8006a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a82:	d008      	beq.n	8006a96 <UART_SetConfig+0x1f2>
 8006a84:	e00f      	b.n	8006aa6 <UART_SetConfig+0x202>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8c:	e012      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a94:	e00e      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a96:	2304      	movs	r3, #4
 8006a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9c:	e00a      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006a9e:	2308      	movs	r3, #8
 8006aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa4:	e006      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006aa6:	2310      	movs	r3, #16
 8006aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aac:	e002      	b.n	8006ab4 <UART_SetConfig+0x210>
 8006aae:	2310      	movs	r3, #16
 8006ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a25      	ldr	r2, [pc, #148]	; (8006b50 <UART_SetConfig+0x2ac>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	f040 808a 	bne.w	8006bd4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d824      	bhi.n	8006b12 <UART_SetConfig+0x26e>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0x22c>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006af5 	.word	0x08006af5
 8006ad4:	08006b13 	.word	0x08006b13
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006b13 	.word	0x08006b13
 8006ae0:	08006b03 	.word	0x08006b03
 8006ae4:	08006b13 	.word	0x08006b13
 8006ae8:	08006b13 	.word	0x08006b13
 8006aec:	08006b13 	.word	0x08006b13
 8006af0:	08006b0b 	.word	0x08006b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af4:	f7fe fdde 	bl	80056b4 <HAL_RCC_GetPCLK1Freq>
 8006af8:	61f8      	str	r0, [r7, #28]
        break;
 8006afa:	e010      	b.n	8006b1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006afc:	4b19      	ldr	r3, [pc, #100]	; (8006b64 <UART_SetConfig+0x2c0>)
 8006afe:	61fb      	str	r3, [r7, #28]
        break;
 8006b00:	e00d      	b.n	8006b1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b02:	f7fe fd41 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8006b06:	61f8      	str	r0, [r7, #28]
        break;
 8006b08:	e009      	b.n	8006b1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b0e:	61fb      	str	r3, [r7, #28]
        break;
 8006b10:	e005      	b.n	8006b1e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8109 	beq.w	8006d38 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d305      	bcc.n	8006b42 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d912      	bls.n	8006b68 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b48:	e0f6      	b.n	8006d38 <UART_SetConfig+0x494>
 8006b4a:	bf00      	nop
 8006b4c:	efff69f3 	.word	0xefff69f3
 8006b50:	40008000 	.word	0x40008000
 8006b54:	40013800 	.word	0x40013800
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40004400 	.word	0x40004400
 8006b60:	40004800 	.word	0x40004800
 8006b64:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	461c      	mov	r4, r3
 8006b6e:	4615      	mov	r5, r2
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	022b      	lsls	r3, r5, #8
 8006b7a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b7e:	0222      	lsls	r2, r4, #8
 8006b80:	68f9      	ldr	r1, [r7, #12]
 8006b82:	6849      	ldr	r1, [r1, #4]
 8006b84:	0849      	lsrs	r1, r1, #1
 8006b86:	2000      	movs	r0, #0
 8006b88:	4688      	mov	r8, r1
 8006b8a:	4681      	mov	r9, r0
 8006b8c:	eb12 0a08 	adds.w	sl, r2, r8
 8006b90:	eb43 0b09 	adc.w	fp, r3, r9
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	607a      	str	r2, [r7, #4]
 8006b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	f7fa f84f 	bl	8000c48 <__aeabi_uldivmod>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4613      	mov	r3, r2
 8006bb0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb8:	d308      	bcc.n	8006bcc <UART_SetConfig+0x328>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc0:	d204      	bcs.n	8006bcc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	60da      	str	r2, [r3, #12]
 8006bca:	e0b5      	b.n	8006d38 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bd2:	e0b1      	b.n	8006d38 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bdc:	d15d      	bne.n	8006c9a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d827      	bhi.n	8006c36 <UART_SetConfig+0x392>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0x348>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c19 	.word	0x08006c19
 8006bf4:	08006c21 	.word	0x08006c21
 8006bf8:	08006c37 	.word	0x08006c37
 8006bfc:	08006c27 	.word	0x08006c27
 8006c00:	08006c37 	.word	0x08006c37
 8006c04:	08006c37 	.word	0x08006c37
 8006c08:	08006c37 	.word	0x08006c37
 8006c0c:	08006c2f 	.word	0x08006c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c10:	f7fe fd50 	bl	80056b4 <HAL_RCC_GetPCLK1Freq>
 8006c14:	61f8      	str	r0, [r7, #28]
        break;
 8006c16:	e014      	b.n	8006c42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c18:	f7fe fd62 	bl	80056e0 <HAL_RCC_GetPCLK2Freq>
 8006c1c:	61f8      	str	r0, [r7, #28]
        break;
 8006c1e:	e010      	b.n	8006c42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c20:	4b4c      	ldr	r3, [pc, #304]	; (8006d54 <UART_SetConfig+0x4b0>)
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e00d      	b.n	8006c42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c26:	f7fe fcaf 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8006c2a:	61f8      	str	r0, [r7, #28]
        break;
 8006c2c:	e009      	b.n	8006c42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	61fb      	str	r3, [r7, #28]
        break;
 8006c34:	e005      	b.n	8006c42 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d077      	beq.n	8006d38 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	005a      	lsls	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	441a      	add	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b0f      	cmp	r3, #15
 8006c62:	d916      	bls.n	8006c92 <UART_SetConfig+0x3ee>
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6a:	d212      	bcs.n	8006c92 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f023 030f 	bic.w	r3, r3, #15
 8006c74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	8afb      	ldrh	r3, [r7, #22]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	8afa      	ldrh	r2, [r7, #22]
 8006c8e:	60da      	str	r2, [r3, #12]
 8006c90:	e052      	b.n	8006d38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c98:	e04e      	b.n	8006d38 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d827      	bhi.n	8006cf2 <UART_SetConfig+0x44e>
 8006ca2:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0x404>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	08006cf3 	.word	0x08006cf3
 8006cb8:	08006ce3 	.word	0x08006ce3
 8006cbc:	08006cf3 	.word	0x08006cf3
 8006cc0:	08006cf3 	.word	0x08006cf3
 8006cc4:	08006cf3 	.word	0x08006cf3
 8006cc8:	08006ceb 	.word	0x08006ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ccc:	f7fe fcf2 	bl	80056b4 <HAL_RCC_GetPCLK1Freq>
 8006cd0:	61f8      	str	r0, [r7, #28]
        break;
 8006cd2:	e014      	b.n	8006cfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd4:	f7fe fd04 	bl	80056e0 <HAL_RCC_GetPCLK2Freq>
 8006cd8:	61f8      	str	r0, [r7, #28]
        break;
 8006cda:	e010      	b.n	8006cfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cdc:	4b1d      	ldr	r3, [pc, #116]	; (8006d54 <UART_SetConfig+0x4b0>)
 8006cde:	61fb      	str	r3, [r7, #28]
        break;
 8006ce0:	e00d      	b.n	8006cfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce2:	f7fe fc51 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8006ce6:	61f8      	str	r0, [r7, #28]
        break;
 8006ce8:	e009      	b.n	8006cfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cee:	61fb      	str	r3, [r7, #28]
        break;
 8006cf0:	e005      	b.n	8006cfe <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d019      	beq.n	8006d38 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	085a      	lsrs	r2, r3, #1
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	441a      	add	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b0f      	cmp	r3, #15
 8006d1c:	d909      	bls.n	8006d32 <UART_SetConfig+0x48e>
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d24:	d205      	bcs.n	8006d32 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60da      	str	r2, [r3, #12]
 8006d30:	e002      	b.n	8006d38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3728      	adds	r7, #40	; 0x28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d52:	bf00      	nop
 8006d54:	00f42400 	.word	0x00f42400

08006d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00a      	beq.n	8006d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	f003 0308 	and.w	r3, r3, #8
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	f003 0310 	and.w	r3, r3, #16
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01a      	beq.n	8006e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e56:	d10a      	bne.n	8006e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00a      	beq.n	8006e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]
  }
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eac:	f7fb fe2c 	bl	8002b08 <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d10e      	bne.n	8006ede <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f82d 	bl	8006f2e <UART_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e023      	b.n	8006f26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d10e      	bne.n	8006f0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f817 	bl	8006f2e <UART_WaitOnFlagUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e00d      	b.n	8006f26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b09c      	sub	sp, #112	; 0x70
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3e:	e0a5      	b.n	800708c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	f000 80a1 	beq.w	800708c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4a:	f7fb fddd 	bl	8002b08 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d302      	bcc.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d13e      	bne.n	8006fde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f74:	667b      	str	r3, [r7, #100]	; 0x64
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e6      	bne.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3308      	adds	r3, #8
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	f023 0301 	bic.w	r3, r3, #1
 8006fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e5      	bne.n	8006f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e067      	b.n	80070ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d04f      	beq.n	800708c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffa:	d147      	bne.n	800708c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007004:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800701a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
 8007026:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800702a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3308      	adds	r3, #8
 800703e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	613b      	str	r3, [r7, #16]
   return(result);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f023 0301 	bic.w	r3, r3, #1
 800704e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3308      	adds	r3, #8
 8007056:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007058:	623a      	str	r2, [r7, #32]
 800705a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	69f9      	ldr	r1, [r7, #28]
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	61bb      	str	r3, [r7, #24]
   return(result);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2220      	movs	r2, #32
 800707c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e010      	b.n	80070ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69da      	ldr	r2, [r3, #28]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	4013      	ands	r3, r2
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	429a      	cmp	r2, r3
 800709a:	bf0c      	ite	eq
 800709c:	2301      	moveq	r3, #1
 800709e:	2300      	movne	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	f43f af4a 	beq.w	8006f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3770      	adds	r7, #112	; 0x70
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b096      	sub	sp, #88	; 0x58
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	88fa      	ldrh	r2, [r7, #6]
 80070d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2222      	movs	r2, #34	; 0x22
 80070e0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d02b      	beq.n	8007142 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	4a42      	ldr	r2, [pc, #264]	; (80071f8 <UART_Start_Receive_DMA+0x140>)
 80070f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f6:	4a41      	ldr	r2, [pc, #260]	; (80071fc <UART_Start_Receive_DMA+0x144>)
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fe:	4a40      	ldr	r2, [pc, #256]	; (8007200 <UART_Start_Receive_DMA+0x148>)
 8007100:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007106:	2200      	movs	r2, #0
 8007108:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3324      	adds	r3, #36	; 0x24
 8007114:	4619      	mov	r1, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	461a      	mov	r2, r3
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	f7fc fc7e 	bl	8003a1e <HAL_DMA_Start_IT>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00c      	beq.n	8007142 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2210      	movs	r2, #16
 800712c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e055      	b.n	80071ee <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d018      	beq.n	8007184 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007166:	657b      	str	r3, [r7, #84]	; 0x54
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007170:	64bb      	str	r3, [r7, #72]	; 0x48
 8007172:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800717e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e6      	bne.n	8007152 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	f043 0301 	orr.w	r3, r3, #1
 800719a:	653b      	str	r3, [r7, #80]	; 0x50
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3308      	adds	r3, #8
 80071a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071a4:	637a      	str	r2, [r7, #52]	; 0x34
 80071a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e5      	bne.n	8007184 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	613b      	str	r3, [r7, #16]
   return(result);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3308      	adds	r3, #8
 80071d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071d8:	623a      	str	r2, [r7, #32]
 80071da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	69f9      	ldr	r1, [r7, #28]
 80071de:	6a3a      	ldr	r2, [r7, #32]
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e5      	bne.n	80071b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3758      	adds	r7, #88	; 0x58
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	08007317 	.word	0x08007317
 80071fc:	0800743b 	.word	0x0800743b
 8007200:	08007473 	.word	0x08007473

08007204 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007204:	b480      	push	{r7}
 8007206:	b089      	sub	sp, #36	; 0x24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	60bb      	str	r3, [r7, #8]
   return(result);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007220:	61fb      	str	r3, [r7, #28]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6979      	ldr	r1, [r7, #20]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	613b      	str	r3, [r7, #16]
   return(result);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e6      	bne.n	800720c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	679a      	str	r2, [r3, #120]	; 0x78
}
 8007244:	bf00      	nop
 8007246:	3724      	adds	r7, #36	; 0x24
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007250:	b480      	push	{r7}
 8007252:	b095      	sub	sp, #84	; 0x54
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800726c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007276:	643b      	str	r3, [r7, #64]	; 0x40
 8007278:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800727c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e6      	bne.n	8007258 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3308      	adds	r3, #8
 8007290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	61fb      	str	r3, [r7, #28]
   return(result);
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e5      	bne.n	800728a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d118      	bne.n	80072f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f023 0310 	bic.w	r3, r3, #16
 80072da:	647b      	str	r3, [r7, #68]	; 0x44
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6979      	ldr	r1, [r7, #20]
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	613b      	str	r3, [r7, #16]
   return(result);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e6      	bne.n	80072c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	665a      	str	r2, [r3, #100]	; 0x64
}
 800730a:	bf00      	nop
 800730c:	3754      	adds	r7, #84	; 0x54
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b09c      	sub	sp, #112	; 0x70
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d170      	bne.n	8007414 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007334:	2200      	movs	r2, #0
 8007336:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800733a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007342:	e853 3f00 	ldrex	r3, [r3]
 8007346:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800734a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800734e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007358:	65bb      	str	r3, [r7, #88]	; 0x58
 800735a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800735e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e6      	bne.n	800733a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	e853 3f00 	ldrex	r3, [r3]
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800737c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	667b      	str	r3, [r7, #100]	; 0x64
 8007384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3308      	adds	r3, #8
 800738a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800738c:	647a      	str	r2, [r7, #68]	; 0x44
 800738e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007390:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007394:	e841 2300 	strex	r3, r2, [r1]
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800739a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1e5      	bne.n	800736c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	623b      	str	r3, [r7, #32]
   return(result);
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b6:	663b      	str	r3, [r7, #96]	; 0x60
 80073b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073c0:	633a      	str	r2, [r7, #48]	; 0x30
 80073c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e5      	bne.n	80073a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d6:	2220      	movs	r2, #32
 80073d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d118      	bne.n	8007414 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0310 	bic.w	r3, r3, #16
 80073f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007400:	61fb      	str	r3, [r7, #28]
 8007402:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	69b9      	ldr	r1, [r7, #24]
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	617b      	str	r3, [r7, #20]
   return(result);
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e6      	bne.n	80073e2 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007418:	2b01      	cmp	r3, #1
 800741a:	d107      	bne.n	800742c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800741c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800741e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007422:	4619      	mov	r1, r3
 8007424:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007426:	f7ff fa31 	bl	800688c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800742a:	e002      	b.n	8007432 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800742c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800742e:	f7fa f8b7 	bl	80015a0 <HAL_UART_RxCpltCallback>
}
 8007432:	bf00      	nop
 8007434:	3770      	adds	r7, #112	; 0x70
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007446:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800744c:	2b01      	cmp	r3, #1
 800744e:	d109      	bne.n	8007464 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	b29b      	uxth	r3, r3
 800745a:	4619      	mov	r1, r3
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff fa15 	bl	800688c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007462:	e002      	b.n	800746a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff f9fd 	bl	8006864 <HAL_UART_RxHalfCpltCallback>
}
 800746a:	bf00      	nop
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b086      	sub	sp, #24
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007484:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800748a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007496:	2b80      	cmp	r3, #128	; 0x80
 8007498:	d109      	bne.n	80074ae <UART_DMAError+0x3c>
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b21      	cmp	r3, #33	; 0x21
 800749e:	d106      	bne.n	80074ae <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80074a8:	6978      	ldr	r0, [r7, #20]
 80074aa:	f7ff feab 	bl	8007204 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d109      	bne.n	80074d0 <UART_DMAError+0x5e>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b22      	cmp	r3, #34	; 0x22
 80074c0:	d106      	bne.n	80074d0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80074ca:	6978      	ldr	r0, [r7, #20]
 80074cc:	f7ff fec0 	bl	8007250 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074d6:	f043 0210 	orr.w	r2, r3, #16
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074e0:	6978      	ldr	r0, [r7, #20]
 80074e2:	f7ff f9c9 	bl	8006878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e6:	bf00      	nop
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f7ff f9b3 	bl	8006878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b088      	sub	sp, #32
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	61bb      	str	r3, [r7, #24]
 8007542:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	6979      	ldr	r1, [r7, #20]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	613b      	str	r3, [r7, #16]
   return(result);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e6      	bne.n	8007522 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff f975 	bl	8006850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007566:	bf00      	nop
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <__errno>:
 8007584:	4b01      	ldr	r3, [pc, #4]	; (800758c <__errno+0x8>)
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	2000001c 	.word	0x2000001c

08007590 <__libc_init_array>:
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	4d0d      	ldr	r5, [pc, #52]	; (80075c8 <__libc_init_array+0x38>)
 8007594:	4c0d      	ldr	r4, [pc, #52]	; (80075cc <__libc_init_array+0x3c>)
 8007596:	1b64      	subs	r4, r4, r5
 8007598:	10a4      	asrs	r4, r4, #2
 800759a:	2600      	movs	r6, #0
 800759c:	42a6      	cmp	r6, r4
 800759e:	d109      	bne.n	80075b4 <__libc_init_array+0x24>
 80075a0:	4d0b      	ldr	r5, [pc, #44]	; (80075d0 <__libc_init_array+0x40>)
 80075a2:	4c0c      	ldr	r4, [pc, #48]	; (80075d4 <__libc_init_array+0x44>)
 80075a4:	f002 ff16 	bl	800a3d4 <_init>
 80075a8:	1b64      	subs	r4, r4, r5
 80075aa:	10a4      	asrs	r4, r4, #2
 80075ac:	2600      	movs	r6, #0
 80075ae:	42a6      	cmp	r6, r4
 80075b0:	d105      	bne.n	80075be <__libc_init_array+0x2e>
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b8:	4798      	blx	r3
 80075ba:	3601      	adds	r6, #1
 80075bc:	e7ee      	b.n	800759c <__libc_init_array+0xc>
 80075be:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c2:	4798      	blx	r3
 80075c4:	3601      	adds	r6, #1
 80075c6:	e7f2      	b.n	80075ae <__libc_init_array+0x1e>
 80075c8:	0800c3ec 	.word	0x0800c3ec
 80075cc:	0800c3ec 	.word	0x0800c3ec
 80075d0:	0800c3ec 	.word	0x0800c3ec
 80075d4:	0800c3f0 	.word	0x0800c3f0

080075d8 <memcpy>:
 80075d8:	440a      	add	r2, r1
 80075da:	4291      	cmp	r1, r2
 80075dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e0:	d100      	bne.n	80075e4 <memcpy+0xc>
 80075e2:	4770      	bx	lr
 80075e4:	b510      	push	{r4, lr}
 80075e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ee:	4291      	cmp	r1, r2
 80075f0:	d1f9      	bne.n	80075e6 <memcpy+0xe>
 80075f2:	bd10      	pop	{r4, pc}

080075f4 <memset>:
 80075f4:	4402      	add	r2, r0
 80075f6:	4603      	mov	r3, r0
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d100      	bne.n	80075fe <memset+0xa>
 80075fc:	4770      	bx	lr
 80075fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007602:	e7f9      	b.n	80075f8 <memset+0x4>

08007604 <__cvt>:
 8007604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	ec55 4b10 	vmov	r4, r5, d0
 800760c:	2d00      	cmp	r5, #0
 800760e:	460e      	mov	r6, r1
 8007610:	4619      	mov	r1, r3
 8007612:	462b      	mov	r3, r5
 8007614:	bfbb      	ittet	lt
 8007616:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800761a:	461d      	movlt	r5, r3
 800761c:	2300      	movge	r3, #0
 800761e:	232d      	movlt	r3, #45	; 0x2d
 8007620:	700b      	strb	r3, [r1, #0]
 8007622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007624:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007628:	4691      	mov	r9, r2
 800762a:	f023 0820 	bic.w	r8, r3, #32
 800762e:	bfbc      	itt	lt
 8007630:	4622      	movlt	r2, r4
 8007632:	4614      	movlt	r4, r2
 8007634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007638:	d005      	beq.n	8007646 <__cvt+0x42>
 800763a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800763e:	d100      	bne.n	8007642 <__cvt+0x3e>
 8007640:	3601      	adds	r6, #1
 8007642:	2102      	movs	r1, #2
 8007644:	e000      	b.n	8007648 <__cvt+0x44>
 8007646:	2103      	movs	r1, #3
 8007648:	ab03      	add	r3, sp, #12
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	ab02      	add	r3, sp, #8
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	ec45 4b10 	vmov	d0, r4, r5
 8007654:	4653      	mov	r3, sl
 8007656:	4632      	mov	r2, r6
 8007658:	f000 fcfe 	bl	8008058 <_dtoa_r>
 800765c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007660:	4607      	mov	r7, r0
 8007662:	d102      	bne.n	800766a <__cvt+0x66>
 8007664:	f019 0f01 	tst.w	r9, #1
 8007668:	d022      	beq.n	80076b0 <__cvt+0xac>
 800766a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800766e:	eb07 0906 	add.w	r9, r7, r6
 8007672:	d110      	bne.n	8007696 <__cvt+0x92>
 8007674:	783b      	ldrb	r3, [r7, #0]
 8007676:	2b30      	cmp	r3, #48	; 0x30
 8007678:	d10a      	bne.n	8007690 <__cvt+0x8c>
 800767a:	2200      	movs	r2, #0
 800767c:	2300      	movs	r3, #0
 800767e:	4620      	mov	r0, r4
 8007680:	4629      	mov	r1, r5
 8007682:	f7f9 fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 8007686:	b918      	cbnz	r0, 8007690 <__cvt+0x8c>
 8007688:	f1c6 0601 	rsb	r6, r6, #1
 800768c:	f8ca 6000 	str.w	r6, [sl]
 8007690:	f8da 3000 	ldr.w	r3, [sl]
 8007694:	4499      	add	r9, r3
 8007696:	2200      	movs	r2, #0
 8007698:	2300      	movs	r3, #0
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	f7f9 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80076a2:	b108      	cbz	r0, 80076a8 <__cvt+0xa4>
 80076a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80076a8:	2230      	movs	r2, #48	; 0x30
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	454b      	cmp	r3, r9
 80076ae:	d307      	bcc.n	80076c0 <__cvt+0xbc>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076b4:	1bdb      	subs	r3, r3, r7
 80076b6:	4638      	mov	r0, r7
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	b004      	add	sp, #16
 80076bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c0:	1c59      	adds	r1, r3, #1
 80076c2:	9103      	str	r1, [sp, #12]
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	e7f0      	b.n	80076aa <__cvt+0xa6>

080076c8 <__exponent>:
 80076c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076ca:	4603      	mov	r3, r0
 80076cc:	2900      	cmp	r1, #0
 80076ce:	bfb8      	it	lt
 80076d0:	4249      	neglt	r1, r1
 80076d2:	f803 2b02 	strb.w	r2, [r3], #2
 80076d6:	bfb4      	ite	lt
 80076d8:	222d      	movlt	r2, #45	; 0x2d
 80076da:	222b      	movge	r2, #43	; 0x2b
 80076dc:	2909      	cmp	r1, #9
 80076de:	7042      	strb	r2, [r0, #1]
 80076e0:	dd2a      	ble.n	8007738 <__exponent+0x70>
 80076e2:	f10d 0407 	add.w	r4, sp, #7
 80076e6:	46a4      	mov	ip, r4
 80076e8:	270a      	movs	r7, #10
 80076ea:	46a6      	mov	lr, r4
 80076ec:	460a      	mov	r2, r1
 80076ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80076f2:	fb07 1516 	mls	r5, r7, r6, r1
 80076f6:	3530      	adds	r5, #48	; 0x30
 80076f8:	2a63      	cmp	r2, #99	; 0x63
 80076fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80076fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007702:	4631      	mov	r1, r6
 8007704:	dcf1      	bgt.n	80076ea <__exponent+0x22>
 8007706:	3130      	adds	r1, #48	; 0x30
 8007708:	f1ae 0502 	sub.w	r5, lr, #2
 800770c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007710:	1c44      	adds	r4, r0, #1
 8007712:	4629      	mov	r1, r5
 8007714:	4561      	cmp	r1, ip
 8007716:	d30a      	bcc.n	800772e <__exponent+0x66>
 8007718:	f10d 0209 	add.w	r2, sp, #9
 800771c:	eba2 020e 	sub.w	r2, r2, lr
 8007720:	4565      	cmp	r5, ip
 8007722:	bf88      	it	hi
 8007724:	2200      	movhi	r2, #0
 8007726:	4413      	add	r3, r2
 8007728:	1a18      	subs	r0, r3, r0
 800772a:	b003      	add	sp, #12
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007732:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007736:	e7ed      	b.n	8007714 <__exponent+0x4c>
 8007738:	2330      	movs	r3, #48	; 0x30
 800773a:	3130      	adds	r1, #48	; 0x30
 800773c:	7083      	strb	r3, [r0, #2]
 800773e:	70c1      	strb	r1, [r0, #3]
 8007740:	1d03      	adds	r3, r0, #4
 8007742:	e7f1      	b.n	8007728 <__exponent+0x60>

08007744 <_printf_float>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	ed2d 8b02 	vpush	{d8}
 800774c:	b08d      	sub	sp, #52	; 0x34
 800774e:	460c      	mov	r4, r1
 8007750:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007754:	4616      	mov	r6, r2
 8007756:	461f      	mov	r7, r3
 8007758:	4605      	mov	r5, r0
 800775a:	f001 fa6b 	bl	8008c34 <_localeconv_r>
 800775e:	f8d0 a000 	ldr.w	sl, [r0]
 8007762:	4650      	mov	r0, sl
 8007764:	f7f8 fd34 	bl	80001d0 <strlen>
 8007768:	2300      	movs	r3, #0
 800776a:	930a      	str	r3, [sp, #40]	; 0x28
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	9305      	str	r3, [sp, #20]
 8007770:	f8d8 3000 	ldr.w	r3, [r8]
 8007774:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007778:	3307      	adds	r3, #7
 800777a:	f023 0307 	bic.w	r3, r3, #7
 800777e:	f103 0208 	add.w	r2, r3, #8
 8007782:	f8c8 2000 	str.w	r2, [r8]
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800778e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007792:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007796:	9307      	str	r3, [sp, #28]
 8007798:	f8cd 8018 	str.w	r8, [sp, #24]
 800779c:	ee08 0a10 	vmov	s16, r0
 80077a0:	4b9f      	ldr	r3, [pc, #636]	; (8007a20 <_printf_float+0x2dc>)
 80077a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077a6:	f04f 32ff 	mov.w	r2, #4294967295
 80077aa:	f7f9 f9bf 	bl	8000b2c <__aeabi_dcmpun>
 80077ae:	bb88      	cbnz	r0, 8007814 <_printf_float+0xd0>
 80077b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077b4:	4b9a      	ldr	r3, [pc, #616]	; (8007a20 <_printf_float+0x2dc>)
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ba:	f7f9 f999 	bl	8000af0 <__aeabi_dcmple>
 80077be:	bb48      	cbnz	r0, 8007814 <_printf_float+0xd0>
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	4640      	mov	r0, r8
 80077c6:	4649      	mov	r1, r9
 80077c8:	f7f9 f988 	bl	8000adc <__aeabi_dcmplt>
 80077cc:	b110      	cbz	r0, 80077d4 <_printf_float+0x90>
 80077ce:	232d      	movs	r3, #45	; 0x2d
 80077d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d4:	4b93      	ldr	r3, [pc, #588]	; (8007a24 <_printf_float+0x2e0>)
 80077d6:	4894      	ldr	r0, [pc, #592]	; (8007a28 <_printf_float+0x2e4>)
 80077d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80077dc:	bf94      	ite	ls
 80077de:	4698      	movls	r8, r3
 80077e0:	4680      	movhi	r8, r0
 80077e2:	2303      	movs	r3, #3
 80077e4:	6123      	str	r3, [r4, #16]
 80077e6:	9b05      	ldr	r3, [sp, #20]
 80077e8:	f023 0204 	bic.w	r2, r3, #4
 80077ec:	6022      	str	r2, [r4, #0]
 80077ee:	f04f 0900 	mov.w	r9, #0
 80077f2:	9700      	str	r7, [sp, #0]
 80077f4:	4633      	mov	r3, r6
 80077f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80077f8:	4621      	mov	r1, r4
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 f9d8 	bl	8007bb0 <_printf_common>
 8007800:	3001      	adds	r0, #1
 8007802:	f040 8090 	bne.w	8007926 <_printf_float+0x1e2>
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	b00d      	add	sp, #52	; 0x34
 800780c:	ecbd 8b02 	vpop	{d8}
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	4642      	mov	r2, r8
 8007816:	464b      	mov	r3, r9
 8007818:	4640      	mov	r0, r8
 800781a:	4649      	mov	r1, r9
 800781c:	f7f9 f986 	bl	8000b2c <__aeabi_dcmpun>
 8007820:	b140      	cbz	r0, 8007834 <_printf_float+0xf0>
 8007822:	464b      	mov	r3, r9
 8007824:	2b00      	cmp	r3, #0
 8007826:	bfbc      	itt	lt
 8007828:	232d      	movlt	r3, #45	; 0x2d
 800782a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800782e:	487f      	ldr	r0, [pc, #508]	; (8007a2c <_printf_float+0x2e8>)
 8007830:	4b7f      	ldr	r3, [pc, #508]	; (8007a30 <_printf_float+0x2ec>)
 8007832:	e7d1      	b.n	80077d8 <_printf_float+0x94>
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800783a:	9206      	str	r2, [sp, #24]
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	d13f      	bne.n	80078c0 <_printf_float+0x17c>
 8007840:	2306      	movs	r3, #6
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	9b05      	ldr	r3, [sp, #20]
 8007846:	6861      	ldr	r1, [r4, #4]
 8007848:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800784c:	2300      	movs	r3, #0
 800784e:	9303      	str	r3, [sp, #12]
 8007850:	ab0a      	add	r3, sp, #40	; 0x28
 8007852:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007856:	ab09      	add	r3, sp, #36	; 0x24
 8007858:	ec49 8b10 	vmov	d0, r8, r9
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	6022      	str	r2, [r4, #0]
 8007860:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007864:	4628      	mov	r0, r5
 8007866:	f7ff fecd 	bl	8007604 <__cvt>
 800786a:	9b06      	ldr	r3, [sp, #24]
 800786c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800786e:	2b47      	cmp	r3, #71	; 0x47
 8007870:	4680      	mov	r8, r0
 8007872:	d108      	bne.n	8007886 <_printf_float+0x142>
 8007874:	1cc8      	adds	r0, r1, #3
 8007876:	db02      	blt.n	800787e <_printf_float+0x13a>
 8007878:	6863      	ldr	r3, [r4, #4]
 800787a:	4299      	cmp	r1, r3
 800787c:	dd41      	ble.n	8007902 <_printf_float+0x1be>
 800787e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007882:	fa5f fb8b 	uxtb.w	fp, fp
 8007886:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800788a:	d820      	bhi.n	80078ce <_printf_float+0x18a>
 800788c:	3901      	subs	r1, #1
 800788e:	465a      	mov	r2, fp
 8007890:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007894:	9109      	str	r1, [sp, #36]	; 0x24
 8007896:	f7ff ff17 	bl	80076c8 <__exponent>
 800789a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800789c:	1813      	adds	r3, r2, r0
 800789e:	2a01      	cmp	r2, #1
 80078a0:	4681      	mov	r9, r0
 80078a2:	6123      	str	r3, [r4, #16]
 80078a4:	dc02      	bgt.n	80078ac <_printf_float+0x168>
 80078a6:	6822      	ldr	r2, [r4, #0]
 80078a8:	07d2      	lsls	r2, r2, #31
 80078aa:	d501      	bpl.n	80078b0 <_printf_float+0x16c>
 80078ac:	3301      	adds	r3, #1
 80078ae:	6123      	str	r3, [r4, #16]
 80078b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d09c      	beq.n	80077f2 <_printf_float+0xae>
 80078b8:	232d      	movs	r3, #45	; 0x2d
 80078ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078be:	e798      	b.n	80077f2 <_printf_float+0xae>
 80078c0:	9a06      	ldr	r2, [sp, #24]
 80078c2:	2a47      	cmp	r2, #71	; 0x47
 80078c4:	d1be      	bne.n	8007844 <_printf_float+0x100>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1bc      	bne.n	8007844 <_printf_float+0x100>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e7b9      	b.n	8007842 <_printf_float+0xfe>
 80078ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80078d2:	d118      	bne.n	8007906 <_printf_float+0x1c2>
 80078d4:	2900      	cmp	r1, #0
 80078d6:	6863      	ldr	r3, [r4, #4]
 80078d8:	dd0b      	ble.n	80078f2 <_printf_float+0x1ae>
 80078da:	6121      	str	r1, [r4, #16]
 80078dc:	b913      	cbnz	r3, 80078e4 <_printf_float+0x1a0>
 80078de:	6822      	ldr	r2, [r4, #0]
 80078e0:	07d0      	lsls	r0, r2, #31
 80078e2:	d502      	bpl.n	80078ea <_printf_float+0x1a6>
 80078e4:	3301      	adds	r3, #1
 80078e6:	440b      	add	r3, r1
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80078ec:	f04f 0900 	mov.w	r9, #0
 80078f0:	e7de      	b.n	80078b0 <_printf_float+0x16c>
 80078f2:	b913      	cbnz	r3, 80078fa <_printf_float+0x1b6>
 80078f4:	6822      	ldr	r2, [r4, #0]
 80078f6:	07d2      	lsls	r2, r2, #31
 80078f8:	d501      	bpl.n	80078fe <_printf_float+0x1ba>
 80078fa:	3302      	adds	r3, #2
 80078fc:	e7f4      	b.n	80078e8 <_printf_float+0x1a4>
 80078fe:	2301      	movs	r3, #1
 8007900:	e7f2      	b.n	80078e8 <_printf_float+0x1a4>
 8007902:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007908:	4299      	cmp	r1, r3
 800790a:	db05      	blt.n	8007918 <_printf_float+0x1d4>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	6121      	str	r1, [r4, #16]
 8007910:	07d8      	lsls	r0, r3, #31
 8007912:	d5ea      	bpl.n	80078ea <_printf_float+0x1a6>
 8007914:	1c4b      	adds	r3, r1, #1
 8007916:	e7e7      	b.n	80078e8 <_printf_float+0x1a4>
 8007918:	2900      	cmp	r1, #0
 800791a:	bfd4      	ite	le
 800791c:	f1c1 0202 	rsble	r2, r1, #2
 8007920:	2201      	movgt	r2, #1
 8007922:	4413      	add	r3, r2
 8007924:	e7e0      	b.n	80078e8 <_printf_float+0x1a4>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	055a      	lsls	r2, r3, #21
 800792a:	d407      	bmi.n	800793c <_printf_float+0x1f8>
 800792c:	6923      	ldr	r3, [r4, #16]
 800792e:	4642      	mov	r2, r8
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	d12c      	bne.n	8007994 <_printf_float+0x250>
 800793a:	e764      	b.n	8007806 <_printf_float+0xc2>
 800793c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007940:	f240 80e0 	bls.w	8007b04 <_printf_float+0x3c0>
 8007944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007948:	2200      	movs	r2, #0
 800794a:	2300      	movs	r3, #0
 800794c:	f7f9 f8bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007950:	2800      	cmp	r0, #0
 8007952:	d034      	beq.n	80079be <_printf_float+0x27a>
 8007954:	4a37      	ldr	r2, [pc, #220]	; (8007a34 <_printf_float+0x2f0>)
 8007956:	2301      	movs	r3, #1
 8007958:	4631      	mov	r1, r6
 800795a:	4628      	mov	r0, r5
 800795c:	47b8      	blx	r7
 800795e:	3001      	adds	r0, #1
 8007960:	f43f af51 	beq.w	8007806 <_printf_float+0xc2>
 8007964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007968:	429a      	cmp	r2, r3
 800796a:	db02      	blt.n	8007972 <_printf_float+0x22e>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	07d8      	lsls	r0, r3, #31
 8007970:	d510      	bpl.n	8007994 <_printf_float+0x250>
 8007972:	ee18 3a10 	vmov	r3, s16
 8007976:	4652      	mov	r2, sl
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	f43f af41 	beq.w	8007806 <_printf_float+0xc2>
 8007984:	f04f 0800 	mov.w	r8, #0
 8007988:	f104 091a 	add.w	r9, r4, #26
 800798c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798e:	3b01      	subs	r3, #1
 8007990:	4543      	cmp	r3, r8
 8007992:	dc09      	bgt.n	80079a8 <_printf_float+0x264>
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	079b      	lsls	r3, r3, #30
 8007998:	f100 8105 	bmi.w	8007ba6 <_printf_float+0x462>
 800799c:	68e0      	ldr	r0, [r4, #12]
 800799e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a0:	4298      	cmp	r0, r3
 80079a2:	bfb8      	it	lt
 80079a4:	4618      	movlt	r0, r3
 80079a6:	e730      	b.n	800780a <_printf_float+0xc6>
 80079a8:	2301      	movs	r3, #1
 80079aa:	464a      	mov	r2, r9
 80079ac:	4631      	mov	r1, r6
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b8      	blx	r7
 80079b2:	3001      	adds	r0, #1
 80079b4:	f43f af27 	beq.w	8007806 <_printf_float+0xc2>
 80079b8:	f108 0801 	add.w	r8, r8, #1
 80079bc:	e7e6      	b.n	800798c <_printf_float+0x248>
 80079be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	dc39      	bgt.n	8007a38 <_printf_float+0x2f4>
 80079c4:	4a1b      	ldr	r2, [pc, #108]	; (8007a34 <_printf_float+0x2f0>)
 80079c6:	2301      	movs	r3, #1
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f43f af19 	beq.w	8007806 <_printf_float+0xc2>
 80079d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079d8:	4313      	orrs	r3, r2
 80079da:	d102      	bne.n	80079e2 <_printf_float+0x29e>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	07d9      	lsls	r1, r3, #31
 80079e0:	d5d8      	bpl.n	8007994 <_printf_float+0x250>
 80079e2:	ee18 3a10 	vmov	r3, s16
 80079e6:	4652      	mov	r2, sl
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	f43f af09 	beq.w	8007806 <_printf_float+0xc2>
 80079f4:	f04f 0900 	mov.w	r9, #0
 80079f8:	f104 0a1a 	add.w	sl, r4, #26
 80079fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fe:	425b      	negs	r3, r3
 8007a00:	454b      	cmp	r3, r9
 8007a02:	dc01      	bgt.n	8007a08 <_printf_float+0x2c4>
 8007a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a06:	e792      	b.n	800792e <_printf_float+0x1ea>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	4652      	mov	r2, sl
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f aef7 	beq.w	8007806 <_printf_float+0xc2>
 8007a18:	f109 0901 	add.w	r9, r9, #1
 8007a1c:	e7ee      	b.n	80079fc <_printf_float+0x2b8>
 8007a1e:	bf00      	nop
 8007a20:	7fefffff 	.word	0x7fefffff
 8007a24:	0800c010 	.word	0x0800c010
 8007a28:	0800c014 	.word	0x0800c014
 8007a2c:	0800c01c 	.word	0x0800c01c
 8007a30:	0800c018 	.word	0x0800c018
 8007a34:	0800c020 	.word	0x0800c020
 8007a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	bfa8      	it	ge
 8007a40:	461a      	movge	r2, r3
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	4691      	mov	r9, r2
 8007a46:	dc37      	bgt.n	8007ab8 <_printf_float+0x374>
 8007a48:	f04f 0b00 	mov.w	fp, #0
 8007a4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a50:	f104 021a 	add.w	r2, r4, #26
 8007a54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a56:	9305      	str	r3, [sp, #20]
 8007a58:	eba3 0309 	sub.w	r3, r3, r9
 8007a5c:	455b      	cmp	r3, fp
 8007a5e:	dc33      	bgt.n	8007ac8 <_printf_float+0x384>
 8007a60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a64:	429a      	cmp	r2, r3
 8007a66:	db3b      	blt.n	8007ae0 <_printf_float+0x39c>
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	07da      	lsls	r2, r3, #31
 8007a6c:	d438      	bmi.n	8007ae0 <_printf_float+0x39c>
 8007a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a70:	9a05      	ldr	r2, [sp, #20]
 8007a72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a74:	1a9a      	subs	r2, r3, r2
 8007a76:	eba3 0901 	sub.w	r9, r3, r1
 8007a7a:	4591      	cmp	r9, r2
 8007a7c:	bfa8      	it	ge
 8007a7e:	4691      	movge	r9, r2
 8007a80:	f1b9 0f00 	cmp.w	r9, #0
 8007a84:	dc35      	bgt.n	8007af2 <_printf_float+0x3ae>
 8007a86:	f04f 0800 	mov.w	r8, #0
 8007a8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a8e:	f104 0a1a 	add.w	sl, r4, #26
 8007a92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a96:	1a9b      	subs	r3, r3, r2
 8007a98:	eba3 0309 	sub.w	r3, r3, r9
 8007a9c:	4543      	cmp	r3, r8
 8007a9e:	f77f af79 	ble.w	8007994 <_printf_float+0x250>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	f43f aeaa 	beq.w	8007806 <_printf_float+0xc2>
 8007ab2:	f108 0801 	add.w	r8, r8, #1
 8007ab6:	e7ec      	b.n	8007a92 <_printf_float+0x34e>
 8007ab8:	4613      	mov	r3, r2
 8007aba:	4631      	mov	r1, r6
 8007abc:	4642      	mov	r2, r8
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b8      	blx	r7
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d1c0      	bne.n	8007a48 <_printf_float+0x304>
 8007ac6:	e69e      	b.n	8007806 <_printf_float+0xc2>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4631      	mov	r1, r6
 8007acc:	4628      	mov	r0, r5
 8007ace:	9205      	str	r2, [sp, #20]
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f43f ae97 	beq.w	8007806 <_printf_float+0xc2>
 8007ad8:	9a05      	ldr	r2, [sp, #20]
 8007ada:	f10b 0b01 	add.w	fp, fp, #1
 8007ade:	e7b9      	b.n	8007a54 <_printf_float+0x310>
 8007ae0:	ee18 3a10 	vmov	r3, s16
 8007ae4:	4652      	mov	r2, sl
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b8      	blx	r7
 8007aec:	3001      	adds	r0, #1
 8007aee:	d1be      	bne.n	8007a6e <_printf_float+0x32a>
 8007af0:	e689      	b.n	8007806 <_printf_float+0xc2>
 8007af2:	9a05      	ldr	r2, [sp, #20]
 8007af4:	464b      	mov	r3, r9
 8007af6:	4442      	add	r2, r8
 8007af8:	4631      	mov	r1, r6
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	d1c1      	bne.n	8007a86 <_printf_float+0x342>
 8007b02:	e680      	b.n	8007806 <_printf_float+0xc2>
 8007b04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b06:	2a01      	cmp	r2, #1
 8007b08:	dc01      	bgt.n	8007b0e <_printf_float+0x3ca>
 8007b0a:	07db      	lsls	r3, r3, #31
 8007b0c:	d538      	bpl.n	8007b80 <_printf_float+0x43c>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	4642      	mov	r2, r8
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f43f ae74 	beq.w	8007806 <_printf_float+0xc2>
 8007b1e:	ee18 3a10 	vmov	r3, s16
 8007b22:	4652      	mov	r2, sl
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	f43f ae6b 	beq.w	8007806 <_printf_float+0xc2>
 8007b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b34:	2200      	movs	r2, #0
 8007b36:	2300      	movs	r3, #0
 8007b38:	f7f8 ffc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b3c:	b9d8      	cbnz	r0, 8007b76 <_printf_float+0x432>
 8007b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b40:	f108 0201 	add.w	r2, r8, #1
 8007b44:	3b01      	subs	r3, #1
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	d10e      	bne.n	8007b6e <_printf_float+0x42a>
 8007b50:	e659      	b.n	8007806 <_printf_float+0xc2>
 8007b52:	2301      	movs	r3, #1
 8007b54:	4652      	mov	r2, sl
 8007b56:	4631      	mov	r1, r6
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b8      	blx	r7
 8007b5c:	3001      	adds	r0, #1
 8007b5e:	f43f ae52 	beq.w	8007806 <_printf_float+0xc2>
 8007b62:	f108 0801 	add.w	r8, r8, #1
 8007b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	4543      	cmp	r3, r8
 8007b6c:	dcf1      	bgt.n	8007b52 <_printf_float+0x40e>
 8007b6e:	464b      	mov	r3, r9
 8007b70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b74:	e6dc      	b.n	8007930 <_printf_float+0x1ec>
 8007b76:	f04f 0800 	mov.w	r8, #0
 8007b7a:	f104 0a1a 	add.w	sl, r4, #26
 8007b7e:	e7f2      	b.n	8007b66 <_printf_float+0x422>
 8007b80:	2301      	movs	r3, #1
 8007b82:	4642      	mov	r2, r8
 8007b84:	e7df      	b.n	8007b46 <_printf_float+0x402>
 8007b86:	2301      	movs	r3, #1
 8007b88:	464a      	mov	r2, r9
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	47b8      	blx	r7
 8007b90:	3001      	adds	r0, #1
 8007b92:	f43f ae38 	beq.w	8007806 <_printf_float+0xc2>
 8007b96:	f108 0801 	add.w	r8, r8, #1
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b9e:	1a5b      	subs	r3, r3, r1
 8007ba0:	4543      	cmp	r3, r8
 8007ba2:	dcf0      	bgt.n	8007b86 <_printf_float+0x442>
 8007ba4:	e6fa      	b.n	800799c <_printf_float+0x258>
 8007ba6:	f04f 0800 	mov.w	r8, #0
 8007baa:	f104 0919 	add.w	r9, r4, #25
 8007bae:	e7f4      	b.n	8007b9a <_printf_float+0x456>

08007bb0 <_printf_common>:
 8007bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb4:	4616      	mov	r6, r2
 8007bb6:	4699      	mov	r9, r3
 8007bb8:	688a      	ldr	r2, [r1, #8]
 8007bba:	690b      	ldr	r3, [r1, #16]
 8007bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	bfb8      	it	lt
 8007bc4:	4613      	movlt	r3, r2
 8007bc6:	6033      	str	r3, [r6, #0]
 8007bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bcc:	4607      	mov	r7, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	b10a      	cbz	r2, 8007bd6 <_printf_common+0x26>
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	6033      	str	r3, [r6, #0]
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	0699      	lsls	r1, r3, #26
 8007bda:	bf42      	ittt	mi
 8007bdc:	6833      	ldrmi	r3, [r6, #0]
 8007bde:	3302      	addmi	r3, #2
 8007be0:	6033      	strmi	r3, [r6, #0]
 8007be2:	6825      	ldr	r5, [r4, #0]
 8007be4:	f015 0506 	ands.w	r5, r5, #6
 8007be8:	d106      	bne.n	8007bf8 <_printf_common+0x48>
 8007bea:	f104 0a19 	add.w	sl, r4, #25
 8007bee:	68e3      	ldr	r3, [r4, #12]
 8007bf0:	6832      	ldr	r2, [r6, #0]
 8007bf2:	1a9b      	subs	r3, r3, r2
 8007bf4:	42ab      	cmp	r3, r5
 8007bf6:	dc26      	bgt.n	8007c46 <_printf_common+0x96>
 8007bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bfc:	1e13      	subs	r3, r2, #0
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	bf18      	it	ne
 8007c02:	2301      	movne	r3, #1
 8007c04:	0692      	lsls	r2, r2, #26
 8007c06:	d42b      	bmi.n	8007c60 <_printf_common+0xb0>
 8007c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	4638      	mov	r0, r7
 8007c10:	47c0      	blx	r8
 8007c12:	3001      	adds	r0, #1
 8007c14:	d01e      	beq.n	8007c54 <_printf_common+0xa4>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	68e5      	ldr	r5, [r4, #12]
 8007c1a:	6832      	ldr	r2, [r6, #0]
 8007c1c:	f003 0306 	and.w	r3, r3, #6
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	bf08      	it	eq
 8007c24:	1aad      	subeq	r5, r5, r2
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	6922      	ldr	r2, [r4, #16]
 8007c2a:	bf0c      	ite	eq
 8007c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c30:	2500      	movne	r5, #0
 8007c32:	4293      	cmp	r3, r2
 8007c34:	bfc4      	itt	gt
 8007c36:	1a9b      	subgt	r3, r3, r2
 8007c38:	18ed      	addgt	r5, r5, r3
 8007c3a:	2600      	movs	r6, #0
 8007c3c:	341a      	adds	r4, #26
 8007c3e:	42b5      	cmp	r5, r6
 8007c40:	d11a      	bne.n	8007c78 <_printf_common+0xc8>
 8007c42:	2000      	movs	r0, #0
 8007c44:	e008      	b.n	8007c58 <_printf_common+0xa8>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4652      	mov	r2, sl
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	47c0      	blx	r8
 8007c50:	3001      	adds	r0, #1
 8007c52:	d103      	bne.n	8007c5c <_printf_common+0xac>
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5c:	3501      	adds	r5, #1
 8007c5e:	e7c6      	b.n	8007bee <_printf_common+0x3e>
 8007c60:	18e1      	adds	r1, r4, r3
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	2030      	movs	r0, #48	; 0x30
 8007c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c6a:	4422      	add	r2, r4
 8007c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c74:	3302      	adds	r3, #2
 8007c76:	e7c7      	b.n	8007c08 <_printf_common+0x58>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	4638      	mov	r0, r7
 8007c80:	47c0      	blx	r8
 8007c82:	3001      	adds	r0, #1
 8007c84:	d0e6      	beq.n	8007c54 <_printf_common+0xa4>
 8007c86:	3601      	adds	r6, #1
 8007c88:	e7d9      	b.n	8007c3e <_printf_common+0x8e>
	...

08007c8c <_printf_i>:
 8007c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	7e0f      	ldrb	r7, [r1, #24]
 8007c92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c94:	2f78      	cmp	r7, #120	; 0x78
 8007c96:	4691      	mov	r9, r2
 8007c98:	4680      	mov	r8, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	469a      	mov	sl, r3
 8007c9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ca2:	d807      	bhi.n	8007cb4 <_printf_i+0x28>
 8007ca4:	2f62      	cmp	r7, #98	; 0x62
 8007ca6:	d80a      	bhi.n	8007cbe <_printf_i+0x32>
 8007ca8:	2f00      	cmp	r7, #0
 8007caa:	f000 80d8 	beq.w	8007e5e <_printf_i+0x1d2>
 8007cae:	2f58      	cmp	r7, #88	; 0x58
 8007cb0:	f000 80a3 	beq.w	8007dfa <_printf_i+0x16e>
 8007cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cbc:	e03a      	b.n	8007d34 <_printf_i+0xa8>
 8007cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cc2:	2b15      	cmp	r3, #21
 8007cc4:	d8f6      	bhi.n	8007cb4 <_printf_i+0x28>
 8007cc6:	a101      	add	r1, pc, #4	; (adr r1, 8007ccc <_printf_i+0x40>)
 8007cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ccc:	08007d25 	.word	0x08007d25
 8007cd0:	08007d39 	.word	0x08007d39
 8007cd4:	08007cb5 	.word	0x08007cb5
 8007cd8:	08007cb5 	.word	0x08007cb5
 8007cdc:	08007cb5 	.word	0x08007cb5
 8007ce0:	08007cb5 	.word	0x08007cb5
 8007ce4:	08007d39 	.word	0x08007d39
 8007ce8:	08007cb5 	.word	0x08007cb5
 8007cec:	08007cb5 	.word	0x08007cb5
 8007cf0:	08007cb5 	.word	0x08007cb5
 8007cf4:	08007cb5 	.word	0x08007cb5
 8007cf8:	08007e45 	.word	0x08007e45
 8007cfc:	08007d69 	.word	0x08007d69
 8007d00:	08007e27 	.word	0x08007e27
 8007d04:	08007cb5 	.word	0x08007cb5
 8007d08:	08007cb5 	.word	0x08007cb5
 8007d0c:	08007e67 	.word	0x08007e67
 8007d10:	08007cb5 	.word	0x08007cb5
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007cb5 	.word	0x08007cb5
 8007d1c:	08007cb5 	.word	0x08007cb5
 8007d20:	08007e2f 	.word	0x08007e2f
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	1d1a      	adds	r2, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	602a      	str	r2, [r5, #0]
 8007d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d34:	2301      	movs	r3, #1
 8007d36:	e0a3      	b.n	8007e80 <_printf_i+0x1f4>
 8007d38:	6820      	ldr	r0, [r4, #0]
 8007d3a:	6829      	ldr	r1, [r5, #0]
 8007d3c:	0606      	lsls	r6, r0, #24
 8007d3e:	f101 0304 	add.w	r3, r1, #4
 8007d42:	d50a      	bpl.n	8007d5a <_printf_i+0xce>
 8007d44:	680e      	ldr	r6, [r1, #0]
 8007d46:	602b      	str	r3, [r5, #0]
 8007d48:	2e00      	cmp	r6, #0
 8007d4a:	da03      	bge.n	8007d54 <_printf_i+0xc8>
 8007d4c:	232d      	movs	r3, #45	; 0x2d
 8007d4e:	4276      	negs	r6, r6
 8007d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d54:	485e      	ldr	r0, [pc, #376]	; (8007ed0 <_printf_i+0x244>)
 8007d56:	230a      	movs	r3, #10
 8007d58:	e019      	b.n	8007d8e <_printf_i+0x102>
 8007d5a:	680e      	ldr	r6, [r1, #0]
 8007d5c:	602b      	str	r3, [r5, #0]
 8007d5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d62:	bf18      	it	ne
 8007d64:	b236      	sxthne	r6, r6
 8007d66:	e7ef      	b.n	8007d48 <_printf_i+0xbc>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	6820      	ldr	r0, [r4, #0]
 8007d6c:	1d19      	adds	r1, r3, #4
 8007d6e:	6029      	str	r1, [r5, #0]
 8007d70:	0601      	lsls	r1, r0, #24
 8007d72:	d501      	bpl.n	8007d78 <_printf_i+0xec>
 8007d74:	681e      	ldr	r6, [r3, #0]
 8007d76:	e002      	b.n	8007d7e <_printf_i+0xf2>
 8007d78:	0646      	lsls	r6, r0, #25
 8007d7a:	d5fb      	bpl.n	8007d74 <_printf_i+0xe8>
 8007d7c:	881e      	ldrh	r6, [r3, #0]
 8007d7e:	4854      	ldr	r0, [pc, #336]	; (8007ed0 <_printf_i+0x244>)
 8007d80:	2f6f      	cmp	r7, #111	; 0x6f
 8007d82:	bf0c      	ite	eq
 8007d84:	2308      	moveq	r3, #8
 8007d86:	230a      	movne	r3, #10
 8007d88:	2100      	movs	r1, #0
 8007d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d8e:	6865      	ldr	r5, [r4, #4]
 8007d90:	60a5      	str	r5, [r4, #8]
 8007d92:	2d00      	cmp	r5, #0
 8007d94:	bfa2      	ittt	ge
 8007d96:	6821      	ldrge	r1, [r4, #0]
 8007d98:	f021 0104 	bicge.w	r1, r1, #4
 8007d9c:	6021      	strge	r1, [r4, #0]
 8007d9e:	b90e      	cbnz	r6, 8007da4 <_printf_i+0x118>
 8007da0:	2d00      	cmp	r5, #0
 8007da2:	d04d      	beq.n	8007e40 <_printf_i+0x1b4>
 8007da4:	4615      	mov	r5, r2
 8007da6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007daa:	fb03 6711 	mls	r7, r3, r1, r6
 8007dae:	5dc7      	ldrb	r7, [r0, r7]
 8007db0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007db4:	4637      	mov	r7, r6
 8007db6:	42bb      	cmp	r3, r7
 8007db8:	460e      	mov	r6, r1
 8007dba:	d9f4      	bls.n	8007da6 <_printf_i+0x11a>
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d10b      	bne.n	8007dd8 <_printf_i+0x14c>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	07de      	lsls	r6, r3, #31
 8007dc4:	d508      	bpl.n	8007dd8 <_printf_i+0x14c>
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	6861      	ldr	r1, [r4, #4]
 8007dca:	4299      	cmp	r1, r3
 8007dcc:	bfde      	ittt	le
 8007dce:	2330      	movle	r3, #48	; 0x30
 8007dd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007dd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007dd8:	1b52      	subs	r2, r2, r5
 8007dda:	6122      	str	r2, [r4, #16]
 8007ddc:	f8cd a000 	str.w	sl, [sp]
 8007de0:	464b      	mov	r3, r9
 8007de2:	aa03      	add	r2, sp, #12
 8007de4:	4621      	mov	r1, r4
 8007de6:	4640      	mov	r0, r8
 8007de8:	f7ff fee2 	bl	8007bb0 <_printf_common>
 8007dec:	3001      	adds	r0, #1
 8007dee:	d14c      	bne.n	8007e8a <_printf_i+0x1fe>
 8007df0:	f04f 30ff 	mov.w	r0, #4294967295
 8007df4:	b004      	add	sp, #16
 8007df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfa:	4835      	ldr	r0, [pc, #212]	; (8007ed0 <_printf_i+0x244>)
 8007dfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e00:	6829      	ldr	r1, [r5, #0]
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e08:	6029      	str	r1, [r5, #0]
 8007e0a:	061d      	lsls	r5, r3, #24
 8007e0c:	d514      	bpl.n	8007e38 <_printf_i+0x1ac>
 8007e0e:	07df      	lsls	r7, r3, #31
 8007e10:	bf44      	itt	mi
 8007e12:	f043 0320 	orrmi.w	r3, r3, #32
 8007e16:	6023      	strmi	r3, [r4, #0]
 8007e18:	b91e      	cbnz	r6, 8007e22 <_printf_i+0x196>
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	f023 0320 	bic.w	r3, r3, #32
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	2310      	movs	r3, #16
 8007e24:	e7b0      	b.n	8007d88 <_printf_i+0xfc>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	f043 0320 	orr.w	r3, r3, #32
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	2378      	movs	r3, #120	; 0x78
 8007e30:	4828      	ldr	r0, [pc, #160]	; (8007ed4 <_printf_i+0x248>)
 8007e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e36:	e7e3      	b.n	8007e00 <_printf_i+0x174>
 8007e38:	0659      	lsls	r1, r3, #25
 8007e3a:	bf48      	it	mi
 8007e3c:	b2b6      	uxthmi	r6, r6
 8007e3e:	e7e6      	b.n	8007e0e <_printf_i+0x182>
 8007e40:	4615      	mov	r5, r2
 8007e42:	e7bb      	b.n	8007dbc <_printf_i+0x130>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	6826      	ldr	r6, [r4, #0]
 8007e48:	6961      	ldr	r1, [r4, #20]
 8007e4a:	1d18      	adds	r0, r3, #4
 8007e4c:	6028      	str	r0, [r5, #0]
 8007e4e:	0635      	lsls	r5, r6, #24
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	d501      	bpl.n	8007e58 <_printf_i+0x1cc>
 8007e54:	6019      	str	r1, [r3, #0]
 8007e56:	e002      	b.n	8007e5e <_printf_i+0x1d2>
 8007e58:	0670      	lsls	r0, r6, #25
 8007e5a:	d5fb      	bpl.n	8007e54 <_printf_i+0x1c8>
 8007e5c:	8019      	strh	r1, [r3, #0]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6123      	str	r3, [r4, #16]
 8007e62:	4615      	mov	r5, r2
 8007e64:	e7ba      	b.n	8007ddc <_printf_i+0x150>
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	1d1a      	adds	r2, r3, #4
 8007e6a:	602a      	str	r2, [r5, #0]
 8007e6c:	681d      	ldr	r5, [r3, #0]
 8007e6e:	6862      	ldr	r2, [r4, #4]
 8007e70:	2100      	movs	r1, #0
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7f8 f9b4 	bl	80001e0 <memchr>
 8007e78:	b108      	cbz	r0, 8007e7e <_printf_i+0x1f2>
 8007e7a:	1b40      	subs	r0, r0, r5
 8007e7c:	6060      	str	r0, [r4, #4]
 8007e7e:	6863      	ldr	r3, [r4, #4]
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	2300      	movs	r3, #0
 8007e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e88:	e7a8      	b.n	8007ddc <_printf_i+0x150>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	4649      	mov	r1, r9
 8007e90:	4640      	mov	r0, r8
 8007e92:	47d0      	blx	sl
 8007e94:	3001      	adds	r0, #1
 8007e96:	d0ab      	beq.n	8007df0 <_printf_i+0x164>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	079b      	lsls	r3, r3, #30
 8007e9c:	d413      	bmi.n	8007ec6 <_printf_i+0x23a>
 8007e9e:	68e0      	ldr	r0, [r4, #12]
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	4298      	cmp	r0, r3
 8007ea4:	bfb8      	it	lt
 8007ea6:	4618      	movlt	r0, r3
 8007ea8:	e7a4      	b.n	8007df4 <_printf_i+0x168>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4632      	mov	r2, r6
 8007eae:	4649      	mov	r1, r9
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	47d0      	blx	sl
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d09b      	beq.n	8007df0 <_printf_i+0x164>
 8007eb8:	3501      	adds	r5, #1
 8007eba:	68e3      	ldr	r3, [r4, #12]
 8007ebc:	9903      	ldr	r1, [sp, #12]
 8007ebe:	1a5b      	subs	r3, r3, r1
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	dcf2      	bgt.n	8007eaa <_printf_i+0x21e>
 8007ec4:	e7eb      	b.n	8007e9e <_printf_i+0x212>
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	f104 0619 	add.w	r6, r4, #25
 8007ecc:	e7f5      	b.n	8007eba <_printf_i+0x22e>
 8007ece:	bf00      	nop
 8007ed0:	0800c022 	.word	0x0800c022
 8007ed4:	0800c033 	.word	0x0800c033

08007ed8 <sniprintf>:
 8007ed8:	b40c      	push	{r2, r3}
 8007eda:	b530      	push	{r4, r5, lr}
 8007edc:	4b17      	ldr	r3, [pc, #92]	; (8007f3c <sniprintf+0x64>)
 8007ede:	1e0c      	subs	r4, r1, #0
 8007ee0:	681d      	ldr	r5, [r3, #0]
 8007ee2:	b09d      	sub	sp, #116	; 0x74
 8007ee4:	da08      	bge.n	8007ef8 <sniprintf+0x20>
 8007ee6:	238b      	movs	r3, #139	; 0x8b
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	b01d      	add	sp, #116	; 0x74
 8007ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ef4:	b002      	add	sp, #8
 8007ef6:	4770      	bx	lr
 8007ef8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007efc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f00:	bf14      	ite	ne
 8007f02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f06:	4623      	moveq	r3, r4
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	9307      	str	r3, [sp, #28]
 8007f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f10:	9002      	str	r0, [sp, #8]
 8007f12:	9006      	str	r0, [sp, #24]
 8007f14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f1a:	ab21      	add	r3, sp, #132	; 0x84
 8007f1c:	a902      	add	r1, sp, #8
 8007f1e:	4628      	mov	r0, r5
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	f001 fb69 	bl	80095f8 <_svfiprintf_r>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	bfbc      	itt	lt
 8007f2a:	238b      	movlt	r3, #139	; 0x8b
 8007f2c:	602b      	strlt	r3, [r5, #0]
 8007f2e:	2c00      	cmp	r4, #0
 8007f30:	d0dd      	beq.n	8007eee <sniprintf+0x16>
 8007f32:	9b02      	ldr	r3, [sp, #8]
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]
 8007f38:	e7d9      	b.n	8007eee <sniprintf+0x16>
 8007f3a:	bf00      	nop
 8007f3c:	2000001c 	.word	0x2000001c

08007f40 <quorem>:
 8007f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	6903      	ldr	r3, [r0, #16]
 8007f46:	690c      	ldr	r4, [r1, #16]
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	4607      	mov	r7, r0
 8007f4c:	f2c0 8081 	blt.w	8008052 <quorem+0x112>
 8007f50:	3c01      	subs	r4, #1
 8007f52:	f101 0814 	add.w	r8, r1, #20
 8007f56:	f100 0514 	add.w	r5, r0, #20
 8007f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f78:	d331      	bcc.n	8007fde <quorem+0x9e>
 8007f7a:	f04f 0e00 	mov.w	lr, #0
 8007f7e:	4640      	mov	r0, r8
 8007f80:	46ac      	mov	ip, r5
 8007f82:	46f2      	mov	sl, lr
 8007f84:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f88:	b293      	uxth	r3, r2
 8007f8a:	fb06 e303 	mla	r3, r6, r3, lr
 8007f8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	ebaa 0303 	sub.w	r3, sl, r3
 8007f98:	f8dc a000 	ldr.w	sl, [ip]
 8007f9c:	0c12      	lsrs	r2, r2, #16
 8007f9e:	fa13 f38a 	uxtah	r3, r3, sl
 8007fa2:	fb06 e202 	mla	r2, r6, r2, lr
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	9b00      	ldr	r3, [sp, #0]
 8007faa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fae:	b292      	uxth	r2, r2
 8007fb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007fbc:	4581      	cmp	r9, r0
 8007fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fc2:	f84c 3b04 	str.w	r3, [ip], #4
 8007fc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fca:	d2db      	bcs.n	8007f84 <quorem+0x44>
 8007fcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fd0:	b92b      	cbnz	r3, 8007fde <quorem+0x9e>
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	3b04      	subs	r3, #4
 8007fd6:	429d      	cmp	r5, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	d32e      	bcc.n	800803a <quorem+0xfa>
 8007fdc:	613c      	str	r4, [r7, #16]
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f001 f8b6 	bl	8009150 <__mcmp>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	db24      	blt.n	8008032 <quorem+0xf2>
 8007fe8:	3601      	adds	r6, #1
 8007fea:	4628      	mov	r0, r5
 8007fec:	f04f 0c00 	mov.w	ip, #0
 8007ff0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ff4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ff8:	b293      	uxth	r3, r2
 8007ffa:	ebac 0303 	sub.w	r3, ip, r3
 8007ffe:	0c12      	lsrs	r2, r2, #16
 8008000:	fa13 f38e 	uxtah	r3, r3, lr
 8008004:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800800c:	b29b      	uxth	r3, r3
 800800e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008012:	45c1      	cmp	r9, r8
 8008014:	f840 3b04 	str.w	r3, [r0], #4
 8008018:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800801c:	d2e8      	bcs.n	8007ff0 <quorem+0xb0>
 800801e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008026:	b922      	cbnz	r2, 8008032 <quorem+0xf2>
 8008028:	3b04      	subs	r3, #4
 800802a:	429d      	cmp	r5, r3
 800802c:	461a      	mov	r2, r3
 800802e:	d30a      	bcc.n	8008046 <quorem+0x106>
 8008030:	613c      	str	r4, [r7, #16]
 8008032:	4630      	mov	r0, r6
 8008034:	b003      	add	sp, #12
 8008036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803a:	6812      	ldr	r2, [r2, #0]
 800803c:	3b04      	subs	r3, #4
 800803e:	2a00      	cmp	r2, #0
 8008040:	d1cc      	bne.n	8007fdc <quorem+0x9c>
 8008042:	3c01      	subs	r4, #1
 8008044:	e7c7      	b.n	8007fd6 <quorem+0x96>
 8008046:	6812      	ldr	r2, [r2, #0]
 8008048:	3b04      	subs	r3, #4
 800804a:	2a00      	cmp	r2, #0
 800804c:	d1f0      	bne.n	8008030 <quorem+0xf0>
 800804e:	3c01      	subs	r4, #1
 8008050:	e7eb      	b.n	800802a <quorem+0xea>
 8008052:	2000      	movs	r0, #0
 8008054:	e7ee      	b.n	8008034 <quorem+0xf4>
	...

08008058 <_dtoa_r>:
 8008058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	ed2d 8b04 	vpush	{d8-d9}
 8008060:	ec57 6b10 	vmov	r6, r7, d0
 8008064:	b093      	sub	sp, #76	; 0x4c
 8008066:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008068:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800806c:	9106      	str	r1, [sp, #24]
 800806e:	ee10 aa10 	vmov	sl, s0
 8008072:	4604      	mov	r4, r0
 8008074:	9209      	str	r2, [sp, #36]	; 0x24
 8008076:	930c      	str	r3, [sp, #48]	; 0x30
 8008078:	46bb      	mov	fp, r7
 800807a:	b975      	cbnz	r5, 800809a <_dtoa_r+0x42>
 800807c:	2010      	movs	r0, #16
 800807e:	f000 fddd 	bl	8008c3c <malloc>
 8008082:	4602      	mov	r2, r0
 8008084:	6260      	str	r0, [r4, #36]	; 0x24
 8008086:	b920      	cbnz	r0, 8008092 <_dtoa_r+0x3a>
 8008088:	4ba7      	ldr	r3, [pc, #668]	; (8008328 <_dtoa_r+0x2d0>)
 800808a:	21ea      	movs	r1, #234	; 0xea
 800808c:	48a7      	ldr	r0, [pc, #668]	; (800832c <_dtoa_r+0x2d4>)
 800808e:	f001 fbc3 	bl	8009818 <__assert_func>
 8008092:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008096:	6005      	str	r5, [r0, #0]
 8008098:	60c5      	str	r5, [r0, #12]
 800809a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800809c:	6819      	ldr	r1, [r3, #0]
 800809e:	b151      	cbz	r1, 80080b6 <_dtoa_r+0x5e>
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	604a      	str	r2, [r1, #4]
 80080a4:	2301      	movs	r3, #1
 80080a6:	4093      	lsls	r3, r2
 80080a8:	608b      	str	r3, [r1, #8]
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 fe0e 	bl	8008ccc <_Bfree>
 80080b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	1e3b      	subs	r3, r7, #0
 80080b8:	bfaa      	itet	ge
 80080ba:	2300      	movge	r3, #0
 80080bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80080c0:	f8c8 3000 	strge.w	r3, [r8]
 80080c4:	4b9a      	ldr	r3, [pc, #616]	; (8008330 <_dtoa_r+0x2d8>)
 80080c6:	bfbc      	itt	lt
 80080c8:	2201      	movlt	r2, #1
 80080ca:	f8c8 2000 	strlt.w	r2, [r8]
 80080ce:	ea33 030b 	bics.w	r3, r3, fp
 80080d2:	d11b      	bne.n	800810c <_dtoa_r+0xb4>
 80080d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080e0:	4333      	orrs	r3, r6
 80080e2:	f000 8592 	beq.w	8008c0a <_dtoa_r+0xbb2>
 80080e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080e8:	b963      	cbnz	r3, 8008104 <_dtoa_r+0xac>
 80080ea:	4b92      	ldr	r3, [pc, #584]	; (8008334 <_dtoa_r+0x2dc>)
 80080ec:	e022      	b.n	8008134 <_dtoa_r+0xdc>
 80080ee:	4b92      	ldr	r3, [pc, #584]	; (8008338 <_dtoa_r+0x2e0>)
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	3308      	adds	r3, #8
 80080f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080f6:	6013      	str	r3, [r2, #0]
 80080f8:	9801      	ldr	r0, [sp, #4]
 80080fa:	b013      	add	sp, #76	; 0x4c
 80080fc:	ecbd 8b04 	vpop	{d8-d9}
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008104:	4b8b      	ldr	r3, [pc, #556]	; (8008334 <_dtoa_r+0x2dc>)
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	3303      	adds	r3, #3
 800810a:	e7f3      	b.n	80080f4 <_dtoa_r+0x9c>
 800810c:	2200      	movs	r2, #0
 800810e:	2300      	movs	r3, #0
 8008110:	4650      	mov	r0, sl
 8008112:	4659      	mov	r1, fp
 8008114:	f7f8 fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008118:	ec4b ab19 	vmov	d9, sl, fp
 800811c:	4680      	mov	r8, r0
 800811e:	b158      	cbz	r0, 8008138 <_dtoa_r+0xe0>
 8008120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008122:	2301      	movs	r3, #1
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 856b 	beq.w	8008c04 <_dtoa_r+0xbac>
 800812e:	4883      	ldr	r0, [pc, #524]	; (800833c <_dtoa_r+0x2e4>)
 8008130:	6018      	str	r0, [r3, #0]
 8008132:	1e43      	subs	r3, r0, #1
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	e7df      	b.n	80080f8 <_dtoa_r+0xa0>
 8008138:	ec4b ab10 	vmov	d0, sl, fp
 800813c:	aa10      	add	r2, sp, #64	; 0x40
 800813e:	a911      	add	r1, sp, #68	; 0x44
 8008140:	4620      	mov	r0, r4
 8008142:	f001 f8ab 	bl	800929c <__d2b>
 8008146:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800814a:	ee08 0a10 	vmov	s16, r0
 800814e:	2d00      	cmp	r5, #0
 8008150:	f000 8084 	beq.w	800825c <_dtoa_r+0x204>
 8008154:	ee19 3a90 	vmov	r3, s19
 8008158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800815c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008160:	4656      	mov	r6, sl
 8008162:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008166:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800816a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800816e:	4b74      	ldr	r3, [pc, #464]	; (8008340 <_dtoa_r+0x2e8>)
 8008170:	2200      	movs	r2, #0
 8008172:	4630      	mov	r0, r6
 8008174:	4639      	mov	r1, r7
 8008176:	f7f8 f887 	bl	8000288 <__aeabi_dsub>
 800817a:	a365      	add	r3, pc, #404	; (adr r3, 8008310 <_dtoa_r+0x2b8>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f7f8 fa3a 	bl	80005f8 <__aeabi_dmul>
 8008184:	a364      	add	r3, pc, #400	; (adr r3, 8008318 <_dtoa_r+0x2c0>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f7f8 f87f 	bl	800028c <__adddf3>
 800818e:	4606      	mov	r6, r0
 8008190:	4628      	mov	r0, r5
 8008192:	460f      	mov	r7, r1
 8008194:	f7f8 f9c6 	bl	8000524 <__aeabi_i2d>
 8008198:	a361      	add	r3, pc, #388	; (adr r3, 8008320 <_dtoa_r+0x2c8>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f7f8 fa2b 	bl	80005f8 <__aeabi_dmul>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4630      	mov	r0, r6
 80081a8:	4639      	mov	r1, r7
 80081aa:	f7f8 f86f 	bl	800028c <__adddf3>
 80081ae:	4606      	mov	r6, r0
 80081b0:	460f      	mov	r7, r1
 80081b2:	f7f8 fcd1 	bl	8000b58 <__aeabi_d2iz>
 80081b6:	2200      	movs	r2, #0
 80081b8:	9000      	str	r0, [sp, #0]
 80081ba:	2300      	movs	r3, #0
 80081bc:	4630      	mov	r0, r6
 80081be:	4639      	mov	r1, r7
 80081c0:	f7f8 fc8c 	bl	8000adc <__aeabi_dcmplt>
 80081c4:	b150      	cbz	r0, 80081dc <_dtoa_r+0x184>
 80081c6:	9800      	ldr	r0, [sp, #0]
 80081c8:	f7f8 f9ac 	bl	8000524 <__aeabi_i2d>
 80081cc:	4632      	mov	r2, r6
 80081ce:	463b      	mov	r3, r7
 80081d0:	f7f8 fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80081d4:	b910      	cbnz	r0, 80081dc <_dtoa_r+0x184>
 80081d6:	9b00      	ldr	r3, [sp, #0]
 80081d8:	3b01      	subs	r3, #1
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	9b00      	ldr	r3, [sp, #0]
 80081de:	2b16      	cmp	r3, #22
 80081e0:	d85a      	bhi.n	8008298 <_dtoa_r+0x240>
 80081e2:	9a00      	ldr	r2, [sp, #0]
 80081e4:	4b57      	ldr	r3, [pc, #348]	; (8008344 <_dtoa_r+0x2ec>)
 80081e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	ec51 0b19 	vmov	r0, r1, d9
 80081f2:	f7f8 fc73 	bl	8000adc <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d050      	beq.n	800829c <_dtoa_r+0x244>
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	2300      	movs	r3, #0
 8008202:	930b      	str	r3, [sp, #44]	; 0x2c
 8008204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008206:	1b5d      	subs	r5, r3, r5
 8008208:	1e6b      	subs	r3, r5, #1
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	bf45      	ittet	mi
 800820e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008212:	9304      	strmi	r3, [sp, #16]
 8008214:	2300      	movpl	r3, #0
 8008216:	2300      	movmi	r3, #0
 8008218:	bf4c      	ite	mi
 800821a:	9305      	strmi	r3, [sp, #20]
 800821c:	9304      	strpl	r3, [sp, #16]
 800821e:	9b00      	ldr	r3, [sp, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	db3d      	blt.n	80082a0 <_dtoa_r+0x248>
 8008224:	9b05      	ldr	r3, [sp, #20]
 8008226:	9a00      	ldr	r2, [sp, #0]
 8008228:	920a      	str	r2, [sp, #40]	; 0x28
 800822a:	4413      	add	r3, r2
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	2300      	movs	r3, #0
 8008230:	9307      	str	r3, [sp, #28]
 8008232:	9b06      	ldr	r3, [sp, #24]
 8008234:	2b09      	cmp	r3, #9
 8008236:	f200 8089 	bhi.w	800834c <_dtoa_r+0x2f4>
 800823a:	2b05      	cmp	r3, #5
 800823c:	bfc4      	itt	gt
 800823e:	3b04      	subgt	r3, #4
 8008240:	9306      	strgt	r3, [sp, #24]
 8008242:	9b06      	ldr	r3, [sp, #24]
 8008244:	f1a3 0302 	sub.w	r3, r3, #2
 8008248:	bfcc      	ite	gt
 800824a:	2500      	movgt	r5, #0
 800824c:	2501      	movle	r5, #1
 800824e:	2b03      	cmp	r3, #3
 8008250:	f200 8087 	bhi.w	8008362 <_dtoa_r+0x30a>
 8008254:	e8df f003 	tbb	[pc, r3]
 8008258:	59383a2d 	.word	0x59383a2d
 800825c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008260:	441d      	add	r5, r3
 8008262:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008266:	2b20      	cmp	r3, #32
 8008268:	bfc1      	itttt	gt
 800826a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800826e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008272:	fa0b f303 	lslgt.w	r3, fp, r3
 8008276:	fa26 f000 	lsrgt.w	r0, r6, r0
 800827a:	bfda      	itte	le
 800827c:	f1c3 0320 	rsble	r3, r3, #32
 8008280:	fa06 f003 	lslle.w	r0, r6, r3
 8008284:	4318      	orrgt	r0, r3
 8008286:	f7f8 f93d 	bl	8000504 <__aeabi_ui2d>
 800828a:	2301      	movs	r3, #1
 800828c:	4606      	mov	r6, r0
 800828e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008292:	3d01      	subs	r5, #1
 8008294:	930e      	str	r3, [sp, #56]	; 0x38
 8008296:	e76a      	b.n	800816e <_dtoa_r+0x116>
 8008298:	2301      	movs	r3, #1
 800829a:	e7b2      	b.n	8008202 <_dtoa_r+0x1aa>
 800829c:	900b      	str	r0, [sp, #44]	; 0x2c
 800829e:	e7b1      	b.n	8008204 <_dtoa_r+0x1ac>
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	9a00      	ldr	r2, [sp, #0]
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	4253      	negs	r3, r2
 80082aa:	9307      	str	r3, [sp, #28]
 80082ac:	2300      	movs	r3, #0
 80082ae:	930a      	str	r3, [sp, #40]	; 0x28
 80082b0:	e7bf      	b.n	8008232 <_dtoa_r+0x1da>
 80082b2:	2300      	movs	r3, #0
 80082b4:	9308      	str	r3, [sp, #32]
 80082b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dc55      	bgt.n	8008368 <_dtoa_r+0x310>
 80082bc:	2301      	movs	r3, #1
 80082be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082c2:	461a      	mov	r2, r3
 80082c4:	9209      	str	r2, [sp, #36]	; 0x24
 80082c6:	e00c      	b.n	80082e2 <_dtoa_r+0x28a>
 80082c8:	2301      	movs	r3, #1
 80082ca:	e7f3      	b.n	80082b4 <_dtoa_r+0x25c>
 80082cc:	2300      	movs	r3, #0
 80082ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d0:	9308      	str	r3, [sp, #32]
 80082d2:	9b00      	ldr	r3, [sp, #0]
 80082d4:	4413      	add	r3, r2
 80082d6:	9302      	str	r3, [sp, #8]
 80082d8:	3301      	adds	r3, #1
 80082da:	2b01      	cmp	r3, #1
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	bfb8      	it	lt
 80082e0:	2301      	movlt	r3, #1
 80082e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80082e4:	2200      	movs	r2, #0
 80082e6:	6042      	str	r2, [r0, #4]
 80082e8:	2204      	movs	r2, #4
 80082ea:	f102 0614 	add.w	r6, r2, #20
 80082ee:	429e      	cmp	r6, r3
 80082f0:	6841      	ldr	r1, [r0, #4]
 80082f2:	d93d      	bls.n	8008370 <_dtoa_r+0x318>
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 fca9 	bl	8008c4c <_Balloc>
 80082fa:	9001      	str	r0, [sp, #4]
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d13b      	bne.n	8008378 <_dtoa_r+0x320>
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <_dtoa_r+0x2f0>)
 8008302:	4602      	mov	r2, r0
 8008304:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008308:	e6c0      	b.n	800808c <_dtoa_r+0x34>
 800830a:	2301      	movs	r3, #1
 800830c:	e7df      	b.n	80082ce <_dtoa_r+0x276>
 800830e:	bf00      	nop
 8008310:	636f4361 	.word	0x636f4361
 8008314:	3fd287a7 	.word	0x3fd287a7
 8008318:	8b60c8b3 	.word	0x8b60c8b3
 800831c:	3fc68a28 	.word	0x3fc68a28
 8008320:	509f79fb 	.word	0x509f79fb
 8008324:	3fd34413 	.word	0x3fd34413
 8008328:	0800c051 	.word	0x0800c051
 800832c:	0800c068 	.word	0x0800c068
 8008330:	7ff00000 	.word	0x7ff00000
 8008334:	0800c04d 	.word	0x0800c04d
 8008338:	0800c044 	.word	0x0800c044
 800833c:	0800c021 	.word	0x0800c021
 8008340:	3ff80000 	.word	0x3ff80000
 8008344:	0800c158 	.word	0x0800c158
 8008348:	0800c0c3 	.word	0x0800c0c3
 800834c:	2501      	movs	r5, #1
 800834e:	2300      	movs	r3, #0
 8008350:	9306      	str	r3, [sp, #24]
 8008352:	9508      	str	r5, [sp, #32]
 8008354:	f04f 33ff 	mov.w	r3, #4294967295
 8008358:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800835c:	2200      	movs	r2, #0
 800835e:	2312      	movs	r3, #18
 8008360:	e7b0      	b.n	80082c4 <_dtoa_r+0x26c>
 8008362:	2301      	movs	r3, #1
 8008364:	9308      	str	r3, [sp, #32]
 8008366:	e7f5      	b.n	8008354 <_dtoa_r+0x2fc>
 8008368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800836e:	e7b8      	b.n	80082e2 <_dtoa_r+0x28a>
 8008370:	3101      	adds	r1, #1
 8008372:	6041      	str	r1, [r0, #4]
 8008374:	0052      	lsls	r2, r2, #1
 8008376:	e7b8      	b.n	80082ea <_dtoa_r+0x292>
 8008378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800837a:	9a01      	ldr	r2, [sp, #4]
 800837c:	601a      	str	r2, [r3, #0]
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	2b0e      	cmp	r3, #14
 8008382:	f200 809d 	bhi.w	80084c0 <_dtoa_r+0x468>
 8008386:	2d00      	cmp	r5, #0
 8008388:	f000 809a 	beq.w	80084c0 <_dtoa_r+0x468>
 800838c:	9b00      	ldr	r3, [sp, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	dd32      	ble.n	80083f8 <_dtoa_r+0x3a0>
 8008392:	4ab7      	ldr	r2, [pc, #732]	; (8008670 <_dtoa_r+0x618>)
 8008394:	f003 030f 	and.w	r3, r3, #15
 8008398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800839c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083a0:	9b00      	ldr	r3, [sp, #0]
 80083a2:	05d8      	lsls	r0, r3, #23
 80083a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80083a8:	d516      	bpl.n	80083d8 <_dtoa_r+0x380>
 80083aa:	4bb2      	ldr	r3, [pc, #712]	; (8008674 <_dtoa_r+0x61c>)
 80083ac:	ec51 0b19 	vmov	r0, r1, d9
 80083b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083b4:	f7f8 fa4a 	bl	800084c <__aeabi_ddiv>
 80083b8:	f007 070f 	and.w	r7, r7, #15
 80083bc:	4682      	mov	sl, r0
 80083be:	468b      	mov	fp, r1
 80083c0:	2503      	movs	r5, #3
 80083c2:	4eac      	ldr	r6, [pc, #688]	; (8008674 <_dtoa_r+0x61c>)
 80083c4:	b957      	cbnz	r7, 80083dc <_dtoa_r+0x384>
 80083c6:	4642      	mov	r2, r8
 80083c8:	464b      	mov	r3, r9
 80083ca:	4650      	mov	r0, sl
 80083cc:	4659      	mov	r1, fp
 80083ce:	f7f8 fa3d 	bl	800084c <__aeabi_ddiv>
 80083d2:	4682      	mov	sl, r0
 80083d4:	468b      	mov	fp, r1
 80083d6:	e028      	b.n	800842a <_dtoa_r+0x3d2>
 80083d8:	2502      	movs	r5, #2
 80083da:	e7f2      	b.n	80083c2 <_dtoa_r+0x36a>
 80083dc:	07f9      	lsls	r1, r7, #31
 80083de:	d508      	bpl.n	80083f2 <_dtoa_r+0x39a>
 80083e0:	4640      	mov	r0, r8
 80083e2:	4649      	mov	r1, r9
 80083e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083e8:	f7f8 f906 	bl	80005f8 <__aeabi_dmul>
 80083ec:	3501      	adds	r5, #1
 80083ee:	4680      	mov	r8, r0
 80083f0:	4689      	mov	r9, r1
 80083f2:	107f      	asrs	r7, r7, #1
 80083f4:	3608      	adds	r6, #8
 80083f6:	e7e5      	b.n	80083c4 <_dtoa_r+0x36c>
 80083f8:	f000 809b 	beq.w	8008532 <_dtoa_r+0x4da>
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	4f9d      	ldr	r7, [pc, #628]	; (8008674 <_dtoa_r+0x61c>)
 8008400:	425e      	negs	r6, r3
 8008402:	4b9b      	ldr	r3, [pc, #620]	; (8008670 <_dtoa_r+0x618>)
 8008404:	f006 020f 	and.w	r2, r6, #15
 8008408:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	ec51 0b19 	vmov	r0, r1, d9
 8008414:	f7f8 f8f0 	bl	80005f8 <__aeabi_dmul>
 8008418:	1136      	asrs	r6, r6, #4
 800841a:	4682      	mov	sl, r0
 800841c:	468b      	mov	fp, r1
 800841e:	2300      	movs	r3, #0
 8008420:	2502      	movs	r5, #2
 8008422:	2e00      	cmp	r6, #0
 8008424:	d17a      	bne.n	800851c <_dtoa_r+0x4c4>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1d3      	bne.n	80083d2 <_dtoa_r+0x37a>
 800842a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8082 	beq.w	8008536 <_dtoa_r+0x4de>
 8008432:	4b91      	ldr	r3, [pc, #580]	; (8008678 <_dtoa_r+0x620>)
 8008434:	2200      	movs	r2, #0
 8008436:	4650      	mov	r0, sl
 8008438:	4659      	mov	r1, fp
 800843a:	f7f8 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800843e:	2800      	cmp	r0, #0
 8008440:	d079      	beq.n	8008536 <_dtoa_r+0x4de>
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d076      	beq.n	8008536 <_dtoa_r+0x4de>
 8008448:	9b02      	ldr	r3, [sp, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dd36      	ble.n	80084bc <_dtoa_r+0x464>
 800844e:	9b00      	ldr	r3, [sp, #0]
 8008450:	4650      	mov	r0, sl
 8008452:	4659      	mov	r1, fp
 8008454:	1e5f      	subs	r7, r3, #1
 8008456:	2200      	movs	r2, #0
 8008458:	4b88      	ldr	r3, [pc, #544]	; (800867c <_dtoa_r+0x624>)
 800845a:	f7f8 f8cd 	bl	80005f8 <__aeabi_dmul>
 800845e:	9e02      	ldr	r6, [sp, #8]
 8008460:	4682      	mov	sl, r0
 8008462:	468b      	mov	fp, r1
 8008464:	3501      	adds	r5, #1
 8008466:	4628      	mov	r0, r5
 8008468:	f7f8 f85c 	bl	8000524 <__aeabi_i2d>
 800846c:	4652      	mov	r2, sl
 800846e:	465b      	mov	r3, fp
 8008470:	f7f8 f8c2 	bl	80005f8 <__aeabi_dmul>
 8008474:	4b82      	ldr	r3, [pc, #520]	; (8008680 <_dtoa_r+0x628>)
 8008476:	2200      	movs	r2, #0
 8008478:	f7f7 ff08 	bl	800028c <__adddf3>
 800847c:	46d0      	mov	r8, sl
 800847e:	46d9      	mov	r9, fp
 8008480:	4682      	mov	sl, r0
 8008482:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008486:	2e00      	cmp	r6, #0
 8008488:	d158      	bne.n	800853c <_dtoa_r+0x4e4>
 800848a:	4b7e      	ldr	r3, [pc, #504]	; (8008684 <_dtoa_r+0x62c>)
 800848c:	2200      	movs	r2, #0
 800848e:	4640      	mov	r0, r8
 8008490:	4649      	mov	r1, r9
 8008492:	f7f7 fef9 	bl	8000288 <__aeabi_dsub>
 8008496:	4652      	mov	r2, sl
 8008498:	465b      	mov	r3, fp
 800849a:	4680      	mov	r8, r0
 800849c:	4689      	mov	r9, r1
 800849e:	f7f8 fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f040 8295 	bne.w	80089d2 <_dtoa_r+0x97a>
 80084a8:	4652      	mov	r2, sl
 80084aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084ae:	4640      	mov	r0, r8
 80084b0:	4649      	mov	r1, r9
 80084b2:	f7f8 fb13 	bl	8000adc <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	f040 8289 	bne.w	80089ce <_dtoa_r+0x976>
 80084bc:	ec5b ab19 	vmov	sl, fp, d9
 80084c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f2c0 8148 	blt.w	8008758 <_dtoa_r+0x700>
 80084c8:	9a00      	ldr	r2, [sp, #0]
 80084ca:	2a0e      	cmp	r2, #14
 80084cc:	f300 8144 	bgt.w	8008758 <_dtoa_r+0x700>
 80084d0:	4b67      	ldr	r3, [pc, #412]	; (8008670 <_dtoa_r+0x618>)
 80084d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f280 80d5 	bge.w	800868c <_dtoa_r+0x634>
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f300 80d1 	bgt.w	800868c <_dtoa_r+0x634>
 80084ea:	f040 826f 	bne.w	80089cc <_dtoa_r+0x974>
 80084ee:	4b65      	ldr	r3, [pc, #404]	; (8008684 <_dtoa_r+0x62c>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	4640      	mov	r0, r8
 80084f4:	4649      	mov	r1, r9
 80084f6:	f7f8 f87f 	bl	80005f8 <__aeabi_dmul>
 80084fa:	4652      	mov	r2, sl
 80084fc:	465b      	mov	r3, fp
 80084fe:	f7f8 fb01 	bl	8000b04 <__aeabi_dcmpge>
 8008502:	9e03      	ldr	r6, [sp, #12]
 8008504:	4637      	mov	r7, r6
 8008506:	2800      	cmp	r0, #0
 8008508:	f040 8245 	bne.w	8008996 <_dtoa_r+0x93e>
 800850c:	9d01      	ldr	r5, [sp, #4]
 800850e:	2331      	movs	r3, #49	; 0x31
 8008510:	f805 3b01 	strb.w	r3, [r5], #1
 8008514:	9b00      	ldr	r3, [sp, #0]
 8008516:	3301      	adds	r3, #1
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	e240      	b.n	800899e <_dtoa_r+0x946>
 800851c:	07f2      	lsls	r2, r6, #31
 800851e:	d505      	bpl.n	800852c <_dtoa_r+0x4d4>
 8008520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008524:	f7f8 f868 	bl	80005f8 <__aeabi_dmul>
 8008528:	3501      	adds	r5, #1
 800852a:	2301      	movs	r3, #1
 800852c:	1076      	asrs	r6, r6, #1
 800852e:	3708      	adds	r7, #8
 8008530:	e777      	b.n	8008422 <_dtoa_r+0x3ca>
 8008532:	2502      	movs	r5, #2
 8008534:	e779      	b.n	800842a <_dtoa_r+0x3d2>
 8008536:	9f00      	ldr	r7, [sp, #0]
 8008538:	9e03      	ldr	r6, [sp, #12]
 800853a:	e794      	b.n	8008466 <_dtoa_r+0x40e>
 800853c:	9901      	ldr	r1, [sp, #4]
 800853e:	4b4c      	ldr	r3, [pc, #304]	; (8008670 <_dtoa_r+0x618>)
 8008540:	4431      	add	r1, r6
 8008542:	910d      	str	r1, [sp, #52]	; 0x34
 8008544:	9908      	ldr	r1, [sp, #32]
 8008546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800854a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800854e:	2900      	cmp	r1, #0
 8008550:	d043      	beq.n	80085da <_dtoa_r+0x582>
 8008552:	494d      	ldr	r1, [pc, #308]	; (8008688 <_dtoa_r+0x630>)
 8008554:	2000      	movs	r0, #0
 8008556:	f7f8 f979 	bl	800084c <__aeabi_ddiv>
 800855a:	4652      	mov	r2, sl
 800855c:	465b      	mov	r3, fp
 800855e:	f7f7 fe93 	bl	8000288 <__aeabi_dsub>
 8008562:	9d01      	ldr	r5, [sp, #4]
 8008564:	4682      	mov	sl, r0
 8008566:	468b      	mov	fp, r1
 8008568:	4649      	mov	r1, r9
 800856a:	4640      	mov	r0, r8
 800856c:	f7f8 faf4 	bl	8000b58 <__aeabi_d2iz>
 8008570:	4606      	mov	r6, r0
 8008572:	f7f7 ffd7 	bl	8000524 <__aeabi_i2d>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4640      	mov	r0, r8
 800857c:	4649      	mov	r1, r9
 800857e:	f7f7 fe83 	bl	8000288 <__aeabi_dsub>
 8008582:	3630      	adds	r6, #48	; 0x30
 8008584:	f805 6b01 	strb.w	r6, [r5], #1
 8008588:	4652      	mov	r2, sl
 800858a:	465b      	mov	r3, fp
 800858c:	4680      	mov	r8, r0
 800858e:	4689      	mov	r9, r1
 8008590:	f7f8 faa4 	bl	8000adc <__aeabi_dcmplt>
 8008594:	2800      	cmp	r0, #0
 8008596:	d163      	bne.n	8008660 <_dtoa_r+0x608>
 8008598:	4642      	mov	r2, r8
 800859a:	464b      	mov	r3, r9
 800859c:	4936      	ldr	r1, [pc, #216]	; (8008678 <_dtoa_r+0x620>)
 800859e:	2000      	movs	r0, #0
 80085a0:	f7f7 fe72 	bl	8000288 <__aeabi_dsub>
 80085a4:	4652      	mov	r2, sl
 80085a6:	465b      	mov	r3, fp
 80085a8:	f7f8 fa98 	bl	8000adc <__aeabi_dcmplt>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f040 80b5 	bne.w	800871c <_dtoa_r+0x6c4>
 80085b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b4:	429d      	cmp	r5, r3
 80085b6:	d081      	beq.n	80084bc <_dtoa_r+0x464>
 80085b8:	4b30      	ldr	r3, [pc, #192]	; (800867c <_dtoa_r+0x624>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	4650      	mov	r0, sl
 80085be:	4659      	mov	r1, fp
 80085c0:	f7f8 f81a 	bl	80005f8 <__aeabi_dmul>
 80085c4:	4b2d      	ldr	r3, [pc, #180]	; (800867c <_dtoa_r+0x624>)
 80085c6:	4682      	mov	sl, r0
 80085c8:	468b      	mov	fp, r1
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	2200      	movs	r2, #0
 80085d0:	f7f8 f812 	bl	80005f8 <__aeabi_dmul>
 80085d4:	4680      	mov	r8, r0
 80085d6:	4689      	mov	r9, r1
 80085d8:	e7c6      	b.n	8008568 <_dtoa_r+0x510>
 80085da:	4650      	mov	r0, sl
 80085dc:	4659      	mov	r1, fp
 80085de:	f7f8 f80b 	bl	80005f8 <__aeabi_dmul>
 80085e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085e4:	9d01      	ldr	r5, [sp, #4]
 80085e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085e8:	4682      	mov	sl, r0
 80085ea:	468b      	mov	fp, r1
 80085ec:	4649      	mov	r1, r9
 80085ee:	4640      	mov	r0, r8
 80085f0:	f7f8 fab2 	bl	8000b58 <__aeabi_d2iz>
 80085f4:	4606      	mov	r6, r0
 80085f6:	f7f7 ff95 	bl	8000524 <__aeabi_i2d>
 80085fa:	3630      	adds	r6, #48	; 0x30
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f7 fe40 	bl	8000288 <__aeabi_dsub>
 8008608:	f805 6b01 	strb.w	r6, [r5], #1
 800860c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860e:	429d      	cmp	r5, r3
 8008610:	4680      	mov	r8, r0
 8008612:	4689      	mov	r9, r1
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	d124      	bne.n	8008664 <_dtoa_r+0x60c>
 800861a:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <_dtoa_r+0x630>)
 800861c:	4650      	mov	r0, sl
 800861e:	4659      	mov	r1, fp
 8008620:	f7f7 fe34 	bl	800028c <__adddf3>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4640      	mov	r0, r8
 800862a:	4649      	mov	r1, r9
 800862c:	f7f8 fa74 	bl	8000b18 <__aeabi_dcmpgt>
 8008630:	2800      	cmp	r0, #0
 8008632:	d173      	bne.n	800871c <_dtoa_r+0x6c4>
 8008634:	4652      	mov	r2, sl
 8008636:	465b      	mov	r3, fp
 8008638:	4913      	ldr	r1, [pc, #76]	; (8008688 <_dtoa_r+0x630>)
 800863a:	2000      	movs	r0, #0
 800863c:	f7f7 fe24 	bl	8000288 <__aeabi_dsub>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f8 fa48 	bl	8000adc <__aeabi_dcmplt>
 800864c:	2800      	cmp	r0, #0
 800864e:	f43f af35 	beq.w	80084bc <_dtoa_r+0x464>
 8008652:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008654:	1e6b      	subs	r3, r5, #1
 8008656:	930f      	str	r3, [sp, #60]	; 0x3c
 8008658:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800865c:	2b30      	cmp	r3, #48	; 0x30
 800865e:	d0f8      	beq.n	8008652 <_dtoa_r+0x5fa>
 8008660:	9700      	str	r7, [sp, #0]
 8008662:	e049      	b.n	80086f8 <_dtoa_r+0x6a0>
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <_dtoa_r+0x624>)
 8008666:	f7f7 ffc7 	bl	80005f8 <__aeabi_dmul>
 800866a:	4680      	mov	r8, r0
 800866c:	4689      	mov	r9, r1
 800866e:	e7bd      	b.n	80085ec <_dtoa_r+0x594>
 8008670:	0800c158 	.word	0x0800c158
 8008674:	0800c130 	.word	0x0800c130
 8008678:	3ff00000 	.word	0x3ff00000
 800867c:	40240000 	.word	0x40240000
 8008680:	401c0000 	.word	0x401c0000
 8008684:	40140000 	.word	0x40140000
 8008688:	3fe00000 	.word	0x3fe00000
 800868c:	9d01      	ldr	r5, [sp, #4]
 800868e:	4656      	mov	r6, sl
 8008690:	465f      	mov	r7, fp
 8008692:	4642      	mov	r2, r8
 8008694:	464b      	mov	r3, r9
 8008696:	4630      	mov	r0, r6
 8008698:	4639      	mov	r1, r7
 800869a:	f7f8 f8d7 	bl	800084c <__aeabi_ddiv>
 800869e:	f7f8 fa5b 	bl	8000b58 <__aeabi_d2iz>
 80086a2:	4682      	mov	sl, r0
 80086a4:	f7f7 ff3e 	bl	8000524 <__aeabi_i2d>
 80086a8:	4642      	mov	r2, r8
 80086aa:	464b      	mov	r3, r9
 80086ac:	f7f7 ffa4 	bl	80005f8 <__aeabi_dmul>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4630      	mov	r0, r6
 80086b6:	4639      	mov	r1, r7
 80086b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80086bc:	f7f7 fde4 	bl	8000288 <__aeabi_dsub>
 80086c0:	f805 6b01 	strb.w	r6, [r5], #1
 80086c4:	9e01      	ldr	r6, [sp, #4]
 80086c6:	9f03      	ldr	r7, [sp, #12]
 80086c8:	1bae      	subs	r6, r5, r6
 80086ca:	42b7      	cmp	r7, r6
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	d135      	bne.n	800873e <_dtoa_r+0x6e6>
 80086d2:	f7f7 fddb 	bl	800028c <__adddf3>
 80086d6:	4642      	mov	r2, r8
 80086d8:	464b      	mov	r3, r9
 80086da:	4606      	mov	r6, r0
 80086dc:	460f      	mov	r7, r1
 80086de:	f7f8 fa1b 	bl	8000b18 <__aeabi_dcmpgt>
 80086e2:	b9d0      	cbnz	r0, 800871a <_dtoa_r+0x6c2>
 80086e4:	4642      	mov	r2, r8
 80086e6:	464b      	mov	r3, r9
 80086e8:	4630      	mov	r0, r6
 80086ea:	4639      	mov	r1, r7
 80086ec:	f7f8 f9ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80086f0:	b110      	cbz	r0, 80086f8 <_dtoa_r+0x6a0>
 80086f2:	f01a 0f01 	tst.w	sl, #1
 80086f6:	d110      	bne.n	800871a <_dtoa_r+0x6c2>
 80086f8:	4620      	mov	r0, r4
 80086fa:	ee18 1a10 	vmov	r1, s16
 80086fe:	f000 fae5 	bl	8008ccc <_Bfree>
 8008702:	2300      	movs	r3, #0
 8008704:	9800      	ldr	r0, [sp, #0]
 8008706:	702b      	strb	r3, [r5, #0]
 8008708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800870a:	3001      	adds	r0, #1
 800870c:	6018      	str	r0, [r3, #0]
 800870e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008710:	2b00      	cmp	r3, #0
 8008712:	f43f acf1 	beq.w	80080f8 <_dtoa_r+0xa0>
 8008716:	601d      	str	r5, [r3, #0]
 8008718:	e4ee      	b.n	80080f8 <_dtoa_r+0xa0>
 800871a:	9f00      	ldr	r7, [sp, #0]
 800871c:	462b      	mov	r3, r5
 800871e:	461d      	mov	r5, r3
 8008720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008724:	2a39      	cmp	r2, #57	; 0x39
 8008726:	d106      	bne.n	8008736 <_dtoa_r+0x6de>
 8008728:	9a01      	ldr	r2, [sp, #4]
 800872a:	429a      	cmp	r2, r3
 800872c:	d1f7      	bne.n	800871e <_dtoa_r+0x6c6>
 800872e:	9901      	ldr	r1, [sp, #4]
 8008730:	2230      	movs	r2, #48	; 0x30
 8008732:	3701      	adds	r7, #1
 8008734:	700a      	strb	r2, [r1, #0]
 8008736:	781a      	ldrb	r2, [r3, #0]
 8008738:	3201      	adds	r2, #1
 800873a:	701a      	strb	r2, [r3, #0]
 800873c:	e790      	b.n	8008660 <_dtoa_r+0x608>
 800873e:	4ba6      	ldr	r3, [pc, #664]	; (80089d8 <_dtoa_r+0x980>)
 8008740:	2200      	movs	r2, #0
 8008742:	f7f7 ff59 	bl	80005f8 <__aeabi_dmul>
 8008746:	2200      	movs	r2, #0
 8008748:	2300      	movs	r3, #0
 800874a:	4606      	mov	r6, r0
 800874c:	460f      	mov	r7, r1
 800874e:	f7f8 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008752:	2800      	cmp	r0, #0
 8008754:	d09d      	beq.n	8008692 <_dtoa_r+0x63a>
 8008756:	e7cf      	b.n	80086f8 <_dtoa_r+0x6a0>
 8008758:	9a08      	ldr	r2, [sp, #32]
 800875a:	2a00      	cmp	r2, #0
 800875c:	f000 80d7 	beq.w	800890e <_dtoa_r+0x8b6>
 8008760:	9a06      	ldr	r2, [sp, #24]
 8008762:	2a01      	cmp	r2, #1
 8008764:	f300 80ba 	bgt.w	80088dc <_dtoa_r+0x884>
 8008768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800876a:	2a00      	cmp	r2, #0
 800876c:	f000 80b2 	beq.w	80088d4 <_dtoa_r+0x87c>
 8008770:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008774:	9e07      	ldr	r6, [sp, #28]
 8008776:	9d04      	ldr	r5, [sp, #16]
 8008778:	9a04      	ldr	r2, [sp, #16]
 800877a:	441a      	add	r2, r3
 800877c:	9204      	str	r2, [sp, #16]
 800877e:	9a05      	ldr	r2, [sp, #20]
 8008780:	2101      	movs	r1, #1
 8008782:	441a      	add	r2, r3
 8008784:	4620      	mov	r0, r4
 8008786:	9205      	str	r2, [sp, #20]
 8008788:	f000 fb58 	bl	8008e3c <__i2b>
 800878c:	4607      	mov	r7, r0
 800878e:	2d00      	cmp	r5, #0
 8008790:	dd0c      	ble.n	80087ac <_dtoa_r+0x754>
 8008792:	9b05      	ldr	r3, [sp, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd09      	ble.n	80087ac <_dtoa_r+0x754>
 8008798:	42ab      	cmp	r3, r5
 800879a:	9a04      	ldr	r2, [sp, #16]
 800879c:	bfa8      	it	ge
 800879e:	462b      	movge	r3, r5
 80087a0:	1ad2      	subs	r2, r2, r3
 80087a2:	9204      	str	r2, [sp, #16]
 80087a4:	9a05      	ldr	r2, [sp, #20]
 80087a6:	1aed      	subs	r5, r5, r3
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	9b07      	ldr	r3, [sp, #28]
 80087ae:	b31b      	cbz	r3, 80087f8 <_dtoa_r+0x7a0>
 80087b0:	9b08      	ldr	r3, [sp, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 80af 	beq.w	8008916 <_dtoa_r+0x8be>
 80087b8:	2e00      	cmp	r6, #0
 80087ba:	dd13      	ble.n	80087e4 <_dtoa_r+0x78c>
 80087bc:	4639      	mov	r1, r7
 80087be:	4632      	mov	r2, r6
 80087c0:	4620      	mov	r0, r4
 80087c2:	f000 fbfb 	bl	8008fbc <__pow5mult>
 80087c6:	ee18 2a10 	vmov	r2, s16
 80087ca:	4601      	mov	r1, r0
 80087cc:	4607      	mov	r7, r0
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 fb4a 	bl	8008e68 <__multiply>
 80087d4:	ee18 1a10 	vmov	r1, s16
 80087d8:	4680      	mov	r8, r0
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fa76 	bl	8008ccc <_Bfree>
 80087e0:	ee08 8a10 	vmov	s16, r8
 80087e4:	9b07      	ldr	r3, [sp, #28]
 80087e6:	1b9a      	subs	r2, r3, r6
 80087e8:	d006      	beq.n	80087f8 <_dtoa_r+0x7a0>
 80087ea:	ee18 1a10 	vmov	r1, s16
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 fbe4 	bl	8008fbc <__pow5mult>
 80087f4:	ee08 0a10 	vmov	s16, r0
 80087f8:	2101      	movs	r1, #1
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fb1e 	bl	8008e3c <__i2b>
 8008800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	4606      	mov	r6, r0
 8008806:	f340 8088 	ble.w	800891a <_dtoa_r+0x8c2>
 800880a:	461a      	mov	r2, r3
 800880c:	4601      	mov	r1, r0
 800880e:	4620      	mov	r0, r4
 8008810:	f000 fbd4 	bl	8008fbc <__pow5mult>
 8008814:	9b06      	ldr	r3, [sp, #24]
 8008816:	2b01      	cmp	r3, #1
 8008818:	4606      	mov	r6, r0
 800881a:	f340 8081 	ble.w	8008920 <_dtoa_r+0x8c8>
 800881e:	f04f 0800 	mov.w	r8, #0
 8008822:	6933      	ldr	r3, [r6, #16]
 8008824:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008828:	6918      	ldr	r0, [r3, #16]
 800882a:	f000 fab7 	bl	8008d9c <__hi0bits>
 800882e:	f1c0 0020 	rsb	r0, r0, #32
 8008832:	9b05      	ldr	r3, [sp, #20]
 8008834:	4418      	add	r0, r3
 8008836:	f010 001f 	ands.w	r0, r0, #31
 800883a:	f000 8092 	beq.w	8008962 <_dtoa_r+0x90a>
 800883e:	f1c0 0320 	rsb	r3, r0, #32
 8008842:	2b04      	cmp	r3, #4
 8008844:	f340 808a 	ble.w	800895c <_dtoa_r+0x904>
 8008848:	f1c0 001c 	rsb	r0, r0, #28
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	4403      	add	r3, r0
 8008850:	9304      	str	r3, [sp, #16]
 8008852:	9b05      	ldr	r3, [sp, #20]
 8008854:	4403      	add	r3, r0
 8008856:	4405      	add	r5, r0
 8008858:	9305      	str	r3, [sp, #20]
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd07      	ble.n	8008870 <_dtoa_r+0x818>
 8008860:	ee18 1a10 	vmov	r1, s16
 8008864:	461a      	mov	r2, r3
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fc02 	bl	8009070 <__lshift>
 800886c:	ee08 0a10 	vmov	s16, r0
 8008870:	9b05      	ldr	r3, [sp, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	dd05      	ble.n	8008882 <_dtoa_r+0x82a>
 8008876:	4631      	mov	r1, r6
 8008878:	461a      	mov	r2, r3
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fbf8 	bl	8009070 <__lshift>
 8008880:	4606      	mov	r6, r0
 8008882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d06e      	beq.n	8008966 <_dtoa_r+0x90e>
 8008888:	ee18 0a10 	vmov	r0, s16
 800888c:	4631      	mov	r1, r6
 800888e:	f000 fc5f 	bl	8009150 <__mcmp>
 8008892:	2800      	cmp	r0, #0
 8008894:	da67      	bge.n	8008966 <_dtoa_r+0x90e>
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	3b01      	subs	r3, #1
 800889a:	ee18 1a10 	vmov	r1, s16
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	220a      	movs	r2, #10
 80088a2:	2300      	movs	r3, #0
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 fa33 	bl	8008d10 <__multadd>
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	ee08 0a10 	vmov	s16, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 81b1 	beq.w	8008c18 <_dtoa_r+0xbc0>
 80088b6:	2300      	movs	r3, #0
 80088b8:	4639      	mov	r1, r7
 80088ba:	220a      	movs	r2, #10
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fa27 	bl	8008d10 <__multadd>
 80088c2:	9b02      	ldr	r3, [sp, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	4607      	mov	r7, r0
 80088c8:	f300 808e 	bgt.w	80089e8 <_dtoa_r+0x990>
 80088cc:	9b06      	ldr	r3, [sp, #24]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	dc51      	bgt.n	8008976 <_dtoa_r+0x91e>
 80088d2:	e089      	b.n	80089e8 <_dtoa_r+0x990>
 80088d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088da:	e74b      	b.n	8008774 <_dtoa_r+0x71c>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	1e5e      	subs	r6, r3, #1
 80088e0:	9b07      	ldr	r3, [sp, #28]
 80088e2:	42b3      	cmp	r3, r6
 80088e4:	bfbf      	itttt	lt
 80088e6:	9b07      	ldrlt	r3, [sp, #28]
 80088e8:	9607      	strlt	r6, [sp, #28]
 80088ea:	1af2      	sublt	r2, r6, r3
 80088ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088ee:	bfb6      	itet	lt
 80088f0:	189b      	addlt	r3, r3, r2
 80088f2:	1b9e      	subge	r6, r3, r6
 80088f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	bfb8      	it	lt
 80088fa:	2600      	movlt	r6, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bfb7      	itett	lt
 8008900:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008904:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008908:	1a9d      	sublt	r5, r3, r2
 800890a:	2300      	movlt	r3, #0
 800890c:	e734      	b.n	8008778 <_dtoa_r+0x720>
 800890e:	9e07      	ldr	r6, [sp, #28]
 8008910:	9d04      	ldr	r5, [sp, #16]
 8008912:	9f08      	ldr	r7, [sp, #32]
 8008914:	e73b      	b.n	800878e <_dtoa_r+0x736>
 8008916:	9a07      	ldr	r2, [sp, #28]
 8008918:	e767      	b.n	80087ea <_dtoa_r+0x792>
 800891a:	9b06      	ldr	r3, [sp, #24]
 800891c:	2b01      	cmp	r3, #1
 800891e:	dc18      	bgt.n	8008952 <_dtoa_r+0x8fa>
 8008920:	f1ba 0f00 	cmp.w	sl, #0
 8008924:	d115      	bne.n	8008952 <_dtoa_r+0x8fa>
 8008926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800892a:	b993      	cbnz	r3, 8008952 <_dtoa_r+0x8fa>
 800892c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008930:	0d1b      	lsrs	r3, r3, #20
 8008932:	051b      	lsls	r3, r3, #20
 8008934:	b183      	cbz	r3, 8008958 <_dtoa_r+0x900>
 8008936:	9b04      	ldr	r3, [sp, #16]
 8008938:	3301      	adds	r3, #1
 800893a:	9304      	str	r3, [sp, #16]
 800893c:	9b05      	ldr	r3, [sp, #20]
 800893e:	3301      	adds	r3, #1
 8008940:	9305      	str	r3, [sp, #20]
 8008942:	f04f 0801 	mov.w	r8, #1
 8008946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008948:	2b00      	cmp	r3, #0
 800894a:	f47f af6a 	bne.w	8008822 <_dtoa_r+0x7ca>
 800894e:	2001      	movs	r0, #1
 8008950:	e76f      	b.n	8008832 <_dtoa_r+0x7da>
 8008952:	f04f 0800 	mov.w	r8, #0
 8008956:	e7f6      	b.n	8008946 <_dtoa_r+0x8ee>
 8008958:	4698      	mov	r8, r3
 800895a:	e7f4      	b.n	8008946 <_dtoa_r+0x8ee>
 800895c:	f43f af7d 	beq.w	800885a <_dtoa_r+0x802>
 8008960:	4618      	mov	r0, r3
 8008962:	301c      	adds	r0, #28
 8008964:	e772      	b.n	800884c <_dtoa_r+0x7f4>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	dc37      	bgt.n	80089dc <_dtoa_r+0x984>
 800896c:	9b06      	ldr	r3, [sp, #24]
 800896e:	2b02      	cmp	r3, #2
 8008970:	dd34      	ble.n	80089dc <_dtoa_r+0x984>
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	9302      	str	r3, [sp, #8]
 8008976:	9b02      	ldr	r3, [sp, #8]
 8008978:	b96b      	cbnz	r3, 8008996 <_dtoa_r+0x93e>
 800897a:	4631      	mov	r1, r6
 800897c:	2205      	movs	r2, #5
 800897e:	4620      	mov	r0, r4
 8008980:	f000 f9c6 	bl	8008d10 <__multadd>
 8008984:	4601      	mov	r1, r0
 8008986:	4606      	mov	r6, r0
 8008988:	ee18 0a10 	vmov	r0, s16
 800898c:	f000 fbe0 	bl	8009150 <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	f73f adbb 	bgt.w	800850c <_dtoa_r+0x4b4>
 8008996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008998:	9d01      	ldr	r5, [sp, #4]
 800899a:	43db      	mvns	r3, r3
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	f04f 0800 	mov.w	r8, #0
 80089a2:	4631      	mov	r1, r6
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 f991 	bl	8008ccc <_Bfree>
 80089aa:	2f00      	cmp	r7, #0
 80089ac:	f43f aea4 	beq.w	80086f8 <_dtoa_r+0x6a0>
 80089b0:	f1b8 0f00 	cmp.w	r8, #0
 80089b4:	d005      	beq.n	80089c2 <_dtoa_r+0x96a>
 80089b6:	45b8      	cmp	r8, r7
 80089b8:	d003      	beq.n	80089c2 <_dtoa_r+0x96a>
 80089ba:	4641      	mov	r1, r8
 80089bc:	4620      	mov	r0, r4
 80089be:	f000 f985 	bl	8008ccc <_Bfree>
 80089c2:	4639      	mov	r1, r7
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 f981 	bl	8008ccc <_Bfree>
 80089ca:	e695      	b.n	80086f8 <_dtoa_r+0x6a0>
 80089cc:	2600      	movs	r6, #0
 80089ce:	4637      	mov	r7, r6
 80089d0:	e7e1      	b.n	8008996 <_dtoa_r+0x93e>
 80089d2:	9700      	str	r7, [sp, #0]
 80089d4:	4637      	mov	r7, r6
 80089d6:	e599      	b.n	800850c <_dtoa_r+0x4b4>
 80089d8:	40240000 	.word	0x40240000
 80089dc:	9b08      	ldr	r3, [sp, #32]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 80ca 	beq.w	8008b78 <_dtoa_r+0xb20>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	9302      	str	r3, [sp, #8]
 80089e8:	2d00      	cmp	r5, #0
 80089ea:	dd05      	ble.n	80089f8 <_dtoa_r+0x9a0>
 80089ec:	4639      	mov	r1, r7
 80089ee:	462a      	mov	r2, r5
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 fb3d 	bl	8009070 <__lshift>
 80089f6:	4607      	mov	r7, r0
 80089f8:	f1b8 0f00 	cmp.w	r8, #0
 80089fc:	d05b      	beq.n	8008ab6 <_dtoa_r+0xa5e>
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 f923 	bl	8008c4c <_Balloc>
 8008a06:	4605      	mov	r5, r0
 8008a08:	b928      	cbnz	r0, 8008a16 <_dtoa_r+0x9be>
 8008a0a:	4b87      	ldr	r3, [pc, #540]	; (8008c28 <_dtoa_r+0xbd0>)
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a12:	f7ff bb3b 	b.w	800808c <_dtoa_r+0x34>
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	3202      	adds	r2, #2
 8008a1a:	0092      	lsls	r2, r2, #2
 8008a1c:	f107 010c 	add.w	r1, r7, #12
 8008a20:	300c      	adds	r0, #12
 8008a22:	f7fe fdd9 	bl	80075d8 <memcpy>
 8008a26:	2201      	movs	r2, #1
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 fb20 	bl	8009070 <__lshift>
 8008a30:	9b01      	ldr	r3, [sp, #4]
 8008a32:	f103 0901 	add.w	r9, r3, #1
 8008a36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	9305      	str	r3, [sp, #20]
 8008a3e:	f00a 0301 	and.w	r3, sl, #1
 8008a42:	46b8      	mov	r8, r7
 8008a44:	9304      	str	r3, [sp, #16]
 8008a46:	4607      	mov	r7, r0
 8008a48:	4631      	mov	r1, r6
 8008a4a:	ee18 0a10 	vmov	r0, s16
 8008a4e:	f7ff fa77 	bl	8007f40 <quorem>
 8008a52:	4641      	mov	r1, r8
 8008a54:	9002      	str	r0, [sp, #8]
 8008a56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a5a:	ee18 0a10 	vmov	r0, s16
 8008a5e:	f000 fb77 	bl	8009150 <__mcmp>
 8008a62:	463a      	mov	r2, r7
 8008a64:	9003      	str	r0, [sp, #12]
 8008a66:	4631      	mov	r1, r6
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 fb8d 	bl	8009188 <__mdiff>
 8008a6e:	68c2      	ldr	r2, [r0, #12]
 8008a70:	f109 3bff 	add.w	fp, r9, #4294967295
 8008a74:	4605      	mov	r5, r0
 8008a76:	bb02      	cbnz	r2, 8008aba <_dtoa_r+0xa62>
 8008a78:	4601      	mov	r1, r0
 8008a7a:	ee18 0a10 	vmov	r0, s16
 8008a7e:	f000 fb67 	bl	8009150 <__mcmp>
 8008a82:	4602      	mov	r2, r0
 8008a84:	4629      	mov	r1, r5
 8008a86:	4620      	mov	r0, r4
 8008a88:	9207      	str	r2, [sp, #28]
 8008a8a:	f000 f91f 	bl	8008ccc <_Bfree>
 8008a8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008a92:	ea43 0102 	orr.w	r1, r3, r2
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	464d      	mov	r5, r9
 8008a9c:	d10f      	bne.n	8008abe <_dtoa_r+0xa66>
 8008a9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008aa2:	d02a      	beq.n	8008afa <_dtoa_r+0xaa2>
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dd02      	ble.n	8008ab0 <_dtoa_r+0xa58>
 8008aaa:	9b02      	ldr	r3, [sp, #8]
 8008aac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ab0:	f88b a000 	strb.w	sl, [fp]
 8008ab4:	e775      	b.n	80089a2 <_dtoa_r+0x94a>
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	e7ba      	b.n	8008a30 <_dtoa_r+0x9d8>
 8008aba:	2201      	movs	r2, #1
 8008abc:	e7e2      	b.n	8008a84 <_dtoa_r+0xa2c>
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	db04      	blt.n	8008ace <_dtoa_r+0xa76>
 8008ac4:	9906      	ldr	r1, [sp, #24]
 8008ac6:	430b      	orrs	r3, r1
 8008ac8:	9904      	ldr	r1, [sp, #16]
 8008aca:	430b      	orrs	r3, r1
 8008acc:	d122      	bne.n	8008b14 <_dtoa_r+0xabc>
 8008ace:	2a00      	cmp	r2, #0
 8008ad0:	ddee      	ble.n	8008ab0 <_dtoa_r+0xa58>
 8008ad2:	ee18 1a10 	vmov	r1, s16
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fac9 	bl	8009070 <__lshift>
 8008ade:	4631      	mov	r1, r6
 8008ae0:	ee08 0a10 	vmov	s16, r0
 8008ae4:	f000 fb34 	bl	8009150 <__mcmp>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	dc03      	bgt.n	8008af4 <_dtoa_r+0xa9c>
 8008aec:	d1e0      	bne.n	8008ab0 <_dtoa_r+0xa58>
 8008aee:	f01a 0f01 	tst.w	sl, #1
 8008af2:	d0dd      	beq.n	8008ab0 <_dtoa_r+0xa58>
 8008af4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008af8:	d1d7      	bne.n	8008aaa <_dtoa_r+0xa52>
 8008afa:	2339      	movs	r3, #57	; 0x39
 8008afc:	f88b 3000 	strb.w	r3, [fp]
 8008b00:	462b      	mov	r3, r5
 8008b02:	461d      	mov	r5, r3
 8008b04:	3b01      	subs	r3, #1
 8008b06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b0a:	2a39      	cmp	r2, #57	; 0x39
 8008b0c:	d071      	beq.n	8008bf2 <_dtoa_r+0xb9a>
 8008b0e:	3201      	adds	r2, #1
 8008b10:	701a      	strb	r2, [r3, #0]
 8008b12:	e746      	b.n	80089a2 <_dtoa_r+0x94a>
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	dd07      	ble.n	8008b28 <_dtoa_r+0xad0>
 8008b18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b1c:	d0ed      	beq.n	8008afa <_dtoa_r+0xaa2>
 8008b1e:	f10a 0301 	add.w	r3, sl, #1
 8008b22:	f88b 3000 	strb.w	r3, [fp]
 8008b26:	e73c      	b.n	80089a2 <_dtoa_r+0x94a>
 8008b28:	9b05      	ldr	r3, [sp, #20]
 8008b2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b2e:	4599      	cmp	r9, r3
 8008b30:	d047      	beq.n	8008bc2 <_dtoa_r+0xb6a>
 8008b32:	ee18 1a10 	vmov	r1, s16
 8008b36:	2300      	movs	r3, #0
 8008b38:	220a      	movs	r2, #10
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 f8e8 	bl	8008d10 <__multadd>
 8008b40:	45b8      	cmp	r8, r7
 8008b42:	ee08 0a10 	vmov	s16, r0
 8008b46:	f04f 0300 	mov.w	r3, #0
 8008b4a:	f04f 020a 	mov.w	r2, #10
 8008b4e:	4641      	mov	r1, r8
 8008b50:	4620      	mov	r0, r4
 8008b52:	d106      	bne.n	8008b62 <_dtoa_r+0xb0a>
 8008b54:	f000 f8dc 	bl	8008d10 <__multadd>
 8008b58:	4680      	mov	r8, r0
 8008b5a:	4607      	mov	r7, r0
 8008b5c:	f109 0901 	add.w	r9, r9, #1
 8008b60:	e772      	b.n	8008a48 <_dtoa_r+0x9f0>
 8008b62:	f000 f8d5 	bl	8008d10 <__multadd>
 8008b66:	4639      	mov	r1, r7
 8008b68:	4680      	mov	r8, r0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	220a      	movs	r2, #10
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f000 f8ce 	bl	8008d10 <__multadd>
 8008b74:	4607      	mov	r7, r0
 8008b76:	e7f1      	b.n	8008b5c <_dtoa_r+0xb04>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	9302      	str	r3, [sp, #8]
 8008b7c:	9d01      	ldr	r5, [sp, #4]
 8008b7e:	ee18 0a10 	vmov	r0, s16
 8008b82:	4631      	mov	r1, r6
 8008b84:	f7ff f9dc 	bl	8007f40 <quorem>
 8008b88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	f805 ab01 	strb.w	sl, [r5], #1
 8008b92:	1aea      	subs	r2, r5, r3
 8008b94:	9b02      	ldr	r3, [sp, #8]
 8008b96:	4293      	cmp	r3, r2
 8008b98:	dd09      	ble.n	8008bae <_dtoa_r+0xb56>
 8008b9a:	ee18 1a10 	vmov	r1, s16
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	220a      	movs	r2, #10
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 f8b4 	bl	8008d10 <__multadd>
 8008ba8:	ee08 0a10 	vmov	s16, r0
 8008bac:	e7e7      	b.n	8008b7e <_dtoa_r+0xb26>
 8008bae:	9b02      	ldr	r3, [sp, #8]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bfc8      	it	gt
 8008bb4:	461d      	movgt	r5, r3
 8008bb6:	9b01      	ldr	r3, [sp, #4]
 8008bb8:	bfd8      	it	le
 8008bba:	2501      	movle	r5, #1
 8008bbc:	441d      	add	r5, r3
 8008bbe:	f04f 0800 	mov.w	r8, #0
 8008bc2:	ee18 1a10 	vmov	r1, s16
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fa51 	bl	8009070 <__lshift>
 8008bce:	4631      	mov	r1, r6
 8008bd0:	ee08 0a10 	vmov	s16, r0
 8008bd4:	f000 fabc 	bl	8009150 <__mcmp>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	dc91      	bgt.n	8008b00 <_dtoa_r+0xaa8>
 8008bdc:	d102      	bne.n	8008be4 <_dtoa_r+0xb8c>
 8008bde:	f01a 0f01 	tst.w	sl, #1
 8008be2:	d18d      	bne.n	8008b00 <_dtoa_r+0xaa8>
 8008be4:	462b      	mov	r3, r5
 8008be6:	461d      	mov	r5, r3
 8008be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bec:	2a30      	cmp	r2, #48	; 0x30
 8008bee:	d0fa      	beq.n	8008be6 <_dtoa_r+0xb8e>
 8008bf0:	e6d7      	b.n	80089a2 <_dtoa_r+0x94a>
 8008bf2:	9a01      	ldr	r2, [sp, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d184      	bne.n	8008b02 <_dtoa_r+0xaaa>
 8008bf8:	9b00      	ldr	r3, [sp, #0]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	2331      	movs	r3, #49	; 0x31
 8008c00:	7013      	strb	r3, [r2, #0]
 8008c02:	e6ce      	b.n	80089a2 <_dtoa_r+0x94a>
 8008c04:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <_dtoa_r+0xbd4>)
 8008c06:	f7ff ba95 	b.w	8008134 <_dtoa_r+0xdc>
 8008c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f47f aa6e 	bne.w	80080ee <_dtoa_r+0x96>
 8008c12:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <_dtoa_r+0xbd8>)
 8008c14:	f7ff ba8e 	b.w	8008134 <_dtoa_r+0xdc>
 8008c18:	9b02      	ldr	r3, [sp, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	dcae      	bgt.n	8008b7c <_dtoa_r+0xb24>
 8008c1e:	9b06      	ldr	r3, [sp, #24]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	f73f aea8 	bgt.w	8008976 <_dtoa_r+0x91e>
 8008c26:	e7a9      	b.n	8008b7c <_dtoa_r+0xb24>
 8008c28:	0800c0c3 	.word	0x0800c0c3
 8008c2c:	0800c020 	.word	0x0800c020
 8008c30:	0800c044 	.word	0x0800c044

08008c34 <_localeconv_r>:
 8008c34:	4800      	ldr	r0, [pc, #0]	; (8008c38 <_localeconv_r+0x4>)
 8008c36:	4770      	bx	lr
 8008c38:	20000170 	.word	0x20000170

08008c3c <malloc>:
 8008c3c:	4b02      	ldr	r3, [pc, #8]	; (8008c48 <malloc+0xc>)
 8008c3e:	4601      	mov	r1, r0
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	f000 bc09 	b.w	8009458 <_malloc_r>
 8008c46:	bf00      	nop
 8008c48:	2000001c 	.word	0x2000001c

08008c4c <_Balloc>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c50:	4604      	mov	r4, r0
 8008c52:	460d      	mov	r5, r1
 8008c54:	b976      	cbnz	r6, 8008c74 <_Balloc+0x28>
 8008c56:	2010      	movs	r0, #16
 8008c58:	f7ff fff0 	bl	8008c3c <malloc>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	6260      	str	r0, [r4, #36]	; 0x24
 8008c60:	b920      	cbnz	r0, 8008c6c <_Balloc+0x20>
 8008c62:	4b18      	ldr	r3, [pc, #96]	; (8008cc4 <_Balloc+0x78>)
 8008c64:	4818      	ldr	r0, [pc, #96]	; (8008cc8 <_Balloc+0x7c>)
 8008c66:	2166      	movs	r1, #102	; 0x66
 8008c68:	f000 fdd6 	bl	8009818 <__assert_func>
 8008c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c70:	6006      	str	r6, [r0, #0]
 8008c72:	60c6      	str	r6, [r0, #12]
 8008c74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c76:	68f3      	ldr	r3, [r6, #12]
 8008c78:	b183      	cbz	r3, 8008c9c <_Balloc+0x50>
 8008c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c82:	b9b8      	cbnz	r0, 8008cb4 <_Balloc+0x68>
 8008c84:	2101      	movs	r1, #1
 8008c86:	fa01 f605 	lsl.w	r6, r1, r5
 8008c8a:	1d72      	adds	r2, r6, #5
 8008c8c:	0092      	lsls	r2, r2, #2
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f000 fb60 	bl	8009354 <_calloc_r>
 8008c94:	b160      	cbz	r0, 8008cb0 <_Balloc+0x64>
 8008c96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c9a:	e00e      	b.n	8008cba <_Balloc+0x6e>
 8008c9c:	2221      	movs	r2, #33	; 0x21
 8008c9e:	2104      	movs	r1, #4
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f000 fb57 	bl	8009354 <_calloc_r>
 8008ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca8:	60f0      	str	r0, [r6, #12]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e4      	bne.n	8008c7a <_Balloc+0x2e>
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}
 8008cb4:	6802      	ldr	r2, [r0, #0]
 8008cb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cc0:	e7f7      	b.n	8008cb2 <_Balloc+0x66>
 8008cc2:	bf00      	nop
 8008cc4:	0800c051 	.word	0x0800c051
 8008cc8:	0800c0d4 	.word	0x0800c0d4

08008ccc <_Bfree>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	b976      	cbnz	r6, 8008cf4 <_Bfree+0x28>
 8008cd6:	2010      	movs	r0, #16
 8008cd8:	f7ff ffb0 	bl	8008c3c <malloc>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	6268      	str	r0, [r5, #36]	; 0x24
 8008ce0:	b920      	cbnz	r0, 8008cec <_Bfree+0x20>
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <_Bfree+0x3c>)
 8008ce4:	4809      	ldr	r0, [pc, #36]	; (8008d0c <_Bfree+0x40>)
 8008ce6:	218a      	movs	r1, #138	; 0x8a
 8008ce8:	f000 fd96 	bl	8009818 <__assert_func>
 8008cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cf0:	6006      	str	r6, [r0, #0]
 8008cf2:	60c6      	str	r6, [r0, #12]
 8008cf4:	b13c      	cbz	r4, 8008d06 <_Bfree+0x3a>
 8008cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cf8:	6862      	ldr	r2, [r4, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d00:	6021      	str	r1, [r4, #0]
 8008d02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d06:	bd70      	pop	{r4, r5, r6, pc}
 8008d08:	0800c051 	.word	0x0800c051
 8008d0c:	0800c0d4 	.word	0x0800c0d4

08008d10 <__multadd>:
 8008d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d14:	690d      	ldr	r5, [r1, #16]
 8008d16:	4607      	mov	r7, r0
 8008d18:	460c      	mov	r4, r1
 8008d1a:	461e      	mov	r6, r3
 8008d1c:	f101 0c14 	add.w	ip, r1, #20
 8008d20:	2000      	movs	r0, #0
 8008d22:	f8dc 3000 	ldr.w	r3, [ip]
 8008d26:	b299      	uxth	r1, r3
 8008d28:	fb02 6101 	mla	r1, r2, r1, r6
 8008d2c:	0c1e      	lsrs	r6, r3, #16
 8008d2e:	0c0b      	lsrs	r3, r1, #16
 8008d30:	fb02 3306 	mla	r3, r2, r6, r3
 8008d34:	b289      	uxth	r1, r1
 8008d36:	3001      	adds	r0, #1
 8008d38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d3c:	4285      	cmp	r5, r0
 8008d3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d46:	dcec      	bgt.n	8008d22 <__multadd+0x12>
 8008d48:	b30e      	cbz	r6, 8008d8e <__multadd+0x7e>
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	dc19      	bgt.n	8008d84 <__multadd+0x74>
 8008d50:	6861      	ldr	r1, [r4, #4]
 8008d52:	4638      	mov	r0, r7
 8008d54:	3101      	adds	r1, #1
 8008d56:	f7ff ff79 	bl	8008c4c <_Balloc>
 8008d5a:	4680      	mov	r8, r0
 8008d5c:	b928      	cbnz	r0, 8008d6a <__multadd+0x5a>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <__multadd+0x84>)
 8008d62:	480d      	ldr	r0, [pc, #52]	; (8008d98 <__multadd+0x88>)
 8008d64:	21b5      	movs	r1, #181	; 0xb5
 8008d66:	f000 fd57 	bl	8009818 <__assert_func>
 8008d6a:	6922      	ldr	r2, [r4, #16]
 8008d6c:	3202      	adds	r2, #2
 8008d6e:	f104 010c 	add.w	r1, r4, #12
 8008d72:	0092      	lsls	r2, r2, #2
 8008d74:	300c      	adds	r0, #12
 8008d76:	f7fe fc2f 	bl	80075d8 <memcpy>
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7ff ffa5 	bl	8008ccc <_Bfree>
 8008d82:	4644      	mov	r4, r8
 8008d84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d88:	3501      	adds	r5, #1
 8008d8a:	615e      	str	r6, [r3, #20]
 8008d8c:	6125      	str	r5, [r4, #16]
 8008d8e:	4620      	mov	r0, r4
 8008d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d94:	0800c0c3 	.word	0x0800c0c3
 8008d98:	0800c0d4 	.word	0x0800c0d4

08008d9c <__hi0bits>:
 8008d9c:	0c03      	lsrs	r3, r0, #16
 8008d9e:	041b      	lsls	r3, r3, #16
 8008da0:	b9d3      	cbnz	r3, 8008dd8 <__hi0bits+0x3c>
 8008da2:	0400      	lsls	r0, r0, #16
 8008da4:	2310      	movs	r3, #16
 8008da6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008daa:	bf04      	itt	eq
 8008dac:	0200      	lsleq	r0, r0, #8
 8008dae:	3308      	addeq	r3, #8
 8008db0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008db4:	bf04      	itt	eq
 8008db6:	0100      	lsleq	r0, r0, #4
 8008db8:	3304      	addeq	r3, #4
 8008dba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008dbe:	bf04      	itt	eq
 8008dc0:	0080      	lsleq	r0, r0, #2
 8008dc2:	3302      	addeq	r3, #2
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	db05      	blt.n	8008dd4 <__hi0bits+0x38>
 8008dc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008dcc:	f103 0301 	add.w	r3, r3, #1
 8008dd0:	bf08      	it	eq
 8008dd2:	2320      	moveq	r3, #32
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	4770      	bx	lr
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e7e4      	b.n	8008da6 <__hi0bits+0xa>

08008ddc <__lo0bits>:
 8008ddc:	6803      	ldr	r3, [r0, #0]
 8008dde:	f013 0207 	ands.w	r2, r3, #7
 8008de2:	4601      	mov	r1, r0
 8008de4:	d00b      	beq.n	8008dfe <__lo0bits+0x22>
 8008de6:	07da      	lsls	r2, r3, #31
 8008de8:	d423      	bmi.n	8008e32 <__lo0bits+0x56>
 8008dea:	0798      	lsls	r0, r3, #30
 8008dec:	bf49      	itett	mi
 8008dee:	085b      	lsrmi	r3, r3, #1
 8008df0:	089b      	lsrpl	r3, r3, #2
 8008df2:	2001      	movmi	r0, #1
 8008df4:	600b      	strmi	r3, [r1, #0]
 8008df6:	bf5c      	itt	pl
 8008df8:	600b      	strpl	r3, [r1, #0]
 8008dfa:	2002      	movpl	r0, #2
 8008dfc:	4770      	bx	lr
 8008dfe:	b298      	uxth	r0, r3
 8008e00:	b9a8      	cbnz	r0, 8008e2e <__lo0bits+0x52>
 8008e02:	0c1b      	lsrs	r3, r3, #16
 8008e04:	2010      	movs	r0, #16
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	b90a      	cbnz	r2, 8008e0e <__lo0bits+0x32>
 8008e0a:	3008      	adds	r0, #8
 8008e0c:	0a1b      	lsrs	r3, r3, #8
 8008e0e:	071a      	lsls	r2, r3, #28
 8008e10:	bf04      	itt	eq
 8008e12:	091b      	lsreq	r3, r3, #4
 8008e14:	3004      	addeq	r0, #4
 8008e16:	079a      	lsls	r2, r3, #30
 8008e18:	bf04      	itt	eq
 8008e1a:	089b      	lsreq	r3, r3, #2
 8008e1c:	3002      	addeq	r0, #2
 8008e1e:	07da      	lsls	r2, r3, #31
 8008e20:	d403      	bmi.n	8008e2a <__lo0bits+0x4e>
 8008e22:	085b      	lsrs	r3, r3, #1
 8008e24:	f100 0001 	add.w	r0, r0, #1
 8008e28:	d005      	beq.n	8008e36 <__lo0bits+0x5a>
 8008e2a:	600b      	str	r3, [r1, #0]
 8008e2c:	4770      	bx	lr
 8008e2e:	4610      	mov	r0, r2
 8008e30:	e7e9      	b.n	8008e06 <__lo0bits+0x2a>
 8008e32:	2000      	movs	r0, #0
 8008e34:	4770      	bx	lr
 8008e36:	2020      	movs	r0, #32
 8008e38:	4770      	bx	lr
	...

08008e3c <__i2b>:
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	460c      	mov	r4, r1
 8008e40:	2101      	movs	r1, #1
 8008e42:	f7ff ff03 	bl	8008c4c <_Balloc>
 8008e46:	4602      	mov	r2, r0
 8008e48:	b928      	cbnz	r0, 8008e56 <__i2b+0x1a>
 8008e4a:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <__i2b+0x24>)
 8008e4c:	4805      	ldr	r0, [pc, #20]	; (8008e64 <__i2b+0x28>)
 8008e4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e52:	f000 fce1 	bl	8009818 <__assert_func>
 8008e56:	2301      	movs	r3, #1
 8008e58:	6144      	str	r4, [r0, #20]
 8008e5a:	6103      	str	r3, [r0, #16]
 8008e5c:	bd10      	pop	{r4, pc}
 8008e5e:	bf00      	nop
 8008e60:	0800c0c3 	.word	0x0800c0c3
 8008e64:	0800c0d4 	.word	0x0800c0d4

08008e68 <__multiply>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	4691      	mov	r9, r2
 8008e6e:	690a      	ldr	r2, [r1, #16]
 8008e70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	bfb8      	it	lt
 8008e78:	460b      	movlt	r3, r1
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	bfbc      	itt	lt
 8008e7e:	464c      	movlt	r4, r9
 8008e80:	4699      	movlt	r9, r3
 8008e82:	6927      	ldr	r7, [r4, #16]
 8008e84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e88:	68a3      	ldr	r3, [r4, #8]
 8008e8a:	6861      	ldr	r1, [r4, #4]
 8008e8c:	eb07 060a 	add.w	r6, r7, sl
 8008e90:	42b3      	cmp	r3, r6
 8008e92:	b085      	sub	sp, #20
 8008e94:	bfb8      	it	lt
 8008e96:	3101      	addlt	r1, #1
 8008e98:	f7ff fed8 	bl	8008c4c <_Balloc>
 8008e9c:	b930      	cbnz	r0, 8008eac <__multiply+0x44>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	4b44      	ldr	r3, [pc, #272]	; (8008fb4 <__multiply+0x14c>)
 8008ea2:	4845      	ldr	r0, [pc, #276]	; (8008fb8 <__multiply+0x150>)
 8008ea4:	f240 115d 	movw	r1, #349	; 0x15d
 8008ea8:	f000 fcb6 	bl	8009818 <__assert_func>
 8008eac:	f100 0514 	add.w	r5, r0, #20
 8008eb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008eb4:	462b      	mov	r3, r5
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	4543      	cmp	r3, r8
 8008eba:	d321      	bcc.n	8008f00 <__multiply+0x98>
 8008ebc:	f104 0314 	add.w	r3, r4, #20
 8008ec0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ec4:	f109 0314 	add.w	r3, r9, #20
 8008ec8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ecc:	9202      	str	r2, [sp, #8]
 8008ece:	1b3a      	subs	r2, r7, r4
 8008ed0:	3a15      	subs	r2, #21
 8008ed2:	f022 0203 	bic.w	r2, r2, #3
 8008ed6:	3204      	adds	r2, #4
 8008ed8:	f104 0115 	add.w	r1, r4, #21
 8008edc:	428f      	cmp	r7, r1
 8008ede:	bf38      	it	cc
 8008ee0:	2204      	movcc	r2, #4
 8008ee2:	9201      	str	r2, [sp, #4]
 8008ee4:	9a02      	ldr	r2, [sp, #8]
 8008ee6:	9303      	str	r3, [sp, #12]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d80c      	bhi.n	8008f06 <__multiply+0x9e>
 8008eec:	2e00      	cmp	r6, #0
 8008eee:	dd03      	ble.n	8008ef8 <__multiply+0x90>
 8008ef0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d05a      	beq.n	8008fae <__multiply+0x146>
 8008ef8:	6106      	str	r6, [r0, #16]
 8008efa:	b005      	add	sp, #20
 8008efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f00:	f843 2b04 	str.w	r2, [r3], #4
 8008f04:	e7d8      	b.n	8008eb8 <__multiply+0x50>
 8008f06:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f0a:	f1ba 0f00 	cmp.w	sl, #0
 8008f0e:	d024      	beq.n	8008f5a <__multiply+0xf2>
 8008f10:	f104 0e14 	add.w	lr, r4, #20
 8008f14:	46a9      	mov	r9, r5
 8008f16:	f04f 0c00 	mov.w	ip, #0
 8008f1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f1e:	f8d9 1000 	ldr.w	r1, [r9]
 8008f22:	fa1f fb82 	uxth.w	fp, r2
 8008f26:	b289      	uxth	r1, r1
 8008f28:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f30:	f8d9 2000 	ldr.w	r2, [r9]
 8008f34:	4461      	add	r1, ip
 8008f36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f42:	b289      	uxth	r1, r1
 8008f44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f48:	4577      	cmp	r7, lr
 8008f4a:	f849 1b04 	str.w	r1, [r9], #4
 8008f4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f52:	d8e2      	bhi.n	8008f1a <__multiply+0xb2>
 8008f54:	9a01      	ldr	r2, [sp, #4]
 8008f56:	f845 c002 	str.w	ip, [r5, r2]
 8008f5a:	9a03      	ldr	r2, [sp, #12]
 8008f5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f60:	3304      	adds	r3, #4
 8008f62:	f1b9 0f00 	cmp.w	r9, #0
 8008f66:	d020      	beq.n	8008faa <__multiply+0x142>
 8008f68:	6829      	ldr	r1, [r5, #0]
 8008f6a:	f104 0c14 	add.w	ip, r4, #20
 8008f6e:	46ae      	mov	lr, r5
 8008f70:	f04f 0a00 	mov.w	sl, #0
 8008f74:	f8bc b000 	ldrh.w	fp, [ip]
 8008f78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f7c:	fb09 220b 	mla	r2, r9, fp, r2
 8008f80:	4492      	add	sl, r2
 8008f82:	b289      	uxth	r1, r1
 8008f84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f88:	f84e 1b04 	str.w	r1, [lr], #4
 8008f8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f90:	f8be 1000 	ldrh.w	r1, [lr]
 8008f94:	0c12      	lsrs	r2, r2, #16
 8008f96:	fb09 1102 	mla	r1, r9, r2, r1
 8008f9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f9e:	4567      	cmp	r7, ip
 8008fa0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fa4:	d8e6      	bhi.n	8008f74 <__multiply+0x10c>
 8008fa6:	9a01      	ldr	r2, [sp, #4]
 8008fa8:	50a9      	str	r1, [r5, r2]
 8008faa:	3504      	adds	r5, #4
 8008fac:	e79a      	b.n	8008ee4 <__multiply+0x7c>
 8008fae:	3e01      	subs	r6, #1
 8008fb0:	e79c      	b.n	8008eec <__multiply+0x84>
 8008fb2:	bf00      	nop
 8008fb4:	0800c0c3 	.word	0x0800c0c3
 8008fb8:	0800c0d4 	.word	0x0800c0d4

08008fbc <__pow5mult>:
 8008fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	f012 0203 	ands.w	r2, r2, #3
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	460f      	mov	r7, r1
 8008fca:	d007      	beq.n	8008fdc <__pow5mult+0x20>
 8008fcc:	4c25      	ldr	r4, [pc, #148]	; (8009064 <__pow5mult+0xa8>)
 8008fce:	3a01      	subs	r2, #1
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fd6:	f7ff fe9b 	bl	8008d10 <__multadd>
 8008fda:	4607      	mov	r7, r0
 8008fdc:	10ad      	asrs	r5, r5, #2
 8008fde:	d03d      	beq.n	800905c <__pow5mult+0xa0>
 8008fe0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fe2:	b97c      	cbnz	r4, 8009004 <__pow5mult+0x48>
 8008fe4:	2010      	movs	r0, #16
 8008fe6:	f7ff fe29 	bl	8008c3c <malloc>
 8008fea:	4602      	mov	r2, r0
 8008fec:	6270      	str	r0, [r6, #36]	; 0x24
 8008fee:	b928      	cbnz	r0, 8008ffc <__pow5mult+0x40>
 8008ff0:	4b1d      	ldr	r3, [pc, #116]	; (8009068 <__pow5mult+0xac>)
 8008ff2:	481e      	ldr	r0, [pc, #120]	; (800906c <__pow5mult+0xb0>)
 8008ff4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ff8:	f000 fc0e 	bl	8009818 <__assert_func>
 8008ffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009000:	6004      	str	r4, [r0, #0]
 8009002:	60c4      	str	r4, [r0, #12]
 8009004:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800900c:	b94c      	cbnz	r4, 8009022 <__pow5mult+0x66>
 800900e:	f240 2171 	movw	r1, #625	; 0x271
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff ff12 	bl	8008e3c <__i2b>
 8009018:	2300      	movs	r3, #0
 800901a:	f8c8 0008 	str.w	r0, [r8, #8]
 800901e:	4604      	mov	r4, r0
 8009020:	6003      	str	r3, [r0, #0]
 8009022:	f04f 0900 	mov.w	r9, #0
 8009026:	07eb      	lsls	r3, r5, #31
 8009028:	d50a      	bpl.n	8009040 <__pow5mult+0x84>
 800902a:	4639      	mov	r1, r7
 800902c:	4622      	mov	r2, r4
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff ff1a 	bl	8008e68 <__multiply>
 8009034:	4639      	mov	r1, r7
 8009036:	4680      	mov	r8, r0
 8009038:	4630      	mov	r0, r6
 800903a:	f7ff fe47 	bl	8008ccc <_Bfree>
 800903e:	4647      	mov	r7, r8
 8009040:	106d      	asrs	r5, r5, #1
 8009042:	d00b      	beq.n	800905c <__pow5mult+0xa0>
 8009044:	6820      	ldr	r0, [r4, #0]
 8009046:	b938      	cbnz	r0, 8009058 <__pow5mult+0x9c>
 8009048:	4622      	mov	r2, r4
 800904a:	4621      	mov	r1, r4
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff ff0b 	bl	8008e68 <__multiply>
 8009052:	6020      	str	r0, [r4, #0]
 8009054:	f8c0 9000 	str.w	r9, [r0]
 8009058:	4604      	mov	r4, r0
 800905a:	e7e4      	b.n	8009026 <__pow5mult+0x6a>
 800905c:	4638      	mov	r0, r7
 800905e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009062:	bf00      	nop
 8009064:	0800c220 	.word	0x0800c220
 8009068:	0800c051 	.word	0x0800c051
 800906c:	0800c0d4 	.word	0x0800c0d4

08009070 <__lshift>:
 8009070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009074:	460c      	mov	r4, r1
 8009076:	6849      	ldr	r1, [r1, #4]
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800907e:	68a3      	ldr	r3, [r4, #8]
 8009080:	4607      	mov	r7, r0
 8009082:	4691      	mov	r9, r2
 8009084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009088:	f108 0601 	add.w	r6, r8, #1
 800908c:	42b3      	cmp	r3, r6
 800908e:	db0b      	blt.n	80090a8 <__lshift+0x38>
 8009090:	4638      	mov	r0, r7
 8009092:	f7ff fddb 	bl	8008c4c <_Balloc>
 8009096:	4605      	mov	r5, r0
 8009098:	b948      	cbnz	r0, 80090ae <__lshift+0x3e>
 800909a:	4602      	mov	r2, r0
 800909c:	4b2a      	ldr	r3, [pc, #168]	; (8009148 <__lshift+0xd8>)
 800909e:	482b      	ldr	r0, [pc, #172]	; (800914c <__lshift+0xdc>)
 80090a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090a4:	f000 fbb8 	bl	8009818 <__assert_func>
 80090a8:	3101      	adds	r1, #1
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	e7ee      	b.n	800908c <__lshift+0x1c>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f100 0114 	add.w	r1, r0, #20
 80090b4:	f100 0210 	add.w	r2, r0, #16
 80090b8:	4618      	mov	r0, r3
 80090ba:	4553      	cmp	r3, sl
 80090bc:	db37      	blt.n	800912e <__lshift+0xbe>
 80090be:	6920      	ldr	r0, [r4, #16]
 80090c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090c4:	f104 0314 	add.w	r3, r4, #20
 80090c8:	f019 091f 	ands.w	r9, r9, #31
 80090cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80090d4:	d02f      	beq.n	8009136 <__lshift+0xc6>
 80090d6:	f1c9 0e20 	rsb	lr, r9, #32
 80090da:	468a      	mov	sl, r1
 80090dc:	f04f 0c00 	mov.w	ip, #0
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	fa02 f209 	lsl.w	r2, r2, r9
 80090e6:	ea42 020c 	orr.w	r2, r2, ip
 80090ea:	f84a 2b04 	str.w	r2, [sl], #4
 80090ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f2:	4298      	cmp	r0, r3
 80090f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80090f8:	d8f2      	bhi.n	80090e0 <__lshift+0x70>
 80090fa:	1b03      	subs	r3, r0, r4
 80090fc:	3b15      	subs	r3, #21
 80090fe:	f023 0303 	bic.w	r3, r3, #3
 8009102:	3304      	adds	r3, #4
 8009104:	f104 0215 	add.w	r2, r4, #21
 8009108:	4290      	cmp	r0, r2
 800910a:	bf38      	it	cc
 800910c:	2304      	movcc	r3, #4
 800910e:	f841 c003 	str.w	ip, [r1, r3]
 8009112:	f1bc 0f00 	cmp.w	ip, #0
 8009116:	d001      	beq.n	800911c <__lshift+0xac>
 8009118:	f108 0602 	add.w	r6, r8, #2
 800911c:	3e01      	subs	r6, #1
 800911e:	4638      	mov	r0, r7
 8009120:	612e      	str	r6, [r5, #16]
 8009122:	4621      	mov	r1, r4
 8009124:	f7ff fdd2 	bl	8008ccc <_Bfree>
 8009128:	4628      	mov	r0, r5
 800912a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009132:	3301      	adds	r3, #1
 8009134:	e7c1      	b.n	80090ba <__lshift+0x4a>
 8009136:	3904      	subs	r1, #4
 8009138:	f853 2b04 	ldr.w	r2, [r3], #4
 800913c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009140:	4298      	cmp	r0, r3
 8009142:	d8f9      	bhi.n	8009138 <__lshift+0xc8>
 8009144:	e7ea      	b.n	800911c <__lshift+0xac>
 8009146:	bf00      	nop
 8009148:	0800c0c3 	.word	0x0800c0c3
 800914c:	0800c0d4 	.word	0x0800c0d4

08009150 <__mcmp>:
 8009150:	b530      	push	{r4, r5, lr}
 8009152:	6902      	ldr	r2, [r0, #16]
 8009154:	690c      	ldr	r4, [r1, #16]
 8009156:	1b12      	subs	r2, r2, r4
 8009158:	d10e      	bne.n	8009178 <__mcmp+0x28>
 800915a:	f100 0314 	add.w	r3, r0, #20
 800915e:	3114      	adds	r1, #20
 8009160:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009164:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009168:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800916c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009170:	42a5      	cmp	r5, r4
 8009172:	d003      	beq.n	800917c <__mcmp+0x2c>
 8009174:	d305      	bcc.n	8009182 <__mcmp+0x32>
 8009176:	2201      	movs	r2, #1
 8009178:	4610      	mov	r0, r2
 800917a:	bd30      	pop	{r4, r5, pc}
 800917c:	4283      	cmp	r3, r0
 800917e:	d3f3      	bcc.n	8009168 <__mcmp+0x18>
 8009180:	e7fa      	b.n	8009178 <__mcmp+0x28>
 8009182:	f04f 32ff 	mov.w	r2, #4294967295
 8009186:	e7f7      	b.n	8009178 <__mcmp+0x28>

08009188 <__mdiff>:
 8009188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	460c      	mov	r4, r1
 800918e:	4606      	mov	r6, r0
 8009190:	4611      	mov	r1, r2
 8009192:	4620      	mov	r0, r4
 8009194:	4690      	mov	r8, r2
 8009196:	f7ff ffdb 	bl	8009150 <__mcmp>
 800919a:	1e05      	subs	r5, r0, #0
 800919c:	d110      	bne.n	80091c0 <__mdiff+0x38>
 800919e:	4629      	mov	r1, r5
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7ff fd53 	bl	8008c4c <_Balloc>
 80091a6:	b930      	cbnz	r0, 80091b6 <__mdiff+0x2e>
 80091a8:	4b3a      	ldr	r3, [pc, #232]	; (8009294 <__mdiff+0x10c>)
 80091aa:	4602      	mov	r2, r0
 80091ac:	f240 2132 	movw	r1, #562	; 0x232
 80091b0:	4839      	ldr	r0, [pc, #228]	; (8009298 <__mdiff+0x110>)
 80091b2:	f000 fb31 	bl	8009818 <__assert_func>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c0:	bfa4      	itt	ge
 80091c2:	4643      	movge	r3, r8
 80091c4:	46a0      	movge	r8, r4
 80091c6:	4630      	mov	r0, r6
 80091c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091cc:	bfa6      	itte	ge
 80091ce:	461c      	movge	r4, r3
 80091d0:	2500      	movge	r5, #0
 80091d2:	2501      	movlt	r5, #1
 80091d4:	f7ff fd3a 	bl	8008c4c <_Balloc>
 80091d8:	b920      	cbnz	r0, 80091e4 <__mdiff+0x5c>
 80091da:	4b2e      	ldr	r3, [pc, #184]	; (8009294 <__mdiff+0x10c>)
 80091dc:	4602      	mov	r2, r0
 80091de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091e2:	e7e5      	b.n	80091b0 <__mdiff+0x28>
 80091e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091e8:	6926      	ldr	r6, [r4, #16]
 80091ea:	60c5      	str	r5, [r0, #12]
 80091ec:	f104 0914 	add.w	r9, r4, #20
 80091f0:	f108 0514 	add.w	r5, r8, #20
 80091f4:	f100 0e14 	add.w	lr, r0, #20
 80091f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009200:	f108 0210 	add.w	r2, r8, #16
 8009204:	46f2      	mov	sl, lr
 8009206:	2100      	movs	r1, #0
 8009208:	f859 3b04 	ldr.w	r3, [r9], #4
 800920c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009210:	fa1f f883 	uxth.w	r8, r3
 8009214:	fa11 f18b 	uxtah	r1, r1, fp
 8009218:	0c1b      	lsrs	r3, r3, #16
 800921a:	eba1 0808 	sub.w	r8, r1, r8
 800921e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009222:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009226:	fa1f f888 	uxth.w	r8, r8
 800922a:	1419      	asrs	r1, r3, #16
 800922c:	454e      	cmp	r6, r9
 800922e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009232:	f84a 3b04 	str.w	r3, [sl], #4
 8009236:	d8e7      	bhi.n	8009208 <__mdiff+0x80>
 8009238:	1b33      	subs	r3, r6, r4
 800923a:	3b15      	subs	r3, #21
 800923c:	f023 0303 	bic.w	r3, r3, #3
 8009240:	3304      	adds	r3, #4
 8009242:	3415      	adds	r4, #21
 8009244:	42a6      	cmp	r6, r4
 8009246:	bf38      	it	cc
 8009248:	2304      	movcc	r3, #4
 800924a:	441d      	add	r5, r3
 800924c:	4473      	add	r3, lr
 800924e:	469e      	mov	lr, r3
 8009250:	462e      	mov	r6, r5
 8009252:	4566      	cmp	r6, ip
 8009254:	d30e      	bcc.n	8009274 <__mdiff+0xec>
 8009256:	f10c 0203 	add.w	r2, ip, #3
 800925a:	1b52      	subs	r2, r2, r5
 800925c:	f022 0203 	bic.w	r2, r2, #3
 8009260:	3d03      	subs	r5, #3
 8009262:	45ac      	cmp	ip, r5
 8009264:	bf38      	it	cc
 8009266:	2200      	movcc	r2, #0
 8009268:	441a      	add	r2, r3
 800926a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800926e:	b17b      	cbz	r3, 8009290 <__mdiff+0x108>
 8009270:	6107      	str	r7, [r0, #16]
 8009272:	e7a3      	b.n	80091bc <__mdiff+0x34>
 8009274:	f856 8b04 	ldr.w	r8, [r6], #4
 8009278:	fa11 f288 	uxtah	r2, r1, r8
 800927c:	1414      	asrs	r4, r2, #16
 800927e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009282:	b292      	uxth	r2, r2
 8009284:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009288:	f84e 2b04 	str.w	r2, [lr], #4
 800928c:	1421      	asrs	r1, r4, #16
 800928e:	e7e0      	b.n	8009252 <__mdiff+0xca>
 8009290:	3f01      	subs	r7, #1
 8009292:	e7ea      	b.n	800926a <__mdiff+0xe2>
 8009294:	0800c0c3 	.word	0x0800c0c3
 8009298:	0800c0d4 	.word	0x0800c0d4

0800929c <__d2b>:
 800929c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092a0:	4689      	mov	r9, r1
 80092a2:	2101      	movs	r1, #1
 80092a4:	ec57 6b10 	vmov	r6, r7, d0
 80092a8:	4690      	mov	r8, r2
 80092aa:	f7ff fccf 	bl	8008c4c <_Balloc>
 80092ae:	4604      	mov	r4, r0
 80092b0:	b930      	cbnz	r0, 80092c0 <__d2b+0x24>
 80092b2:	4602      	mov	r2, r0
 80092b4:	4b25      	ldr	r3, [pc, #148]	; (800934c <__d2b+0xb0>)
 80092b6:	4826      	ldr	r0, [pc, #152]	; (8009350 <__d2b+0xb4>)
 80092b8:	f240 310a 	movw	r1, #778	; 0x30a
 80092bc:	f000 faac 	bl	8009818 <__assert_func>
 80092c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092c8:	bb35      	cbnz	r5, 8009318 <__d2b+0x7c>
 80092ca:	2e00      	cmp	r6, #0
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	d028      	beq.n	8009322 <__d2b+0x86>
 80092d0:	4668      	mov	r0, sp
 80092d2:	9600      	str	r6, [sp, #0]
 80092d4:	f7ff fd82 	bl	8008ddc <__lo0bits>
 80092d8:	9900      	ldr	r1, [sp, #0]
 80092da:	b300      	cbz	r0, 800931e <__d2b+0x82>
 80092dc:	9a01      	ldr	r2, [sp, #4]
 80092de:	f1c0 0320 	rsb	r3, r0, #32
 80092e2:	fa02 f303 	lsl.w	r3, r2, r3
 80092e6:	430b      	orrs	r3, r1
 80092e8:	40c2      	lsrs	r2, r0
 80092ea:	6163      	str	r3, [r4, #20]
 80092ec:	9201      	str	r2, [sp, #4]
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	61a3      	str	r3, [r4, #24]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bf14      	ite	ne
 80092f6:	2202      	movne	r2, #2
 80092f8:	2201      	moveq	r2, #1
 80092fa:	6122      	str	r2, [r4, #16]
 80092fc:	b1d5      	cbz	r5, 8009334 <__d2b+0x98>
 80092fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009302:	4405      	add	r5, r0
 8009304:	f8c9 5000 	str.w	r5, [r9]
 8009308:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800930c:	f8c8 0000 	str.w	r0, [r8]
 8009310:	4620      	mov	r0, r4
 8009312:	b003      	add	sp, #12
 8009314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800931c:	e7d5      	b.n	80092ca <__d2b+0x2e>
 800931e:	6161      	str	r1, [r4, #20]
 8009320:	e7e5      	b.n	80092ee <__d2b+0x52>
 8009322:	a801      	add	r0, sp, #4
 8009324:	f7ff fd5a 	bl	8008ddc <__lo0bits>
 8009328:	9b01      	ldr	r3, [sp, #4]
 800932a:	6163      	str	r3, [r4, #20]
 800932c:	2201      	movs	r2, #1
 800932e:	6122      	str	r2, [r4, #16]
 8009330:	3020      	adds	r0, #32
 8009332:	e7e3      	b.n	80092fc <__d2b+0x60>
 8009334:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009338:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800933c:	f8c9 0000 	str.w	r0, [r9]
 8009340:	6918      	ldr	r0, [r3, #16]
 8009342:	f7ff fd2b 	bl	8008d9c <__hi0bits>
 8009346:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800934a:	e7df      	b.n	800930c <__d2b+0x70>
 800934c:	0800c0c3 	.word	0x0800c0c3
 8009350:	0800c0d4 	.word	0x0800c0d4

08009354 <_calloc_r>:
 8009354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009356:	fba1 2402 	umull	r2, r4, r1, r2
 800935a:	b94c      	cbnz	r4, 8009370 <_calloc_r+0x1c>
 800935c:	4611      	mov	r1, r2
 800935e:	9201      	str	r2, [sp, #4]
 8009360:	f000 f87a 	bl	8009458 <_malloc_r>
 8009364:	9a01      	ldr	r2, [sp, #4]
 8009366:	4605      	mov	r5, r0
 8009368:	b930      	cbnz	r0, 8009378 <_calloc_r+0x24>
 800936a:	4628      	mov	r0, r5
 800936c:	b003      	add	sp, #12
 800936e:	bd30      	pop	{r4, r5, pc}
 8009370:	220c      	movs	r2, #12
 8009372:	6002      	str	r2, [r0, #0]
 8009374:	2500      	movs	r5, #0
 8009376:	e7f8      	b.n	800936a <_calloc_r+0x16>
 8009378:	4621      	mov	r1, r4
 800937a:	f7fe f93b 	bl	80075f4 <memset>
 800937e:	e7f4      	b.n	800936a <_calloc_r+0x16>

08009380 <_free_r>:
 8009380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009382:	2900      	cmp	r1, #0
 8009384:	d044      	beq.n	8009410 <_free_r+0x90>
 8009386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800938a:	9001      	str	r0, [sp, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f1a1 0404 	sub.w	r4, r1, #4
 8009392:	bfb8      	it	lt
 8009394:	18e4      	addlt	r4, r4, r3
 8009396:	f000 fa9b 	bl	80098d0 <__malloc_lock>
 800939a:	4a1e      	ldr	r2, [pc, #120]	; (8009414 <_free_r+0x94>)
 800939c:	9801      	ldr	r0, [sp, #4]
 800939e:	6813      	ldr	r3, [r2, #0]
 80093a0:	b933      	cbnz	r3, 80093b0 <_free_r+0x30>
 80093a2:	6063      	str	r3, [r4, #4]
 80093a4:	6014      	str	r4, [r2, #0]
 80093a6:	b003      	add	sp, #12
 80093a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093ac:	f000 ba96 	b.w	80098dc <__malloc_unlock>
 80093b0:	42a3      	cmp	r3, r4
 80093b2:	d908      	bls.n	80093c6 <_free_r+0x46>
 80093b4:	6825      	ldr	r5, [r4, #0]
 80093b6:	1961      	adds	r1, r4, r5
 80093b8:	428b      	cmp	r3, r1
 80093ba:	bf01      	itttt	eq
 80093bc:	6819      	ldreq	r1, [r3, #0]
 80093be:	685b      	ldreq	r3, [r3, #4]
 80093c0:	1949      	addeq	r1, r1, r5
 80093c2:	6021      	streq	r1, [r4, #0]
 80093c4:	e7ed      	b.n	80093a2 <_free_r+0x22>
 80093c6:	461a      	mov	r2, r3
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	b10b      	cbz	r3, 80093d0 <_free_r+0x50>
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	d9fa      	bls.n	80093c6 <_free_r+0x46>
 80093d0:	6811      	ldr	r1, [r2, #0]
 80093d2:	1855      	adds	r5, r2, r1
 80093d4:	42a5      	cmp	r5, r4
 80093d6:	d10b      	bne.n	80093f0 <_free_r+0x70>
 80093d8:	6824      	ldr	r4, [r4, #0]
 80093da:	4421      	add	r1, r4
 80093dc:	1854      	adds	r4, r2, r1
 80093de:	42a3      	cmp	r3, r4
 80093e0:	6011      	str	r1, [r2, #0]
 80093e2:	d1e0      	bne.n	80093a6 <_free_r+0x26>
 80093e4:	681c      	ldr	r4, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	6053      	str	r3, [r2, #4]
 80093ea:	4421      	add	r1, r4
 80093ec:	6011      	str	r1, [r2, #0]
 80093ee:	e7da      	b.n	80093a6 <_free_r+0x26>
 80093f0:	d902      	bls.n	80093f8 <_free_r+0x78>
 80093f2:	230c      	movs	r3, #12
 80093f4:	6003      	str	r3, [r0, #0]
 80093f6:	e7d6      	b.n	80093a6 <_free_r+0x26>
 80093f8:	6825      	ldr	r5, [r4, #0]
 80093fa:	1961      	adds	r1, r4, r5
 80093fc:	428b      	cmp	r3, r1
 80093fe:	bf04      	itt	eq
 8009400:	6819      	ldreq	r1, [r3, #0]
 8009402:	685b      	ldreq	r3, [r3, #4]
 8009404:	6063      	str	r3, [r4, #4]
 8009406:	bf04      	itt	eq
 8009408:	1949      	addeq	r1, r1, r5
 800940a:	6021      	streq	r1, [r4, #0]
 800940c:	6054      	str	r4, [r2, #4]
 800940e:	e7ca      	b.n	80093a6 <_free_r+0x26>
 8009410:	b003      	add	sp, #12
 8009412:	bd30      	pop	{r4, r5, pc}
 8009414:	200007a4 	.word	0x200007a4

08009418 <sbrk_aligned>:
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	4e0e      	ldr	r6, [pc, #56]	; (8009454 <sbrk_aligned+0x3c>)
 800941c:	460c      	mov	r4, r1
 800941e:	6831      	ldr	r1, [r6, #0]
 8009420:	4605      	mov	r5, r0
 8009422:	b911      	cbnz	r1, 800942a <sbrk_aligned+0x12>
 8009424:	f000 f9e8 	bl	80097f8 <_sbrk_r>
 8009428:	6030      	str	r0, [r6, #0]
 800942a:	4621      	mov	r1, r4
 800942c:	4628      	mov	r0, r5
 800942e:	f000 f9e3 	bl	80097f8 <_sbrk_r>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	d00a      	beq.n	800944c <sbrk_aligned+0x34>
 8009436:	1cc4      	adds	r4, r0, #3
 8009438:	f024 0403 	bic.w	r4, r4, #3
 800943c:	42a0      	cmp	r0, r4
 800943e:	d007      	beq.n	8009450 <sbrk_aligned+0x38>
 8009440:	1a21      	subs	r1, r4, r0
 8009442:	4628      	mov	r0, r5
 8009444:	f000 f9d8 	bl	80097f8 <_sbrk_r>
 8009448:	3001      	adds	r0, #1
 800944a:	d101      	bne.n	8009450 <sbrk_aligned+0x38>
 800944c:	f04f 34ff 	mov.w	r4, #4294967295
 8009450:	4620      	mov	r0, r4
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	200007a8 	.word	0x200007a8

08009458 <_malloc_r>:
 8009458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945c:	1ccd      	adds	r5, r1, #3
 800945e:	f025 0503 	bic.w	r5, r5, #3
 8009462:	3508      	adds	r5, #8
 8009464:	2d0c      	cmp	r5, #12
 8009466:	bf38      	it	cc
 8009468:	250c      	movcc	r5, #12
 800946a:	2d00      	cmp	r5, #0
 800946c:	4607      	mov	r7, r0
 800946e:	db01      	blt.n	8009474 <_malloc_r+0x1c>
 8009470:	42a9      	cmp	r1, r5
 8009472:	d905      	bls.n	8009480 <_malloc_r+0x28>
 8009474:	230c      	movs	r3, #12
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	2600      	movs	r6, #0
 800947a:	4630      	mov	r0, r6
 800947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009480:	4e2e      	ldr	r6, [pc, #184]	; (800953c <_malloc_r+0xe4>)
 8009482:	f000 fa25 	bl	80098d0 <__malloc_lock>
 8009486:	6833      	ldr	r3, [r6, #0]
 8009488:	461c      	mov	r4, r3
 800948a:	bb34      	cbnz	r4, 80094da <_malloc_r+0x82>
 800948c:	4629      	mov	r1, r5
 800948e:	4638      	mov	r0, r7
 8009490:	f7ff ffc2 	bl	8009418 <sbrk_aligned>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	4604      	mov	r4, r0
 8009498:	d14d      	bne.n	8009536 <_malloc_r+0xde>
 800949a:	6834      	ldr	r4, [r6, #0]
 800949c:	4626      	mov	r6, r4
 800949e:	2e00      	cmp	r6, #0
 80094a0:	d140      	bne.n	8009524 <_malloc_r+0xcc>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	4631      	mov	r1, r6
 80094a6:	4638      	mov	r0, r7
 80094a8:	eb04 0803 	add.w	r8, r4, r3
 80094ac:	f000 f9a4 	bl	80097f8 <_sbrk_r>
 80094b0:	4580      	cmp	r8, r0
 80094b2:	d13a      	bne.n	800952a <_malloc_r+0xd2>
 80094b4:	6821      	ldr	r1, [r4, #0]
 80094b6:	3503      	adds	r5, #3
 80094b8:	1a6d      	subs	r5, r5, r1
 80094ba:	f025 0503 	bic.w	r5, r5, #3
 80094be:	3508      	adds	r5, #8
 80094c0:	2d0c      	cmp	r5, #12
 80094c2:	bf38      	it	cc
 80094c4:	250c      	movcc	r5, #12
 80094c6:	4629      	mov	r1, r5
 80094c8:	4638      	mov	r0, r7
 80094ca:	f7ff ffa5 	bl	8009418 <sbrk_aligned>
 80094ce:	3001      	adds	r0, #1
 80094d0:	d02b      	beq.n	800952a <_malloc_r+0xd2>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	442b      	add	r3, r5
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	e00e      	b.n	80094f8 <_malloc_r+0xa0>
 80094da:	6822      	ldr	r2, [r4, #0]
 80094dc:	1b52      	subs	r2, r2, r5
 80094de:	d41e      	bmi.n	800951e <_malloc_r+0xc6>
 80094e0:	2a0b      	cmp	r2, #11
 80094e2:	d916      	bls.n	8009512 <_malloc_r+0xba>
 80094e4:	1961      	adds	r1, r4, r5
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	6025      	str	r5, [r4, #0]
 80094ea:	bf18      	it	ne
 80094ec:	6059      	strne	r1, [r3, #4]
 80094ee:	6863      	ldr	r3, [r4, #4]
 80094f0:	bf08      	it	eq
 80094f2:	6031      	streq	r1, [r6, #0]
 80094f4:	5162      	str	r2, [r4, r5]
 80094f6:	604b      	str	r3, [r1, #4]
 80094f8:	4638      	mov	r0, r7
 80094fa:	f104 060b 	add.w	r6, r4, #11
 80094fe:	f000 f9ed 	bl	80098dc <__malloc_unlock>
 8009502:	f026 0607 	bic.w	r6, r6, #7
 8009506:	1d23      	adds	r3, r4, #4
 8009508:	1af2      	subs	r2, r6, r3
 800950a:	d0b6      	beq.n	800947a <_malloc_r+0x22>
 800950c:	1b9b      	subs	r3, r3, r6
 800950e:	50a3      	str	r3, [r4, r2]
 8009510:	e7b3      	b.n	800947a <_malloc_r+0x22>
 8009512:	6862      	ldr	r2, [r4, #4]
 8009514:	42a3      	cmp	r3, r4
 8009516:	bf0c      	ite	eq
 8009518:	6032      	streq	r2, [r6, #0]
 800951a:	605a      	strne	r2, [r3, #4]
 800951c:	e7ec      	b.n	80094f8 <_malloc_r+0xa0>
 800951e:	4623      	mov	r3, r4
 8009520:	6864      	ldr	r4, [r4, #4]
 8009522:	e7b2      	b.n	800948a <_malloc_r+0x32>
 8009524:	4634      	mov	r4, r6
 8009526:	6876      	ldr	r6, [r6, #4]
 8009528:	e7b9      	b.n	800949e <_malloc_r+0x46>
 800952a:	230c      	movs	r3, #12
 800952c:	603b      	str	r3, [r7, #0]
 800952e:	4638      	mov	r0, r7
 8009530:	f000 f9d4 	bl	80098dc <__malloc_unlock>
 8009534:	e7a1      	b.n	800947a <_malloc_r+0x22>
 8009536:	6025      	str	r5, [r4, #0]
 8009538:	e7de      	b.n	80094f8 <_malloc_r+0xa0>
 800953a:	bf00      	nop
 800953c:	200007a4 	.word	0x200007a4

08009540 <__ssputs_r>:
 8009540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009544:	688e      	ldr	r6, [r1, #8]
 8009546:	429e      	cmp	r6, r3
 8009548:	4682      	mov	sl, r0
 800954a:	460c      	mov	r4, r1
 800954c:	4690      	mov	r8, r2
 800954e:	461f      	mov	r7, r3
 8009550:	d838      	bhi.n	80095c4 <__ssputs_r+0x84>
 8009552:	898a      	ldrh	r2, [r1, #12]
 8009554:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009558:	d032      	beq.n	80095c0 <__ssputs_r+0x80>
 800955a:	6825      	ldr	r5, [r4, #0]
 800955c:	6909      	ldr	r1, [r1, #16]
 800955e:	eba5 0901 	sub.w	r9, r5, r1
 8009562:	6965      	ldr	r5, [r4, #20]
 8009564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800956c:	3301      	adds	r3, #1
 800956e:	444b      	add	r3, r9
 8009570:	106d      	asrs	r5, r5, #1
 8009572:	429d      	cmp	r5, r3
 8009574:	bf38      	it	cc
 8009576:	461d      	movcc	r5, r3
 8009578:	0553      	lsls	r3, r2, #21
 800957a:	d531      	bpl.n	80095e0 <__ssputs_r+0xa0>
 800957c:	4629      	mov	r1, r5
 800957e:	f7ff ff6b 	bl	8009458 <_malloc_r>
 8009582:	4606      	mov	r6, r0
 8009584:	b950      	cbnz	r0, 800959c <__ssputs_r+0x5c>
 8009586:	230c      	movs	r3, #12
 8009588:	f8ca 3000 	str.w	r3, [sl]
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	f04f 30ff 	mov.w	r0, #4294967295
 8009598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800959c:	6921      	ldr	r1, [r4, #16]
 800959e:	464a      	mov	r2, r9
 80095a0:	f7fe f81a 	bl	80075d8 <memcpy>
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	6126      	str	r6, [r4, #16]
 80095b2:	6165      	str	r5, [r4, #20]
 80095b4:	444e      	add	r6, r9
 80095b6:	eba5 0509 	sub.w	r5, r5, r9
 80095ba:	6026      	str	r6, [r4, #0]
 80095bc:	60a5      	str	r5, [r4, #8]
 80095be:	463e      	mov	r6, r7
 80095c0:	42be      	cmp	r6, r7
 80095c2:	d900      	bls.n	80095c6 <__ssputs_r+0x86>
 80095c4:	463e      	mov	r6, r7
 80095c6:	6820      	ldr	r0, [r4, #0]
 80095c8:	4632      	mov	r2, r6
 80095ca:	4641      	mov	r1, r8
 80095cc:	f000 f966 	bl	800989c <memmove>
 80095d0:	68a3      	ldr	r3, [r4, #8]
 80095d2:	1b9b      	subs	r3, r3, r6
 80095d4:	60a3      	str	r3, [r4, #8]
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	4433      	add	r3, r6
 80095da:	6023      	str	r3, [r4, #0]
 80095dc:	2000      	movs	r0, #0
 80095de:	e7db      	b.n	8009598 <__ssputs_r+0x58>
 80095e0:	462a      	mov	r2, r5
 80095e2:	f000 f981 	bl	80098e8 <_realloc_r>
 80095e6:	4606      	mov	r6, r0
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d1e1      	bne.n	80095b0 <__ssputs_r+0x70>
 80095ec:	6921      	ldr	r1, [r4, #16]
 80095ee:	4650      	mov	r0, sl
 80095f0:	f7ff fec6 	bl	8009380 <_free_r>
 80095f4:	e7c7      	b.n	8009586 <__ssputs_r+0x46>
	...

080095f8 <_svfiprintf_r>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	4698      	mov	r8, r3
 80095fe:	898b      	ldrh	r3, [r1, #12]
 8009600:	061b      	lsls	r3, r3, #24
 8009602:	b09d      	sub	sp, #116	; 0x74
 8009604:	4607      	mov	r7, r0
 8009606:	460d      	mov	r5, r1
 8009608:	4614      	mov	r4, r2
 800960a:	d50e      	bpl.n	800962a <_svfiprintf_r+0x32>
 800960c:	690b      	ldr	r3, [r1, #16]
 800960e:	b963      	cbnz	r3, 800962a <_svfiprintf_r+0x32>
 8009610:	2140      	movs	r1, #64	; 0x40
 8009612:	f7ff ff21 	bl	8009458 <_malloc_r>
 8009616:	6028      	str	r0, [r5, #0]
 8009618:	6128      	str	r0, [r5, #16]
 800961a:	b920      	cbnz	r0, 8009626 <_svfiprintf_r+0x2e>
 800961c:	230c      	movs	r3, #12
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	e0d1      	b.n	80097ca <_svfiprintf_r+0x1d2>
 8009626:	2340      	movs	r3, #64	; 0x40
 8009628:	616b      	str	r3, [r5, #20]
 800962a:	2300      	movs	r3, #0
 800962c:	9309      	str	r3, [sp, #36]	; 0x24
 800962e:	2320      	movs	r3, #32
 8009630:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009634:	f8cd 800c 	str.w	r8, [sp, #12]
 8009638:	2330      	movs	r3, #48	; 0x30
 800963a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097e4 <_svfiprintf_r+0x1ec>
 800963e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009642:	f04f 0901 	mov.w	r9, #1
 8009646:	4623      	mov	r3, r4
 8009648:	469a      	mov	sl, r3
 800964a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800964e:	b10a      	cbz	r2, 8009654 <_svfiprintf_r+0x5c>
 8009650:	2a25      	cmp	r2, #37	; 0x25
 8009652:	d1f9      	bne.n	8009648 <_svfiprintf_r+0x50>
 8009654:	ebba 0b04 	subs.w	fp, sl, r4
 8009658:	d00b      	beq.n	8009672 <_svfiprintf_r+0x7a>
 800965a:	465b      	mov	r3, fp
 800965c:	4622      	mov	r2, r4
 800965e:	4629      	mov	r1, r5
 8009660:	4638      	mov	r0, r7
 8009662:	f7ff ff6d 	bl	8009540 <__ssputs_r>
 8009666:	3001      	adds	r0, #1
 8009668:	f000 80aa 	beq.w	80097c0 <_svfiprintf_r+0x1c8>
 800966c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800966e:	445a      	add	r2, fp
 8009670:	9209      	str	r2, [sp, #36]	; 0x24
 8009672:	f89a 3000 	ldrb.w	r3, [sl]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 80a2 	beq.w	80097c0 <_svfiprintf_r+0x1c8>
 800967c:	2300      	movs	r3, #0
 800967e:	f04f 32ff 	mov.w	r2, #4294967295
 8009682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009686:	f10a 0a01 	add.w	sl, sl, #1
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	9307      	str	r3, [sp, #28]
 800968e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009692:	931a      	str	r3, [sp, #104]	; 0x68
 8009694:	4654      	mov	r4, sl
 8009696:	2205      	movs	r2, #5
 8009698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969c:	4851      	ldr	r0, [pc, #324]	; (80097e4 <_svfiprintf_r+0x1ec>)
 800969e:	f7f6 fd9f 	bl	80001e0 <memchr>
 80096a2:	9a04      	ldr	r2, [sp, #16]
 80096a4:	b9d8      	cbnz	r0, 80096de <_svfiprintf_r+0xe6>
 80096a6:	06d0      	lsls	r0, r2, #27
 80096a8:	bf44      	itt	mi
 80096aa:	2320      	movmi	r3, #32
 80096ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096b0:	0711      	lsls	r1, r2, #28
 80096b2:	bf44      	itt	mi
 80096b4:	232b      	movmi	r3, #43	; 0x2b
 80096b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ba:	f89a 3000 	ldrb.w	r3, [sl]
 80096be:	2b2a      	cmp	r3, #42	; 0x2a
 80096c0:	d015      	beq.n	80096ee <_svfiprintf_r+0xf6>
 80096c2:	9a07      	ldr	r2, [sp, #28]
 80096c4:	4654      	mov	r4, sl
 80096c6:	2000      	movs	r0, #0
 80096c8:	f04f 0c0a 	mov.w	ip, #10
 80096cc:	4621      	mov	r1, r4
 80096ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096d2:	3b30      	subs	r3, #48	; 0x30
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	d94e      	bls.n	8009776 <_svfiprintf_r+0x17e>
 80096d8:	b1b0      	cbz	r0, 8009708 <_svfiprintf_r+0x110>
 80096da:	9207      	str	r2, [sp, #28]
 80096dc:	e014      	b.n	8009708 <_svfiprintf_r+0x110>
 80096de:	eba0 0308 	sub.w	r3, r0, r8
 80096e2:	fa09 f303 	lsl.w	r3, r9, r3
 80096e6:	4313      	orrs	r3, r2
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	46a2      	mov	sl, r4
 80096ec:	e7d2      	b.n	8009694 <_svfiprintf_r+0x9c>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	1d19      	adds	r1, r3, #4
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	9103      	str	r1, [sp, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	bfbb      	ittet	lt
 80096fa:	425b      	neglt	r3, r3
 80096fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009700:	9307      	strge	r3, [sp, #28]
 8009702:	9307      	strlt	r3, [sp, #28]
 8009704:	bfb8      	it	lt
 8009706:	9204      	strlt	r2, [sp, #16]
 8009708:	7823      	ldrb	r3, [r4, #0]
 800970a:	2b2e      	cmp	r3, #46	; 0x2e
 800970c:	d10c      	bne.n	8009728 <_svfiprintf_r+0x130>
 800970e:	7863      	ldrb	r3, [r4, #1]
 8009710:	2b2a      	cmp	r3, #42	; 0x2a
 8009712:	d135      	bne.n	8009780 <_svfiprintf_r+0x188>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	1d1a      	adds	r2, r3, #4
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	9203      	str	r2, [sp, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	bfb8      	it	lt
 8009720:	f04f 33ff 	movlt.w	r3, #4294967295
 8009724:	3402      	adds	r4, #2
 8009726:	9305      	str	r3, [sp, #20]
 8009728:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097f4 <_svfiprintf_r+0x1fc>
 800972c:	7821      	ldrb	r1, [r4, #0]
 800972e:	2203      	movs	r2, #3
 8009730:	4650      	mov	r0, sl
 8009732:	f7f6 fd55 	bl	80001e0 <memchr>
 8009736:	b140      	cbz	r0, 800974a <_svfiprintf_r+0x152>
 8009738:	2340      	movs	r3, #64	; 0x40
 800973a:	eba0 000a 	sub.w	r0, r0, sl
 800973e:	fa03 f000 	lsl.w	r0, r3, r0
 8009742:	9b04      	ldr	r3, [sp, #16]
 8009744:	4303      	orrs	r3, r0
 8009746:	3401      	adds	r4, #1
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800974e:	4826      	ldr	r0, [pc, #152]	; (80097e8 <_svfiprintf_r+0x1f0>)
 8009750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009754:	2206      	movs	r2, #6
 8009756:	f7f6 fd43 	bl	80001e0 <memchr>
 800975a:	2800      	cmp	r0, #0
 800975c:	d038      	beq.n	80097d0 <_svfiprintf_r+0x1d8>
 800975e:	4b23      	ldr	r3, [pc, #140]	; (80097ec <_svfiprintf_r+0x1f4>)
 8009760:	bb1b      	cbnz	r3, 80097aa <_svfiprintf_r+0x1b2>
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	3307      	adds	r3, #7
 8009766:	f023 0307 	bic.w	r3, r3, #7
 800976a:	3308      	adds	r3, #8
 800976c:	9303      	str	r3, [sp, #12]
 800976e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009770:	4433      	add	r3, r6
 8009772:	9309      	str	r3, [sp, #36]	; 0x24
 8009774:	e767      	b.n	8009646 <_svfiprintf_r+0x4e>
 8009776:	fb0c 3202 	mla	r2, ip, r2, r3
 800977a:	460c      	mov	r4, r1
 800977c:	2001      	movs	r0, #1
 800977e:	e7a5      	b.n	80096cc <_svfiprintf_r+0xd4>
 8009780:	2300      	movs	r3, #0
 8009782:	3401      	adds	r4, #1
 8009784:	9305      	str	r3, [sp, #20]
 8009786:	4619      	mov	r1, r3
 8009788:	f04f 0c0a 	mov.w	ip, #10
 800978c:	4620      	mov	r0, r4
 800978e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009792:	3a30      	subs	r2, #48	; 0x30
 8009794:	2a09      	cmp	r2, #9
 8009796:	d903      	bls.n	80097a0 <_svfiprintf_r+0x1a8>
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0c5      	beq.n	8009728 <_svfiprintf_r+0x130>
 800979c:	9105      	str	r1, [sp, #20]
 800979e:	e7c3      	b.n	8009728 <_svfiprintf_r+0x130>
 80097a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097a4:	4604      	mov	r4, r0
 80097a6:	2301      	movs	r3, #1
 80097a8:	e7f0      	b.n	800978c <_svfiprintf_r+0x194>
 80097aa:	ab03      	add	r3, sp, #12
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	462a      	mov	r2, r5
 80097b0:	4b0f      	ldr	r3, [pc, #60]	; (80097f0 <_svfiprintf_r+0x1f8>)
 80097b2:	a904      	add	r1, sp, #16
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7fd ffc5 	bl	8007744 <_printf_float>
 80097ba:	1c42      	adds	r2, r0, #1
 80097bc:	4606      	mov	r6, r0
 80097be:	d1d6      	bne.n	800976e <_svfiprintf_r+0x176>
 80097c0:	89ab      	ldrh	r3, [r5, #12]
 80097c2:	065b      	lsls	r3, r3, #25
 80097c4:	f53f af2c 	bmi.w	8009620 <_svfiprintf_r+0x28>
 80097c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ca:	b01d      	add	sp, #116	; 0x74
 80097cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d0:	ab03      	add	r3, sp, #12
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	462a      	mov	r2, r5
 80097d6:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <_svfiprintf_r+0x1f8>)
 80097d8:	a904      	add	r1, sp, #16
 80097da:	4638      	mov	r0, r7
 80097dc:	f7fe fa56 	bl	8007c8c <_printf_i>
 80097e0:	e7eb      	b.n	80097ba <_svfiprintf_r+0x1c2>
 80097e2:	bf00      	nop
 80097e4:	0800c22c 	.word	0x0800c22c
 80097e8:	0800c236 	.word	0x0800c236
 80097ec:	08007745 	.word	0x08007745
 80097f0:	08009541 	.word	0x08009541
 80097f4:	0800c232 	.word	0x0800c232

080097f8 <_sbrk_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d06      	ldr	r5, [pc, #24]	; (8009814 <_sbrk_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7f8 fe68 	bl	80024d8 <_sbrk>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_sbrk_r+0x1a>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_sbrk_r+0x1a>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	200007ac 	.word	0x200007ac

08009818 <__assert_func>:
 8009818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800981a:	4614      	mov	r4, r2
 800981c:	461a      	mov	r2, r3
 800981e:	4b09      	ldr	r3, [pc, #36]	; (8009844 <__assert_func+0x2c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4605      	mov	r5, r0
 8009824:	68d8      	ldr	r0, [r3, #12]
 8009826:	b14c      	cbz	r4, 800983c <__assert_func+0x24>
 8009828:	4b07      	ldr	r3, [pc, #28]	; (8009848 <__assert_func+0x30>)
 800982a:	9100      	str	r1, [sp, #0]
 800982c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009830:	4906      	ldr	r1, [pc, #24]	; (800984c <__assert_func+0x34>)
 8009832:	462b      	mov	r3, r5
 8009834:	f000 f80e 	bl	8009854 <fiprintf>
 8009838:	f000 faac 	bl	8009d94 <abort>
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <__assert_func+0x38>)
 800983e:	461c      	mov	r4, r3
 8009840:	e7f3      	b.n	800982a <__assert_func+0x12>
 8009842:	bf00      	nop
 8009844:	2000001c 	.word	0x2000001c
 8009848:	0800c23d 	.word	0x0800c23d
 800984c:	0800c24a 	.word	0x0800c24a
 8009850:	0800c278 	.word	0x0800c278

08009854 <fiprintf>:
 8009854:	b40e      	push	{r1, r2, r3}
 8009856:	b503      	push	{r0, r1, lr}
 8009858:	4601      	mov	r1, r0
 800985a:	ab03      	add	r3, sp, #12
 800985c:	4805      	ldr	r0, [pc, #20]	; (8009874 <fiprintf+0x20>)
 800985e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009862:	6800      	ldr	r0, [r0, #0]
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	f000 f897 	bl	8009998 <_vfiprintf_r>
 800986a:	b002      	add	sp, #8
 800986c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009870:	b003      	add	sp, #12
 8009872:	4770      	bx	lr
 8009874:	2000001c 	.word	0x2000001c

08009878 <__ascii_mbtowc>:
 8009878:	b082      	sub	sp, #8
 800987a:	b901      	cbnz	r1, 800987e <__ascii_mbtowc+0x6>
 800987c:	a901      	add	r1, sp, #4
 800987e:	b142      	cbz	r2, 8009892 <__ascii_mbtowc+0x1a>
 8009880:	b14b      	cbz	r3, 8009896 <__ascii_mbtowc+0x1e>
 8009882:	7813      	ldrb	r3, [r2, #0]
 8009884:	600b      	str	r3, [r1, #0]
 8009886:	7812      	ldrb	r2, [r2, #0]
 8009888:	1e10      	subs	r0, r2, #0
 800988a:	bf18      	it	ne
 800988c:	2001      	movne	r0, #1
 800988e:	b002      	add	sp, #8
 8009890:	4770      	bx	lr
 8009892:	4610      	mov	r0, r2
 8009894:	e7fb      	b.n	800988e <__ascii_mbtowc+0x16>
 8009896:	f06f 0001 	mvn.w	r0, #1
 800989a:	e7f8      	b.n	800988e <__ascii_mbtowc+0x16>

0800989c <memmove>:
 800989c:	4288      	cmp	r0, r1
 800989e:	b510      	push	{r4, lr}
 80098a0:	eb01 0402 	add.w	r4, r1, r2
 80098a4:	d902      	bls.n	80098ac <memmove+0x10>
 80098a6:	4284      	cmp	r4, r0
 80098a8:	4623      	mov	r3, r4
 80098aa:	d807      	bhi.n	80098bc <memmove+0x20>
 80098ac:	1e43      	subs	r3, r0, #1
 80098ae:	42a1      	cmp	r1, r4
 80098b0:	d008      	beq.n	80098c4 <memmove+0x28>
 80098b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ba:	e7f8      	b.n	80098ae <memmove+0x12>
 80098bc:	4402      	add	r2, r0
 80098be:	4601      	mov	r1, r0
 80098c0:	428a      	cmp	r2, r1
 80098c2:	d100      	bne.n	80098c6 <memmove+0x2a>
 80098c4:	bd10      	pop	{r4, pc}
 80098c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098ce:	e7f7      	b.n	80098c0 <memmove+0x24>

080098d0 <__malloc_lock>:
 80098d0:	4801      	ldr	r0, [pc, #4]	; (80098d8 <__malloc_lock+0x8>)
 80098d2:	f000 bc1f 	b.w	800a114 <__retarget_lock_acquire_recursive>
 80098d6:	bf00      	nop
 80098d8:	200007b0 	.word	0x200007b0

080098dc <__malloc_unlock>:
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <__malloc_unlock+0x8>)
 80098de:	f000 bc1a 	b.w	800a116 <__retarget_lock_release_recursive>
 80098e2:	bf00      	nop
 80098e4:	200007b0 	.word	0x200007b0

080098e8 <_realloc_r>:
 80098e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ec:	4680      	mov	r8, r0
 80098ee:	4614      	mov	r4, r2
 80098f0:	460e      	mov	r6, r1
 80098f2:	b921      	cbnz	r1, 80098fe <_realloc_r+0x16>
 80098f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098f8:	4611      	mov	r1, r2
 80098fa:	f7ff bdad 	b.w	8009458 <_malloc_r>
 80098fe:	b92a      	cbnz	r2, 800990c <_realloc_r+0x24>
 8009900:	f7ff fd3e 	bl	8009380 <_free_r>
 8009904:	4625      	mov	r5, r4
 8009906:	4628      	mov	r0, r5
 8009908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990c:	f000 fc6a 	bl	800a1e4 <_malloc_usable_size_r>
 8009910:	4284      	cmp	r4, r0
 8009912:	4607      	mov	r7, r0
 8009914:	d802      	bhi.n	800991c <_realloc_r+0x34>
 8009916:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800991a:	d812      	bhi.n	8009942 <_realloc_r+0x5a>
 800991c:	4621      	mov	r1, r4
 800991e:	4640      	mov	r0, r8
 8009920:	f7ff fd9a 	bl	8009458 <_malloc_r>
 8009924:	4605      	mov	r5, r0
 8009926:	2800      	cmp	r0, #0
 8009928:	d0ed      	beq.n	8009906 <_realloc_r+0x1e>
 800992a:	42bc      	cmp	r4, r7
 800992c:	4622      	mov	r2, r4
 800992e:	4631      	mov	r1, r6
 8009930:	bf28      	it	cs
 8009932:	463a      	movcs	r2, r7
 8009934:	f7fd fe50 	bl	80075d8 <memcpy>
 8009938:	4631      	mov	r1, r6
 800993a:	4640      	mov	r0, r8
 800993c:	f7ff fd20 	bl	8009380 <_free_r>
 8009940:	e7e1      	b.n	8009906 <_realloc_r+0x1e>
 8009942:	4635      	mov	r5, r6
 8009944:	e7df      	b.n	8009906 <_realloc_r+0x1e>

08009946 <__sfputc_r>:
 8009946:	6893      	ldr	r3, [r2, #8]
 8009948:	3b01      	subs	r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	b410      	push	{r4}
 800994e:	6093      	str	r3, [r2, #8]
 8009950:	da08      	bge.n	8009964 <__sfputc_r+0x1e>
 8009952:	6994      	ldr	r4, [r2, #24]
 8009954:	42a3      	cmp	r3, r4
 8009956:	db01      	blt.n	800995c <__sfputc_r+0x16>
 8009958:	290a      	cmp	r1, #10
 800995a:	d103      	bne.n	8009964 <__sfputc_r+0x1e>
 800995c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009960:	f000 b94a 	b.w	8009bf8 <__swbuf_r>
 8009964:	6813      	ldr	r3, [r2, #0]
 8009966:	1c58      	adds	r0, r3, #1
 8009968:	6010      	str	r0, [r2, #0]
 800996a:	7019      	strb	r1, [r3, #0]
 800996c:	4608      	mov	r0, r1
 800996e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009972:	4770      	bx	lr

08009974 <__sfputs_r>:
 8009974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009976:	4606      	mov	r6, r0
 8009978:	460f      	mov	r7, r1
 800997a:	4614      	mov	r4, r2
 800997c:	18d5      	adds	r5, r2, r3
 800997e:	42ac      	cmp	r4, r5
 8009980:	d101      	bne.n	8009986 <__sfputs_r+0x12>
 8009982:	2000      	movs	r0, #0
 8009984:	e007      	b.n	8009996 <__sfputs_r+0x22>
 8009986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998a:	463a      	mov	r2, r7
 800998c:	4630      	mov	r0, r6
 800998e:	f7ff ffda 	bl	8009946 <__sfputc_r>
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	d1f3      	bne.n	800997e <__sfputs_r+0xa>
 8009996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009998 <_vfiprintf_r>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	460d      	mov	r5, r1
 800999e:	b09d      	sub	sp, #116	; 0x74
 80099a0:	4614      	mov	r4, r2
 80099a2:	4698      	mov	r8, r3
 80099a4:	4606      	mov	r6, r0
 80099a6:	b118      	cbz	r0, 80099b0 <_vfiprintf_r+0x18>
 80099a8:	6983      	ldr	r3, [r0, #24]
 80099aa:	b90b      	cbnz	r3, 80099b0 <_vfiprintf_r+0x18>
 80099ac:	f000 fb14 	bl	8009fd8 <__sinit>
 80099b0:	4b89      	ldr	r3, [pc, #548]	; (8009bd8 <_vfiprintf_r+0x240>)
 80099b2:	429d      	cmp	r5, r3
 80099b4:	d11b      	bne.n	80099ee <_vfiprintf_r+0x56>
 80099b6:	6875      	ldr	r5, [r6, #4]
 80099b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ba:	07d9      	lsls	r1, r3, #31
 80099bc:	d405      	bmi.n	80099ca <_vfiprintf_r+0x32>
 80099be:	89ab      	ldrh	r3, [r5, #12]
 80099c0:	059a      	lsls	r2, r3, #22
 80099c2:	d402      	bmi.n	80099ca <_vfiprintf_r+0x32>
 80099c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099c6:	f000 fba5 	bl	800a114 <__retarget_lock_acquire_recursive>
 80099ca:	89ab      	ldrh	r3, [r5, #12]
 80099cc:	071b      	lsls	r3, r3, #28
 80099ce:	d501      	bpl.n	80099d4 <_vfiprintf_r+0x3c>
 80099d0:	692b      	ldr	r3, [r5, #16]
 80099d2:	b9eb      	cbnz	r3, 8009a10 <_vfiprintf_r+0x78>
 80099d4:	4629      	mov	r1, r5
 80099d6:	4630      	mov	r0, r6
 80099d8:	f000 f96e 	bl	8009cb8 <__swsetup_r>
 80099dc:	b1c0      	cbz	r0, 8009a10 <_vfiprintf_r+0x78>
 80099de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099e0:	07dc      	lsls	r4, r3, #31
 80099e2:	d50e      	bpl.n	8009a02 <_vfiprintf_r+0x6a>
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	b01d      	add	sp, #116	; 0x74
 80099ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ee:	4b7b      	ldr	r3, [pc, #492]	; (8009bdc <_vfiprintf_r+0x244>)
 80099f0:	429d      	cmp	r5, r3
 80099f2:	d101      	bne.n	80099f8 <_vfiprintf_r+0x60>
 80099f4:	68b5      	ldr	r5, [r6, #8]
 80099f6:	e7df      	b.n	80099b8 <_vfiprintf_r+0x20>
 80099f8:	4b79      	ldr	r3, [pc, #484]	; (8009be0 <_vfiprintf_r+0x248>)
 80099fa:	429d      	cmp	r5, r3
 80099fc:	bf08      	it	eq
 80099fe:	68f5      	ldreq	r5, [r6, #12]
 8009a00:	e7da      	b.n	80099b8 <_vfiprintf_r+0x20>
 8009a02:	89ab      	ldrh	r3, [r5, #12]
 8009a04:	0598      	lsls	r0, r3, #22
 8009a06:	d4ed      	bmi.n	80099e4 <_vfiprintf_r+0x4c>
 8009a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a0a:	f000 fb84 	bl	800a116 <__retarget_lock_release_recursive>
 8009a0e:	e7e9      	b.n	80099e4 <_vfiprintf_r+0x4c>
 8009a10:	2300      	movs	r3, #0
 8009a12:	9309      	str	r3, [sp, #36]	; 0x24
 8009a14:	2320      	movs	r3, #32
 8009a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a1e:	2330      	movs	r3, #48	; 0x30
 8009a20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009be4 <_vfiprintf_r+0x24c>
 8009a24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a28:	f04f 0901 	mov.w	r9, #1
 8009a2c:	4623      	mov	r3, r4
 8009a2e:	469a      	mov	sl, r3
 8009a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a34:	b10a      	cbz	r2, 8009a3a <_vfiprintf_r+0xa2>
 8009a36:	2a25      	cmp	r2, #37	; 0x25
 8009a38:	d1f9      	bne.n	8009a2e <_vfiprintf_r+0x96>
 8009a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009a3e:	d00b      	beq.n	8009a58 <_vfiprintf_r+0xc0>
 8009a40:	465b      	mov	r3, fp
 8009a42:	4622      	mov	r2, r4
 8009a44:	4629      	mov	r1, r5
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7ff ff94 	bl	8009974 <__sfputs_r>
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f000 80aa 	beq.w	8009ba6 <_vfiprintf_r+0x20e>
 8009a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a54:	445a      	add	r2, fp
 8009a56:	9209      	str	r2, [sp, #36]	; 0x24
 8009a58:	f89a 3000 	ldrb.w	r3, [sl]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f000 80a2 	beq.w	8009ba6 <_vfiprintf_r+0x20e>
 8009a62:	2300      	movs	r3, #0
 8009a64:	f04f 32ff 	mov.w	r2, #4294967295
 8009a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a6c:	f10a 0a01 	add.w	sl, sl, #1
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	9307      	str	r3, [sp, #28]
 8009a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a78:	931a      	str	r3, [sp, #104]	; 0x68
 8009a7a:	4654      	mov	r4, sl
 8009a7c:	2205      	movs	r2, #5
 8009a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a82:	4858      	ldr	r0, [pc, #352]	; (8009be4 <_vfiprintf_r+0x24c>)
 8009a84:	f7f6 fbac 	bl	80001e0 <memchr>
 8009a88:	9a04      	ldr	r2, [sp, #16]
 8009a8a:	b9d8      	cbnz	r0, 8009ac4 <_vfiprintf_r+0x12c>
 8009a8c:	06d1      	lsls	r1, r2, #27
 8009a8e:	bf44      	itt	mi
 8009a90:	2320      	movmi	r3, #32
 8009a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a96:	0713      	lsls	r3, r2, #28
 8009a98:	bf44      	itt	mi
 8009a9a:	232b      	movmi	r3, #43	; 0x2b
 8009a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa6:	d015      	beq.n	8009ad4 <_vfiprintf_r+0x13c>
 8009aa8:	9a07      	ldr	r2, [sp, #28]
 8009aaa:	4654      	mov	r4, sl
 8009aac:	2000      	movs	r0, #0
 8009aae:	f04f 0c0a 	mov.w	ip, #10
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ab8:	3b30      	subs	r3, #48	; 0x30
 8009aba:	2b09      	cmp	r3, #9
 8009abc:	d94e      	bls.n	8009b5c <_vfiprintf_r+0x1c4>
 8009abe:	b1b0      	cbz	r0, 8009aee <_vfiprintf_r+0x156>
 8009ac0:	9207      	str	r2, [sp, #28]
 8009ac2:	e014      	b.n	8009aee <_vfiprintf_r+0x156>
 8009ac4:	eba0 0308 	sub.w	r3, r0, r8
 8009ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8009acc:	4313      	orrs	r3, r2
 8009ace:	9304      	str	r3, [sp, #16]
 8009ad0:	46a2      	mov	sl, r4
 8009ad2:	e7d2      	b.n	8009a7a <_vfiprintf_r+0xe2>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	1d19      	adds	r1, r3, #4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	9103      	str	r1, [sp, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	bfbb      	ittet	lt
 8009ae0:	425b      	neglt	r3, r3
 8009ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ae6:	9307      	strge	r3, [sp, #28]
 8009ae8:	9307      	strlt	r3, [sp, #28]
 8009aea:	bfb8      	it	lt
 8009aec:	9204      	strlt	r2, [sp, #16]
 8009aee:	7823      	ldrb	r3, [r4, #0]
 8009af0:	2b2e      	cmp	r3, #46	; 0x2e
 8009af2:	d10c      	bne.n	8009b0e <_vfiprintf_r+0x176>
 8009af4:	7863      	ldrb	r3, [r4, #1]
 8009af6:	2b2a      	cmp	r3, #42	; 0x2a
 8009af8:	d135      	bne.n	8009b66 <_vfiprintf_r+0x1ce>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	1d1a      	adds	r2, r3, #4
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	9203      	str	r2, [sp, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	bfb8      	it	lt
 8009b06:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b0a:	3402      	adds	r4, #2
 8009b0c:	9305      	str	r3, [sp, #20]
 8009b0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009bf4 <_vfiprintf_r+0x25c>
 8009b12:	7821      	ldrb	r1, [r4, #0]
 8009b14:	2203      	movs	r2, #3
 8009b16:	4650      	mov	r0, sl
 8009b18:	f7f6 fb62 	bl	80001e0 <memchr>
 8009b1c:	b140      	cbz	r0, 8009b30 <_vfiprintf_r+0x198>
 8009b1e:	2340      	movs	r3, #64	; 0x40
 8009b20:	eba0 000a 	sub.w	r0, r0, sl
 8009b24:	fa03 f000 	lsl.w	r0, r3, r0
 8009b28:	9b04      	ldr	r3, [sp, #16]
 8009b2a:	4303      	orrs	r3, r0
 8009b2c:	3401      	adds	r4, #1
 8009b2e:	9304      	str	r3, [sp, #16]
 8009b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b34:	482c      	ldr	r0, [pc, #176]	; (8009be8 <_vfiprintf_r+0x250>)
 8009b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b3a:	2206      	movs	r2, #6
 8009b3c:	f7f6 fb50 	bl	80001e0 <memchr>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d03f      	beq.n	8009bc4 <_vfiprintf_r+0x22c>
 8009b44:	4b29      	ldr	r3, [pc, #164]	; (8009bec <_vfiprintf_r+0x254>)
 8009b46:	bb1b      	cbnz	r3, 8009b90 <_vfiprintf_r+0x1f8>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	3307      	adds	r3, #7
 8009b4c:	f023 0307 	bic.w	r3, r3, #7
 8009b50:	3308      	adds	r3, #8
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b56:	443b      	add	r3, r7
 8009b58:	9309      	str	r3, [sp, #36]	; 0x24
 8009b5a:	e767      	b.n	8009a2c <_vfiprintf_r+0x94>
 8009b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b60:	460c      	mov	r4, r1
 8009b62:	2001      	movs	r0, #1
 8009b64:	e7a5      	b.n	8009ab2 <_vfiprintf_r+0x11a>
 8009b66:	2300      	movs	r3, #0
 8009b68:	3401      	adds	r4, #1
 8009b6a:	9305      	str	r3, [sp, #20]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	4620      	mov	r0, r4
 8009b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b78:	3a30      	subs	r2, #48	; 0x30
 8009b7a:	2a09      	cmp	r2, #9
 8009b7c:	d903      	bls.n	8009b86 <_vfiprintf_r+0x1ee>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0c5      	beq.n	8009b0e <_vfiprintf_r+0x176>
 8009b82:	9105      	str	r1, [sp, #20]
 8009b84:	e7c3      	b.n	8009b0e <_vfiprintf_r+0x176>
 8009b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e7f0      	b.n	8009b72 <_vfiprintf_r+0x1da>
 8009b90:	ab03      	add	r3, sp, #12
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	462a      	mov	r2, r5
 8009b96:	4b16      	ldr	r3, [pc, #88]	; (8009bf0 <_vfiprintf_r+0x258>)
 8009b98:	a904      	add	r1, sp, #16
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7fd fdd2 	bl	8007744 <_printf_float>
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	1c78      	adds	r0, r7, #1
 8009ba4:	d1d6      	bne.n	8009b54 <_vfiprintf_r+0x1bc>
 8009ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ba8:	07d9      	lsls	r1, r3, #31
 8009baa:	d405      	bmi.n	8009bb8 <_vfiprintf_r+0x220>
 8009bac:	89ab      	ldrh	r3, [r5, #12]
 8009bae:	059a      	lsls	r2, r3, #22
 8009bb0:	d402      	bmi.n	8009bb8 <_vfiprintf_r+0x220>
 8009bb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bb4:	f000 faaf 	bl	800a116 <__retarget_lock_release_recursive>
 8009bb8:	89ab      	ldrh	r3, [r5, #12]
 8009bba:	065b      	lsls	r3, r3, #25
 8009bbc:	f53f af12 	bmi.w	80099e4 <_vfiprintf_r+0x4c>
 8009bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bc2:	e711      	b.n	80099e8 <_vfiprintf_r+0x50>
 8009bc4:	ab03      	add	r3, sp, #12
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <_vfiprintf_r+0x258>)
 8009bcc:	a904      	add	r1, sp, #16
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7fe f85c 	bl	8007c8c <_printf_i>
 8009bd4:	e7e4      	b.n	8009ba0 <_vfiprintf_r+0x208>
 8009bd6:	bf00      	nop
 8009bd8:	0800c3a4 	.word	0x0800c3a4
 8009bdc:	0800c3c4 	.word	0x0800c3c4
 8009be0:	0800c384 	.word	0x0800c384
 8009be4:	0800c22c 	.word	0x0800c22c
 8009be8:	0800c236 	.word	0x0800c236
 8009bec:	08007745 	.word	0x08007745
 8009bf0:	08009975 	.word	0x08009975
 8009bf4:	0800c232 	.word	0x0800c232

08009bf8 <__swbuf_r>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	460e      	mov	r6, r1
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	4605      	mov	r5, r0
 8009c00:	b118      	cbz	r0, 8009c0a <__swbuf_r+0x12>
 8009c02:	6983      	ldr	r3, [r0, #24]
 8009c04:	b90b      	cbnz	r3, 8009c0a <__swbuf_r+0x12>
 8009c06:	f000 f9e7 	bl	8009fd8 <__sinit>
 8009c0a:	4b21      	ldr	r3, [pc, #132]	; (8009c90 <__swbuf_r+0x98>)
 8009c0c:	429c      	cmp	r4, r3
 8009c0e:	d12b      	bne.n	8009c68 <__swbuf_r+0x70>
 8009c10:	686c      	ldr	r4, [r5, #4]
 8009c12:	69a3      	ldr	r3, [r4, #24]
 8009c14:	60a3      	str	r3, [r4, #8]
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	071a      	lsls	r2, r3, #28
 8009c1a:	d52f      	bpl.n	8009c7c <__swbuf_r+0x84>
 8009c1c:	6923      	ldr	r3, [r4, #16]
 8009c1e:	b36b      	cbz	r3, 8009c7c <__swbuf_r+0x84>
 8009c20:	6923      	ldr	r3, [r4, #16]
 8009c22:	6820      	ldr	r0, [r4, #0]
 8009c24:	1ac0      	subs	r0, r0, r3
 8009c26:	6963      	ldr	r3, [r4, #20]
 8009c28:	b2f6      	uxtb	r6, r6
 8009c2a:	4283      	cmp	r3, r0
 8009c2c:	4637      	mov	r7, r6
 8009c2e:	dc04      	bgt.n	8009c3a <__swbuf_r+0x42>
 8009c30:	4621      	mov	r1, r4
 8009c32:	4628      	mov	r0, r5
 8009c34:	f000 f93c 	bl	8009eb0 <_fflush_r>
 8009c38:	bb30      	cbnz	r0, 8009c88 <__swbuf_r+0x90>
 8009c3a:	68a3      	ldr	r3, [r4, #8]
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	60a3      	str	r3, [r4, #8]
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	6022      	str	r2, [r4, #0]
 8009c46:	701e      	strb	r6, [r3, #0]
 8009c48:	6963      	ldr	r3, [r4, #20]
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	4283      	cmp	r3, r0
 8009c4e:	d004      	beq.n	8009c5a <__swbuf_r+0x62>
 8009c50:	89a3      	ldrh	r3, [r4, #12]
 8009c52:	07db      	lsls	r3, r3, #31
 8009c54:	d506      	bpl.n	8009c64 <__swbuf_r+0x6c>
 8009c56:	2e0a      	cmp	r6, #10
 8009c58:	d104      	bne.n	8009c64 <__swbuf_r+0x6c>
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f000 f927 	bl	8009eb0 <_fflush_r>
 8009c62:	b988      	cbnz	r0, 8009c88 <__swbuf_r+0x90>
 8009c64:	4638      	mov	r0, r7
 8009c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c68:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <__swbuf_r+0x9c>)
 8009c6a:	429c      	cmp	r4, r3
 8009c6c:	d101      	bne.n	8009c72 <__swbuf_r+0x7a>
 8009c6e:	68ac      	ldr	r4, [r5, #8]
 8009c70:	e7cf      	b.n	8009c12 <__swbuf_r+0x1a>
 8009c72:	4b09      	ldr	r3, [pc, #36]	; (8009c98 <__swbuf_r+0xa0>)
 8009c74:	429c      	cmp	r4, r3
 8009c76:	bf08      	it	eq
 8009c78:	68ec      	ldreq	r4, [r5, #12]
 8009c7a:	e7ca      	b.n	8009c12 <__swbuf_r+0x1a>
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	4628      	mov	r0, r5
 8009c80:	f000 f81a 	bl	8009cb8 <__swsetup_r>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d0cb      	beq.n	8009c20 <__swbuf_r+0x28>
 8009c88:	f04f 37ff 	mov.w	r7, #4294967295
 8009c8c:	e7ea      	b.n	8009c64 <__swbuf_r+0x6c>
 8009c8e:	bf00      	nop
 8009c90:	0800c3a4 	.word	0x0800c3a4
 8009c94:	0800c3c4 	.word	0x0800c3c4
 8009c98:	0800c384 	.word	0x0800c384

08009c9c <__ascii_wctomb>:
 8009c9c:	b149      	cbz	r1, 8009cb2 <__ascii_wctomb+0x16>
 8009c9e:	2aff      	cmp	r2, #255	; 0xff
 8009ca0:	bf85      	ittet	hi
 8009ca2:	238a      	movhi	r3, #138	; 0x8a
 8009ca4:	6003      	strhi	r3, [r0, #0]
 8009ca6:	700a      	strbls	r2, [r1, #0]
 8009ca8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009cac:	bf98      	it	ls
 8009cae:	2001      	movls	r0, #1
 8009cb0:	4770      	bx	lr
 8009cb2:	4608      	mov	r0, r1
 8009cb4:	4770      	bx	lr
	...

08009cb8 <__swsetup_r>:
 8009cb8:	4b32      	ldr	r3, [pc, #200]	; (8009d84 <__swsetup_r+0xcc>)
 8009cba:	b570      	push	{r4, r5, r6, lr}
 8009cbc:	681d      	ldr	r5, [r3, #0]
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	b125      	cbz	r5, 8009cce <__swsetup_r+0x16>
 8009cc4:	69ab      	ldr	r3, [r5, #24]
 8009cc6:	b913      	cbnz	r3, 8009cce <__swsetup_r+0x16>
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f000 f985 	bl	8009fd8 <__sinit>
 8009cce:	4b2e      	ldr	r3, [pc, #184]	; (8009d88 <__swsetup_r+0xd0>)
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	d10f      	bne.n	8009cf4 <__swsetup_r+0x3c>
 8009cd4:	686c      	ldr	r4, [r5, #4]
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cdc:	0719      	lsls	r1, r3, #28
 8009cde:	d42c      	bmi.n	8009d3a <__swsetup_r+0x82>
 8009ce0:	06dd      	lsls	r5, r3, #27
 8009ce2:	d411      	bmi.n	8009d08 <__swsetup_r+0x50>
 8009ce4:	2309      	movs	r3, #9
 8009ce6:	6033      	str	r3, [r6, #0]
 8009ce8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf2:	e03e      	b.n	8009d72 <__swsetup_r+0xba>
 8009cf4:	4b25      	ldr	r3, [pc, #148]	; (8009d8c <__swsetup_r+0xd4>)
 8009cf6:	429c      	cmp	r4, r3
 8009cf8:	d101      	bne.n	8009cfe <__swsetup_r+0x46>
 8009cfa:	68ac      	ldr	r4, [r5, #8]
 8009cfc:	e7eb      	b.n	8009cd6 <__swsetup_r+0x1e>
 8009cfe:	4b24      	ldr	r3, [pc, #144]	; (8009d90 <__swsetup_r+0xd8>)
 8009d00:	429c      	cmp	r4, r3
 8009d02:	bf08      	it	eq
 8009d04:	68ec      	ldreq	r4, [r5, #12]
 8009d06:	e7e6      	b.n	8009cd6 <__swsetup_r+0x1e>
 8009d08:	0758      	lsls	r0, r3, #29
 8009d0a:	d512      	bpl.n	8009d32 <__swsetup_r+0x7a>
 8009d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d0e:	b141      	cbz	r1, 8009d22 <__swsetup_r+0x6a>
 8009d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d14:	4299      	cmp	r1, r3
 8009d16:	d002      	beq.n	8009d1e <__swsetup_r+0x66>
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7ff fb31 	bl	8009380 <_free_r>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6363      	str	r3, [r4, #52]	; 0x34
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	6063      	str	r3, [r4, #4]
 8009d2e:	6923      	ldr	r3, [r4, #16]
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	f043 0308 	orr.w	r3, r3, #8
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	6923      	ldr	r3, [r4, #16]
 8009d3c:	b94b      	cbnz	r3, 8009d52 <__swsetup_r+0x9a>
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d48:	d003      	beq.n	8009d52 <__swsetup_r+0x9a>
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f000 fa09 	bl	800a164 <__smakebuf_r>
 8009d52:	89a0      	ldrh	r0, [r4, #12]
 8009d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d58:	f010 0301 	ands.w	r3, r0, #1
 8009d5c:	d00a      	beq.n	8009d74 <__swsetup_r+0xbc>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60a3      	str	r3, [r4, #8]
 8009d62:	6963      	ldr	r3, [r4, #20]
 8009d64:	425b      	negs	r3, r3
 8009d66:	61a3      	str	r3, [r4, #24]
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	b943      	cbnz	r3, 8009d7e <__swsetup_r+0xc6>
 8009d6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d70:	d1ba      	bne.n	8009ce8 <__swsetup_r+0x30>
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	0781      	lsls	r1, r0, #30
 8009d76:	bf58      	it	pl
 8009d78:	6963      	ldrpl	r3, [r4, #20]
 8009d7a:	60a3      	str	r3, [r4, #8]
 8009d7c:	e7f4      	b.n	8009d68 <__swsetup_r+0xb0>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e7f7      	b.n	8009d72 <__swsetup_r+0xba>
 8009d82:	bf00      	nop
 8009d84:	2000001c 	.word	0x2000001c
 8009d88:	0800c3a4 	.word	0x0800c3a4
 8009d8c:	0800c3c4 	.word	0x0800c3c4
 8009d90:	0800c384 	.word	0x0800c384

08009d94 <abort>:
 8009d94:	b508      	push	{r3, lr}
 8009d96:	2006      	movs	r0, #6
 8009d98:	f000 fa54 	bl	800a244 <raise>
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	f7f8 fb23 	bl	80023e8 <_exit>
	...

08009da4 <__sflush_r>:
 8009da4:	898a      	ldrh	r2, [r1, #12]
 8009da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009daa:	4605      	mov	r5, r0
 8009dac:	0710      	lsls	r0, r2, #28
 8009dae:	460c      	mov	r4, r1
 8009db0:	d458      	bmi.n	8009e64 <__sflush_r+0xc0>
 8009db2:	684b      	ldr	r3, [r1, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	dc05      	bgt.n	8009dc4 <__sflush_r+0x20>
 8009db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	dc02      	bgt.n	8009dc4 <__sflush_r+0x20>
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dc6:	2e00      	cmp	r6, #0
 8009dc8:	d0f9      	beq.n	8009dbe <__sflush_r+0x1a>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dd0:	682f      	ldr	r7, [r5, #0]
 8009dd2:	602b      	str	r3, [r5, #0]
 8009dd4:	d032      	beq.n	8009e3c <__sflush_r+0x98>
 8009dd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	075a      	lsls	r2, r3, #29
 8009ddc:	d505      	bpl.n	8009dea <__sflush_r+0x46>
 8009dde:	6863      	ldr	r3, [r4, #4]
 8009de0:	1ac0      	subs	r0, r0, r3
 8009de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009de4:	b10b      	cbz	r3, 8009dea <__sflush_r+0x46>
 8009de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009de8:	1ac0      	subs	r0, r0, r3
 8009dea:	2300      	movs	r3, #0
 8009dec:	4602      	mov	r2, r0
 8009dee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009df0:	6a21      	ldr	r1, [r4, #32]
 8009df2:	4628      	mov	r0, r5
 8009df4:	47b0      	blx	r6
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	d106      	bne.n	8009e0a <__sflush_r+0x66>
 8009dfc:	6829      	ldr	r1, [r5, #0]
 8009dfe:	291d      	cmp	r1, #29
 8009e00:	d82c      	bhi.n	8009e5c <__sflush_r+0xb8>
 8009e02:	4a2a      	ldr	r2, [pc, #168]	; (8009eac <__sflush_r+0x108>)
 8009e04:	40ca      	lsrs	r2, r1
 8009e06:	07d6      	lsls	r6, r2, #31
 8009e08:	d528      	bpl.n	8009e5c <__sflush_r+0xb8>
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	6062      	str	r2, [r4, #4]
 8009e0e:	04d9      	lsls	r1, r3, #19
 8009e10:	6922      	ldr	r2, [r4, #16]
 8009e12:	6022      	str	r2, [r4, #0]
 8009e14:	d504      	bpl.n	8009e20 <__sflush_r+0x7c>
 8009e16:	1c42      	adds	r2, r0, #1
 8009e18:	d101      	bne.n	8009e1e <__sflush_r+0x7a>
 8009e1a:	682b      	ldr	r3, [r5, #0]
 8009e1c:	b903      	cbnz	r3, 8009e20 <__sflush_r+0x7c>
 8009e1e:	6560      	str	r0, [r4, #84]	; 0x54
 8009e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e22:	602f      	str	r7, [r5, #0]
 8009e24:	2900      	cmp	r1, #0
 8009e26:	d0ca      	beq.n	8009dbe <__sflush_r+0x1a>
 8009e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e2c:	4299      	cmp	r1, r3
 8009e2e:	d002      	beq.n	8009e36 <__sflush_r+0x92>
 8009e30:	4628      	mov	r0, r5
 8009e32:	f7ff faa5 	bl	8009380 <_free_r>
 8009e36:	2000      	movs	r0, #0
 8009e38:	6360      	str	r0, [r4, #52]	; 0x34
 8009e3a:	e7c1      	b.n	8009dc0 <__sflush_r+0x1c>
 8009e3c:	6a21      	ldr	r1, [r4, #32]
 8009e3e:	2301      	movs	r3, #1
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b0      	blx	r6
 8009e44:	1c41      	adds	r1, r0, #1
 8009e46:	d1c7      	bne.n	8009dd8 <__sflush_r+0x34>
 8009e48:	682b      	ldr	r3, [r5, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0c4      	beq.n	8009dd8 <__sflush_r+0x34>
 8009e4e:	2b1d      	cmp	r3, #29
 8009e50:	d001      	beq.n	8009e56 <__sflush_r+0xb2>
 8009e52:	2b16      	cmp	r3, #22
 8009e54:	d101      	bne.n	8009e5a <__sflush_r+0xb6>
 8009e56:	602f      	str	r7, [r5, #0]
 8009e58:	e7b1      	b.n	8009dbe <__sflush_r+0x1a>
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e60:	81a3      	strh	r3, [r4, #12]
 8009e62:	e7ad      	b.n	8009dc0 <__sflush_r+0x1c>
 8009e64:	690f      	ldr	r7, [r1, #16]
 8009e66:	2f00      	cmp	r7, #0
 8009e68:	d0a9      	beq.n	8009dbe <__sflush_r+0x1a>
 8009e6a:	0793      	lsls	r3, r2, #30
 8009e6c:	680e      	ldr	r6, [r1, #0]
 8009e6e:	bf08      	it	eq
 8009e70:	694b      	ldreq	r3, [r1, #20]
 8009e72:	600f      	str	r7, [r1, #0]
 8009e74:	bf18      	it	ne
 8009e76:	2300      	movne	r3, #0
 8009e78:	eba6 0807 	sub.w	r8, r6, r7
 8009e7c:	608b      	str	r3, [r1, #8]
 8009e7e:	f1b8 0f00 	cmp.w	r8, #0
 8009e82:	dd9c      	ble.n	8009dbe <__sflush_r+0x1a>
 8009e84:	6a21      	ldr	r1, [r4, #32]
 8009e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e88:	4643      	mov	r3, r8
 8009e8a:	463a      	mov	r2, r7
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	47b0      	blx	r6
 8009e90:	2800      	cmp	r0, #0
 8009e92:	dc06      	bgt.n	8009ea2 <__sflush_r+0xfe>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea0:	e78e      	b.n	8009dc0 <__sflush_r+0x1c>
 8009ea2:	4407      	add	r7, r0
 8009ea4:	eba8 0800 	sub.w	r8, r8, r0
 8009ea8:	e7e9      	b.n	8009e7e <__sflush_r+0xda>
 8009eaa:	bf00      	nop
 8009eac:	20400001 	.word	0x20400001

08009eb0 <_fflush_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	690b      	ldr	r3, [r1, #16]
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	b913      	cbnz	r3, 8009ec0 <_fflush_r+0x10>
 8009eba:	2500      	movs	r5, #0
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	b118      	cbz	r0, 8009eca <_fflush_r+0x1a>
 8009ec2:	6983      	ldr	r3, [r0, #24]
 8009ec4:	b90b      	cbnz	r3, 8009eca <_fflush_r+0x1a>
 8009ec6:	f000 f887 	bl	8009fd8 <__sinit>
 8009eca:	4b14      	ldr	r3, [pc, #80]	; (8009f1c <_fflush_r+0x6c>)
 8009ecc:	429c      	cmp	r4, r3
 8009ece:	d11b      	bne.n	8009f08 <_fflush_r+0x58>
 8009ed0:	686c      	ldr	r4, [r5, #4]
 8009ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0ef      	beq.n	8009eba <_fflush_r+0xa>
 8009eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009edc:	07d0      	lsls	r0, r2, #31
 8009ede:	d404      	bmi.n	8009eea <_fflush_r+0x3a>
 8009ee0:	0599      	lsls	r1, r3, #22
 8009ee2:	d402      	bmi.n	8009eea <_fflush_r+0x3a>
 8009ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ee6:	f000 f915 	bl	800a114 <__retarget_lock_acquire_recursive>
 8009eea:	4628      	mov	r0, r5
 8009eec:	4621      	mov	r1, r4
 8009eee:	f7ff ff59 	bl	8009da4 <__sflush_r>
 8009ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ef4:	07da      	lsls	r2, r3, #31
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	d4e0      	bmi.n	8009ebc <_fflush_r+0xc>
 8009efa:	89a3      	ldrh	r3, [r4, #12]
 8009efc:	059b      	lsls	r3, r3, #22
 8009efe:	d4dd      	bmi.n	8009ebc <_fflush_r+0xc>
 8009f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f02:	f000 f908 	bl	800a116 <__retarget_lock_release_recursive>
 8009f06:	e7d9      	b.n	8009ebc <_fflush_r+0xc>
 8009f08:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <_fflush_r+0x70>)
 8009f0a:	429c      	cmp	r4, r3
 8009f0c:	d101      	bne.n	8009f12 <_fflush_r+0x62>
 8009f0e:	68ac      	ldr	r4, [r5, #8]
 8009f10:	e7df      	b.n	8009ed2 <_fflush_r+0x22>
 8009f12:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <_fflush_r+0x74>)
 8009f14:	429c      	cmp	r4, r3
 8009f16:	bf08      	it	eq
 8009f18:	68ec      	ldreq	r4, [r5, #12]
 8009f1a:	e7da      	b.n	8009ed2 <_fflush_r+0x22>
 8009f1c:	0800c3a4 	.word	0x0800c3a4
 8009f20:	0800c3c4 	.word	0x0800c3c4
 8009f24:	0800c384 	.word	0x0800c384

08009f28 <std>:
 8009f28:	2300      	movs	r3, #0
 8009f2a:	b510      	push	{r4, lr}
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8009f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f36:	6083      	str	r3, [r0, #8]
 8009f38:	8181      	strh	r1, [r0, #12]
 8009f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f3c:	81c2      	strh	r2, [r0, #14]
 8009f3e:	6183      	str	r3, [r0, #24]
 8009f40:	4619      	mov	r1, r3
 8009f42:	2208      	movs	r2, #8
 8009f44:	305c      	adds	r0, #92	; 0x5c
 8009f46:	f7fd fb55 	bl	80075f4 <memset>
 8009f4a:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <std+0x38>)
 8009f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8009f4e:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <std+0x3c>)
 8009f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f52:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <std+0x40>)
 8009f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <std+0x44>)
 8009f58:	6224      	str	r4, [r4, #32]
 8009f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f5c:	bd10      	pop	{r4, pc}
 8009f5e:	bf00      	nop
 8009f60:	0800a27d 	.word	0x0800a27d
 8009f64:	0800a29f 	.word	0x0800a29f
 8009f68:	0800a2d7 	.word	0x0800a2d7
 8009f6c:	0800a2fb 	.word	0x0800a2fb

08009f70 <_cleanup_r>:
 8009f70:	4901      	ldr	r1, [pc, #4]	; (8009f78 <_cleanup_r+0x8>)
 8009f72:	f000 b8af 	b.w	800a0d4 <_fwalk_reent>
 8009f76:	bf00      	nop
 8009f78:	08009eb1 	.word	0x08009eb1

08009f7c <__sfmoreglue>:
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	2268      	movs	r2, #104	; 0x68
 8009f80:	1e4d      	subs	r5, r1, #1
 8009f82:	4355      	muls	r5, r2
 8009f84:	460e      	mov	r6, r1
 8009f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f8a:	f7ff fa65 	bl	8009458 <_malloc_r>
 8009f8e:	4604      	mov	r4, r0
 8009f90:	b140      	cbz	r0, 8009fa4 <__sfmoreglue+0x28>
 8009f92:	2100      	movs	r1, #0
 8009f94:	e9c0 1600 	strd	r1, r6, [r0]
 8009f98:	300c      	adds	r0, #12
 8009f9a:	60a0      	str	r0, [r4, #8]
 8009f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fa0:	f7fd fb28 	bl	80075f4 <memset>
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}

08009fa8 <__sfp_lock_acquire>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	; (8009fb0 <__sfp_lock_acquire+0x8>)
 8009faa:	f000 b8b3 	b.w	800a114 <__retarget_lock_acquire_recursive>
 8009fae:	bf00      	nop
 8009fb0:	200007b1 	.word	0x200007b1

08009fb4 <__sfp_lock_release>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__sfp_lock_release+0x8>)
 8009fb6:	f000 b8ae 	b.w	800a116 <__retarget_lock_release_recursive>
 8009fba:	bf00      	nop
 8009fbc:	200007b1 	.word	0x200007b1

08009fc0 <__sinit_lock_acquire>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__sinit_lock_acquire+0x8>)
 8009fc2:	f000 b8a7 	b.w	800a114 <__retarget_lock_acquire_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	200007b2 	.word	0x200007b2

08009fcc <__sinit_lock_release>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	; (8009fd4 <__sinit_lock_release+0x8>)
 8009fce:	f000 b8a2 	b.w	800a116 <__retarget_lock_release_recursive>
 8009fd2:	bf00      	nop
 8009fd4:	200007b2 	.word	0x200007b2

08009fd8 <__sinit>:
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	4604      	mov	r4, r0
 8009fdc:	f7ff fff0 	bl	8009fc0 <__sinit_lock_acquire>
 8009fe0:	69a3      	ldr	r3, [r4, #24]
 8009fe2:	b11b      	cbz	r3, 8009fec <__sinit+0x14>
 8009fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fe8:	f7ff bff0 	b.w	8009fcc <__sinit_lock_release>
 8009fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8009ff2:	4b13      	ldr	r3, [pc, #76]	; (800a040 <__sinit+0x68>)
 8009ff4:	4a13      	ldr	r2, [pc, #76]	; (800a044 <__sinit+0x6c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ffa:	42a3      	cmp	r3, r4
 8009ffc:	bf04      	itt	eq
 8009ffe:	2301      	moveq	r3, #1
 800a000:	61a3      	streq	r3, [r4, #24]
 800a002:	4620      	mov	r0, r4
 800a004:	f000 f820 	bl	800a048 <__sfp>
 800a008:	6060      	str	r0, [r4, #4]
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 f81c 	bl	800a048 <__sfp>
 800a010:	60a0      	str	r0, [r4, #8]
 800a012:	4620      	mov	r0, r4
 800a014:	f000 f818 	bl	800a048 <__sfp>
 800a018:	2200      	movs	r2, #0
 800a01a:	60e0      	str	r0, [r4, #12]
 800a01c:	2104      	movs	r1, #4
 800a01e:	6860      	ldr	r0, [r4, #4]
 800a020:	f7ff ff82 	bl	8009f28 <std>
 800a024:	68a0      	ldr	r0, [r4, #8]
 800a026:	2201      	movs	r2, #1
 800a028:	2109      	movs	r1, #9
 800a02a:	f7ff ff7d 	bl	8009f28 <std>
 800a02e:	68e0      	ldr	r0, [r4, #12]
 800a030:	2202      	movs	r2, #2
 800a032:	2112      	movs	r1, #18
 800a034:	f7ff ff78 	bl	8009f28 <std>
 800a038:	2301      	movs	r3, #1
 800a03a:	61a3      	str	r3, [r4, #24]
 800a03c:	e7d2      	b.n	8009fe4 <__sinit+0xc>
 800a03e:	bf00      	nop
 800a040:	0800c00c 	.word	0x0800c00c
 800a044:	08009f71 	.word	0x08009f71

0800a048 <__sfp>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	4607      	mov	r7, r0
 800a04c:	f7ff ffac 	bl	8009fa8 <__sfp_lock_acquire>
 800a050:	4b1e      	ldr	r3, [pc, #120]	; (800a0cc <__sfp+0x84>)
 800a052:	681e      	ldr	r6, [r3, #0]
 800a054:	69b3      	ldr	r3, [r6, #24]
 800a056:	b913      	cbnz	r3, 800a05e <__sfp+0x16>
 800a058:	4630      	mov	r0, r6
 800a05a:	f7ff ffbd 	bl	8009fd8 <__sinit>
 800a05e:	3648      	adds	r6, #72	; 0x48
 800a060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a064:	3b01      	subs	r3, #1
 800a066:	d503      	bpl.n	800a070 <__sfp+0x28>
 800a068:	6833      	ldr	r3, [r6, #0]
 800a06a:	b30b      	cbz	r3, 800a0b0 <__sfp+0x68>
 800a06c:	6836      	ldr	r6, [r6, #0]
 800a06e:	e7f7      	b.n	800a060 <__sfp+0x18>
 800a070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a074:	b9d5      	cbnz	r5, 800a0ac <__sfp+0x64>
 800a076:	4b16      	ldr	r3, [pc, #88]	; (800a0d0 <__sfp+0x88>)
 800a078:	60e3      	str	r3, [r4, #12]
 800a07a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a07e:	6665      	str	r5, [r4, #100]	; 0x64
 800a080:	f000 f847 	bl	800a112 <__retarget_lock_init_recursive>
 800a084:	f7ff ff96 	bl	8009fb4 <__sfp_lock_release>
 800a088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a08c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a090:	6025      	str	r5, [r4, #0]
 800a092:	61a5      	str	r5, [r4, #24]
 800a094:	2208      	movs	r2, #8
 800a096:	4629      	mov	r1, r5
 800a098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a09c:	f7fd faaa 	bl	80075f4 <memset>
 800a0a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ac:	3468      	adds	r4, #104	; 0x68
 800a0ae:	e7d9      	b.n	800a064 <__sfp+0x1c>
 800a0b0:	2104      	movs	r1, #4
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	f7ff ff62 	bl	8009f7c <__sfmoreglue>
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	6030      	str	r0, [r6, #0]
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d1d5      	bne.n	800a06c <__sfp+0x24>
 800a0c0:	f7ff ff78 	bl	8009fb4 <__sfp_lock_release>
 800a0c4:	230c      	movs	r3, #12
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	e7ee      	b.n	800a0a8 <__sfp+0x60>
 800a0ca:	bf00      	nop
 800a0cc:	0800c00c 	.word	0x0800c00c
 800a0d0:	ffff0001 	.word	0xffff0001

0800a0d4 <_fwalk_reent>:
 800a0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d8:	4606      	mov	r6, r0
 800a0da:	4688      	mov	r8, r1
 800a0dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0e0:	2700      	movs	r7, #0
 800a0e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0e6:	f1b9 0901 	subs.w	r9, r9, #1
 800a0ea:	d505      	bpl.n	800a0f8 <_fwalk_reent+0x24>
 800a0ec:	6824      	ldr	r4, [r4, #0]
 800a0ee:	2c00      	cmp	r4, #0
 800a0f0:	d1f7      	bne.n	800a0e2 <_fwalk_reent+0xe>
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0f8:	89ab      	ldrh	r3, [r5, #12]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d907      	bls.n	800a10e <_fwalk_reent+0x3a>
 800a0fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a102:	3301      	adds	r3, #1
 800a104:	d003      	beq.n	800a10e <_fwalk_reent+0x3a>
 800a106:	4629      	mov	r1, r5
 800a108:	4630      	mov	r0, r6
 800a10a:	47c0      	blx	r8
 800a10c:	4307      	orrs	r7, r0
 800a10e:	3568      	adds	r5, #104	; 0x68
 800a110:	e7e9      	b.n	800a0e6 <_fwalk_reent+0x12>

0800a112 <__retarget_lock_init_recursive>:
 800a112:	4770      	bx	lr

0800a114 <__retarget_lock_acquire_recursive>:
 800a114:	4770      	bx	lr

0800a116 <__retarget_lock_release_recursive>:
 800a116:	4770      	bx	lr

0800a118 <__swhatbuf_r>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	460e      	mov	r6, r1
 800a11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a120:	2900      	cmp	r1, #0
 800a122:	b096      	sub	sp, #88	; 0x58
 800a124:	4614      	mov	r4, r2
 800a126:	461d      	mov	r5, r3
 800a128:	da08      	bge.n	800a13c <__swhatbuf_r+0x24>
 800a12a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	602a      	str	r2, [r5, #0]
 800a132:	061a      	lsls	r2, r3, #24
 800a134:	d410      	bmi.n	800a158 <__swhatbuf_r+0x40>
 800a136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a13a:	e00e      	b.n	800a15a <__swhatbuf_r+0x42>
 800a13c:	466a      	mov	r2, sp
 800a13e:	f000 f903 	bl	800a348 <_fstat_r>
 800a142:	2800      	cmp	r0, #0
 800a144:	dbf1      	blt.n	800a12a <__swhatbuf_r+0x12>
 800a146:	9a01      	ldr	r2, [sp, #4]
 800a148:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a14c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a150:	425a      	negs	r2, r3
 800a152:	415a      	adcs	r2, r3
 800a154:	602a      	str	r2, [r5, #0]
 800a156:	e7ee      	b.n	800a136 <__swhatbuf_r+0x1e>
 800a158:	2340      	movs	r3, #64	; 0x40
 800a15a:	2000      	movs	r0, #0
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	b016      	add	sp, #88	; 0x58
 800a160:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a164 <__smakebuf_r>:
 800a164:	898b      	ldrh	r3, [r1, #12]
 800a166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a168:	079d      	lsls	r5, r3, #30
 800a16a:	4606      	mov	r6, r0
 800a16c:	460c      	mov	r4, r1
 800a16e:	d507      	bpl.n	800a180 <__smakebuf_r+0x1c>
 800a170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	6123      	str	r3, [r4, #16]
 800a178:	2301      	movs	r3, #1
 800a17a:	6163      	str	r3, [r4, #20]
 800a17c:	b002      	add	sp, #8
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	ab01      	add	r3, sp, #4
 800a182:	466a      	mov	r2, sp
 800a184:	f7ff ffc8 	bl	800a118 <__swhatbuf_r>
 800a188:	9900      	ldr	r1, [sp, #0]
 800a18a:	4605      	mov	r5, r0
 800a18c:	4630      	mov	r0, r6
 800a18e:	f7ff f963 	bl	8009458 <_malloc_r>
 800a192:	b948      	cbnz	r0, 800a1a8 <__smakebuf_r+0x44>
 800a194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a198:	059a      	lsls	r2, r3, #22
 800a19a:	d4ef      	bmi.n	800a17c <__smakebuf_r+0x18>
 800a19c:	f023 0303 	bic.w	r3, r3, #3
 800a1a0:	f043 0302 	orr.w	r3, r3, #2
 800a1a4:	81a3      	strh	r3, [r4, #12]
 800a1a6:	e7e3      	b.n	800a170 <__smakebuf_r+0xc>
 800a1a8:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <__smakebuf_r+0x7c>)
 800a1aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	6020      	str	r0, [r4, #0]
 800a1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b4:	81a3      	strh	r3, [r4, #12]
 800a1b6:	9b00      	ldr	r3, [sp, #0]
 800a1b8:	6163      	str	r3, [r4, #20]
 800a1ba:	9b01      	ldr	r3, [sp, #4]
 800a1bc:	6120      	str	r0, [r4, #16]
 800a1be:	b15b      	cbz	r3, 800a1d8 <__smakebuf_r+0x74>
 800a1c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f000 f8d1 	bl	800a36c <_isatty_r>
 800a1ca:	b128      	cbz	r0, 800a1d8 <__smakebuf_r+0x74>
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	f023 0303 	bic.w	r3, r3, #3
 800a1d2:	f043 0301 	orr.w	r3, r3, #1
 800a1d6:	81a3      	strh	r3, [r4, #12]
 800a1d8:	89a0      	ldrh	r0, [r4, #12]
 800a1da:	4305      	orrs	r5, r0
 800a1dc:	81a5      	strh	r5, [r4, #12]
 800a1de:	e7cd      	b.n	800a17c <__smakebuf_r+0x18>
 800a1e0:	08009f71 	.word	0x08009f71

0800a1e4 <_malloc_usable_size_r>:
 800a1e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e8:	1f18      	subs	r0, r3, #4
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	bfbc      	itt	lt
 800a1ee:	580b      	ldrlt	r3, [r1, r0]
 800a1f0:	18c0      	addlt	r0, r0, r3
 800a1f2:	4770      	bx	lr

0800a1f4 <_raise_r>:
 800a1f4:	291f      	cmp	r1, #31
 800a1f6:	b538      	push	{r3, r4, r5, lr}
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	460d      	mov	r5, r1
 800a1fc:	d904      	bls.n	800a208 <_raise_r+0x14>
 800a1fe:	2316      	movs	r3, #22
 800a200:	6003      	str	r3, [r0, #0]
 800a202:	f04f 30ff 	mov.w	r0, #4294967295
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a20a:	b112      	cbz	r2, 800a212 <_raise_r+0x1e>
 800a20c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a210:	b94b      	cbnz	r3, 800a226 <_raise_r+0x32>
 800a212:	4620      	mov	r0, r4
 800a214:	f000 f830 	bl	800a278 <_getpid_r>
 800a218:	462a      	mov	r2, r5
 800a21a:	4601      	mov	r1, r0
 800a21c:	4620      	mov	r0, r4
 800a21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a222:	f000 b817 	b.w	800a254 <_kill_r>
 800a226:	2b01      	cmp	r3, #1
 800a228:	d00a      	beq.n	800a240 <_raise_r+0x4c>
 800a22a:	1c59      	adds	r1, r3, #1
 800a22c:	d103      	bne.n	800a236 <_raise_r+0x42>
 800a22e:	2316      	movs	r3, #22
 800a230:	6003      	str	r3, [r0, #0]
 800a232:	2001      	movs	r0, #1
 800a234:	e7e7      	b.n	800a206 <_raise_r+0x12>
 800a236:	2400      	movs	r4, #0
 800a238:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a23c:	4628      	mov	r0, r5
 800a23e:	4798      	blx	r3
 800a240:	2000      	movs	r0, #0
 800a242:	e7e0      	b.n	800a206 <_raise_r+0x12>

0800a244 <raise>:
 800a244:	4b02      	ldr	r3, [pc, #8]	; (800a250 <raise+0xc>)
 800a246:	4601      	mov	r1, r0
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	f7ff bfd3 	b.w	800a1f4 <_raise_r>
 800a24e:	bf00      	nop
 800a250:	2000001c 	.word	0x2000001c

0800a254 <_kill_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4d07      	ldr	r5, [pc, #28]	; (800a274 <_kill_r+0x20>)
 800a258:	2300      	movs	r3, #0
 800a25a:	4604      	mov	r4, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	4611      	mov	r1, r2
 800a260:	602b      	str	r3, [r5, #0]
 800a262:	f7f8 f8b1 	bl	80023c8 <_kill>
 800a266:	1c43      	adds	r3, r0, #1
 800a268:	d102      	bne.n	800a270 <_kill_r+0x1c>
 800a26a:	682b      	ldr	r3, [r5, #0]
 800a26c:	b103      	cbz	r3, 800a270 <_kill_r+0x1c>
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	bd38      	pop	{r3, r4, r5, pc}
 800a272:	bf00      	nop
 800a274:	200007ac 	.word	0x200007ac

0800a278 <_getpid_r>:
 800a278:	f7f8 b89e 	b.w	80023b8 <_getpid>

0800a27c <__sread>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	460c      	mov	r4, r1
 800a280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a284:	f000 f894 	bl	800a3b0 <_read_r>
 800a288:	2800      	cmp	r0, #0
 800a28a:	bfab      	itete	ge
 800a28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a28e:	89a3      	ldrhlt	r3, [r4, #12]
 800a290:	181b      	addge	r3, r3, r0
 800a292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a296:	bfac      	ite	ge
 800a298:	6563      	strge	r3, [r4, #84]	; 0x54
 800a29a:	81a3      	strhlt	r3, [r4, #12]
 800a29c:	bd10      	pop	{r4, pc}

0800a29e <__swrite>:
 800a29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a2:	461f      	mov	r7, r3
 800a2a4:	898b      	ldrh	r3, [r1, #12]
 800a2a6:	05db      	lsls	r3, r3, #23
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	4616      	mov	r6, r2
 800a2ae:	d505      	bpl.n	800a2bc <__swrite+0x1e>
 800a2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f000 f868 	bl	800a38c <_lseek_r>
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2c6:	81a3      	strh	r3, [r4, #12]
 800a2c8:	4632      	mov	r2, r6
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d2:	f000 b817 	b.w	800a304 <_write_r>

0800a2d6 <__sseek>:
 800a2d6:	b510      	push	{r4, lr}
 800a2d8:	460c      	mov	r4, r1
 800a2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2de:	f000 f855 	bl	800a38c <_lseek_r>
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	bf15      	itete	ne
 800a2e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2f2:	81a3      	strheq	r3, [r4, #12]
 800a2f4:	bf18      	it	ne
 800a2f6:	81a3      	strhne	r3, [r4, #12]
 800a2f8:	bd10      	pop	{r4, pc}

0800a2fa <__sclose>:
 800a2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fe:	f000 b813 	b.w	800a328 <_close_r>
	...

0800a304 <_write_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d07      	ldr	r5, [pc, #28]	; (800a324 <_write_r+0x20>)
 800a308:	4604      	mov	r4, r0
 800a30a:	4608      	mov	r0, r1
 800a30c:	4611      	mov	r1, r2
 800a30e:	2200      	movs	r2, #0
 800a310:	602a      	str	r2, [r5, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	f7f8 f88f 	bl	8002436 <_write>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_write_r+0x1e>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_write_r+0x1e>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	200007ac 	.word	0x200007ac

0800a328 <_close_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4d06      	ldr	r5, [pc, #24]	; (800a344 <_close_r+0x1c>)
 800a32c:	2300      	movs	r3, #0
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	602b      	str	r3, [r5, #0]
 800a334:	f7f8 f89b 	bl	800246e <_close>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	d102      	bne.n	800a342 <_close_r+0x1a>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	b103      	cbz	r3, 800a342 <_close_r+0x1a>
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	bd38      	pop	{r3, r4, r5, pc}
 800a344:	200007ac 	.word	0x200007ac

0800a348 <_fstat_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4d07      	ldr	r5, [pc, #28]	; (800a368 <_fstat_r+0x20>)
 800a34c:	2300      	movs	r3, #0
 800a34e:	4604      	mov	r4, r0
 800a350:	4608      	mov	r0, r1
 800a352:	4611      	mov	r1, r2
 800a354:	602b      	str	r3, [r5, #0]
 800a356:	f7f8 f896 	bl	8002486 <_fstat>
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	d102      	bne.n	800a364 <_fstat_r+0x1c>
 800a35e:	682b      	ldr	r3, [r5, #0]
 800a360:	b103      	cbz	r3, 800a364 <_fstat_r+0x1c>
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	bd38      	pop	{r3, r4, r5, pc}
 800a366:	bf00      	nop
 800a368:	200007ac 	.word	0x200007ac

0800a36c <_isatty_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4d06      	ldr	r5, [pc, #24]	; (800a388 <_isatty_r+0x1c>)
 800a370:	2300      	movs	r3, #0
 800a372:	4604      	mov	r4, r0
 800a374:	4608      	mov	r0, r1
 800a376:	602b      	str	r3, [r5, #0]
 800a378:	f7f8 f895 	bl	80024a6 <_isatty>
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	d102      	bne.n	800a386 <_isatty_r+0x1a>
 800a380:	682b      	ldr	r3, [r5, #0]
 800a382:	b103      	cbz	r3, 800a386 <_isatty_r+0x1a>
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	bd38      	pop	{r3, r4, r5, pc}
 800a388:	200007ac 	.word	0x200007ac

0800a38c <_lseek_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4d07      	ldr	r5, [pc, #28]	; (800a3ac <_lseek_r+0x20>)
 800a390:	4604      	mov	r4, r0
 800a392:	4608      	mov	r0, r1
 800a394:	4611      	mov	r1, r2
 800a396:	2200      	movs	r2, #0
 800a398:	602a      	str	r2, [r5, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	f7f8 f88e 	bl	80024bc <_lseek>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_lseek_r+0x1e>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_lseek_r+0x1e>
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	200007ac 	.word	0x200007ac

0800a3b0 <_read_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4d07      	ldr	r5, [pc, #28]	; (800a3d0 <_read_r+0x20>)
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	4608      	mov	r0, r1
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	602a      	str	r2, [r5, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f7f8 f81c 	bl	80023fc <_read>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d102      	bne.n	800a3ce <_read_r+0x1e>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	b103      	cbz	r3, 800a3ce <_read_r+0x1e>
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	200007ac 	.word	0x200007ac

0800a3d4 <_init>:
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d6:	bf00      	nop
 800a3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3da:	bc08      	pop	{r3}
 800a3dc:	469e      	mov	lr, r3
 800a3de:	4770      	bx	lr

0800a3e0 <_fini>:
 800a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e2:	bf00      	nop
 800a3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e6:	bc08      	pop	{r3}
 800a3e8:	469e      	mov	lr, r3
 800a3ea:	4770      	bx	lr
