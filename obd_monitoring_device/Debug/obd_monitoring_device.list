
obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000331c  0800d028  0800d028  0001d028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010344  08010344  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  08010344  08010344  00020344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801034c  0801034c  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801034c  0801034c  0002034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010350  08010350  00020350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08010354  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  2000035c  080106b0  0003035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  080106b0  00030b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f79a  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000424d  00000000  00000000  0004fb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00053d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  000557c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027053  00000000  00000000  00057050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020dca  00000000  00000000  0007e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7742  00000000  00000000  0009ee6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001865af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008118  00000000  00000000  00186600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000035c 	.word	0x2000035c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d00c 	.word	0x0800d00c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000360 	.word	0x20000360
 80001cc:	0800d00c 	.word	0x0800d00c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CAN1_Init>:
extern IWDG_HandleTypeDef hiwdg;
extern CAN_HandleTypeDef hcan1;
uint32_t tx_mailbox;

void MX_CAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_CAN1_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f6e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f9c:	f003 fd0e 	bl	80049bc <HAL_CAN_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_CAN1_Init+0x5e>
	{
	  Error_Handler();
 8000fa6:	f001 fc57 	bl	8002858 <Error_Handler>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000444 	.word	0x20000444
 8000fb4:	40006400 	.word	0x40006400

08000fb8 <canConfig>:

void canConfig(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8000fca:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000fce:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8000fd4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fd8:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <canConfig+0x64>)
 8000fec:	f003 fde1 	bl	8004bb2 <HAL_CAN_ConfigFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <canConfig+0x42>
	{
		Error_Handler();
 8000ff6:	f001 fc2f 	bl	8002858 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <canConfig+0x64>)
 8000ffc:	f003 fea3 	bl	8004d46 <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <canConfig+0x52>
	{
		Error_Handler();
 8001006:	f001 fc27 	bl	8002858 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <canConfig+0x64>)
 800100e:	f004 f8c0 	bl	8005192 <HAL_CAN_ActivateNotification>
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000444 	.word	0x20000444

08001020 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	f107 0214 	add.w	r2, r7, #20
 8001030:	2100      	movs	r1, #0
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001034:	f003 ff9b 	bl	8004f6e <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fb93 	bl	8001768 <OBD2_PID_Parse>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001048:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	OBD2_ShowOnDisplay(obd_comm.current_value);
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800104e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f000 ff7d 	bl	8001f54 <OBD2_ShowOnDisplay>

//	HAL_IWDG_Refresh(&hiwdg);
}
 800105a:	bf00      	nop
 800105c:	3730      	adds	r7, #48	; 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000444 	.word	0x20000444
 8001068:	200006c0 	.word	0x200006c0

0800106c <CAN_SEND_MESSAGE>:

void CAN_SEND_MESSAGE(uint8_t *tx_frame)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = DEVICE_CAN_ID;
 8001074:	f240 73df 	movw	r3, #2015	; 0x7df
 8001078:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 800107a:	2308      	movs	r3, #8
 800107c:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_frame, &tx_mailbox) != HAL_OK)
 8001086:	f107 0108 	add.w	r1, r7, #8
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <CAN_SEND_MESSAGE+0x3c>)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <CAN_SEND_MESSAGE+0x40>)
 8001090:	f003 fe9d 	bl	8004dce <HAL_CAN_AddTxMessage>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <CAN_SEND_MESSAGE+0x32>
	{
		Error_Handler();
 800109a:	f001 fbdd 	bl	8002858 <Error_Handler>
	}

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000378 	.word	0x20000378
 80010ac:	20000444 	.word	0x20000444

080010b0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	60da      	str	r2, [r3, #12]
//	__HAL_CAN_Receive_IT(hcan, CAN_RX_FIFO0);
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <KLine_Init>:
static void MX_GPIO_KLineUART_Init(void);
static void UART_PIN_State(uint8_t state);
static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght);
static void MX_USART1_UART_Init(uint16_t baud_rate);

obd_protocol KLine_Init(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 80010d2:	f000 f8f9 	bl	80012c8 <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 80010d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010da:	f002 fa8d 	bl	80035f8 <HAL_Delay>
	UART_PIN_State(0); //0
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f908 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f002 fa87 	bl	80035f8 <HAL_Delay>
	UART_PIN_State(1);//11
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 f902 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(400);
 80010f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010f4:	f002 fa80 	bl	80035f8 <HAL_Delay>
	UART_PIN_State(0);//00
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 f8fb 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(400);
 80010fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001102:	f002 fa79 	bl	80035f8 <HAL_Delay>
	UART_PIN_State(1);//11
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f8f4 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(400);
 800110c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001110:	f002 fa72 	bl	80035f8 <HAL_Delay>
	UART_PIN_State(0);//00
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f8ed 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(400);
 800111a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800111e:	f002 fa6b 	bl	80035f8 <HAL_Delay>
	UART_PIN_State(1);//1
 8001122:	2001      	movs	r0, #1
 8001124:	f000 f8e6 	bl	80012f4 <UART_PIN_State>

	MX_USART1_UART_Init(10400);
 8001128:	f642 00a0 	movw	r0, #10400	; 0x28a0
 800112c:	f000 f9f4 	bl	8001518 <MX_USART1_UART_Init>

	HAL_UART_Receive(&huart1, uartBuf, 3, 500);
 8001130:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001134:	2203      	movs	r2, #3
 8001136:	492b      	ldr	r1, [pc, #172]	; (80011e4 <KLine_Init+0x118>)
 8001138:	482b      	ldr	r0, [pc, #172]	; (80011e8 <KLine_Init+0x11c>)
 800113a:	f007 fd76 	bl	8008c2a <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <KLine_Init+0x118>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b55      	cmp	r3, #85	; 0x55
 8001144:	d001      	beq.n	800114a <KLine_Init+0x7e>
	{
		return OBD_NONE;
 8001146:	2300      	movs	r3, #0
 8001148:	e047      	b.n	80011da <KLine_Init+0x10e>
	}
	else if(uartBuf[1] == uartBuf[2])
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <KLine_Init+0x118>)
 800114c:	785a      	ldrb	r2, [r3, #1]
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <KLine_Init+0x118>)
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	429a      	cmp	r2, r3
 8001154:	d122      	bne.n	800119c <KLine_Init+0xd0>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <KLine_Init+0x118>)
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	43db      	mvns	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 8001160:	2019      	movs	r0, #25
 8001162:	f002 fa49 	bl	80035f8 <HAL_Delay>
			HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 8001166:	1df9      	adds	r1, r7, #7
 8001168:	2332      	movs	r3, #50	; 0x32
 800116a:	2201      	movs	r2, #1
 800116c:	481e      	ldr	r0, [pc, #120]	; (80011e8 <KLine_Init+0x11c>)
 800116e:	f007 fcc8 	bl	8008b02 <HAL_UART_Transmit>
			HAL_Delay(25);
 8001172:	2019      	movs	r0, #25
 8001174:	f002 fa40 	bl	80035f8 <HAL_Delay>
			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <KLine_Init+0x11c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	8b1b      	ldrh	r3, [r3, #24]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <KLine_Init+0x11c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0208 	orr.w	r2, r2, #8
 8001188:	b292      	uxth	r2, r2
 800118a:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	2201      	movs	r2, #1
 8001190:	4916      	ldr	r1, [pc, #88]	; (80011ec <KLine_Init+0x120>)
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <KLine_Init+0x11c>)
 8001194:	f007 fd49 	bl	8008c2a <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
			//kline_kb = uartBuf[1];
			return OBD_PROTO_ISO9141;
 8001198:	2301      	movs	r3, #1
 800119a:	e01e      	b.n	80011da <KLine_Init+0x10e>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <KLine_Init+0x118>)
 800119e:	785b      	ldrb	r3, [r3, #1]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 80011a6:	2019      	movs	r0, #25
 80011a8:	f002 fa26 	bl	80035f8 <HAL_Delay>
		HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 80011ac:	1db9      	adds	r1, r7, #6
 80011ae:	2332      	movs	r3, #50	; 0x32
 80011b0:	2201      	movs	r2, #1
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <KLine_Init+0x11c>)
 80011b4:	f007 fca5 	bl	8008b02 <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <KLine_Init+0x11c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	8b1b      	ldrh	r3, [r3, #24]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <KLine_Init+0x11c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0208 	orr.w	r2, r2, #8
 80011c8:	b292      	uxth	r2, r2
 80011ca:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	2201      	movs	r2, #1
 80011d0:	4906      	ldr	r1, [pc, #24]	; (80011ec <KLine_Init+0x120>)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <KLine_Init+0x11c>)
 80011d4:	f007 fd29 	bl	8008c2a <HAL_UART_Receive>
		return OBD_PROTO_KWP2000_SLOW;
 80011d8:	2302      	movs	r3, #2
	}
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000634 	.word	0x20000634
 80011e8:	20000568 	.word	0x20000568
 80011ec:	20000393 	.word	0x20000393

080011f0 <KWP2000_Fast_Init>:

obd_protocol KWP2000_Fast_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 80011f6:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <KWP2000_Fast_Init+0xc4>)
 80011f8:	463b      	mov	r3, r7
 80011fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	7019      	strb	r1, [r3, #0]
//	uint8_t resp_msg[7]={0};
	uint8_t checksum = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
	obd_comm.msg_type = 1;
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <KWP2000_Fast_Init+0xc8>)
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	HAL_UART_DeInit(&huart1);
 8001210:	482a      	ldr	r0, [pc, #168]	; (80012bc <KWP2000_Fast_Init+0xcc>)
 8001212:	f007 fc3d 	bl	8008a90 <HAL_UART_DeInit>
	HAL_Delay(3000);
 8001216:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800121a:	f002 f9ed 	bl	80035f8 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 800121e:	f000 f853 	bl	80012c8 <MX_GPIO_KLineUART_Init>
	UART_PIN_State(0);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f866 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(25);
 8001228:	2019      	movs	r0, #25
 800122a:	f002 f9e5 	bl	80035f8 <HAL_Delay>
	UART_PIN_State(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f000 f860 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(25);
 8001234:	2019      	movs	r0, #25
 8001236:	f002 f9df 	bl	80035f8 <HAL_Delay>
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800123a:	4820      	ldr	r0, [pc, #128]	; (80012bc <KWP2000_Fast_Init+0xcc>)
 800123c:	f007 fbda 	bl	80089f4 <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <KWP2000_Fast_Init+0x5a>
	{
		Error_Handler();
 8001246:	f001 fb07 	bl	8002858 <Error_Handler>
	}
//	MX_USART1_UART_Init(10400);
	HAL_UART_Transmit(&huart1, start_msg, 5, 10);
 800124a:	4639      	mov	r1, r7
 800124c:	230a      	movs	r3, #10
 800124e:	2205      	movs	r2, #5
 8001250:	481a      	ldr	r0, [pc, #104]	; (80012bc <KWP2000_Fast_Init+0xcc>)
 8001252:	f007 fc56 	bl	8008b02 <HAL_UART_Transmit>
//	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
//	HAL_Delay(20);

	HAL_UART_Receive_DMA(&huart1, uartBuf, 8);
 8001256:	2208      	movs	r2, #8
 8001258:	4919      	ldr	r1, [pc, #100]	; (80012c0 <KWP2000_Fast_Init+0xd0>)
 800125a:	4818      	ldr	r0, [pc, #96]	; (80012bc <KWP2000_Fast_Init+0xcc>)
 800125c:	f007 fdb6 	bl	8008dcc <HAL_UART_Receive_DMA>
	//HAL_TIM_Base_Start_IT(&htim6);

	while(obd_comm.msg_type != 0)
 8001260:	e000      	b.n	8001264 <KWP2000_Fast_Init+0x74>
	{
		__NOP();
 8001262:	bf00      	nop
	while(obd_comm.msg_type != 0)
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <KWP2000_Fast_Init+0xc8>)
 8001266:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <KWP2000_Fast_Init+0x72>
	}

	for(int i = 1; i < 7; i++)
 800126e:	2301      	movs	r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	e009      	b.n	8001288 <KWP2000_Fast_Init+0x98>
	{
		checksum = checksum + uartBuf[i];
 8001274:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <KWP2000_Fast_Init+0xd0>)
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4413      	add	r3, r2
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	4413      	add	r3, r2
 8001280:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < 7; i++)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3301      	adds	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b06      	cmp	r3, #6
 800128c:	ddf2      	ble.n	8001274 <KWP2000_Fast_Init+0x84>
	}
	checksum = checksum % 256;
	if(checksum == uartBuf[7] && checksum != 0)
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <KWP2000_Fast_Init+0xd0>)
 8001290:	79db      	ldrb	r3, [r3, #7]
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	429a      	cmp	r2, r3
 8001296:	d108      	bne.n	80012aa <KWP2000_Fast_Init+0xba>
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <KWP2000_Fast_Init+0xba>
	{
		ecu_addr = uartBuf[3];
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <KWP2000_Fast_Init+0xd0>)
 80012a0:	78da      	ldrb	r2, [r3, #3]
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <KWP2000_Fast_Init+0xd4>)
 80012a4:	701a      	strb	r2, [r3, #0]
		return OBD_PROTO_KWP2000_FAST;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e000      	b.n	80012ac <KWP2000_Fast_Init+0xbc>
	}
	else
		return OBD_NONE;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	0800d028 	.word	0x0800d028
 80012b8:	200006c0 	.word	0x200006c0
 80012bc:	20000568 	.word	0x20000568
 80012c0:	20000634 	.word	0x20000634
 80012c4:	20000393 	.word	0x20000393

080012c8 <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
 80012ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e8:	f004 fdea 	bl	8005ec0 <HAL_GPIO_Init>
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <UART_PIN_State>:

static void UART_PIN_State(uint8_t state)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10e      	bne.n	8001322 <UART_PIN_State+0x2e>
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f005 f843 	bl	8006398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f005 f83c 	bl	8006398 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}
 8001320:	e00d      	b.n	800133e <UART_PIN_State+0x4a>
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f005 f834 	bl	8006398 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f005 f82d 	bl	8006398 <HAL_GPIO_WritePin>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <KLine_SEND_MESSAGE>:

void KLine_SEND_MESSAGE(uint8_t *tx_frame)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001350:	2368      	movs	r3, #104	; 0x68
 8001352:	723b      	strb	r3, [r7, #8]
 8001354:	236a      	movs	r3, #106	; 0x6a
 8001356:	727b      	strb	r3, [r7, #9]
 8001358:	23f1      	movs	r3, #241	; 0xf1
 800135a:	72bb      	strb	r3, [r7, #10]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	72fb      	strb	r3, [r7, #11]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	733b      	strb	r3, [r7, #12]
 8001368:	2300      	movs	r3, #0
 800136a:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3301      	adds	r3, #1
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fe54 	bl	8002020 <PID_Get_Lenght>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <KLine_SEND_MESSAGE+0xa8>)
 800137e:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	e00a      	b.n	80013a0 <KLine_SEND_MESSAGE+0x58>
	{
		checksum += kline_msg[i];
 800138a:	f107 0208 	add.w	r2, r7, #8
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4413      	add	r3, r2
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	4413      	add	r3, r2
 8001398:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	3301      	adds	r3, #1
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d9f1      	bls.n	800138a <KLine_SEND_MESSAGE+0x42>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, kline_msg, sizeof(kline_msg), 12);
 80013aa:	f107 0108 	add.w	r1, r7, #8
 80013ae:	230c      	movs	r3, #12
 80013b0:	2206      	movs	r2, #6
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <KLine_SEND_MESSAGE+0xac>)
 80013b4:	f007 fba5 	bl	8008b02 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <KLine_SEND_MESSAGE+0xac>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	8b1b      	ldrh	r3, [r3, #24]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <KLine_SEND_MESSAGE+0xac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0208 	orr.w	r2, r2, #8
 80013c8:	b292      	uxth	r2, r2
 80013ca:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 4);
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <KLine_SEND_MESSAGE+0xa8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3304      	adds	r3, #4
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	4907      	ldr	r1, [pc, #28]	; (80013f8 <KLine_SEND_MESSAGE+0xb0>)
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <KLine_SEND_MESSAGE+0xac>)
 80013dc:	f007 fcf6 	bl	8008dcc <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80013e0:	203c      	movs	r0, #60	; 0x3c
 80013e2:	f002 f909 	bl	80035f8 <HAL_Delay>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000394 	.word	0x20000394
 80013f4:	20000568 	.word	0x20000568
 80013f8:	2000037c 	.word	0x2000037c

080013fc <KWP2000_SEND_MESSAGE>:

void KWP2000_SEND_MESSAGE(uint8_t *tx_frame)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, 0x33, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001404:	23c2      	movs	r3, #194	; 0xc2
 8001406:	723b      	strb	r3, [r7, #8]
 8001408:	2333      	movs	r3, #51	; 0x33
 800140a:	727b      	strb	r3, [r7, #9]
 800140c:	23f1      	movs	r3, #241	; 0xf1
 800140e:	72bb      	strb	r3, [r7, #10]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	72fb      	strb	r3, [r7, #11]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	733b      	strb	r3, [r7, #12]
 800141c:	2300      	movs	r3, #0
 800141e:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fdfa 	bl	8002020 <PID_Get_Lenght>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <KWP2000_SEND_MESSAGE+0xb4>)
 8001432:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]
	obd_comm.msg_type = 2;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <KWP2000_SEND_MESSAGE+0xb8>)
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	e00a      	b.n	800145c <KWP2000_SEND_MESSAGE+0x60>
	{
		checksum += kwp_msg[i];
 8001446:	f107 0208 	add.w	r2, r7, #8
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4413      	add	r3, r2
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	4413      	add	r3, r2
 8001454:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	3301      	adds	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2b04      	cmp	r3, #4
 8001460:	d9f1      	bls.n	8001446 <KWP2000_SEND_MESSAGE+0x4a>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	737b      	strb	r3, [r7, #13]

	HAL_Delay(20);
 8001466:	2014      	movs	r0, #20
 8001468:	f002 f8c6 	bl	80035f8 <HAL_Delay>

	HAL_UART_Transmit(&huart1, kwp_msg, sizeof(kwp_msg), 12);
 800146c:	f107 0108 	add.w	r1, r7, #8
 8001470:	230c      	movs	r3, #12
 8001472:	2206      	movs	r2, #6
 8001474:	4810      	ldr	r0, [pc, #64]	; (80014b8 <KWP2000_SEND_MESSAGE+0xbc>)
 8001476:	f007 fb44 	bl	8008b02 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <KWP2000_SEND_MESSAGE+0xbc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	8b1b      	ldrh	r3, [r3, #24]
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <KWP2000_SEND_MESSAGE+0xbc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0208 	orr.w	r2, r2, #8
 800148a:	b292      	uxth	r2, r2
 800148c:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 5);
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <KWP2000_SEND_MESSAGE+0xb4>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	3305      	adds	r3, #5
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <KWP2000_SEND_MESSAGE+0xc0>)
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <KWP2000_SEND_MESSAGE+0xbc>)
 800149e:	f007 fc95 	bl	8008dcc <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80014a2:	203c      	movs	r0, #60	; 0x3c
 80014a4:	f002 f8a8 	bl	80035f8 <HAL_Delay>
}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000394 	.word	0x20000394
 80014b4:	200006c0 	.word	0x200006c0
 80014b8:	20000568 	.word	0x20000568
 80014bc:	2000037c 	.word	0x2000037c

080014c0 <Verify_Checksum>:

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	e009      	b.n	80014ea <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	4413      	add	r3, r2
 80014e2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf0      	blt.n	80014d6 <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	429a      	cmp	r2, r3
 8001502:	d101      	bne.n	8001508 <Verify_Checksum+0x48>
	{
		return 1;
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <Verify_Checksum+0x4a>
	}
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(uint16_t baud_rate)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
  huart1.Instance = USART1;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <MX_USART1_UART_Init+0x6c>)
 8001526:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud_rate;
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <MX_USART1_UART_Init+0x68>)
 800152c:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART1_UART_Init+0x68>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART1_UART_Init+0x68>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART1_UART_Init+0x68>)
 800155a:	2201      	movs	r2, #1
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001560:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001568:	f007 fa44 	bl	80089f4 <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8001572:	f001 f971 	bl	8002858 <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000568 	.word	0x20000568
 8001584:	40013800 	.word	0x40013800

08001588 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	if(obd_comm.msg_type == 1)
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 8001592:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001596:	2b01      	cmp	r3, #1
 8001598:	d104      	bne.n	80015a4 <HAL_UART_RxCpltCallback+0x1c>
	{
		obd_comm.msg_type = 0;
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			HAL_IWDG_Refresh(&hiwdg);
		}
	}


}
 80015a2:	e03c      	b.n	800161e <HAL_UART_RxCpltCallback+0x96>
	else if (obd_comm.msg_type == 2)
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 80015a6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d137      	bne.n	800161e <HAL_UART_RxCpltCallback+0x96>
		if(Verify_Checksum(kline_rx_buf, pid_length + 5))
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_UART_RxCpltCallback+0xa4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3305      	adds	r3, #5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	481d      	ldr	r0, [pc, #116]	; (8001630 <HAL_UART_RxCpltCallback+0xa8>)
 80015ba:	f7ff ff81 	bl	80014c0 <Verify_Checksum>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d02c      	beq.n	800161e <HAL_UART_RxCpltCallback+0x96>
			uint8_t j = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 80015c8:	2302      	movs	r3, #2
 80015ca:	73bb      	strb	r3, [r7, #14]
 80015cc:	e00b      	b.n	80015e6 <HAL_UART_RxCpltCallback+0x5e>
				rx_frame[j] = kline_rx_buf[i];
 80015ce:	7bba      	ldrb	r2, [r7, #14]
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	4917      	ldr	r1, [pc, #92]	; (8001630 <HAL_UART_RxCpltCallback+0xa8>)
 80015d4:	5c89      	ldrb	r1, [r1, r2]
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HAL_UART_RxCpltCallback+0xac>)
 80015d8:	54d1      	strb	r1, [r2, r3]
				j++;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	3301      	adds	r3, #1
 80015e4:	73bb      	strb	r3, [r7, #14]
 80015e6:	7bba      	ldrb	r2, [r7, #14]
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_UART_RxCpltCallback+0xa4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3304      	adds	r3, #4
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dded      	ble.n	80015ce <HAL_UART_RxCpltCallback+0x46>
			obd_comm.msg_type = 0;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <HAL_UART_RxCpltCallback+0xac>)
 80015fc:	f000 f8b4 	bl	8001768 <OBD2_PID_Parse>
 8001600:	eef0 7a40 	vmov.f32	s15, s0
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 8001606:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			OBD2_ShowOnDisplay(obd_comm.current_value);
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 800160c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f000 fc9e 	bl	8001f54 <OBD2_ShowOnDisplay>
			HAL_IWDG_Refresh(&hiwdg);
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <HAL_UART_RxCpltCallback+0xb0>)
 800161a:	f005 fbc9 	bl	8006db0 <HAL_IWDG_Refresh>
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200006c0 	.word	0x200006c0
 800162c:	20000394 	.word	0x20000394
 8001630:	2000037c 	.word	0x2000037c
 8001634:	2000038c 	.word	0x2000038c
 8001638:	200004c0 	.word	0x200004c0

0800163c <OBD2_PID_Decode>:
//	strcat(txTest2, "\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t *)txTest2, sizeof(txTest2),10);
//}

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	int number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3303      	adds	r3, #3
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	061a      	lsls	r2, r3, #24
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3304      	adds	r3, #4
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3305      	adds	r3, #5
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	4313      	orrs	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	3206      	adds	r2, #6
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 800166e:	231f      	movs	r3, #31
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	e030      	b.n	80016d6 <OBD2_PID_Decode+0x9a>
	{
		int digit = number >> i;
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	fa42 f303 	asr.w	r3, r2, r3
 800167c:	60bb      	str	r3, [r7, #8]
		digit &= 1;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
		if(obd_comm.pid == 0x00)
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <OBD2_PID_Decode+0xb0>)
 8001688:	785b      	ldrb	r3, [r3, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <OBD2_PID_Decode+0x64>
		{
			obd_comm.available_pids_1[j] = digit;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	b2d9      	uxtb	r1, r3
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <OBD2_PID_Decode+0xb0>)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4413      	add	r3, r2
 8001698:	3303      	adds	r3, #3
 800169a:	460a      	mov	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e014      	b.n	80016ca <OBD2_PID_Decode+0x8e>
		}
		else if(obd_comm.pid == 0x20)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <OBD2_PID_Decode+0xb0>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	2b20      	cmp	r3, #32
 80016a6:	d108      	bne.n	80016ba <OBD2_PID_Decode+0x7e>
		{
			obd_comm.available_pids_2[j] = digit;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	b2d9      	uxtb	r1, r3
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <OBD2_PID_Decode+0xb0>)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	4413      	add	r3, r2
 80016b2:	3323      	adds	r3, #35	; 0x23
 80016b4:	460a      	mov	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <OBD2_PID_Decode+0x8e>
		}
		else
		{
			obd_comm.available_pids_3[j] = digit;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	b2d9      	uxtb	r1, r3
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <OBD2_PID_Decode+0xb0>)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	4413      	add	r3, r2
 80016c4:	3343      	adds	r3, #67	; 0x43
 80016c6:	460a      	mov	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dacb      	bge.n	8001674 <OBD2_PID_Decode+0x38>
	}
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200006c0 	.word	0x200006c0

080016f0 <OBD2_Request>:

void OBD2_Request(OBD obd)
{
 80016f0:	b084      	sub	sp, #16
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	f107 0c18 	add.w	ip, r7, #24
 80016fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(10);
 8001700:	200a      	movs	r0, #10
 8001702:	f001 ff79 	bl	80035f8 <HAL_Delay>
	if(obd.used_protocol == OBD_PROTO_CAN)
 8001706:	7e3b      	ldrb	r3, [r7, #24]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d115      	bne.n	8001738 <OBD2_Request+0x48>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 800170c:	2302      	movs	r3, #2
 800170e:	723b      	strb	r3, [r7, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	727b      	strb	r3, [r7, #9]
 8001714:	7e7b      	ldrb	r3, [r7, #25]
 8001716:	72bb      	strb	r3, [r7, #10]
 8001718:	2300      	movs	r3, #0
 800171a:	72fb      	strb	r3, [r7, #11]
 800171c:	2300      	movs	r3, #0
 800171e:	733b      	strb	r3, [r7, #12]
 8001720:	2300      	movs	r3, #0
 8001722:	737b      	strb	r3, [r7, #13]
 8001724:	2300      	movs	r3, #0
 8001726:	73bb      	strb	r3, [r7, #14]
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
		CAN_SEND_MESSAGE(tx_data_CAN);
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fc9b 	bl	800106c <CAN_SEND_MESSAGE>
		else
		{
			KWP2000_SEND_MESSAGE(tx_data_ISO);
		}
	}
}
 8001736:	e00f      	b.n	8001758 <OBD2_Request+0x68>
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 8001738:	2301      	movs	r3, #1
 800173a:	713b      	strb	r3, [r7, #4]
 800173c:	7e7b      	ldrb	r3, [r7, #25]
 800173e:	717b      	strb	r3, [r7, #5]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 8001740:	7e3b      	ldrb	r3, [r7, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d104      	bne.n	8001750 <OBD2_Request+0x60>
			KLine_SEND_MESSAGE(tx_data_ISO);
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fdfd 	bl	8001348 <KLine_SEND_MESSAGE>
}
 800174e:	e003      	b.n	8001758 <OBD2_Request+0x68>
			KWP2000_SEND_MESSAGE(tx_data_ISO);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe52 	bl	80013fc <KWP2000_SEND_MESSAGE>
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001762:	b004      	add	sp, #16
 8001764:	4770      	bx	lr
	...

08001768 <OBD2_PID_Parse>:

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3302      	adds	r3, #2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2ba6      	cmp	r3, #166	; 0xa6
 800177e:	f200 83b2 	bhi.w	8001ee6 <OBD2_PID_Parse+0x77e>
 8001782:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <OBD2_PID_Parse+0x20>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	08001a25 	.word	0x08001a25
 800178c:	08001ee7 	.word	0x08001ee7
 8001790:	08001ee7 	.word	0x08001ee7
 8001794:	08001ee7 	.word	0x08001ee7
 8001798:	08001a33 	.word	0x08001a33
 800179c:	08001a3b 	.word	0x08001a3b
 80017a0:	08001a51 	.word	0x08001a51
 80017a4:	08001a51 	.word	0x08001a51
 80017a8:	08001a51 	.word	0x08001a51
 80017ac:	08001a51 	.word	0x08001a51
 80017b0:	08001a57 	.word	0x08001a57
 80017b4:	08001a73 	.word	0x08001a73
 80017b8:	08001a87 	.word	0x08001a87
 80017bc:	08001aad 	.word	0x08001aad
 80017c0:	08001ac1 	.word	0x08001ac1
 80017c4:	08001adb 	.word	0x08001adb
 80017c8:	08001af1 	.word	0x08001af1
 80017cc:	08001b1b 	.word	0x08001b1b
 80017d0:	08001ee7 	.word	0x08001ee7
 80017d4:	08001ee7 	.word	0x08001ee7
 80017d8:	08001b23 	.word	0x08001b23
 80017dc:	08001b23 	.word	0x08001b23
 80017e0:	08001b23 	.word	0x08001b23
 80017e4:	08001b23 	.word	0x08001b23
 80017e8:	08001b23 	.word	0x08001b23
 80017ec:	08001b23 	.word	0x08001b23
 80017f0:	08001b23 	.word	0x08001b23
 80017f4:	08001b23 	.word	0x08001b23
 80017f8:	08001ee7 	.word	0x08001ee7
 80017fc:	08001ee7 	.word	0x08001ee7
 8001800:	08001ee7 	.word	0x08001ee7
 8001804:	08001b41 	.word	0x08001b41
 8001808:	08001b5f 	.word	0x08001b5f
 800180c:	08001b41 	.word	0x08001b41
 8001810:	08001b6d 	.word	0x08001b6d
 8001814:	08001b9d 	.word	0x08001b9d
 8001818:	08001bc3 	.word	0x08001bc3
 800181c:	08001bc3 	.word	0x08001bc3
 8001820:	08001bc3 	.word	0x08001bc3
 8001824:	08001bc3 	.word	0x08001bc3
 8001828:	08001bc3 	.word	0x08001bc3
 800182c:	08001bc3 	.word	0x08001bc3
 8001830:	08001bc3 	.word	0x08001bc3
 8001834:	08001bc3 	.word	0x08001bc3
 8001838:	08001bcb 	.word	0x08001bcb
 800183c:	08001bd3 	.word	0x08001bd3
 8001840:	08001bd9 	.word	0x08001bd9
 8001844:	08001bd9 	.word	0x08001bd9
 8001848:	08001be1 	.word	0x08001be1
 800184c:	08001bf5 	.word	0x08001bf5
 8001850:	08001c13 	.word	0x08001c13
 8001854:	08001c39 	.word	0x08001c39
 8001858:	08001c4d 	.word	0x08001c4d
 800185c:	08001c4d 	.word	0x08001c4d
 8001860:	08001c4d 	.word	0x08001c4d
 8001864:	08001c4d 	.word	0x08001c4d
 8001868:	08001c4d 	.word	0x08001c4d
 800186c:	08001c4d 	.word	0x08001c4d
 8001870:	08001c4d 	.word	0x08001c4d
 8001874:	08001c4d 	.word	0x08001c4d
 8001878:	08001c55 	.word	0x08001c55
 800187c:	08001c55 	.word	0x08001c55
 8001880:	08001c55 	.word	0x08001c55
 8001884:	08001c55 	.word	0x08001c55
 8001888:	08001c81 	.word	0x08001c81
 800188c:	08001ee7 	.word	0x08001ee7
 8001890:	08001c8f 	.word	0x08001c8f
 8001894:	08001cb9 	.word	0x08001cb9
 8001898:	08001cc1 	.word	0x08001cc1
 800189c:	08001cc9 	.word	0x08001cc9
 80018a0:	08001cd1 	.word	0x08001cd1
 80018a4:	08001ce7 	.word	0x08001ce7
 80018a8:	08001ce7 	.word	0x08001ce7
 80018ac:	08001ce7 	.word	0x08001ce7
 80018b0:	08001ce7 	.word	0x08001ce7
 80018b4:	08001ce7 	.word	0x08001ce7
 80018b8:	08001ce7 	.word	0x08001ce7
 80018bc:	08001cef 	.word	0x08001cef
 80018c0:	08001cef 	.word	0x08001cef
 80018c4:	08001d0d 	.word	0x08001d0d
 80018c8:	08001ee7 	.word	0x08001ee7
 80018cc:	08001ee7 	.word	0x08001ee7
 80018d0:	08001d21 	.word	0x08001d21
 80018d4:	08001d3d 	.word	0x08001d3d
 80018d8:	08001d6f 	.word	0x08001d6f
 80018dc:	08001d93 	.word	0x08001d93
 80018e0:	08001d93 	.word	0x08001d93
 80018e4:	08001d93 	.word	0x08001d93
 80018e8:	08001d93 	.word	0x08001d93
 80018ec:	08001d99 	.word	0x08001d99
 80018f0:	08001db7 	.word	0x08001db7
 80018f4:	08001db7 	.word	0x08001db7
 80018f8:	08001dbf 	.word	0x08001dbf
 80018fc:	08001dd5 	.word	0x08001dd5
 8001900:	08001ddb 	.word	0x08001ddb
 8001904:	08001ee7 	.word	0x08001ee7
 8001908:	08001ee7 	.word	0x08001ee7
 800190c:	08001e0d 	.word	0x08001e0d
 8001910:	08001e0d 	.word	0x08001e0d
 8001914:	08001e23 	.word	0x08001e23
 8001918:	08001e41 	.word	0x08001e41
 800191c:	08001ee7 	.word	0x08001ee7
 8001920:	08001e57 	.word	0x08001e57
 8001924:	08001e5f 	.word	0x08001e5f
 8001928:	08001e5f 	.word	0x08001e5f
 800192c:	08001ee7 	.word	0x08001ee7
 8001930:	08001ee7 	.word	0x08001ee7
 8001934:	08001ee7 	.word	0x08001ee7
 8001938:	08001ee7 	.word	0x08001ee7
 800193c:	08001ee7 	.word	0x08001ee7
 8001940:	08001ee7 	.word	0x08001ee7
 8001944:	08001ee7 	.word	0x08001ee7
 8001948:	08001ee7 	.word	0x08001ee7
 800194c:	08001ee7 	.word	0x08001ee7
 8001950:	08001ee7 	.word	0x08001ee7
 8001954:	08001ee7 	.word	0x08001ee7
 8001958:	08001ee7 	.word	0x08001ee7
 800195c:	08001ee7 	.word	0x08001ee7
 8001960:	08001ee7 	.word	0x08001ee7
 8001964:	08001ee7 	.word	0x08001ee7
 8001968:	08001ee7 	.word	0x08001ee7
 800196c:	08001ee7 	.word	0x08001ee7
 8001970:	08001ee7 	.word	0x08001ee7
 8001974:	08001ee7 	.word	0x08001ee7
 8001978:	08001e75 	.word	0x08001e75
 800197c:	08001ee7 	.word	0x08001ee7
 8001980:	08001ee7 	.word	0x08001ee7
 8001984:	08001ee7 	.word	0x08001ee7
 8001988:	08001ee7 	.word	0x08001ee7
 800198c:	08001ee7 	.word	0x08001ee7
 8001990:	08001ee7 	.word	0x08001ee7
 8001994:	08001ee7 	.word	0x08001ee7
 8001998:	08001ee7 	.word	0x08001ee7
 800199c:	08001ee7 	.word	0x08001ee7
 80019a0:	08001ee7 	.word	0x08001ee7
 80019a4:	08001ee7 	.word	0x08001ee7
 80019a8:	08001ee7 	.word	0x08001ee7
 80019ac:	08001ee7 	.word	0x08001ee7
 80019b0:	08001ee7 	.word	0x08001ee7
 80019b4:	08001ee7 	.word	0x08001ee7
 80019b8:	08001ee7 	.word	0x08001ee7
 80019bc:	08001ee7 	.word	0x08001ee7
 80019c0:	08001ee7 	.word	0x08001ee7
 80019c4:	08001ee7 	.word	0x08001ee7
 80019c8:	08001ee7 	.word	0x08001ee7
 80019cc:	08001ee7 	.word	0x08001ee7
 80019d0:	08001ee7 	.word	0x08001ee7
 80019d4:	08001ee7 	.word	0x08001ee7
 80019d8:	08001ee7 	.word	0x08001ee7
 80019dc:	08001ee7 	.word	0x08001ee7
 80019e0:	08001ee7 	.word	0x08001ee7
 80019e4:	08001ee7 	.word	0x08001ee7
 80019e8:	08001ee7 	.word	0x08001ee7
 80019ec:	08001ee7 	.word	0x08001ee7
 80019f0:	08001ee7 	.word	0x08001ee7
 80019f4:	08001ee7 	.word	0x08001ee7
 80019f8:	08001ee7 	.word	0x08001ee7
 80019fc:	08001ee7 	.word	0x08001ee7
 8001a00:	08001ee7 	.word	0x08001ee7
 8001a04:	08001ee7 	.word	0x08001ee7
 8001a08:	08001ee7 	.word	0x08001ee7
 8001a0c:	08001ee7 	.word	0x08001ee7
 8001a10:	08001ee7 	.word	0x08001ee7
 8001a14:	08001ee7 	.word	0x08001ee7
 8001a18:	08001ee7 	.word	0x08001ee7
 8001a1c:	08001ee7 	.word	0x08001ee7
 8001a20:	08001ea1 	.word	0x08001ea1
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fe09 	bl	800163c <OBD2_PID_Decode>
		value = 0;
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
		break;
 8001a30:	e259      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
		break;
 8001a38:	e255      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3303      	adds	r3, #3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3b28      	subs	r3, #40	; 0x28
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a4e:	e24a      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001a50:	4bb7      	ldr	r3, [pc, #732]	; (8001d30 <OBD2_PID_Parse+0x5c8>)
 8001a52:	60fb      	str	r3, [r7, #12]
		break;
 8001a54:	e247      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3303      	adds	r3, #3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a70:	e239      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3303      	adds	r3, #3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a80:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a84:	e22f      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3303      	adds	r3, #3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	3204      	adds	r2, #4
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	da00      	bge.n	8001a9c <OBD2_PID_Parse+0x334>
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	109b      	asrs	r3, r3, #2
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aaa:	e21c      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aba:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001abe:	e212      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3b40      	subs	r3, #64	; 0x40
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ad8:	e205      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3303      	adds	r3, #3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3b28      	subs	r3, #40	; 0x28
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aee:	e1fa      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3303      	adds	r3, #3
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	3204      	adds	r2, #4
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	4a8c      	ldr	r2, [pc, #560]	; (8001d34 <OBD2_PID_Parse+0x5cc>)
 8001b02:	fb82 1203 	smull	r1, r2, r2, r3
 8001b06:	1152      	asrs	r2, r2, #5
 8001b08:	17db      	asrs	r3, r3, #31
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b14:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b18:	e1e5      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
		break;
 8001b20:	e1e1      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3303      	adds	r3, #3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4a82      	ldr	r2, [pc, #520]	; (8001d34 <OBD2_PID_Parse+0x5cc>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b3e:	e1d2      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3303      	adds	r3, #3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	3204      	adds	r2, #4
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b58:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b5c:	e1c3      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fd6c 	bl	800163c <OBD2_PID_Decode>
		value = 0;
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
		break;
 8001b6a:	e1bc      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3303      	adds	r3, #3
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	3204      	adds	r2, #4
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fcd1 	bl	8000524 <__aeabi_i2d>
 8001b82:	a369      	add	r3, pc, #420	; (adr r3, 8001d28 <OBD2_PID_Parse+0x5c0>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fd36 	bl	80005f8 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7ff f808 	bl	8000ba8 <__aeabi_d2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	3204      	adds	r2, #4
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001bc0:	e191      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
		break;
 8001bc8:	e18d      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
		break;
 8001bd0:	e189      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001bd2:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <OBD2_PID_Parse+0x5c8>)
 8001bd4:	60fb      	str	r3, [r7, #12]
		break;
 8001bd6:	e186      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
		break;
 8001bde:	e182      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3303      	adds	r3, #3
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bee:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001bf2:	e178      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3303      	adds	r3, #3
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	3204      	adds	r2, #4
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c10:	e169      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3303      	adds	r3, #3
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	3204      	adds	r2, #4
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da00      	bge.n	8001c28 <OBD2_PID_Parse+0x4c0>
 8001c26:	3303      	adds	r3, #3
 8001c28:	109b      	asrs	r3, r3, #2
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c32:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c36:	e156      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3303      	adds	r3, #3
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c46:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c4a:	e14c      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
		break;
 8001c52:	e148      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3303      	adds	r3, #3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	3204      	adds	r2, #4
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	4a33      	ldr	r2, [pc, #204]	; (8001d34 <OBD2_PID_Parse+0x5cc>)
 8001c66:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6a:	1152      	asrs	r2, r2, #5
 8001c6c:	17db      	asrs	r3, r3, #31
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	3b28      	subs	r3, #40	; 0x28
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c7e:	e132      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fcdb 	bl	800163c <OBD2_PID_Decode>
		value = 0;
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
		break;
 8001c8c:	e12b      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3303      	adds	r3, #3
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	3204      	adds	r2, #4
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	4a26      	ldr	r2, [pc, #152]	; (8001d38 <OBD2_PID_Parse+0x5d0>)
 8001ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca4:	1192      	asrs	r2, r2, #6
 8001ca6:	17db      	asrs	r3, r3, #31
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cb6:	e116      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
		break;
 8001cbe:	e112      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
		break;
 8001cc6:	e10e      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
		break;
 8001cce:	e10a      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3303      	adds	r3, #3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3b28      	subs	r3, #40	; 0x28
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ce4:	e0ff      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
		break;
 8001cec:	e0fb      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	3204      	adds	r2, #4
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d06:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d0a:	e0ec      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3303      	adds	r3, #3
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d1a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d1e:	e0e2      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
		break;
 8001d26:	e0de      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
 8001d28:	10624dd3 	.word	0x10624dd3
 8001d2c:	3fb43958 	.word	0x3fb43958
 8001d30:	c2c80000 	.word	0xc2c80000
 8001d34:	51eb851f 	.word	0x51eb851f
 8001d38:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	3204      	adds	r2, #4
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbe9 	bl	8000524 <__aeabi_i2d>
 8001d52:	a370      	add	r3, pc, #448	; (adr r3, 8001f14 <OBD2_PID_Parse+0x7ac>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fc4e 	bl	80005f8 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe ff20 	bl	8000ba8 <__aeabi_d2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]
		break;
 8001d6c:	e0bb      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3303      	adds	r3, #3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	3204      	adds	r2, #4
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001d82:	3b7f      	subs	r3, #127	; 0x7f
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d90:	e0a9      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <OBD2_PID_Parse+0x7a0>)
 8001d94:	60fb      	str	r3, [r7, #12]
		break;
 8001d96:	e0a6      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	3204      	adds	r2, #4
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001db4:	e097      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
		break;
 8001dbc:	e093      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3303      	adds	r3, #3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	3b28      	subs	r3, #40	; 0x28
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dce:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001dd2:	e088      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <OBD2_PID_Parse+0x7a4>)
 8001dd6:	60fb      	str	r3, [r7, #12]
		break;
 8001dd8:	e085      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3303      	adds	r3, #3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	3204      	adds	r2, #4
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb9a 	bl	8000524 <__aeabi_i2d>
 8001df0:	a341      	add	r3, pc, #260	; (adr r3, 8001ef8 <OBD2_PID_Parse+0x790>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fbff 	bl	80005f8 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f7fe fed1 	bl	8000ba8 <__aeabi_d2f>
 8001e06:	4603      	mov	r3, r0
 8001e08:	60fb      	str	r3, [r7, #12]
		break;
 8001e0a:	e06c      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3303      	adds	r3, #3
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	3b7d      	subs	r3, #125	; 0x7d
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e20:	e061      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3303      	adds	r3, #3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	3204      	adds	r2, #4
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e3e:	e052      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3303      	adds	r3, #3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	3b7d      	subs	r3, #125	; 0x7d
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e50:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e54:	e047      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
		break;
 8001e5c:	e043      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3303      	adds	r3, #3
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3b28      	subs	r3, #40	; 0x28
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e72:	e038      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3303      	adds	r3, #3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	3204      	adds	r2, #4
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <OBD2_PID_Parse+0x7a8>)
 8001e86:	fb82 1203 	smull	r1, r2, r2, r3
 8001e8a:	1152      	asrs	r2, r2, #5
 8001e8c:	17db      	asrs	r3, r3, #31
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	3b28      	subs	r3, #40	; 0x28
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e9e:	e022      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3303      	adds	r3, #3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	061a      	lsls	r2, r3, #24
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3305      	adds	r3, #5
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	3206      	adds	r2, #6
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb2d 	bl	8000524 <__aeabi_i2d>
 8001eca:	a30d      	add	r3, pc, #52	; (adr r3, 8001f00 <OBD2_PID_Parse+0x798>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe fb92 	bl	80005f8 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fe64 	bl	8000ba8 <__aeabi_d2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
		break;
 8001ee4:	bf00      	nop
	}
	return value;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	ee07 3a90 	vmov	s15, r3
}
 8001eec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	9999999a 	.word	0x9999999a
 8001efc:	3fa99999 	.word	0x3fa99999
 8001f00:	9999999a 	.word	0x9999999a
 8001f04:	3fb99999 	.word	0x3fb99999
 8001f08:	c2c80000 	.word	0xc2c80000
 8001f0c:	c3520000 	.word	0xc3520000
 8001f10:	51eb851f 	.word	0x51eb851f
 8001f14:	47ae147b 	.word	0x47ae147b
 8001f18:	3f747ae1 	.word	0x3f747ae1

08001f1c <OBD2_Init>:

obd_protocol OBD2_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
	obd_protocol used_protocol = KLine_Init();
 8001f22:	f7ff f8d3 	bl	80010cc <KLine_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	if(used_protocol == OBD_NONE)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10c      	bne.n	8001f4a <OBD2_Init+0x2e>
	{
		used_protocol = KWP2000_Fast_Init();
 8001f30:	f7ff f95e 	bl	80011f0 <KWP2000_Fast_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
		if(used_protocol == OBD_NONE)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <OBD2_Init+0x2e>
		{
			used_protocol = OBD_PROTO_CAN;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	71fb      	strb	r3, [r7, #7]
			//HAL_DMA_DeInit(&hdma_usart1_rx);
			MX_CAN1_Init();
 8001f42:	f7ff f803 	bl	8000f4c <MX_CAN1_Init>
			canConfig();
 8001f46:	f7ff f837 	bl	8000fb8 <canConfig>
		}
	}
	return used_protocol;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <OBD2_ShowOnDisplay>:

void OBD2_ShowOnDisplay(float value)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b094      	sub	sp, #80	; 0x50
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	char str2[13];
	char str3[32];
	Get_Name(obd_comm.pid_index, str3);
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <OBD2_ShowOnDisplay+0xb0>)
 8001f60:	789b      	ldrb	r3, [r3, #2]
 8001f62:	f107 020c 	add.w	r2, r7, #12
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f879 	bl	8002060 <Get_Name>
	//char str3 = Get_Name(obd_comm.pid_index);
	snprintf(str, 10, "%f", value);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe faea 	bl	8000548 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001f7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001f80:	4a21      	ldr	r2, [pc, #132]	; (8002008 <OBD2_ShowOnDisplay+0xb4>)
 8001f82:	210a      	movs	r1, #10
 8001f84:	f008 fd9e 	bl	800aac4 <sniprintf>
	snprintf(str2, 13, "BAT %.2f V", obd_comm.voltage);
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <OBD2_ShowOnDisplay+0xb0>)
 8001f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fadb 	bl	8000548 <__aeabi_f2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f9a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	; (800200c <OBD2_ShowOnDisplay+0xb8>)
 8001fa0:	210d      	movs	r1, #13
 8001fa2:	f008 fd8f 	bl	800aac4 <sniprintf>
	ssd1306_SetCursor(0,0);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f001 fa5b 	bl	8003464 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f001 f90a 	bl	80031c8 <ssd1306_Fill>
	ssd1306_WriteString(pid_names[obd_comm.pid_index], Font_7x10, White);
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <OBD2_ShowOnDisplay+0xb0>)
 8001fb6:	789b      	ldrb	r3, [r3, #2]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <OBD2_ShowOnDisplay+0xbc>)
 8001fbc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <OBD2_ShowOnDisplay+0xc0>)
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	ca06      	ldmia	r2, {r1, r2}
 8001fc6:	f001 fa27 	bl	8003418 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 12);
 8001fca:	210c      	movs	r1, #12
 8001fcc:	2028      	movs	r0, #40	; 0x28
 8001fce:	f001 fa49 	bl	8003464 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, White);
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <OBD2_ShowOnDisplay+0xc4>)
 8001fd4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001fd8:	2301      	movs	r3, #1
 8001fda:	ca06      	ldmia	r2, {r1, r2}
 8001fdc:	f001 fa1c 	bl	8003418 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 8001fe0:	2128      	movs	r1, #40	; 0x28
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f001 fa3e 	bl	8003464 <ssd1306_SetCursor>
	ssd1306_WriteString(str2, Font_11x18, White);
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	; (800201c <OBD2_ShowOnDisplay+0xc8>)
 8001fea:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001fee:	2301      	movs	r3, #1
 8001ff0:	ca06      	ldmia	r2, {r1, r2}
 8001ff2:	f001 fa11 	bl	8003418 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ff6:	f001 f90b 	bl	8003210 <ssd1306_UpdateScreen>
}
 8001ffa:	bf00      	nop
 8001ffc:	3748      	adds	r7, #72	; 0x48
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200006c0 	.word	0x200006c0
 8002008:	0800d030 	.word	0x0800d030
 800200c:	0800d034 	.word	0x0800d034
 8002010:	20000000 	.word	0x20000000
 8002014:	2000016c 	.word	0x2000016c
 8002018:	2000017c 	.word	0x2000017c
 800201c:	20000174 	.word	0x20000174

08002020 <PID_Get_Lenght>:
		[0x7C] = { 3 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 5 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	return PID_LUT[pid][0];
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <PID_Get_Lenght+0x1c>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	0800d610 	.word	0x0800d610

08002040 <Get_PID>:

uint8_t Get_PID(uint8_t index)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
	return PID_list[index];
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <Get_PID+0x1c>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	0800d5b4 	.word	0x0800d5b4

08002060 <Get_Name>:
void Get_Name(uint8_t index, char *name)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
	name = pid_names[index];
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <Get_Name+0x24>)
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	603b      	str	r3, [r7, #0]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_GPIO_EXTI_Callback>:
extern TIM_HandleTypeDef htim1;
extern OBD obd_comm;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MENU_BTN_Pin)
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	2b40      	cmp	r3, #64	; 0x40
 8002096:	d107      	bne.n	80020a8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8002098:	4806      	ldr	r0, [pc, #24]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 800209a:	f006 f895 	bl	80081c8 <HAL_TIM_Base_Start_IT>
		obd_comm.button_state = 0;
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_GPIO_EXTI_Callback+0x30>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	}
	else
	{
		__NOP();
	}
}
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x22>
		__NOP();
 80020a8:	bf00      	nop
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200004d0 	.word	0x200004d0
 80020b8:	200006c0 	.word	0x200006c0

080020bc <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim6;
extern OBD obd_comm;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d124      	bne.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		if(HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin)== GPIO_PIN_SET)
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	481a      	ldr	r0, [pc, #104]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020d2:	f004 f949 	bl	8006368 <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d11d      	bne.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			obd_comm.button_state = 1;
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			if(obd_comm.pid_index == 89)
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020e6:	789b      	ldrb	r3, [r3, #2]
 80020e8:	2b59      	cmp	r3, #89	; 0x59
 80020ea:	d103      	bne.n	80020f4 <HAL_TIM_PeriodElapsedCallback+0x38>
			{
				obd_comm.pid_index = 0;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	709a      	strb	r2, [r3, #2]
 80020f2:	e005      	b.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x44>
			}
			else
			{
				obd_comm.pid_index++;
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020f6:	789b      	ldrb	r3, [r3, #2]
 80020f8:	3301      	adds	r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020fe:	709a      	strb	r2, [r3, #2]
			}
			obd_comm.pid = Get_PID(obd_comm.pid_index);
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002102:	789b      	ldrb	r3, [r3, #2]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff9b 	bl	8002040 <Get_PID>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002110:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim1);
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002114:	f006 f8ac 	bl	8008270 <HAL_TIM_Base_Stop_IT>
		}
	}
	if(htim->Instance == TIM6)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d106      	bne.n	8002130 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		obd_comm.msg_type = 0;
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		HAL_TIM_Base_Stop_IT(&htim6);
 800212a:	4808      	ldr	r0, [pc, #32]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800212c:	f006 f8a0 	bl	8008270 <HAL_TIM_Base_Stop_IT>
	}
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40012c00 	.word	0x40012c00
 800213c:	48000400 	.word	0x48000400
 8002140:	200006c0 	.word	0x200006c0
 8002144:	200004d0 	.word	0x200004d0
 8002148:	40001000 	.word	0x40001000
 800214c:	2000051c 	.word	0x2000051c

08002150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b09b      	sub	sp, #108	; 0x6c
 8002154:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE BEGIN 1 */
	uint32_t timer_adc = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800215a:	f001 f9d9 	bl	8003510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800215e:	f000 f8c5 	bl	80022ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002162:	f000 fa89 	bl	8002678 <MX_GPIO_Init>
  MX_DMA_Init();
 8002166:	f000 fa61 	bl	800262c <MX_DMA_Init>
  MX_I2C2_Init();
 800216a:	f000 f975 	bl	8002458 <MX_I2C2_Init>
  MX_TIM1_Init();
 800216e:	f000 f9d1 	bl	8002514 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002172:	f000 f90d 	bl	8002390 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002176:	f000 fa21 	bl	80025bc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 800217a:	f000 ffbb 	bl	80030f4 <ssd1306_Init>
  ssd1306_Fill(Black);
 800217e:	2000      	movs	r0, #0
 8002180:	f001 f822 	bl	80031c8 <ssd1306_Fill>
  ssd1306_SetCursor(28, 0);
 8002184:	2100      	movs	r1, #0
 8002186:	201c      	movs	r0, #28
 8002188:	f001 f96c 	bl	8003464 <ssd1306_SetCursor>
  ssd1306_WriteString("Initialization", Font_7x10, White);
 800218c:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <main+0x188>)
 800218e:	2301      	movs	r3, #1
 8002190:	ca06      	ldmia	r2, {r1, r2}
 8002192:	4852      	ldr	r0, [pc, #328]	; (80022dc <main+0x18c>)
 8002194:	f001 f940 	bl	8003418 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002198:	f001 f83a 	bl	8003210 <ssd1306_UpdateScreen>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800219c:	217f      	movs	r1, #127	; 0x7f
 800219e:	4850      	ldr	r0, [pc, #320]	; (80022e0 <main+0x190>)
 80021a0:	f002 fbac 	bl	80048fc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 64);
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	494f      	ldr	r1, [pc, #316]	; (80022e4 <main+0x194>)
 80021a8:	484d      	ldr	r0, [pc, #308]	; (80022e0 <main+0x190>)
 80021aa:	f001 fd7f 	bl	8003cac <HAL_ADC_Start_DMA>

    while(obd_comm.voltage <= 12.9)
 80021ae:	e01a      	b.n	80021e6 <main+0x96>
    {
  	  if((HAL_GetTick() - timer_adc) >= ADC_SAMPLE_TIME)
 80021b0:	f001 fa16 	bl	80035e0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021be:	d30a      	bcc.n	80021d6 <main+0x86>
  	  {
  		  obd_comm.voltage = ADC_Average(adc_buffer);
 80021c0:	4848      	ldr	r0, [pc, #288]	; (80022e4 <main+0x194>)
 80021c2:	f000 fae1 	bl	8002788 <ADC_Average>
 80021c6:	eef0 7a40 	vmov.f32	s15, s0
 80021ca:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <main+0x198>)
 80021cc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
  		  timer_adc = HAL_GetTick();
 80021d0:	f001 fa06 	bl	80035e0 <HAL_GetTick>
 80021d4:	6078      	str	r0, [r7, #4]
  	  }
  	  if(ssd1306_GetDisplayOn())
 80021d6:	f001 f98f 	bl	80034f8 <ssd1306_GetDisplayOn>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <main+0x96>
  	  {
  		 ssd1306_SetDisplayOn(0);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f001 f96b 	bl	80034bc <ssd1306_SetDisplayOn>
    while(obd_comm.voltage <= 12.9)
 80021e6:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <main+0x198>)
 80021e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f9ac 	bl	8000548 <__aeabi_f2d>
 80021f0:	a337      	add	r3, pc, #220	; (adr r3, 80022d0 <main+0x180>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe fc7b 	bl	8000af0 <__aeabi_dcmple>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1d7      	bne.n	80021b0 <main+0x60>
  	  }
    }

    ssd1306_SetDisplayOn(1);
 8002200:	2001      	movs	r0, #1
 8002202:	f001 f95b 	bl	80034bc <ssd1306_SetDisplayOn>

    timer_adc = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]

  obd_comm.button_state = 1;
 800220a:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <main+0x198>)
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

  obd_comm.used_protocol = OBD2_Init();
 8002212:	f7ff fe83 	bl	8001f1c <OBD2_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <main+0x198>)
 800221c:	701a      	strb	r2, [r3, #0]

  obd_comm.pid = 0x05;
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <main+0x198>)
 8002220:	2205      	movs	r2, #5
 8002222:	705a      	strb	r2, [r3, #1]

  MX_IWDG_Init();
 8002224:	f000 f958 	bl	80024d8 <MX_IWDG_Init>

  OBD2_Request(obd_comm);
 8002228:	4c2f      	ldr	r4, [pc, #188]	; (80022e8 <main+0x198>)
 800222a:	4668      	mov	r0, sp
 800222c:	f104 0310 	add.w	r3, r4, #16
 8002230:	2260      	movs	r2, #96	; 0x60
 8002232:	4619      	mov	r1, r3
 8002234:	f007 ffc6 	bl	800a1c4 <memcpy>
 8002238:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800223c:	f7ff fa58 	bl	80016f0 <OBD2_Request>

  OBD2_Request(obd_comm);
 8002240:	4c29      	ldr	r4, [pc, #164]	; (80022e8 <main+0x198>)
 8002242:	4668      	mov	r0, sp
 8002244:	f104 0310 	add.w	r3, r4, #16
 8002248:	2260      	movs	r2, #96	; 0x60
 800224a:	4619      	mov	r1, r3
 800224c:	f007 ffba 	bl	800a1c4 <memcpy>
 8002250:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002254:	f7ff fa4c 	bl	80016f0 <OBD2_Request>

  OBD2_Request(obd_comm);
 8002258:	4c23      	ldr	r4, [pc, #140]	; (80022e8 <main+0x198>)
 800225a:	4668      	mov	r0, sp
 800225c:	f104 0310 	add.w	r3, r4, #16
 8002260:	2260      	movs	r2, #96	; 0x60
 8002262:	4619      	mov	r1, r3
 8002264:	f007 ffae 	bl	800a1c4 <memcpy>
 8002268:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800226c:	f7ff fa40 	bl	80016f0 <OBD2_Request>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((HAL_GetTick() - timer_adc) >= ADC_SAMPLE_TIME)
 8002270:	f001 f9b6 	bl	80035e0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800227e:	d30a      	bcc.n	8002296 <main+0x146>
	  {
		  obd_comm.voltage = ADC_Average(adc_buffer);
 8002280:	4818      	ldr	r0, [pc, #96]	; (80022e4 <main+0x194>)
 8002282:	f000 fa81 	bl	8002788 <ADC_Average>
 8002286:	eef0 7a40 	vmov.f32	s15, s0
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <main+0x198>)
 800228c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		  timer_adc = HAL_GetTick();
 8002290:	f001 f9a6 	bl	80035e0 <HAL_GetTick>
 8002294:	6078      	str	r0, [r7, #4]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(obd_comm.voltage >= 12.9)
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <main+0x198>)
 8002298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe f954 	bl	8000548 <__aeabi_f2d>
 80022a0:	a30b      	add	r3, pc, #44	; (adr r3, 80022d0 <main+0x180>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	f7fe fc2d 	bl	8000b04 <__aeabi_dcmpge>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00b      	beq.n	80022c8 <main+0x178>
	  {
		  OBD2_Request(obd_comm);
 80022b0:	4c0d      	ldr	r4, [pc, #52]	; (80022e8 <main+0x198>)
 80022b2:	4668      	mov	r0, sp
 80022b4:	f104 0310 	add.w	r3, r4, #16
 80022b8:	2260      	movs	r2, #96	; 0x60
 80022ba:	4619      	mov	r1, r3
 80022bc:	f007 ff82 	bl	800a1c4 <memcpy>
 80022c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022c4:	f7ff fa14 	bl	80016f0 <OBD2_Request>
	  if((HAL_GetTick() - timer_adc) >= ADC_SAMPLE_TIME)
 80022c8:	e7d2      	b.n	8002270 <main+0x120>
 80022ca:	bf00      	nop
 80022cc:	f3af 8000 	nop.w
 80022d0:	cccccccd 	.word	0xcccccccd
 80022d4:	4029cccc 	.word	0x4029cccc
 80022d8:	2000016c 	.word	0x2000016c
 80022dc:	0800d5a4 	.word	0x0800d5a4
 80022e0:	20000398 	.word	0x20000398
 80022e4:	20000640 	.word	0x20000640
 80022e8:	200006c0 	.word	0x200006c0

080022ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b096      	sub	sp, #88	; 0x58
 80022f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	2244      	movs	r2, #68	; 0x44
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f007 ff70 	bl	800a1e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002300:	463b      	mov	r3, r7
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800230e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002312:	f004 fd6b 	bl	8006dec <HAL_PWREx_ControlVoltageScaling>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800231c:	f000 fa9c 	bl	8002858 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002320:	2309      	movs	r3, #9
 8002322:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800232a:	2301      	movs	r3, #1
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800232e:	2302      	movs	r3, #2
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002332:	2303      	movs	r3, #3
 8002334:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800233a:	230a      	movs	r3, #10
 800233c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800233e:	2307      	movs	r3, #7
 8002340:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002342:	2302      	movs	r3, #2
 8002344:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002346:	2302      	movs	r3, #2
 8002348:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4618      	mov	r0, r3
 8002350:	f004 fda2 	bl	8006e98 <HAL_RCC_OscConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800235a:	f000 fa7d 	bl	8002858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235e:	230f      	movs	r3, #15
 8002360:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002362:	2303      	movs	r3, #3
 8002364:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002372:	463b      	mov	r3, r7
 8002374:	2104      	movs	r1, #4
 8002376:	4618      	mov	r0, r3
 8002378:	f005 f9a2 	bl	80076c0 <HAL_RCC_ClockConfig>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002382:	f000 fa69 	bl	8002858 <Error_Handler>
  }
}
 8002386:	bf00      	nop
 8002388:	3758      	adds	r7, #88	; 0x58
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002396:	463b      	mov	r3, r7
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
 80023a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <MX_ADC1_Init+0xbc>)
 80023a8:	4a29      	ldr	r2, [pc, #164]	; (8002450 <MX_ADC1_Init+0xc0>)
 80023aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <MX_ADC1_Init+0xbc>)
 80023ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80023b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <MX_ADC1_Init+0xbc>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <MX_ADC1_Init+0xbc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <MX_ADC1_Init+0xbc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023c6:	4b21      	ldr	r3, [pc, #132]	; (800244c <MX_ADC1_Init+0xbc>)
 80023c8:	2204      	movs	r2, #4
 80023ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <MX_ADC1_Init+0xbc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <MX_ADC1_Init+0xbc>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <MX_ADC1_Init+0xbc>)
 80023da:	2201      	movs	r2, #1
 80023dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <MX_ADC1_Init+0xbc>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <MX_ADC1_Init+0xbc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_ADC1_Init+0xbc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <MX_ADC1_Init+0xbc>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <MX_ADC1_Init+0xbc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <MX_ADC1_Init+0xbc>)
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002408:	4810      	ldr	r0, [pc, #64]	; (800244c <MX_ADC1_Init+0xbc>)
 800240a:	f001 fb07 	bl	8003a1c <HAL_ADC_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002414:	f000 fa20 	bl	8002858 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_ADC1_Init+0xc4>)
 800241a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800241c:	2306      	movs	r3, #6
 800241e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002420:	2307      	movs	r3, #7
 8002422:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002424:	237f      	movs	r3, #127	; 0x7f
 8002426:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002428:	2304      	movs	r3, #4
 800242a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002430:	463b      	mov	r3, r7
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_ADC1_Init+0xbc>)
 8002436:	f001 fcdb 	bl	8003df0 <HAL_ADC_ConfigChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002440:	f000 fa0a 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000398 	.word	0x20000398
 8002450:	50040000 	.word	0x50040000
 8002454:	3ac04000 	.word	0x3ac04000

08002458 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <MX_I2C2_Init+0x74>)
 800245e:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <MX_I2C2_Init+0x78>)
 8002460:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <MX_I2C2_Init+0x74>)
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <MX_I2C2_Init+0x7c>)
 8002466:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002468:	4b18      	ldr	r3, [pc, #96]	; (80024cc <MX_I2C2_Init+0x74>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <MX_I2C2_Init+0x74>)
 8002470:	2201      	movs	r2, #1
 8002472:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_I2C2_Init+0x74>)
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MX_I2C2_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <MX_I2C2_Init+0x74>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_I2C2_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_I2C2_Init+0x74>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002492:	480e      	ldr	r0, [pc, #56]	; (80024cc <MX_I2C2_Init+0x74>)
 8002494:	f003 ffb0 	bl	80063f8 <HAL_I2C_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800249e:	f000 f9db 	bl	8002858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024a2:	2100      	movs	r1, #0
 80024a4:	4809      	ldr	r0, [pc, #36]	; (80024cc <MX_I2C2_Init+0x74>)
 80024a6:	f004 fb9d 	bl	8006be4 <HAL_I2CEx_ConfigAnalogFilter>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80024b0:	f000 f9d2 	bl	8002858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024b4:	2100      	movs	r1, #0
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_I2C2_Init+0x74>)
 80024b8:	f004 fbdf 	bl	8006c7a <HAL_I2CEx_ConfigDigitalFilter>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80024c2:	f000 f9c9 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000046c 	.word	0x2000046c
 80024d0:	40005800 	.word	0x40005800
 80024d4:	10909cec 	.word	0x10909cec

080024d8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_IWDG_Init+0x34>)
 80024de:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <MX_IWDG_Init+0x38>)
 80024e0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <MX_IWDG_Init+0x34>)
 80024e4:	2204      	movs	r2, #4
 80024e6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_IWDG_Init+0x34>)
 80024ea:	f640 72ff 	movw	r2, #4095	; 0xfff
 80024ee:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_IWDG_Init+0x34>)
 80024f2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80024f6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80024f8:	4804      	ldr	r0, [pc, #16]	; (800250c <MX_IWDG_Init+0x34>)
 80024fa:	f004 fc0a 	bl	8006d12 <HAL_IWDG_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002504:	f000 f9a8 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	200004c0 	.word	0x200004c0
 8002510:	40003000 	.word	0x40003000

08002514 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <MX_TIM1_Init+0xa0>)
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <MX_TIM1_Init+0xa4>)
 8002536:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800;
 8002538:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <MX_TIM1_Init+0xa0>)
 800253a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800253e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002540:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <MX_TIM1_Init+0xa0>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <MX_TIM1_Init+0xa0>)
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <MX_TIM1_Init+0xa0>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <MX_TIM1_Init+0xa0>)
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <MX_TIM1_Init+0xa0>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002560:	4814      	ldr	r0, [pc, #80]	; (80025b4 <MX_TIM1_Init+0xa0>)
 8002562:	f005 fdd9 	bl	8008118 <HAL_TIM_Base_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800256c:	f000 f974 	bl	8002858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002576:	f107 0310 	add.w	r3, r7, #16
 800257a:	4619      	mov	r1, r3
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <MX_TIM1_Init+0xa0>)
 800257e:	f005 ffc5 	bl	800850c <HAL_TIM_ConfigClockSource>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002588:	f000 f966 	bl	8002858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <MX_TIM1_Init+0xa0>)
 800259e:	f006 f9a5 	bl	80088ec <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80025a8:	f000 f956 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200004d0 	.word	0x200004d0
 80025b8:	40012c00 	.word	0x40012c00

080025bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <MX_TIM6_Init+0x68>)
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <MX_TIM6_Init+0x6c>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_TIM6_Init+0x68>)
 80025d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80025d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <MX_TIM6_Init+0x68>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <MX_TIM6_Init+0x68>)
 80025e2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80025e6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_TIM6_Init+0x68>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025ee:	480d      	ldr	r0, [pc, #52]	; (8002624 <MX_TIM6_Init+0x68>)
 80025f0:	f005 fd92 	bl	8008118 <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80025fa:	f000 f92d 	bl	8002858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4806      	ldr	r0, [pc, #24]	; (8002624 <MX_TIM6_Init+0x68>)
 800260c:	f006 f96e 	bl	80088ec <HAL_TIMEx_MasterConfigSynchronization>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002616:	f000 f91f 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000051c 	.word	0x2000051c
 8002628:	40001000 	.word	0x40001000

0800262c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <MX_DMA_Init+0x48>)
 8002634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002636:	4a0f      	ldr	r2, [pc, #60]	; (8002674 <MX_DMA_Init+0x48>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6493      	str	r3, [r2, #72]	; 0x48
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <MX_DMA_Init+0x48>)
 8002640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	200b      	movs	r0, #11
 8002650:	f003 f8e9 	bl	8005826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002654:	200b      	movs	r0, #11
 8002656:	f003 f902 	bl	800585e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	200f      	movs	r0, #15
 8002660:	f003 f8e1 	bl	8005826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002664:	200f      	movs	r0, #15
 8002666:	f003 f8fa 	bl	800585e <HAL_NVIC_EnableIRQ>

}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000

08002678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800268e:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <MX_GPIO_Init+0x100>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	4a39      	ldr	r2, [pc, #228]	; (8002778 <MX_GPIO_Init+0x100>)
 8002694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269a:	4b37      	ldr	r3, [pc, #220]	; (8002778 <MX_GPIO_Init+0x100>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a6:	4b34      	ldr	r3, [pc, #208]	; (8002778 <MX_GPIO_Init+0x100>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	4a33      	ldr	r2, [pc, #204]	; (8002778 <MX_GPIO_Init+0x100>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b2:	4b31      	ldr	r3, [pc, #196]	; (8002778 <MX_GPIO_Init+0x100>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026be:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <MX_GPIO_Init+0x100>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	4a2d      	ldr	r2, [pc, #180]	; (8002778 <MX_GPIO_Init+0x100>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ca:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <MX_GPIO_Init+0x100>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b28      	ldr	r3, [pc, #160]	; (8002778 <MX_GPIO_Init+0x100>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	4a27      	ldr	r2, [pc, #156]	; (8002778 <MX_GPIO_Init+0x100>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e2:	4b25      	ldr	r3, [pc, #148]	; (8002778 <MX_GPIO_Init+0x100>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f4:	4821      	ldr	r0, [pc, #132]	; (800277c <MX_GPIO_Init+0x104>)
 80026f6:	f003 fe4f 	bl	8006398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 80026fa:	2200      	movs	r2, #0
 80026fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002704:	f003 fe48 	bl	8006398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_S_Pin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8002708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270e:	2301      	movs	r3, #1
 8002710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002712:	2302      	movs	r3, #2
 8002714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	4816      	ldr	r0, [pc, #88]	; (800277c <MX_GPIO_Init+0x104>)
 8002722:	f003 fbcd 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LLine_Pin */
  GPIO_InitStruct.Pin = LLine_Pin;
 8002726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800272a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272c:	2301      	movs	r3, #1
 800272e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LLine_GPIO_Port, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002742:	f003 fbbd 	bl	8005ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_BTN_Pin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin;
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800274a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800274e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MENU_BTN_GPIO_Port, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	4809      	ldr	r0, [pc, #36]	; (8002780 <MX_GPIO_Init+0x108>)
 800275c:	f003 fbb0 	bl	8005ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	2017      	movs	r0, #23
 8002766:	f003 f85e 	bl	8005826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800276a:	2017      	movs	r0, #23
 800276c:	f003 f877 	bl	800585e <HAL_NVIC_EnableIRQ>

}
 8002770:	bf00      	nop
 8002772:	3728      	adds	r7, #40	; 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	48000800 	.word	0x48000800
 8002780:	48000400 	.word	0x48000400
 8002784:	00000000 	.word	0x00000000

08002788 <ADC_Average>:

/* USER CODE BEGIN 4 */
static float ADC_Average(uint16_t *data)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	float result = 0;
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < sizeof(data); i++)
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	e011      	b.n	80027c0 <ADC_Average+0x38>
	{
		result += data[i];
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80027b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b6:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < sizeof(data); i++)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	3301      	adds	r3, #1
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d9ea      	bls.n	800279c <ADC_Average+0x14>
	}
	result = result / sizeof(data);
 80027c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80027ca:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80027ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027d2:	edc7 7a03 	vstr	s15, [r7, #12]
	result = result * (3.3 / 4095);
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7fd feb6 	bl	8000548 <__aeabi_f2d>
 80027dc:	a31c      	add	r3, pc, #112	; (adr r3, 8002850 <ADC_Average+0xc8>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f7fd ff09 	bl	80005f8 <__aeabi_dmul>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fe f9db 	bl	8000ba8 <__aeabi_d2f>
 80027f2:	4603      	mov	r3, r0
 80027f4:	60fb      	str	r3, [r7, #12]
	result = (result * (100 + 27)) / 27;
 80027f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80027fa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002848 <ADC_Average+0xc0>
 80027fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002802:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 8002806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800280a:	edc7 7a03 	vstr	s15, [r7, #12]
	result = roundf(result*100) / 100;
 800280e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002812:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800284c <ADC_Average+0xc4>
 8002816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800281a:	eeb0 0a67 	vmov.f32	s0, s15
 800281e:	f00a fbd1 	bl	800cfc4 <roundf>
 8002822:	eeb0 7a40 	vmov.f32	s14, s0
 8002826:	eddf 6a09 	vldr	s13, [pc, #36]	; 800284c <ADC_Average+0xc4>
 800282a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800282e:	edc7 7a03 	vstr	s15, [r7, #12]
	return result;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	ee07 3a90 	vmov	s15, r3
}
 8002838:	eeb0 0a67 	vmov.f32	s0, s15
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	f3af 8000 	nop.w
 8002848:	42fe0000 	.word	0x42fe0000
 800284c:	42c80000 	.word	0x42c80000
 8002850:	e734d9b4 	.word	0xe734d9b4
 8002854:	3f4a680c 	.word	0x3f4a680c

08002858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800285c:	b672      	cpsid	i
}
 800285e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002860:	e7fe      	b.n	8002860 <Error_Handler+0x8>
	...

08002864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_MspInit+0x44>)
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <HAL_MspInit+0x44>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6613      	str	r3, [r2, #96]	; 0x60
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_MspInit+0x44>)
 8002878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_MspInit+0x44>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <HAL_MspInit+0x44>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6593      	str	r3, [r2, #88]	; 0x58
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_MspInit+0x44>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b0a0      	sub	sp, #128	; 0x80
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	225c      	movs	r2, #92	; 0x5c
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f007 fc87 	bl	800a1e0 <memset>
  if(hadc->Instance==ADC1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a3a      	ldr	r2, [pc, #232]	; (80029c0 <HAL_ADC_MspInit+0x114>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d16d      	bne.n	80029b8 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028e6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80028e8:	2303      	movs	r3, #3
 80028ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80028ec:	2301      	movs	r3, #1
 80028ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80028f0:	2308      	movs	r3, #8
 80028f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80028f4:	2307      	movs	r3, #7
 80028f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80028f8:	2302      	movs	r3, #2
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80028fc:	2302      	movs	r3, #2
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f005 f8fa 	bl	8007b04 <HAL_RCCEx_PeriphCLKConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002916:	f7ff ff9f 	bl	8002858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800291a:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <HAL_ADC_MspInit+0x118>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	4a29      	ldr	r2, [pc, #164]	; (80029c4 <HAL_ADC_MspInit+0x118>)
 8002920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_ADC_MspInit+0x118>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_ADC_MspInit+0x118>)
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_ADC_MspInit+0x118>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_ADC_MspInit+0x118>)
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 800294a:	2320      	movs	r3, #32
 800294c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800294e:	230b      	movs	r3, #11
 8002950:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800295a:	4619      	mov	r1, r3
 800295c:	481a      	ldr	r0, [pc, #104]	; (80029c8 <HAL_ADC_MspInit+0x11c>)
 800295e:	f003 faaf 	bl	8005ec0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002964:	4a1a      	ldr	r2, [pc, #104]	; (80029d0 <HAL_ADC_MspInit+0x124>)
 8002966:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_ADC_MspInit+0x120>)
 800296a:	2200      	movs	r2, #0
 800296c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800297a:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_ADC_MspInit+0x120>)
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002986:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_ADC_MspInit+0x120>)
 800298a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800298e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002992:	2220      	movs	r2, #32
 8002994:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_ADC_MspInit+0x120>)
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800299c:	480b      	ldr	r0, [pc, #44]	; (80029cc <HAL_ADC_MspInit+0x120>)
 800299e:	f002 ff87 	bl	80058b0 <HAL_DMA_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80029a8:	f7ff ff56 	bl	8002858 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a07      	ldr	r2, [pc, #28]	; (80029cc <HAL_ADC_MspInit+0x120>)
 80029b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80029b2:	4a06      	ldr	r2, [pc, #24]	; (80029cc <HAL_ADC_MspInit+0x120>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029b8:	bf00      	nop
 80029ba:	3780      	adds	r7, #128	; 0x80
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	50040000 	.word	0x50040000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	48000800 	.word	0x48000800
 80029cc:	200003fc 	.word	0x200003fc
 80029d0:	40020008 	.word	0x40020008

080029d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <HAL_CAN_MspInit+0xa0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d139      	bne.n	8002a6a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_CAN_MspInit+0xa4>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <HAL_CAN_MspInit+0xa4>)
 80029fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_CAN_MspInit+0xa4>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_CAN_MspInit+0xa4>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <HAL_CAN_MspInit+0xa4>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_CAN_MspInit+0xa4>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8002a26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a38:	2309      	movs	r3, #9
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4619      	mov	r1, r3
 8002a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a46:	f003 fa3b 	bl	8005ec0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	2014      	movs	r0, #20
 8002a50:	f002 fee9 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a54:	2014      	movs	r0, #20
 8002a56:	f002 ff02 	bl	800585e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2015      	movs	r0, #21
 8002a60:	f002 fee1 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002a64:	2015      	movs	r0, #21
 8002a66:	f002 fefa 	bl	800585e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3728      	adds	r7, #40	; 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40006400 	.word	0x40006400
 8002a78:	40021000 	.word	0x40021000

08002a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b0a0      	sub	sp, #128	; 0x80
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	225c      	movs	r2, #92	; 0x5c
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f007 fb9f 	bl	800a1e0 <memset>
  if(hi2c->Instance==I2C2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_I2C_MspInit+0xa8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d136      	bne.n	8002b1a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f005 f823 	bl	8007b04 <HAL_RCCEx_PeriphCLKConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ac4:	f7ff fec8 	bl	8002858 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <HAL_I2C_MspInit+0xac>)
 8002aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_I2C_MspInit+0xac>)
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <HAL_I2C_MspInit+0xac>)
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002ae0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae6:	2312      	movs	r3, #18
 8002ae8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002af2:	2304      	movs	r3, #4
 8002af4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002afa:	4619      	mov	r1, r3
 8002afc:	480b      	ldr	r0, [pc, #44]	; (8002b2c <HAL_I2C_MspInit+0xb0>)
 8002afe:	f003 f9df 	bl	8005ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_I2C_MspInit+0xac>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <HAL_I2C_MspInit+0xac>)
 8002b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_I2C_MspInit+0xac>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	3780      	adds	r7, #128	; 0x80
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40005800 	.word	0x40005800
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	48000400 	.word	0x48000400

08002b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <HAL_TIM_Base_MspInit+0xa8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12c      	bne.n	8002b9c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b42:	4b26      	ldr	r3, [pc, #152]	; (8002bdc <HAL_TIM_Base_MspInit+0xac>)
 8002b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b46:	4a25      	ldr	r2, [pc, #148]	; (8002bdc <HAL_TIM_Base_MspInit+0xac>)
 8002b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b4e:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <HAL_TIM_Base_MspInit+0xac>)
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2018      	movs	r0, #24
 8002b60:	f002 fe61 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002b64:	2018      	movs	r0, #24
 8002b66:	f002 fe7a 	bl	800585e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2019      	movs	r0, #25
 8002b70:	f002 fe59 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b74:	2019      	movs	r0, #25
 8002b76:	f002 fe72 	bl	800585e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	201a      	movs	r0, #26
 8002b80:	f002 fe51 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002b84:	201a      	movs	r0, #26
 8002b86:	f002 fe6a 	bl	800585e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	201b      	movs	r0, #27
 8002b90:	f002 fe49 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b94:	201b      	movs	r0, #27
 8002b96:	f002 fe62 	bl	800585e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b9a:	e018      	b.n	8002bce <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_TIM_Base_MspInit+0xb0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d113      	bne.n	8002bce <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_TIM_Base_MspInit+0xac>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <HAL_TIM_Base_MspInit+0xac>)
 8002bac:	f043 0310 	orr.w	r3, r3, #16
 8002bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_TIM_Base_MspInit+0xac>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 1);
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	2036      	movs	r0, #54	; 0x36
 8002bc4:	f002 fe2f 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bc8:	2036      	movs	r0, #54	; 0x36
 8002bca:	f002 fe48 	bl	800585e <HAL_NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40001000 	.word	0x40001000

08002be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0a0      	sub	sp, #128	; 0x80
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	225c      	movs	r2, #92	; 0x5c
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f007 faeb 	bl	800a1e0 <memset>
  if(huart->Instance==USART1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a38      	ldr	r2, [pc, #224]	; (8002cf0 <HAL_UART_MspInit+0x10c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d169      	bne.n	8002ce8 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c14:	2301      	movs	r3, #1
 8002c16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	4618      	mov	r0, r3
 8002c22:	f004 ff6f 	bl	8007b04 <HAL_RCCEx_PeriphCLKConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c2c:	f7ff fe14 	bl	8002858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c30:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <HAL_UART_MspInit+0x110>)
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <HAL_UART_MspInit+0x110>)
 8002c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <HAL_UART_MspInit+0x110>)
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <HAL_UART_MspInit+0x110>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <HAL_UART_MspInit+0x110>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c54:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <HAL_UART_MspInit+0x110>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = KLine_TX_Pin|KLine_RX_Pin;
 8002c60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c64:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c72:	2307      	movs	r3, #7
 8002c74:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c76:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c80:	f003 f91e 	bl	8005ec0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002c84:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002c86:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <HAL_UART_MspInit+0x118>)
 8002c88:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002cb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cbc:	480e      	ldr	r0, [pc, #56]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002cbe:	f002 fdf7 	bl	80058b0 <HAL_DMA_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002cc8:	f7ff fdc6 	bl	8002858 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002cd0:	671a      	str	r2, [r3, #112]	; 0x70
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_UART_MspInit+0x114>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2025      	movs	r0, #37	; 0x25
 8002cde:	f002 fda2 	bl	8005826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce2:	2025      	movs	r0, #37	; 0x25
 8002ce4:	f002 fdbb 	bl	800585e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ce8:	bf00      	nop
 8002cea:	3780      	adds	r7, #128	; 0x80
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40013800 	.word	0x40013800
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	200005ec 	.word	0x200005ec
 8002cfc:	40020058 	.word	0x40020058

08002d00 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <HAL_UART_MspDeInit+0x44>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d113      	bne.n	8002d3a <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_UART_MspDeInit+0x48>)
 8002d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <HAL_UART_MspDeInit+0x48>)
 8002d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d1c:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, KLine_TX_Pin|KLine_RX_Pin);
 8002d1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d26:	f003 fa45 	bl	80061b4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fe76 	bl	8005a20 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002d34:	2025      	movs	r0, #37	; 0x25
 8002d36:	f002 fda0 	bl	800587a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40013800 	.word	0x40013800
 8002d48:	40021000 	.word	0x40021000

08002d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <NMI_Handler+0x4>

08002d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <HardFault_Handler+0x4>

08002d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <MemManage_Handler+0x4>

08002d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <BusFault_Handler+0x4>

08002d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <UsageFault_Handler+0x4>

08002d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d98:	f000 fc0e 	bl	80035b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <DMA1_Channel1_IRQHandler+0x10>)
 8002da6:	f002 ffac 	bl	8005d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200003fc 	.word	0x200003fc

08002db4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <DMA1_Channel5_IRQHandler+0x10>)
 8002dba:	f002 ffa2 	bl	8005d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200005ec 	.word	0x200005ec

08002dc8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <CAN1_RX0_IRQHandler+0x10>)
 8002dce:	f002 fa06 	bl	80051de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000444 	.word	0x20000444

08002ddc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <CAN1_RX1_IRQHandler+0x10>)
 8002de2:	f002 f9fc 	bl	80051de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000444 	.word	0x20000444

08002df0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_BTN_Pin);
 8002df4:	2040      	movs	r0, #64	; 0x40
 8002df6:	f003 fae7 	bl	80063c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e04:	4802      	ldr	r0, [pc, #8]	; (8002e10 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002e06:	f005 fa62 	bl	80082ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200004d0 	.word	0x200004d0

08002e14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002e1a:	f005 fa58 	bl	80082ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200004d0 	.word	0x200004d0

08002e28 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002e2e:	f005 fa4e 	bl	80082ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200004d0 	.word	0x200004d0

08002e3c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <TIM1_CC_IRQHandler+0x10>)
 8002e42:	f005 fa44 	bl	80082ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200004d0 	.word	0x200004d0

08002e50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <USART1_IRQHandler+0x10>)
 8002e56:	f006 f80f 	bl	8008e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000568 	.word	0x20000568

08002e64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <TIM6_DAC_IRQHandler+0x10>)
 8002e6a:	f005 fa30 	bl	80082ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	2000051c 	.word	0x2000051c

08002e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
	return 1;
 8002e7c:	2301      	movs	r3, #1
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_kill>:

int _kill(int pid, int sig)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e92:	f007 f96d 	bl	800a170 <__errno>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2216      	movs	r2, #22
 8002e9a:	601a      	str	r2, [r3, #0]
	return -1;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_exit>:

void _exit (int status)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ffe7 	bl	8002e88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eba:	e7fe      	b.n	8002eba <_exit+0x12>

08002ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	e00a      	b.n	8002ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ece:	f3af 8000 	nop.w
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	60ba      	str	r2, [r7, #8]
 8002eda:	b2ca      	uxtb	r2, r1
 8002edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	dbf0      	blt.n	8002ece <_read+0x12>
	}

return len;
 8002eec:	687b      	ldr	r3, [r7, #4]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e009      	b.n	8002f1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	60ba      	str	r2, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbf1      	blt.n	8002f08 <_write+0x12>
	}
	return len;
 8002f24:	687b      	ldr	r3, [r7, #4]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <_close>:

int _close(int file)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
	return -1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f56:	605a      	str	r2, [r3, #4]
	return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_isatty>:

int _isatty(int file)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
	return 0;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <_sbrk+0x5c>)
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <_sbrk+0x60>)
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <_sbrk+0x64>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <_sbrk+0x68>)
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <_sbrk+0x64>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc8:	f007 f8d2 	bl	800a170 <__errno>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	220c      	movs	r2, #12
 8002fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	e009      	b.n	8002fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <_sbrk+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <_sbrk+0x64>)
 8002fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fea:	68fb      	ldr	r3, [r7, #12]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20010000 	.word	0x20010000
 8002ff8:	00000400 	.word	0x00000400
 8002ffc:	20000730 	.word	0x20000730
 8003000:	20000b50 	.word	0x20000b50

08003004 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <SystemInit+0x28>)
 800300a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800300e:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <SystemInit+0x28>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <SystemInit+0x28>)
 8003018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800301c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <Reset_Handler>:
 8003030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003068 <LoopForever+0x2>
 8003034:	f7ff ffe6 	bl	8003004 <SystemInit>
 8003038:	480c      	ldr	r0, [pc, #48]	; (800306c <LoopForever+0x6>)
 800303a:	490d      	ldr	r1, [pc, #52]	; (8003070 <LoopForever+0xa>)
 800303c:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <LoopForever+0xe>)
 800303e:	2300      	movs	r3, #0
 8003040:	e002      	b.n	8003048 <LoopCopyDataInit>

08003042 <CopyDataInit>:
 8003042:	58d4      	ldr	r4, [r2, r3]
 8003044:	50c4      	str	r4, [r0, r3]
 8003046:	3304      	adds	r3, #4

08003048 <LoopCopyDataInit>:
 8003048:	18c4      	adds	r4, r0, r3
 800304a:	428c      	cmp	r4, r1
 800304c:	d3f9      	bcc.n	8003042 <CopyDataInit>
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <LoopForever+0x12>)
 8003050:	4c0a      	ldr	r4, [pc, #40]	; (800307c <LoopForever+0x16>)
 8003052:	2300      	movs	r3, #0
 8003054:	e001      	b.n	800305a <LoopFillZerobss>

08003056 <FillZerobss>:
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	3204      	adds	r2, #4

0800305a <LoopFillZerobss>:
 800305a:	42a2      	cmp	r2, r4
 800305c:	d3fb      	bcc.n	8003056 <FillZerobss>
 800305e:	f007 f88d 	bl	800a17c <__libc_init_array>
 8003062:	f7ff f875 	bl	8002150 <main>

08003066 <LoopForever>:
 8003066:	e7fe      	b.n	8003066 <LoopForever>
 8003068:	20010000 	.word	0x20010000
 800306c:	20000000 	.word	0x20000000
 8003070:	2000035c 	.word	0x2000035c
 8003074:	08010354 	.word	0x08010354
 8003078:	2000035c 	.word	0x2000035c
 800307c:	20000b50 	.word	0x20000b50

08003080 <ADC1_IRQHandler>:
 8003080:	e7fe      	b.n	8003080 <ADC1_IRQHandler>

08003082 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af04      	add	r7, sp, #16
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800309a:	f04f 33ff 	mov.w	r3, #4294967295
 800309e:	9302      	str	r3, [sp, #8]
 80030a0:	2301      	movs	r3, #1
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	1dfb      	adds	r3, r7, #7
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	2301      	movs	r3, #1
 80030aa:	2200      	movs	r2, #0
 80030ac:	2178      	movs	r1, #120	; 0x78
 80030ae:	4803      	ldr	r0, [pc, #12]	; (80030bc <ssd1306_WriteCommand+0x2c>)
 80030b0:	f003 fa32 	bl	8006518 <HAL_I2C_Mem_Write>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	2000046c 	.word	0x2000046c

080030c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af04      	add	r7, sp, #16
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f04f 32ff 	mov.w	r2, #4294967295
 80030d2:	9202      	str	r2, [sp, #8]
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2301      	movs	r3, #1
 80030dc:	2240      	movs	r2, #64	; 0x40
 80030de:	2178      	movs	r1, #120	; 0x78
 80030e0:	4803      	ldr	r0, [pc, #12]	; (80030f0 <ssd1306_WriteData+0x30>)
 80030e2:	f003 fa19 	bl	8006518 <HAL_I2C_Mem_Write>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000046c 	.word	0x2000046c

080030f4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80030f8:	f7ff ffc3 	bl	8003082 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80030fc:	2064      	movs	r0, #100	; 0x64
 80030fe:	f000 fa7b 	bl	80035f8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003102:	2000      	movs	r0, #0
 8003104:	f000 f9da 	bl	80034bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003108:	2020      	movs	r0, #32
 800310a:	f7ff ffc1 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800310e:	2000      	movs	r0, #0
 8003110:	f7ff ffbe 	bl	8003090 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003114:	20b0      	movs	r0, #176	; 0xb0
 8003116:	f7ff ffbb 	bl	8003090 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800311a:	20c8      	movs	r0, #200	; 0xc8
 800311c:	f7ff ffb8 	bl	8003090 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003120:	2000      	movs	r0, #0
 8003122:	f7ff ffb5 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003126:	2010      	movs	r0, #16
 8003128:	f7ff ffb2 	bl	8003090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800312c:	2040      	movs	r0, #64	; 0x40
 800312e:	f7ff ffaf 	bl	8003090 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003132:	20ff      	movs	r0, #255	; 0xff
 8003134:	f000 f9ae 	bl	8003494 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003138:	20a1      	movs	r0, #161	; 0xa1
 800313a:	f7ff ffa9 	bl	8003090 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800313e:	20a6      	movs	r0, #166	; 0xa6
 8003140:	f7ff ffa6 	bl	8003090 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003144:	20a8      	movs	r0, #168	; 0xa8
 8003146:	f7ff ffa3 	bl	8003090 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800314a:	203f      	movs	r0, #63	; 0x3f
 800314c:	f7ff ffa0 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003150:	20a4      	movs	r0, #164	; 0xa4
 8003152:	f7ff ff9d 	bl	8003090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003156:	20d3      	movs	r0, #211	; 0xd3
 8003158:	f7ff ff9a 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800315c:	2000      	movs	r0, #0
 800315e:	f7ff ff97 	bl	8003090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003162:	20d5      	movs	r0, #213	; 0xd5
 8003164:	f7ff ff94 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003168:	20f0      	movs	r0, #240	; 0xf0
 800316a:	f7ff ff91 	bl	8003090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800316e:	20d9      	movs	r0, #217	; 0xd9
 8003170:	f7ff ff8e 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003174:	2022      	movs	r0, #34	; 0x22
 8003176:	f7ff ff8b 	bl	8003090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800317a:	20da      	movs	r0, #218	; 0xda
 800317c:	f7ff ff88 	bl	8003090 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003180:	2012      	movs	r0, #18
 8003182:	f7ff ff85 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003186:	20db      	movs	r0, #219	; 0xdb
 8003188:	f7ff ff82 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800318c:	2020      	movs	r0, #32
 800318e:	f7ff ff7f 	bl	8003090 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003192:	208d      	movs	r0, #141	; 0x8d
 8003194:	f7ff ff7c 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003198:	2014      	movs	r0, #20
 800319a:	f7ff ff79 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800319e:	2001      	movs	r0, #1
 80031a0:	f000 f98c 	bl	80034bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f000 f80f 	bl	80031c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80031aa:	f000 f831 	bl	8003210 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <ssd1306_Init+0xd0>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <ssd1306_Init+0xd0>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80031ba:	4b02      	ldr	r3, [pc, #8]	; (80031c4 <ssd1306_Init+0xd0>)
 80031bc:	2201      	movs	r2, #1
 80031be:	711a      	strb	r2, [r3, #4]
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000b34 	.word	0x20000b34

080031c8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e00d      	b.n	80031f4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <ssd1306_Fill+0x1a>
 80031de:	2100      	movs	r1, #0
 80031e0:	e000      	b.n	80031e4 <ssd1306_Fill+0x1c>
 80031e2:	21ff      	movs	r1, #255	; 0xff
 80031e4:	4a09      	ldr	r2, [pc, #36]	; (800320c <ssd1306_Fill+0x44>)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	460a      	mov	r2, r1
 80031ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fa:	d3ed      	bcc.n	80031d8 <ssd1306_Fill+0x10>
    }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000734 	.word	0x20000734

08003210 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003216:	2300      	movs	r3, #0
 8003218:	71fb      	strb	r3, [r7, #7]
 800321a:	e016      	b.n	800324a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	3b50      	subs	r3, #80	; 0x50
 8003220:	b2db      	uxtb	r3, r3
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff34 	bl	8003090 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003228:	2000      	movs	r0, #0
 800322a:	f7ff ff31 	bl	8003090 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800322e:	2010      	movs	r0, #16
 8003230:	f7ff ff2e 	bl	8003090 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	01db      	lsls	r3, r3, #7
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <ssd1306_UpdateScreen+0x4c>)
 800323a:	4413      	add	r3, r2
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff ff3e 	bl	80030c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	3301      	adds	r3, #1
 8003248:	71fb      	strb	r3, [r7, #7]
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	2b07      	cmp	r3, #7
 800324e:	d9e5      	bls.n	800321c <ssd1306_UpdateScreen+0xc>
    }
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000734 	.word	0x20000734

08003260 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
 800326a:	460b      	mov	r3, r1
 800326c:	71bb      	strb	r3, [r7, #6]
 800326e:	4613      	mov	r3, r2
 8003270:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db3d      	blt.n	80032f6 <ssd1306_DrawPixel+0x96>
 800327a:	79bb      	ldrb	r3, [r7, #6]
 800327c:	2b3f      	cmp	r3, #63	; 0x3f
 800327e:	d83a      	bhi.n	80032f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003280:	797b      	ldrb	r3, [r7, #5]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d11a      	bne.n	80032bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003286:	79fa      	ldrb	r2, [r7, #7]
 8003288:	79bb      	ldrb	r3, [r7, #6]
 800328a:	08db      	lsrs	r3, r3, #3
 800328c:	b2d8      	uxtb	r0, r3
 800328e:	4603      	mov	r3, r0
 8003290:	01db      	lsls	r3, r3, #7
 8003292:	4413      	add	r3, r2
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <ssd1306_DrawPixel+0xa4>)
 8003296:	5cd3      	ldrb	r3, [r2, r3]
 8003298:	b25a      	sxtb	r2, r3
 800329a:	79bb      	ldrb	r3, [r7, #6]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	b25b      	sxtb	r3, r3
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b259      	sxtb	r1, r3
 80032ac:	79fa      	ldrb	r2, [r7, #7]
 80032ae:	4603      	mov	r3, r0
 80032b0:	01db      	lsls	r3, r3, #7
 80032b2:	4413      	add	r3, r2
 80032b4:	b2c9      	uxtb	r1, r1
 80032b6:	4a13      	ldr	r2, [pc, #76]	; (8003304 <ssd1306_DrawPixel+0xa4>)
 80032b8:	54d1      	strb	r1, [r2, r3]
 80032ba:	e01d      	b.n	80032f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80032bc:	79fa      	ldrb	r2, [r7, #7]
 80032be:	79bb      	ldrb	r3, [r7, #6]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	b2d8      	uxtb	r0, r3
 80032c4:	4603      	mov	r3, r0
 80032c6:	01db      	lsls	r3, r3, #7
 80032c8:	4413      	add	r3, r2
 80032ca:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <ssd1306_DrawPixel+0xa4>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	b25a      	sxtb	r2, r3
 80032d0:	79bb      	ldrb	r3, [r7, #6]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	b25b      	sxtb	r3, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	b25b      	sxtb	r3, r3
 80032e2:	4013      	ands	r3, r2
 80032e4:	b259      	sxtb	r1, r3
 80032e6:	79fa      	ldrb	r2, [r7, #7]
 80032e8:	4603      	mov	r3, r0
 80032ea:	01db      	lsls	r3, r3, #7
 80032ec:	4413      	add	r3, r2
 80032ee:	b2c9      	uxtb	r1, r1
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <ssd1306_DrawPixel+0xa4>)
 80032f2:	54d1      	strb	r1, [r2, r3]
 80032f4:	e000      	b.n	80032f8 <ssd1306_DrawPixel+0x98>
        return;
 80032f6:	bf00      	nop
    }
}
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000734 	.word	0x20000734

08003308 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	4604      	mov	r4, r0
 8003310:	1d38      	adds	r0, r7, #4
 8003312:	e880 0006 	stmia.w	r0, {r1, r2}
 8003316:	461a      	mov	r2, r3
 8003318:	4623      	mov	r3, r4
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	4613      	mov	r3, r2
 800331e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b1f      	cmp	r3, #31
 8003324:	d902      	bls.n	800332c <ssd1306_WriteChar+0x24>
 8003326:	7bfb      	ldrb	r3, [r7, #15]
 8003328:	2b7e      	cmp	r3, #126	; 0x7e
 800332a:	d901      	bls.n	8003330 <ssd1306_WriteChar+0x28>
        return 0;
 800332c:	2300      	movs	r3, #0
 800332e:	e06d      	b.n	800340c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003330:	4b38      	ldr	r3, [pc, #224]	; (8003414 <ssd1306_WriteChar+0x10c>)
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	793b      	ldrb	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	2b80      	cmp	r3, #128	; 0x80
 800333c:	dc06      	bgt.n	800334c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800333e:	4b35      	ldr	r3, [pc, #212]	; (8003414 <ssd1306_WriteChar+0x10c>)
 8003340:	885b      	ldrh	r3, [r3, #2]
 8003342:	461a      	mov	r2, r3
 8003344:	797b      	ldrb	r3, [r7, #5]
 8003346:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	dd01      	ble.n	8003350 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800334c:	2300      	movs	r3, #0
 800334e:	e05d      	b.n	800340c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	e04c      	b.n	80033f0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	3b20      	subs	r3, #32
 800335c:	7979      	ldrb	r1, [r7, #5]
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4619      	mov	r1, r3
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	440b      	add	r3, r1
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e034      	b.n	80033e0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d012      	beq.n	80033ac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <ssd1306_WriteChar+0x10c>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	4413      	add	r3, r2
 8003392:	b2d8      	uxtb	r0, r3
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <ssd1306_WriteChar+0x10c>)
 8003396:	885b      	ldrh	r3, [r3, #2]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	4413      	add	r3, r2
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	7bba      	ldrb	r2, [r7, #14]
 80033a4:	4619      	mov	r1, r3
 80033a6:	f7ff ff5b 	bl	8003260 <ssd1306_DrawPixel>
 80033aa:	e016      	b.n	80033da <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <ssd1306_WriteChar+0x10c>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	b2d8      	uxtb	r0, r3
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <ssd1306_WriteChar+0x10c>)
 80033bc:	885b      	ldrh	r3, [r3, #2]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	b2d9      	uxtb	r1, r3
 80033c8:	7bbb      	ldrb	r3, [r7, #14]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	f7ff ff43 	bl	8003260 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	3301      	adds	r3, #1
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	793b      	ldrb	r3, [r7, #4]
 80033e2:	461a      	mov	r2, r3
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d3c5      	bcc.n	8003376 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	797b      	ldrb	r3, [r7, #5]
 80033f2:	461a      	mov	r2, r3
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d3ad      	bcc.n	8003356 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <ssd1306_WriteChar+0x10c>)
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	793b      	ldrb	r3, [r7, #4]
 8003400:	b29b      	uxth	r3, r3
 8003402:	4413      	add	r3, r2
 8003404:	b29a      	uxth	r2, r3
 8003406:	4b03      	ldr	r3, [pc, #12]	; (8003414 <ssd1306_WriteChar+0x10c>)
 8003408:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3724      	adds	r7, #36	; 0x24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}
 8003414:	20000b34 	.word	0x20000b34

08003418 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	1d38      	adds	r0, r7, #4
 8003422:	e880 0006 	stmia.w	r0, {r1, r2}
 8003426:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003428:	e012      	b.n	8003450 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	7818      	ldrb	r0, [r3, #0]
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	1d3a      	adds	r2, r7, #4
 8003432:	ca06      	ldmia	r2, {r1, r2}
 8003434:	f7ff ff68 	bl	8003308 <ssd1306_WriteChar>
 8003438:	4603      	mov	r3, r0
 800343a:	461a      	mov	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d002      	beq.n	800344a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	e008      	b.n	800345c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3301      	adds	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e8      	bne.n	800342a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	781b      	ldrb	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	460a      	mov	r2, r1
 800346e:	71fb      	strb	r3, [r7, #7]
 8003470:	4613      	mov	r3, r2
 8003472:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	b29a      	uxth	r2, r3
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <ssd1306_SetCursor+0x2c>)
 800347a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800347c:	79bb      	ldrb	r3, [r7, #6]
 800347e:	b29a      	uxth	r2, r3
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <ssd1306_SetCursor+0x2c>)
 8003482:	805a      	strh	r2, [r3, #2]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	20000b34 	.word	0x20000b34

08003494 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800349e:	2381      	movs	r3, #129	; 0x81
 80034a0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fdf3 	bl	8003090 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fdef 	bl	8003090 <ssd1306_WriteCommand>
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80034cc:	23af      	movs	r3, #175	; 0xaf
 80034ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <ssd1306_SetDisplayOn+0x38>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	715a      	strb	r2, [r3, #5]
 80034d6:	e004      	b.n	80034e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80034d8:	23ae      	movs	r3, #174	; 0xae
 80034da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <ssd1306_SetDisplayOn+0x38>)
 80034de:	2200      	movs	r2, #0
 80034e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fdd3 	bl	8003090 <ssd1306_WriteCommand>
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000b34 	.word	0x20000b34

080034f8 <ssd1306_GetDisplayOn>:

uint8_t ssd1306_GetDisplayOn() {
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
    return SSD1306.DisplayOn;
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <ssd1306_GetDisplayOn+0x14>)
 80034fe:	795b      	ldrb	r3, [r3, #5]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000b34 	.word	0x20000b34

08003510 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800351a:	2003      	movs	r0, #3
 800351c:	f002 f978 	bl	8005810 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003520:	2000      	movs	r0, #0
 8003522:	f000 f80d 	bl	8003540 <HAL_InitTick>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	71fb      	strb	r3, [r7, #7]
 8003530:	e001      	b.n	8003536 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003532:	f7ff f997 	bl	8002864 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003536:	79fb      	ldrb	r3, [r7, #7]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_InitTick+0x6c>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003554:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <HAL_InitTick+0x70>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b14      	ldr	r3, [pc, #80]	; (80035ac <HAL_InitTick+0x6c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	4619      	mov	r1, r3
 800355e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003562:	fbb3 f3f1 	udiv	r3, r3, r1
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	4618      	mov	r0, r3
 800356c:	f002 f993 	bl	8005896 <HAL_SYSTICK_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0f      	cmp	r3, #15
 800357a:	d809      	bhi.n	8003590 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800357c:	2200      	movs	r2, #0
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	f002 f94f 	bl	8005826 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003588:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <HAL_InitTick+0x74>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e007      	b.n	80035a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	e004      	b.n	80035a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	e001      	b.n	80035a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000188 	.word	0x20000188
 80035b0:	20000168 	.word	0x20000168
 80035b4:	20000184 	.word	0x20000184

080035b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_IncTick+0x20>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_IncTick+0x24>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	4a04      	ldr	r2, [pc, #16]	; (80035dc <HAL_IncTick+0x24>)
 80035ca:	6013      	str	r3, [r2, #0]
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000188 	.word	0x20000188
 80035dc:	20000b3c 	.word	0x20000b3c

080035e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return uwTick;
 80035e4:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <HAL_GetTick+0x14>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000b3c 	.word	0x20000b3c

080035f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003600:	f7ff ffee 	bl	80035e0 <HAL_GetTick>
 8003604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d005      	beq.n	800361e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_Delay+0x44>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800361e:	bf00      	nop
 8003620:	f7ff ffde 	bl	80035e0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	429a      	cmp	r2, r3
 800362e:	d8f7      	bhi.n	8003620 <HAL_Delay+0x28>
  {
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000188 	.word	0x20000188

08003640 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	609a      	str	r2, [r3, #8]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3360      	adds	r3, #96	; 0x60
 80036ba:	461a      	mov	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <LL_ADC_SetOffset+0x44>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	03fff000 	.word	0x03fff000

080036f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3360      	adds	r3, #96	; 0x60
 80036fe:	461a      	mov	r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3360      	adds	r3, #96	; 0x60
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	431a      	orrs	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3330      	adds	r3, #48	; 0x30
 8003788:	461a      	mov	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	4413      	add	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	211f      	movs	r1, #31
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	0e9b      	lsrs	r3, r3, #26
 80037b0:	f003 011f 	and.w	r1, r3, #31
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	431a      	orrs	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	3314      	adds	r3, #20
 80037e0:	461a      	mov	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	0e5b      	lsrs	r3, r3, #25
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	0d1b      	lsrs	r3, r3, #20
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2107      	movs	r1, #7
 80037fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	401a      	ands	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	0d1b      	lsrs	r3, r3, #20
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	431a      	orrs	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003840:	43db      	mvns	r3, r3
 8003842:	401a      	ands	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f003 0318 	and.w	r3, r3, #24
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <LL_ADC_SetChannelSingleDiff+0x44>)
 800384c:	40d9      	lsrs	r1, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	400b      	ands	r3, r1
 8003852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003856:	431a      	orrs	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	0007ffff 	.word	0x0007ffff

08003870 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003880:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6093      	str	r3, [r2, #8]
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a8:	d101      	bne.n	80038ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038f8:	d101      	bne.n	80038fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800391c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003948:	f043 0202 	orr.w	r2, r3, #2
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <LL_ADC_IsEnabled+0x18>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <LL_ADC_IsEnabled+0x1a>
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	d101      	bne.n	800399a <LL_ADC_IsDisableOngoing+0x18>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <LL_ADC_IsDisableOngoing+0x1a>
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039bc:	f043 0204 	orr.w	r2, r3, #4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d101      	bne.n	80039e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d101      	bne.n	8003a0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e12c      	b.n	8003c90 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fe ff31 	bl	80028ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff ff19 	bl	8003894 <LL_ADC_IsDeepPowerDownEnabled>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff feff 	bl	8003870 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff ff34 	bl	80038e4 <LL_ADC_IsInternalRegulatorEnabled>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d115      	bne.n	8003aae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ff18 	bl	80038bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a8c:	4b82      	ldr	r3, [pc, #520]	; (8003c98 <HAL_ADC_Init+0x27c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	099b      	lsrs	r3, r3, #6
 8003a92:	4a82      	ldr	r2, [pc, #520]	; (8003c9c <HAL_ADC_Init+0x280>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	099b      	lsrs	r3, r3, #6
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003aa0:	e002      	b.n	8003aa8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f9      	bne.n	8003aa2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff16 	bl	80038e4 <LL_ADC_IsInternalRegulatorEnabled>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10d      	bne.n	8003ada <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	f043 0210 	orr.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff ff76 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 8003ae4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 80c5 	bne.w	8003c7e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f040 80c1 	bne.w	8003c7e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b04:	f043 0202 	orr.w	r2, r3, #2
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff23 	bl	800395c <LL_ADC_IsEnabled>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b1c:	4860      	ldr	r0, [pc, #384]	; (8003ca0 <HAL_ADC_Init+0x284>)
 8003b1e:	f7ff ff1d 	bl	800395c <LL_ADC_IsEnabled>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	485d      	ldr	r0, [pc, #372]	; (8003ca4 <HAL_ADC_Init+0x288>)
 8003b30:	f7ff fd86 	bl	8003640 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7e5b      	ldrb	r3, [r3, #25]
 8003b38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b3e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003b44:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003b4a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b52:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d106      	bne.n	8003b70 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	3b01      	subs	r3, #1
 8003b68:	045b      	lsls	r3, r3, #17
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	4b45      	ldr	r3, [pc, #276]	; (8003ca8 <HAL_ADC_Init+0x28c>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	69b9      	ldr	r1, [r7, #24]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff13 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 8003baa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff20 	bl	80039f6 <LL_ADC_INJ_IsConversionOngoing>
 8003bb6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d13d      	bne.n	8003c3a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d13a      	bne.n	8003c3a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bc8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bd0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be0:	f023 0302 	bic.w	r3, r3, #2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	69b9      	ldr	r1, [r7, #24]
 8003bea:	430b      	orrs	r3, r1
 8003bec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d118      	bne.n	8003c2a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c02:	f023 0304 	bic.w	r3, r3, #4
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	611a      	str	r2, [r3, #16]
 8003c28:	e007      	b.n	8003c3a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10c      	bne.n	8003c5c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f023 010f 	bic.w	r1, r3, #15
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	1e5a      	subs	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
 8003c5a:	e007      	b.n	8003c6c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 020f 	bic.w	r2, r2, #15
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f023 0303 	bic.w	r3, r3, #3
 8003c74:	f043 0201 	orr.w	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54
 8003c7c:	e007      	b.n	8003c8e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f043 0210 	orr.w	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000168 	.word	0x20000168
 8003c9c:	053e2d63 	.word	0x053e2d63
 8003ca0:	50040000 	.word	0x50040000
 8003ca4:	50040300 	.word	0x50040300
 8003ca8:	fff0c007 	.word	0xfff0c007

08003cac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fe87 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d167      	bne.n	8003d98 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_ADC_Start_DMA+0x2a>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e063      	b.n	8003d9e <HAL_ADC_Start_DMA+0xf2>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fc66 	bl	80045b0 <ADC_Enable>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d14f      	bne.n	8003d8e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	f023 0206 	bic.w	r2, r3, #6
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	659a      	str	r2, [r3, #88]	; 0x58
 8003d1a:	e002      	b.n	8003d22 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d26:	4a20      	ldr	r2, [pc, #128]	; (8003da8 <HAL_ADC_Start_DMA+0xfc>)
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <HAL_ADC_Start_DMA+0x100>)
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d36:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <HAL_ADC_Start_DMA+0x104>)
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	221c      	movs	r2, #28
 8003d40:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0210 	orr.w	r2, r2, #16
 8003d58:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0201 	orr.w	r2, r2, #1
 8003d68:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3340      	adds	r3, #64	; 0x40
 8003d74:	4619      	mov	r1, r3
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f001 fee3 	bl	8005b44 <HAL_DMA_Start_IT>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fe0e 	bl	80039a8 <LL_ADC_REG_StartConversion>
 8003d8c:	e006      	b.n	8003d9c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003d96:	e001      	b.n	8003d9c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	0800477b 	.word	0x0800477b
 8003dac:	08004853 	.word	0x08004853
 8003db0:	0800486f 	.word	0x0800486f

08003db4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b0b6      	sub	sp, #216	; 0xd8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x22>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e3b9      	b.n	8004586 <HAL_ADC_ConfigChannel+0x796>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fdd6 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 839e 	bne.w	8004568 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d824      	bhi.n	8003e7e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	3b02      	subs	r3, #2
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d81b      	bhi.n	8003e76 <HAL_ADC_ConfigChannel+0x86>
 8003e3e:	a201      	add	r2, pc, #4	; (adr r2, 8003e44 <HAL_ADC_ConfigChannel+0x54>)
 8003e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e44:	08003e55 	.word	0x08003e55
 8003e48:	08003e5d 	.word	0x08003e5d
 8003e4c:	08003e65 	.word	0x08003e65
 8003e50:	08003e6d 	.word	0x08003e6d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	220c      	movs	r2, #12
 8003e58:	605a      	str	r2, [r3, #4]
          break;
 8003e5a:	e011      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2212      	movs	r2, #18
 8003e60:	605a      	str	r2, [r3, #4]
          break;
 8003e62:	e00d      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2218      	movs	r2, #24
 8003e68:	605a      	str	r2, [r3, #4]
          break;
 8003e6a:	e009      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e72:	605a      	str	r2, [r3, #4]
          break;
 8003e74:	e004      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2206      	movs	r2, #6
 8003e7a:	605a      	str	r2, [r3, #4]
          break;
 8003e7c:	e000      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003e7e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f7ff fc73 	bl	8003778 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fd9a 	bl	80039d0 <LL_ADC_REG_IsConversionOngoing>
 8003e9c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fda6 	bl	80039f6 <LL_ADC_INJ_IsConversionOngoing>
 8003eaa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f040 81a6 	bne.w	8004204 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 81a1 	bne.w	8004204 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f7ff fc7e 	bl	80037d0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	08db      	lsrs	r3, r3, #3
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d00a      	beq.n	8003f0c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6919      	ldr	r1, [r3, #16]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f06:	f7ff fbcf 	bl	80036a8 <LL_ADC_SetOffset>
 8003f0a:	e17b      	b.n	8004204 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fbec 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10a      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x148>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fbe1 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	f003 021f 	and.w	r2, r3, #31
 8003f36:	e01e      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x186>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fbd6 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f4e:	fa93 f3a3 	rbit	r3, r3
 8003f52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003f66:	2320      	movs	r3, #32
 8003f68:	e004      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003f6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d105      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x19e>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	0e9b      	lsrs	r3, r3, #26
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	e018      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x1d0>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f9a:	fa93 f3a3 	rbit	r3, r3
 8003f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	e004      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003fb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d106      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fba5 	bl	800371c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fb89 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x20e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fb7e 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	0e9b      	lsrs	r3, r3, #26
 8003ff8:	f003 021f 	and.w	r2, r3, #31
 8003ffc:	e01e      	b.n	800403c <HAL_ADC_ConfigChannel+0x24c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2101      	movs	r1, #1
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fb73 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 800400a:	4603      	mov	r3, r0
 800400c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800401c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800402c:	2320      	movs	r3, #32
 800402e:	e004      	b.n	800403a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x264>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	0e9b      	lsrs	r3, r3, #26
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	e018      	b.n	8004086 <HAL_ADC_ConfigChannel+0x296>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004068:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800406c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004078:	2320      	movs	r3, #32
 800407a:	e004      	b.n	8004086 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800407c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004086:	429a      	cmp	r2, r3
 8004088:	d106      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	2101      	movs	r1, #1
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fb42 	bl	800371c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2102      	movs	r1, #2
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff fb26 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x2d4>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2102      	movs	r1, #2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fb1b 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 80040ba:	4603      	mov	r3, r0
 80040bc:	0e9b      	lsrs	r3, r3, #26
 80040be:	f003 021f 	and.w	r2, r3, #31
 80040c2:	e01e      	b.n	8004102 <HAL_ADC_ConfigChannel+0x312>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2102      	movs	r1, #2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fb10 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80040e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80040ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80040f2:	2320      	movs	r3, #32
 80040f4:	e004      	b.n	8004100 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80040f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410a:	2b00      	cmp	r3, #0
 800410c:	d105      	bne.n	800411a <HAL_ADC_ConfigChannel+0x32a>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	0e9b      	lsrs	r3, r3, #26
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	e016      	b.n	8004148 <HAL_ADC_ConfigChannel+0x358>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004122:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004126:	fa93 f3a3 	rbit	r3, r3
 800412a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800412c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800412e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800413a:	2320      	movs	r3, #32
 800413c:	e004      	b.n	8004148 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800413e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004148:	429a      	cmp	r2, r3
 800414a:	d106      	bne.n	800415a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2200      	movs	r2, #0
 8004152:	2102      	movs	r1, #2
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fae1 	bl	800371c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2103      	movs	r1, #3
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fac5 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8004166:	4603      	mov	r3, r0
 8004168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x396>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2103      	movs	r1, #3
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff faba 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 800417c:	4603      	mov	r3, r0
 800417e:	0e9b      	lsrs	r3, r3, #26
 8004180:	f003 021f 	and.w	r2, r3, #31
 8004184:	e017      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x3c6>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2103      	movs	r1, #3
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff faaf 	bl	80036f0 <LL_ADC_GetOffsetChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800419e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80041a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e003      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80041ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d105      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x3de>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0e9b      	lsrs	r3, r3, #26
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	e011      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x402>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041d6:	fa93 f3a3 	rbit	r3, r3
 80041da:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80041dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80041e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80041e6:	2320      	movs	r3, #32
 80041e8:	e003      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80041ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ec:	fab3 f383 	clz	r3, r3
 80041f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d106      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2200      	movs	r2, #0
 80041fc:	2103      	movs	r1, #3
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fa8c 	bl	800371c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fba7 	bl	800395c <LL_ADC_IsEnabled>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 813f 	bne.w	8004494 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	461a      	mov	r2, r3
 8004224:	f7ff fb00 	bl	8003828 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a8e      	ldr	r2, [pc, #568]	; (8004468 <HAL_ADC_ConfigChannel+0x678>)
 800422e:	4293      	cmp	r3, r2
 8004230:	f040 8130 	bne.w	8004494 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_ADC_ConfigChannel+0x46c>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	3301      	adds	r3, #1
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2b09      	cmp	r3, #9
 8004252:	bf94      	ite	ls
 8004254:	2301      	movls	r3, #1
 8004256:	2300      	movhi	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e019      	b.n	8004290 <HAL_ADC_ConfigChannel+0x4a0>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800426a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800426e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004274:	2320      	movs	r3, #32
 8004276:	e003      	b.n	8004280 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	3301      	adds	r3, #1
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2b09      	cmp	r3, #9
 8004288:	bf94      	ite	ls
 800428a:	2301      	movls	r3, #1
 800428c:	2300      	movhi	r3, #0
 800428e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004290:	2b00      	cmp	r3, #0
 8004292:	d079      	beq.n	8004388 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x4c0>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0e9b      	lsrs	r3, r3, #26
 80042a6:	3301      	adds	r3, #1
 80042a8:	069b      	lsls	r3, r3, #26
 80042aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ae:	e015      	b.n	80042dc <HAL_ADC_ConfigChannel+0x4ec>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80042c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80042c8:	2320      	movs	r3, #32
 80042ca:	e003      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80042cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	3301      	adds	r3, #1
 80042d6:	069b      	lsls	r3, r3, #26
 80042d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x50c>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0e9b      	lsrs	r3, r3, #26
 80042ee:	3301      	adds	r3, #1
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	e017      	b.n	800432c <HAL_ADC_ConfigChannel+0x53c>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800430a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800430e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004314:	2320      	movs	r3, #32
 8004316:	e003      	b.n	8004320 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3301      	adds	r3, #1
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	ea42 0103 	orr.w	r1, r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x562>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0e9b      	lsrs	r3, r3, #26
 8004342:	3301      	adds	r3, #1
 8004344:	f003 021f 	and.w	r2, r3, #31
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	051b      	lsls	r3, r3, #20
 8004350:	e018      	b.n	8004384 <HAL_ADC_ConfigChannel+0x594>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800436a:	2320      	movs	r3, #32
 800436c:	e003      	b.n	8004376 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800436e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004370:	fab3 f383 	clz	r3, r3
 8004374:	b2db      	uxtb	r3, r3
 8004376:	3301      	adds	r3, #1
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4613      	mov	r3, r2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	4413      	add	r3, r2
 8004382:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004384:	430b      	orrs	r3, r1
 8004386:	e080      	b.n	800448a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x5b4>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0e9b      	lsrs	r3, r3, #26
 800439a:	3301      	adds	r3, #1
 800439c:	069b      	lsls	r3, r3, #26
 800439e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043a2:	e015      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x5e0>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80043bc:	2320      	movs	r3, #32
 80043be:	e003      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	069b      	lsls	r3, r3, #26
 80043cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x600>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0e9b      	lsrs	r3, r3, #26
 80043e2:	3301      	adds	r3, #1
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	e017      	b.n	8004420 <HAL_ADC_ConfigChannel+0x630>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	61fb      	str	r3, [r7, #28]
  return result;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004408:	2320      	movs	r3, #32
 800440a:	e003      	b.n	8004414 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3301      	adds	r3, #1
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	ea42 0103 	orr.w	r1, r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10d      	bne.n	800444c <HAL_ADC_ConfigChannel+0x65c>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0e9b      	lsrs	r3, r3, #26
 8004436:	3301      	adds	r3, #1
 8004438:	f003 021f 	and.w	r2, r3, #31
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	3b1e      	subs	r3, #30
 8004444:	051b      	lsls	r3, r3, #20
 8004446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800444a:	e01d      	b.n	8004488 <HAL_ADC_ConfigChannel+0x698>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	613b      	str	r3, [r7, #16]
  return result;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d103      	bne.n	800446c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004464:	2320      	movs	r3, #32
 8004466:	e005      	b.n	8004474 <HAL_ADC_ConfigChannel+0x684>
 8004468:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	3301      	adds	r3, #1
 8004476:	f003 021f 	and.w	r2, r3, #31
 800447a:	4613      	mov	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	4413      	add	r3, r2
 8004480:	3b1e      	subs	r3, #30
 8004482:	051b      	lsls	r3, r3, #20
 8004484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004488:	430b      	orrs	r3, r1
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	6892      	ldr	r2, [r2, #8]
 800448e:	4619      	mov	r1, r3
 8004490:	f7ff f99e 	bl	80037d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <HAL_ADC_ConfigChannel+0x7a0>)
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d06c      	beq.n	800457a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044a0:	483c      	ldr	r0, [pc, #240]	; (8004594 <HAL_ADC_ConfigChannel+0x7a4>)
 80044a2:	f7ff f8f3 	bl	800368c <LL_ADC_GetCommonPathInternalCh>
 80044a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a3a      	ldr	r2, [pc, #232]	; (8004598 <HAL_ADC_ConfigChannel+0x7a8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d127      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d121      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a35      	ldr	r2, [pc, #212]	; (800459c <HAL_ADC_ConfigChannel+0x7ac>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d157      	bne.n	800457a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044d2:	4619      	mov	r1, r3
 80044d4:	482f      	ldr	r0, [pc, #188]	; (8004594 <HAL_ADC_ConfigChannel+0x7a4>)
 80044d6:	f7ff f8c6 	bl	8003666 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044da:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <HAL_ADC_ConfigChannel+0x7b0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	4a30      	ldr	r2, [pc, #192]	; (80045a4 <HAL_ADC_ConfigChannel+0x7b4>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	4613      	mov	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044f4:	e002      	b.n	80044fc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f9      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004502:	e03a      	b.n	800457a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <HAL_ADC_ConfigChannel+0x7b8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d113      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x746>
 800450e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <HAL_ADC_ConfigChannel+0x7ac>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d12a      	bne.n	800457a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452c:	4619      	mov	r1, r3
 800452e:	4819      	ldr	r0, [pc, #100]	; (8004594 <HAL_ADC_ConfigChannel+0x7a4>)
 8004530:	f7ff f899 	bl	8003666 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004534:	e021      	b.n	800457a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <HAL_ADC_ConfigChannel+0x7bc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d11c      	bne.n	800457a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d116      	bne.n	800457a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a12      	ldr	r2, [pc, #72]	; (800459c <HAL_ADC_ConfigChannel+0x7ac>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d111      	bne.n	800457a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800455a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800455e:	4619      	mov	r1, r3
 8004560:	480c      	ldr	r0, [pc, #48]	; (8004594 <HAL_ADC_ConfigChannel+0x7a4>)
 8004562:	f7ff f880 	bl	8003666 <LL_ADC_SetCommonPathInternalCh>
 8004566:	e008      	b.n	800457a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456c:	f043 0220 	orr.w	r2, r3, #32
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004582:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004586:	4618      	mov	r0, r3
 8004588:	37d8      	adds	r7, #216	; 0xd8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	80080000 	.word	0x80080000
 8004594:	50040300 	.word	0x50040300
 8004598:	c7520000 	.word	0xc7520000
 800459c:	50040000 	.word	0x50040000
 80045a0:	20000168 	.word	0x20000168
 80045a4:	053e2d63 	.word	0x053e2d63
 80045a8:	cb840000 	.word	0xcb840000
 80045ac:	80000001 	.word	0x80000001

080045b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff f9cb 	bl	800395c <LL_ADC_IsEnabled>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d169      	bne.n	80046a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <ADC_Enable+0xfc>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	f043 0210 	orr.w	r2, r3, #16
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	f043 0201 	orr.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e055      	b.n	80046a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff f986 	bl	800390c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004600:	482b      	ldr	r0, [pc, #172]	; (80046b0 <ADC_Enable+0x100>)
 8004602:	f7ff f843 	bl	800368c <LL_ADC_GetCommonPathInternalCh>
 8004606:	4603      	mov	r3, r0
 8004608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d013      	beq.n	8004638 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004610:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <ADC_Enable+0x104>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	099b      	lsrs	r3, r3, #6
 8004616:	4a28      	ldr	r2, [pc, #160]	; (80046b8 <ADC_Enable+0x108>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800462a:	e002      	b.n	8004632 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3b01      	subs	r3, #1
 8004630:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f9      	bne.n	800462c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004638:	f7fe ffd2 	bl	80035e0 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800463e:	e028      	b.n	8004692 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff f989 	bl	800395c <LL_ADC_IsEnabled>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff f959 	bl	800390c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800465a:	f7fe ffc1 	bl	80035e0 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d914      	bls.n	8004692 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d00d      	beq.n	8004692 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f043 0210 	orr.w	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	f043 0201 	orr.w	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d1cf      	bne.n	8004640 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	8000003f 	.word	0x8000003f
 80046b0:	50040300 	.word	0x50040300
 80046b4:	20000168 	.word	0x20000168
 80046b8:	053e2d63 	.word	0x053e2d63

080046bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff f95a 	bl	8003982 <LL_ADC_IsDisableOngoing>
 80046ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff f941 	bl	800395c <LL_ADC_IsEnabled>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d047      	beq.n	8004770 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d144      	bne.n	8004770 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030d 	and.w	r3, r3, #13
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10c      	bne.n	800470e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff f91b 	bl	8003934 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2203      	movs	r2, #3
 8004704:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004706:	f7fe ff6b 	bl	80035e0 <HAL_GetTick>
 800470a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800470c:	e029      	b.n	8004762 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f043 0210 	orr.w	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e023      	b.n	8004772 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800472a:	f7fe ff59 	bl	80035e0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d914      	bls.n	8004762 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f043 0210 	orr.w	r2, r3, #16
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	f043 0201 	orr.w	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e007      	b.n	8004772 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1dc      	bne.n	800472a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004790:	2b00      	cmp	r3, #0
 8004792:	d14b      	bne.n	800482c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004798:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d021      	beq.n	80047f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe ffcd 	bl	8003752 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d032      	beq.n	8004824 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d12b      	bne.n	8004824 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11f      	bne.n	8004824 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f043 0201 	orr.w	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
 80047f0:	e018      	b.n	8004824 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d111      	bne.n	8004824 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481c:	f043 0201 	orr.w	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7ff fac5 	bl	8003db4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800482a:	e00e      	b.n	800484a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff facf 	bl	8003ddc <HAL_ADC_ErrorCallback>
}
 800483e:	e004      	b.n	800484a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
}
 800484a:	bf00      	nop
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff fab1 	bl	8003dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	f043 0204 	orr.w	r2, r3, #4
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff faa1 	bl	8003ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <LL_ADC_StartCalibration>:
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80048b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048be:	4313      	orrs	r3, r2
 80048c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048e8:	d101      	bne.n	80048ee <LL_ADC_IsCalibrationOnGoing+0x1a>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004906:	2300      	movs	r3, #0
 8004908:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_ADCEx_Calibration_Start+0x1c>
 8004914:	2302      	movs	r3, #2
 8004916:	e04d      	b.n	80049b4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fecb 	bl	80046bc <ADC_Disable>
 8004926:	4603      	mov	r3, r0
 8004928:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d136      	bne.n	800499e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004938:	f023 0302 	bic.w	r3, r3, #2
 800493c:	f043 0202 	orr.w	r2, r3, #2
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6839      	ldr	r1, [r7, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ffa9 	bl	80048a2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004950:	e014      	b.n	800497c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	3301      	adds	r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800495e:	d30d      	bcc.n	800497c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	f023 0312 	bic.w	r3, r3, #18
 8004968:	f043 0210 	orr.w	r2, r3, #16
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e01b      	b.n	80049b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff ffa7 	bl	80048d4 <LL_ADC_IsCalibrationOnGoing>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e2      	bne.n	8004952 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	f023 0303 	bic.w	r3, r3, #3
 8004994:	f043 0201 	orr.w	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	655a      	str	r2, [r3, #84]	; 0x54
 800499c:	e005      	b.n	80049aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	f043 0210 	orr.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e0ed      	b.n	8004baa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fd fffa 	bl	80029d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049f0:	f7fe fdf6 	bl	80035e0 <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049f6:	e012      	b.n	8004a1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049f8:	f7fe fdf2 	bl	80035e0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b0a      	cmp	r3, #10
 8004a04:	d90b      	bls.n	8004a1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2205      	movs	r2, #5
 8004a16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e0c5      	b.n	8004baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0e5      	beq.n	80049f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0202 	bic.w	r2, r2, #2
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a3c:	f7fe fdd0 	bl	80035e0 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a42:	e012      	b.n	8004a6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a44:	f7fe fdcc 	bl	80035e0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b0a      	cmp	r3, #10
 8004a50:	d90b      	bls.n	8004a6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2205      	movs	r2, #5
 8004a62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e09f      	b.n	8004baa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	7e1b      	ldrb	r3, [r3, #24]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d108      	bne.n	8004a92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e007      	b.n	8004aa2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	7e5b      	ldrb	r3, [r3, #25]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d108      	bne.n	8004abc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e007      	b.n	8004acc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	7e9b      	ldrb	r3, [r3, #26]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d108      	bne.n	8004ae6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0220 	orr.w	r2, r2, #32
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e007      	b.n	8004af6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0220 	bic.w	r2, r2, #32
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7edb      	ldrb	r3, [r3, #27]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d108      	bne.n	8004b10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0210 	bic.w	r2, r2, #16
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e007      	b.n	8004b20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0210 	orr.w	r2, r2, #16
 8004b1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	7f1b      	ldrb	r3, [r3, #28]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d108      	bne.n	8004b3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e007      	b.n	8004b4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0208 	bic.w	r2, r2, #8
 8004b48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	7f5b      	ldrb	r3, [r3, #29]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d108      	bne.n	8004b64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0204 	orr.w	r2, r2, #4
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e007      	b.n	8004b74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0204 	bic.w	r2, r2, #4
 8004b72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	ea42 0103 	orr.w	r1, r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	1e5a      	subs	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b087      	sub	sp, #28
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004bca:	7cfb      	ldrb	r3, [r7, #19]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d003      	beq.n	8004bd8 <HAL_CAN_ConfigFilter+0x26>
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	f040 80aa 	bne.w	8004d2c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bde:	f043 0201 	orr.w	r2, r3, #1
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	43db      	mvns	r3, r3
 8004c02:	401a      	ands	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d123      	bne.n	8004c5a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	3248      	adds	r2, #72	; 0x48
 8004c3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c50:	6979      	ldr	r1, [r7, #20]
 8004c52:	3348      	adds	r3, #72	; 0x48
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	440b      	add	r3, r1
 8004c58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d122      	bne.n	8004ca8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3248      	adds	r2, #72	; 0x48
 8004c88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c9e:	6979      	ldr	r1, [r7, #20]
 8004ca0:	3348      	adds	r3, #72	; 0x48
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	440b      	add	r3, r1
 8004ca6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	401a      	ands	r2, r3
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004cc2:	e007      	b.n	8004cd4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004cee:	e007      	b.n	8004d00 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d107      	bne.n	8004d18 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d1e:	f023 0201 	bic.w	r2, r3, #1
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e006      	b.n	8004d3a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
  }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d12e      	bne.n	8004db8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d72:	f7fe fc35 	bl	80035e0 <HAL_GetTick>
 8004d76:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d78:	e012      	b.n	8004da0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d7a:	f7fe fc31 	bl	80035e0 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b0a      	cmp	r3, #10
 8004d86:	d90b      	bls.n	8004da0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2205      	movs	r2, #5
 8004d98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e012      	b.n	8004dc6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e5      	bne.n	8004d7a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e006      	b.n	8004dc6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
  }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b089      	sub	sp, #36	; 0x24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004dec:	7ffb      	ldrb	r3, [r7, #31]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d003      	beq.n	8004dfa <HAL_CAN_AddTxMessage+0x2c>
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	f040 80ad 	bne.w	8004f54 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8095 	beq.w	8004f44 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	0e1b      	lsrs	r3, r3, #24
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e24:	2201      	movs	r2, #1
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10d      	bne.n	8004e52 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e40:	68f9      	ldr	r1, [r7, #12]
 8004e42:	6809      	ldr	r1, [r1, #0]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	3318      	adds	r3, #24
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	440b      	add	r3, r1
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e00f      	b.n	8004e72 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e5c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004e66:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	3318      	adds	r3, #24
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	440b      	add	r3, r1
 8004e70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6819      	ldr	r1, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	3318      	adds	r3, #24
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	440b      	add	r3, r1
 8004e82:	3304      	adds	r3, #4
 8004e84:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	7d1b      	ldrb	r3, [r3, #20]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d111      	bne.n	8004eb2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	3318      	adds	r3, #24
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	4413      	add	r3, r2
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	6811      	ldr	r1, [r2, #0]
 8004ea2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	3318      	adds	r3, #24
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	440b      	add	r3, r1
 8004eae:	3304      	adds	r3, #4
 8004eb0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3307      	adds	r3, #7
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	061a      	lsls	r2, r3, #24
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3306      	adds	r3, #6
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	041b      	lsls	r3, r3, #16
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3305      	adds	r3, #5
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	3204      	adds	r2, #4
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	6811      	ldr	r1, [r2, #0]
 8004eda:	ea43 0200 	orr.w	r2, r3, r0
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004ee8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3303      	adds	r3, #3
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	061a      	lsls	r2, r3, #24
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	041b      	lsls	r3, r3, #16
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3301      	adds	r3, #1
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	4313      	orrs	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	6811      	ldr	r1, [r2, #0]
 8004f10:	ea43 0200 	orr.w	r2, r3, r0
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	440b      	add	r3, r1
 8004f1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	3318      	adds	r3, #24
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	4413      	add	r3, r2
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	6811      	ldr	r1, [r2, #0]
 8004f32:	f043 0201 	orr.w	r2, r3, #1
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3318      	adds	r3, #24
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	440b      	add	r3, r1
 8004f3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e00e      	b.n	8004f62 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e006      	b.n	8004f62 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
  }
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3724      	adds	r7, #36	; 0x24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f82:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f84:	7dfb      	ldrb	r3, [r7, #23]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d003      	beq.n	8004f92 <HAL_CAN_GetRxMessage+0x24>
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	f040 80f3 	bne.w	8005178 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10e      	bne.n	8004fb6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d116      	bne.n	8004fd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0e7      	b.n	8005186 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0d8      	b.n	8005186 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	331b      	adds	r3, #27
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4413      	add	r3, r2
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0204 	and.w	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10c      	bne.n	800500c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	331b      	adds	r3, #27
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	4413      	add	r3, r2
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	0d5b      	lsrs	r3, r3, #21
 8005002:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e00b      	b.n	8005024 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	331b      	adds	r3, #27
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	4413      	add	r3, r2
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	08db      	lsrs	r3, r3, #3
 800501c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	331b      	adds	r3, #27
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	4413      	add	r3, r2
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0202 	and.w	r2, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	331b      	adds	r3, #27
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	4413      	add	r3, r2
 8005046:	3304      	adds	r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 020f 	and.w	r2, r3, #15
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	331b      	adds	r3, #27
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	4413      	add	r3, r2
 800505e:	3304      	adds	r3, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	b2da      	uxtb	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	331b      	adds	r3, #27
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	4413      	add	r3, r2
 8005076:	3304      	adds	r3, #4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	0c1b      	lsrs	r3, r3, #16
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	4413      	add	r3, r2
 800508c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	0a1a      	lsrs	r2, r3, #8
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	0c1a      	lsrs	r2, r3, #16
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	3302      	adds	r3, #2
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	0e1a      	lsrs	r2, r3, #24
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	3303      	adds	r3, #3
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	3304      	adds	r3, #4
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	4413      	add	r3, r2
 8005108:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	0a1a      	lsrs	r2, r3, #8
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	3305      	adds	r3, #5
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4413      	add	r3, r2
 8005122:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	0c1a      	lsrs	r2, r3, #16
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	3306      	adds	r3, #6
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	4413      	add	r3, r2
 800513c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	0e1a      	lsrs	r2, r3, #24
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	3307      	adds	r3, #7
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d108      	bne.n	8005164 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0220 	orr.w	r2, r2, #32
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	e007      	b.n	8005174 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0220 	orr.w	r2, r2, #32
 8005172:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e006      	b.n	8005186 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d002      	beq.n	80051b0 <HAL_CAN_ActivateNotification+0x1e>
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d109      	bne.n	80051c4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6959      	ldr	r1, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e006      	b.n	80051d2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b08a      	sub	sp, #40	; 0x28
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d07c      	beq.n	800531e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d023      	beq.n	8005276 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f983 	bl	800554c <HAL_CAN_TxMailbox0CompleteCallback>
 8005246:	e016      	b.n	8005276 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
 800525a:	e00c      	b.n	8005276 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
 800526e:	e002      	b.n	8005276 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f989 	bl	8005588 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d024      	beq.n	80052ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005288:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f963 	bl	8005560 <HAL_CAN_TxMailbox1CompleteCallback>
 800529a:	e016      	b.n	80052ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d004      	beq.n	80052b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
 80052ae:	e00c      	b.n	80052ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
 80052c2:	e002      	b.n	80052ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f969 	bl	800559c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d024      	beq.n	800531e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f943 	bl	8005574 <HAL_CAN_TxMailbox2CompleteCallback>
 80052ee:	e016      	b.n	800531e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
 8005302:	e00c      	b.n	800531e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
 8005316:	e002      	b.n	800531e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f949 	bl	80055b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00c      	beq.n	8005342 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005338:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2210      	movs	r2, #16
 8005340:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d006      	beq.n	8005364 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2208      	movs	r2, #8
 800535c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f930 	bl	80055c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fb fe4f 	bl	8001020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00c      	beq.n	80053a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800539c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2210      	movs	r2, #16
 80053a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00b      	beq.n	80053c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d006      	beq.n	80053c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2208      	movs	r2, #8
 80053c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f912 	bl	80055ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8f9 	bl	80055d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d006      	beq.n	8005408 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2210      	movs	r2, #16
 8005400:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f8fc 	bl	8005600 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d006      	beq.n	800542a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2208      	movs	r2, #8
 8005422:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8f5 	bl	8005614 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d07b      	beq.n	800552c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d072      	beq.n	8005524 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	f043 0302 	orr.w	r3, r3, #2
 8005474:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	f043 0304 	orr.w	r3, r3, #4
 8005490:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005498:	2b00      	cmp	r3, #0
 800549a:	d043      	beq.n	8005524 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d03e      	beq.n	8005524 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ac:	2b60      	cmp	r3, #96	; 0x60
 80054ae:	d02b      	beq.n	8005508 <HAL_CAN_IRQHandler+0x32a>
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d82e      	bhi.n	8005512 <HAL_CAN_IRQHandler+0x334>
 80054b4:	2b50      	cmp	r3, #80	; 0x50
 80054b6:	d022      	beq.n	80054fe <HAL_CAN_IRQHandler+0x320>
 80054b8:	2b50      	cmp	r3, #80	; 0x50
 80054ba:	d82a      	bhi.n	8005512 <HAL_CAN_IRQHandler+0x334>
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d019      	beq.n	80054f4 <HAL_CAN_IRQHandler+0x316>
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d826      	bhi.n	8005512 <HAL_CAN_IRQHandler+0x334>
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d010      	beq.n	80054ea <HAL_CAN_IRQHandler+0x30c>
 80054c8:	2b30      	cmp	r3, #48	; 0x30
 80054ca:	d822      	bhi.n	8005512 <HAL_CAN_IRQHandler+0x334>
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d002      	beq.n	80054d6 <HAL_CAN_IRQHandler+0x2f8>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d005      	beq.n	80054e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80054d4:	e01d      	b.n	8005512 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	f043 0308 	orr.w	r3, r3, #8
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054de:	e019      	b.n	8005514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f043 0310 	orr.w	r3, r3, #16
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054e8:	e014      	b.n	8005514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	f043 0320 	orr.w	r3, r3, #32
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054f2:	e00f      	b.n	8005514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054fc:	e00a      	b.n	8005514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005506:	e005      	b.n	8005514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005510:	e000      	b.n	8005514 <HAL_CAN_IRQHandler+0x336>
            break;
 8005512:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005522:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2204      	movs	r2, #4
 800552a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	431a      	orrs	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fb fdb6 	bl	80010b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005544:	bf00      	nop
 8005546:	3728      	adds	r7, #40	; 0x28
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005644:	4013      	ands	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800565a:	4a04      	ldr	r2, [pc, #16]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	60d3      	str	r3, [r2, #12]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <__NVIC_GetPriorityGrouping+0x18>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	f003 0307 	and.w	r3, r3, #7
}
 800567e:	4618      	mov	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	2b00      	cmp	r3, #0
 800569c:	db0b      	blt.n	80056b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	f003 021f 	and.w	r2, r3, #31
 80056a4:	4907      	ldr	r1, [pc, #28]	; (80056c4 <__NVIC_EnableIRQ+0x38>)
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2001      	movs	r0, #1
 80056ae:	fa00 f202 	lsl.w	r2, r0, r2
 80056b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	e000e100 	.word	0xe000e100

080056c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	db12      	blt.n	8005700 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056da:	79fb      	ldrb	r3, [r7, #7]
 80056dc:	f003 021f 	and.w	r2, r3, #31
 80056e0:	490a      	ldr	r1, [pc, #40]	; (800570c <__NVIC_DisableIRQ+0x44>)
 80056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	2001      	movs	r0, #1
 80056ea:	fa00 f202 	lsl.w	r2, r0, r2
 80056ee:	3320      	adds	r3, #32
 80056f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80056f4:	f3bf 8f4f 	dsb	sy
}
 80056f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056fa:	f3bf 8f6f 	isb	sy
}
 80056fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	e000e100 	.word	0xe000e100

08005710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	6039      	str	r1, [r7, #0]
 800571a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800571c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005720:	2b00      	cmp	r3, #0
 8005722:	db0a      	blt.n	800573a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	b2da      	uxtb	r2, r3
 8005728:	490c      	ldr	r1, [pc, #48]	; (800575c <__NVIC_SetPriority+0x4c>)
 800572a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572e:	0112      	lsls	r2, r2, #4
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	440b      	add	r3, r1
 8005734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005738:	e00a      	b.n	8005750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	4908      	ldr	r1, [pc, #32]	; (8005760 <__NVIC_SetPriority+0x50>)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	3b04      	subs	r3, #4
 8005748:	0112      	lsls	r2, r2, #4
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	440b      	add	r3, r1
 800574e:	761a      	strb	r2, [r3, #24]
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	e000e100 	.word	0xe000e100
 8005760:	e000ed00 	.word	0xe000ed00

08005764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f1c3 0307 	rsb	r3, r3, #7
 800577e:	2b04      	cmp	r3, #4
 8005780:	bf28      	it	cs
 8005782:	2304      	movcs	r3, #4
 8005784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	3304      	adds	r3, #4
 800578a:	2b06      	cmp	r3, #6
 800578c:	d902      	bls.n	8005794 <NVIC_EncodePriority+0x30>
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3b03      	subs	r3, #3
 8005792:	e000      	b.n	8005796 <NVIC_EncodePriority+0x32>
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43da      	mvns	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	401a      	ands	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057ac:	f04f 31ff 	mov.w	r1, #4294967295
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	fa01 f303 	lsl.w	r3, r1, r3
 80057b6:	43d9      	mvns	r1, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057bc:	4313      	orrs	r3, r2
         );
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3724      	adds	r7, #36	; 0x24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057dc:	d301      	bcc.n	80057e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057de:	2301      	movs	r3, #1
 80057e0:	e00f      	b.n	8005802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057e2:	4a0a      	ldr	r2, [pc, #40]	; (800580c <SysTick_Config+0x40>)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ea:	210f      	movs	r1, #15
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	f7ff ff8e 	bl	8005710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <SysTick_Config+0x40>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057fa:	4b04      	ldr	r3, [pc, #16]	; (800580c <SysTick_Config+0x40>)
 80057fc:	2207      	movs	r2, #7
 80057fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	e000e010 	.word	0xe000e010

08005810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ff05 	bl	8005628 <__NVIC_SetPriorityGrouping>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	4603      	mov	r3, r0
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005838:	f7ff ff1a 	bl	8005670 <__NVIC_GetPriorityGrouping>
 800583c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	6978      	ldr	r0, [r7, #20]
 8005844:	f7ff ff8e 	bl	8005764 <NVIC_EncodePriority>
 8005848:	4602      	mov	r2, r0
 800584a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff ff5d 	bl	8005710 <__NVIC_SetPriority>
}
 8005856:	bf00      	nop
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	4603      	mov	r3, r0
 8005866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff ff0d 	bl	800568c <__NVIC_EnableIRQ>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	4603      	mov	r3, r0
 8005882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff ff1d 	bl	80056c8 <__NVIC_DisableIRQ>
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff ff94 	bl	80057cc <SysTick_Config>
 80058a4:	4603      	mov	r3, r0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e098      	b.n	80059f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	4b4d      	ldr	r3, [pc, #308]	; (8005a00 <HAL_DMA_Init+0x150>)
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d80f      	bhi.n	80058ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	4b4b      	ldr	r3, [pc, #300]	; (8005a04 <HAL_DMA_Init+0x154>)
 80058d6:	4413      	add	r3, r2
 80058d8:	4a4b      	ldr	r2, [pc, #300]	; (8005a08 <HAL_DMA_Init+0x158>)
 80058da:	fba2 2303 	umull	r2, r3, r2, r3
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	009a      	lsls	r2, r3, #2
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a48      	ldr	r2, [pc, #288]	; (8005a0c <HAL_DMA_Init+0x15c>)
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40
 80058ec:	e00e      	b.n	800590c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <HAL_DMA_Init+0x160>)
 80058f6:	4413      	add	r3, r2
 80058f8:	4a43      	ldr	r2, [pc, #268]	; (8005a08 <HAL_DMA_Init+0x158>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	009a      	lsls	r2, r3, #2
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a42      	ldr	r2, [pc, #264]	; (8005a14 <HAL_DMA_Init+0x164>)
 800590a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005926:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800593c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005966:	d039      	beq.n	80059dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <HAL_DMA_Init+0x15c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d11a      	bne.n	80059a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005972:	4b29      	ldr	r3, [pc, #164]	; (8005a18 <HAL_DMA_Init+0x168>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597a:	f003 031c 	and.w	r3, r3, #28
 800597e:	210f      	movs	r1, #15
 8005980:	fa01 f303 	lsl.w	r3, r1, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	4924      	ldr	r1, [pc, #144]	; (8005a18 <HAL_DMA_Init+0x168>)
 8005988:	4013      	ands	r3, r2
 800598a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800598c:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <HAL_DMA_Init+0x168>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6859      	ldr	r1, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005998:	f003 031c 	and.w	r3, r3, #28
 800599c:	fa01 f303 	lsl.w	r3, r1, r3
 80059a0:	491d      	ldr	r1, [pc, #116]	; (8005a18 <HAL_DMA_Init+0x168>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]
 80059a6:	e019      	b.n	80059dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80059a8:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <HAL_DMA_Init+0x16c>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b0:	f003 031c 	and.w	r3, r3, #28
 80059b4:	210f      	movs	r1, #15
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	4917      	ldr	r1, [pc, #92]	; (8005a1c <HAL_DMA_Init+0x16c>)
 80059be:	4013      	ands	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059c2:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <HAL_DMA_Init+0x16c>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	f003 031c 	and.w	r3, r3, #28
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	4911      	ldr	r1, [pc, #68]	; (8005a1c <HAL_DMA_Init+0x16c>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40020407 	.word	0x40020407
 8005a04:	bffdfff8 	.word	0xbffdfff8
 8005a08:	cccccccd 	.word	0xcccccccd
 8005a0c:	40020000 	.word	0x40020000
 8005a10:	bffdfbf8 	.word	0xbffdfbf8
 8005a14:	40020400 	.word	0x40020400
 8005a18:	400200a8 	.word	0x400200a8
 8005a1c:	400204a8 	.word	0x400204a8

08005a20 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e072      	b.n	8005b18 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <HAL_DMA_DeInit+0x104>)
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d80f      	bhi.n	8005a6e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <HAL_DMA_DeInit+0x108>)
 8005a56:	4413      	add	r3, r2
 8005a58:	4a34      	ldr	r2, [pc, #208]	; (8005b2c <HAL_DMA_DeInit+0x10c>)
 8005a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	009a      	lsls	r2, r3, #2
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a31      	ldr	r2, [pc, #196]	; (8005b30 <HAL_DMA_DeInit+0x110>)
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8005a6c:	e00e      	b.n	8005a8c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	4b2f      	ldr	r3, [pc, #188]	; (8005b34 <HAL_DMA_DeInit+0x114>)
 8005a76:	4413      	add	r3, r2
 8005a78:	4a2c      	ldr	r2, [pc, #176]	; (8005b2c <HAL_DMA_DeInit+0x10c>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	009a      	lsls	r2, r3, #2
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2b      	ldr	r2, [pc, #172]	; (8005b38 <HAL_DMA_DeInit+0x118>)
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	f003 021c 	and.w	r2, r3, #28
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8005aa6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	4a20      	ldr	r2, [pc, #128]	; (8005b30 <HAL_DMA_DeInit+0x110>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d10d      	bne.n	8005ace <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ab2:	4b22      	ldr	r3, [pc, #136]	; (8005b3c <HAL_DMA_DeInit+0x11c>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	f003 031c 	and.w	r3, r3, #28
 8005abe:	210f      	movs	r1, #15
 8005ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	491d      	ldr	r1, [pc, #116]	; (8005b3c <HAL_DMA_DeInit+0x11c>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	600b      	str	r3, [r1, #0]
 8005acc:	e00c      	b.n	8005ae8 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ace:	4b1c      	ldr	r3, [pc, #112]	; (8005b40 <HAL_DMA_DeInit+0x120>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad6:	f003 031c 	and.w	r3, r3, #28
 8005ada:	210f      	movs	r1, #15
 8005adc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	4917      	ldr	r1, [pc, #92]	; (8005b40 <HAL_DMA_DeInit+0x120>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40020407 	.word	0x40020407
 8005b28:	bffdfff8 	.word	0xbffdfff8
 8005b2c:	cccccccd 	.word	0xcccccccd
 8005b30:	40020000 	.word	0x40020000
 8005b34:	bffdfbf8 	.word	0xbffdfbf8
 8005b38:	40020400 	.word	0x40020400
 8005b3c:	400200a8 	.word	0x400200a8
 8005b40:	400204a8 	.word	0x400204a8

08005b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_DMA_Start_IT+0x20>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e04b      	b.n	8005bfc <HAL_DMA_Start_IT+0xb8>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d13a      	bne.n	8005bee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f95f 	bl	8005e60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 020e 	orr.w	r2, r2, #14
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e00f      	b.n	8005bdc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0204 	bic.w	r2, r2, #4
 8005bca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 020a 	orr.w	r2, r2, #10
 8005bda:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e005      	b.n	8005bfa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d008      	beq.n	8005c2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e022      	b.n	8005c74 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 020e 	bic.w	r2, r2, #14
 8005c3c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	f003 021c 	and.w	r2, r3, #28
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c60:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d005      	beq.n	8005ca4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
 8005ca2:	e029      	b.n	8005cf8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 020e 	bic.w	r2, r2, #14
 8005cb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc8:	f003 021c 	and.w	r2, r3, #28
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cd6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
    }
  }
  return status;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	f003 031c 	and.w	r3, r3, #28
 8005d22:	2204      	movs	r2, #4
 8005d24:	409a      	lsls	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d026      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x7a>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d021      	beq.n	8005d7c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d107      	bne.n	8005d56 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0204 	bic.w	r2, r2, #4
 8005d54:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	f003 021c 	and.w	r2, r3, #28
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	2104      	movs	r1, #4
 8005d64:	fa01 f202 	lsl.w	r2, r1, r2
 8005d68:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d071      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005d7a:	e06c      	b.n	8005e56 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d80:	f003 031c 	and.w	r3, r3, #28
 8005d84:	2202      	movs	r2, #2
 8005d86:	409a      	lsls	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d02e      	beq.n	8005dee <HAL_DMA_IRQHandler+0xec>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d029      	beq.n	8005dee <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10b      	bne.n	8005dc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 020a 	bic.w	r2, r2, #10
 8005db6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc4:	f003 021c 	and.w	r2, r3, #28
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	2102      	movs	r1, #2
 8005dce:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d038      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005dec:	e033      	b.n	8005e56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f003 031c 	and.w	r3, r3, #28
 8005df6:	2208      	movs	r2, #8
 8005df8:	409a      	lsls	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d02a      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x156>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d025      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 020e 	bic.w	r2, r2, #14
 8005e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e20:	f003 021c 	and.w	r2, r3, #28
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	2101      	movs	r1, #1
 8005e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
}
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	f003 021c 	and.w	r2, r3, #28
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d108      	bne.n	8005ea4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ea2:	e007      	b.n	8005eb4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ece:	e154      	b.n	800617a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8005edc:	4013      	ands	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8146 	beq.w	8006174 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d005      	beq.n	8005f00 <HAL_GPIO_Init+0x40>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d130      	bne.n	8005f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4013      	ands	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f36:	2201      	movs	r2, #1
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4013      	ands	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	f003 0201 	and.w	r2, r3, #1
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d017      	beq.n	8005f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	2203      	movs	r2, #3
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4013      	ands	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d123      	bne.n	8005ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	08da      	lsrs	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3208      	adds	r2, #8
 8005fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	220f      	movs	r2, #15
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	08da      	lsrs	r2, r3, #3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3208      	adds	r2, #8
 8005fec:	6939      	ldr	r1, [r7, #16]
 8005fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4013      	ands	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f003 0203 	and.w	r2, r3, #3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80a0 	beq.w	8006174 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006034:	4b58      	ldr	r3, [pc, #352]	; (8006198 <HAL_GPIO_Init+0x2d8>)
 8006036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006038:	4a57      	ldr	r2, [pc, #348]	; (8006198 <HAL_GPIO_Init+0x2d8>)
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	6613      	str	r3, [r2, #96]	; 0x60
 8006040:	4b55      	ldr	r3, [pc, #340]	; (8006198 <HAL_GPIO_Init+0x2d8>)
 8006042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800604c:	4a53      	ldr	r2, [pc, #332]	; (800619c <HAL_GPIO_Init+0x2dc>)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	089b      	lsrs	r3, r3, #2
 8006052:	3302      	adds	r3, #2
 8006054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	220f      	movs	r2, #15
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	43db      	mvns	r3, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4013      	ands	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006076:	d019      	beq.n	80060ac <HAL_GPIO_Init+0x1ec>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a49      	ldr	r2, [pc, #292]	; (80061a0 <HAL_GPIO_Init+0x2e0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d013      	beq.n	80060a8 <HAL_GPIO_Init+0x1e8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a48      	ldr	r2, [pc, #288]	; (80061a4 <HAL_GPIO_Init+0x2e4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00d      	beq.n	80060a4 <HAL_GPIO_Init+0x1e4>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a47      	ldr	r2, [pc, #284]	; (80061a8 <HAL_GPIO_Init+0x2e8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d007      	beq.n	80060a0 <HAL_GPIO_Init+0x1e0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a46      	ldr	r2, [pc, #280]	; (80061ac <HAL_GPIO_Init+0x2ec>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d101      	bne.n	800609c <HAL_GPIO_Init+0x1dc>
 8006098:	2304      	movs	r3, #4
 800609a:	e008      	b.n	80060ae <HAL_GPIO_Init+0x1ee>
 800609c:	2307      	movs	r3, #7
 800609e:	e006      	b.n	80060ae <HAL_GPIO_Init+0x1ee>
 80060a0:	2303      	movs	r3, #3
 80060a2:	e004      	b.n	80060ae <HAL_GPIO_Init+0x1ee>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e002      	b.n	80060ae <HAL_GPIO_Init+0x1ee>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <HAL_GPIO_Init+0x1ee>
 80060ac:	2300      	movs	r3, #0
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	f002 0203 	and.w	r2, r2, #3
 80060b4:	0092      	lsls	r2, r2, #2
 80060b6:	4093      	lsls	r3, r2
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060be:	4937      	ldr	r1, [pc, #220]	; (800619c <HAL_GPIO_Init+0x2dc>)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	089b      	lsrs	r3, r3, #2
 80060c4:	3302      	adds	r3, #2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060cc:	4b38      	ldr	r3, [pc, #224]	; (80061b0 <HAL_GPIO_Init+0x2f0>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	43db      	mvns	r3, r3
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4013      	ands	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80060f0:	4a2f      	ldr	r2, [pc, #188]	; (80061b0 <HAL_GPIO_Init+0x2f0>)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80060f6:	4b2e      	ldr	r3, [pc, #184]	; (80061b0 <HAL_GPIO_Init+0x2f0>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	43db      	mvns	r3, r3
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4013      	ands	r3, r2
 8006104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800611a:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <HAL_GPIO_Init+0x2f0>)
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006120:	4b23      	ldr	r3, [pc, #140]	; (80061b0 <HAL_GPIO_Init+0x2f0>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	43db      	mvns	r3, r3
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4013      	ands	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006144:	4a1a      	ldr	r2, [pc, #104]	; (80061b0 <HAL_GPIO_Init+0x2f0>)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800614a:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <HAL_GPIO_Init+0x2f0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	43db      	mvns	r3, r3
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4013      	ands	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800616e:	4a10      	ldr	r2, [pc, #64]	; (80061b0 <HAL_GPIO_Init+0x2f0>)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	3301      	adds	r3, #1
 8006178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	f47f aea3 	bne.w	8005ed0 <HAL_GPIO_Init+0x10>
  }
}
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	40021000 	.word	0x40021000
 800619c:	40010000 	.word	0x40010000
 80061a0:	48000400 	.word	0x48000400
 80061a4:	48000800 	.word	0x48000800
 80061a8:	48000c00 	.word	0x48000c00
 80061ac:	48001000 	.word	0x48001000
 80061b0:	40010400 	.word	0x40010400

080061b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80061c2:	e0b7      	b.n	8006334 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80061c4:	2201      	movs	r2, #1
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	4013      	ands	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80aa 	beq.w	800632e <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80061da:	4a5d      	ldr	r2, [pc, #372]	; (8006350 <HAL_GPIO_DeInit+0x19c>)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	089b      	lsrs	r3, r3, #2
 80061e0:	3302      	adds	r3, #2
 80061e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	220f      	movs	r2, #15
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4013      	ands	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006202:	d019      	beq.n	8006238 <HAL_GPIO_DeInit+0x84>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a53      	ldr	r2, [pc, #332]	; (8006354 <HAL_GPIO_DeInit+0x1a0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <HAL_GPIO_DeInit+0x80>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a52      	ldr	r2, [pc, #328]	; (8006358 <HAL_GPIO_DeInit+0x1a4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00d      	beq.n	8006230 <HAL_GPIO_DeInit+0x7c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a51      	ldr	r2, [pc, #324]	; (800635c <HAL_GPIO_DeInit+0x1a8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d007      	beq.n	800622c <HAL_GPIO_DeInit+0x78>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a50      	ldr	r2, [pc, #320]	; (8006360 <HAL_GPIO_DeInit+0x1ac>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d101      	bne.n	8006228 <HAL_GPIO_DeInit+0x74>
 8006224:	2304      	movs	r3, #4
 8006226:	e008      	b.n	800623a <HAL_GPIO_DeInit+0x86>
 8006228:	2307      	movs	r3, #7
 800622a:	e006      	b.n	800623a <HAL_GPIO_DeInit+0x86>
 800622c:	2303      	movs	r3, #3
 800622e:	e004      	b.n	800623a <HAL_GPIO_DeInit+0x86>
 8006230:	2302      	movs	r3, #2
 8006232:	e002      	b.n	800623a <HAL_GPIO_DeInit+0x86>
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_GPIO_DeInit+0x86>
 8006238:	2300      	movs	r3, #0
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	f002 0203 	and.w	r2, r2, #3
 8006240:	0092      	lsls	r2, r2, #2
 8006242:	4093      	lsls	r3, r2
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	429a      	cmp	r2, r3
 8006248:	d132      	bne.n	80062b0 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800624a:	4b46      	ldr	r3, [pc, #280]	; (8006364 <HAL_GPIO_DeInit+0x1b0>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	43db      	mvns	r3, r3
 8006252:	4944      	ldr	r1, [pc, #272]	; (8006364 <HAL_GPIO_DeInit+0x1b0>)
 8006254:	4013      	ands	r3, r2
 8006256:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006258:	4b42      	ldr	r3, [pc, #264]	; (8006364 <HAL_GPIO_DeInit+0x1b0>)
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	43db      	mvns	r3, r3
 8006260:	4940      	ldr	r1, [pc, #256]	; (8006364 <HAL_GPIO_DeInit+0x1b0>)
 8006262:	4013      	ands	r3, r2
 8006264:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006266:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <HAL_GPIO_DeInit+0x1b0>)
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	43db      	mvns	r3, r3
 800626e:	493d      	ldr	r1, [pc, #244]	; (8006364 <HAL_GPIO_DeInit+0x1b0>)
 8006270:	4013      	ands	r3, r2
 8006272:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006274:	4b3b      	ldr	r3, [pc, #236]	; (8006364 <HAL_GPIO_DeInit+0x1b0>)
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	43db      	mvns	r3, r3
 800627c:	4939      	ldr	r1, [pc, #228]	; (8006364 <HAL_GPIO_DeInit+0x1b0>)
 800627e:	4013      	ands	r3, r2
 8006280:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	220f      	movs	r2, #15
 800628c:	fa02 f303 	lsl.w	r3, r2, r3
 8006290:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006292:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <HAL_GPIO_DeInit+0x19c>)
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	089b      	lsrs	r3, r3, #2
 8006298:	3302      	adds	r3, #2
 800629a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	43da      	mvns	r2, r3
 80062a2:	482b      	ldr	r0, [pc, #172]	; (8006350 <HAL_GPIO_DeInit+0x19c>)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	089b      	lsrs	r3, r3, #2
 80062a8:	400a      	ands	r2, r1
 80062aa:	3302      	adds	r3, #2
 80062ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	2103      	movs	r1, #3
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	08da      	lsrs	r2, r3, #3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3208      	adds	r2, #8
 80062cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	220f      	movs	r2, #15
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	43db      	mvns	r3, r3
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	08d2      	lsrs	r2, r2, #3
 80062e4:	4019      	ands	r1, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3208      	adds	r2, #8
 80062ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	2103      	movs	r1, #3
 80062f8:	fa01 f303 	lsl.w	r3, r1, r3
 80062fc:	43db      	mvns	r3, r3
 80062fe:	401a      	ands	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	2101      	movs	r1, #1
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	fa01 f303 	lsl.w	r3, r1, r3
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	2103      	movs	r1, #3
 8006322:	fa01 f303 	lsl.w	r3, r1, r3
 8006326:	43db      	mvns	r3, r3
 8006328:	401a      	ands	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	3301      	adds	r3, #1
 8006332:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	f47f af41 	bne.w	80061c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8006342:	bf00      	nop
 8006344:	bf00      	nop
 8006346:	371c      	adds	r7, #28
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	40010000 	.word	0x40010000
 8006354:	48000400 	.word	0x48000400
 8006358:	48000800 	.word	0x48000800
 800635c:	48000c00 	.word	0x48000c00
 8006360:	48001000 	.word	0x48001000
 8006364:	40010400 	.word	0x40010400

08006368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691a      	ldr	r2, [r3, #16]
 8006378:	887b      	ldrh	r3, [r7, #2]
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e001      	b.n	800638a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	807b      	strh	r3, [r7, #2]
 80063a4:	4613      	mov	r3, r2
 80063a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063a8:	787b      	ldrb	r3, [r7, #1]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063ae:	887a      	ldrh	r2, [r7, #2]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063b4:	e002      	b.n	80063bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063b6:	887a      	ldrh	r2, [r7, #2]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	4013      	ands	r3, r2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d006      	beq.n	80063ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063de:	4a05      	ldr	r2, [pc, #20]	; (80063f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fb fe4e 	bl	8002088 <HAL_GPIO_EXTI_Callback>
  }
}
 80063ec:	bf00      	nop
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40010400 	.word	0x40010400

080063f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e081      	b.n	800650e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fc fb2c 	bl	8002a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2224      	movs	r2, #36	; 0x24
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0201 	bic.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006448:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006458:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d107      	bne.n	8006472 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800646e:	609a      	str	r2, [r3, #8]
 8006470:	e006      	b.n	8006480 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800647e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d104      	bne.n	8006492 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006490:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69d9      	ldr	r1, [r3, #28]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1a      	ldr	r2, [r3, #32]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4603      	mov	r3, r0
 8006528:	817b      	strh	r3, [r7, #10]
 800652a:	460b      	mov	r3, r1
 800652c:	813b      	strh	r3, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b20      	cmp	r3, #32
 800653c:	f040 80f9 	bne.w	8006732 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_I2C_Mem_Write+0x34>
 8006546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006552:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0ed      	b.n	8006734 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_I2C_Mem_Write+0x4e>
 8006562:	2302      	movs	r3, #2
 8006564:	e0e6      	b.n	8006734 <HAL_I2C_Mem_Write+0x21c>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800656e:	f7fd f837 	bl	80035e0 <HAL_GetTick>
 8006572:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	2319      	movs	r3, #25
 800657a:	2201      	movs	r2, #1
 800657c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f955 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0d1      	b.n	8006734 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2221      	movs	r2, #33	; 0x21
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2240      	movs	r2, #64	; 0x40
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a3a      	ldr	r2, [r7, #32]
 80065aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065b8:	88f8      	ldrh	r0, [r7, #6]
 80065ba:	893a      	ldrh	r2, [r7, #8]
 80065bc:	8979      	ldrh	r1, [r7, #10]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	4603      	mov	r3, r0
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f8b9 	bl	8006740 <I2C_RequestMemoryWrite>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0a9      	b.n	8006734 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2bff      	cmp	r3, #255	; 0xff
 80065e8:	d90e      	bls.n	8006608 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	22ff      	movs	r2, #255	; 0xff
 80065ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	8979      	ldrh	r1, [r7, #10]
 80065f8:	2300      	movs	r3, #0
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fabd 	bl	8006b80 <I2C_TransferConfig>
 8006606:	e00f      	b.n	8006628 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006616:	b2da      	uxtb	r2, r3
 8006618:	8979      	ldrh	r1, [r7, #10]
 800661a:	2300      	movs	r3, #0
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 faac 	bl	8006b80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f93f 	bl	80068b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e07b      	b.n	8006734 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	781a      	ldrb	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d034      	beq.n	80066e0 <HAL_I2C_Mem_Write+0x1c8>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667a:	2b00      	cmp	r3, #0
 800667c:	d130      	bne.n	80066e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	2200      	movs	r2, #0
 8006686:	2180      	movs	r1, #128	; 0x80
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f000 f8d1 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e04d      	b.n	8006734 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2bff      	cmp	r3, #255	; 0xff
 80066a0:	d90e      	bls.n	80066c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	22ff      	movs	r2, #255	; 0xff
 80066a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	8979      	ldrh	r1, [r7, #10]
 80066b0:	2300      	movs	r3, #0
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 fa61 	bl	8006b80 <I2C_TransferConfig>
 80066be:	e00f      	b.n	80066e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	8979      	ldrh	r1, [r7, #10]
 80066d2:	2300      	movs	r3, #0
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fa50 	bl	8006b80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d19e      	bne.n	8006628 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f91e 	bl	8006930 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e01a      	b.n	8006734 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2220      	movs	r2, #32
 8006704:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6859      	ldr	r1, [r3, #4]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <HAL_I2C_Mem_Write+0x224>)
 8006712:	400b      	ands	r3, r1
 8006714:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	e000      	b.n	8006734 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006732:	2302      	movs	r3, #2
  }
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	fe00e800 	.word	0xfe00e800

08006740 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	4608      	mov	r0, r1
 800674a:	4611      	mov	r1, r2
 800674c:	461a      	mov	r2, r3
 800674e:	4603      	mov	r3, r0
 8006750:	817b      	strh	r3, [r7, #10]
 8006752:	460b      	mov	r3, r1
 8006754:	813b      	strh	r3, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	b2da      	uxtb	r2, r3
 800675e:	8979      	ldrh	r1, [r7, #10]
 8006760:	4b20      	ldr	r3, [pc, #128]	; (80067e4 <I2C_RequestMemoryWrite+0xa4>)
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 fa09 	bl	8006b80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	69b9      	ldr	r1, [r7, #24]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f89c 	bl	80068b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e02c      	b.n	80067dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d105      	bne.n	8006794 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006788:	893b      	ldrh	r3, [r7, #8]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	629a      	str	r2, [r3, #40]	; 0x28
 8006792:	e015      	b.n	80067c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006794:	893b      	ldrh	r3, [r7, #8]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	b29b      	uxth	r3, r3
 800679a:	b2da      	uxtb	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	69b9      	ldr	r1, [r7, #24]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f882 	bl	80068b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e012      	b.n	80067dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067b6:	893b      	ldrh	r3, [r7, #8]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2200      	movs	r2, #0
 80067c8:	2180      	movs	r1, #128	; 0x80
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 f830 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	80002000 	.word	0x80002000

080067e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d103      	bne.n	8006806 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d007      	beq.n	8006824 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699a      	ldr	r2, [r3, #24]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	619a      	str	r2, [r3, #24]
  }
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006840:	e022      	b.n	8006888 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d01e      	beq.n	8006888 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684a:	f7fc fec9 	bl	80035e0 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d302      	bcc.n	8006860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d113      	bne.n	8006888 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	f043 0220 	orr.w	r2, r3, #32
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e00f      	b.n	80068a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4013      	ands	r3, r2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d0cd      	beq.n	8006842 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068bc:	e02c      	b.n	8006918 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f870 	bl	80069a8 <I2C_IsErrorOccurred>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e02a      	b.n	8006928 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d01e      	beq.n	8006918 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068da:	f7fc fe81 	bl	80035e0 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d302      	bcc.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d113      	bne.n	8006918 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f4:	f043 0220 	orr.w	r2, r3, #32
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e007      	b.n	8006928 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b02      	cmp	r3, #2
 8006924:	d1cb      	bne.n	80068be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800693c:	e028      	b.n	8006990 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f830 	bl	80069a8 <I2C_IsErrorOccurred>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e026      	b.n	80069a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006952:	f7fc fe45 	bl	80035e0 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	d302      	bcc.n	8006968 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d113      	bne.n	8006990 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696c:	f043 0220 	orr.w	r2, r3, #32
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e007      	b.n	80069a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b20      	cmp	r3, #32
 800699c:	d1cf      	bne.n	800693e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d075      	beq.n	8006ac0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2210      	movs	r2, #16
 80069da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069dc:	e056      	b.n	8006a8c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d052      	beq.n	8006a8c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069e6:	f7fc fdfb 	bl	80035e0 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d302      	bcc.n	80069fc <I2C_IsErrorOccurred+0x54>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d147      	bne.n	8006a8c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1e:	d12e      	bne.n	8006a7e <I2C_IsErrorOccurred+0xd6>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a26:	d02a      	beq.n	8006a7e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006a28:	7cfb      	ldrb	r3, [r7, #19]
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d027      	beq.n	8006a7e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a3e:	f7fc fdcf 	bl	80035e0 <HAL_GetTick>
 8006a42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a44:	e01b      	b.n	8006a7e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a46:	f7fc fdcb 	bl	80035e0 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b19      	cmp	r3, #25
 8006a52:	d914      	bls.n	8006a7e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a58:	f043 0220 	orr.w	r2, r3, #32
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d1dc      	bne.n	8006a46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d003      	beq.n	8006aa2 <I2C_IsErrorOccurred+0xfa>
 8006a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d09d      	beq.n	80069de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	f043 0304 	orr.w	r3, r3, #4
 8006ab8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	f043 0301 	orr.w	r3, r3, #1
 8006ad8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ae2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	f043 0308 	orr.w	r3, r3, #8
 8006afa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f043 0302 	orr.w	r3, r3, #2
 8006b1c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01c      	beq.n	8006b70 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fe56 	bl	80067e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6859      	ldr	r1, [r3, #4]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <I2C_IsErrorOccurred+0x1d4>)
 8006b48:	400b      	ands	r3, r1
 8006b4a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3728      	adds	r7, #40	; 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	fe00e800 	.word	0xfe00e800

08006b80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	817b      	strh	r3, [r7, #10]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b92:	897b      	ldrh	r3, [r7, #10]
 8006b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b98:	7a7b      	ldrb	r3, [r7, #9]
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ba0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	0d5b      	lsrs	r3, r3, #21
 8006bba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006bbe:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <I2C_TransferConfig+0x60>)
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	43db      	mvns	r3, r3
 8006bc4:	ea02 0103 	and.w	r1, r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006bd2:	bf00      	nop
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	03ff63ff 	.word	0x03ff63ff

08006be4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d138      	bne.n	8006c6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e032      	b.n	8006c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2224      	movs	r2, #36	; 0x24
 8006c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0201 	bic.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6819      	ldr	r1, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e000      	b.n	8006c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c6c:	2302      	movs	r3, #2
  }
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d139      	bne.n	8006d04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e033      	b.n	8006d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2224      	movs	r2, #36	; 0x24
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ccc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	e000      	b.n	8006d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
  }
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e041      	b.n	8006da8 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006d2c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f245 5255 	movw	r2, #21845	; 0x5555
 8006d36:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6852      	ldr	r2, [r2, #4]
 8006d40:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6892      	ldr	r2, [r2, #8]
 8006d4a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006d4c:	f7fc fc48 	bl	80035e0 <HAL_GetTick>
 8006d50:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d52:	e00f      	b.n	8006d74 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006d54:	f7fc fc44 	bl	80035e0 <HAL_GetTick>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	2b31      	cmp	r3, #49	; 0x31
 8006d60:	d908      	bls.n	8006d74 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e019      	b.n	8006da8 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e8      	bne.n	8006d54 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d005      	beq.n	8006d9c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	68d2      	ldr	r2, [r2, #12]
 8006d98:	611a      	str	r2, [r3, #16]
 8006d9a:	e004      	b.n	8006da6 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006da4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006dc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006dd4:	4b04      	ldr	r3, [pc, #16]	; (8006de8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40007000 	.word	0x40007000

08006dec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dfa:	d130      	bne.n	8006e5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dfc:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e08:	d038      	beq.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e0a:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e12:	4a1e      	ldr	r2, [pc, #120]	; (8006e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e1a:	4b1d      	ldr	r3, [pc, #116]	; (8006e90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2232      	movs	r2, #50	; 0x32
 8006e20:	fb02 f303 	mul.w	r3, r2, r3
 8006e24:	4a1b      	ldr	r2, [pc, #108]	; (8006e94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006e26:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2a:	0c9b      	lsrs	r3, r3, #18
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e30:	e002      	b.n	8006e38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e38:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e44:	d102      	bne.n	8006e4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1f2      	bne.n	8006e32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e4c:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e58:	d110      	bne.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e00f      	b.n	8006e7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d007      	beq.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e6c:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e74:	4a05      	ldr	r2, [pc, #20]	; (8006e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40007000 	.word	0x40007000
 8006e90:	20000168 	.word	0x20000168
 8006e94:	431bde83 	.word	0x431bde83

08006e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f000 bc02 	b.w	80076b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eac:	4b96      	ldr	r3, [pc, #600]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 030c 	and.w	r3, r3, #12
 8006eb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006eb6:	4b94      	ldr	r3, [pc, #592]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80e4 	beq.w	8007096 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x4c>
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b0c      	cmp	r3, #12
 8006ed8:	f040 808b 	bne.w	8006ff2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	f040 8087 	bne.w	8006ff2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ee4:	4b88      	ldr	r3, [pc, #544]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <HAL_RCC_OscConfig+0x64>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e3d9      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1a      	ldr	r2, [r3, #32]
 8006f00:	4b81      	ldr	r3, [pc, #516]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <HAL_RCC_OscConfig+0x7e>
 8006f0c:	4b7e      	ldr	r3, [pc, #504]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f14:	e005      	b.n	8006f22 <HAL_RCC_OscConfig+0x8a>
 8006f16:	4b7c      	ldr	r3, [pc, #496]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d223      	bcs.n	8006f6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fd8a 	bl	8007a44 <RCC_SetFlashLatencyFromMSIRange>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e3ba      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f3a:	4b73      	ldr	r3, [pc, #460]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a72      	ldr	r2, [pc, #456]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f40:	f043 0308 	orr.w	r3, r3, #8
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	4b70      	ldr	r3, [pc, #448]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	496d      	ldr	r1, [pc, #436]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f58:	4b6b      	ldr	r3, [pc, #428]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	4968      	ldr	r1, [pc, #416]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	604b      	str	r3, [r1, #4]
 8006f6c:	e025      	b.n	8006fba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f6e:	4b66      	ldr	r3, [pc, #408]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a65      	ldr	r2, [pc, #404]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f74:	f043 0308 	orr.w	r3, r3, #8
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	4b63      	ldr	r3, [pc, #396]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	4960      	ldr	r1, [pc, #384]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f8c:	4b5e      	ldr	r3, [pc, #376]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	495b      	ldr	r1, [pc, #364]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d109      	bne.n	8006fba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fd4a 	bl	8007a44 <RCC_SetFlashLatencyFromMSIRange>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e37a      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fba:	f000 fc81 	bl	80078c0 <HAL_RCC_GetSysClockFreq>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4b51      	ldr	r3, [pc, #324]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	091b      	lsrs	r3, r3, #4
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	4950      	ldr	r1, [pc, #320]	; (800710c <HAL_RCC_OscConfig+0x274>)
 8006fcc:	5ccb      	ldrb	r3, [r1, r3]
 8006fce:	f003 031f 	and.w	r3, r3, #31
 8006fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd6:	4a4e      	ldr	r2, [pc, #312]	; (8007110 <HAL_RCC_OscConfig+0x278>)
 8006fd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fda:	4b4e      	ldr	r3, [pc, #312]	; (8007114 <HAL_RCC_OscConfig+0x27c>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fc faae 	bl	8003540 <HAL_InitTick>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d052      	beq.n	8007094 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	e35e      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d032      	beq.n	8007060 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ffa:	4b43      	ldr	r3, [pc, #268]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a42      	ldr	r2, [pc, #264]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007006:	f7fc faeb 	bl	80035e0 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800700e:	f7fc fae7 	bl	80035e0 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e347      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007020:	4b39      	ldr	r3, [pc, #228]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f0      	beq.n	800700e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800702c:	4b36      	ldr	r3, [pc, #216]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a35      	ldr	r2, [pc, #212]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8007032:	f043 0308 	orr.w	r3, r3, #8
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	4b33      	ldr	r3, [pc, #204]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	4930      	ldr	r1, [pc, #192]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8007046:	4313      	orrs	r3, r2
 8007048:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800704a:	4b2f      	ldr	r3, [pc, #188]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	492b      	ldr	r1, [pc, #172]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 800705a:	4313      	orrs	r3, r2
 800705c:	604b      	str	r3, [r1, #4]
 800705e:	e01a      	b.n	8007096 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007060:	4b29      	ldr	r3, [pc, #164]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a28      	ldr	r2, [pc, #160]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800706c:	f7fc fab8 	bl	80035e0 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007074:	f7fc fab4 	bl	80035e0 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e314      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007086:	4b20      	ldr	r3, [pc, #128]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f0      	bne.n	8007074 <HAL_RCC_OscConfig+0x1dc>
 8007092:	e000      	b.n	8007096 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d073      	beq.n	800718a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d005      	beq.n	80070b4 <HAL_RCC_OscConfig+0x21c>
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2b0c      	cmp	r3, #12
 80070ac:	d10e      	bne.n	80070cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d10b      	bne.n	80070cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b4:	4b14      	ldr	r3, [pc, #80]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d063      	beq.n	8007188 <HAL_RCC_OscConfig+0x2f0>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d15f      	bne.n	8007188 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e2f1      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d4:	d106      	bne.n	80070e4 <HAL_RCC_OscConfig+0x24c>
 80070d6:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a0b      	ldr	r2, [pc, #44]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 80070dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	e025      	b.n	8007130 <HAL_RCC_OscConfig+0x298>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070ec:	d114      	bne.n	8007118 <HAL_RCC_OscConfig+0x280>
 80070ee:	4b06      	ldr	r3, [pc, #24]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a05      	ldr	r2, [pc, #20]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 80070f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	4b03      	ldr	r3, [pc, #12]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a02      	ldr	r2, [pc, #8]	; (8007108 <HAL_RCC_OscConfig+0x270>)
 8007100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	e013      	b.n	8007130 <HAL_RCC_OscConfig+0x298>
 8007108:	40021000 	.word	0x40021000
 800710c:	0800d710 	.word	0x0800d710
 8007110:	20000168 	.word	0x20000168
 8007114:	20000184 	.word	0x20000184
 8007118:	4ba0      	ldr	r3, [pc, #640]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a9f      	ldr	r2, [pc, #636]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800711e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	4b9d      	ldr	r3, [pc, #628]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a9c      	ldr	r2, [pc, #624]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800712a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800712e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d013      	beq.n	8007160 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007138:	f7fc fa52 	bl	80035e0 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007140:	f7fc fa4e 	bl	80035e0 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b64      	cmp	r3, #100	; 0x64
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e2ae      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007152:	4b92      	ldr	r3, [pc, #584]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0x2a8>
 800715e:	e014      	b.n	800718a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fc fa3e 	bl	80035e0 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007168:	f7fc fa3a 	bl	80035e0 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b64      	cmp	r3, #100	; 0x64
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e29a      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800717a:	4b88      	ldr	r3, [pc, #544]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <HAL_RCC_OscConfig+0x2d0>
 8007186:	e000      	b.n	800718a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d060      	beq.n	8007258 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b04      	cmp	r3, #4
 800719a:	d005      	beq.n	80071a8 <HAL_RCC_OscConfig+0x310>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	d119      	bne.n	80071d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d116      	bne.n	80071d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071a8:	4b7c      	ldr	r3, [pc, #496]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <HAL_RCC_OscConfig+0x328>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e277      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071c0:	4b76      	ldr	r3, [pc, #472]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	061b      	lsls	r3, r3, #24
 80071ce:	4973      	ldr	r1, [pc, #460]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071d4:	e040      	b.n	8007258 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d023      	beq.n	8007226 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071de:	4b6f      	ldr	r3, [pc, #444]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a6e      	ldr	r2, [pc, #440]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80071e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ea:	f7fc f9f9 	bl	80035e0 <HAL_GetTick>
 80071ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071f0:	e008      	b.n	8007204 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071f2:	f7fc f9f5 	bl	80035e0 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e255      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007204:	4b65      	ldr	r3, [pc, #404]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f0      	beq.n	80071f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007210:	4b62      	ldr	r3, [pc, #392]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	495f      	ldr	r1, [pc, #380]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007220:	4313      	orrs	r3, r2
 8007222:	604b      	str	r3, [r1, #4]
 8007224:	e018      	b.n	8007258 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007226:	4b5d      	ldr	r3, [pc, #372]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a5c      	ldr	r2, [pc, #368]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800722c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007232:	f7fc f9d5 	bl	80035e0 <HAL_GetTick>
 8007236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007238:	e008      	b.n	800724c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800723a:	f7fc f9d1 	bl	80035e0 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b02      	cmp	r3, #2
 8007246:	d901      	bls.n	800724c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e231      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800724c:	4b53      	ldr	r3, [pc, #332]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1f0      	bne.n	800723a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b00      	cmp	r3, #0
 8007262:	d03c      	beq.n	80072de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d01c      	beq.n	80072a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800726c:	4b4b      	ldr	r3, [pc, #300]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800726e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007272:	4a4a      	ldr	r2, [pc, #296]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007274:	f043 0301 	orr.w	r3, r3, #1
 8007278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800727c:	f7fc f9b0 	bl	80035e0 <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007284:	f7fc f9ac 	bl	80035e0 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e20c      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007296:	4b41      	ldr	r3, [pc, #260]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0ef      	beq.n	8007284 <HAL_RCC_OscConfig+0x3ec>
 80072a4:	e01b      	b.n	80072de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072a6:	4b3d      	ldr	r3, [pc, #244]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80072a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072ac:	4a3b      	ldr	r2, [pc, #236]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b6:	f7fc f993 	bl	80035e0 <HAL_GetTick>
 80072ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072bc:	e008      	b.n	80072d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072be:	f7fc f98f 	bl	80035e0 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e1ef      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072d0:	4b32      	ldr	r3, [pc, #200]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80072d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1ef      	bne.n	80072be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0304 	and.w	r3, r3, #4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80a6 	beq.w	8007438 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ec:	2300      	movs	r3, #0
 80072ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80072f0:	4b2a      	ldr	r3, [pc, #168]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80072f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10d      	bne.n	8007318 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072fc:	4b27      	ldr	r3, [pc, #156]	; (800739c <HAL_RCC_OscConfig+0x504>)
 80072fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007300:	4a26      	ldr	r2, [pc, #152]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007306:	6593      	str	r3, [r2, #88]	; 0x58
 8007308:	4b24      	ldr	r3, [pc, #144]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800730a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007314:	2301      	movs	r3, #1
 8007316:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007318:	4b21      	ldr	r3, [pc, #132]	; (80073a0 <HAL_RCC_OscConfig+0x508>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	d118      	bne.n	8007356 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007324:	4b1e      	ldr	r3, [pc, #120]	; (80073a0 <HAL_RCC_OscConfig+0x508>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1d      	ldr	r2, [pc, #116]	; (80073a0 <HAL_RCC_OscConfig+0x508>)
 800732a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800732e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007330:	f7fc f956 	bl	80035e0 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007338:	f7fc f952 	bl	80035e0 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e1b2      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800734a:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <HAL_RCC_OscConfig+0x508>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0f0      	beq.n	8007338 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d108      	bne.n	8007370 <HAL_RCC_OscConfig+0x4d8>
 800735e:	4b0f      	ldr	r3, [pc, #60]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007364:	4a0d      	ldr	r2, [pc, #52]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800736e:	e029      	b.n	80073c4 <HAL_RCC_OscConfig+0x52c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b05      	cmp	r3, #5
 8007376:	d115      	bne.n	80073a4 <HAL_RCC_OscConfig+0x50c>
 8007378:	4b08      	ldr	r3, [pc, #32]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800737a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737e:	4a07      	ldr	r2, [pc, #28]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007380:	f043 0304 	orr.w	r3, r3, #4
 8007384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <HAL_RCC_OscConfig+0x504>)
 800738a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738e:	4a03      	ldr	r2, [pc, #12]	; (800739c <HAL_RCC_OscConfig+0x504>)
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007398:	e014      	b.n	80073c4 <HAL_RCC_OscConfig+0x52c>
 800739a:	bf00      	nop
 800739c:	40021000 	.word	0x40021000
 80073a0:	40007000 	.word	0x40007000
 80073a4:	4b9a      	ldr	r3, [pc, #616]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80073a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073aa:	4a99      	ldr	r2, [pc, #612]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073b4:	4b96      	ldr	r3, [pc, #600]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80073b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ba:	4a95      	ldr	r2, [pc, #596]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80073bc:	f023 0304 	bic.w	r3, r3, #4
 80073c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d016      	beq.n	80073fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073cc:	f7fc f908 	bl	80035e0 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073d2:	e00a      	b.n	80073ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073d4:	f7fc f904 	bl	80035e0 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e162      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ea:	4b89      	ldr	r3, [pc, #548]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80073ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0ed      	beq.n	80073d4 <HAL_RCC_OscConfig+0x53c>
 80073f8:	e015      	b.n	8007426 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fa:	f7fc f8f1 	bl	80035e0 <HAL_GetTick>
 80073fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007400:	e00a      	b.n	8007418 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007402:	f7fc f8ed 	bl	80035e0 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007410:	4293      	cmp	r3, r2
 8007412:	d901      	bls.n	8007418 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e14b      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007418:	4b7d      	ldr	r3, [pc, #500]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1ed      	bne.n	8007402 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007426:	7ffb      	ldrb	r3, [r7, #31]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d105      	bne.n	8007438 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800742c:	4b78      	ldr	r3, [pc, #480]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 800742e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007430:	4a77      	ldr	r2, [pc, #476]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 8007432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007436:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b00      	cmp	r3, #0
 8007442:	d03c      	beq.n	80074be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01c      	beq.n	8007486 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800744c:	4b70      	ldr	r3, [pc, #448]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 800744e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007452:	4a6f      	ldr	r2, [pc, #444]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 8007454:	f043 0301 	orr.w	r3, r3, #1
 8007458:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745c:	f7fc f8c0 	bl	80035e0 <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007464:	f7fc f8bc 	bl	80035e0 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e11c      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007476:	4b66      	ldr	r3, [pc, #408]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 8007478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0ef      	beq.n	8007464 <HAL_RCC_OscConfig+0x5cc>
 8007484:	e01b      	b.n	80074be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007486:	4b62      	ldr	r3, [pc, #392]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 8007488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800748c:	4a60      	ldr	r2, [pc, #384]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 800748e:	f023 0301 	bic.w	r3, r3, #1
 8007492:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007496:	f7fc f8a3 	bl	80035e0 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800749c:	e008      	b.n	80074b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800749e:	f7fc f89f 	bl	80035e0 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d901      	bls.n	80074b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e0ff      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80074b0:	4b57      	ldr	r3, [pc, #348]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80074b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1ef      	bne.n	800749e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 80f3 	beq.w	80076ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	f040 80c9 	bne.w	8007664 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80074d2:	4b4f      	ldr	r3, [pc, #316]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f003 0203 	and.w	r2, r3, #3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d12c      	bne.n	8007540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	3b01      	subs	r3, #1
 80074f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d123      	bne.n	8007540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007502:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007504:	429a      	cmp	r2, r3
 8007506:	d11b      	bne.n	8007540 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007514:	429a      	cmp	r2, r3
 8007516:	d113      	bne.n	8007540 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	3b01      	subs	r3, #1
 8007526:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007528:	429a      	cmp	r2, r3
 800752a:	d109      	bne.n	8007540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	085b      	lsrs	r3, r3, #1
 8007538:	3b01      	subs	r3, #1
 800753a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800753c:	429a      	cmp	r2, r3
 800753e:	d06b      	beq.n	8007618 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b0c      	cmp	r3, #12
 8007544:	d062      	beq.n	800760c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007546:	4b32      	ldr	r3, [pc, #200]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e0ac      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007556:	4b2e      	ldr	r3, [pc, #184]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a2d      	ldr	r2, [pc, #180]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 800755c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007560:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007562:	f7fc f83d 	bl	80035e0 <HAL_GetTick>
 8007566:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007568:	e008      	b.n	800757c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800756a:	f7fc f839 	bl	80035e0 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d901      	bls.n	800757c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e099      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800757c:	4b24      	ldr	r3, [pc, #144]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f0      	bne.n	800756a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007588:	4b21      	ldr	r3, [pc, #132]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	4b21      	ldr	r3, [pc, #132]	; (8007614 <HAL_RCC_OscConfig+0x77c>)
 800758e:	4013      	ands	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007598:	3a01      	subs	r2, #1
 800759a:	0112      	lsls	r2, r2, #4
 800759c:	4311      	orrs	r1, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075a2:	0212      	lsls	r2, r2, #8
 80075a4:	4311      	orrs	r1, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80075aa:	0852      	lsrs	r2, r2, #1
 80075ac:	3a01      	subs	r2, #1
 80075ae:	0552      	lsls	r2, r2, #21
 80075b0:	4311      	orrs	r1, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80075b6:	0852      	lsrs	r2, r2, #1
 80075b8:	3a01      	subs	r2, #1
 80075ba:	0652      	lsls	r2, r2, #25
 80075bc:	4311      	orrs	r1, r2
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075c2:	06d2      	lsls	r2, r2, #27
 80075c4:	430a      	orrs	r2, r1
 80075c6:	4912      	ldr	r1, [pc, #72]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80075cc:	4b10      	ldr	r3, [pc, #64]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a0f      	ldr	r2, [pc, #60]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80075d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a0c      	ldr	r2, [pc, #48]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 80075de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075e4:	f7fb fffc 	bl	80035e0 <HAL_GetTick>
 80075e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ec:	f7fb fff8 	bl	80035e0 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e058      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075fe:	4b04      	ldr	r3, [pc, #16]	; (8007610 <HAL_RCC_OscConfig+0x778>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800760a:	e050      	b.n	80076ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e04f      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
 8007610:	40021000 	.word	0x40021000
 8007614:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007618:	4b27      	ldr	r3, [pc, #156]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d144      	bne.n	80076ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007624:	4b24      	ldr	r3, [pc, #144]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a23      	ldr	r2, [pc, #140]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 800762a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800762e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007630:	4b21      	ldr	r3, [pc, #132]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4a20      	ldr	r2, [pc, #128]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 8007636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800763a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800763c:	f7fb ffd0 	bl	80035e0 <HAL_GetTick>
 8007640:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007642:	e008      	b.n	8007656 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007644:	f7fb ffcc 	bl	80035e0 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e02c      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007656:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0f0      	beq.n	8007644 <HAL_RCC_OscConfig+0x7ac>
 8007662:	e024      	b.n	80076ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b0c      	cmp	r3, #12
 8007668:	d01f      	beq.n	80076aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a12      	ldr	r2, [pc, #72]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 8007670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007676:	f7fb ffb3 	bl	80035e0 <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800767e:	f7fb ffaf 	bl	80035e0 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e00f      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007690:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f0      	bne.n	800767e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800769c:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	4905      	ldr	r1, [pc, #20]	; (80076b8 <HAL_RCC_OscConfig+0x820>)
 80076a2:	4b06      	ldr	r3, [pc, #24]	; (80076bc <HAL_RCC_OscConfig+0x824>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	60cb      	str	r3, [r1, #12]
 80076a8:	e001      	b.n	80076ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40021000 	.word	0x40021000
 80076bc:	feeefffc 	.word	0xfeeefffc

080076c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0e7      	b.n	80078a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076d4:	4b75      	ldr	r3, [pc, #468]	; (80078ac <HAL_RCC_ClockConfig+0x1ec>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d910      	bls.n	8007704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076e2:	4b72      	ldr	r3, [pc, #456]	; (80078ac <HAL_RCC_ClockConfig+0x1ec>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f023 0207 	bic.w	r2, r3, #7
 80076ea:	4970      	ldr	r1, [pc, #448]	; (80078ac <HAL_RCC_ClockConfig+0x1ec>)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076f2:	4b6e      	ldr	r3, [pc, #440]	; (80078ac <HAL_RCC_ClockConfig+0x1ec>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0307 	and.w	r3, r3, #7
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d001      	beq.n	8007704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e0cf      	b.n	80078a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d010      	beq.n	8007732 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	4b66      	ldr	r3, [pc, #408]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800771c:	429a      	cmp	r2, r3
 800771e:	d908      	bls.n	8007732 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007720:	4b63      	ldr	r3, [pc, #396]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	4960      	ldr	r1, [pc, #384]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 800772e:	4313      	orrs	r3, r2
 8007730:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d04c      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b03      	cmp	r3, #3
 8007744:	d107      	bne.n	8007756 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007746:	4b5a      	ldr	r3, [pc, #360]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d121      	bne.n	8007796 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e0a6      	b.n	80078a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d107      	bne.n	800776e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800775e:	4b54      	ldr	r3, [pc, #336]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d115      	bne.n	8007796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e09a      	b.n	80078a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d107      	bne.n	8007786 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007776:	4b4e      	ldr	r3, [pc, #312]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d109      	bne.n	8007796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e08e      	b.n	80078a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007786:	4b4a      	ldr	r3, [pc, #296]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e086      	b.n	80078a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007796:	4b46      	ldr	r3, [pc, #280]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f023 0203 	bic.w	r2, r3, #3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	4943      	ldr	r1, [pc, #268]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a8:	f7fb ff1a 	bl	80035e0 <HAL_GetTick>
 80077ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ae:	e00a      	b.n	80077c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077b0:	f7fb ff16 	bl	80035e0 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80077be:	4293      	cmp	r3, r2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e06e      	b.n	80078a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c6:	4b3a      	ldr	r3, [pc, #232]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 020c 	and.w	r2, r3, #12
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d1eb      	bne.n	80077b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d010      	beq.n	8007806 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	4b31      	ldr	r3, [pc, #196]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d208      	bcs.n	8007806 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077f4:	4b2e      	ldr	r3, [pc, #184]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	492b      	ldr	r1, [pc, #172]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007802:	4313      	orrs	r3, r2
 8007804:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007806:	4b29      	ldr	r3, [pc, #164]	; (80078ac <HAL_RCC_ClockConfig+0x1ec>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d210      	bcs.n	8007836 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007814:	4b25      	ldr	r3, [pc, #148]	; (80078ac <HAL_RCC_ClockConfig+0x1ec>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f023 0207 	bic.w	r2, r3, #7
 800781c:	4923      	ldr	r1, [pc, #140]	; (80078ac <HAL_RCC_ClockConfig+0x1ec>)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	4313      	orrs	r3, r2
 8007822:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007824:	4b21      	ldr	r3, [pc, #132]	; (80078ac <HAL_RCC_ClockConfig+0x1ec>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d001      	beq.n	8007836 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e036      	b.n	80078a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0304 	and.w	r3, r3, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	d008      	beq.n	8007854 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007842:	4b1b      	ldr	r3, [pc, #108]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	4918      	ldr	r1, [pc, #96]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007850:	4313      	orrs	r3, r2
 8007852:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b00      	cmp	r3, #0
 800785e:	d009      	beq.n	8007874 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007860:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4910      	ldr	r1, [pc, #64]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 8007870:	4313      	orrs	r3, r2
 8007872:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007874:	f000 f824 	bl	80078c0 <HAL_RCC_GetSysClockFreq>
 8007878:	4602      	mov	r2, r0
 800787a:	4b0d      	ldr	r3, [pc, #52]	; (80078b0 <HAL_RCC_ClockConfig+0x1f0>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	091b      	lsrs	r3, r3, #4
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	490b      	ldr	r1, [pc, #44]	; (80078b4 <HAL_RCC_ClockConfig+0x1f4>)
 8007886:	5ccb      	ldrb	r3, [r1, r3]
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	fa22 f303 	lsr.w	r3, r2, r3
 8007890:	4a09      	ldr	r2, [pc, #36]	; (80078b8 <HAL_RCC_ClockConfig+0x1f8>)
 8007892:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <HAL_RCC_ClockConfig+0x1fc>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f7fb fe51 	bl	8003540 <HAL_InitTick>
 800789e:	4603      	mov	r3, r0
 80078a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80078a2:	7afb      	ldrb	r3, [r7, #11]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	40022000 	.word	0x40022000
 80078b0:	40021000 	.word	0x40021000
 80078b4:	0800d710 	.word	0x0800d710
 80078b8:	20000168 	.word	0x20000168
 80078bc:	20000184 	.word	0x20000184

080078c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b089      	sub	sp, #36	; 0x24
 80078c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
 80078ca:	2300      	movs	r3, #0
 80078cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078ce:	4b3e      	ldr	r3, [pc, #248]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 030c 	and.w	r3, r3, #12
 80078d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078d8:	4b3b      	ldr	r3, [pc, #236]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_RCC_GetSysClockFreq+0x34>
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2b0c      	cmp	r3, #12
 80078ec:	d121      	bne.n	8007932 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d11e      	bne.n	8007932 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80078f4:	4b34      	ldr	r3, [pc, #208]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d107      	bne.n	8007910 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007900:	4b31      	ldr	r3, [pc, #196]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007906:	0a1b      	lsrs	r3, r3, #8
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	61fb      	str	r3, [r7, #28]
 800790e:	e005      	b.n	800791c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007910:	4b2d      	ldr	r3, [pc, #180]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	091b      	lsrs	r3, r3, #4
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800791c:	4a2b      	ldr	r2, [pc, #172]	; (80079cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007924:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007930:	e00a      	b.n	8007948 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d102      	bne.n	800793e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007938:	4b25      	ldr	r3, [pc, #148]	; (80079d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800793a:	61bb      	str	r3, [r7, #24]
 800793c:	e004      	b.n	8007948 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b08      	cmp	r3, #8
 8007942:	d101      	bne.n	8007948 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007944:	4b22      	ldr	r3, [pc, #136]	; (80079d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007946:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2b0c      	cmp	r3, #12
 800794c:	d134      	bne.n	80079b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800794e:	4b1e      	ldr	r3, [pc, #120]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d003      	beq.n	8007966 <HAL_RCC_GetSysClockFreq+0xa6>
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b03      	cmp	r3, #3
 8007962:	d003      	beq.n	800796c <HAL_RCC_GetSysClockFreq+0xac>
 8007964:	e005      	b.n	8007972 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007966:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007968:	617b      	str	r3, [r7, #20]
      break;
 800796a:	e005      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800796c:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800796e:	617b      	str	r3, [r7, #20]
      break;
 8007970:	e002      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	617b      	str	r3, [r7, #20]
      break;
 8007976:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007978:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	091b      	lsrs	r3, r3, #4
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	3301      	adds	r3, #1
 8007984:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007986:	4b10      	ldr	r3, [pc, #64]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	0a1b      	lsrs	r3, r3, #8
 800798c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	fb03 f202 	mul.w	r2, r3, r2
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	fbb2 f3f3 	udiv	r3, r2, r3
 800799c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800799e:	4b0a      	ldr	r3, [pc, #40]	; (80079c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	0e5b      	lsrs	r3, r3, #25
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	3301      	adds	r3, #1
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80079b8:	69bb      	ldr	r3, [r7, #24]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3724      	adds	r7, #36	; 0x24
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	40021000 	.word	0x40021000
 80079cc:	0800d728 	.word	0x0800d728
 80079d0:	00f42400 	.word	0x00f42400

080079d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079d8:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80079da:	681b      	ldr	r3, [r3, #0]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	20000168 	.word	0x20000168

080079ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80079f0:	f7ff fff0 	bl	80079d4 <HAL_RCC_GetHCLKFreq>
 80079f4:	4602      	mov	r2, r0
 80079f6:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	4904      	ldr	r1, [pc, #16]	; (8007a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a02:	5ccb      	ldrb	r3, [r1, r3]
 8007a04:	f003 031f 	and.w	r3, r3, #31
 8007a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	40021000 	.word	0x40021000
 8007a14:	0800d720 	.word	0x0800d720

08007a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a1c:	f7ff ffda 	bl	80079d4 <HAL_RCC_GetHCLKFreq>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	0adb      	lsrs	r3, r3, #11
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	4904      	ldr	r1, [pc, #16]	; (8007a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a2e:	5ccb      	ldrb	r3, [r1, r3]
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	0800d720 	.word	0x0800d720

08007a44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a50:	4b2a      	ldr	r3, [pc, #168]	; (8007afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a5c:	f7ff f9b8 	bl	8006dd0 <HAL_PWREx_GetVoltageRange>
 8007a60:	6178      	str	r0, [r7, #20]
 8007a62:	e014      	b.n	8007a8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a64:	4b25      	ldr	r3, [pc, #148]	; (8007afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a68:	4a24      	ldr	r2, [pc, #144]	; (8007afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8007a70:	4b22      	ldr	r3, [pc, #136]	; (8007afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a7c:	f7ff f9a8 	bl	8006dd0 <HAL_PWREx_GetVoltageRange>
 8007a80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a82:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a86:	4a1d      	ldr	r2, [pc, #116]	; (8007afc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a94:	d10b      	bne.n	8007aae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b80      	cmp	r3, #128	; 0x80
 8007a9a:	d919      	bls.n	8007ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2ba0      	cmp	r3, #160	; 0xa0
 8007aa0:	d902      	bls.n	8007aa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	613b      	str	r3, [r7, #16]
 8007aa6:	e013      	b.n	8007ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	e010      	b.n	8007ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b80      	cmp	r3, #128	; 0x80
 8007ab2:	d902      	bls.n	8007aba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	613b      	str	r3, [r7, #16]
 8007ab8:	e00a      	b.n	8007ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b80      	cmp	r3, #128	; 0x80
 8007abe:	d102      	bne.n	8007ac6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	613b      	str	r3, [r7, #16]
 8007ac4:	e004      	b.n	8007ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b70      	cmp	r3, #112	; 0x70
 8007aca:	d101      	bne.n	8007ad0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007acc:	2301      	movs	r3, #1
 8007ace:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f023 0207 	bic.w	r2, r3, #7
 8007ad8:	4909      	ldr	r1, [pc, #36]	; (8007b00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007ae0:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d001      	beq.n	8007af2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e000      	b.n	8007af4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40021000 	.word	0x40021000
 8007b00:	40022000 	.word	0x40022000

08007b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b10:	2300      	movs	r3, #0
 8007b12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d031      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b28:	d01a      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007b2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b2e:	d814      	bhi.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d009      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b38:	d10f      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007b3a:	4b5d      	ldr	r3, [pc, #372]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	4a5c      	ldr	r2, [pc, #368]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b46:	e00c      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 f9f0 	bl	8007f34 <RCCEx_PLLSAI1_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b58:	e003      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	74fb      	strb	r3, [r7, #19]
      break;
 8007b5e:	e000      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b62:	7cfb      	ldrb	r3, [r7, #19]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10b      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b68:	4b51      	ldr	r3, [pc, #324]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b76:	494e      	ldr	r1, [pc, #312]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b7e:	e001      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	7cfb      	ldrb	r3, [r7, #19]
 8007b82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 809e 	beq.w	8007cce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b92:	2300      	movs	r3, #0
 8007b94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b96:	4b46      	ldr	r3, [pc, #280]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00d      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bac:	4b40      	ldr	r3, [pc, #256]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb0:	4a3f      	ldr	r2, [pc, #252]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8007bb8:	4b3d      	ldr	r3, [pc, #244]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	60bb      	str	r3, [r7, #8]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bc8:	4b3a      	ldr	r3, [pc, #232]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a39      	ldr	r2, [pc, #228]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bd4:	f7fb fd04 	bl	80035e0 <HAL_GetTick>
 8007bd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bda:	e009      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bdc:	f7fb fd00 	bl	80035e0 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d902      	bls.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	74fb      	strb	r3, [r7, #19]
        break;
 8007bee:	e005      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bf0:	4b30      	ldr	r3, [pc, #192]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0ef      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007bfc:	7cfb      	ldrb	r3, [r7, #19]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d15a      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c02:	4b2b      	ldr	r3, [pc, #172]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d01e      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d019      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c1e:	4b24      	ldr	r3, [pc, #144]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c2a:	4b21      	ldr	r3, [pc, #132]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c30:	4a1f      	ldr	r2, [pc, #124]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c3a:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c40:	4a1b      	ldr	r2, [pc, #108]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c4a:	4a19      	ldr	r2, [pc, #100]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d016      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c5c:	f7fb fcc0 	bl	80035e0 <HAL_GetTick>
 8007c60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c62:	e00b      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c64:	f7fb fcbc 	bl	80035e0 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d902      	bls.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	74fb      	strb	r3, [r7, #19]
            break;
 8007c7a:	e006      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0ec      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007c8a:	7cfb      	ldrb	r3, [r7, #19]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10b      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9e:	4904      	ldr	r1, [pc, #16]	; (8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007ca6:	e009      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ca8:	7cfb      	ldrb	r3, [r7, #19]
 8007caa:	74bb      	strb	r3, [r7, #18]
 8007cac:	e006      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007cae:	bf00      	nop
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb8:	7cfb      	ldrb	r3, [r7, #19]
 8007cba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cbc:	7c7b      	ldrb	r3, [r7, #17]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d105      	bne.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cc2:	4b9b      	ldr	r3, [pc, #620]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	4a9a      	ldr	r2, [pc, #616]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ccc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cda:	4b95      	ldr	r3, [pc, #596]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce0:	f023 0203 	bic.w	r2, r3, #3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	4991      	ldr	r1, [pc, #580]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cfc:	4b8c      	ldr	r3, [pc, #560]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d02:	f023 020c 	bic.w	r2, r3, #12
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	4989      	ldr	r1, [pc, #548]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0304 	and.w	r3, r3, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d1e:	4b84      	ldr	r3, [pc, #528]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	4980      	ldr	r1, [pc, #512]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d40:	4b7b      	ldr	r3, [pc, #492]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	4978      	ldr	r1, [pc, #480]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d62:	4b73      	ldr	r3, [pc, #460]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d70:	496f      	ldr	r1, [pc, #444]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d84:	4b6a      	ldr	r3, [pc, #424]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	4967      	ldr	r1, [pc, #412]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007da6:	4b62      	ldr	r3, [pc, #392]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db4:	495e      	ldr	r1, [pc, #376]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007dc8:	4b59      	ldr	r3, [pc, #356]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd6:	4956      	ldr	r1, [pc, #344]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dea:	4b51      	ldr	r3, [pc, #324]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	494d      	ldr	r1, [pc, #308]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d028      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e0c:	4b48      	ldr	r3, [pc, #288]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e1a:	4945      	ldr	r1, [pc, #276]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e2a:	d106      	bne.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e2c:	4b40      	ldr	r3, [pc, #256]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	4a3f      	ldr	r2, [pc, #252]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e36:	60d3      	str	r3, [r2, #12]
 8007e38:	e011      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e42:	d10c      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3304      	adds	r3, #4
 8007e48:	2101      	movs	r1, #1
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f872 	bl	8007f34 <RCCEx_PLLSAI1_Config>
 8007e50:	4603      	mov	r3, r0
 8007e52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e54:	7cfb      	ldrb	r3, [r7, #19]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007e5a:	7cfb      	ldrb	r3, [r7, #19]
 8007e5c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d028      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e6a:	4b31      	ldr	r3, [pc, #196]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e78:	492d      	ldr	r1, [pc, #180]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e88:	d106      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e8a:	4b29      	ldr	r3, [pc, #164]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	4a28      	ldr	r2, [pc, #160]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e94:	60d3      	str	r3, [r2, #12]
 8007e96:	e011      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ea0:	d10c      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 f843 	bl	8007f34 <RCCEx_PLLSAI1_Config>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007eb2:	7cfb      	ldrb	r3, [r7, #19]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007eb8:	7cfb      	ldrb	r3, [r7, #19]
 8007eba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01c      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ec8:	4b19      	ldr	r3, [pc, #100]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ece:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed6:	4916      	ldr	r1, [pc, #88]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ee6:	d10c      	bne.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3304      	adds	r3, #4
 8007eec:	2102      	movs	r1, #2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 f820 	bl	8007f34 <RCCEx_PLLSAI1_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ef8:	7cfb      	ldrb	r3, [r7, #19]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007efe:	7cfb      	ldrb	r3, [r7, #19]
 8007f00:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f0e:	4b08      	ldr	r3, [pc, #32]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f14:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1c:	4904      	ldr	r1, [pc, #16]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f24:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	40021000 	.word	0x40021000

08007f34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f42:	4b74      	ldr	r3, [pc, #464]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d018      	beq.n	8007f80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f4e:	4b71      	ldr	r3, [pc, #452]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f003 0203 	and.w	r2, r3, #3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d10d      	bne.n	8007f7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
       ||
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007f66:	4b6b      	ldr	r3, [pc, #428]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	091b      	lsrs	r3, r3, #4
 8007f6c:	f003 0307 	and.w	r3, r3, #7
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
       ||
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d047      	beq.n	800800a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]
 8007f7e:	e044      	b.n	800800a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d018      	beq.n	8007fba <RCCEx_PLLSAI1_Config+0x86>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d825      	bhi.n	8007fd8 <RCCEx_PLLSAI1_Config+0xa4>
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d002      	beq.n	8007f96 <RCCEx_PLLSAI1_Config+0x62>
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d009      	beq.n	8007fa8 <RCCEx_PLLSAI1_Config+0x74>
 8007f94:	e020      	b.n	8007fd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f96:	4b5f      	ldr	r3, [pc, #380]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d11d      	bne.n	8007fde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fa6:	e01a      	b.n	8007fde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007fa8:	4b5a      	ldr	r3, [pc, #360]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d116      	bne.n	8007fe2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fb8:	e013      	b.n	8007fe2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007fba:	4b56      	ldr	r3, [pc, #344]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10f      	bne.n	8007fe6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007fc6:	4b53      	ldr	r3, [pc, #332]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fd6:	e006      	b.n	8007fe6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
      break;
 8007fdc:	e004      	b.n	8007fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007fde:	bf00      	nop
 8007fe0:	e002      	b.n	8007fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007fe6:	bf00      	nop
    }

    if(status == HAL_OK)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10d      	bne.n	800800a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007fee:	4b49      	ldr	r3, [pc, #292]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6819      	ldr	r1, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	011b      	lsls	r3, r3, #4
 8008002:	430b      	orrs	r3, r1
 8008004:	4943      	ldr	r1, [pc, #268]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008006:	4313      	orrs	r3, r2
 8008008:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d17c      	bne.n	800810a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008010:	4b40      	ldr	r3, [pc, #256]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a3f      	ldr	r2, [pc, #252]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800801a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800801c:	f7fb fae0 	bl	80035e0 <HAL_GetTick>
 8008020:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008022:	e009      	b.n	8008038 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008024:	f7fb fadc 	bl	80035e0 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d902      	bls.n	8008038 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	73fb      	strb	r3, [r7, #15]
        break;
 8008036:	e005      	b.n	8008044 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008038:	4b36      	ldr	r3, [pc, #216]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1ef      	bne.n	8008024 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d15f      	bne.n	800810a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d110      	bne.n	8008072 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008050:	4b30      	ldr	r3, [pc, #192]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008058:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6892      	ldr	r2, [r2, #8]
 8008060:	0211      	lsls	r1, r2, #8
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	68d2      	ldr	r2, [r2, #12]
 8008066:	06d2      	lsls	r2, r2, #27
 8008068:	430a      	orrs	r2, r1
 800806a:	492a      	ldr	r1, [pc, #168]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 800806c:	4313      	orrs	r3, r2
 800806e:	610b      	str	r3, [r1, #16]
 8008070:	e027      	b.n	80080c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d112      	bne.n	800809e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008078:	4b26      	ldr	r3, [pc, #152]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	6892      	ldr	r2, [r2, #8]
 8008088:	0211      	lsls	r1, r2, #8
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6912      	ldr	r2, [r2, #16]
 800808e:	0852      	lsrs	r2, r2, #1
 8008090:	3a01      	subs	r2, #1
 8008092:	0552      	lsls	r2, r2, #21
 8008094:	430a      	orrs	r2, r1
 8008096:	491f      	ldr	r1, [pc, #124]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008098:	4313      	orrs	r3, r2
 800809a:	610b      	str	r3, [r1, #16]
 800809c:	e011      	b.n	80080c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800809e:	4b1d      	ldr	r3, [pc, #116]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80080a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	6892      	ldr	r2, [r2, #8]
 80080ae:	0211      	lsls	r1, r2, #8
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6952      	ldr	r2, [r2, #20]
 80080b4:	0852      	lsrs	r2, r2, #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	0652      	lsls	r2, r2, #25
 80080ba:	430a      	orrs	r2, r1
 80080bc:	4915      	ldr	r1, [pc, #84]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80080c2:	4b14      	ldr	r3, [pc, #80]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a13      	ldr	r2, [pc, #76]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ce:	f7fb fa87 	bl	80035e0 <HAL_GetTick>
 80080d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080d4:	e009      	b.n	80080ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080d6:	f7fb fa83 	bl	80035e0 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d902      	bls.n	80080ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	73fb      	strb	r3, [r7, #15]
          break;
 80080e8:	e005      	b.n	80080f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080ea:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0ef      	beq.n	80080d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	4903      	ldr	r1, [pc, #12]	; (8008114 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008106:	4313      	orrs	r3, r2
 8008108:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800810a:	7bfb      	ldrb	r3, [r7, #15]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	40021000 	.word	0x40021000

08008118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e049      	b.n	80081be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7fa fcf6 	bl	8002b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3304      	adds	r3, #4
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f000 faca 	bl	80086f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d001      	beq.n	80081e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e03b      	b.n	8008258 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0201 	orr.w	r2, r2, #1
 80081f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a19      	ldr	r2, [pc, #100]	; (8008264 <HAL_TIM_Base_Start_IT+0x9c>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d009      	beq.n	8008216 <HAL_TIM_Base_Start_IT+0x4e>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800820a:	d004      	beq.n	8008216 <HAL_TIM_Base_Start_IT+0x4e>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a15      	ldr	r2, [pc, #84]	; (8008268 <HAL_TIM_Base_Start_IT+0xa0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d115      	bne.n	8008242 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	4b13      	ldr	r3, [pc, #76]	; (800826c <HAL_TIM_Base_Start_IT+0xa4>)
 800821e:	4013      	ands	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b06      	cmp	r3, #6
 8008226:	d015      	beq.n	8008254 <HAL_TIM_Base_Start_IT+0x8c>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800822e:	d011      	beq.n	8008254 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008240:	e008      	b.n	8008254 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f042 0201 	orr.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	e000      	b.n	8008256 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008254:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40014000 	.word	0x40014000
 800826c:	00010007 	.word	0x00010007

08008270 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0201 	bic.w	r2, r2, #1
 8008286:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6a1a      	ldr	r2, [r3, #32]
 800828e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008292:	4013      	ands	r3, r2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10f      	bne.n	80082b8 <HAL_TIM_Base_Stop_IT+0x48>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6a1a      	ldr	r2, [r3, #32]
 800829e:	f240 4344 	movw	r3, #1092	; 0x444
 80082a2:	4013      	ands	r3, r2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d107      	bne.n	80082b8 <HAL_TIM_Base_Stop_IT+0x48>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0201 	bic.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d122      	bne.n	800832a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d11b      	bne.n	800832a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f06f 0202 	mvn.w	r2, #2
 80082fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f9ce 	bl	80086b2 <HAL_TIM_IC_CaptureCallback>
 8008316:	e005      	b.n	8008324 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f9c0 	bl	800869e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f9d1 	bl	80086c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b04      	cmp	r3, #4
 8008336:	d122      	bne.n	800837e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b04      	cmp	r3, #4
 8008344:	d11b      	bne.n	800837e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f06f 0204 	mvn.w	r2, #4
 800834e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f9a4 	bl	80086b2 <HAL_TIM_IC_CaptureCallback>
 800836a:	e005      	b.n	8008378 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f996 	bl	800869e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f9a7 	bl	80086c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 0308 	and.w	r3, r3, #8
 8008388:	2b08      	cmp	r3, #8
 800838a:	d122      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b08      	cmp	r3, #8
 8008398:	d11b      	bne.n	80083d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f06f 0208 	mvn.w	r2, #8
 80083a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2204      	movs	r2, #4
 80083a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f003 0303 	and.w	r3, r3, #3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f97a 	bl	80086b2 <HAL_TIM_IC_CaptureCallback>
 80083be:	e005      	b.n	80083cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f96c 	bl	800869e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f97d 	bl	80086c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	f003 0310 	and.w	r3, r3, #16
 80083dc:	2b10      	cmp	r3, #16
 80083de:	d122      	bne.n	8008426 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d11b      	bne.n	8008426 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f06f 0210 	mvn.w	r2, #16
 80083f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2208      	movs	r2, #8
 80083fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f950 	bl	80086b2 <HAL_TIM_IC_CaptureCallback>
 8008412:	e005      	b.n	8008420 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f942 	bl	800869e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f953 	bl	80086c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b01      	cmp	r3, #1
 8008432:	d10e      	bne.n	8008452 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b01      	cmp	r3, #1
 8008440:	d107      	bne.n	8008452 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f06f 0201 	mvn.w	r2, #1
 800844a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7f9 fe35 	bl	80020bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845c:	2b80      	cmp	r3, #128	; 0x80
 800845e:	d10e      	bne.n	800847e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d107      	bne.n	800847e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 faa7 	bl	80089cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848c:	d10e      	bne.n	80084ac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008498:	2b80      	cmp	r3, #128	; 0x80
 800849a:	d107      	bne.n	80084ac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80084a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa9a 	bl	80089e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b6:	2b40      	cmp	r3, #64	; 0x40
 80084b8:	d10e      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c4:	2b40      	cmp	r3, #64	; 0x40
 80084c6:	d107      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f901 	bl	80086da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f003 0320 	and.w	r3, r3, #32
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d10e      	bne.n	8008504 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d107      	bne.n	8008504 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f06f 0220 	mvn.w	r2, #32
 80084fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fa5a 	bl	80089b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_TIM_ConfigClockSource+0x1c>
 8008524:	2302      	movs	r3, #2
 8008526:	e0b6      	b.n	8008696 <HAL_TIM_ConfigClockSource+0x18a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008546:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800854a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008552:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008564:	d03e      	beq.n	80085e4 <HAL_TIM_ConfigClockSource+0xd8>
 8008566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800856a:	f200 8087 	bhi.w	800867c <HAL_TIM_ConfigClockSource+0x170>
 800856e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008572:	f000 8086 	beq.w	8008682 <HAL_TIM_ConfigClockSource+0x176>
 8008576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800857a:	d87f      	bhi.n	800867c <HAL_TIM_ConfigClockSource+0x170>
 800857c:	2b70      	cmp	r3, #112	; 0x70
 800857e:	d01a      	beq.n	80085b6 <HAL_TIM_ConfigClockSource+0xaa>
 8008580:	2b70      	cmp	r3, #112	; 0x70
 8008582:	d87b      	bhi.n	800867c <HAL_TIM_ConfigClockSource+0x170>
 8008584:	2b60      	cmp	r3, #96	; 0x60
 8008586:	d050      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x11e>
 8008588:	2b60      	cmp	r3, #96	; 0x60
 800858a:	d877      	bhi.n	800867c <HAL_TIM_ConfigClockSource+0x170>
 800858c:	2b50      	cmp	r3, #80	; 0x50
 800858e:	d03c      	beq.n	800860a <HAL_TIM_ConfigClockSource+0xfe>
 8008590:	2b50      	cmp	r3, #80	; 0x50
 8008592:	d873      	bhi.n	800867c <HAL_TIM_ConfigClockSource+0x170>
 8008594:	2b40      	cmp	r3, #64	; 0x40
 8008596:	d058      	beq.n	800864a <HAL_TIM_ConfigClockSource+0x13e>
 8008598:	2b40      	cmp	r3, #64	; 0x40
 800859a:	d86f      	bhi.n	800867c <HAL_TIM_ConfigClockSource+0x170>
 800859c:	2b30      	cmp	r3, #48	; 0x30
 800859e:	d064      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x15e>
 80085a0:	2b30      	cmp	r3, #48	; 0x30
 80085a2:	d86b      	bhi.n	800867c <HAL_TIM_ConfigClockSource+0x170>
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	d060      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x15e>
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d867      	bhi.n	800867c <HAL_TIM_ConfigClockSource+0x170>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d05c      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x15e>
 80085b0:	2b10      	cmp	r3, #16
 80085b2:	d05a      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x15e>
 80085b4:	e062      	b.n	800867c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6818      	ldr	r0, [r3, #0]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	6899      	ldr	r1, [r3, #8]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f000 f971 	bl	80088ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	609a      	str	r2, [r3, #8]
      break;
 80085e2:	e04f      	b.n	8008684 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	6899      	ldr	r1, [r3, #8]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f000 f95a 	bl	80088ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008606:	609a      	str	r2, [r3, #8]
      break;
 8008608:	e03c      	b.n	8008684 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	6859      	ldr	r1, [r3, #4]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	461a      	mov	r2, r3
 8008618:	f000 f8ce 	bl	80087b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2150      	movs	r1, #80	; 0x50
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f927 	bl	8008876 <TIM_ITRx_SetConfig>
      break;
 8008628:	e02c      	b.n	8008684 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	6859      	ldr	r1, [r3, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	461a      	mov	r2, r3
 8008638:	f000 f8ed 	bl	8008816 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2160      	movs	r1, #96	; 0x60
 8008642:	4618      	mov	r0, r3
 8008644:	f000 f917 	bl	8008876 <TIM_ITRx_SetConfig>
      break;
 8008648:	e01c      	b.n	8008684 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	6859      	ldr	r1, [r3, #4]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	461a      	mov	r2, r3
 8008658:	f000 f8ae 	bl	80087b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2140      	movs	r1, #64	; 0x40
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f907 	bl	8008876 <TIM_ITRx_SetConfig>
      break;
 8008668:	e00c      	b.n	8008684 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4619      	mov	r1, r3
 8008674:	4610      	mov	r0, r2
 8008676:	f000 f8fe 	bl	8008876 <TIM_ITRx_SetConfig>
      break;
 800867a:	e003      	b.n	8008684 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	73fb      	strb	r3, [r7, #15]
      break;
 8008680:	e000      	b.n	8008684 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008682:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
	...

080086f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a2a      	ldr	r2, [pc, #168]	; (80087ac <TIM_Base_SetConfig+0xbc>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_Base_SetConfig+0x20>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870e:	d108      	bne.n	8008722 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a21      	ldr	r2, [pc, #132]	; (80087ac <TIM_Base_SetConfig+0xbc>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00b      	beq.n	8008742 <TIM_Base_SetConfig+0x52>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008730:	d007      	beq.n	8008742 <TIM_Base_SetConfig+0x52>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a1e      	ldr	r2, [pc, #120]	; (80087b0 <TIM_Base_SetConfig+0xc0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d003      	beq.n	8008742 <TIM_Base_SetConfig+0x52>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a1d      	ldr	r2, [pc, #116]	; (80087b4 <TIM_Base_SetConfig+0xc4>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d108      	bne.n	8008754 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689a      	ldr	r2, [r3, #8]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a0c      	ldr	r2, [pc, #48]	; (80087ac <TIM_Base_SetConfig+0xbc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d007      	beq.n	8008790 <TIM_Base_SetConfig+0xa0>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a0b      	ldr	r2, [pc, #44]	; (80087b0 <TIM_Base_SetConfig+0xc0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d003      	beq.n	8008790 <TIM_Base_SetConfig+0xa0>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a0a      	ldr	r2, [pc, #40]	; (80087b4 <TIM_Base_SetConfig+0xc4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d103      	bne.n	8008798 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	615a      	str	r2, [r3, #20]
}
 800879e:	bf00      	nop
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	40012c00 	.word	0x40012c00
 80087b0:	40014000 	.word	0x40014000
 80087b4:	40014400 	.word	0x40014400

080087b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	f023 0201 	bic.w	r2, r3, #1
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	011b      	lsls	r3, r3, #4
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f023 030a 	bic.w	r3, r3, #10
 80087f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008816:	b480      	push	{r7}
 8008818:	b087      	sub	sp, #28
 800881a:	af00      	add	r7, sp, #0
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	60b9      	str	r1, [r7, #8]
 8008820:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	f023 0210 	bic.w	r2, r3, #16
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008840:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	031b      	lsls	r3, r3, #12
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008852:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	4313      	orrs	r3, r2
 800885c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	621a      	str	r2, [r3, #32]
}
 800886a:	bf00      	nop
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008876:	b480      	push	{r7}
 8008878:	b085      	sub	sp, #20
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800888c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	f043 0307 	orr.w	r3, r3, #7
 8008898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	609a      	str	r2, [r3, #8]
}
 80088a0:	bf00      	nop
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	021a      	lsls	r2, r3, #8
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	431a      	orrs	r2, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	609a      	str	r2, [r3, #8]
}
 80088e0:	bf00      	nop
 80088e2:	371c      	adds	r7, #28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008900:	2302      	movs	r3, #2
 8008902:	e04f      	b.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a21      	ldr	r2, [pc, #132]	; (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d108      	bne.n	8008940 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008934:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	4313      	orrs	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a14      	ldr	r2, [pc, #80]	; (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d009      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800896c:	d004      	beq.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a10      	ldr	r2, [pc, #64]	; (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d10c      	bne.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800897e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	4313      	orrs	r3, r2
 8008988:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	40012c00 	.word	0x40012c00
 80089b4:	40014000 	.word	0x40014000

080089b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e040      	b.n	8008a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d106      	bne.n	8008a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7fa f8e4 	bl	8002be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2224      	movs	r2, #36	; 0x24
 8008a20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 0201 	bic.w	r2, r2, #1
 8008a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fd2c 	bl	8009490 <UART_SetConfig>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e022      	b.n	8008a88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 ff7a 	bl	8009944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689a      	ldr	r2, [r3, #8]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0201 	orr.w	r2, r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 f801 	bl	8009a88 <UART_CheckIdleState>
 8008a86:	4603      	mov	r3, r0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e02b      	b.n	8008afa <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2224      	movs	r2, #36	; 0x24
 8008aa6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0201 	bic.w	r2, r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2200      	movs	r2, #0
 8008abe:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2200      	movs	r2, #0
 8008ace:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7fa f915 	bl	8002d00 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b08a      	sub	sp, #40	; 0x28
 8008b06:	af02      	add	r7, sp, #8
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	603b      	str	r3, [r7, #0]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	f040 8082 	bne.w	8008c20 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <HAL_UART_Transmit+0x26>
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e07a      	b.n	8008c22 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d101      	bne.n	8008b3a <HAL_UART_Transmit+0x38>
 8008b36:	2302      	movs	r3, #2
 8008b38:	e073      	b.n	8008c22 <HAL_UART_Transmit+0x120>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2221      	movs	r2, #33	; 0x21
 8008b4e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b50:	f7fa fd46 	bl	80035e0 <HAL_GetTick>
 8008b54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	88fa      	ldrh	r2, [r7, #6]
 8008b5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b6e:	d108      	bne.n	8008b82 <HAL_UART_Transmit+0x80>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	61bb      	str	r3, [r7, #24]
 8008b80:	e003      	b.n	8008b8a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008b92:	e02d      	b.n	8008bf0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2180      	movs	r1, #128	; 0x80
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 ffbb 	bl	8009b1a <UART_WaitOnFlagUntilTimeout>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e039      	b.n	8008c22 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10b      	bne.n	8008bcc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	881a      	ldrh	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc0:	b292      	uxth	r2, r2
 8008bc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	3302      	adds	r3, #2
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	e008      	b.n	8008bde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	781a      	ldrb	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	b292      	uxth	r2, r2
 8008bd6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1cb      	bne.n	8008b94 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	2200      	movs	r2, #0
 8008c04:	2140      	movs	r1, #64	; 0x40
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 ff87 	bl	8009b1a <UART_WaitOnFlagUntilTimeout>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e005      	b.n	8008c22 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	e000      	b.n	8008c22 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008c20:	2302      	movs	r3, #2
  }
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b08a      	sub	sp, #40	; 0x28
 8008c2e:	af02      	add	r7, sp, #8
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	4613      	mov	r3, r2
 8008c38:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	f040 80bf 	bne.w	8008dc2 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <HAL_UART_Receive+0x26>
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e0b7      	b.n	8008dc4 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d101      	bne.n	8008c62 <HAL_UART_Receive+0x38>
 8008c5e:	2302      	movs	r3, #2
 8008c60:	e0b0      	b.n	8008dc4 <HAL_UART_Receive+0x19a>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2222      	movs	r2, #34	; 0x22
 8008c76:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c7e:	f7fa fcaf 	bl	80035e0 <HAL_GetTick>
 8008c82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	88fa      	ldrh	r2, [r7, #6]
 8008c90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9c:	d10e      	bne.n	8008cbc <HAL_UART_Receive+0x92>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d105      	bne.n	8008cb2 <HAL_UART_Receive+0x88>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008cac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cb0:	e02d      	b.n	8008d0e <HAL_UART_Receive+0xe4>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	22ff      	movs	r2, #255	; 0xff
 8008cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cba:	e028      	b.n	8008d0e <HAL_UART_Receive+0xe4>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10d      	bne.n	8008ce0 <HAL_UART_Receive+0xb6>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d104      	bne.n	8008cd6 <HAL_UART_Receive+0xac>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	22ff      	movs	r2, #255	; 0xff
 8008cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cd4:	e01b      	b.n	8008d0e <HAL_UART_Receive+0xe4>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	227f      	movs	r2, #127	; 0x7f
 8008cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cde:	e016      	b.n	8008d0e <HAL_UART_Receive+0xe4>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ce8:	d10d      	bne.n	8008d06 <HAL_UART_Receive+0xdc>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <HAL_UART_Receive+0xd2>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	227f      	movs	r2, #127	; 0x7f
 8008cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cfa:	e008      	b.n	8008d0e <HAL_UART_Receive+0xe4>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	223f      	movs	r2, #63	; 0x3f
 8008d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d04:	e003      	b.n	8008d0e <HAL_UART_Receive+0xe4>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d14:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1e:	d108      	bne.n	8008d32 <HAL_UART_Receive+0x108>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d104      	bne.n	8008d32 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	61bb      	str	r3, [r7, #24]
 8008d30:	e003      	b.n	8008d3a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008d42:	e033      	b.n	8008dac <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2120      	movs	r1, #32
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 fee3 	bl	8009b1a <UART_WaitOnFlagUntilTimeout>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e032      	b.n	8008dc4 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10c      	bne.n	8008d7e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	8a7b      	ldrh	r3, [r7, #18]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	3302      	adds	r3, #2
 8008d7a:	61bb      	str	r3, [r7, #24]
 8008d7c:	e00d      	b.n	8008d9a <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	8a7b      	ldrh	r3, [r7, #18]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	3301      	adds	r3, #1
 8008d98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1c5      	bne.n	8008d44 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e000      	b.n	8008dc4 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008dc2:	2302      	movs	r3, #2
  }
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	; 0x28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d142      	bne.n	8008e68 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <HAL_UART_Receive_DMA+0x22>
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e03b      	b.n	8008e6a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d101      	bne.n	8008e00 <HAL_UART_Receive_DMA+0x34>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	e034      	b.n	8008e6a <HAL_UART_Receive_DMA+0x9e>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a18      	ldr	r2, [pc, #96]	; (8008e74 <HAL_UART_Receive_DMA+0xa8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d01f      	beq.n	8008e58 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d018      	beq.n	8008e58 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	613b      	str	r3, [r7, #16]
   return(result);
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	623b      	str	r3, [r7, #32]
 8008e46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	69f9      	ldr	r1, [r7, #28]
 8008e4a:	6a3a      	ldr	r2, [r7, #32]
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e6      	bne.n	8008e26 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 ff20 	bl	8009ca4 <UART_Start_Receive_DMA>
 8008e64:	4603      	mov	r3, r0
 8008e66:	e000      	b.n	8008e6a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008e68:	2302      	movs	r3, #2
  }
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3728      	adds	r7, #40	; 0x28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	40008000 	.word	0x40008000

08008e78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b0ba      	sub	sp, #232	; 0xe8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008ea2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d115      	bne.n	8008ee0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00f      	beq.n	8008ee0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d009      	beq.n	8008ee0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 82a6 	beq.w	8009422 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	4798      	blx	r3
      }
      return;
 8008ede:	e2a0      	b.n	8009422 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008ee0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 8117 	beq.w	8009118 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008ef6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008efa:	4b85      	ldr	r3, [pc, #532]	; (8009110 <HAL_UART_IRQHandler+0x298>)
 8008efc:	4013      	ands	r3, r2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 810a 	beq.w	8009118 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d011      	beq.n	8008f34 <HAL_UART_IRQHandler+0xbc>
 8008f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2201      	movs	r2, #1
 8008f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f2a:	f043 0201 	orr.w	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d011      	beq.n	8008f64 <HAL_UART_IRQHandler+0xec>
 8008f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00b      	beq.n	8008f64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2202      	movs	r2, #2
 8008f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f5a:	f043 0204 	orr.w	r2, r3, #4
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d011      	beq.n	8008f94 <HAL_UART_IRQHandler+0x11c>
 8008f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00b      	beq.n	8008f94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2204      	movs	r2, #4
 8008f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f8a:	f043 0202 	orr.w	r2, r3, #2
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d017      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa4:	f003 0320 	and.w	r3, r3, #32
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d105      	bne.n	8008fb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fc6:	f043 0208 	orr.w	r2, r3, #8
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d012      	beq.n	8009002 <HAL_UART_IRQHandler+0x18a>
 8008fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00c      	beq.n	8009002 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff8:	f043 0220 	orr.w	r2, r3, #32
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 820c 	beq.w	8009426 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800900e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00d      	beq.n	8009036 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800901a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800901e:	f003 0320 	and.w	r3, r3, #32
 8009022:	2b00      	cmp	r3, #0
 8009024:	d007      	beq.n	8009036 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800903c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904a:	2b40      	cmp	r3, #64	; 0x40
 800904c:	d005      	beq.n	800905a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800904e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009052:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009056:	2b00      	cmp	r3, #0
 8009058:	d04f      	beq.n	80090fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 feee 	bl	8009e3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906a:	2b40      	cmp	r3, #64	; 0x40
 800906c:	d141      	bne.n	80090f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3308      	adds	r3, #8
 8009074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800908c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3308      	adds	r3, #8
 8009096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800909a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800909e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090aa:	e841 2300 	strex	r3, r2, [r1]
 80090ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1d9      	bne.n	800906e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d013      	beq.n	80090ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c6:	4a13      	ldr	r2, [pc, #76]	; (8009114 <HAL_UART_IRQHandler+0x29c>)
 80090c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fc fdd6 	bl	8005c80 <HAL_DMA_Abort_IT>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d017      	beq.n	800910a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80090e4:	4610      	mov	r0, r2
 80090e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e8:	e00f      	b.n	800910a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f9ba 	bl	8009464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e00b      	b.n	800910a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9b6 	bl	8009464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f8:	e007      	b.n	800910a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f9b2 	bl	8009464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009108:	e18d      	b.n	8009426 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800910a:	bf00      	nop
    return;
 800910c:	e18b      	b.n	8009426 <HAL_UART_IRQHandler+0x5ae>
 800910e:	bf00      	nop
 8009110:	04000120 	.word	0x04000120
 8009114:	0800a0db 	.word	0x0800a0db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800911c:	2b01      	cmp	r3, #1
 800911e:	f040 8146 	bne.w	80093ae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 813f 	beq.w	80093ae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009134:	f003 0310 	and.w	r3, r3, #16
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 8138 	beq.w	80093ae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2210      	movs	r2, #16
 8009144:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009150:	2b40      	cmp	r3, #64	; 0x40
 8009152:	f040 80b4 	bne.w	80092be <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009162:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 815f 	beq.w	800942a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009176:	429a      	cmp	r2, r3
 8009178:	f080 8157 	bcs.w	800942a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009182:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0320 	and.w	r3, r3, #32
 8009192:	2b00      	cmp	r3, #0
 8009194:	f040 8085 	bne.w	80092a2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	461a      	mov	r2, r3
 80091be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1da      	bne.n	8009198 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3308      	adds	r3, #8
 80091e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091f4:	f023 0301 	bic.w	r3, r3, #1
 80091f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3308      	adds	r3, #8
 8009202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009206:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800920a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800920e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e1      	bne.n	80091e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3308      	adds	r3, #8
 8009224:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009228:	e853 3f00 	ldrex	r3, [r3]
 800922c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800922e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3308      	adds	r3, #8
 800923e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009242:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009244:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009248:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e3      	bne.n	800921e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2220      	movs	r2, #32
 800925a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009272:	f023 0310 	bic.w	r3, r3, #16
 8009276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009284:	65bb      	str	r3, [r7, #88]	; 0x58
 8009286:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800928a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e4      	bne.n	8009262 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929c:	4618      	mov	r0, r3
 800929e:	f7fc fcb1 	bl	8005c04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f8de 	bl	8009478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092bc:	e0b5      	b.n	800942a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092d8:	b29b      	uxth	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f000 80a7 	beq.w	800942e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80092e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 80a2 	beq.w	800942e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800930c:	647b      	str	r3, [r7, #68]	; 0x44
 800930e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009310:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009314:	e841 2300 	strex	r3, r2, [r1]
 8009318:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800931a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1e4      	bne.n	80092ea <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3308      	adds	r3, #8
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	e853 3f00 	ldrex	r3, [r3]
 800932e:	623b      	str	r3, [r7, #32]
   return(result);
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	f023 0301 	bic.w	r3, r3, #1
 8009336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009344:	633a      	str	r2, [r7, #48]	; 0x30
 8009346:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800934a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e3      	bne.n	8009320 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2220      	movs	r2, #32
 800935c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	e853 3f00 	ldrex	r3, [r3]
 8009376:	60fb      	str	r3, [r7, #12]
   return(result);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0310 	bic.w	r3, r3, #16
 800937e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800938c:	61fb      	str	r3, [r7, #28]
 800938e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	69b9      	ldr	r1, [r7, #24]
 8009392:	69fa      	ldr	r2, [r7, #28]
 8009394:	e841 2300 	strex	r3, r2, [r1]
 8009398:	617b      	str	r3, [r7, #20]
   return(result);
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e4      	bne.n	800936a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f866 	bl	8009478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093ac:	e03f      	b.n	800942e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00e      	beq.n	80093d8 <HAL_UART_IRQHandler+0x560>
 80093ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d008      	beq.n	80093d8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80093ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fec2 	bl	800a15a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093d6:	e02d      	b.n	8009434 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80093d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00e      	beq.n	8009402 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80093e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d008      	beq.n	8009402 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01c      	beq.n	8009432 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	4798      	blx	r3
    }
    return;
 8009400:	e017      	b.n	8009432 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940a:	2b00      	cmp	r3, #0
 800940c:	d012      	beq.n	8009434 <HAL_UART_IRQHandler+0x5bc>
 800940e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00c      	beq.n	8009434 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fe73 	bl	800a106 <UART_EndTransmit_IT>
    return;
 8009420:	e008      	b.n	8009434 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009422:	bf00      	nop
 8009424:	e006      	b.n	8009434 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009426:	bf00      	nop
 8009428:	e004      	b.n	8009434 <HAL_UART_IRQHandler+0x5bc>
      return;
 800942a:	bf00      	nop
 800942c:	e002      	b.n	8009434 <HAL_UART_IRQHandler+0x5bc>
      return;
 800942e:	bf00      	nop
 8009430:	e000      	b.n	8009434 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009432:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009434:	37e8      	adds	r7, #232	; 0xe8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop

0800943c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009494:	b08a      	sub	sp, #40	; 0x28
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	431a      	orrs	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	431a      	orrs	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	4b9e      	ldr	r3, [pc, #632]	; (8009738 <UART_SetConfig+0x2a8>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	6812      	ldr	r2, [r2, #0]
 80094c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094c8:	430b      	orrs	r3, r1
 80094ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a93      	ldr	r2, [pc, #588]	; (800973c <UART_SetConfig+0x2ac>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d004      	beq.n	80094fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f8:	4313      	orrs	r3, r2
 80094fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800950c:	430a      	orrs	r2, r1
 800950e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a8a      	ldr	r2, [pc, #552]	; (8009740 <UART_SetConfig+0x2b0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d126      	bne.n	8009568 <UART_SetConfig+0xd8>
 800951a:	4b8a      	ldr	r3, [pc, #552]	; (8009744 <UART_SetConfig+0x2b4>)
 800951c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009520:	f003 0303 	and.w	r3, r3, #3
 8009524:	2b03      	cmp	r3, #3
 8009526:	d81b      	bhi.n	8009560 <UART_SetConfig+0xd0>
 8009528:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <UART_SetConfig+0xa0>)
 800952a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952e:	bf00      	nop
 8009530:	08009541 	.word	0x08009541
 8009534:	08009551 	.word	0x08009551
 8009538:	08009549 	.word	0x08009549
 800953c:	08009559 	.word	0x08009559
 8009540:	2301      	movs	r3, #1
 8009542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009546:	e0ab      	b.n	80096a0 <UART_SetConfig+0x210>
 8009548:	2302      	movs	r3, #2
 800954a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800954e:	e0a7      	b.n	80096a0 <UART_SetConfig+0x210>
 8009550:	2304      	movs	r3, #4
 8009552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009556:	e0a3      	b.n	80096a0 <UART_SetConfig+0x210>
 8009558:	2308      	movs	r3, #8
 800955a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800955e:	e09f      	b.n	80096a0 <UART_SetConfig+0x210>
 8009560:	2310      	movs	r3, #16
 8009562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009566:	e09b      	b.n	80096a0 <UART_SetConfig+0x210>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a76      	ldr	r2, [pc, #472]	; (8009748 <UART_SetConfig+0x2b8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d138      	bne.n	80095e4 <UART_SetConfig+0x154>
 8009572:	4b74      	ldr	r3, [pc, #464]	; (8009744 <UART_SetConfig+0x2b4>)
 8009574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009578:	f003 030c 	and.w	r3, r3, #12
 800957c:	2b0c      	cmp	r3, #12
 800957e:	d82d      	bhi.n	80095dc <UART_SetConfig+0x14c>
 8009580:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <UART_SetConfig+0xf8>)
 8009582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009586:	bf00      	nop
 8009588:	080095bd 	.word	0x080095bd
 800958c:	080095dd 	.word	0x080095dd
 8009590:	080095dd 	.word	0x080095dd
 8009594:	080095dd 	.word	0x080095dd
 8009598:	080095cd 	.word	0x080095cd
 800959c:	080095dd 	.word	0x080095dd
 80095a0:	080095dd 	.word	0x080095dd
 80095a4:	080095dd 	.word	0x080095dd
 80095a8:	080095c5 	.word	0x080095c5
 80095ac:	080095dd 	.word	0x080095dd
 80095b0:	080095dd 	.word	0x080095dd
 80095b4:	080095dd 	.word	0x080095dd
 80095b8:	080095d5 	.word	0x080095d5
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095c2:	e06d      	b.n	80096a0 <UART_SetConfig+0x210>
 80095c4:	2302      	movs	r3, #2
 80095c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095ca:	e069      	b.n	80096a0 <UART_SetConfig+0x210>
 80095cc:	2304      	movs	r3, #4
 80095ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095d2:	e065      	b.n	80096a0 <UART_SetConfig+0x210>
 80095d4:	2308      	movs	r3, #8
 80095d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095da:	e061      	b.n	80096a0 <UART_SetConfig+0x210>
 80095dc:	2310      	movs	r3, #16
 80095de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095e2:	e05d      	b.n	80096a0 <UART_SetConfig+0x210>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a58      	ldr	r2, [pc, #352]	; (800974c <UART_SetConfig+0x2bc>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d125      	bne.n	800963a <UART_SetConfig+0x1aa>
 80095ee:	4b55      	ldr	r3, [pc, #340]	; (8009744 <UART_SetConfig+0x2b4>)
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095f8:	2b30      	cmp	r3, #48	; 0x30
 80095fa:	d016      	beq.n	800962a <UART_SetConfig+0x19a>
 80095fc:	2b30      	cmp	r3, #48	; 0x30
 80095fe:	d818      	bhi.n	8009632 <UART_SetConfig+0x1a2>
 8009600:	2b20      	cmp	r3, #32
 8009602:	d00a      	beq.n	800961a <UART_SetConfig+0x18a>
 8009604:	2b20      	cmp	r3, #32
 8009606:	d814      	bhi.n	8009632 <UART_SetConfig+0x1a2>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <UART_SetConfig+0x182>
 800960c:	2b10      	cmp	r3, #16
 800960e:	d008      	beq.n	8009622 <UART_SetConfig+0x192>
 8009610:	e00f      	b.n	8009632 <UART_SetConfig+0x1a2>
 8009612:	2300      	movs	r3, #0
 8009614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009618:	e042      	b.n	80096a0 <UART_SetConfig+0x210>
 800961a:	2302      	movs	r3, #2
 800961c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009620:	e03e      	b.n	80096a0 <UART_SetConfig+0x210>
 8009622:	2304      	movs	r3, #4
 8009624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009628:	e03a      	b.n	80096a0 <UART_SetConfig+0x210>
 800962a:	2308      	movs	r3, #8
 800962c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009630:	e036      	b.n	80096a0 <UART_SetConfig+0x210>
 8009632:	2310      	movs	r3, #16
 8009634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009638:	e032      	b.n	80096a0 <UART_SetConfig+0x210>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a3f      	ldr	r2, [pc, #252]	; (800973c <UART_SetConfig+0x2ac>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d12a      	bne.n	800969a <UART_SetConfig+0x20a>
 8009644:	4b3f      	ldr	r3, [pc, #252]	; (8009744 <UART_SetConfig+0x2b4>)
 8009646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800964a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800964e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009652:	d01a      	beq.n	800968a <UART_SetConfig+0x1fa>
 8009654:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009658:	d81b      	bhi.n	8009692 <UART_SetConfig+0x202>
 800965a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800965e:	d00c      	beq.n	800967a <UART_SetConfig+0x1ea>
 8009660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009664:	d815      	bhi.n	8009692 <UART_SetConfig+0x202>
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <UART_SetConfig+0x1e2>
 800966a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800966e:	d008      	beq.n	8009682 <UART_SetConfig+0x1f2>
 8009670:	e00f      	b.n	8009692 <UART_SetConfig+0x202>
 8009672:	2300      	movs	r3, #0
 8009674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009678:	e012      	b.n	80096a0 <UART_SetConfig+0x210>
 800967a:	2302      	movs	r3, #2
 800967c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009680:	e00e      	b.n	80096a0 <UART_SetConfig+0x210>
 8009682:	2304      	movs	r3, #4
 8009684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009688:	e00a      	b.n	80096a0 <UART_SetConfig+0x210>
 800968a:	2308      	movs	r3, #8
 800968c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009690:	e006      	b.n	80096a0 <UART_SetConfig+0x210>
 8009692:	2310      	movs	r3, #16
 8009694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009698:	e002      	b.n	80096a0 <UART_SetConfig+0x210>
 800969a:	2310      	movs	r3, #16
 800969c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a25      	ldr	r2, [pc, #148]	; (800973c <UART_SetConfig+0x2ac>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	f040 808a 	bne.w	80097c0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096b0:	2b08      	cmp	r3, #8
 80096b2:	d824      	bhi.n	80096fe <UART_SetConfig+0x26e>
 80096b4:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <UART_SetConfig+0x22c>)
 80096b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ba:	bf00      	nop
 80096bc:	080096e1 	.word	0x080096e1
 80096c0:	080096ff 	.word	0x080096ff
 80096c4:	080096e9 	.word	0x080096e9
 80096c8:	080096ff 	.word	0x080096ff
 80096cc:	080096ef 	.word	0x080096ef
 80096d0:	080096ff 	.word	0x080096ff
 80096d4:	080096ff 	.word	0x080096ff
 80096d8:	080096ff 	.word	0x080096ff
 80096dc:	080096f7 	.word	0x080096f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096e0:	f7fe f984 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 80096e4:	61f8      	str	r0, [r7, #28]
        break;
 80096e6:	e010      	b.n	800970a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096e8:	4b19      	ldr	r3, [pc, #100]	; (8009750 <UART_SetConfig+0x2c0>)
 80096ea:	61fb      	str	r3, [r7, #28]
        break;
 80096ec:	e00d      	b.n	800970a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096ee:	f7fe f8e7 	bl	80078c0 <HAL_RCC_GetSysClockFreq>
 80096f2:	61f8      	str	r0, [r7, #28]
        break;
 80096f4:	e009      	b.n	800970a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096fa:	61fb      	str	r3, [r7, #28]
        break;
 80096fc:	e005      	b.n	800970a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009708:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 8109 	beq.w	8009924 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	4413      	add	r3, r2
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	429a      	cmp	r2, r3
 8009720:	d305      	bcc.n	800972e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	429a      	cmp	r2, r3
 800972c:	d912      	bls.n	8009754 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009734:	e0f6      	b.n	8009924 <UART_SetConfig+0x494>
 8009736:	bf00      	nop
 8009738:	efff69f3 	.word	0xefff69f3
 800973c:	40008000 	.word	0x40008000
 8009740:	40013800 	.word	0x40013800
 8009744:	40021000 	.word	0x40021000
 8009748:	40004400 	.word	0x40004400
 800974c:	40004800 	.word	0x40004800
 8009750:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	2200      	movs	r2, #0
 8009758:	461c      	mov	r4, r3
 800975a:	4615      	mov	r5, r2
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	022b      	lsls	r3, r5, #8
 8009766:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800976a:	0222      	lsls	r2, r4, #8
 800976c:	68f9      	ldr	r1, [r7, #12]
 800976e:	6849      	ldr	r1, [r1, #4]
 8009770:	0849      	lsrs	r1, r1, #1
 8009772:	2000      	movs	r0, #0
 8009774:	4688      	mov	r8, r1
 8009776:	4681      	mov	r9, r0
 8009778:	eb12 0a08 	adds.w	sl, r2, r8
 800977c:	eb43 0b09 	adc.w	fp, r3, r9
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	607a      	str	r2, [r7, #4]
 800978a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800978e:	4650      	mov	r0, sl
 8009790:	4659      	mov	r1, fp
 8009792:	f7f7 fa59 	bl	8000c48 <__aeabi_uldivmod>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4613      	mov	r3, r2
 800979c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097a4:	d308      	bcc.n	80097b8 <UART_SetConfig+0x328>
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097ac:	d204      	bcs.n	80097b8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	60da      	str	r2, [r3, #12]
 80097b6:	e0b5      	b.n	8009924 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80097be:	e0b1      	b.n	8009924 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097c8:	d15d      	bne.n	8009886 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80097ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097ce:	2b08      	cmp	r3, #8
 80097d0:	d827      	bhi.n	8009822 <UART_SetConfig+0x392>
 80097d2:	a201      	add	r2, pc, #4	; (adr r2, 80097d8 <UART_SetConfig+0x348>)
 80097d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d8:	080097fd 	.word	0x080097fd
 80097dc:	08009805 	.word	0x08009805
 80097e0:	0800980d 	.word	0x0800980d
 80097e4:	08009823 	.word	0x08009823
 80097e8:	08009813 	.word	0x08009813
 80097ec:	08009823 	.word	0x08009823
 80097f0:	08009823 	.word	0x08009823
 80097f4:	08009823 	.word	0x08009823
 80097f8:	0800981b 	.word	0x0800981b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097fc:	f7fe f8f6 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 8009800:	61f8      	str	r0, [r7, #28]
        break;
 8009802:	e014      	b.n	800982e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009804:	f7fe f908 	bl	8007a18 <HAL_RCC_GetPCLK2Freq>
 8009808:	61f8      	str	r0, [r7, #28]
        break;
 800980a:	e010      	b.n	800982e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800980c:	4b4c      	ldr	r3, [pc, #304]	; (8009940 <UART_SetConfig+0x4b0>)
 800980e:	61fb      	str	r3, [r7, #28]
        break;
 8009810:	e00d      	b.n	800982e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009812:	f7fe f855 	bl	80078c0 <HAL_RCC_GetSysClockFreq>
 8009816:	61f8      	str	r0, [r7, #28]
        break;
 8009818:	e009      	b.n	800982e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800981a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800981e:	61fb      	str	r3, [r7, #28]
        break;
 8009820:	e005      	b.n	800982e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800982c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d077      	beq.n	8009924 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	005a      	lsls	r2, r3, #1
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	085b      	lsrs	r3, r3, #1
 800983e:	441a      	add	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	fbb2 f3f3 	udiv	r3, r2, r3
 8009848:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	2b0f      	cmp	r3, #15
 800984e:	d916      	bls.n	800987e <UART_SetConfig+0x3ee>
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009856:	d212      	bcs.n	800987e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	b29b      	uxth	r3, r3
 800985c:	f023 030f 	bic.w	r3, r3, #15
 8009860:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	085b      	lsrs	r3, r3, #1
 8009866:	b29b      	uxth	r3, r3
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	b29a      	uxth	r2, r3
 800986e:	8afb      	ldrh	r3, [r7, #22]
 8009870:	4313      	orrs	r3, r2
 8009872:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	8afa      	ldrh	r2, [r7, #22]
 800987a:	60da      	str	r2, [r3, #12]
 800987c:	e052      	b.n	8009924 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009884:	e04e      	b.n	8009924 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800988a:	2b08      	cmp	r3, #8
 800988c:	d827      	bhi.n	80098de <UART_SetConfig+0x44e>
 800988e:	a201      	add	r2, pc, #4	; (adr r2, 8009894 <UART_SetConfig+0x404>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	080098b9 	.word	0x080098b9
 8009898:	080098c1 	.word	0x080098c1
 800989c:	080098c9 	.word	0x080098c9
 80098a0:	080098df 	.word	0x080098df
 80098a4:	080098cf 	.word	0x080098cf
 80098a8:	080098df 	.word	0x080098df
 80098ac:	080098df 	.word	0x080098df
 80098b0:	080098df 	.word	0x080098df
 80098b4:	080098d7 	.word	0x080098d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098b8:	f7fe f898 	bl	80079ec <HAL_RCC_GetPCLK1Freq>
 80098bc:	61f8      	str	r0, [r7, #28]
        break;
 80098be:	e014      	b.n	80098ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c0:	f7fe f8aa 	bl	8007a18 <HAL_RCC_GetPCLK2Freq>
 80098c4:	61f8      	str	r0, [r7, #28]
        break;
 80098c6:	e010      	b.n	80098ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098c8:	4b1d      	ldr	r3, [pc, #116]	; (8009940 <UART_SetConfig+0x4b0>)
 80098ca:	61fb      	str	r3, [r7, #28]
        break;
 80098cc:	e00d      	b.n	80098ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098ce:	f7fd fff7 	bl	80078c0 <HAL_RCC_GetSysClockFreq>
 80098d2:	61f8      	str	r0, [r7, #28]
        break;
 80098d4:	e009      	b.n	80098ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098da:	61fb      	str	r3, [r7, #28]
        break;
 80098dc:	e005      	b.n	80098ea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80098e8:	bf00      	nop
    }

    if (pclk != 0U)
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d019      	beq.n	8009924 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	085a      	lsrs	r2, r3, #1
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	441a      	add	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009902:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	2b0f      	cmp	r3, #15
 8009908:	d909      	bls.n	800991e <UART_SetConfig+0x48e>
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009910:	d205      	bcs.n	800991e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	b29a      	uxth	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	60da      	str	r2, [r3, #12]
 800991c:	e002      	b.n	8009924 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009930:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009934:	4618      	mov	r0, r3
 8009936:	3728      	adds	r7, #40	; 0x28
 8009938:	46bd      	mov	sp, r7
 800993a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800993e:	bf00      	nop
 8009940:	00f42400 	.word	0x00f42400

08009944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00a      	beq.n	800996e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	430a      	orrs	r2, r1
 800996c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	f003 0302 	and.w	r3, r3, #2
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00a      	beq.n	8009990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	430a      	orrs	r2, r1
 800998e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00a      	beq.n	80099b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	430a      	orrs	r2, r1
 80099b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	f003 0308 	and.w	r3, r3, #8
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00a      	beq.n	80099d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	430a      	orrs	r2, r1
 80099d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	f003 0310 	and.w	r3, r3, #16
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00a      	beq.n	80099f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	f003 0320 	and.w	r3, r3, #32
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01a      	beq.n	8009a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a42:	d10a      	bne.n	8009a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	430a      	orrs	r2, r1
 8009a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00a      	beq.n	8009a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	605a      	str	r2, [r3, #4]
  }
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af02      	add	r7, sp, #8
 8009a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a98:	f7f9 fda2 	bl	80035e0 <HAL_GetTick>
 8009a9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d10e      	bne.n	8009aca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f82d 	bl	8009b1a <UART_WaitOnFlagUntilTimeout>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e023      	b.n	8009b12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d10e      	bne.n	8009af6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f817 	bl	8009b1a <UART_WaitOnFlagUntilTimeout>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e00d      	b.n	8009b12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2220      	movs	r2, #32
 8009afa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b09c      	sub	sp, #112	; 0x70
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	60f8      	str	r0, [r7, #12]
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	603b      	str	r3, [r7, #0]
 8009b26:	4613      	mov	r3, r2
 8009b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b2a:	e0a5      	b.n	8009c78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b32:	f000 80a1 	beq.w	8009c78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b36:	f7f9 fd53 	bl	80035e0 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d302      	bcc.n	8009b4c <UART_WaitOnFlagUntilTimeout+0x32>
 8009b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d13e      	bne.n	8009bca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b60:	667b      	str	r3, [r7, #100]	; 0x64
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b6c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e6      	bne.n	8009b4c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3308      	adds	r3, #8
 8009b84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b90:	f023 0301 	bic.w	r3, r3, #1
 8009b94:	663b      	str	r3, [r7, #96]	; 0x60
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009ba0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e5      	bne.n	8009b7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e067      	b.n	8009c9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0304 	and.w	r3, r3, #4
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d04f      	beq.n	8009c78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009be6:	d147      	bne.n	8009c78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bf0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	e853 3f00 	ldrex	r3, [r3]
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c10:	637b      	str	r3, [r7, #52]	; 0x34
 8009c12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c18:	e841 2300 	strex	r3, r2, [r1]
 8009c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e6      	bne.n	8009bf2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3308      	adds	r3, #8
 8009c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	e853 3f00 	ldrex	r3, [r3]
 8009c32:	613b      	str	r3, [r7, #16]
   return(result);
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f023 0301 	bic.w	r3, r3, #1
 8009c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3308      	adds	r3, #8
 8009c42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c44:	623a      	str	r2, [r7, #32]
 8009c46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c48:	69f9      	ldr	r1, [r7, #28]
 8009c4a:	6a3a      	ldr	r2, [r7, #32]
 8009c4c:	e841 2300 	strex	r3, r2, [r1]
 8009c50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1e5      	bne.n	8009c24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2220      	movs	r2, #32
 8009c62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e010      	b.n	8009c9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	69da      	ldr	r2, [r3, #28]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	4013      	ands	r3, r2
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	bf0c      	ite	eq
 8009c88:	2301      	moveq	r3, #1
 8009c8a:	2300      	movne	r3, #0
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	f43f af4a 	beq.w	8009b2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3770      	adds	r7, #112	; 0x70
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b096      	sub	sp, #88	; 0x58
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	88fa      	ldrh	r2, [r7, #6]
 8009cbc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2222      	movs	r2, #34	; 0x22
 8009ccc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d02b      	beq.n	8009d2e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cda:	4a42      	ldr	r2, [pc, #264]	; (8009de4 <UART_Start_Receive_DMA+0x140>)
 8009cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce2:	4a41      	ldr	r2, [pc, #260]	; (8009de8 <UART_Start_Receive_DMA+0x144>)
 8009ce4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cea:	4a40      	ldr	r2, [pc, #256]	; (8009dec <UART_Start_Receive_DMA+0x148>)
 8009cec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3324      	adds	r3, #36	; 0x24
 8009d00:	4619      	mov	r1, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d06:	461a      	mov	r2, r3
 8009d08:	88fb      	ldrh	r3, [r7, #6]
 8009d0a:	f7fb ff1b 	bl	8005b44 <HAL_DMA_Start_IT>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00c      	beq.n	8009d2e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2210      	movs	r2, #16
 8009d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2220      	movs	r2, #32
 8009d28:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e055      	b.n	8009dda <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d018      	beq.n	8009d70 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d52:	657b      	str	r3, [r7, #84]	; 0x54
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d5e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d64:	e841 2300 	strex	r3, r2, [r1]
 8009d68:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e6      	bne.n	8009d3e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3308      	adds	r3, #8
 8009d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	e853 3f00 	ldrex	r3, [r3]
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	f043 0301 	orr.w	r3, r3, #1
 8009d86:	653b      	str	r3, [r7, #80]	; 0x50
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d90:	637a      	str	r2, [r7, #52]	; 0x34
 8009d92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e5      	bne.n	8009d70 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3308      	adds	r3, #8
 8009daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	e853 3f00 	ldrex	r3, [r3]
 8009db2:	613b      	str	r3, [r7, #16]
   return(result);
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3308      	adds	r3, #8
 8009dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dc4:	623a      	str	r2, [r7, #32]
 8009dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc8:	69f9      	ldr	r1, [r7, #28]
 8009dca:	6a3a      	ldr	r2, [r7, #32]
 8009dcc:	e841 2300 	strex	r3, r2, [r1]
 8009dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1e5      	bne.n	8009da4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3758      	adds	r7, #88	; 0x58
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	08009f03 	.word	0x08009f03
 8009de8:	0800a027 	.word	0x0800a027
 8009dec:	0800a05f 	.word	0x0800a05f

08009df0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b089      	sub	sp, #36	; 0x24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e0c:	61fb      	str	r3, [r7, #28]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	61bb      	str	r3, [r7, #24]
 8009e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6979      	ldr	r1, [r7, #20]
 8009e1c:	69ba      	ldr	r2, [r7, #24]
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	613b      	str	r3, [r7, #16]
   return(result);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e6      	bne.n	8009df8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009e30:	bf00      	nop
 8009e32:	3724      	adds	r7, #36	; 0x24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b095      	sub	sp, #84	; 0x54
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4c:	e853 3f00 	ldrex	r3, [r3]
 8009e50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e62:	643b      	str	r3, [r7, #64]	; 0x40
 8009e64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e6a:	e841 2300 	strex	r3, r2, [r1]
 8009e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1e6      	bne.n	8009e44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	e853 3f00 	ldrex	r3, [r3]
 8009e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	f023 0301 	bic.w	r3, r3, #1
 8009e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3308      	adds	r3, #8
 8009e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e9e:	e841 2300 	strex	r3, r2, [r1]
 8009ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1e5      	bne.n	8009e76 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d118      	bne.n	8009ee4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	e853 3f00 	ldrex	r3, [r3]
 8009ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f023 0310 	bic.w	r3, r3, #16
 8009ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed0:	61bb      	str	r3, [r7, #24]
 8009ed2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	6979      	ldr	r1, [r7, #20]
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	e841 2300 	strex	r3, r2, [r1]
 8009edc:	613b      	str	r3, [r7, #16]
   return(result);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1e6      	bne.n	8009eb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009ef6:	bf00      	nop
 8009ef8:	3754      	adds	r7, #84	; 0x54
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b09c      	sub	sp, #112	; 0x70
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0320 	and.w	r3, r3, #32
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d170      	bne.n	800a000 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8009f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f20:	2200      	movs	r2, #0
 8009f22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f2e:	e853 3f00 	ldrex	r3, [r3]
 8009f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f4c:	e841 2300 	strex	r3, r2, [r1]
 8009f50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1e6      	bne.n	8009f26 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6a:	f023 0301 	bic.w	r3, r3, #1
 8009f6e:	667b      	str	r3, [r7, #100]	; 0x64
 8009f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3308      	adds	r3, #8
 8009f76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f78:	647a      	str	r2, [r7, #68]	; 0x44
 8009f7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e5      	bne.n	8009f58 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3308      	adds	r3, #8
 8009f92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	e853 3f00 	ldrex	r3, [r3]
 8009f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8009fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fac:	633a      	str	r2, [r7, #48]	; 0x30
 8009fae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb4:	e841 2300 	strex	r3, r2, [r1]
 8009fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d1e5      	bne.n	8009f8c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d118      	bne.n	800a000 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0310 	bic.w	r3, r3, #16
 8009fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fec:	61fb      	str	r3, [r7, #28]
 8009fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	69b9      	ldr	r1, [r7, #24]
 8009ff2:	69fa      	ldr	r2, [r7, #28]
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e6      	bne.n	8009fce <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a004:	2b01      	cmp	r3, #1
 800a006:	d107      	bne.n	800a018 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a00a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a00e:	4619      	mov	r1, r3
 800a010:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a012:	f7ff fa31 	bl	8009478 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a016:	e002      	b.n	800a01e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a018:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a01a:	f7f7 fab5 	bl	8001588 <HAL_UART_RxCpltCallback>
}
 800a01e:	bf00      	nop
 800a020:	3770      	adds	r7, #112	; 0x70
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a032:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d109      	bne.n	800a050 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a042:	085b      	lsrs	r3, r3, #1
 800a044:	b29b      	uxth	r3, r3
 800a046:	4619      	mov	r1, r3
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff fa15 	bl	8009478 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a04e:	e002      	b.n	800a056 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7ff f9fd 	bl	8009450 <HAL_UART_RxHalfCpltCallback>
}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b086      	sub	sp, #24
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a070:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a076:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a082:	2b80      	cmp	r3, #128	; 0x80
 800a084:	d109      	bne.n	800a09a <UART_DMAError+0x3c>
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	2b21      	cmp	r3, #33	; 0x21
 800a08a:	d106      	bne.n	800a09a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a094:	6978      	ldr	r0, [r7, #20]
 800a096:	f7ff feab 	bl	8009df0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a4:	2b40      	cmp	r3, #64	; 0x40
 800a0a6:	d109      	bne.n	800a0bc <UART_DMAError+0x5e>
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2b22      	cmp	r3, #34	; 0x22
 800a0ac:	d106      	bne.n	800a0bc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a0b6:	6978      	ldr	r0, [r7, #20]
 800a0b8:	f7ff fec0 	bl	8009e3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0c2:	f043 0210 	orr.w	r2, r3, #16
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0cc:	6978      	ldr	r0, [r7, #20]
 800a0ce:	f7ff f9c9 	bl	8009464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0d2:	bf00      	nop
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff f9b3 	bl	8009464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0fe:	bf00      	nop
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b088      	sub	sp, #32
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	e853 3f00 	ldrex	r3, [r3]
 800a11a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a122:	61fb      	str	r3, [r7, #28]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	61bb      	str	r3, [r7, #24]
 800a12e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a130:	6979      	ldr	r1, [r7, #20]
 800a132:	69ba      	ldr	r2, [r7, #24]
 800a134:	e841 2300 	strex	r3, r2, [r1]
 800a138:	613b      	str	r3, [r7, #16]
   return(result);
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e6      	bne.n	800a10e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2220      	movs	r2, #32
 800a144:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff f975 	bl	800943c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a152:	bf00      	nop
 800a154:	3720      	adds	r7, #32
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <__errno>:
 800a170:	4b01      	ldr	r3, [pc, #4]	; (800a178 <__errno+0x8>)
 800a172:	6818      	ldr	r0, [r3, #0]
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	2000018c 	.word	0x2000018c

0800a17c <__libc_init_array>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	4d0d      	ldr	r5, [pc, #52]	; (800a1b4 <__libc_init_array+0x38>)
 800a180:	4c0d      	ldr	r4, [pc, #52]	; (800a1b8 <__libc_init_array+0x3c>)
 800a182:	1b64      	subs	r4, r4, r5
 800a184:	10a4      	asrs	r4, r4, #2
 800a186:	2600      	movs	r6, #0
 800a188:	42a6      	cmp	r6, r4
 800a18a:	d109      	bne.n	800a1a0 <__libc_init_array+0x24>
 800a18c:	4d0b      	ldr	r5, [pc, #44]	; (800a1bc <__libc_init_array+0x40>)
 800a18e:	4c0c      	ldr	r4, [pc, #48]	; (800a1c0 <__libc_init_array+0x44>)
 800a190:	f002 ff3c 	bl	800d00c <_init>
 800a194:	1b64      	subs	r4, r4, r5
 800a196:	10a4      	asrs	r4, r4, #2
 800a198:	2600      	movs	r6, #0
 800a19a:	42a6      	cmp	r6, r4
 800a19c:	d105      	bne.n	800a1aa <__libc_init_array+0x2e>
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a4:	4798      	blx	r3
 800a1a6:	3601      	adds	r6, #1
 800a1a8:	e7ee      	b.n	800a188 <__libc_init_array+0xc>
 800a1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ae:	4798      	blx	r3
 800a1b0:	3601      	adds	r6, #1
 800a1b2:	e7f2      	b.n	800a19a <__libc_init_array+0x1e>
 800a1b4:	0801034c 	.word	0x0801034c
 800a1b8:	0801034c 	.word	0x0801034c
 800a1bc:	0801034c 	.word	0x0801034c
 800a1c0:	08010350 	.word	0x08010350

0800a1c4 <memcpy>:
 800a1c4:	440a      	add	r2, r1
 800a1c6:	4291      	cmp	r1, r2
 800a1c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1cc:	d100      	bne.n	800a1d0 <memcpy+0xc>
 800a1ce:	4770      	bx	lr
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1da:	4291      	cmp	r1, r2
 800a1dc:	d1f9      	bne.n	800a1d2 <memcpy+0xe>
 800a1de:	bd10      	pop	{r4, pc}

0800a1e0 <memset>:
 800a1e0:	4402      	add	r2, r0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d100      	bne.n	800a1ea <memset+0xa>
 800a1e8:	4770      	bx	lr
 800a1ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ee:	e7f9      	b.n	800a1e4 <memset+0x4>

0800a1f0 <__cvt>:
 800a1f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f4:	ec55 4b10 	vmov	r4, r5, d0
 800a1f8:	2d00      	cmp	r5, #0
 800a1fa:	460e      	mov	r6, r1
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	462b      	mov	r3, r5
 800a200:	bfbb      	ittet	lt
 800a202:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a206:	461d      	movlt	r5, r3
 800a208:	2300      	movge	r3, #0
 800a20a:	232d      	movlt	r3, #45	; 0x2d
 800a20c:	700b      	strb	r3, [r1, #0]
 800a20e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a210:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a214:	4691      	mov	r9, r2
 800a216:	f023 0820 	bic.w	r8, r3, #32
 800a21a:	bfbc      	itt	lt
 800a21c:	4622      	movlt	r2, r4
 800a21e:	4614      	movlt	r4, r2
 800a220:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a224:	d005      	beq.n	800a232 <__cvt+0x42>
 800a226:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a22a:	d100      	bne.n	800a22e <__cvt+0x3e>
 800a22c:	3601      	adds	r6, #1
 800a22e:	2102      	movs	r1, #2
 800a230:	e000      	b.n	800a234 <__cvt+0x44>
 800a232:	2103      	movs	r1, #3
 800a234:	ab03      	add	r3, sp, #12
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	ab02      	add	r3, sp, #8
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	ec45 4b10 	vmov	d0, r4, r5
 800a240:	4653      	mov	r3, sl
 800a242:	4632      	mov	r2, r6
 800a244:	f000 fd00 	bl	800ac48 <_dtoa_r>
 800a248:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a24c:	4607      	mov	r7, r0
 800a24e:	d102      	bne.n	800a256 <__cvt+0x66>
 800a250:	f019 0f01 	tst.w	r9, #1
 800a254:	d022      	beq.n	800a29c <__cvt+0xac>
 800a256:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a25a:	eb07 0906 	add.w	r9, r7, r6
 800a25e:	d110      	bne.n	800a282 <__cvt+0x92>
 800a260:	783b      	ldrb	r3, [r7, #0]
 800a262:	2b30      	cmp	r3, #48	; 0x30
 800a264:	d10a      	bne.n	800a27c <__cvt+0x8c>
 800a266:	2200      	movs	r2, #0
 800a268:	2300      	movs	r3, #0
 800a26a:	4620      	mov	r0, r4
 800a26c:	4629      	mov	r1, r5
 800a26e:	f7f6 fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a272:	b918      	cbnz	r0, 800a27c <__cvt+0x8c>
 800a274:	f1c6 0601 	rsb	r6, r6, #1
 800a278:	f8ca 6000 	str.w	r6, [sl]
 800a27c:	f8da 3000 	ldr.w	r3, [sl]
 800a280:	4499      	add	r9, r3
 800a282:	2200      	movs	r2, #0
 800a284:	2300      	movs	r3, #0
 800a286:	4620      	mov	r0, r4
 800a288:	4629      	mov	r1, r5
 800a28a:	f7f6 fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a28e:	b108      	cbz	r0, 800a294 <__cvt+0xa4>
 800a290:	f8cd 900c 	str.w	r9, [sp, #12]
 800a294:	2230      	movs	r2, #48	; 0x30
 800a296:	9b03      	ldr	r3, [sp, #12]
 800a298:	454b      	cmp	r3, r9
 800a29a:	d307      	bcc.n	800a2ac <__cvt+0xbc>
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2a0:	1bdb      	subs	r3, r3, r7
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	6013      	str	r3, [r2, #0]
 800a2a6:	b004      	add	sp, #16
 800a2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ac:	1c59      	adds	r1, r3, #1
 800a2ae:	9103      	str	r1, [sp, #12]
 800a2b0:	701a      	strb	r2, [r3, #0]
 800a2b2:	e7f0      	b.n	800a296 <__cvt+0xa6>

0800a2b4 <__exponent>:
 800a2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	bfb8      	it	lt
 800a2bc:	4249      	neglt	r1, r1
 800a2be:	f803 2b02 	strb.w	r2, [r3], #2
 800a2c2:	bfb4      	ite	lt
 800a2c4:	222d      	movlt	r2, #45	; 0x2d
 800a2c6:	222b      	movge	r2, #43	; 0x2b
 800a2c8:	2909      	cmp	r1, #9
 800a2ca:	7042      	strb	r2, [r0, #1]
 800a2cc:	dd2a      	ble.n	800a324 <__exponent+0x70>
 800a2ce:	f10d 0407 	add.w	r4, sp, #7
 800a2d2:	46a4      	mov	ip, r4
 800a2d4:	270a      	movs	r7, #10
 800a2d6:	46a6      	mov	lr, r4
 800a2d8:	460a      	mov	r2, r1
 800a2da:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2de:	fb07 1516 	mls	r5, r7, r6, r1
 800a2e2:	3530      	adds	r5, #48	; 0x30
 800a2e4:	2a63      	cmp	r2, #99	; 0x63
 800a2e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800a2ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	dcf1      	bgt.n	800a2d6 <__exponent+0x22>
 800a2f2:	3130      	adds	r1, #48	; 0x30
 800a2f4:	f1ae 0502 	sub.w	r5, lr, #2
 800a2f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a2fc:	1c44      	adds	r4, r0, #1
 800a2fe:	4629      	mov	r1, r5
 800a300:	4561      	cmp	r1, ip
 800a302:	d30a      	bcc.n	800a31a <__exponent+0x66>
 800a304:	f10d 0209 	add.w	r2, sp, #9
 800a308:	eba2 020e 	sub.w	r2, r2, lr
 800a30c:	4565      	cmp	r5, ip
 800a30e:	bf88      	it	hi
 800a310:	2200      	movhi	r2, #0
 800a312:	4413      	add	r3, r2
 800a314:	1a18      	subs	r0, r3, r0
 800a316:	b003      	add	sp, #12
 800a318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a31e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a322:	e7ed      	b.n	800a300 <__exponent+0x4c>
 800a324:	2330      	movs	r3, #48	; 0x30
 800a326:	3130      	adds	r1, #48	; 0x30
 800a328:	7083      	strb	r3, [r0, #2]
 800a32a:	70c1      	strb	r1, [r0, #3]
 800a32c:	1d03      	adds	r3, r0, #4
 800a32e:	e7f1      	b.n	800a314 <__exponent+0x60>

0800a330 <_printf_float>:
 800a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a334:	ed2d 8b02 	vpush	{d8}
 800a338:	b08d      	sub	sp, #52	; 0x34
 800a33a:	460c      	mov	r4, r1
 800a33c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a340:	4616      	mov	r6, r2
 800a342:	461f      	mov	r7, r3
 800a344:	4605      	mov	r5, r0
 800a346:	f001 fa6d 	bl	800b824 <_localeconv_r>
 800a34a:	f8d0 a000 	ldr.w	sl, [r0]
 800a34e:	4650      	mov	r0, sl
 800a350:	f7f5 ff3e 	bl	80001d0 <strlen>
 800a354:	2300      	movs	r3, #0
 800a356:	930a      	str	r3, [sp, #40]	; 0x28
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	9305      	str	r3, [sp, #20]
 800a35c:	f8d8 3000 	ldr.w	r3, [r8]
 800a360:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a364:	3307      	adds	r3, #7
 800a366:	f023 0307 	bic.w	r3, r3, #7
 800a36a:	f103 0208 	add.w	r2, r3, #8
 800a36e:	f8c8 2000 	str.w	r2, [r8]
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a37a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a37e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a382:	9307      	str	r3, [sp, #28]
 800a384:	f8cd 8018 	str.w	r8, [sp, #24]
 800a388:	ee08 0a10 	vmov	s16, r0
 800a38c:	4b9f      	ldr	r3, [pc, #636]	; (800a60c <_printf_float+0x2dc>)
 800a38e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a392:	f04f 32ff 	mov.w	r2, #4294967295
 800a396:	f7f6 fbc9 	bl	8000b2c <__aeabi_dcmpun>
 800a39a:	bb88      	cbnz	r0, 800a400 <_printf_float+0xd0>
 800a39c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3a0:	4b9a      	ldr	r3, [pc, #616]	; (800a60c <_printf_float+0x2dc>)
 800a3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a6:	f7f6 fba3 	bl	8000af0 <__aeabi_dcmple>
 800a3aa:	bb48      	cbnz	r0, 800a400 <_printf_float+0xd0>
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	f7f6 fb92 	bl	8000adc <__aeabi_dcmplt>
 800a3b8:	b110      	cbz	r0, 800a3c0 <_printf_float+0x90>
 800a3ba:	232d      	movs	r3, #45	; 0x2d
 800a3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c0:	4b93      	ldr	r3, [pc, #588]	; (800a610 <_printf_float+0x2e0>)
 800a3c2:	4894      	ldr	r0, [pc, #592]	; (800a614 <_printf_float+0x2e4>)
 800a3c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3c8:	bf94      	ite	ls
 800a3ca:	4698      	movls	r8, r3
 800a3cc:	4680      	movhi	r8, r0
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	6123      	str	r3, [r4, #16]
 800a3d2:	9b05      	ldr	r3, [sp, #20]
 800a3d4:	f023 0204 	bic.w	r2, r3, #4
 800a3d8:	6022      	str	r2, [r4, #0]
 800a3da:	f04f 0900 	mov.w	r9, #0
 800a3de:	9700      	str	r7, [sp, #0]
 800a3e0:	4633      	mov	r3, r6
 800a3e2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	f000 f9d8 	bl	800a79c <_printf_common>
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	f040 8090 	bne.w	800a512 <_printf_float+0x1e2>
 800a3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f6:	b00d      	add	sp, #52	; 0x34
 800a3f8:	ecbd 8b02 	vpop	{d8}
 800a3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a400:	4642      	mov	r2, r8
 800a402:	464b      	mov	r3, r9
 800a404:	4640      	mov	r0, r8
 800a406:	4649      	mov	r1, r9
 800a408:	f7f6 fb90 	bl	8000b2c <__aeabi_dcmpun>
 800a40c:	b140      	cbz	r0, 800a420 <_printf_float+0xf0>
 800a40e:	464b      	mov	r3, r9
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfbc      	itt	lt
 800a414:	232d      	movlt	r3, #45	; 0x2d
 800a416:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a41a:	487f      	ldr	r0, [pc, #508]	; (800a618 <_printf_float+0x2e8>)
 800a41c:	4b7f      	ldr	r3, [pc, #508]	; (800a61c <_printf_float+0x2ec>)
 800a41e:	e7d1      	b.n	800a3c4 <_printf_float+0x94>
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a426:	9206      	str	r2, [sp, #24]
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	d13f      	bne.n	800a4ac <_printf_float+0x17c>
 800a42c:	2306      	movs	r3, #6
 800a42e:	6063      	str	r3, [r4, #4]
 800a430:	9b05      	ldr	r3, [sp, #20]
 800a432:	6861      	ldr	r1, [r4, #4]
 800a434:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a438:	2300      	movs	r3, #0
 800a43a:	9303      	str	r3, [sp, #12]
 800a43c:	ab0a      	add	r3, sp, #40	; 0x28
 800a43e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a442:	ab09      	add	r3, sp, #36	; 0x24
 800a444:	ec49 8b10 	vmov	d0, r8, r9
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	6022      	str	r2, [r4, #0]
 800a44c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a450:	4628      	mov	r0, r5
 800a452:	f7ff fecd 	bl	800a1f0 <__cvt>
 800a456:	9b06      	ldr	r3, [sp, #24]
 800a458:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a45a:	2b47      	cmp	r3, #71	; 0x47
 800a45c:	4680      	mov	r8, r0
 800a45e:	d108      	bne.n	800a472 <_printf_float+0x142>
 800a460:	1cc8      	adds	r0, r1, #3
 800a462:	db02      	blt.n	800a46a <_printf_float+0x13a>
 800a464:	6863      	ldr	r3, [r4, #4]
 800a466:	4299      	cmp	r1, r3
 800a468:	dd41      	ble.n	800a4ee <_printf_float+0x1be>
 800a46a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a46e:	fa5f fb8b 	uxtb.w	fp, fp
 800a472:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a476:	d820      	bhi.n	800a4ba <_printf_float+0x18a>
 800a478:	3901      	subs	r1, #1
 800a47a:	465a      	mov	r2, fp
 800a47c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a480:	9109      	str	r1, [sp, #36]	; 0x24
 800a482:	f7ff ff17 	bl	800a2b4 <__exponent>
 800a486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a488:	1813      	adds	r3, r2, r0
 800a48a:	2a01      	cmp	r2, #1
 800a48c:	4681      	mov	r9, r0
 800a48e:	6123      	str	r3, [r4, #16]
 800a490:	dc02      	bgt.n	800a498 <_printf_float+0x168>
 800a492:	6822      	ldr	r2, [r4, #0]
 800a494:	07d2      	lsls	r2, r2, #31
 800a496:	d501      	bpl.n	800a49c <_printf_float+0x16c>
 800a498:	3301      	adds	r3, #1
 800a49a:	6123      	str	r3, [r4, #16]
 800a49c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d09c      	beq.n	800a3de <_printf_float+0xae>
 800a4a4:	232d      	movs	r3, #45	; 0x2d
 800a4a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4aa:	e798      	b.n	800a3de <_printf_float+0xae>
 800a4ac:	9a06      	ldr	r2, [sp, #24]
 800a4ae:	2a47      	cmp	r2, #71	; 0x47
 800a4b0:	d1be      	bne.n	800a430 <_printf_float+0x100>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1bc      	bne.n	800a430 <_printf_float+0x100>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e7b9      	b.n	800a42e <_printf_float+0xfe>
 800a4ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4be:	d118      	bne.n	800a4f2 <_printf_float+0x1c2>
 800a4c0:	2900      	cmp	r1, #0
 800a4c2:	6863      	ldr	r3, [r4, #4]
 800a4c4:	dd0b      	ble.n	800a4de <_printf_float+0x1ae>
 800a4c6:	6121      	str	r1, [r4, #16]
 800a4c8:	b913      	cbnz	r3, 800a4d0 <_printf_float+0x1a0>
 800a4ca:	6822      	ldr	r2, [r4, #0]
 800a4cc:	07d0      	lsls	r0, r2, #31
 800a4ce:	d502      	bpl.n	800a4d6 <_printf_float+0x1a6>
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	440b      	add	r3, r1
 800a4d4:	6123      	str	r3, [r4, #16]
 800a4d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4d8:	f04f 0900 	mov.w	r9, #0
 800a4dc:	e7de      	b.n	800a49c <_printf_float+0x16c>
 800a4de:	b913      	cbnz	r3, 800a4e6 <_printf_float+0x1b6>
 800a4e0:	6822      	ldr	r2, [r4, #0]
 800a4e2:	07d2      	lsls	r2, r2, #31
 800a4e4:	d501      	bpl.n	800a4ea <_printf_float+0x1ba>
 800a4e6:	3302      	adds	r3, #2
 800a4e8:	e7f4      	b.n	800a4d4 <_printf_float+0x1a4>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e7f2      	b.n	800a4d4 <_printf_float+0x1a4>
 800a4ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f4:	4299      	cmp	r1, r3
 800a4f6:	db05      	blt.n	800a504 <_printf_float+0x1d4>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	6121      	str	r1, [r4, #16]
 800a4fc:	07d8      	lsls	r0, r3, #31
 800a4fe:	d5ea      	bpl.n	800a4d6 <_printf_float+0x1a6>
 800a500:	1c4b      	adds	r3, r1, #1
 800a502:	e7e7      	b.n	800a4d4 <_printf_float+0x1a4>
 800a504:	2900      	cmp	r1, #0
 800a506:	bfd4      	ite	le
 800a508:	f1c1 0202 	rsble	r2, r1, #2
 800a50c:	2201      	movgt	r2, #1
 800a50e:	4413      	add	r3, r2
 800a510:	e7e0      	b.n	800a4d4 <_printf_float+0x1a4>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	055a      	lsls	r2, r3, #21
 800a516:	d407      	bmi.n	800a528 <_printf_float+0x1f8>
 800a518:	6923      	ldr	r3, [r4, #16]
 800a51a:	4642      	mov	r2, r8
 800a51c:	4631      	mov	r1, r6
 800a51e:	4628      	mov	r0, r5
 800a520:	47b8      	blx	r7
 800a522:	3001      	adds	r0, #1
 800a524:	d12c      	bne.n	800a580 <_printf_float+0x250>
 800a526:	e764      	b.n	800a3f2 <_printf_float+0xc2>
 800a528:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a52c:	f240 80e0 	bls.w	800a6f0 <_printf_float+0x3c0>
 800a530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a534:	2200      	movs	r2, #0
 800a536:	2300      	movs	r3, #0
 800a538:	f7f6 fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d034      	beq.n	800a5aa <_printf_float+0x27a>
 800a540:	4a37      	ldr	r2, [pc, #220]	; (800a620 <_printf_float+0x2f0>)
 800a542:	2301      	movs	r3, #1
 800a544:	4631      	mov	r1, r6
 800a546:	4628      	mov	r0, r5
 800a548:	47b8      	blx	r7
 800a54a:	3001      	adds	r0, #1
 800a54c:	f43f af51 	beq.w	800a3f2 <_printf_float+0xc2>
 800a550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a554:	429a      	cmp	r2, r3
 800a556:	db02      	blt.n	800a55e <_printf_float+0x22e>
 800a558:	6823      	ldr	r3, [r4, #0]
 800a55a:	07d8      	lsls	r0, r3, #31
 800a55c:	d510      	bpl.n	800a580 <_printf_float+0x250>
 800a55e:	ee18 3a10 	vmov	r3, s16
 800a562:	4652      	mov	r2, sl
 800a564:	4631      	mov	r1, r6
 800a566:	4628      	mov	r0, r5
 800a568:	47b8      	blx	r7
 800a56a:	3001      	adds	r0, #1
 800a56c:	f43f af41 	beq.w	800a3f2 <_printf_float+0xc2>
 800a570:	f04f 0800 	mov.w	r8, #0
 800a574:	f104 091a 	add.w	r9, r4, #26
 800a578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57a:	3b01      	subs	r3, #1
 800a57c:	4543      	cmp	r3, r8
 800a57e:	dc09      	bgt.n	800a594 <_printf_float+0x264>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	079b      	lsls	r3, r3, #30
 800a584:	f100 8105 	bmi.w	800a792 <_printf_float+0x462>
 800a588:	68e0      	ldr	r0, [r4, #12]
 800a58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a58c:	4298      	cmp	r0, r3
 800a58e:	bfb8      	it	lt
 800a590:	4618      	movlt	r0, r3
 800a592:	e730      	b.n	800a3f6 <_printf_float+0xc6>
 800a594:	2301      	movs	r3, #1
 800a596:	464a      	mov	r2, r9
 800a598:	4631      	mov	r1, r6
 800a59a:	4628      	mov	r0, r5
 800a59c:	47b8      	blx	r7
 800a59e:	3001      	adds	r0, #1
 800a5a0:	f43f af27 	beq.w	800a3f2 <_printf_float+0xc2>
 800a5a4:	f108 0801 	add.w	r8, r8, #1
 800a5a8:	e7e6      	b.n	800a578 <_printf_float+0x248>
 800a5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	dc39      	bgt.n	800a624 <_printf_float+0x2f4>
 800a5b0:	4a1b      	ldr	r2, [pc, #108]	; (800a620 <_printf_float+0x2f0>)
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4631      	mov	r1, r6
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	47b8      	blx	r7
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	f43f af19 	beq.w	800a3f2 <_printf_float+0xc2>
 800a5c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	d102      	bne.n	800a5ce <_printf_float+0x29e>
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	07d9      	lsls	r1, r3, #31
 800a5cc:	d5d8      	bpl.n	800a580 <_printf_float+0x250>
 800a5ce:	ee18 3a10 	vmov	r3, s16
 800a5d2:	4652      	mov	r2, sl
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	47b8      	blx	r7
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f43f af09 	beq.w	800a3f2 <_printf_float+0xc2>
 800a5e0:	f04f 0900 	mov.w	r9, #0
 800a5e4:	f104 0a1a 	add.w	sl, r4, #26
 800a5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ea:	425b      	negs	r3, r3
 800a5ec:	454b      	cmp	r3, r9
 800a5ee:	dc01      	bgt.n	800a5f4 <_printf_float+0x2c4>
 800a5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f2:	e792      	b.n	800a51a <_printf_float+0x1ea>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	4652      	mov	r2, sl
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	47b8      	blx	r7
 800a5fe:	3001      	adds	r0, #1
 800a600:	f43f aef7 	beq.w	800a3f2 <_printf_float+0xc2>
 800a604:	f109 0901 	add.w	r9, r9, #1
 800a608:	e7ee      	b.n	800a5e8 <_printf_float+0x2b8>
 800a60a:	bf00      	nop
 800a60c:	7fefffff 	.word	0x7fefffff
 800a610:	0800ff70 	.word	0x0800ff70
 800a614:	0800ff74 	.word	0x0800ff74
 800a618:	0800ff7c 	.word	0x0800ff7c
 800a61c:	0800ff78 	.word	0x0800ff78
 800a620:	0800ff80 	.word	0x0800ff80
 800a624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a628:	429a      	cmp	r2, r3
 800a62a:	bfa8      	it	ge
 800a62c:	461a      	movge	r2, r3
 800a62e:	2a00      	cmp	r2, #0
 800a630:	4691      	mov	r9, r2
 800a632:	dc37      	bgt.n	800a6a4 <_printf_float+0x374>
 800a634:	f04f 0b00 	mov.w	fp, #0
 800a638:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a63c:	f104 021a 	add.w	r2, r4, #26
 800a640:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a642:	9305      	str	r3, [sp, #20]
 800a644:	eba3 0309 	sub.w	r3, r3, r9
 800a648:	455b      	cmp	r3, fp
 800a64a:	dc33      	bgt.n	800a6b4 <_printf_float+0x384>
 800a64c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a650:	429a      	cmp	r2, r3
 800a652:	db3b      	blt.n	800a6cc <_printf_float+0x39c>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	07da      	lsls	r2, r3, #31
 800a658:	d438      	bmi.n	800a6cc <_printf_float+0x39c>
 800a65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65c:	9a05      	ldr	r2, [sp, #20]
 800a65e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a660:	1a9a      	subs	r2, r3, r2
 800a662:	eba3 0901 	sub.w	r9, r3, r1
 800a666:	4591      	cmp	r9, r2
 800a668:	bfa8      	it	ge
 800a66a:	4691      	movge	r9, r2
 800a66c:	f1b9 0f00 	cmp.w	r9, #0
 800a670:	dc35      	bgt.n	800a6de <_printf_float+0x3ae>
 800a672:	f04f 0800 	mov.w	r8, #0
 800a676:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a67a:	f104 0a1a 	add.w	sl, r4, #26
 800a67e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a682:	1a9b      	subs	r3, r3, r2
 800a684:	eba3 0309 	sub.w	r3, r3, r9
 800a688:	4543      	cmp	r3, r8
 800a68a:	f77f af79 	ble.w	800a580 <_printf_float+0x250>
 800a68e:	2301      	movs	r3, #1
 800a690:	4652      	mov	r2, sl
 800a692:	4631      	mov	r1, r6
 800a694:	4628      	mov	r0, r5
 800a696:	47b8      	blx	r7
 800a698:	3001      	adds	r0, #1
 800a69a:	f43f aeaa 	beq.w	800a3f2 <_printf_float+0xc2>
 800a69e:	f108 0801 	add.w	r8, r8, #1
 800a6a2:	e7ec      	b.n	800a67e <_printf_float+0x34e>
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	4642      	mov	r2, r8
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	47b8      	blx	r7
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d1c0      	bne.n	800a634 <_printf_float+0x304>
 800a6b2:	e69e      	b.n	800a3f2 <_printf_float+0xc2>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	4631      	mov	r1, r6
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	9205      	str	r2, [sp, #20]
 800a6bc:	47b8      	blx	r7
 800a6be:	3001      	adds	r0, #1
 800a6c0:	f43f ae97 	beq.w	800a3f2 <_printf_float+0xc2>
 800a6c4:	9a05      	ldr	r2, [sp, #20]
 800a6c6:	f10b 0b01 	add.w	fp, fp, #1
 800a6ca:	e7b9      	b.n	800a640 <_printf_float+0x310>
 800a6cc:	ee18 3a10 	vmov	r3, s16
 800a6d0:	4652      	mov	r2, sl
 800a6d2:	4631      	mov	r1, r6
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	47b8      	blx	r7
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d1be      	bne.n	800a65a <_printf_float+0x32a>
 800a6dc:	e689      	b.n	800a3f2 <_printf_float+0xc2>
 800a6de:	9a05      	ldr	r2, [sp, #20]
 800a6e0:	464b      	mov	r3, r9
 800a6e2:	4442      	add	r2, r8
 800a6e4:	4631      	mov	r1, r6
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	47b8      	blx	r7
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	d1c1      	bne.n	800a672 <_printf_float+0x342>
 800a6ee:	e680      	b.n	800a3f2 <_printf_float+0xc2>
 800a6f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6f2:	2a01      	cmp	r2, #1
 800a6f4:	dc01      	bgt.n	800a6fa <_printf_float+0x3ca>
 800a6f6:	07db      	lsls	r3, r3, #31
 800a6f8:	d538      	bpl.n	800a76c <_printf_float+0x43c>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	4631      	mov	r1, r6
 800a700:	4628      	mov	r0, r5
 800a702:	47b8      	blx	r7
 800a704:	3001      	adds	r0, #1
 800a706:	f43f ae74 	beq.w	800a3f2 <_printf_float+0xc2>
 800a70a:	ee18 3a10 	vmov	r3, s16
 800a70e:	4652      	mov	r2, sl
 800a710:	4631      	mov	r1, r6
 800a712:	4628      	mov	r0, r5
 800a714:	47b8      	blx	r7
 800a716:	3001      	adds	r0, #1
 800a718:	f43f ae6b 	beq.w	800a3f2 <_printf_float+0xc2>
 800a71c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a720:	2200      	movs	r2, #0
 800a722:	2300      	movs	r3, #0
 800a724:	f7f6 f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a728:	b9d8      	cbnz	r0, 800a762 <_printf_float+0x432>
 800a72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a72c:	f108 0201 	add.w	r2, r8, #1
 800a730:	3b01      	subs	r3, #1
 800a732:	4631      	mov	r1, r6
 800a734:	4628      	mov	r0, r5
 800a736:	47b8      	blx	r7
 800a738:	3001      	adds	r0, #1
 800a73a:	d10e      	bne.n	800a75a <_printf_float+0x42a>
 800a73c:	e659      	b.n	800a3f2 <_printf_float+0xc2>
 800a73e:	2301      	movs	r3, #1
 800a740:	4652      	mov	r2, sl
 800a742:	4631      	mov	r1, r6
 800a744:	4628      	mov	r0, r5
 800a746:	47b8      	blx	r7
 800a748:	3001      	adds	r0, #1
 800a74a:	f43f ae52 	beq.w	800a3f2 <_printf_float+0xc2>
 800a74e:	f108 0801 	add.w	r8, r8, #1
 800a752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a754:	3b01      	subs	r3, #1
 800a756:	4543      	cmp	r3, r8
 800a758:	dcf1      	bgt.n	800a73e <_printf_float+0x40e>
 800a75a:	464b      	mov	r3, r9
 800a75c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a760:	e6dc      	b.n	800a51c <_printf_float+0x1ec>
 800a762:	f04f 0800 	mov.w	r8, #0
 800a766:	f104 0a1a 	add.w	sl, r4, #26
 800a76a:	e7f2      	b.n	800a752 <_printf_float+0x422>
 800a76c:	2301      	movs	r3, #1
 800a76e:	4642      	mov	r2, r8
 800a770:	e7df      	b.n	800a732 <_printf_float+0x402>
 800a772:	2301      	movs	r3, #1
 800a774:	464a      	mov	r2, r9
 800a776:	4631      	mov	r1, r6
 800a778:	4628      	mov	r0, r5
 800a77a:	47b8      	blx	r7
 800a77c:	3001      	adds	r0, #1
 800a77e:	f43f ae38 	beq.w	800a3f2 <_printf_float+0xc2>
 800a782:	f108 0801 	add.w	r8, r8, #1
 800a786:	68e3      	ldr	r3, [r4, #12]
 800a788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a78a:	1a5b      	subs	r3, r3, r1
 800a78c:	4543      	cmp	r3, r8
 800a78e:	dcf0      	bgt.n	800a772 <_printf_float+0x442>
 800a790:	e6fa      	b.n	800a588 <_printf_float+0x258>
 800a792:	f04f 0800 	mov.w	r8, #0
 800a796:	f104 0919 	add.w	r9, r4, #25
 800a79a:	e7f4      	b.n	800a786 <_printf_float+0x456>

0800a79c <_printf_common>:
 800a79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a0:	4616      	mov	r6, r2
 800a7a2:	4699      	mov	r9, r3
 800a7a4:	688a      	ldr	r2, [r1, #8]
 800a7a6:	690b      	ldr	r3, [r1, #16]
 800a7a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	bfb8      	it	lt
 800a7b0:	4613      	movlt	r3, r2
 800a7b2:	6033      	str	r3, [r6, #0]
 800a7b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	b10a      	cbz	r2, 800a7c2 <_printf_common+0x26>
 800a7be:	3301      	adds	r3, #1
 800a7c0:	6033      	str	r3, [r6, #0]
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	0699      	lsls	r1, r3, #26
 800a7c6:	bf42      	ittt	mi
 800a7c8:	6833      	ldrmi	r3, [r6, #0]
 800a7ca:	3302      	addmi	r3, #2
 800a7cc:	6033      	strmi	r3, [r6, #0]
 800a7ce:	6825      	ldr	r5, [r4, #0]
 800a7d0:	f015 0506 	ands.w	r5, r5, #6
 800a7d4:	d106      	bne.n	800a7e4 <_printf_common+0x48>
 800a7d6:	f104 0a19 	add.w	sl, r4, #25
 800a7da:	68e3      	ldr	r3, [r4, #12]
 800a7dc:	6832      	ldr	r2, [r6, #0]
 800a7de:	1a9b      	subs	r3, r3, r2
 800a7e0:	42ab      	cmp	r3, r5
 800a7e2:	dc26      	bgt.n	800a832 <_printf_common+0x96>
 800a7e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7e8:	1e13      	subs	r3, r2, #0
 800a7ea:	6822      	ldr	r2, [r4, #0]
 800a7ec:	bf18      	it	ne
 800a7ee:	2301      	movne	r3, #1
 800a7f0:	0692      	lsls	r2, r2, #26
 800a7f2:	d42b      	bmi.n	800a84c <_printf_common+0xb0>
 800a7f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7f8:	4649      	mov	r1, r9
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	47c0      	blx	r8
 800a7fe:	3001      	adds	r0, #1
 800a800:	d01e      	beq.n	800a840 <_printf_common+0xa4>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	68e5      	ldr	r5, [r4, #12]
 800a806:	6832      	ldr	r2, [r6, #0]
 800a808:	f003 0306 	and.w	r3, r3, #6
 800a80c:	2b04      	cmp	r3, #4
 800a80e:	bf08      	it	eq
 800a810:	1aad      	subeq	r5, r5, r2
 800a812:	68a3      	ldr	r3, [r4, #8]
 800a814:	6922      	ldr	r2, [r4, #16]
 800a816:	bf0c      	ite	eq
 800a818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a81c:	2500      	movne	r5, #0
 800a81e:	4293      	cmp	r3, r2
 800a820:	bfc4      	itt	gt
 800a822:	1a9b      	subgt	r3, r3, r2
 800a824:	18ed      	addgt	r5, r5, r3
 800a826:	2600      	movs	r6, #0
 800a828:	341a      	adds	r4, #26
 800a82a:	42b5      	cmp	r5, r6
 800a82c:	d11a      	bne.n	800a864 <_printf_common+0xc8>
 800a82e:	2000      	movs	r0, #0
 800a830:	e008      	b.n	800a844 <_printf_common+0xa8>
 800a832:	2301      	movs	r3, #1
 800a834:	4652      	mov	r2, sl
 800a836:	4649      	mov	r1, r9
 800a838:	4638      	mov	r0, r7
 800a83a:	47c0      	blx	r8
 800a83c:	3001      	adds	r0, #1
 800a83e:	d103      	bne.n	800a848 <_printf_common+0xac>
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a848:	3501      	adds	r5, #1
 800a84a:	e7c6      	b.n	800a7da <_printf_common+0x3e>
 800a84c:	18e1      	adds	r1, r4, r3
 800a84e:	1c5a      	adds	r2, r3, #1
 800a850:	2030      	movs	r0, #48	; 0x30
 800a852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a856:	4422      	add	r2, r4
 800a858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a85c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a860:	3302      	adds	r3, #2
 800a862:	e7c7      	b.n	800a7f4 <_printf_common+0x58>
 800a864:	2301      	movs	r3, #1
 800a866:	4622      	mov	r2, r4
 800a868:	4649      	mov	r1, r9
 800a86a:	4638      	mov	r0, r7
 800a86c:	47c0      	blx	r8
 800a86e:	3001      	adds	r0, #1
 800a870:	d0e6      	beq.n	800a840 <_printf_common+0xa4>
 800a872:	3601      	adds	r6, #1
 800a874:	e7d9      	b.n	800a82a <_printf_common+0x8e>
	...

0800a878 <_printf_i>:
 800a878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	7e0f      	ldrb	r7, [r1, #24]
 800a87e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a880:	2f78      	cmp	r7, #120	; 0x78
 800a882:	4691      	mov	r9, r2
 800a884:	4680      	mov	r8, r0
 800a886:	460c      	mov	r4, r1
 800a888:	469a      	mov	sl, r3
 800a88a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a88e:	d807      	bhi.n	800a8a0 <_printf_i+0x28>
 800a890:	2f62      	cmp	r7, #98	; 0x62
 800a892:	d80a      	bhi.n	800a8aa <_printf_i+0x32>
 800a894:	2f00      	cmp	r7, #0
 800a896:	f000 80d8 	beq.w	800aa4a <_printf_i+0x1d2>
 800a89a:	2f58      	cmp	r7, #88	; 0x58
 800a89c:	f000 80a3 	beq.w	800a9e6 <_printf_i+0x16e>
 800a8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8a8:	e03a      	b.n	800a920 <_printf_i+0xa8>
 800a8aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ae:	2b15      	cmp	r3, #21
 800a8b0:	d8f6      	bhi.n	800a8a0 <_printf_i+0x28>
 800a8b2:	a101      	add	r1, pc, #4	; (adr r1, 800a8b8 <_printf_i+0x40>)
 800a8b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8b8:	0800a911 	.word	0x0800a911
 800a8bc:	0800a925 	.word	0x0800a925
 800a8c0:	0800a8a1 	.word	0x0800a8a1
 800a8c4:	0800a8a1 	.word	0x0800a8a1
 800a8c8:	0800a8a1 	.word	0x0800a8a1
 800a8cc:	0800a8a1 	.word	0x0800a8a1
 800a8d0:	0800a925 	.word	0x0800a925
 800a8d4:	0800a8a1 	.word	0x0800a8a1
 800a8d8:	0800a8a1 	.word	0x0800a8a1
 800a8dc:	0800a8a1 	.word	0x0800a8a1
 800a8e0:	0800a8a1 	.word	0x0800a8a1
 800a8e4:	0800aa31 	.word	0x0800aa31
 800a8e8:	0800a955 	.word	0x0800a955
 800a8ec:	0800aa13 	.word	0x0800aa13
 800a8f0:	0800a8a1 	.word	0x0800a8a1
 800a8f4:	0800a8a1 	.word	0x0800a8a1
 800a8f8:	0800aa53 	.word	0x0800aa53
 800a8fc:	0800a8a1 	.word	0x0800a8a1
 800a900:	0800a955 	.word	0x0800a955
 800a904:	0800a8a1 	.word	0x0800a8a1
 800a908:	0800a8a1 	.word	0x0800a8a1
 800a90c:	0800aa1b 	.word	0x0800aa1b
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	1d1a      	adds	r2, r3, #4
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	602a      	str	r2, [r5, #0]
 800a918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a91c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a920:	2301      	movs	r3, #1
 800a922:	e0a3      	b.n	800aa6c <_printf_i+0x1f4>
 800a924:	6820      	ldr	r0, [r4, #0]
 800a926:	6829      	ldr	r1, [r5, #0]
 800a928:	0606      	lsls	r6, r0, #24
 800a92a:	f101 0304 	add.w	r3, r1, #4
 800a92e:	d50a      	bpl.n	800a946 <_printf_i+0xce>
 800a930:	680e      	ldr	r6, [r1, #0]
 800a932:	602b      	str	r3, [r5, #0]
 800a934:	2e00      	cmp	r6, #0
 800a936:	da03      	bge.n	800a940 <_printf_i+0xc8>
 800a938:	232d      	movs	r3, #45	; 0x2d
 800a93a:	4276      	negs	r6, r6
 800a93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a940:	485e      	ldr	r0, [pc, #376]	; (800aabc <_printf_i+0x244>)
 800a942:	230a      	movs	r3, #10
 800a944:	e019      	b.n	800a97a <_printf_i+0x102>
 800a946:	680e      	ldr	r6, [r1, #0]
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a94e:	bf18      	it	ne
 800a950:	b236      	sxthne	r6, r6
 800a952:	e7ef      	b.n	800a934 <_printf_i+0xbc>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	6820      	ldr	r0, [r4, #0]
 800a958:	1d19      	adds	r1, r3, #4
 800a95a:	6029      	str	r1, [r5, #0]
 800a95c:	0601      	lsls	r1, r0, #24
 800a95e:	d501      	bpl.n	800a964 <_printf_i+0xec>
 800a960:	681e      	ldr	r6, [r3, #0]
 800a962:	e002      	b.n	800a96a <_printf_i+0xf2>
 800a964:	0646      	lsls	r6, r0, #25
 800a966:	d5fb      	bpl.n	800a960 <_printf_i+0xe8>
 800a968:	881e      	ldrh	r6, [r3, #0]
 800a96a:	4854      	ldr	r0, [pc, #336]	; (800aabc <_printf_i+0x244>)
 800a96c:	2f6f      	cmp	r7, #111	; 0x6f
 800a96e:	bf0c      	ite	eq
 800a970:	2308      	moveq	r3, #8
 800a972:	230a      	movne	r3, #10
 800a974:	2100      	movs	r1, #0
 800a976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a97a:	6865      	ldr	r5, [r4, #4]
 800a97c:	60a5      	str	r5, [r4, #8]
 800a97e:	2d00      	cmp	r5, #0
 800a980:	bfa2      	ittt	ge
 800a982:	6821      	ldrge	r1, [r4, #0]
 800a984:	f021 0104 	bicge.w	r1, r1, #4
 800a988:	6021      	strge	r1, [r4, #0]
 800a98a:	b90e      	cbnz	r6, 800a990 <_printf_i+0x118>
 800a98c:	2d00      	cmp	r5, #0
 800a98e:	d04d      	beq.n	800aa2c <_printf_i+0x1b4>
 800a990:	4615      	mov	r5, r2
 800a992:	fbb6 f1f3 	udiv	r1, r6, r3
 800a996:	fb03 6711 	mls	r7, r3, r1, r6
 800a99a:	5dc7      	ldrb	r7, [r0, r7]
 800a99c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9a0:	4637      	mov	r7, r6
 800a9a2:	42bb      	cmp	r3, r7
 800a9a4:	460e      	mov	r6, r1
 800a9a6:	d9f4      	bls.n	800a992 <_printf_i+0x11a>
 800a9a8:	2b08      	cmp	r3, #8
 800a9aa:	d10b      	bne.n	800a9c4 <_printf_i+0x14c>
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	07de      	lsls	r6, r3, #31
 800a9b0:	d508      	bpl.n	800a9c4 <_printf_i+0x14c>
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	6861      	ldr	r1, [r4, #4]
 800a9b6:	4299      	cmp	r1, r3
 800a9b8:	bfde      	ittt	le
 800a9ba:	2330      	movle	r3, #48	; 0x30
 800a9bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9c4:	1b52      	subs	r2, r2, r5
 800a9c6:	6122      	str	r2, [r4, #16]
 800a9c8:	f8cd a000 	str.w	sl, [sp]
 800a9cc:	464b      	mov	r3, r9
 800a9ce:	aa03      	add	r2, sp, #12
 800a9d0:	4621      	mov	r1, r4
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	f7ff fee2 	bl	800a79c <_printf_common>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d14c      	bne.n	800aa76 <_printf_i+0x1fe>
 800a9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e0:	b004      	add	sp, #16
 800a9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e6:	4835      	ldr	r0, [pc, #212]	; (800aabc <_printf_i+0x244>)
 800a9e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9ec:	6829      	ldr	r1, [r5, #0]
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9f4:	6029      	str	r1, [r5, #0]
 800a9f6:	061d      	lsls	r5, r3, #24
 800a9f8:	d514      	bpl.n	800aa24 <_printf_i+0x1ac>
 800a9fa:	07df      	lsls	r7, r3, #31
 800a9fc:	bf44      	itt	mi
 800a9fe:	f043 0320 	orrmi.w	r3, r3, #32
 800aa02:	6023      	strmi	r3, [r4, #0]
 800aa04:	b91e      	cbnz	r6, 800aa0e <_printf_i+0x196>
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	f023 0320 	bic.w	r3, r3, #32
 800aa0c:	6023      	str	r3, [r4, #0]
 800aa0e:	2310      	movs	r3, #16
 800aa10:	e7b0      	b.n	800a974 <_printf_i+0xfc>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	f043 0320 	orr.w	r3, r3, #32
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	2378      	movs	r3, #120	; 0x78
 800aa1c:	4828      	ldr	r0, [pc, #160]	; (800aac0 <_printf_i+0x248>)
 800aa1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa22:	e7e3      	b.n	800a9ec <_printf_i+0x174>
 800aa24:	0659      	lsls	r1, r3, #25
 800aa26:	bf48      	it	mi
 800aa28:	b2b6      	uxthmi	r6, r6
 800aa2a:	e7e6      	b.n	800a9fa <_printf_i+0x182>
 800aa2c:	4615      	mov	r5, r2
 800aa2e:	e7bb      	b.n	800a9a8 <_printf_i+0x130>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	6826      	ldr	r6, [r4, #0]
 800aa34:	6961      	ldr	r1, [r4, #20]
 800aa36:	1d18      	adds	r0, r3, #4
 800aa38:	6028      	str	r0, [r5, #0]
 800aa3a:	0635      	lsls	r5, r6, #24
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	d501      	bpl.n	800aa44 <_printf_i+0x1cc>
 800aa40:	6019      	str	r1, [r3, #0]
 800aa42:	e002      	b.n	800aa4a <_printf_i+0x1d2>
 800aa44:	0670      	lsls	r0, r6, #25
 800aa46:	d5fb      	bpl.n	800aa40 <_printf_i+0x1c8>
 800aa48:	8019      	strh	r1, [r3, #0]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	4615      	mov	r5, r2
 800aa50:	e7ba      	b.n	800a9c8 <_printf_i+0x150>
 800aa52:	682b      	ldr	r3, [r5, #0]
 800aa54:	1d1a      	adds	r2, r3, #4
 800aa56:	602a      	str	r2, [r5, #0]
 800aa58:	681d      	ldr	r5, [r3, #0]
 800aa5a:	6862      	ldr	r2, [r4, #4]
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f7f5 fbbe 	bl	80001e0 <memchr>
 800aa64:	b108      	cbz	r0, 800aa6a <_printf_i+0x1f2>
 800aa66:	1b40      	subs	r0, r0, r5
 800aa68:	6060      	str	r0, [r4, #4]
 800aa6a:	6863      	ldr	r3, [r4, #4]
 800aa6c:	6123      	str	r3, [r4, #16]
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa74:	e7a8      	b.n	800a9c8 <_printf_i+0x150>
 800aa76:	6923      	ldr	r3, [r4, #16]
 800aa78:	462a      	mov	r2, r5
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	47d0      	blx	sl
 800aa80:	3001      	adds	r0, #1
 800aa82:	d0ab      	beq.n	800a9dc <_printf_i+0x164>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	079b      	lsls	r3, r3, #30
 800aa88:	d413      	bmi.n	800aab2 <_printf_i+0x23a>
 800aa8a:	68e0      	ldr	r0, [r4, #12]
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	4298      	cmp	r0, r3
 800aa90:	bfb8      	it	lt
 800aa92:	4618      	movlt	r0, r3
 800aa94:	e7a4      	b.n	800a9e0 <_printf_i+0x168>
 800aa96:	2301      	movs	r3, #1
 800aa98:	4632      	mov	r2, r6
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	47d0      	blx	sl
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	d09b      	beq.n	800a9dc <_printf_i+0x164>
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	68e3      	ldr	r3, [r4, #12]
 800aaa8:	9903      	ldr	r1, [sp, #12]
 800aaaa:	1a5b      	subs	r3, r3, r1
 800aaac:	42ab      	cmp	r3, r5
 800aaae:	dcf2      	bgt.n	800aa96 <_printf_i+0x21e>
 800aab0:	e7eb      	b.n	800aa8a <_printf_i+0x212>
 800aab2:	2500      	movs	r5, #0
 800aab4:	f104 0619 	add.w	r6, r4, #25
 800aab8:	e7f5      	b.n	800aaa6 <_printf_i+0x22e>
 800aaba:	bf00      	nop
 800aabc:	0800ff82 	.word	0x0800ff82
 800aac0:	0800ff93 	.word	0x0800ff93

0800aac4 <sniprintf>:
 800aac4:	b40c      	push	{r2, r3}
 800aac6:	b530      	push	{r4, r5, lr}
 800aac8:	4b17      	ldr	r3, [pc, #92]	; (800ab28 <sniprintf+0x64>)
 800aaca:	1e0c      	subs	r4, r1, #0
 800aacc:	681d      	ldr	r5, [r3, #0]
 800aace:	b09d      	sub	sp, #116	; 0x74
 800aad0:	da08      	bge.n	800aae4 <sniprintf+0x20>
 800aad2:	238b      	movs	r3, #139	; 0x8b
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	b01d      	add	sp, #116	; 0x74
 800aadc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aae0:	b002      	add	sp, #8
 800aae2:	4770      	bx	lr
 800aae4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aaec:	bf14      	ite	ne
 800aaee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aaf2:	4623      	moveq	r3, r4
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	9307      	str	r3, [sp, #28]
 800aaf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aafc:	9002      	str	r0, [sp, #8]
 800aafe:	9006      	str	r0, [sp, #24]
 800ab00:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab06:	ab21      	add	r3, sp, #132	; 0x84
 800ab08:	a902      	add	r1, sp, #8
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	f001 fb6b 	bl	800c1e8 <_svfiprintf_r>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	bfbc      	itt	lt
 800ab16:	238b      	movlt	r3, #139	; 0x8b
 800ab18:	602b      	strlt	r3, [r5, #0]
 800ab1a:	2c00      	cmp	r4, #0
 800ab1c:	d0dd      	beq.n	800aada <sniprintf+0x16>
 800ab1e:	9b02      	ldr	r3, [sp, #8]
 800ab20:	2200      	movs	r2, #0
 800ab22:	701a      	strb	r2, [r3, #0]
 800ab24:	e7d9      	b.n	800aada <sniprintf+0x16>
 800ab26:	bf00      	nop
 800ab28:	2000018c 	.word	0x2000018c

0800ab2c <quorem>:
 800ab2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab30:	6903      	ldr	r3, [r0, #16]
 800ab32:	690c      	ldr	r4, [r1, #16]
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	4607      	mov	r7, r0
 800ab38:	f2c0 8081 	blt.w	800ac3e <quorem+0x112>
 800ab3c:	3c01      	subs	r4, #1
 800ab3e:	f101 0814 	add.w	r8, r1, #20
 800ab42:	f100 0514 	add.w	r5, r0, #20
 800ab46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab4a:	9301      	str	r3, [sp, #4]
 800ab4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab54:	3301      	adds	r3, #1
 800ab56:	429a      	cmp	r2, r3
 800ab58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab60:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab64:	d331      	bcc.n	800abca <quorem+0x9e>
 800ab66:	f04f 0e00 	mov.w	lr, #0
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	46ac      	mov	ip, r5
 800ab6e:	46f2      	mov	sl, lr
 800ab70:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab74:	b293      	uxth	r3, r2
 800ab76:	fb06 e303 	mla	r3, r6, r3, lr
 800ab7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	ebaa 0303 	sub.w	r3, sl, r3
 800ab84:	f8dc a000 	ldr.w	sl, [ip]
 800ab88:	0c12      	lsrs	r2, r2, #16
 800ab8a:	fa13 f38a 	uxtah	r3, r3, sl
 800ab8e:	fb06 e202 	mla	r2, r6, r2, lr
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	9b00      	ldr	r3, [sp, #0]
 800ab96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab9a:	b292      	uxth	r2, r2
 800ab9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aba4:	f8bd 3000 	ldrh.w	r3, [sp]
 800aba8:	4581      	cmp	r9, r0
 800abaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abae:	f84c 3b04 	str.w	r3, [ip], #4
 800abb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abb6:	d2db      	bcs.n	800ab70 <quorem+0x44>
 800abb8:	f855 300b 	ldr.w	r3, [r5, fp]
 800abbc:	b92b      	cbnz	r3, 800abca <quorem+0x9e>
 800abbe:	9b01      	ldr	r3, [sp, #4]
 800abc0:	3b04      	subs	r3, #4
 800abc2:	429d      	cmp	r5, r3
 800abc4:	461a      	mov	r2, r3
 800abc6:	d32e      	bcc.n	800ac26 <quorem+0xfa>
 800abc8:	613c      	str	r4, [r7, #16]
 800abca:	4638      	mov	r0, r7
 800abcc:	f001 f8b8 	bl	800bd40 <__mcmp>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	db24      	blt.n	800ac1e <quorem+0xf2>
 800abd4:	3601      	adds	r6, #1
 800abd6:	4628      	mov	r0, r5
 800abd8:	f04f 0c00 	mov.w	ip, #0
 800abdc:	f858 2b04 	ldr.w	r2, [r8], #4
 800abe0:	f8d0 e000 	ldr.w	lr, [r0]
 800abe4:	b293      	uxth	r3, r2
 800abe6:	ebac 0303 	sub.w	r3, ip, r3
 800abea:	0c12      	lsrs	r2, r2, #16
 800abec:	fa13 f38e 	uxtah	r3, r3, lr
 800abf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800abf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abfe:	45c1      	cmp	r9, r8
 800ac00:	f840 3b04 	str.w	r3, [r0], #4
 800ac04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac08:	d2e8      	bcs.n	800abdc <quorem+0xb0>
 800ac0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac12:	b922      	cbnz	r2, 800ac1e <quorem+0xf2>
 800ac14:	3b04      	subs	r3, #4
 800ac16:	429d      	cmp	r5, r3
 800ac18:	461a      	mov	r2, r3
 800ac1a:	d30a      	bcc.n	800ac32 <quorem+0x106>
 800ac1c:	613c      	str	r4, [r7, #16]
 800ac1e:	4630      	mov	r0, r6
 800ac20:	b003      	add	sp, #12
 800ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac26:	6812      	ldr	r2, [r2, #0]
 800ac28:	3b04      	subs	r3, #4
 800ac2a:	2a00      	cmp	r2, #0
 800ac2c:	d1cc      	bne.n	800abc8 <quorem+0x9c>
 800ac2e:	3c01      	subs	r4, #1
 800ac30:	e7c7      	b.n	800abc2 <quorem+0x96>
 800ac32:	6812      	ldr	r2, [r2, #0]
 800ac34:	3b04      	subs	r3, #4
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	d1f0      	bne.n	800ac1c <quorem+0xf0>
 800ac3a:	3c01      	subs	r4, #1
 800ac3c:	e7eb      	b.n	800ac16 <quorem+0xea>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e7ee      	b.n	800ac20 <quorem+0xf4>
 800ac42:	0000      	movs	r0, r0
 800ac44:	0000      	movs	r0, r0
	...

0800ac48 <_dtoa_r>:
 800ac48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4c:	ed2d 8b04 	vpush	{d8-d9}
 800ac50:	ec57 6b10 	vmov	r6, r7, d0
 800ac54:	b093      	sub	sp, #76	; 0x4c
 800ac56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac5c:	9106      	str	r1, [sp, #24]
 800ac5e:	ee10 aa10 	vmov	sl, s0
 800ac62:	4604      	mov	r4, r0
 800ac64:	9209      	str	r2, [sp, #36]	; 0x24
 800ac66:	930c      	str	r3, [sp, #48]	; 0x30
 800ac68:	46bb      	mov	fp, r7
 800ac6a:	b975      	cbnz	r5, 800ac8a <_dtoa_r+0x42>
 800ac6c:	2010      	movs	r0, #16
 800ac6e:	f000 fddd 	bl	800b82c <malloc>
 800ac72:	4602      	mov	r2, r0
 800ac74:	6260      	str	r0, [r4, #36]	; 0x24
 800ac76:	b920      	cbnz	r0, 800ac82 <_dtoa_r+0x3a>
 800ac78:	4ba7      	ldr	r3, [pc, #668]	; (800af18 <_dtoa_r+0x2d0>)
 800ac7a:	21ea      	movs	r1, #234	; 0xea
 800ac7c:	48a7      	ldr	r0, [pc, #668]	; (800af1c <_dtoa_r+0x2d4>)
 800ac7e:	f001 fbc3 	bl	800c408 <__assert_func>
 800ac82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac86:	6005      	str	r5, [r0, #0]
 800ac88:	60c5      	str	r5, [r0, #12]
 800ac8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac8c:	6819      	ldr	r1, [r3, #0]
 800ac8e:	b151      	cbz	r1, 800aca6 <_dtoa_r+0x5e>
 800ac90:	685a      	ldr	r2, [r3, #4]
 800ac92:	604a      	str	r2, [r1, #4]
 800ac94:	2301      	movs	r3, #1
 800ac96:	4093      	lsls	r3, r2
 800ac98:	608b      	str	r3, [r1, #8]
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f000 fe0e 	bl	800b8bc <_Bfree>
 800aca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	1e3b      	subs	r3, r7, #0
 800aca8:	bfaa      	itet	ge
 800acaa:	2300      	movge	r3, #0
 800acac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800acb0:	f8c8 3000 	strge.w	r3, [r8]
 800acb4:	4b9a      	ldr	r3, [pc, #616]	; (800af20 <_dtoa_r+0x2d8>)
 800acb6:	bfbc      	itt	lt
 800acb8:	2201      	movlt	r2, #1
 800acba:	f8c8 2000 	strlt.w	r2, [r8]
 800acbe:	ea33 030b 	bics.w	r3, r3, fp
 800acc2:	d11b      	bne.n	800acfc <_dtoa_r+0xb4>
 800acc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acc6:	f242 730f 	movw	r3, #9999	; 0x270f
 800acca:	6013      	str	r3, [r2, #0]
 800accc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acd0:	4333      	orrs	r3, r6
 800acd2:	f000 8592 	beq.w	800b7fa <_dtoa_r+0xbb2>
 800acd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acd8:	b963      	cbnz	r3, 800acf4 <_dtoa_r+0xac>
 800acda:	4b92      	ldr	r3, [pc, #584]	; (800af24 <_dtoa_r+0x2dc>)
 800acdc:	e022      	b.n	800ad24 <_dtoa_r+0xdc>
 800acde:	4b92      	ldr	r3, [pc, #584]	; (800af28 <_dtoa_r+0x2e0>)
 800ace0:	9301      	str	r3, [sp, #4]
 800ace2:	3308      	adds	r3, #8
 800ace4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	9801      	ldr	r0, [sp, #4]
 800acea:	b013      	add	sp, #76	; 0x4c
 800acec:	ecbd 8b04 	vpop	{d8-d9}
 800acf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf4:	4b8b      	ldr	r3, [pc, #556]	; (800af24 <_dtoa_r+0x2dc>)
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	3303      	adds	r3, #3
 800acfa:	e7f3      	b.n	800ace4 <_dtoa_r+0x9c>
 800acfc:	2200      	movs	r2, #0
 800acfe:	2300      	movs	r3, #0
 800ad00:	4650      	mov	r0, sl
 800ad02:	4659      	mov	r1, fp
 800ad04:	f7f5 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad08:	ec4b ab19 	vmov	d9, sl, fp
 800ad0c:	4680      	mov	r8, r0
 800ad0e:	b158      	cbz	r0, 800ad28 <_dtoa_r+0xe0>
 800ad10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad12:	2301      	movs	r3, #1
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f000 856b 	beq.w	800b7f4 <_dtoa_r+0xbac>
 800ad1e:	4883      	ldr	r0, [pc, #524]	; (800af2c <_dtoa_r+0x2e4>)
 800ad20:	6018      	str	r0, [r3, #0]
 800ad22:	1e43      	subs	r3, r0, #1
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	e7df      	b.n	800ace8 <_dtoa_r+0xa0>
 800ad28:	ec4b ab10 	vmov	d0, sl, fp
 800ad2c:	aa10      	add	r2, sp, #64	; 0x40
 800ad2e:	a911      	add	r1, sp, #68	; 0x44
 800ad30:	4620      	mov	r0, r4
 800ad32:	f001 f8ab 	bl	800be8c <__d2b>
 800ad36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ad3a:	ee08 0a10 	vmov	s16, r0
 800ad3e:	2d00      	cmp	r5, #0
 800ad40:	f000 8084 	beq.w	800ae4c <_dtoa_r+0x204>
 800ad44:	ee19 3a90 	vmov	r3, s19
 800ad48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad50:	4656      	mov	r6, sl
 800ad52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ad5e:	4b74      	ldr	r3, [pc, #464]	; (800af30 <_dtoa_r+0x2e8>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	4630      	mov	r0, r6
 800ad64:	4639      	mov	r1, r7
 800ad66:	f7f5 fa8f 	bl	8000288 <__aeabi_dsub>
 800ad6a:	a365      	add	r3, pc, #404	; (adr r3, 800af00 <_dtoa_r+0x2b8>)
 800ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad70:	f7f5 fc42 	bl	80005f8 <__aeabi_dmul>
 800ad74:	a364      	add	r3, pc, #400	; (adr r3, 800af08 <_dtoa_r+0x2c0>)
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	f7f5 fa87 	bl	800028c <__adddf3>
 800ad7e:	4606      	mov	r6, r0
 800ad80:	4628      	mov	r0, r5
 800ad82:	460f      	mov	r7, r1
 800ad84:	f7f5 fbce 	bl	8000524 <__aeabi_i2d>
 800ad88:	a361      	add	r3, pc, #388	; (adr r3, 800af10 <_dtoa_r+0x2c8>)
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	f7f5 fc33 	bl	80005f8 <__aeabi_dmul>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4630      	mov	r0, r6
 800ad98:	4639      	mov	r1, r7
 800ad9a:	f7f5 fa77 	bl	800028c <__adddf3>
 800ad9e:	4606      	mov	r6, r0
 800ada0:	460f      	mov	r7, r1
 800ada2:	f7f5 fed9 	bl	8000b58 <__aeabi_d2iz>
 800ada6:	2200      	movs	r2, #0
 800ada8:	9000      	str	r0, [sp, #0]
 800adaa:	2300      	movs	r3, #0
 800adac:	4630      	mov	r0, r6
 800adae:	4639      	mov	r1, r7
 800adb0:	f7f5 fe94 	bl	8000adc <__aeabi_dcmplt>
 800adb4:	b150      	cbz	r0, 800adcc <_dtoa_r+0x184>
 800adb6:	9800      	ldr	r0, [sp, #0]
 800adb8:	f7f5 fbb4 	bl	8000524 <__aeabi_i2d>
 800adbc:	4632      	mov	r2, r6
 800adbe:	463b      	mov	r3, r7
 800adc0:	f7f5 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 800adc4:	b910      	cbnz	r0, 800adcc <_dtoa_r+0x184>
 800adc6:	9b00      	ldr	r3, [sp, #0]
 800adc8:	3b01      	subs	r3, #1
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	9b00      	ldr	r3, [sp, #0]
 800adce:	2b16      	cmp	r3, #22
 800add0:	d85a      	bhi.n	800ae88 <_dtoa_r+0x240>
 800add2:	9a00      	ldr	r2, [sp, #0]
 800add4:	4b57      	ldr	r3, [pc, #348]	; (800af34 <_dtoa_r+0x2ec>)
 800add6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	ec51 0b19 	vmov	r0, r1, d9
 800ade2:	f7f5 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d050      	beq.n	800ae8c <_dtoa_r+0x244>
 800adea:	9b00      	ldr	r3, [sp, #0]
 800adec:	3b01      	subs	r3, #1
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	2300      	movs	r3, #0
 800adf2:	930b      	str	r3, [sp, #44]	; 0x2c
 800adf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adf6:	1b5d      	subs	r5, r3, r5
 800adf8:	1e6b      	subs	r3, r5, #1
 800adfa:	9305      	str	r3, [sp, #20]
 800adfc:	bf45      	ittet	mi
 800adfe:	f1c5 0301 	rsbmi	r3, r5, #1
 800ae02:	9304      	strmi	r3, [sp, #16]
 800ae04:	2300      	movpl	r3, #0
 800ae06:	2300      	movmi	r3, #0
 800ae08:	bf4c      	ite	mi
 800ae0a:	9305      	strmi	r3, [sp, #20]
 800ae0c:	9304      	strpl	r3, [sp, #16]
 800ae0e:	9b00      	ldr	r3, [sp, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	db3d      	blt.n	800ae90 <_dtoa_r+0x248>
 800ae14:	9b05      	ldr	r3, [sp, #20]
 800ae16:	9a00      	ldr	r2, [sp, #0]
 800ae18:	920a      	str	r2, [sp, #40]	; 0x28
 800ae1a:	4413      	add	r3, r2
 800ae1c:	9305      	str	r3, [sp, #20]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9307      	str	r3, [sp, #28]
 800ae22:	9b06      	ldr	r3, [sp, #24]
 800ae24:	2b09      	cmp	r3, #9
 800ae26:	f200 8089 	bhi.w	800af3c <_dtoa_r+0x2f4>
 800ae2a:	2b05      	cmp	r3, #5
 800ae2c:	bfc4      	itt	gt
 800ae2e:	3b04      	subgt	r3, #4
 800ae30:	9306      	strgt	r3, [sp, #24]
 800ae32:	9b06      	ldr	r3, [sp, #24]
 800ae34:	f1a3 0302 	sub.w	r3, r3, #2
 800ae38:	bfcc      	ite	gt
 800ae3a:	2500      	movgt	r5, #0
 800ae3c:	2501      	movle	r5, #1
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	f200 8087 	bhi.w	800af52 <_dtoa_r+0x30a>
 800ae44:	e8df f003 	tbb	[pc, r3]
 800ae48:	59383a2d 	.word	0x59383a2d
 800ae4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae50:	441d      	add	r5, r3
 800ae52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae56:	2b20      	cmp	r3, #32
 800ae58:	bfc1      	itttt	gt
 800ae5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ae62:	fa0b f303 	lslgt.w	r3, fp, r3
 800ae66:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae6a:	bfda      	itte	le
 800ae6c:	f1c3 0320 	rsble	r3, r3, #32
 800ae70:	fa06 f003 	lslle.w	r0, r6, r3
 800ae74:	4318      	orrgt	r0, r3
 800ae76:	f7f5 fb45 	bl	8000504 <__aeabi_ui2d>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae82:	3d01      	subs	r5, #1
 800ae84:	930e      	str	r3, [sp, #56]	; 0x38
 800ae86:	e76a      	b.n	800ad5e <_dtoa_r+0x116>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e7b2      	b.n	800adf2 <_dtoa_r+0x1aa>
 800ae8c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae8e:	e7b1      	b.n	800adf4 <_dtoa_r+0x1ac>
 800ae90:	9b04      	ldr	r3, [sp, #16]
 800ae92:	9a00      	ldr	r2, [sp, #0]
 800ae94:	1a9b      	subs	r3, r3, r2
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	4253      	negs	r3, r2
 800ae9a:	9307      	str	r3, [sp, #28]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	930a      	str	r3, [sp, #40]	; 0x28
 800aea0:	e7bf      	b.n	800ae22 <_dtoa_r+0x1da>
 800aea2:	2300      	movs	r3, #0
 800aea4:	9308      	str	r3, [sp, #32]
 800aea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dc55      	bgt.n	800af58 <_dtoa_r+0x310>
 800aeac:	2301      	movs	r3, #1
 800aeae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	9209      	str	r2, [sp, #36]	; 0x24
 800aeb6:	e00c      	b.n	800aed2 <_dtoa_r+0x28a>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e7f3      	b.n	800aea4 <_dtoa_r+0x25c>
 800aebc:	2300      	movs	r3, #0
 800aebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec0:	9308      	str	r3, [sp, #32]
 800aec2:	9b00      	ldr	r3, [sp, #0]
 800aec4:	4413      	add	r3, r2
 800aec6:	9302      	str	r3, [sp, #8]
 800aec8:	3301      	adds	r3, #1
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	9303      	str	r3, [sp, #12]
 800aece:	bfb8      	it	lt
 800aed0:	2301      	movlt	r3, #1
 800aed2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aed4:	2200      	movs	r2, #0
 800aed6:	6042      	str	r2, [r0, #4]
 800aed8:	2204      	movs	r2, #4
 800aeda:	f102 0614 	add.w	r6, r2, #20
 800aede:	429e      	cmp	r6, r3
 800aee0:	6841      	ldr	r1, [r0, #4]
 800aee2:	d93d      	bls.n	800af60 <_dtoa_r+0x318>
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 fca9 	bl	800b83c <_Balloc>
 800aeea:	9001      	str	r0, [sp, #4]
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d13b      	bne.n	800af68 <_dtoa_r+0x320>
 800aef0:	4b11      	ldr	r3, [pc, #68]	; (800af38 <_dtoa_r+0x2f0>)
 800aef2:	4602      	mov	r2, r0
 800aef4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aef8:	e6c0      	b.n	800ac7c <_dtoa_r+0x34>
 800aefa:	2301      	movs	r3, #1
 800aefc:	e7df      	b.n	800aebe <_dtoa_r+0x276>
 800aefe:	bf00      	nop
 800af00:	636f4361 	.word	0x636f4361
 800af04:	3fd287a7 	.word	0x3fd287a7
 800af08:	8b60c8b3 	.word	0x8b60c8b3
 800af0c:	3fc68a28 	.word	0x3fc68a28
 800af10:	509f79fb 	.word	0x509f79fb
 800af14:	3fd34413 	.word	0x3fd34413
 800af18:	0800ffb1 	.word	0x0800ffb1
 800af1c:	0800ffc8 	.word	0x0800ffc8
 800af20:	7ff00000 	.word	0x7ff00000
 800af24:	0800ffad 	.word	0x0800ffad
 800af28:	0800ffa4 	.word	0x0800ffa4
 800af2c:	0800ff81 	.word	0x0800ff81
 800af30:	3ff80000 	.word	0x3ff80000
 800af34:	080100b8 	.word	0x080100b8
 800af38:	08010023 	.word	0x08010023
 800af3c:	2501      	movs	r5, #1
 800af3e:	2300      	movs	r3, #0
 800af40:	9306      	str	r3, [sp, #24]
 800af42:	9508      	str	r5, [sp, #32]
 800af44:	f04f 33ff 	mov.w	r3, #4294967295
 800af48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af4c:	2200      	movs	r2, #0
 800af4e:	2312      	movs	r3, #18
 800af50:	e7b0      	b.n	800aeb4 <_dtoa_r+0x26c>
 800af52:	2301      	movs	r3, #1
 800af54:	9308      	str	r3, [sp, #32]
 800af56:	e7f5      	b.n	800af44 <_dtoa_r+0x2fc>
 800af58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af5e:	e7b8      	b.n	800aed2 <_dtoa_r+0x28a>
 800af60:	3101      	adds	r1, #1
 800af62:	6041      	str	r1, [r0, #4]
 800af64:	0052      	lsls	r2, r2, #1
 800af66:	e7b8      	b.n	800aeda <_dtoa_r+0x292>
 800af68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af6a:	9a01      	ldr	r2, [sp, #4]
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	9b03      	ldr	r3, [sp, #12]
 800af70:	2b0e      	cmp	r3, #14
 800af72:	f200 809d 	bhi.w	800b0b0 <_dtoa_r+0x468>
 800af76:	2d00      	cmp	r5, #0
 800af78:	f000 809a 	beq.w	800b0b0 <_dtoa_r+0x468>
 800af7c:	9b00      	ldr	r3, [sp, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	dd32      	ble.n	800afe8 <_dtoa_r+0x3a0>
 800af82:	4ab7      	ldr	r2, [pc, #732]	; (800b260 <_dtoa_r+0x618>)
 800af84:	f003 030f 	and.w	r3, r3, #15
 800af88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af90:	9b00      	ldr	r3, [sp, #0]
 800af92:	05d8      	lsls	r0, r3, #23
 800af94:	ea4f 1723 	mov.w	r7, r3, asr #4
 800af98:	d516      	bpl.n	800afc8 <_dtoa_r+0x380>
 800af9a:	4bb2      	ldr	r3, [pc, #712]	; (800b264 <_dtoa_r+0x61c>)
 800af9c:	ec51 0b19 	vmov	r0, r1, d9
 800afa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afa4:	f7f5 fc52 	bl	800084c <__aeabi_ddiv>
 800afa8:	f007 070f 	and.w	r7, r7, #15
 800afac:	4682      	mov	sl, r0
 800afae:	468b      	mov	fp, r1
 800afb0:	2503      	movs	r5, #3
 800afb2:	4eac      	ldr	r6, [pc, #688]	; (800b264 <_dtoa_r+0x61c>)
 800afb4:	b957      	cbnz	r7, 800afcc <_dtoa_r+0x384>
 800afb6:	4642      	mov	r2, r8
 800afb8:	464b      	mov	r3, r9
 800afba:	4650      	mov	r0, sl
 800afbc:	4659      	mov	r1, fp
 800afbe:	f7f5 fc45 	bl	800084c <__aeabi_ddiv>
 800afc2:	4682      	mov	sl, r0
 800afc4:	468b      	mov	fp, r1
 800afc6:	e028      	b.n	800b01a <_dtoa_r+0x3d2>
 800afc8:	2502      	movs	r5, #2
 800afca:	e7f2      	b.n	800afb2 <_dtoa_r+0x36a>
 800afcc:	07f9      	lsls	r1, r7, #31
 800afce:	d508      	bpl.n	800afe2 <_dtoa_r+0x39a>
 800afd0:	4640      	mov	r0, r8
 800afd2:	4649      	mov	r1, r9
 800afd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afd8:	f7f5 fb0e 	bl	80005f8 <__aeabi_dmul>
 800afdc:	3501      	adds	r5, #1
 800afde:	4680      	mov	r8, r0
 800afe0:	4689      	mov	r9, r1
 800afe2:	107f      	asrs	r7, r7, #1
 800afe4:	3608      	adds	r6, #8
 800afe6:	e7e5      	b.n	800afb4 <_dtoa_r+0x36c>
 800afe8:	f000 809b 	beq.w	800b122 <_dtoa_r+0x4da>
 800afec:	9b00      	ldr	r3, [sp, #0]
 800afee:	4f9d      	ldr	r7, [pc, #628]	; (800b264 <_dtoa_r+0x61c>)
 800aff0:	425e      	negs	r6, r3
 800aff2:	4b9b      	ldr	r3, [pc, #620]	; (800b260 <_dtoa_r+0x618>)
 800aff4:	f006 020f 	and.w	r2, r6, #15
 800aff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	ec51 0b19 	vmov	r0, r1, d9
 800b004:	f7f5 faf8 	bl	80005f8 <__aeabi_dmul>
 800b008:	1136      	asrs	r6, r6, #4
 800b00a:	4682      	mov	sl, r0
 800b00c:	468b      	mov	fp, r1
 800b00e:	2300      	movs	r3, #0
 800b010:	2502      	movs	r5, #2
 800b012:	2e00      	cmp	r6, #0
 800b014:	d17a      	bne.n	800b10c <_dtoa_r+0x4c4>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1d3      	bne.n	800afc2 <_dtoa_r+0x37a>
 800b01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 8082 	beq.w	800b126 <_dtoa_r+0x4de>
 800b022:	4b91      	ldr	r3, [pc, #580]	; (800b268 <_dtoa_r+0x620>)
 800b024:	2200      	movs	r2, #0
 800b026:	4650      	mov	r0, sl
 800b028:	4659      	mov	r1, fp
 800b02a:	f7f5 fd57 	bl	8000adc <__aeabi_dcmplt>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d079      	beq.n	800b126 <_dtoa_r+0x4de>
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d076      	beq.n	800b126 <_dtoa_r+0x4de>
 800b038:	9b02      	ldr	r3, [sp, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dd36      	ble.n	800b0ac <_dtoa_r+0x464>
 800b03e:	9b00      	ldr	r3, [sp, #0]
 800b040:	4650      	mov	r0, sl
 800b042:	4659      	mov	r1, fp
 800b044:	1e5f      	subs	r7, r3, #1
 800b046:	2200      	movs	r2, #0
 800b048:	4b88      	ldr	r3, [pc, #544]	; (800b26c <_dtoa_r+0x624>)
 800b04a:	f7f5 fad5 	bl	80005f8 <__aeabi_dmul>
 800b04e:	9e02      	ldr	r6, [sp, #8]
 800b050:	4682      	mov	sl, r0
 800b052:	468b      	mov	fp, r1
 800b054:	3501      	adds	r5, #1
 800b056:	4628      	mov	r0, r5
 800b058:	f7f5 fa64 	bl	8000524 <__aeabi_i2d>
 800b05c:	4652      	mov	r2, sl
 800b05e:	465b      	mov	r3, fp
 800b060:	f7f5 faca 	bl	80005f8 <__aeabi_dmul>
 800b064:	4b82      	ldr	r3, [pc, #520]	; (800b270 <_dtoa_r+0x628>)
 800b066:	2200      	movs	r2, #0
 800b068:	f7f5 f910 	bl	800028c <__adddf3>
 800b06c:	46d0      	mov	r8, sl
 800b06e:	46d9      	mov	r9, fp
 800b070:	4682      	mov	sl, r0
 800b072:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b076:	2e00      	cmp	r6, #0
 800b078:	d158      	bne.n	800b12c <_dtoa_r+0x4e4>
 800b07a:	4b7e      	ldr	r3, [pc, #504]	; (800b274 <_dtoa_r+0x62c>)
 800b07c:	2200      	movs	r2, #0
 800b07e:	4640      	mov	r0, r8
 800b080:	4649      	mov	r1, r9
 800b082:	f7f5 f901 	bl	8000288 <__aeabi_dsub>
 800b086:	4652      	mov	r2, sl
 800b088:	465b      	mov	r3, fp
 800b08a:	4680      	mov	r8, r0
 800b08c:	4689      	mov	r9, r1
 800b08e:	f7f5 fd43 	bl	8000b18 <__aeabi_dcmpgt>
 800b092:	2800      	cmp	r0, #0
 800b094:	f040 8295 	bne.w	800b5c2 <_dtoa_r+0x97a>
 800b098:	4652      	mov	r2, sl
 800b09a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b09e:	4640      	mov	r0, r8
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	f7f5 fd1b 	bl	8000adc <__aeabi_dcmplt>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f040 8289 	bne.w	800b5be <_dtoa_r+0x976>
 800b0ac:	ec5b ab19 	vmov	sl, fp, d9
 800b0b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f2c0 8148 	blt.w	800b348 <_dtoa_r+0x700>
 800b0b8:	9a00      	ldr	r2, [sp, #0]
 800b0ba:	2a0e      	cmp	r2, #14
 800b0bc:	f300 8144 	bgt.w	800b348 <_dtoa_r+0x700>
 800b0c0:	4b67      	ldr	r3, [pc, #412]	; (800b260 <_dtoa_r+0x618>)
 800b0c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f280 80d5 	bge.w	800b27c <_dtoa_r+0x634>
 800b0d2:	9b03      	ldr	r3, [sp, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f300 80d1 	bgt.w	800b27c <_dtoa_r+0x634>
 800b0da:	f040 826f 	bne.w	800b5bc <_dtoa_r+0x974>
 800b0de:	4b65      	ldr	r3, [pc, #404]	; (800b274 <_dtoa_r+0x62c>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	f7f5 fa87 	bl	80005f8 <__aeabi_dmul>
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	465b      	mov	r3, fp
 800b0ee:	f7f5 fd09 	bl	8000b04 <__aeabi_dcmpge>
 800b0f2:	9e03      	ldr	r6, [sp, #12]
 800b0f4:	4637      	mov	r7, r6
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f040 8245 	bne.w	800b586 <_dtoa_r+0x93e>
 800b0fc:	9d01      	ldr	r5, [sp, #4]
 800b0fe:	2331      	movs	r3, #49	; 0x31
 800b100:	f805 3b01 	strb.w	r3, [r5], #1
 800b104:	9b00      	ldr	r3, [sp, #0]
 800b106:	3301      	adds	r3, #1
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	e240      	b.n	800b58e <_dtoa_r+0x946>
 800b10c:	07f2      	lsls	r2, r6, #31
 800b10e:	d505      	bpl.n	800b11c <_dtoa_r+0x4d4>
 800b110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b114:	f7f5 fa70 	bl	80005f8 <__aeabi_dmul>
 800b118:	3501      	adds	r5, #1
 800b11a:	2301      	movs	r3, #1
 800b11c:	1076      	asrs	r6, r6, #1
 800b11e:	3708      	adds	r7, #8
 800b120:	e777      	b.n	800b012 <_dtoa_r+0x3ca>
 800b122:	2502      	movs	r5, #2
 800b124:	e779      	b.n	800b01a <_dtoa_r+0x3d2>
 800b126:	9f00      	ldr	r7, [sp, #0]
 800b128:	9e03      	ldr	r6, [sp, #12]
 800b12a:	e794      	b.n	800b056 <_dtoa_r+0x40e>
 800b12c:	9901      	ldr	r1, [sp, #4]
 800b12e:	4b4c      	ldr	r3, [pc, #304]	; (800b260 <_dtoa_r+0x618>)
 800b130:	4431      	add	r1, r6
 800b132:	910d      	str	r1, [sp, #52]	; 0x34
 800b134:	9908      	ldr	r1, [sp, #32]
 800b136:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b13a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b13e:	2900      	cmp	r1, #0
 800b140:	d043      	beq.n	800b1ca <_dtoa_r+0x582>
 800b142:	494d      	ldr	r1, [pc, #308]	; (800b278 <_dtoa_r+0x630>)
 800b144:	2000      	movs	r0, #0
 800b146:	f7f5 fb81 	bl	800084c <__aeabi_ddiv>
 800b14a:	4652      	mov	r2, sl
 800b14c:	465b      	mov	r3, fp
 800b14e:	f7f5 f89b 	bl	8000288 <__aeabi_dsub>
 800b152:	9d01      	ldr	r5, [sp, #4]
 800b154:	4682      	mov	sl, r0
 800b156:	468b      	mov	fp, r1
 800b158:	4649      	mov	r1, r9
 800b15a:	4640      	mov	r0, r8
 800b15c:	f7f5 fcfc 	bl	8000b58 <__aeabi_d2iz>
 800b160:	4606      	mov	r6, r0
 800b162:	f7f5 f9df 	bl	8000524 <__aeabi_i2d>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4640      	mov	r0, r8
 800b16c:	4649      	mov	r1, r9
 800b16e:	f7f5 f88b 	bl	8000288 <__aeabi_dsub>
 800b172:	3630      	adds	r6, #48	; 0x30
 800b174:	f805 6b01 	strb.w	r6, [r5], #1
 800b178:	4652      	mov	r2, sl
 800b17a:	465b      	mov	r3, fp
 800b17c:	4680      	mov	r8, r0
 800b17e:	4689      	mov	r9, r1
 800b180:	f7f5 fcac 	bl	8000adc <__aeabi_dcmplt>
 800b184:	2800      	cmp	r0, #0
 800b186:	d163      	bne.n	800b250 <_dtoa_r+0x608>
 800b188:	4642      	mov	r2, r8
 800b18a:	464b      	mov	r3, r9
 800b18c:	4936      	ldr	r1, [pc, #216]	; (800b268 <_dtoa_r+0x620>)
 800b18e:	2000      	movs	r0, #0
 800b190:	f7f5 f87a 	bl	8000288 <__aeabi_dsub>
 800b194:	4652      	mov	r2, sl
 800b196:	465b      	mov	r3, fp
 800b198:	f7f5 fca0 	bl	8000adc <__aeabi_dcmplt>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	f040 80b5 	bne.w	800b30c <_dtoa_r+0x6c4>
 800b1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1a4:	429d      	cmp	r5, r3
 800b1a6:	d081      	beq.n	800b0ac <_dtoa_r+0x464>
 800b1a8:	4b30      	ldr	r3, [pc, #192]	; (800b26c <_dtoa_r+0x624>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	4650      	mov	r0, sl
 800b1ae:	4659      	mov	r1, fp
 800b1b0:	f7f5 fa22 	bl	80005f8 <__aeabi_dmul>
 800b1b4:	4b2d      	ldr	r3, [pc, #180]	; (800b26c <_dtoa_r+0x624>)
 800b1b6:	4682      	mov	sl, r0
 800b1b8:	468b      	mov	fp, r1
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	4649      	mov	r1, r9
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f7f5 fa1a 	bl	80005f8 <__aeabi_dmul>
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	4689      	mov	r9, r1
 800b1c8:	e7c6      	b.n	800b158 <_dtoa_r+0x510>
 800b1ca:	4650      	mov	r0, sl
 800b1cc:	4659      	mov	r1, fp
 800b1ce:	f7f5 fa13 	bl	80005f8 <__aeabi_dmul>
 800b1d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1d4:	9d01      	ldr	r5, [sp, #4]
 800b1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1d8:	4682      	mov	sl, r0
 800b1da:	468b      	mov	fp, r1
 800b1dc:	4649      	mov	r1, r9
 800b1de:	4640      	mov	r0, r8
 800b1e0:	f7f5 fcba 	bl	8000b58 <__aeabi_d2iz>
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	f7f5 f99d 	bl	8000524 <__aeabi_i2d>
 800b1ea:	3630      	adds	r6, #48	; 0x30
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	4649      	mov	r1, r9
 800b1f4:	f7f5 f848 	bl	8000288 <__aeabi_dsub>
 800b1f8:	f805 6b01 	strb.w	r6, [r5], #1
 800b1fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1fe:	429d      	cmp	r5, r3
 800b200:	4680      	mov	r8, r0
 800b202:	4689      	mov	r9, r1
 800b204:	f04f 0200 	mov.w	r2, #0
 800b208:	d124      	bne.n	800b254 <_dtoa_r+0x60c>
 800b20a:	4b1b      	ldr	r3, [pc, #108]	; (800b278 <_dtoa_r+0x630>)
 800b20c:	4650      	mov	r0, sl
 800b20e:	4659      	mov	r1, fp
 800b210:	f7f5 f83c 	bl	800028c <__adddf3>
 800b214:	4602      	mov	r2, r0
 800b216:	460b      	mov	r3, r1
 800b218:	4640      	mov	r0, r8
 800b21a:	4649      	mov	r1, r9
 800b21c:	f7f5 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 800b220:	2800      	cmp	r0, #0
 800b222:	d173      	bne.n	800b30c <_dtoa_r+0x6c4>
 800b224:	4652      	mov	r2, sl
 800b226:	465b      	mov	r3, fp
 800b228:	4913      	ldr	r1, [pc, #76]	; (800b278 <_dtoa_r+0x630>)
 800b22a:	2000      	movs	r0, #0
 800b22c:	f7f5 f82c 	bl	8000288 <__aeabi_dsub>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4640      	mov	r0, r8
 800b236:	4649      	mov	r1, r9
 800b238:	f7f5 fc50 	bl	8000adc <__aeabi_dcmplt>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f43f af35 	beq.w	800b0ac <_dtoa_r+0x464>
 800b242:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b244:	1e6b      	subs	r3, r5, #1
 800b246:	930f      	str	r3, [sp, #60]	; 0x3c
 800b248:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b24c:	2b30      	cmp	r3, #48	; 0x30
 800b24e:	d0f8      	beq.n	800b242 <_dtoa_r+0x5fa>
 800b250:	9700      	str	r7, [sp, #0]
 800b252:	e049      	b.n	800b2e8 <_dtoa_r+0x6a0>
 800b254:	4b05      	ldr	r3, [pc, #20]	; (800b26c <_dtoa_r+0x624>)
 800b256:	f7f5 f9cf 	bl	80005f8 <__aeabi_dmul>
 800b25a:	4680      	mov	r8, r0
 800b25c:	4689      	mov	r9, r1
 800b25e:	e7bd      	b.n	800b1dc <_dtoa_r+0x594>
 800b260:	080100b8 	.word	0x080100b8
 800b264:	08010090 	.word	0x08010090
 800b268:	3ff00000 	.word	0x3ff00000
 800b26c:	40240000 	.word	0x40240000
 800b270:	401c0000 	.word	0x401c0000
 800b274:	40140000 	.word	0x40140000
 800b278:	3fe00000 	.word	0x3fe00000
 800b27c:	9d01      	ldr	r5, [sp, #4]
 800b27e:	4656      	mov	r6, sl
 800b280:	465f      	mov	r7, fp
 800b282:	4642      	mov	r2, r8
 800b284:	464b      	mov	r3, r9
 800b286:	4630      	mov	r0, r6
 800b288:	4639      	mov	r1, r7
 800b28a:	f7f5 fadf 	bl	800084c <__aeabi_ddiv>
 800b28e:	f7f5 fc63 	bl	8000b58 <__aeabi_d2iz>
 800b292:	4682      	mov	sl, r0
 800b294:	f7f5 f946 	bl	8000524 <__aeabi_i2d>
 800b298:	4642      	mov	r2, r8
 800b29a:	464b      	mov	r3, r9
 800b29c:	f7f5 f9ac 	bl	80005f8 <__aeabi_dmul>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b2ac:	f7f4 ffec 	bl	8000288 <__aeabi_dsub>
 800b2b0:	f805 6b01 	strb.w	r6, [r5], #1
 800b2b4:	9e01      	ldr	r6, [sp, #4]
 800b2b6:	9f03      	ldr	r7, [sp, #12]
 800b2b8:	1bae      	subs	r6, r5, r6
 800b2ba:	42b7      	cmp	r7, r6
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	d135      	bne.n	800b32e <_dtoa_r+0x6e6>
 800b2c2:	f7f4 ffe3 	bl	800028c <__adddf3>
 800b2c6:	4642      	mov	r2, r8
 800b2c8:	464b      	mov	r3, r9
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	460f      	mov	r7, r1
 800b2ce:	f7f5 fc23 	bl	8000b18 <__aeabi_dcmpgt>
 800b2d2:	b9d0      	cbnz	r0, 800b30a <_dtoa_r+0x6c2>
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f5 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2e0:	b110      	cbz	r0, 800b2e8 <_dtoa_r+0x6a0>
 800b2e2:	f01a 0f01 	tst.w	sl, #1
 800b2e6:	d110      	bne.n	800b30a <_dtoa_r+0x6c2>
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	ee18 1a10 	vmov	r1, s16
 800b2ee:	f000 fae5 	bl	800b8bc <_Bfree>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	9800      	ldr	r0, [sp, #0]
 800b2f6:	702b      	strb	r3, [r5, #0]
 800b2f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	6018      	str	r0, [r3, #0]
 800b2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b300:	2b00      	cmp	r3, #0
 800b302:	f43f acf1 	beq.w	800ace8 <_dtoa_r+0xa0>
 800b306:	601d      	str	r5, [r3, #0]
 800b308:	e4ee      	b.n	800ace8 <_dtoa_r+0xa0>
 800b30a:	9f00      	ldr	r7, [sp, #0]
 800b30c:	462b      	mov	r3, r5
 800b30e:	461d      	mov	r5, r3
 800b310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b314:	2a39      	cmp	r2, #57	; 0x39
 800b316:	d106      	bne.n	800b326 <_dtoa_r+0x6de>
 800b318:	9a01      	ldr	r2, [sp, #4]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d1f7      	bne.n	800b30e <_dtoa_r+0x6c6>
 800b31e:	9901      	ldr	r1, [sp, #4]
 800b320:	2230      	movs	r2, #48	; 0x30
 800b322:	3701      	adds	r7, #1
 800b324:	700a      	strb	r2, [r1, #0]
 800b326:	781a      	ldrb	r2, [r3, #0]
 800b328:	3201      	adds	r2, #1
 800b32a:	701a      	strb	r2, [r3, #0]
 800b32c:	e790      	b.n	800b250 <_dtoa_r+0x608>
 800b32e:	4ba6      	ldr	r3, [pc, #664]	; (800b5c8 <_dtoa_r+0x980>)
 800b330:	2200      	movs	r2, #0
 800b332:	f7f5 f961 	bl	80005f8 <__aeabi_dmul>
 800b336:	2200      	movs	r2, #0
 800b338:	2300      	movs	r3, #0
 800b33a:	4606      	mov	r6, r0
 800b33c:	460f      	mov	r7, r1
 800b33e:	f7f5 fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b342:	2800      	cmp	r0, #0
 800b344:	d09d      	beq.n	800b282 <_dtoa_r+0x63a>
 800b346:	e7cf      	b.n	800b2e8 <_dtoa_r+0x6a0>
 800b348:	9a08      	ldr	r2, [sp, #32]
 800b34a:	2a00      	cmp	r2, #0
 800b34c:	f000 80d7 	beq.w	800b4fe <_dtoa_r+0x8b6>
 800b350:	9a06      	ldr	r2, [sp, #24]
 800b352:	2a01      	cmp	r2, #1
 800b354:	f300 80ba 	bgt.w	800b4cc <_dtoa_r+0x884>
 800b358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b35a:	2a00      	cmp	r2, #0
 800b35c:	f000 80b2 	beq.w	800b4c4 <_dtoa_r+0x87c>
 800b360:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b364:	9e07      	ldr	r6, [sp, #28]
 800b366:	9d04      	ldr	r5, [sp, #16]
 800b368:	9a04      	ldr	r2, [sp, #16]
 800b36a:	441a      	add	r2, r3
 800b36c:	9204      	str	r2, [sp, #16]
 800b36e:	9a05      	ldr	r2, [sp, #20]
 800b370:	2101      	movs	r1, #1
 800b372:	441a      	add	r2, r3
 800b374:	4620      	mov	r0, r4
 800b376:	9205      	str	r2, [sp, #20]
 800b378:	f000 fb58 	bl	800ba2c <__i2b>
 800b37c:	4607      	mov	r7, r0
 800b37e:	2d00      	cmp	r5, #0
 800b380:	dd0c      	ble.n	800b39c <_dtoa_r+0x754>
 800b382:	9b05      	ldr	r3, [sp, #20]
 800b384:	2b00      	cmp	r3, #0
 800b386:	dd09      	ble.n	800b39c <_dtoa_r+0x754>
 800b388:	42ab      	cmp	r3, r5
 800b38a:	9a04      	ldr	r2, [sp, #16]
 800b38c:	bfa8      	it	ge
 800b38e:	462b      	movge	r3, r5
 800b390:	1ad2      	subs	r2, r2, r3
 800b392:	9204      	str	r2, [sp, #16]
 800b394:	9a05      	ldr	r2, [sp, #20]
 800b396:	1aed      	subs	r5, r5, r3
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	9305      	str	r3, [sp, #20]
 800b39c:	9b07      	ldr	r3, [sp, #28]
 800b39e:	b31b      	cbz	r3, 800b3e8 <_dtoa_r+0x7a0>
 800b3a0:	9b08      	ldr	r3, [sp, #32]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 80af 	beq.w	800b506 <_dtoa_r+0x8be>
 800b3a8:	2e00      	cmp	r6, #0
 800b3aa:	dd13      	ble.n	800b3d4 <_dtoa_r+0x78c>
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	4632      	mov	r2, r6
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f000 fbfb 	bl	800bbac <__pow5mult>
 800b3b6:	ee18 2a10 	vmov	r2, s16
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	4607      	mov	r7, r0
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 fb4a 	bl	800ba58 <__multiply>
 800b3c4:	ee18 1a10 	vmov	r1, s16
 800b3c8:	4680      	mov	r8, r0
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 fa76 	bl	800b8bc <_Bfree>
 800b3d0:	ee08 8a10 	vmov	s16, r8
 800b3d4:	9b07      	ldr	r3, [sp, #28]
 800b3d6:	1b9a      	subs	r2, r3, r6
 800b3d8:	d006      	beq.n	800b3e8 <_dtoa_r+0x7a0>
 800b3da:	ee18 1a10 	vmov	r1, s16
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f000 fbe4 	bl	800bbac <__pow5mult>
 800b3e4:	ee08 0a10 	vmov	s16, r0
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f000 fb1e 	bl	800ba2c <__i2b>
 800b3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	f340 8088 	ble.w	800b50a <_dtoa_r+0x8c2>
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	4601      	mov	r1, r0
 800b3fe:	4620      	mov	r0, r4
 800b400:	f000 fbd4 	bl	800bbac <__pow5mult>
 800b404:	9b06      	ldr	r3, [sp, #24]
 800b406:	2b01      	cmp	r3, #1
 800b408:	4606      	mov	r6, r0
 800b40a:	f340 8081 	ble.w	800b510 <_dtoa_r+0x8c8>
 800b40e:	f04f 0800 	mov.w	r8, #0
 800b412:	6933      	ldr	r3, [r6, #16]
 800b414:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b418:	6918      	ldr	r0, [r3, #16]
 800b41a:	f000 fab7 	bl	800b98c <__hi0bits>
 800b41e:	f1c0 0020 	rsb	r0, r0, #32
 800b422:	9b05      	ldr	r3, [sp, #20]
 800b424:	4418      	add	r0, r3
 800b426:	f010 001f 	ands.w	r0, r0, #31
 800b42a:	f000 8092 	beq.w	800b552 <_dtoa_r+0x90a>
 800b42e:	f1c0 0320 	rsb	r3, r0, #32
 800b432:	2b04      	cmp	r3, #4
 800b434:	f340 808a 	ble.w	800b54c <_dtoa_r+0x904>
 800b438:	f1c0 001c 	rsb	r0, r0, #28
 800b43c:	9b04      	ldr	r3, [sp, #16]
 800b43e:	4403      	add	r3, r0
 800b440:	9304      	str	r3, [sp, #16]
 800b442:	9b05      	ldr	r3, [sp, #20]
 800b444:	4403      	add	r3, r0
 800b446:	4405      	add	r5, r0
 800b448:	9305      	str	r3, [sp, #20]
 800b44a:	9b04      	ldr	r3, [sp, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	dd07      	ble.n	800b460 <_dtoa_r+0x818>
 800b450:	ee18 1a10 	vmov	r1, s16
 800b454:	461a      	mov	r2, r3
 800b456:	4620      	mov	r0, r4
 800b458:	f000 fc02 	bl	800bc60 <__lshift>
 800b45c:	ee08 0a10 	vmov	s16, r0
 800b460:	9b05      	ldr	r3, [sp, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	dd05      	ble.n	800b472 <_dtoa_r+0x82a>
 800b466:	4631      	mov	r1, r6
 800b468:	461a      	mov	r2, r3
 800b46a:	4620      	mov	r0, r4
 800b46c:	f000 fbf8 	bl	800bc60 <__lshift>
 800b470:	4606      	mov	r6, r0
 800b472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b474:	2b00      	cmp	r3, #0
 800b476:	d06e      	beq.n	800b556 <_dtoa_r+0x90e>
 800b478:	ee18 0a10 	vmov	r0, s16
 800b47c:	4631      	mov	r1, r6
 800b47e:	f000 fc5f 	bl	800bd40 <__mcmp>
 800b482:	2800      	cmp	r0, #0
 800b484:	da67      	bge.n	800b556 <_dtoa_r+0x90e>
 800b486:	9b00      	ldr	r3, [sp, #0]
 800b488:	3b01      	subs	r3, #1
 800b48a:	ee18 1a10 	vmov	r1, s16
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	220a      	movs	r2, #10
 800b492:	2300      	movs	r3, #0
 800b494:	4620      	mov	r0, r4
 800b496:	f000 fa33 	bl	800b900 <__multadd>
 800b49a:	9b08      	ldr	r3, [sp, #32]
 800b49c:	ee08 0a10 	vmov	s16, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 81b1 	beq.w	800b808 <_dtoa_r+0xbc0>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	220a      	movs	r2, #10
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fa27 	bl	800b900 <__multadd>
 800b4b2:	9b02      	ldr	r3, [sp, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	4607      	mov	r7, r0
 800b4b8:	f300 808e 	bgt.w	800b5d8 <_dtoa_r+0x990>
 800b4bc:	9b06      	ldr	r3, [sp, #24]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	dc51      	bgt.n	800b566 <_dtoa_r+0x91e>
 800b4c2:	e089      	b.n	800b5d8 <_dtoa_r+0x990>
 800b4c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4ca:	e74b      	b.n	800b364 <_dtoa_r+0x71c>
 800b4cc:	9b03      	ldr	r3, [sp, #12]
 800b4ce:	1e5e      	subs	r6, r3, #1
 800b4d0:	9b07      	ldr	r3, [sp, #28]
 800b4d2:	42b3      	cmp	r3, r6
 800b4d4:	bfbf      	itttt	lt
 800b4d6:	9b07      	ldrlt	r3, [sp, #28]
 800b4d8:	9607      	strlt	r6, [sp, #28]
 800b4da:	1af2      	sublt	r2, r6, r3
 800b4dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b4de:	bfb6      	itet	lt
 800b4e0:	189b      	addlt	r3, r3, r2
 800b4e2:	1b9e      	subge	r6, r3, r6
 800b4e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	bfb8      	it	lt
 800b4ea:	2600      	movlt	r6, #0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	bfb7      	itett	lt
 800b4f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b4f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b4f8:	1a9d      	sublt	r5, r3, r2
 800b4fa:	2300      	movlt	r3, #0
 800b4fc:	e734      	b.n	800b368 <_dtoa_r+0x720>
 800b4fe:	9e07      	ldr	r6, [sp, #28]
 800b500:	9d04      	ldr	r5, [sp, #16]
 800b502:	9f08      	ldr	r7, [sp, #32]
 800b504:	e73b      	b.n	800b37e <_dtoa_r+0x736>
 800b506:	9a07      	ldr	r2, [sp, #28]
 800b508:	e767      	b.n	800b3da <_dtoa_r+0x792>
 800b50a:	9b06      	ldr	r3, [sp, #24]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	dc18      	bgt.n	800b542 <_dtoa_r+0x8fa>
 800b510:	f1ba 0f00 	cmp.w	sl, #0
 800b514:	d115      	bne.n	800b542 <_dtoa_r+0x8fa>
 800b516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b51a:	b993      	cbnz	r3, 800b542 <_dtoa_r+0x8fa>
 800b51c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b520:	0d1b      	lsrs	r3, r3, #20
 800b522:	051b      	lsls	r3, r3, #20
 800b524:	b183      	cbz	r3, 800b548 <_dtoa_r+0x900>
 800b526:	9b04      	ldr	r3, [sp, #16]
 800b528:	3301      	adds	r3, #1
 800b52a:	9304      	str	r3, [sp, #16]
 800b52c:	9b05      	ldr	r3, [sp, #20]
 800b52e:	3301      	adds	r3, #1
 800b530:	9305      	str	r3, [sp, #20]
 800b532:	f04f 0801 	mov.w	r8, #1
 800b536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f47f af6a 	bne.w	800b412 <_dtoa_r+0x7ca>
 800b53e:	2001      	movs	r0, #1
 800b540:	e76f      	b.n	800b422 <_dtoa_r+0x7da>
 800b542:	f04f 0800 	mov.w	r8, #0
 800b546:	e7f6      	b.n	800b536 <_dtoa_r+0x8ee>
 800b548:	4698      	mov	r8, r3
 800b54a:	e7f4      	b.n	800b536 <_dtoa_r+0x8ee>
 800b54c:	f43f af7d 	beq.w	800b44a <_dtoa_r+0x802>
 800b550:	4618      	mov	r0, r3
 800b552:	301c      	adds	r0, #28
 800b554:	e772      	b.n	800b43c <_dtoa_r+0x7f4>
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	dc37      	bgt.n	800b5cc <_dtoa_r+0x984>
 800b55c:	9b06      	ldr	r3, [sp, #24]
 800b55e:	2b02      	cmp	r3, #2
 800b560:	dd34      	ble.n	800b5cc <_dtoa_r+0x984>
 800b562:	9b03      	ldr	r3, [sp, #12]
 800b564:	9302      	str	r3, [sp, #8]
 800b566:	9b02      	ldr	r3, [sp, #8]
 800b568:	b96b      	cbnz	r3, 800b586 <_dtoa_r+0x93e>
 800b56a:	4631      	mov	r1, r6
 800b56c:	2205      	movs	r2, #5
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 f9c6 	bl	800b900 <__multadd>
 800b574:	4601      	mov	r1, r0
 800b576:	4606      	mov	r6, r0
 800b578:	ee18 0a10 	vmov	r0, s16
 800b57c:	f000 fbe0 	bl	800bd40 <__mcmp>
 800b580:	2800      	cmp	r0, #0
 800b582:	f73f adbb 	bgt.w	800b0fc <_dtoa_r+0x4b4>
 800b586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b588:	9d01      	ldr	r5, [sp, #4]
 800b58a:	43db      	mvns	r3, r3
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	f04f 0800 	mov.w	r8, #0
 800b592:	4631      	mov	r1, r6
 800b594:	4620      	mov	r0, r4
 800b596:	f000 f991 	bl	800b8bc <_Bfree>
 800b59a:	2f00      	cmp	r7, #0
 800b59c:	f43f aea4 	beq.w	800b2e8 <_dtoa_r+0x6a0>
 800b5a0:	f1b8 0f00 	cmp.w	r8, #0
 800b5a4:	d005      	beq.n	800b5b2 <_dtoa_r+0x96a>
 800b5a6:	45b8      	cmp	r8, r7
 800b5a8:	d003      	beq.n	800b5b2 <_dtoa_r+0x96a>
 800b5aa:	4641      	mov	r1, r8
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f000 f985 	bl	800b8bc <_Bfree>
 800b5b2:	4639      	mov	r1, r7
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	f000 f981 	bl	800b8bc <_Bfree>
 800b5ba:	e695      	b.n	800b2e8 <_dtoa_r+0x6a0>
 800b5bc:	2600      	movs	r6, #0
 800b5be:	4637      	mov	r7, r6
 800b5c0:	e7e1      	b.n	800b586 <_dtoa_r+0x93e>
 800b5c2:	9700      	str	r7, [sp, #0]
 800b5c4:	4637      	mov	r7, r6
 800b5c6:	e599      	b.n	800b0fc <_dtoa_r+0x4b4>
 800b5c8:	40240000 	.word	0x40240000
 800b5cc:	9b08      	ldr	r3, [sp, #32]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 80ca 	beq.w	800b768 <_dtoa_r+0xb20>
 800b5d4:	9b03      	ldr	r3, [sp, #12]
 800b5d6:	9302      	str	r3, [sp, #8]
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	dd05      	ble.n	800b5e8 <_dtoa_r+0x9a0>
 800b5dc:	4639      	mov	r1, r7
 800b5de:	462a      	mov	r2, r5
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fb3d 	bl	800bc60 <__lshift>
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	f1b8 0f00 	cmp.w	r8, #0
 800b5ec:	d05b      	beq.n	800b6a6 <_dtoa_r+0xa5e>
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 f923 	bl	800b83c <_Balloc>
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	b928      	cbnz	r0, 800b606 <_dtoa_r+0x9be>
 800b5fa:	4b87      	ldr	r3, [pc, #540]	; (800b818 <_dtoa_r+0xbd0>)
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b602:	f7ff bb3b 	b.w	800ac7c <_dtoa_r+0x34>
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	3202      	adds	r2, #2
 800b60a:	0092      	lsls	r2, r2, #2
 800b60c:	f107 010c 	add.w	r1, r7, #12
 800b610:	300c      	adds	r0, #12
 800b612:	f7fe fdd7 	bl	800a1c4 <memcpy>
 800b616:	2201      	movs	r2, #1
 800b618:	4629      	mov	r1, r5
 800b61a:	4620      	mov	r0, r4
 800b61c:	f000 fb20 	bl	800bc60 <__lshift>
 800b620:	9b01      	ldr	r3, [sp, #4]
 800b622:	f103 0901 	add.w	r9, r3, #1
 800b626:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b62a:	4413      	add	r3, r2
 800b62c:	9305      	str	r3, [sp, #20]
 800b62e:	f00a 0301 	and.w	r3, sl, #1
 800b632:	46b8      	mov	r8, r7
 800b634:	9304      	str	r3, [sp, #16]
 800b636:	4607      	mov	r7, r0
 800b638:	4631      	mov	r1, r6
 800b63a:	ee18 0a10 	vmov	r0, s16
 800b63e:	f7ff fa75 	bl	800ab2c <quorem>
 800b642:	4641      	mov	r1, r8
 800b644:	9002      	str	r0, [sp, #8]
 800b646:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b64a:	ee18 0a10 	vmov	r0, s16
 800b64e:	f000 fb77 	bl	800bd40 <__mcmp>
 800b652:	463a      	mov	r2, r7
 800b654:	9003      	str	r0, [sp, #12]
 800b656:	4631      	mov	r1, r6
 800b658:	4620      	mov	r0, r4
 800b65a:	f000 fb8d 	bl	800bd78 <__mdiff>
 800b65e:	68c2      	ldr	r2, [r0, #12]
 800b660:	f109 3bff 	add.w	fp, r9, #4294967295
 800b664:	4605      	mov	r5, r0
 800b666:	bb02      	cbnz	r2, 800b6aa <_dtoa_r+0xa62>
 800b668:	4601      	mov	r1, r0
 800b66a:	ee18 0a10 	vmov	r0, s16
 800b66e:	f000 fb67 	bl	800bd40 <__mcmp>
 800b672:	4602      	mov	r2, r0
 800b674:	4629      	mov	r1, r5
 800b676:	4620      	mov	r0, r4
 800b678:	9207      	str	r2, [sp, #28]
 800b67a:	f000 f91f 	bl	800b8bc <_Bfree>
 800b67e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b682:	ea43 0102 	orr.w	r1, r3, r2
 800b686:	9b04      	ldr	r3, [sp, #16]
 800b688:	430b      	orrs	r3, r1
 800b68a:	464d      	mov	r5, r9
 800b68c:	d10f      	bne.n	800b6ae <_dtoa_r+0xa66>
 800b68e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b692:	d02a      	beq.n	800b6ea <_dtoa_r+0xaa2>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	2b00      	cmp	r3, #0
 800b698:	dd02      	ble.n	800b6a0 <_dtoa_r+0xa58>
 800b69a:	9b02      	ldr	r3, [sp, #8]
 800b69c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b6a0:	f88b a000 	strb.w	sl, [fp]
 800b6a4:	e775      	b.n	800b592 <_dtoa_r+0x94a>
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	e7ba      	b.n	800b620 <_dtoa_r+0x9d8>
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	e7e2      	b.n	800b674 <_dtoa_r+0xa2c>
 800b6ae:	9b03      	ldr	r3, [sp, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	db04      	blt.n	800b6be <_dtoa_r+0xa76>
 800b6b4:	9906      	ldr	r1, [sp, #24]
 800b6b6:	430b      	orrs	r3, r1
 800b6b8:	9904      	ldr	r1, [sp, #16]
 800b6ba:	430b      	orrs	r3, r1
 800b6bc:	d122      	bne.n	800b704 <_dtoa_r+0xabc>
 800b6be:	2a00      	cmp	r2, #0
 800b6c0:	ddee      	ble.n	800b6a0 <_dtoa_r+0xa58>
 800b6c2:	ee18 1a10 	vmov	r1, s16
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f000 fac9 	bl	800bc60 <__lshift>
 800b6ce:	4631      	mov	r1, r6
 800b6d0:	ee08 0a10 	vmov	s16, r0
 800b6d4:	f000 fb34 	bl	800bd40 <__mcmp>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	dc03      	bgt.n	800b6e4 <_dtoa_r+0xa9c>
 800b6dc:	d1e0      	bne.n	800b6a0 <_dtoa_r+0xa58>
 800b6de:	f01a 0f01 	tst.w	sl, #1
 800b6e2:	d0dd      	beq.n	800b6a0 <_dtoa_r+0xa58>
 800b6e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6e8:	d1d7      	bne.n	800b69a <_dtoa_r+0xa52>
 800b6ea:	2339      	movs	r3, #57	; 0x39
 800b6ec:	f88b 3000 	strb.w	r3, [fp]
 800b6f0:	462b      	mov	r3, r5
 800b6f2:	461d      	mov	r5, r3
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b6fa:	2a39      	cmp	r2, #57	; 0x39
 800b6fc:	d071      	beq.n	800b7e2 <_dtoa_r+0xb9a>
 800b6fe:	3201      	adds	r2, #1
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	e746      	b.n	800b592 <_dtoa_r+0x94a>
 800b704:	2a00      	cmp	r2, #0
 800b706:	dd07      	ble.n	800b718 <_dtoa_r+0xad0>
 800b708:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b70c:	d0ed      	beq.n	800b6ea <_dtoa_r+0xaa2>
 800b70e:	f10a 0301 	add.w	r3, sl, #1
 800b712:	f88b 3000 	strb.w	r3, [fp]
 800b716:	e73c      	b.n	800b592 <_dtoa_r+0x94a>
 800b718:	9b05      	ldr	r3, [sp, #20]
 800b71a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b71e:	4599      	cmp	r9, r3
 800b720:	d047      	beq.n	800b7b2 <_dtoa_r+0xb6a>
 800b722:	ee18 1a10 	vmov	r1, s16
 800b726:	2300      	movs	r3, #0
 800b728:	220a      	movs	r2, #10
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 f8e8 	bl	800b900 <__multadd>
 800b730:	45b8      	cmp	r8, r7
 800b732:	ee08 0a10 	vmov	s16, r0
 800b736:	f04f 0300 	mov.w	r3, #0
 800b73a:	f04f 020a 	mov.w	r2, #10
 800b73e:	4641      	mov	r1, r8
 800b740:	4620      	mov	r0, r4
 800b742:	d106      	bne.n	800b752 <_dtoa_r+0xb0a>
 800b744:	f000 f8dc 	bl	800b900 <__multadd>
 800b748:	4680      	mov	r8, r0
 800b74a:	4607      	mov	r7, r0
 800b74c:	f109 0901 	add.w	r9, r9, #1
 800b750:	e772      	b.n	800b638 <_dtoa_r+0x9f0>
 800b752:	f000 f8d5 	bl	800b900 <__multadd>
 800b756:	4639      	mov	r1, r7
 800b758:	4680      	mov	r8, r0
 800b75a:	2300      	movs	r3, #0
 800b75c:	220a      	movs	r2, #10
 800b75e:	4620      	mov	r0, r4
 800b760:	f000 f8ce 	bl	800b900 <__multadd>
 800b764:	4607      	mov	r7, r0
 800b766:	e7f1      	b.n	800b74c <_dtoa_r+0xb04>
 800b768:	9b03      	ldr	r3, [sp, #12]
 800b76a:	9302      	str	r3, [sp, #8]
 800b76c:	9d01      	ldr	r5, [sp, #4]
 800b76e:	ee18 0a10 	vmov	r0, s16
 800b772:	4631      	mov	r1, r6
 800b774:	f7ff f9da 	bl	800ab2c <quorem>
 800b778:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b77c:	9b01      	ldr	r3, [sp, #4]
 800b77e:	f805 ab01 	strb.w	sl, [r5], #1
 800b782:	1aea      	subs	r2, r5, r3
 800b784:	9b02      	ldr	r3, [sp, #8]
 800b786:	4293      	cmp	r3, r2
 800b788:	dd09      	ble.n	800b79e <_dtoa_r+0xb56>
 800b78a:	ee18 1a10 	vmov	r1, s16
 800b78e:	2300      	movs	r3, #0
 800b790:	220a      	movs	r2, #10
 800b792:	4620      	mov	r0, r4
 800b794:	f000 f8b4 	bl	800b900 <__multadd>
 800b798:	ee08 0a10 	vmov	s16, r0
 800b79c:	e7e7      	b.n	800b76e <_dtoa_r+0xb26>
 800b79e:	9b02      	ldr	r3, [sp, #8]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	bfc8      	it	gt
 800b7a4:	461d      	movgt	r5, r3
 800b7a6:	9b01      	ldr	r3, [sp, #4]
 800b7a8:	bfd8      	it	le
 800b7aa:	2501      	movle	r5, #1
 800b7ac:	441d      	add	r5, r3
 800b7ae:	f04f 0800 	mov.w	r8, #0
 800b7b2:	ee18 1a10 	vmov	r1, s16
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 fa51 	bl	800bc60 <__lshift>
 800b7be:	4631      	mov	r1, r6
 800b7c0:	ee08 0a10 	vmov	s16, r0
 800b7c4:	f000 fabc 	bl	800bd40 <__mcmp>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	dc91      	bgt.n	800b6f0 <_dtoa_r+0xaa8>
 800b7cc:	d102      	bne.n	800b7d4 <_dtoa_r+0xb8c>
 800b7ce:	f01a 0f01 	tst.w	sl, #1
 800b7d2:	d18d      	bne.n	800b6f0 <_dtoa_r+0xaa8>
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	461d      	mov	r5, r3
 800b7d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7dc:	2a30      	cmp	r2, #48	; 0x30
 800b7de:	d0fa      	beq.n	800b7d6 <_dtoa_r+0xb8e>
 800b7e0:	e6d7      	b.n	800b592 <_dtoa_r+0x94a>
 800b7e2:	9a01      	ldr	r2, [sp, #4]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d184      	bne.n	800b6f2 <_dtoa_r+0xaaa>
 800b7e8:	9b00      	ldr	r3, [sp, #0]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	2331      	movs	r3, #49	; 0x31
 800b7f0:	7013      	strb	r3, [r2, #0]
 800b7f2:	e6ce      	b.n	800b592 <_dtoa_r+0x94a>
 800b7f4:	4b09      	ldr	r3, [pc, #36]	; (800b81c <_dtoa_r+0xbd4>)
 800b7f6:	f7ff ba95 	b.w	800ad24 <_dtoa_r+0xdc>
 800b7fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f47f aa6e 	bne.w	800acde <_dtoa_r+0x96>
 800b802:	4b07      	ldr	r3, [pc, #28]	; (800b820 <_dtoa_r+0xbd8>)
 800b804:	f7ff ba8e 	b.w	800ad24 <_dtoa_r+0xdc>
 800b808:	9b02      	ldr	r3, [sp, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	dcae      	bgt.n	800b76c <_dtoa_r+0xb24>
 800b80e:	9b06      	ldr	r3, [sp, #24]
 800b810:	2b02      	cmp	r3, #2
 800b812:	f73f aea8 	bgt.w	800b566 <_dtoa_r+0x91e>
 800b816:	e7a9      	b.n	800b76c <_dtoa_r+0xb24>
 800b818:	08010023 	.word	0x08010023
 800b81c:	0800ff80 	.word	0x0800ff80
 800b820:	0800ffa4 	.word	0x0800ffa4

0800b824 <_localeconv_r>:
 800b824:	4800      	ldr	r0, [pc, #0]	; (800b828 <_localeconv_r+0x4>)
 800b826:	4770      	bx	lr
 800b828:	200002e0 	.word	0x200002e0

0800b82c <malloc>:
 800b82c:	4b02      	ldr	r3, [pc, #8]	; (800b838 <malloc+0xc>)
 800b82e:	4601      	mov	r1, r0
 800b830:	6818      	ldr	r0, [r3, #0]
 800b832:	f000 bc09 	b.w	800c048 <_malloc_r>
 800b836:	bf00      	nop
 800b838:	2000018c 	.word	0x2000018c

0800b83c <_Balloc>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b840:	4604      	mov	r4, r0
 800b842:	460d      	mov	r5, r1
 800b844:	b976      	cbnz	r6, 800b864 <_Balloc+0x28>
 800b846:	2010      	movs	r0, #16
 800b848:	f7ff fff0 	bl	800b82c <malloc>
 800b84c:	4602      	mov	r2, r0
 800b84e:	6260      	str	r0, [r4, #36]	; 0x24
 800b850:	b920      	cbnz	r0, 800b85c <_Balloc+0x20>
 800b852:	4b18      	ldr	r3, [pc, #96]	; (800b8b4 <_Balloc+0x78>)
 800b854:	4818      	ldr	r0, [pc, #96]	; (800b8b8 <_Balloc+0x7c>)
 800b856:	2166      	movs	r1, #102	; 0x66
 800b858:	f000 fdd6 	bl	800c408 <__assert_func>
 800b85c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b860:	6006      	str	r6, [r0, #0]
 800b862:	60c6      	str	r6, [r0, #12]
 800b864:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b866:	68f3      	ldr	r3, [r6, #12]
 800b868:	b183      	cbz	r3, 800b88c <_Balloc+0x50>
 800b86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b872:	b9b8      	cbnz	r0, 800b8a4 <_Balloc+0x68>
 800b874:	2101      	movs	r1, #1
 800b876:	fa01 f605 	lsl.w	r6, r1, r5
 800b87a:	1d72      	adds	r2, r6, #5
 800b87c:	0092      	lsls	r2, r2, #2
 800b87e:	4620      	mov	r0, r4
 800b880:	f000 fb60 	bl	800bf44 <_calloc_r>
 800b884:	b160      	cbz	r0, 800b8a0 <_Balloc+0x64>
 800b886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b88a:	e00e      	b.n	800b8aa <_Balloc+0x6e>
 800b88c:	2221      	movs	r2, #33	; 0x21
 800b88e:	2104      	movs	r1, #4
 800b890:	4620      	mov	r0, r4
 800b892:	f000 fb57 	bl	800bf44 <_calloc_r>
 800b896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b898:	60f0      	str	r0, [r6, #12]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1e4      	bne.n	800b86a <_Balloc+0x2e>
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	6802      	ldr	r2, [r0, #0]
 800b8a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8b0:	e7f7      	b.n	800b8a2 <_Balloc+0x66>
 800b8b2:	bf00      	nop
 800b8b4:	0800ffb1 	.word	0x0800ffb1
 800b8b8:	08010034 	.word	0x08010034

0800b8bc <_Bfree>:
 800b8bc:	b570      	push	{r4, r5, r6, lr}
 800b8be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	b976      	cbnz	r6, 800b8e4 <_Bfree+0x28>
 800b8c6:	2010      	movs	r0, #16
 800b8c8:	f7ff ffb0 	bl	800b82c <malloc>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	6268      	str	r0, [r5, #36]	; 0x24
 800b8d0:	b920      	cbnz	r0, 800b8dc <_Bfree+0x20>
 800b8d2:	4b09      	ldr	r3, [pc, #36]	; (800b8f8 <_Bfree+0x3c>)
 800b8d4:	4809      	ldr	r0, [pc, #36]	; (800b8fc <_Bfree+0x40>)
 800b8d6:	218a      	movs	r1, #138	; 0x8a
 800b8d8:	f000 fd96 	bl	800c408 <__assert_func>
 800b8dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8e0:	6006      	str	r6, [r0, #0]
 800b8e2:	60c6      	str	r6, [r0, #12]
 800b8e4:	b13c      	cbz	r4, 800b8f6 <_Bfree+0x3a>
 800b8e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8e8:	6862      	ldr	r2, [r4, #4]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8f0:	6021      	str	r1, [r4, #0]
 800b8f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
 800b8f8:	0800ffb1 	.word	0x0800ffb1
 800b8fc:	08010034 	.word	0x08010034

0800b900 <__multadd>:
 800b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b904:	690d      	ldr	r5, [r1, #16]
 800b906:	4607      	mov	r7, r0
 800b908:	460c      	mov	r4, r1
 800b90a:	461e      	mov	r6, r3
 800b90c:	f101 0c14 	add.w	ip, r1, #20
 800b910:	2000      	movs	r0, #0
 800b912:	f8dc 3000 	ldr.w	r3, [ip]
 800b916:	b299      	uxth	r1, r3
 800b918:	fb02 6101 	mla	r1, r2, r1, r6
 800b91c:	0c1e      	lsrs	r6, r3, #16
 800b91e:	0c0b      	lsrs	r3, r1, #16
 800b920:	fb02 3306 	mla	r3, r2, r6, r3
 800b924:	b289      	uxth	r1, r1
 800b926:	3001      	adds	r0, #1
 800b928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b92c:	4285      	cmp	r5, r0
 800b92e:	f84c 1b04 	str.w	r1, [ip], #4
 800b932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b936:	dcec      	bgt.n	800b912 <__multadd+0x12>
 800b938:	b30e      	cbz	r6, 800b97e <__multadd+0x7e>
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	42ab      	cmp	r3, r5
 800b93e:	dc19      	bgt.n	800b974 <__multadd+0x74>
 800b940:	6861      	ldr	r1, [r4, #4]
 800b942:	4638      	mov	r0, r7
 800b944:	3101      	adds	r1, #1
 800b946:	f7ff ff79 	bl	800b83c <_Balloc>
 800b94a:	4680      	mov	r8, r0
 800b94c:	b928      	cbnz	r0, 800b95a <__multadd+0x5a>
 800b94e:	4602      	mov	r2, r0
 800b950:	4b0c      	ldr	r3, [pc, #48]	; (800b984 <__multadd+0x84>)
 800b952:	480d      	ldr	r0, [pc, #52]	; (800b988 <__multadd+0x88>)
 800b954:	21b5      	movs	r1, #181	; 0xb5
 800b956:	f000 fd57 	bl	800c408 <__assert_func>
 800b95a:	6922      	ldr	r2, [r4, #16]
 800b95c:	3202      	adds	r2, #2
 800b95e:	f104 010c 	add.w	r1, r4, #12
 800b962:	0092      	lsls	r2, r2, #2
 800b964:	300c      	adds	r0, #12
 800b966:	f7fe fc2d 	bl	800a1c4 <memcpy>
 800b96a:	4621      	mov	r1, r4
 800b96c:	4638      	mov	r0, r7
 800b96e:	f7ff ffa5 	bl	800b8bc <_Bfree>
 800b972:	4644      	mov	r4, r8
 800b974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b978:	3501      	adds	r5, #1
 800b97a:	615e      	str	r6, [r3, #20]
 800b97c:	6125      	str	r5, [r4, #16]
 800b97e:	4620      	mov	r0, r4
 800b980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b984:	08010023 	.word	0x08010023
 800b988:	08010034 	.word	0x08010034

0800b98c <__hi0bits>:
 800b98c:	0c03      	lsrs	r3, r0, #16
 800b98e:	041b      	lsls	r3, r3, #16
 800b990:	b9d3      	cbnz	r3, 800b9c8 <__hi0bits+0x3c>
 800b992:	0400      	lsls	r0, r0, #16
 800b994:	2310      	movs	r3, #16
 800b996:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b99a:	bf04      	itt	eq
 800b99c:	0200      	lsleq	r0, r0, #8
 800b99e:	3308      	addeq	r3, #8
 800b9a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9a4:	bf04      	itt	eq
 800b9a6:	0100      	lsleq	r0, r0, #4
 800b9a8:	3304      	addeq	r3, #4
 800b9aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b9ae:	bf04      	itt	eq
 800b9b0:	0080      	lsleq	r0, r0, #2
 800b9b2:	3302      	addeq	r3, #2
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	db05      	blt.n	800b9c4 <__hi0bits+0x38>
 800b9b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9bc:	f103 0301 	add.w	r3, r3, #1
 800b9c0:	bf08      	it	eq
 800b9c2:	2320      	moveq	r3, #32
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	4770      	bx	lr
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	e7e4      	b.n	800b996 <__hi0bits+0xa>

0800b9cc <__lo0bits>:
 800b9cc:	6803      	ldr	r3, [r0, #0]
 800b9ce:	f013 0207 	ands.w	r2, r3, #7
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	d00b      	beq.n	800b9ee <__lo0bits+0x22>
 800b9d6:	07da      	lsls	r2, r3, #31
 800b9d8:	d423      	bmi.n	800ba22 <__lo0bits+0x56>
 800b9da:	0798      	lsls	r0, r3, #30
 800b9dc:	bf49      	itett	mi
 800b9de:	085b      	lsrmi	r3, r3, #1
 800b9e0:	089b      	lsrpl	r3, r3, #2
 800b9e2:	2001      	movmi	r0, #1
 800b9e4:	600b      	strmi	r3, [r1, #0]
 800b9e6:	bf5c      	itt	pl
 800b9e8:	600b      	strpl	r3, [r1, #0]
 800b9ea:	2002      	movpl	r0, #2
 800b9ec:	4770      	bx	lr
 800b9ee:	b298      	uxth	r0, r3
 800b9f0:	b9a8      	cbnz	r0, 800ba1e <__lo0bits+0x52>
 800b9f2:	0c1b      	lsrs	r3, r3, #16
 800b9f4:	2010      	movs	r0, #16
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	b90a      	cbnz	r2, 800b9fe <__lo0bits+0x32>
 800b9fa:	3008      	adds	r0, #8
 800b9fc:	0a1b      	lsrs	r3, r3, #8
 800b9fe:	071a      	lsls	r2, r3, #28
 800ba00:	bf04      	itt	eq
 800ba02:	091b      	lsreq	r3, r3, #4
 800ba04:	3004      	addeq	r0, #4
 800ba06:	079a      	lsls	r2, r3, #30
 800ba08:	bf04      	itt	eq
 800ba0a:	089b      	lsreq	r3, r3, #2
 800ba0c:	3002      	addeq	r0, #2
 800ba0e:	07da      	lsls	r2, r3, #31
 800ba10:	d403      	bmi.n	800ba1a <__lo0bits+0x4e>
 800ba12:	085b      	lsrs	r3, r3, #1
 800ba14:	f100 0001 	add.w	r0, r0, #1
 800ba18:	d005      	beq.n	800ba26 <__lo0bits+0x5a>
 800ba1a:	600b      	str	r3, [r1, #0]
 800ba1c:	4770      	bx	lr
 800ba1e:	4610      	mov	r0, r2
 800ba20:	e7e9      	b.n	800b9f6 <__lo0bits+0x2a>
 800ba22:	2000      	movs	r0, #0
 800ba24:	4770      	bx	lr
 800ba26:	2020      	movs	r0, #32
 800ba28:	4770      	bx	lr
	...

0800ba2c <__i2b>:
 800ba2c:	b510      	push	{r4, lr}
 800ba2e:	460c      	mov	r4, r1
 800ba30:	2101      	movs	r1, #1
 800ba32:	f7ff ff03 	bl	800b83c <_Balloc>
 800ba36:	4602      	mov	r2, r0
 800ba38:	b928      	cbnz	r0, 800ba46 <__i2b+0x1a>
 800ba3a:	4b05      	ldr	r3, [pc, #20]	; (800ba50 <__i2b+0x24>)
 800ba3c:	4805      	ldr	r0, [pc, #20]	; (800ba54 <__i2b+0x28>)
 800ba3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba42:	f000 fce1 	bl	800c408 <__assert_func>
 800ba46:	2301      	movs	r3, #1
 800ba48:	6144      	str	r4, [r0, #20]
 800ba4a:	6103      	str	r3, [r0, #16]
 800ba4c:	bd10      	pop	{r4, pc}
 800ba4e:	bf00      	nop
 800ba50:	08010023 	.word	0x08010023
 800ba54:	08010034 	.word	0x08010034

0800ba58 <__multiply>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	4691      	mov	r9, r2
 800ba5e:	690a      	ldr	r2, [r1, #16]
 800ba60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	bfb8      	it	lt
 800ba68:	460b      	movlt	r3, r1
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	bfbc      	itt	lt
 800ba6e:	464c      	movlt	r4, r9
 800ba70:	4699      	movlt	r9, r3
 800ba72:	6927      	ldr	r7, [r4, #16]
 800ba74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba78:	68a3      	ldr	r3, [r4, #8]
 800ba7a:	6861      	ldr	r1, [r4, #4]
 800ba7c:	eb07 060a 	add.w	r6, r7, sl
 800ba80:	42b3      	cmp	r3, r6
 800ba82:	b085      	sub	sp, #20
 800ba84:	bfb8      	it	lt
 800ba86:	3101      	addlt	r1, #1
 800ba88:	f7ff fed8 	bl	800b83c <_Balloc>
 800ba8c:	b930      	cbnz	r0, 800ba9c <__multiply+0x44>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	4b44      	ldr	r3, [pc, #272]	; (800bba4 <__multiply+0x14c>)
 800ba92:	4845      	ldr	r0, [pc, #276]	; (800bba8 <__multiply+0x150>)
 800ba94:	f240 115d 	movw	r1, #349	; 0x15d
 800ba98:	f000 fcb6 	bl	800c408 <__assert_func>
 800ba9c:	f100 0514 	add.w	r5, r0, #20
 800baa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800baa4:	462b      	mov	r3, r5
 800baa6:	2200      	movs	r2, #0
 800baa8:	4543      	cmp	r3, r8
 800baaa:	d321      	bcc.n	800baf0 <__multiply+0x98>
 800baac:	f104 0314 	add.w	r3, r4, #20
 800bab0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bab4:	f109 0314 	add.w	r3, r9, #20
 800bab8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800babc:	9202      	str	r2, [sp, #8]
 800babe:	1b3a      	subs	r2, r7, r4
 800bac0:	3a15      	subs	r2, #21
 800bac2:	f022 0203 	bic.w	r2, r2, #3
 800bac6:	3204      	adds	r2, #4
 800bac8:	f104 0115 	add.w	r1, r4, #21
 800bacc:	428f      	cmp	r7, r1
 800bace:	bf38      	it	cc
 800bad0:	2204      	movcc	r2, #4
 800bad2:	9201      	str	r2, [sp, #4]
 800bad4:	9a02      	ldr	r2, [sp, #8]
 800bad6:	9303      	str	r3, [sp, #12]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d80c      	bhi.n	800baf6 <__multiply+0x9e>
 800badc:	2e00      	cmp	r6, #0
 800bade:	dd03      	ble.n	800bae8 <__multiply+0x90>
 800bae0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d05a      	beq.n	800bb9e <__multiply+0x146>
 800bae8:	6106      	str	r6, [r0, #16]
 800baea:	b005      	add	sp, #20
 800baec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf0:	f843 2b04 	str.w	r2, [r3], #4
 800baf4:	e7d8      	b.n	800baa8 <__multiply+0x50>
 800baf6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bafa:	f1ba 0f00 	cmp.w	sl, #0
 800bafe:	d024      	beq.n	800bb4a <__multiply+0xf2>
 800bb00:	f104 0e14 	add.w	lr, r4, #20
 800bb04:	46a9      	mov	r9, r5
 800bb06:	f04f 0c00 	mov.w	ip, #0
 800bb0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb0e:	f8d9 1000 	ldr.w	r1, [r9]
 800bb12:	fa1f fb82 	uxth.w	fp, r2
 800bb16:	b289      	uxth	r1, r1
 800bb18:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb20:	f8d9 2000 	ldr.w	r2, [r9]
 800bb24:	4461      	add	r1, ip
 800bb26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb2a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb32:	b289      	uxth	r1, r1
 800bb34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb38:	4577      	cmp	r7, lr
 800bb3a:	f849 1b04 	str.w	r1, [r9], #4
 800bb3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb42:	d8e2      	bhi.n	800bb0a <__multiply+0xb2>
 800bb44:	9a01      	ldr	r2, [sp, #4]
 800bb46:	f845 c002 	str.w	ip, [r5, r2]
 800bb4a:	9a03      	ldr	r2, [sp, #12]
 800bb4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb50:	3304      	adds	r3, #4
 800bb52:	f1b9 0f00 	cmp.w	r9, #0
 800bb56:	d020      	beq.n	800bb9a <__multiply+0x142>
 800bb58:	6829      	ldr	r1, [r5, #0]
 800bb5a:	f104 0c14 	add.w	ip, r4, #20
 800bb5e:	46ae      	mov	lr, r5
 800bb60:	f04f 0a00 	mov.w	sl, #0
 800bb64:	f8bc b000 	ldrh.w	fp, [ip]
 800bb68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb6c:	fb09 220b 	mla	r2, r9, fp, r2
 800bb70:	4492      	add	sl, r2
 800bb72:	b289      	uxth	r1, r1
 800bb74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bb78:	f84e 1b04 	str.w	r1, [lr], #4
 800bb7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb80:	f8be 1000 	ldrh.w	r1, [lr]
 800bb84:	0c12      	lsrs	r2, r2, #16
 800bb86:	fb09 1102 	mla	r1, r9, r2, r1
 800bb8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bb8e:	4567      	cmp	r7, ip
 800bb90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb94:	d8e6      	bhi.n	800bb64 <__multiply+0x10c>
 800bb96:	9a01      	ldr	r2, [sp, #4]
 800bb98:	50a9      	str	r1, [r5, r2]
 800bb9a:	3504      	adds	r5, #4
 800bb9c:	e79a      	b.n	800bad4 <__multiply+0x7c>
 800bb9e:	3e01      	subs	r6, #1
 800bba0:	e79c      	b.n	800badc <__multiply+0x84>
 800bba2:	bf00      	nop
 800bba4:	08010023 	.word	0x08010023
 800bba8:	08010034 	.word	0x08010034

0800bbac <__pow5mult>:
 800bbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb0:	4615      	mov	r5, r2
 800bbb2:	f012 0203 	ands.w	r2, r2, #3
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	460f      	mov	r7, r1
 800bbba:	d007      	beq.n	800bbcc <__pow5mult+0x20>
 800bbbc:	4c25      	ldr	r4, [pc, #148]	; (800bc54 <__pow5mult+0xa8>)
 800bbbe:	3a01      	subs	r2, #1
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbc6:	f7ff fe9b 	bl	800b900 <__multadd>
 800bbca:	4607      	mov	r7, r0
 800bbcc:	10ad      	asrs	r5, r5, #2
 800bbce:	d03d      	beq.n	800bc4c <__pow5mult+0xa0>
 800bbd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbd2:	b97c      	cbnz	r4, 800bbf4 <__pow5mult+0x48>
 800bbd4:	2010      	movs	r0, #16
 800bbd6:	f7ff fe29 	bl	800b82c <malloc>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	6270      	str	r0, [r6, #36]	; 0x24
 800bbde:	b928      	cbnz	r0, 800bbec <__pow5mult+0x40>
 800bbe0:	4b1d      	ldr	r3, [pc, #116]	; (800bc58 <__pow5mult+0xac>)
 800bbe2:	481e      	ldr	r0, [pc, #120]	; (800bc5c <__pow5mult+0xb0>)
 800bbe4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bbe8:	f000 fc0e 	bl	800c408 <__assert_func>
 800bbec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbf0:	6004      	str	r4, [r0, #0]
 800bbf2:	60c4      	str	r4, [r0, #12]
 800bbf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bbf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbfc:	b94c      	cbnz	r4, 800bc12 <__pow5mult+0x66>
 800bbfe:	f240 2171 	movw	r1, #625	; 0x271
 800bc02:	4630      	mov	r0, r6
 800bc04:	f7ff ff12 	bl	800ba2c <__i2b>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc0e:	4604      	mov	r4, r0
 800bc10:	6003      	str	r3, [r0, #0]
 800bc12:	f04f 0900 	mov.w	r9, #0
 800bc16:	07eb      	lsls	r3, r5, #31
 800bc18:	d50a      	bpl.n	800bc30 <__pow5mult+0x84>
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f7ff ff1a 	bl	800ba58 <__multiply>
 800bc24:	4639      	mov	r1, r7
 800bc26:	4680      	mov	r8, r0
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f7ff fe47 	bl	800b8bc <_Bfree>
 800bc2e:	4647      	mov	r7, r8
 800bc30:	106d      	asrs	r5, r5, #1
 800bc32:	d00b      	beq.n	800bc4c <__pow5mult+0xa0>
 800bc34:	6820      	ldr	r0, [r4, #0]
 800bc36:	b938      	cbnz	r0, 800bc48 <__pow5mult+0x9c>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff ff0b 	bl	800ba58 <__multiply>
 800bc42:	6020      	str	r0, [r4, #0]
 800bc44:	f8c0 9000 	str.w	r9, [r0]
 800bc48:	4604      	mov	r4, r0
 800bc4a:	e7e4      	b.n	800bc16 <__pow5mult+0x6a>
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc52:	bf00      	nop
 800bc54:	08010180 	.word	0x08010180
 800bc58:	0800ffb1 	.word	0x0800ffb1
 800bc5c:	08010034 	.word	0x08010034

0800bc60 <__lshift>:
 800bc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc64:	460c      	mov	r4, r1
 800bc66:	6849      	ldr	r1, [r1, #4]
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc6e:	68a3      	ldr	r3, [r4, #8]
 800bc70:	4607      	mov	r7, r0
 800bc72:	4691      	mov	r9, r2
 800bc74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc78:	f108 0601 	add.w	r6, r8, #1
 800bc7c:	42b3      	cmp	r3, r6
 800bc7e:	db0b      	blt.n	800bc98 <__lshift+0x38>
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff fddb 	bl	800b83c <_Balloc>
 800bc86:	4605      	mov	r5, r0
 800bc88:	b948      	cbnz	r0, 800bc9e <__lshift+0x3e>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	4b2a      	ldr	r3, [pc, #168]	; (800bd38 <__lshift+0xd8>)
 800bc8e:	482b      	ldr	r0, [pc, #172]	; (800bd3c <__lshift+0xdc>)
 800bc90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc94:	f000 fbb8 	bl	800c408 <__assert_func>
 800bc98:	3101      	adds	r1, #1
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	e7ee      	b.n	800bc7c <__lshift+0x1c>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f100 0114 	add.w	r1, r0, #20
 800bca4:	f100 0210 	add.w	r2, r0, #16
 800bca8:	4618      	mov	r0, r3
 800bcaa:	4553      	cmp	r3, sl
 800bcac:	db37      	blt.n	800bd1e <__lshift+0xbe>
 800bcae:	6920      	ldr	r0, [r4, #16]
 800bcb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcb4:	f104 0314 	add.w	r3, r4, #20
 800bcb8:	f019 091f 	ands.w	r9, r9, #31
 800bcbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bcc4:	d02f      	beq.n	800bd26 <__lshift+0xc6>
 800bcc6:	f1c9 0e20 	rsb	lr, r9, #32
 800bcca:	468a      	mov	sl, r1
 800bccc:	f04f 0c00 	mov.w	ip, #0
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	fa02 f209 	lsl.w	r2, r2, r9
 800bcd6:	ea42 020c 	orr.w	r2, r2, ip
 800bcda:	f84a 2b04 	str.w	r2, [sl], #4
 800bcde:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce2:	4298      	cmp	r0, r3
 800bce4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bce8:	d8f2      	bhi.n	800bcd0 <__lshift+0x70>
 800bcea:	1b03      	subs	r3, r0, r4
 800bcec:	3b15      	subs	r3, #21
 800bcee:	f023 0303 	bic.w	r3, r3, #3
 800bcf2:	3304      	adds	r3, #4
 800bcf4:	f104 0215 	add.w	r2, r4, #21
 800bcf8:	4290      	cmp	r0, r2
 800bcfa:	bf38      	it	cc
 800bcfc:	2304      	movcc	r3, #4
 800bcfe:	f841 c003 	str.w	ip, [r1, r3]
 800bd02:	f1bc 0f00 	cmp.w	ip, #0
 800bd06:	d001      	beq.n	800bd0c <__lshift+0xac>
 800bd08:	f108 0602 	add.w	r6, r8, #2
 800bd0c:	3e01      	subs	r6, #1
 800bd0e:	4638      	mov	r0, r7
 800bd10:	612e      	str	r6, [r5, #16]
 800bd12:	4621      	mov	r1, r4
 800bd14:	f7ff fdd2 	bl	800b8bc <_Bfree>
 800bd18:	4628      	mov	r0, r5
 800bd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd22:	3301      	adds	r3, #1
 800bd24:	e7c1      	b.n	800bcaa <__lshift+0x4a>
 800bd26:	3904      	subs	r1, #4
 800bd28:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd30:	4298      	cmp	r0, r3
 800bd32:	d8f9      	bhi.n	800bd28 <__lshift+0xc8>
 800bd34:	e7ea      	b.n	800bd0c <__lshift+0xac>
 800bd36:	bf00      	nop
 800bd38:	08010023 	.word	0x08010023
 800bd3c:	08010034 	.word	0x08010034

0800bd40 <__mcmp>:
 800bd40:	b530      	push	{r4, r5, lr}
 800bd42:	6902      	ldr	r2, [r0, #16]
 800bd44:	690c      	ldr	r4, [r1, #16]
 800bd46:	1b12      	subs	r2, r2, r4
 800bd48:	d10e      	bne.n	800bd68 <__mcmp+0x28>
 800bd4a:	f100 0314 	add.w	r3, r0, #20
 800bd4e:	3114      	adds	r1, #20
 800bd50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd60:	42a5      	cmp	r5, r4
 800bd62:	d003      	beq.n	800bd6c <__mcmp+0x2c>
 800bd64:	d305      	bcc.n	800bd72 <__mcmp+0x32>
 800bd66:	2201      	movs	r2, #1
 800bd68:	4610      	mov	r0, r2
 800bd6a:	bd30      	pop	{r4, r5, pc}
 800bd6c:	4283      	cmp	r3, r0
 800bd6e:	d3f3      	bcc.n	800bd58 <__mcmp+0x18>
 800bd70:	e7fa      	b.n	800bd68 <__mcmp+0x28>
 800bd72:	f04f 32ff 	mov.w	r2, #4294967295
 800bd76:	e7f7      	b.n	800bd68 <__mcmp+0x28>

0800bd78 <__mdiff>:
 800bd78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	4606      	mov	r6, r0
 800bd80:	4611      	mov	r1, r2
 800bd82:	4620      	mov	r0, r4
 800bd84:	4690      	mov	r8, r2
 800bd86:	f7ff ffdb 	bl	800bd40 <__mcmp>
 800bd8a:	1e05      	subs	r5, r0, #0
 800bd8c:	d110      	bne.n	800bdb0 <__mdiff+0x38>
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4630      	mov	r0, r6
 800bd92:	f7ff fd53 	bl	800b83c <_Balloc>
 800bd96:	b930      	cbnz	r0, 800bda6 <__mdiff+0x2e>
 800bd98:	4b3a      	ldr	r3, [pc, #232]	; (800be84 <__mdiff+0x10c>)
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	f240 2132 	movw	r1, #562	; 0x232
 800bda0:	4839      	ldr	r0, [pc, #228]	; (800be88 <__mdiff+0x110>)
 800bda2:	f000 fb31 	bl	800c408 <__assert_func>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb0:	bfa4      	itt	ge
 800bdb2:	4643      	movge	r3, r8
 800bdb4:	46a0      	movge	r8, r4
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bdbc:	bfa6      	itte	ge
 800bdbe:	461c      	movge	r4, r3
 800bdc0:	2500      	movge	r5, #0
 800bdc2:	2501      	movlt	r5, #1
 800bdc4:	f7ff fd3a 	bl	800b83c <_Balloc>
 800bdc8:	b920      	cbnz	r0, 800bdd4 <__mdiff+0x5c>
 800bdca:	4b2e      	ldr	r3, [pc, #184]	; (800be84 <__mdiff+0x10c>)
 800bdcc:	4602      	mov	r2, r0
 800bdce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bdd2:	e7e5      	b.n	800bda0 <__mdiff+0x28>
 800bdd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdd8:	6926      	ldr	r6, [r4, #16]
 800bdda:	60c5      	str	r5, [r0, #12]
 800bddc:	f104 0914 	add.w	r9, r4, #20
 800bde0:	f108 0514 	add.w	r5, r8, #20
 800bde4:	f100 0e14 	add.w	lr, r0, #20
 800bde8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bdec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bdf0:	f108 0210 	add.w	r2, r8, #16
 800bdf4:	46f2      	mov	sl, lr
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bdfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be00:	fa1f f883 	uxth.w	r8, r3
 800be04:	fa11 f18b 	uxtah	r1, r1, fp
 800be08:	0c1b      	lsrs	r3, r3, #16
 800be0a:	eba1 0808 	sub.w	r8, r1, r8
 800be0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be16:	fa1f f888 	uxth.w	r8, r8
 800be1a:	1419      	asrs	r1, r3, #16
 800be1c:	454e      	cmp	r6, r9
 800be1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be22:	f84a 3b04 	str.w	r3, [sl], #4
 800be26:	d8e7      	bhi.n	800bdf8 <__mdiff+0x80>
 800be28:	1b33      	subs	r3, r6, r4
 800be2a:	3b15      	subs	r3, #21
 800be2c:	f023 0303 	bic.w	r3, r3, #3
 800be30:	3304      	adds	r3, #4
 800be32:	3415      	adds	r4, #21
 800be34:	42a6      	cmp	r6, r4
 800be36:	bf38      	it	cc
 800be38:	2304      	movcc	r3, #4
 800be3a:	441d      	add	r5, r3
 800be3c:	4473      	add	r3, lr
 800be3e:	469e      	mov	lr, r3
 800be40:	462e      	mov	r6, r5
 800be42:	4566      	cmp	r6, ip
 800be44:	d30e      	bcc.n	800be64 <__mdiff+0xec>
 800be46:	f10c 0203 	add.w	r2, ip, #3
 800be4a:	1b52      	subs	r2, r2, r5
 800be4c:	f022 0203 	bic.w	r2, r2, #3
 800be50:	3d03      	subs	r5, #3
 800be52:	45ac      	cmp	ip, r5
 800be54:	bf38      	it	cc
 800be56:	2200      	movcc	r2, #0
 800be58:	441a      	add	r2, r3
 800be5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be5e:	b17b      	cbz	r3, 800be80 <__mdiff+0x108>
 800be60:	6107      	str	r7, [r0, #16]
 800be62:	e7a3      	b.n	800bdac <__mdiff+0x34>
 800be64:	f856 8b04 	ldr.w	r8, [r6], #4
 800be68:	fa11 f288 	uxtah	r2, r1, r8
 800be6c:	1414      	asrs	r4, r2, #16
 800be6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be72:	b292      	uxth	r2, r2
 800be74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be78:	f84e 2b04 	str.w	r2, [lr], #4
 800be7c:	1421      	asrs	r1, r4, #16
 800be7e:	e7e0      	b.n	800be42 <__mdiff+0xca>
 800be80:	3f01      	subs	r7, #1
 800be82:	e7ea      	b.n	800be5a <__mdiff+0xe2>
 800be84:	08010023 	.word	0x08010023
 800be88:	08010034 	.word	0x08010034

0800be8c <__d2b>:
 800be8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be90:	4689      	mov	r9, r1
 800be92:	2101      	movs	r1, #1
 800be94:	ec57 6b10 	vmov	r6, r7, d0
 800be98:	4690      	mov	r8, r2
 800be9a:	f7ff fccf 	bl	800b83c <_Balloc>
 800be9e:	4604      	mov	r4, r0
 800bea0:	b930      	cbnz	r0, 800beb0 <__d2b+0x24>
 800bea2:	4602      	mov	r2, r0
 800bea4:	4b25      	ldr	r3, [pc, #148]	; (800bf3c <__d2b+0xb0>)
 800bea6:	4826      	ldr	r0, [pc, #152]	; (800bf40 <__d2b+0xb4>)
 800bea8:	f240 310a 	movw	r1, #778	; 0x30a
 800beac:	f000 faac 	bl	800c408 <__assert_func>
 800beb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800beb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800beb8:	bb35      	cbnz	r5, 800bf08 <__d2b+0x7c>
 800beba:	2e00      	cmp	r6, #0
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	d028      	beq.n	800bf12 <__d2b+0x86>
 800bec0:	4668      	mov	r0, sp
 800bec2:	9600      	str	r6, [sp, #0]
 800bec4:	f7ff fd82 	bl	800b9cc <__lo0bits>
 800bec8:	9900      	ldr	r1, [sp, #0]
 800beca:	b300      	cbz	r0, 800bf0e <__d2b+0x82>
 800becc:	9a01      	ldr	r2, [sp, #4]
 800bece:	f1c0 0320 	rsb	r3, r0, #32
 800bed2:	fa02 f303 	lsl.w	r3, r2, r3
 800bed6:	430b      	orrs	r3, r1
 800bed8:	40c2      	lsrs	r2, r0
 800beda:	6163      	str	r3, [r4, #20]
 800bedc:	9201      	str	r2, [sp, #4]
 800bede:	9b01      	ldr	r3, [sp, #4]
 800bee0:	61a3      	str	r3, [r4, #24]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	bf14      	ite	ne
 800bee6:	2202      	movne	r2, #2
 800bee8:	2201      	moveq	r2, #1
 800beea:	6122      	str	r2, [r4, #16]
 800beec:	b1d5      	cbz	r5, 800bf24 <__d2b+0x98>
 800beee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bef2:	4405      	add	r5, r0
 800bef4:	f8c9 5000 	str.w	r5, [r9]
 800bef8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800befc:	f8c8 0000 	str.w	r0, [r8]
 800bf00:	4620      	mov	r0, r4
 800bf02:	b003      	add	sp, #12
 800bf04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf0c:	e7d5      	b.n	800beba <__d2b+0x2e>
 800bf0e:	6161      	str	r1, [r4, #20]
 800bf10:	e7e5      	b.n	800bede <__d2b+0x52>
 800bf12:	a801      	add	r0, sp, #4
 800bf14:	f7ff fd5a 	bl	800b9cc <__lo0bits>
 800bf18:	9b01      	ldr	r3, [sp, #4]
 800bf1a:	6163      	str	r3, [r4, #20]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	6122      	str	r2, [r4, #16]
 800bf20:	3020      	adds	r0, #32
 800bf22:	e7e3      	b.n	800beec <__d2b+0x60>
 800bf24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf2c:	f8c9 0000 	str.w	r0, [r9]
 800bf30:	6918      	ldr	r0, [r3, #16]
 800bf32:	f7ff fd2b 	bl	800b98c <__hi0bits>
 800bf36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf3a:	e7df      	b.n	800befc <__d2b+0x70>
 800bf3c:	08010023 	.word	0x08010023
 800bf40:	08010034 	.word	0x08010034

0800bf44 <_calloc_r>:
 800bf44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf46:	fba1 2402 	umull	r2, r4, r1, r2
 800bf4a:	b94c      	cbnz	r4, 800bf60 <_calloc_r+0x1c>
 800bf4c:	4611      	mov	r1, r2
 800bf4e:	9201      	str	r2, [sp, #4]
 800bf50:	f000 f87a 	bl	800c048 <_malloc_r>
 800bf54:	9a01      	ldr	r2, [sp, #4]
 800bf56:	4605      	mov	r5, r0
 800bf58:	b930      	cbnz	r0, 800bf68 <_calloc_r+0x24>
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	b003      	add	sp, #12
 800bf5e:	bd30      	pop	{r4, r5, pc}
 800bf60:	220c      	movs	r2, #12
 800bf62:	6002      	str	r2, [r0, #0]
 800bf64:	2500      	movs	r5, #0
 800bf66:	e7f8      	b.n	800bf5a <_calloc_r+0x16>
 800bf68:	4621      	mov	r1, r4
 800bf6a:	f7fe f939 	bl	800a1e0 <memset>
 800bf6e:	e7f4      	b.n	800bf5a <_calloc_r+0x16>

0800bf70 <_free_r>:
 800bf70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf72:	2900      	cmp	r1, #0
 800bf74:	d044      	beq.n	800c000 <_free_r+0x90>
 800bf76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf7a:	9001      	str	r0, [sp, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f1a1 0404 	sub.w	r4, r1, #4
 800bf82:	bfb8      	it	lt
 800bf84:	18e4      	addlt	r4, r4, r3
 800bf86:	f000 fa9b 	bl	800c4c0 <__malloc_lock>
 800bf8a:	4a1e      	ldr	r2, [pc, #120]	; (800c004 <_free_r+0x94>)
 800bf8c:	9801      	ldr	r0, [sp, #4]
 800bf8e:	6813      	ldr	r3, [r2, #0]
 800bf90:	b933      	cbnz	r3, 800bfa0 <_free_r+0x30>
 800bf92:	6063      	str	r3, [r4, #4]
 800bf94:	6014      	str	r4, [r2, #0]
 800bf96:	b003      	add	sp, #12
 800bf98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf9c:	f000 ba96 	b.w	800c4cc <__malloc_unlock>
 800bfa0:	42a3      	cmp	r3, r4
 800bfa2:	d908      	bls.n	800bfb6 <_free_r+0x46>
 800bfa4:	6825      	ldr	r5, [r4, #0]
 800bfa6:	1961      	adds	r1, r4, r5
 800bfa8:	428b      	cmp	r3, r1
 800bfaa:	bf01      	itttt	eq
 800bfac:	6819      	ldreq	r1, [r3, #0]
 800bfae:	685b      	ldreq	r3, [r3, #4]
 800bfb0:	1949      	addeq	r1, r1, r5
 800bfb2:	6021      	streq	r1, [r4, #0]
 800bfb4:	e7ed      	b.n	800bf92 <_free_r+0x22>
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	b10b      	cbz	r3, 800bfc0 <_free_r+0x50>
 800bfbc:	42a3      	cmp	r3, r4
 800bfbe:	d9fa      	bls.n	800bfb6 <_free_r+0x46>
 800bfc0:	6811      	ldr	r1, [r2, #0]
 800bfc2:	1855      	adds	r5, r2, r1
 800bfc4:	42a5      	cmp	r5, r4
 800bfc6:	d10b      	bne.n	800bfe0 <_free_r+0x70>
 800bfc8:	6824      	ldr	r4, [r4, #0]
 800bfca:	4421      	add	r1, r4
 800bfcc:	1854      	adds	r4, r2, r1
 800bfce:	42a3      	cmp	r3, r4
 800bfd0:	6011      	str	r1, [r2, #0]
 800bfd2:	d1e0      	bne.n	800bf96 <_free_r+0x26>
 800bfd4:	681c      	ldr	r4, [r3, #0]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	6053      	str	r3, [r2, #4]
 800bfda:	4421      	add	r1, r4
 800bfdc:	6011      	str	r1, [r2, #0]
 800bfde:	e7da      	b.n	800bf96 <_free_r+0x26>
 800bfe0:	d902      	bls.n	800bfe8 <_free_r+0x78>
 800bfe2:	230c      	movs	r3, #12
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	e7d6      	b.n	800bf96 <_free_r+0x26>
 800bfe8:	6825      	ldr	r5, [r4, #0]
 800bfea:	1961      	adds	r1, r4, r5
 800bfec:	428b      	cmp	r3, r1
 800bfee:	bf04      	itt	eq
 800bff0:	6819      	ldreq	r1, [r3, #0]
 800bff2:	685b      	ldreq	r3, [r3, #4]
 800bff4:	6063      	str	r3, [r4, #4]
 800bff6:	bf04      	itt	eq
 800bff8:	1949      	addeq	r1, r1, r5
 800bffa:	6021      	streq	r1, [r4, #0]
 800bffc:	6054      	str	r4, [r2, #4]
 800bffe:	e7ca      	b.n	800bf96 <_free_r+0x26>
 800c000:	b003      	add	sp, #12
 800c002:	bd30      	pop	{r4, r5, pc}
 800c004:	20000b40 	.word	0x20000b40

0800c008 <sbrk_aligned>:
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	4e0e      	ldr	r6, [pc, #56]	; (800c044 <sbrk_aligned+0x3c>)
 800c00c:	460c      	mov	r4, r1
 800c00e:	6831      	ldr	r1, [r6, #0]
 800c010:	4605      	mov	r5, r0
 800c012:	b911      	cbnz	r1, 800c01a <sbrk_aligned+0x12>
 800c014:	f000 f9e8 	bl	800c3e8 <_sbrk_r>
 800c018:	6030      	str	r0, [r6, #0]
 800c01a:	4621      	mov	r1, r4
 800c01c:	4628      	mov	r0, r5
 800c01e:	f000 f9e3 	bl	800c3e8 <_sbrk_r>
 800c022:	1c43      	adds	r3, r0, #1
 800c024:	d00a      	beq.n	800c03c <sbrk_aligned+0x34>
 800c026:	1cc4      	adds	r4, r0, #3
 800c028:	f024 0403 	bic.w	r4, r4, #3
 800c02c:	42a0      	cmp	r0, r4
 800c02e:	d007      	beq.n	800c040 <sbrk_aligned+0x38>
 800c030:	1a21      	subs	r1, r4, r0
 800c032:	4628      	mov	r0, r5
 800c034:	f000 f9d8 	bl	800c3e8 <_sbrk_r>
 800c038:	3001      	adds	r0, #1
 800c03a:	d101      	bne.n	800c040 <sbrk_aligned+0x38>
 800c03c:	f04f 34ff 	mov.w	r4, #4294967295
 800c040:	4620      	mov	r0, r4
 800c042:	bd70      	pop	{r4, r5, r6, pc}
 800c044:	20000b44 	.word	0x20000b44

0800c048 <_malloc_r>:
 800c048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04c:	1ccd      	adds	r5, r1, #3
 800c04e:	f025 0503 	bic.w	r5, r5, #3
 800c052:	3508      	adds	r5, #8
 800c054:	2d0c      	cmp	r5, #12
 800c056:	bf38      	it	cc
 800c058:	250c      	movcc	r5, #12
 800c05a:	2d00      	cmp	r5, #0
 800c05c:	4607      	mov	r7, r0
 800c05e:	db01      	blt.n	800c064 <_malloc_r+0x1c>
 800c060:	42a9      	cmp	r1, r5
 800c062:	d905      	bls.n	800c070 <_malloc_r+0x28>
 800c064:	230c      	movs	r3, #12
 800c066:	603b      	str	r3, [r7, #0]
 800c068:	2600      	movs	r6, #0
 800c06a:	4630      	mov	r0, r6
 800c06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c070:	4e2e      	ldr	r6, [pc, #184]	; (800c12c <_malloc_r+0xe4>)
 800c072:	f000 fa25 	bl	800c4c0 <__malloc_lock>
 800c076:	6833      	ldr	r3, [r6, #0]
 800c078:	461c      	mov	r4, r3
 800c07a:	bb34      	cbnz	r4, 800c0ca <_malloc_r+0x82>
 800c07c:	4629      	mov	r1, r5
 800c07e:	4638      	mov	r0, r7
 800c080:	f7ff ffc2 	bl	800c008 <sbrk_aligned>
 800c084:	1c43      	adds	r3, r0, #1
 800c086:	4604      	mov	r4, r0
 800c088:	d14d      	bne.n	800c126 <_malloc_r+0xde>
 800c08a:	6834      	ldr	r4, [r6, #0]
 800c08c:	4626      	mov	r6, r4
 800c08e:	2e00      	cmp	r6, #0
 800c090:	d140      	bne.n	800c114 <_malloc_r+0xcc>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	4631      	mov	r1, r6
 800c096:	4638      	mov	r0, r7
 800c098:	eb04 0803 	add.w	r8, r4, r3
 800c09c:	f000 f9a4 	bl	800c3e8 <_sbrk_r>
 800c0a0:	4580      	cmp	r8, r0
 800c0a2:	d13a      	bne.n	800c11a <_malloc_r+0xd2>
 800c0a4:	6821      	ldr	r1, [r4, #0]
 800c0a6:	3503      	adds	r5, #3
 800c0a8:	1a6d      	subs	r5, r5, r1
 800c0aa:	f025 0503 	bic.w	r5, r5, #3
 800c0ae:	3508      	adds	r5, #8
 800c0b0:	2d0c      	cmp	r5, #12
 800c0b2:	bf38      	it	cc
 800c0b4:	250c      	movcc	r5, #12
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f7ff ffa5 	bl	800c008 <sbrk_aligned>
 800c0be:	3001      	adds	r0, #1
 800c0c0:	d02b      	beq.n	800c11a <_malloc_r+0xd2>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	442b      	add	r3, r5
 800c0c6:	6023      	str	r3, [r4, #0]
 800c0c8:	e00e      	b.n	800c0e8 <_malloc_r+0xa0>
 800c0ca:	6822      	ldr	r2, [r4, #0]
 800c0cc:	1b52      	subs	r2, r2, r5
 800c0ce:	d41e      	bmi.n	800c10e <_malloc_r+0xc6>
 800c0d0:	2a0b      	cmp	r2, #11
 800c0d2:	d916      	bls.n	800c102 <_malloc_r+0xba>
 800c0d4:	1961      	adds	r1, r4, r5
 800c0d6:	42a3      	cmp	r3, r4
 800c0d8:	6025      	str	r5, [r4, #0]
 800c0da:	bf18      	it	ne
 800c0dc:	6059      	strne	r1, [r3, #4]
 800c0de:	6863      	ldr	r3, [r4, #4]
 800c0e0:	bf08      	it	eq
 800c0e2:	6031      	streq	r1, [r6, #0]
 800c0e4:	5162      	str	r2, [r4, r5]
 800c0e6:	604b      	str	r3, [r1, #4]
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	f104 060b 	add.w	r6, r4, #11
 800c0ee:	f000 f9ed 	bl	800c4cc <__malloc_unlock>
 800c0f2:	f026 0607 	bic.w	r6, r6, #7
 800c0f6:	1d23      	adds	r3, r4, #4
 800c0f8:	1af2      	subs	r2, r6, r3
 800c0fa:	d0b6      	beq.n	800c06a <_malloc_r+0x22>
 800c0fc:	1b9b      	subs	r3, r3, r6
 800c0fe:	50a3      	str	r3, [r4, r2]
 800c100:	e7b3      	b.n	800c06a <_malloc_r+0x22>
 800c102:	6862      	ldr	r2, [r4, #4]
 800c104:	42a3      	cmp	r3, r4
 800c106:	bf0c      	ite	eq
 800c108:	6032      	streq	r2, [r6, #0]
 800c10a:	605a      	strne	r2, [r3, #4]
 800c10c:	e7ec      	b.n	800c0e8 <_malloc_r+0xa0>
 800c10e:	4623      	mov	r3, r4
 800c110:	6864      	ldr	r4, [r4, #4]
 800c112:	e7b2      	b.n	800c07a <_malloc_r+0x32>
 800c114:	4634      	mov	r4, r6
 800c116:	6876      	ldr	r6, [r6, #4]
 800c118:	e7b9      	b.n	800c08e <_malloc_r+0x46>
 800c11a:	230c      	movs	r3, #12
 800c11c:	603b      	str	r3, [r7, #0]
 800c11e:	4638      	mov	r0, r7
 800c120:	f000 f9d4 	bl	800c4cc <__malloc_unlock>
 800c124:	e7a1      	b.n	800c06a <_malloc_r+0x22>
 800c126:	6025      	str	r5, [r4, #0]
 800c128:	e7de      	b.n	800c0e8 <_malloc_r+0xa0>
 800c12a:	bf00      	nop
 800c12c:	20000b40 	.word	0x20000b40

0800c130 <__ssputs_r>:
 800c130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c134:	688e      	ldr	r6, [r1, #8]
 800c136:	429e      	cmp	r6, r3
 800c138:	4682      	mov	sl, r0
 800c13a:	460c      	mov	r4, r1
 800c13c:	4690      	mov	r8, r2
 800c13e:	461f      	mov	r7, r3
 800c140:	d838      	bhi.n	800c1b4 <__ssputs_r+0x84>
 800c142:	898a      	ldrh	r2, [r1, #12]
 800c144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c148:	d032      	beq.n	800c1b0 <__ssputs_r+0x80>
 800c14a:	6825      	ldr	r5, [r4, #0]
 800c14c:	6909      	ldr	r1, [r1, #16]
 800c14e:	eba5 0901 	sub.w	r9, r5, r1
 800c152:	6965      	ldr	r5, [r4, #20]
 800c154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c15c:	3301      	adds	r3, #1
 800c15e:	444b      	add	r3, r9
 800c160:	106d      	asrs	r5, r5, #1
 800c162:	429d      	cmp	r5, r3
 800c164:	bf38      	it	cc
 800c166:	461d      	movcc	r5, r3
 800c168:	0553      	lsls	r3, r2, #21
 800c16a:	d531      	bpl.n	800c1d0 <__ssputs_r+0xa0>
 800c16c:	4629      	mov	r1, r5
 800c16e:	f7ff ff6b 	bl	800c048 <_malloc_r>
 800c172:	4606      	mov	r6, r0
 800c174:	b950      	cbnz	r0, 800c18c <__ssputs_r+0x5c>
 800c176:	230c      	movs	r3, #12
 800c178:	f8ca 3000 	str.w	r3, [sl]
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18c:	6921      	ldr	r1, [r4, #16]
 800c18e:	464a      	mov	r2, r9
 800c190:	f7fe f818 	bl	800a1c4 <memcpy>
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c19a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c19e:	81a3      	strh	r3, [r4, #12]
 800c1a0:	6126      	str	r6, [r4, #16]
 800c1a2:	6165      	str	r5, [r4, #20]
 800c1a4:	444e      	add	r6, r9
 800c1a6:	eba5 0509 	sub.w	r5, r5, r9
 800c1aa:	6026      	str	r6, [r4, #0]
 800c1ac:	60a5      	str	r5, [r4, #8]
 800c1ae:	463e      	mov	r6, r7
 800c1b0:	42be      	cmp	r6, r7
 800c1b2:	d900      	bls.n	800c1b6 <__ssputs_r+0x86>
 800c1b4:	463e      	mov	r6, r7
 800c1b6:	6820      	ldr	r0, [r4, #0]
 800c1b8:	4632      	mov	r2, r6
 800c1ba:	4641      	mov	r1, r8
 800c1bc:	f000 f966 	bl	800c48c <memmove>
 800c1c0:	68a3      	ldr	r3, [r4, #8]
 800c1c2:	1b9b      	subs	r3, r3, r6
 800c1c4:	60a3      	str	r3, [r4, #8]
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	4433      	add	r3, r6
 800c1ca:	6023      	str	r3, [r4, #0]
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	e7db      	b.n	800c188 <__ssputs_r+0x58>
 800c1d0:	462a      	mov	r2, r5
 800c1d2:	f000 f981 	bl	800c4d8 <_realloc_r>
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d1e1      	bne.n	800c1a0 <__ssputs_r+0x70>
 800c1dc:	6921      	ldr	r1, [r4, #16]
 800c1de:	4650      	mov	r0, sl
 800c1e0:	f7ff fec6 	bl	800bf70 <_free_r>
 800c1e4:	e7c7      	b.n	800c176 <__ssputs_r+0x46>
	...

0800c1e8 <_svfiprintf_r>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	4698      	mov	r8, r3
 800c1ee:	898b      	ldrh	r3, [r1, #12]
 800c1f0:	061b      	lsls	r3, r3, #24
 800c1f2:	b09d      	sub	sp, #116	; 0x74
 800c1f4:	4607      	mov	r7, r0
 800c1f6:	460d      	mov	r5, r1
 800c1f8:	4614      	mov	r4, r2
 800c1fa:	d50e      	bpl.n	800c21a <_svfiprintf_r+0x32>
 800c1fc:	690b      	ldr	r3, [r1, #16]
 800c1fe:	b963      	cbnz	r3, 800c21a <_svfiprintf_r+0x32>
 800c200:	2140      	movs	r1, #64	; 0x40
 800c202:	f7ff ff21 	bl	800c048 <_malloc_r>
 800c206:	6028      	str	r0, [r5, #0]
 800c208:	6128      	str	r0, [r5, #16]
 800c20a:	b920      	cbnz	r0, 800c216 <_svfiprintf_r+0x2e>
 800c20c:	230c      	movs	r3, #12
 800c20e:	603b      	str	r3, [r7, #0]
 800c210:	f04f 30ff 	mov.w	r0, #4294967295
 800c214:	e0d1      	b.n	800c3ba <_svfiprintf_r+0x1d2>
 800c216:	2340      	movs	r3, #64	; 0x40
 800c218:	616b      	str	r3, [r5, #20]
 800c21a:	2300      	movs	r3, #0
 800c21c:	9309      	str	r3, [sp, #36]	; 0x24
 800c21e:	2320      	movs	r3, #32
 800c220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c224:	f8cd 800c 	str.w	r8, [sp, #12]
 800c228:	2330      	movs	r3, #48	; 0x30
 800c22a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3d4 <_svfiprintf_r+0x1ec>
 800c22e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c232:	f04f 0901 	mov.w	r9, #1
 800c236:	4623      	mov	r3, r4
 800c238:	469a      	mov	sl, r3
 800c23a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c23e:	b10a      	cbz	r2, 800c244 <_svfiprintf_r+0x5c>
 800c240:	2a25      	cmp	r2, #37	; 0x25
 800c242:	d1f9      	bne.n	800c238 <_svfiprintf_r+0x50>
 800c244:	ebba 0b04 	subs.w	fp, sl, r4
 800c248:	d00b      	beq.n	800c262 <_svfiprintf_r+0x7a>
 800c24a:	465b      	mov	r3, fp
 800c24c:	4622      	mov	r2, r4
 800c24e:	4629      	mov	r1, r5
 800c250:	4638      	mov	r0, r7
 800c252:	f7ff ff6d 	bl	800c130 <__ssputs_r>
 800c256:	3001      	adds	r0, #1
 800c258:	f000 80aa 	beq.w	800c3b0 <_svfiprintf_r+0x1c8>
 800c25c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c25e:	445a      	add	r2, fp
 800c260:	9209      	str	r2, [sp, #36]	; 0x24
 800c262:	f89a 3000 	ldrb.w	r3, [sl]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f000 80a2 	beq.w	800c3b0 <_svfiprintf_r+0x1c8>
 800c26c:	2300      	movs	r3, #0
 800c26e:	f04f 32ff 	mov.w	r2, #4294967295
 800c272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c276:	f10a 0a01 	add.w	sl, sl, #1
 800c27a:	9304      	str	r3, [sp, #16]
 800c27c:	9307      	str	r3, [sp, #28]
 800c27e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c282:	931a      	str	r3, [sp, #104]	; 0x68
 800c284:	4654      	mov	r4, sl
 800c286:	2205      	movs	r2, #5
 800c288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c28c:	4851      	ldr	r0, [pc, #324]	; (800c3d4 <_svfiprintf_r+0x1ec>)
 800c28e:	f7f3 ffa7 	bl	80001e0 <memchr>
 800c292:	9a04      	ldr	r2, [sp, #16]
 800c294:	b9d8      	cbnz	r0, 800c2ce <_svfiprintf_r+0xe6>
 800c296:	06d0      	lsls	r0, r2, #27
 800c298:	bf44      	itt	mi
 800c29a:	2320      	movmi	r3, #32
 800c29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a0:	0711      	lsls	r1, r2, #28
 800c2a2:	bf44      	itt	mi
 800c2a4:	232b      	movmi	r3, #43	; 0x2b
 800c2a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c2b0:	d015      	beq.n	800c2de <_svfiprintf_r+0xf6>
 800c2b2:	9a07      	ldr	r2, [sp, #28]
 800c2b4:	4654      	mov	r4, sl
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	f04f 0c0a 	mov.w	ip, #10
 800c2bc:	4621      	mov	r1, r4
 800c2be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2c2:	3b30      	subs	r3, #48	; 0x30
 800c2c4:	2b09      	cmp	r3, #9
 800c2c6:	d94e      	bls.n	800c366 <_svfiprintf_r+0x17e>
 800c2c8:	b1b0      	cbz	r0, 800c2f8 <_svfiprintf_r+0x110>
 800c2ca:	9207      	str	r2, [sp, #28]
 800c2cc:	e014      	b.n	800c2f8 <_svfiprintf_r+0x110>
 800c2ce:	eba0 0308 	sub.w	r3, r0, r8
 800c2d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	9304      	str	r3, [sp, #16]
 800c2da:	46a2      	mov	sl, r4
 800c2dc:	e7d2      	b.n	800c284 <_svfiprintf_r+0x9c>
 800c2de:	9b03      	ldr	r3, [sp, #12]
 800c2e0:	1d19      	adds	r1, r3, #4
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	9103      	str	r1, [sp, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	bfbb      	ittet	lt
 800c2ea:	425b      	neglt	r3, r3
 800c2ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c2f0:	9307      	strge	r3, [sp, #28]
 800c2f2:	9307      	strlt	r3, [sp, #28]
 800c2f4:	bfb8      	it	lt
 800c2f6:	9204      	strlt	r2, [sp, #16]
 800c2f8:	7823      	ldrb	r3, [r4, #0]
 800c2fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c2fc:	d10c      	bne.n	800c318 <_svfiprintf_r+0x130>
 800c2fe:	7863      	ldrb	r3, [r4, #1]
 800c300:	2b2a      	cmp	r3, #42	; 0x2a
 800c302:	d135      	bne.n	800c370 <_svfiprintf_r+0x188>
 800c304:	9b03      	ldr	r3, [sp, #12]
 800c306:	1d1a      	adds	r2, r3, #4
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	9203      	str	r2, [sp, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	bfb8      	it	lt
 800c310:	f04f 33ff 	movlt.w	r3, #4294967295
 800c314:	3402      	adds	r4, #2
 800c316:	9305      	str	r3, [sp, #20]
 800c318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3e4 <_svfiprintf_r+0x1fc>
 800c31c:	7821      	ldrb	r1, [r4, #0]
 800c31e:	2203      	movs	r2, #3
 800c320:	4650      	mov	r0, sl
 800c322:	f7f3 ff5d 	bl	80001e0 <memchr>
 800c326:	b140      	cbz	r0, 800c33a <_svfiprintf_r+0x152>
 800c328:	2340      	movs	r3, #64	; 0x40
 800c32a:	eba0 000a 	sub.w	r0, r0, sl
 800c32e:	fa03 f000 	lsl.w	r0, r3, r0
 800c332:	9b04      	ldr	r3, [sp, #16]
 800c334:	4303      	orrs	r3, r0
 800c336:	3401      	adds	r4, #1
 800c338:	9304      	str	r3, [sp, #16]
 800c33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c33e:	4826      	ldr	r0, [pc, #152]	; (800c3d8 <_svfiprintf_r+0x1f0>)
 800c340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c344:	2206      	movs	r2, #6
 800c346:	f7f3 ff4b 	bl	80001e0 <memchr>
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d038      	beq.n	800c3c0 <_svfiprintf_r+0x1d8>
 800c34e:	4b23      	ldr	r3, [pc, #140]	; (800c3dc <_svfiprintf_r+0x1f4>)
 800c350:	bb1b      	cbnz	r3, 800c39a <_svfiprintf_r+0x1b2>
 800c352:	9b03      	ldr	r3, [sp, #12]
 800c354:	3307      	adds	r3, #7
 800c356:	f023 0307 	bic.w	r3, r3, #7
 800c35a:	3308      	adds	r3, #8
 800c35c:	9303      	str	r3, [sp, #12]
 800c35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c360:	4433      	add	r3, r6
 800c362:	9309      	str	r3, [sp, #36]	; 0x24
 800c364:	e767      	b.n	800c236 <_svfiprintf_r+0x4e>
 800c366:	fb0c 3202 	mla	r2, ip, r2, r3
 800c36a:	460c      	mov	r4, r1
 800c36c:	2001      	movs	r0, #1
 800c36e:	e7a5      	b.n	800c2bc <_svfiprintf_r+0xd4>
 800c370:	2300      	movs	r3, #0
 800c372:	3401      	adds	r4, #1
 800c374:	9305      	str	r3, [sp, #20]
 800c376:	4619      	mov	r1, r3
 800c378:	f04f 0c0a 	mov.w	ip, #10
 800c37c:	4620      	mov	r0, r4
 800c37e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c382:	3a30      	subs	r2, #48	; 0x30
 800c384:	2a09      	cmp	r2, #9
 800c386:	d903      	bls.n	800c390 <_svfiprintf_r+0x1a8>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d0c5      	beq.n	800c318 <_svfiprintf_r+0x130>
 800c38c:	9105      	str	r1, [sp, #20]
 800c38e:	e7c3      	b.n	800c318 <_svfiprintf_r+0x130>
 800c390:	fb0c 2101 	mla	r1, ip, r1, r2
 800c394:	4604      	mov	r4, r0
 800c396:	2301      	movs	r3, #1
 800c398:	e7f0      	b.n	800c37c <_svfiprintf_r+0x194>
 800c39a:	ab03      	add	r3, sp, #12
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	462a      	mov	r2, r5
 800c3a0:	4b0f      	ldr	r3, [pc, #60]	; (800c3e0 <_svfiprintf_r+0x1f8>)
 800c3a2:	a904      	add	r1, sp, #16
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	f7fd ffc3 	bl	800a330 <_printf_float>
 800c3aa:	1c42      	adds	r2, r0, #1
 800c3ac:	4606      	mov	r6, r0
 800c3ae:	d1d6      	bne.n	800c35e <_svfiprintf_r+0x176>
 800c3b0:	89ab      	ldrh	r3, [r5, #12]
 800c3b2:	065b      	lsls	r3, r3, #25
 800c3b4:	f53f af2c 	bmi.w	800c210 <_svfiprintf_r+0x28>
 800c3b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3ba:	b01d      	add	sp, #116	; 0x74
 800c3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c0:	ab03      	add	r3, sp, #12
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	462a      	mov	r2, r5
 800c3c6:	4b06      	ldr	r3, [pc, #24]	; (800c3e0 <_svfiprintf_r+0x1f8>)
 800c3c8:	a904      	add	r1, sp, #16
 800c3ca:	4638      	mov	r0, r7
 800c3cc:	f7fe fa54 	bl	800a878 <_printf_i>
 800c3d0:	e7eb      	b.n	800c3aa <_svfiprintf_r+0x1c2>
 800c3d2:	bf00      	nop
 800c3d4:	0801018c 	.word	0x0801018c
 800c3d8:	08010196 	.word	0x08010196
 800c3dc:	0800a331 	.word	0x0800a331
 800c3e0:	0800c131 	.word	0x0800c131
 800c3e4:	08010192 	.word	0x08010192

0800c3e8 <_sbrk_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d06      	ldr	r5, [pc, #24]	; (800c404 <_sbrk_r+0x1c>)
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	602b      	str	r3, [r5, #0]
 800c3f4:	f7f6 fdd0 	bl	8002f98 <_sbrk>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_sbrk_r+0x1a>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_sbrk_r+0x1a>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	20000b48 	.word	0x20000b48

0800c408 <__assert_func>:
 800c408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c40a:	4614      	mov	r4, r2
 800c40c:	461a      	mov	r2, r3
 800c40e:	4b09      	ldr	r3, [pc, #36]	; (800c434 <__assert_func+0x2c>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4605      	mov	r5, r0
 800c414:	68d8      	ldr	r0, [r3, #12]
 800c416:	b14c      	cbz	r4, 800c42c <__assert_func+0x24>
 800c418:	4b07      	ldr	r3, [pc, #28]	; (800c438 <__assert_func+0x30>)
 800c41a:	9100      	str	r1, [sp, #0]
 800c41c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c420:	4906      	ldr	r1, [pc, #24]	; (800c43c <__assert_func+0x34>)
 800c422:	462b      	mov	r3, r5
 800c424:	f000 f80e 	bl	800c444 <fiprintf>
 800c428:	f000 faac 	bl	800c984 <abort>
 800c42c:	4b04      	ldr	r3, [pc, #16]	; (800c440 <__assert_func+0x38>)
 800c42e:	461c      	mov	r4, r3
 800c430:	e7f3      	b.n	800c41a <__assert_func+0x12>
 800c432:	bf00      	nop
 800c434:	2000018c 	.word	0x2000018c
 800c438:	0801019d 	.word	0x0801019d
 800c43c:	080101aa 	.word	0x080101aa
 800c440:	080101d8 	.word	0x080101d8

0800c444 <fiprintf>:
 800c444:	b40e      	push	{r1, r2, r3}
 800c446:	b503      	push	{r0, r1, lr}
 800c448:	4601      	mov	r1, r0
 800c44a:	ab03      	add	r3, sp, #12
 800c44c:	4805      	ldr	r0, [pc, #20]	; (800c464 <fiprintf+0x20>)
 800c44e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c452:	6800      	ldr	r0, [r0, #0]
 800c454:	9301      	str	r3, [sp, #4]
 800c456:	f000 f897 	bl	800c588 <_vfiprintf_r>
 800c45a:	b002      	add	sp, #8
 800c45c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c460:	b003      	add	sp, #12
 800c462:	4770      	bx	lr
 800c464:	2000018c 	.word	0x2000018c

0800c468 <__ascii_mbtowc>:
 800c468:	b082      	sub	sp, #8
 800c46a:	b901      	cbnz	r1, 800c46e <__ascii_mbtowc+0x6>
 800c46c:	a901      	add	r1, sp, #4
 800c46e:	b142      	cbz	r2, 800c482 <__ascii_mbtowc+0x1a>
 800c470:	b14b      	cbz	r3, 800c486 <__ascii_mbtowc+0x1e>
 800c472:	7813      	ldrb	r3, [r2, #0]
 800c474:	600b      	str	r3, [r1, #0]
 800c476:	7812      	ldrb	r2, [r2, #0]
 800c478:	1e10      	subs	r0, r2, #0
 800c47a:	bf18      	it	ne
 800c47c:	2001      	movne	r0, #1
 800c47e:	b002      	add	sp, #8
 800c480:	4770      	bx	lr
 800c482:	4610      	mov	r0, r2
 800c484:	e7fb      	b.n	800c47e <__ascii_mbtowc+0x16>
 800c486:	f06f 0001 	mvn.w	r0, #1
 800c48a:	e7f8      	b.n	800c47e <__ascii_mbtowc+0x16>

0800c48c <memmove>:
 800c48c:	4288      	cmp	r0, r1
 800c48e:	b510      	push	{r4, lr}
 800c490:	eb01 0402 	add.w	r4, r1, r2
 800c494:	d902      	bls.n	800c49c <memmove+0x10>
 800c496:	4284      	cmp	r4, r0
 800c498:	4623      	mov	r3, r4
 800c49a:	d807      	bhi.n	800c4ac <memmove+0x20>
 800c49c:	1e43      	subs	r3, r0, #1
 800c49e:	42a1      	cmp	r1, r4
 800c4a0:	d008      	beq.n	800c4b4 <memmove+0x28>
 800c4a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4aa:	e7f8      	b.n	800c49e <memmove+0x12>
 800c4ac:	4402      	add	r2, r0
 800c4ae:	4601      	mov	r1, r0
 800c4b0:	428a      	cmp	r2, r1
 800c4b2:	d100      	bne.n	800c4b6 <memmove+0x2a>
 800c4b4:	bd10      	pop	{r4, pc}
 800c4b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4be:	e7f7      	b.n	800c4b0 <memmove+0x24>

0800c4c0 <__malloc_lock>:
 800c4c0:	4801      	ldr	r0, [pc, #4]	; (800c4c8 <__malloc_lock+0x8>)
 800c4c2:	f000 bc1f 	b.w	800cd04 <__retarget_lock_acquire_recursive>
 800c4c6:	bf00      	nop
 800c4c8:	20000b4c 	.word	0x20000b4c

0800c4cc <__malloc_unlock>:
 800c4cc:	4801      	ldr	r0, [pc, #4]	; (800c4d4 <__malloc_unlock+0x8>)
 800c4ce:	f000 bc1a 	b.w	800cd06 <__retarget_lock_release_recursive>
 800c4d2:	bf00      	nop
 800c4d4:	20000b4c 	.word	0x20000b4c

0800c4d8 <_realloc_r>:
 800c4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4dc:	4680      	mov	r8, r0
 800c4de:	4614      	mov	r4, r2
 800c4e0:	460e      	mov	r6, r1
 800c4e2:	b921      	cbnz	r1, 800c4ee <_realloc_r+0x16>
 800c4e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	f7ff bdad 	b.w	800c048 <_malloc_r>
 800c4ee:	b92a      	cbnz	r2, 800c4fc <_realloc_r+0x24>
 800c4f0:	f7ff fd3e 	bl	800bf70 <_free_r>
 800c4f4:	4625      	mov	r5, r4
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4fc:	f000 fc6a 	bl	800cdd4 <_malloc_usable_size_r>
 800c500:	4284      	cmp	r4, r0
 800c502:	4607      	mov	r7, r0
 800c504:	d802      	bhi.n	800c50c <_realloc_r+0x34>
 800c506:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c50a:	d812      	bhi.n	800c532 <_realloc_r+0x5a>
 800c50c:	4621      	mov	r1, r4
 800c50e:	4640      	mov	r0, r8
 800c510:	f7ff fd9a 	bl	800c048 <_malloc_r>
 800c514:	4605      	mov	r5, r0
 800c516:	2800      	cmp	r0, #0
 800c518:	d0ed      	beq.n	800c4f6 <_realloc_r+0x1e>
 800c51a:	42bc      	cmp	r4, r7
 800c51c:	4622      	mov	r2, r4
 800c51e:	4631      	mov	r1, r6
 800c520:	bf28      	it	cs
 800c522:	463a      	movcs	r2, r7
 800c524:	f7fd fe4e 	bl	800a1c4 <memcpy>
 800c528:	4631      	mov	r1, r6
 800c52a:	4640      	mov	r0, r8
 800c52c:	f7ff fd20 	bl	800bf70 <_free_r>
 800c530:	e7e1      	b.n	800c4f6 <_realloc_r+0x1e>
 800c532:	4635      	mov	r5, r6
 800c534:	e7df      	b.n	800c4f6 <_realloc_r+0x1e>

0800c536 <__sfputc_r>:
 800c536:	6893      	ldr	r3, [r2, #8]
 800c538:	3b01      	subs	r3, #1
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	b410      	push	{r4}
 800c53e:	6093      	str	r3, [r2, #8]
 800c540:	da08      	bge.n	800c554 <__sfputc_r+0x1e>
 800c542:	6994      	ldr	r4, [r2, #24]
 800c544:	42a3      	cmp	r3, r4
 800c546:	db01      	blt.n	800c54c <__sfputc_r+0x16>
 800c548:	290a      	cmp	r1, #10
 800c54a:	d103      	bne.n	800c554 <__sfputc_r+0x1e>
 800c54c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c550:	f000 b94a 	b.w	800c7e8 <__swbuf_r>
 800c554:	6813      	ldr	r3, [r2, #0]
 800c556:	1c58      	adds	r0, r3, #1
 800c558:	6010      	str	r0, [r2, #0]
 800c55a:	7019      	strb	r1, [r3, #0]
 800c55c:	4608      	mov	r0, r1
 800c55e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <__sfputs_r>:
 800c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c566:	4606      	mov	r6, r0
 800c568:	460f      	mov	r7, r1
 800c56a:	4614      	mov	r4, r2
 800c56c:	18d5      	adds	r5, r2, r3
 800c56e:	42ac      	cmp	r4, r5
 800c570:	d101      	bne.n	800c576 <__sfputs_r+0x12>
 800c572:	2000      	movs	r0, #0
 800c574:	e007      	b.n	800c586 <__sfputs_r+0x22>
 800c576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c57a:	463a      	mov	r2, r7
 800c57c:	4630      	mov	r0, r6
 800c57e:	f7ff ffda 	bl	800c536 <__sfputc_r>
 800c582:	1c43      	adds	r3, r0, #1
 800c584:	d1f3      	bne.n	800c56e <__sfputs_r+0xa>
 800c586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c588 <_vfiprintf_r>:
 800c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58c:	460d      	mov	r5, r1
 800c58e:	b09d      	sub	sp, #116	; 0x74
 800c590:	4614      	mov	r4, r2
 800c592:	4698      	mov	r8, r3
 800c594:	4606      	mov	r6, r0
 800c596:	b118      	cbz	r0, 800c5a0 <_vfiprintf_r+0x18>
 800c598:	6983      	ldr	r3, [r0, #24]
 800c59a:	b90b      	cbnz	r3, 800c5a0 <_vfiprintf_r+0x18>
 800c59c:	f000 fb14 	bl	800cbc8 <__sinit>
 800c5a0:	4b89      	ldr	r3, [pc, #548]	; (800c7c8 <_vfiprintf_r+0x240>)
 800c5a2:	429d      	cmp	r5, r3
 800c5a4:	d11b      	bne.n	800c5de <_vfiprintf_r+0x56>
 800c5a6:	6875      	ldr	r5, [r6, #4]
 800c5a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5aa:	07d9      	lsls	r1, r3, #31
 800c5ac:	d405      	bmi.n	800c5ba <_vfiprintf_r+0x32>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	059a      	lsls	r2, r3, #22
 800c5b2:	d402      	bmi.n	800c5ba <_vfiprintf_r+0x32>
 800c5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5b6:	f000 fba5 	bl	800cd04 <__retarget_lock_acquire_recursive>
 800c5ba:	89ab      	ldrh	r3, [r5, #12]
 800c5bc:	071b      	lsls	r3, r3, #28
 800c5be:	d501      	bpl.n	800c5c4 <_vfiprintf_r+0x3c>
 800c5c0:	692b      	ldr	r3, [r5, #16]
 800c5c2:	b9eb      	cbnz	r3, 800c600 <_vfiprintf_r+0x78>
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f000 f96e 	bl	800c8a8 <__swsetup_r>
 800c5cc:	b1c0      	cbz	r0, 800c600 <_vfiprintf_r+0x78>
 800c5ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5d0:	07dc      	lsls	r4, r3, #31
 800c5d2:	d50e      	bpl.n	800c5f2 <_vfiprintf_r+0x6a>
 800c5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d8:	b01d      	add	sp, #116	; 0x74
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	4b7b      	ldr	r3, [pc, #492]	; (800c7cc <_vfiprintf_r+0x244>)
 800c5e0:	429d      	cmp	r5, r3
 800c5e2:	d101      	bne.n	800c5e8 <_vfiprintf_r+0x60>
 800c5e4:	68b5      	ldr	r5, [r6, #8]
 800c5e6:	e7df      	b.n	800c5a8 <_vfiprintf_r+0x20>
 800c5e8:	4b79      	ldr	r3, [pc, #484]	; (800c7d0 <_vfiprintf_r+0x248>)
 800c5ea:	429d      	cmp	r5, r3
 800c5ec:	bf08      	it	eq
 800c5ee:	68f5      	ldreq	r5, [r6, #12]
 800c5f0:	e7da      	b.n	800c5a8 <_vfiprintf_r+0x20>
 800c5f2:	89ab      	ldrh	r3, [r5, #12]
 800c5f4:	0598      	lsls	r0, r3, #22
 800c5f6:	d4ed      	bmi.n	800c5d4 <_vfiprintf_r+0x4c>
 800c5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5fa:	f000 fb84 	bl	800cd06 <__retarget_lock_release_recursive>
 800c5fe:	e7e9      	b.n	800c5d4 <_vfiprintf_r+0x4c>
 800c600:	2300      	movs	r3, #0
 800c602:	9309      	str	r3, [sp, #36]	; 0x24
 800c604:	2320      	movs	r3, #32
 800c606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c60a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c60e:	2330      	movs	r3, #48	; 0x30
 800c610:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7d4 <_vfiprintf_r+0x24c>
 800c614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c618:	f04f 0901 	mov.w	r9, #1
 800c61c:	4623      	mov	r3, r4
 800c61e:	469a      	mov	sl, r3
 800c620:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c624:	b10a      	cbz	r2, 800c62a <_vfiprintf_r+0xa2>
 800c626:	2a25      	cmp	r2, #37	; 0x25
 800c628:	d1f9      	bne.n	800c61e <_vfiprintf_r+0x96>
 800c62a:	ebba 0b04 	subs.w	fp, sl, r4
 800c62e:	d00b      	beq.n	800c648 <_vfiprintf_r+0xc0>
 800c630:	465b      	mov	r3, fp
 800c632:	4622      	mov	r2, r4
 800c634:	4629      	mov	r1, r5
 800c636:	4630      	mov	r0, r6
 800c638:	f7ff ff94 	bl	800c564 <__sfputs_r>
 800c63c:	3001      	adds	r0, #1
 800c63e:	f000 80aa 	beq.w	800c796 <_vfiprintf_r+0x20e>
 800c642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c644:	445a      	add	r2, fp
 800c646:	9209      	str	r2, [sp, #36]	; 0x24
 800c648:	f89a 3000 	ldrb.w	r3, [sl]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f000 80a2 	beq.w	800c796 <_vfiprintf_r+0x20e>
 800c652:	2300      	movs	r3, #0
 800c654:	f04f 32ff 	mov.w	r2, #4294967295
 800c658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c65c:	f10a 0a01 	add.w	sl, sl, #1
 800c660:	9304      	str	r3, [sp, #16]
 800c662:	9307      	str	r3, [sp, #28]
 800c664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c668:	931a      	str	r3, [sp, #104]	; 0x68
 800c66a:	4654      	mov	r4, sl
 800c66c:	2205      	movs	r2, #5
 800c66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c672:	4858      	ldr	r0, [pc, #352]	; (800c7d4 <_vfiprintf_r+0x24c>)
 800c674:	f7f3 fdb4 	bl	80001e0 <memchr>
 800c678:	9a04      	ldr	r2, [sp, #16]
 800c67a:	b9d8      	cbnz	r0, 800c6b4 <_vfiprintf_r+0x12c>
 800c67c:	06d1      	lsls	r1, r2, #27
 800c67e:	bf44      	itt	mi
 800c680:	2320      	movmi	r3, #32
 800c682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c686:	0713      	lsls	r3, r2, #28
 800c688:	bf44      	itt	mi
 800c68a:	232b      	movmi	r3, #43	; 0x2b
 800c68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c690:	f89a 3000 	ldrb.w	r3, [sl]
 800c694:	2b2a      	cmp	r3, #42	; 0x2a
 800c696:	d015      	beq.n	800c6c4 <_vfiprintf_r+0x13c>
 800c698:	9a07      	ldr	r2, [sp, #28]
 800c69a:	4654      	mov	r4, sl
 800c69c:	2000      	movs	r0, #0
 800c69e:	f04f 0c0a 	mov.w	ip, #10
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6a8:	3b30      	subs	r3, #48	; 0x30
 800c6aa:	2b09      	cmp	r3, #9
 800c6ac:	d94e      	bls.n	800c74c <_vfiprintf_r+0x1c4>
 800c6ae:	b1b0      	cbz	r0, 800c6de <_vfiprintf_r+0x156>
 800c6b0:	9207      	str	r2, [sp, #28]
 800c6b2:	e014      	b.n	800c6de <_vfiprintf_r+0x156>
 800c6b4:	eba0 0308 	sub.w	r3, r0, r8
 800c6b8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	9304      	str	r3, [sp, #16]
 800c6c0:	46a2      	mov	sl, r4
 800c6c2:	e7d2      	b.n	800c66a <_vfiprintf_r+0xe2>
 800c6c4:	9b03      	ldr	r3, [sp, #12]
 800c6c6:	1d19      	adds	r1, r3, #4
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	9103      	str	r1, [sp, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	bfbb      	ittet	lt
 800c6d0:	425b      	neglt	r3, r3
 800c6d2:	f042 0202 	orrlt.w	r2, r2, #2
 800c6d6:	9307      	strge	r3, [sp, #28]
 800c6d8:	9307      	strlt	r3, [sp, #28]
 800c6da:	bfb8      	it	lt
 800c6dc:	9204      	strlt	r2, [sp, #16]
 800c6de:	7823      	ldrb	r3, [r4, #0]
 800c6e0:	2b2e      	cmp	r3, #46	; 0x2e
 800c6e2:	d10c      	bne.n	800c6fe <_vfiprintf_r+0x176>
 800c6e4:	7863      	ldrb	r3, [r4, #1]
 800c6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6e8:	d135      	bne.n	800c756 <_vfiprintf_r+0x1ce>
 800c6ea:	9b03      	ldr	r3, [sp, #12]
 800c6ec:	1d1a      	adds	r2, r3, #4
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	9203      	str	r2, [sp, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	bfb8      	it	lt
 800c6f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6fa:	3402      	adds	r4, #2
 800c6fc:	9305      	str	r3, [sp, #20]
 800c6fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7e4 <_vfiprintf_r+0x25c>
 800c702:	7821      	ldrb	r1, [r4, #0]
 800c704:	2203      	movs	r2, #3
 800c706:	4650      	mov	r0, sl
 800c708:	f7f3 fd6a 	bl	80001e0 <memchr>
 800c70c:	b140      	cbz	r0, 800c720 <_vfiprintf_r+0x198>
 800c70e:	2340      	movs	r3, #64	; 0x40
 800c710:	eba0 000a 	sub.w	r0, r0, sl
 800c714:	fa03 f000 	lsl.w	r0, r3, r0
 800c718:	9b04      	ldr	r3, [sp, #16]
 800c71a:	4303      	orrs	r3, r0
 800c71c:	3401      	adds	r4, #1
 800c71e:	9304      	str	r3, [sp, #16]
 800c720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c724:	482c      	ldr	r0, [pc, #176]	; (800c7d8 <_vfiprintf_r+0x250>)
 800c726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c72a:	2206      	movs	r2, #6
 800c72c:	f7f3 fd58 	bl	80001e0 <memchr>
 800c730:	2800      	cmp	r0, #0
 800c732:	d03f      	beq.n	800c7b4 <_vfiprintf_r+0x22c>
 800c734:	4b29      	ldr	r3, [pc, #164]	; (800c7dc <_vfiprintf_r+0x254>)
 800c736:	bb1b      	cbnz	r3, 800c780 <_vfiprintf_r+0x1f8>
 800c738:	9b03      	ldr	r3, [sp, #12]
 800c73a:	3307      	adds	r3, #7
 800c73c:	f023 0307 	bic.w	r3, r3, #7
 800c740:	3308      	adds	r3, #8
 800c742:	9303      	str	r3, [sp, #12]
 800c744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c746:	443b      	add	r3, r7
 800c748:	9309      	str	r3, [sp, #36]	; 0x24
 800c74a:	e767      	b.n	800c61c <_vfiprintf_r+0x94>
 800c74c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c750:	460c      	mov	r4, r1
 800c752:	2001      	movs	r0, #1
 800c754:	e7a5      	b.n	800c6a2 <_vfiprintf_r+0x11a>
 800c756:	2300      	movs	r3, #0
 800c758:	3401      	adds	r4, #1
 800c75a:	9305      	str	r3, [sp, #20]
 800c75c:	4619      	mov	r1, r3
 800c75e:	f04f 0c0a 	mov.w	ip, #10
 800c762:	4620      	mov	r0, r4
 800c764:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c768:	3a30      	subs	r2, #48	; 0x30
 800c76a:	2a09      	cmp	r2, #9
 800c76c:	d903      	bls.n	800c776 <_vfiprintf_r+0x1ee>
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d0c5      	beq.n	800c6fe <_vfiprintf_r+0x176>
 800c772:	9105      	str	r1, [sp, #20]
 800c774:	e7c3      	b.n	800c6fe <_vfiprintf_r+0x176>
 800c776:	fb0c 2101 	mla	r1, ip, r1, r2
 800c77a:	4604      	mov	r4, r0
 800c77c:	2301      	movs	r3, #1
 800c77e:	e7f0      	b.n	800c762 <_vfiprintf_r+0x1da>
 800c780:	ab03      	add	r3, sp, #12
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	462a      	mov	r2, r5
 800c786:	4b16      	ldr	r3, [pc, #88]	; (800c7e0 <_vfiprintf_r+0x258>)
 800c788:	a904      	add	r1, sp, #16
 800c78a:	4630      	mov	r0, r6
 800c78c:	f7fd fdd0 	bl	800a330 <_printf_float>
 800c790:	4607      	mov	r7, r0
 800c792:	1c78      	adds	r0, r7, #1
 800c794:	d1d6      	bne.n	800c744 <_vfiprintf_r+0x1bc>
 800c796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c798:	07d9      	lsls	r1, r3, #31
 800c79a:	d405      	bmi.n	800c7a8 <_vfiprintf_r+0x220>
 800c79c:	89ab      	ldrh	r3, [r5, #12]
 800c79e:	059a      	lsls	r2, r3, #22
 800c7a0:	d402      	bmi.n	800c7a8 <_vfiprintf_r+0x220>
 800c7a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7a4:	f000 faaf 	bl	800cd06 <__retarget_lock_release_recursive>
 800c7a8:	89ab      	ldrh	r3, [r5, #12]
 800c7aa:	065b      	lsls	r3, r3, #25
 800c7ac:	f53f af12 	bmi.w	800c5d4 <_vfiprintf_r+0x4c>
 800c7b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7b2:	e711      	b.n	800c5d8 <_vfiprintf_r+0x50>
 800c7b4:	ab03      	add	r3, sp, #12
 800c7b6:	9300      	str	r3, [sp, #0]
 800c7b8:	462a      	mov	r2, r5
 800c7ba:	4b09      	ldr	r3, [pc, #36]	; (800c7e0 <_vfiprintf_r+0x258>)
 800c7bc:	a904      	add	r1, sp, #16
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7fe f85a 	bl	800a878 <_printf_i>
 800c7c4:	e7e4      	b.n	800c790 <_vfiprintf_r+0x208>
 800c7c6:	bf00      	nop
 800c7c8:	08010304 	.word	0x08010304
 800c7cc:	08010324 	.word	0x08010324
 800c7d0:	080102e4 	.word	0x080102e4
 800c7d4:	0801018c 	.word	0x0801018c
 800c7d8:	08010196 	.word	0x08010196
 800c7dc:	0800a331 	.word	0x0800a331
 800c7e0:	0800c565 	.word	0x0800c565
 800c7e4:	08010192 	.word	0x08010192

0800c7e8 <__swbuf_r>:
 800c7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ea:	460e      	mov	r6, r1
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	b118      	cbz	r0, 800c7fa <__swbuf_r+0x12>
 800c7f2:	6983      	ldr	r3, [r0, #24]
 800c7f4:	b90b      	cbnz	r3, 800c7fa <__swbuf_r+0x12>
 800c7f6:	f000 f9e7 	bl	800cbc8 <__sinit>
 800c7fa:	4b21      	ldr	r3, [pc, #132]	; (800c880 <__swbuf_r+0x98>)
 800c7fc:	429c      	cmp	r4, r3
 800c7fe:	d12b      	bne.n	800c858 <__swbuf_r+0x70>
 800c800:	686c      	ldr	r4, [r5, #4]
 800c802:	69a3      	ldr	r3, [r4, #24]
 800c804:	60a3      	str	r3, [r4, #8]
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	071a      	lsls	r2, r3, #28
 800c80a:	d52f      	bpl.n	800c86c <__swbuf_r+0x84>
 800c80c:	6923      	ldr	r3, [r4, #16]
 800c80e:	b36b      	cbz	r3, 800c86c <__swbuf_r+0x84>
 800c810:	6923      	ldr	r3, [r4, #16]
 800c812:	6820      	ldr	r0, [r4, #0]
 800c814:	1ac0      	subs	r0, r0, r3
 800c816:	6963      	ldr	r3, [r4, #20]
 800c818:	b2f6      	uxtb	r6, r6
 800c81a:	4283      	cmp	r3, r0
 800c81c:	4637      	mov	r7, r6
 800c81e:	dc04      	bgt.n	800c82a <__swbuf_r+0x42>
 800c820:	4621      	mov	r1, r4
 800c822:	4628      	mov	r0, r5
 800c824:	f000 f93c 	bl	800caa0 <_fflush_r>
 800c828:	bb30      	cbnz	r0, 800c878 <__swbuf_r+0x90>
 800c82a:	68a3      	ldr	r3, [r4, #8]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	60a3      	str	r3, [r4, #8]
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	6022      	str	r2, [r4, #0]
 800c836:	701e      	strb	r6, [r3, #0]
 800c838:	6963      	ldr	r3, [r4, #20]
 800c83a:	3001      	adds	r0, #1
 800c83c:	4283      	cmp	r3, r0
 800c83e:	d004      	beq.n	800c84a <__swbuf_r+0x62>
 800c840:	89a3      	ldrh	r3, [r4, #12]
 800c842:	07db      	lsls	r3, r3, #31
 800c844:	d506      	bpl.n	800c854 <__swbuf_r+0x6c>
 800c846:	2e0a      	cmp	r6, #10
 800c848:	d104      	bne.n	800c854 <__swbuf_r+0x6c>
 800c84a:	4621      	mov	r1, r4
 800c84c:	4628      	mov	r0, r5
 800c84e:	f000 f927 	bl	800caa0 <_fflush_r>
 800c852:	b988      	cbnz	r0, 800c878 <__swbuf_r+0x90>
 800c854:	4638      	mov	r0, r7
 800c856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c858:	4b0a      	ldr	r3, [pc, #40]	; (800c884 <__swbuf_r+0x9c>)
 800c85a:	429c      	cmp	r4, r3
 800c85c:	d101      	bne.n	800c862 <__swbuf_r+0x7a>
 800c85e:	68ac      	ldr	r4, [r5, #8]
 800c860:	e7cf      	b.n	800c802 <__swbuf_r+0x1a>
 800c862:	4b09      	ldr	r3, [pc, #36]	; (800c888 <__swbuf_r+0xa0>)
 800c864:	429c      	cmp	r4, r3
 800c866:	bf08      	it	eq
 800c868:	68ec      	ldreq	r4, [r5, #12]
 800c86a:	e7ca      	b.n	800c802 <__swbuf_r+0x1a>
 800c86c:	4621      	mov	r1, r4
 800c86e:	4628      	mov	r0, r5
 800c870:	f000 f81a 	bl	800c8a8 <__swsetup_r>
 800c874:	2800      	cmp	r0, #0
 800c876:	d0cb      	beq.n	800c810 <__swbuf_r+0x28>
 800c878:	f04f 37ff 	mov.w	r7, #4294967295
 800c87c:	e7ea      	b.n	800c854 <__swbuf_r+0x6c>
 800c87e:	bf00      	nop
 800c880:	08010304 	.word	0x08010304
 800c884:	08010324 	.word	0x08010324
 800c888:	080102e4 	.word	0x080102e4

0800c88c <__ascii_wctomb>:
 800c88c:	b149      	cbz	r1, 800c8a2 <__ascii_wctomb+0x16>
 800c88e:	2aff      	cmp	r2, #255	; 0xff
 800c890:	bf85      	ittet	hi
 800c892:	238a      	movhi	r3, #138	; 0x8a
 800c894:	6003      	strhi	r3, [r0, #0]
 800c896:	700a      	strbls	r2, [r1, #0]
 800c898:	f04f 30ff 	movhi.w	r0, #4294967295
 800c89c:	bf98      	it	ls
 800c89e:	2001      	movls	r0, #1
 800c8a0:	4770      	bx	lr
 800c8a2:	4608      	mov	r0, r1
 800c8a4:	4770      	bx	lr
	...

0800c8a8 <__swsetup_r>:
 800c8a8:	4b32      	ldr	r3, [pc, #200]	; (800c974 <__swsetup_r+0xcc>)
 800c8aa:	b570      	push	{r4, r5, r6, lr}
 800c8ac:	681d      	ldr	r5, [r3, #0]
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	b125      	cbz	r5, 800c8be <__swsetup_r+0x16>
 800c8b4:	69ab      	ldr	r3, [r5, #24]
 800c8b6:	b913      	cbnz	r3, 800c8be <__swsetup_r+0x16>
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f000 f985 	bl	800cbc8 <__sinit>
 800c8be:	4b2e      	ldr	r3, [pc, #184]	; (800c978 <__swsetup_r+0xd0>)
 800c8c0:	429c      	cmp	r4, r3
 800c8c2:	d10f      	bne.n	800c8e4 <__swsetup_r+0x3c>
 800c8c4:	686c      	ldr	r4, [r5, #4]
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8cc:	0719      	lsls	r1, r3, #28
 800c8ce:	d42c      	bmi.n	800c92a <__swsetup_r+0x82>
 800c8d0:	06dd      	lsls	r5, r3, #27
 800c8d2:	d411      	bmi.n	800c8f8 <__swsetup_r+0x50>
 800c8d4:	2309      	movs	r3, #9
 800c8d6:	6033      	str	r3, [r6, #0]
 800c8d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8dc:	81a3      	strh	r3, [r4, #12]
 800c8de:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e2:	e03e      	b.n	800c962 <__swsetup_r+0xba>
 800c8e4:	4b25      	ldr	r3, [pc, #148]	; (800c97c <__swsetup_r+0xd4>)
 800c8e6:	429c      	cmp	r4, r3
 800c8e8:	d101      	bne.n	800c8ee <__swsetup_r+0x46>
 800c8ea:	68ac      	ldr	r4, [r5, #8]
 800c8ec:	e7eb      	b.n	800c8c6 <__swsetup_r+0x1e>
 800c8ee:	4b24      	ldr	r3, [pc, #144]	; (800c980 <__swsetup_r+0xd8>)
 800c8f0:	429c      	cmp	r4, r3
 800c8f2:	bf08      	it	eq
 800c8f4:	68ec      	ldreq	r4, [r5, #12]
 800c8f6:	e7e6      	b.n	800c8c6 <__swsetup_r+0x1e>
 800c8f8:	0758      	lsls	r0, r3, #29
 800c8fa:	d512      	bpl.n	800c922 <__swsetup_r+0x7a>
 800c8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8fe:	b141      	cbz	r1, 800c912 <__swsetup_r+0x6a>
 800c900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c904:	4299      	cmp	r1, r3
 800c906:	d002      	beq.n	800c90e <__swsetup_r+0x66>
 800c908:	4630      	mov	r0, r6
 800c90a:	f7ff fb31 	bl	800bf70 <_free_r>
 800c90e:	2300      	movs	r3, #0
 800c910:	6363      	str	r3, [r4, #52]	; 0x34
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c918:	81a3      	strh	r3, [r4, #12]
 800c91a:	2300      	movs	r3, #0
 800c91c:	6063      	str	r3, [r4, #4]
 800c91e:	6923      	ldr	r3, [r4, #16]
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	f043 0308 	orr.w	r3, r3, #8
 800c928:	81a3      	strh	r3, [r4, #12]
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	b94b      	cbnz	r3, 800c942 <__swsetup_r+0x9a>
 800c92e:	89a3      	ldrh	r3, [r4, #12]
 800c930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c938:	d003      	beq.n	800c942 <__swsetup_r+0x9a>
 800c93a:	4621      	mov	r1, r4
 800c93c:	4630      	mov	r0, r6
 800c93e:	f000 fa09 	bl	800cd54 <__smakebuf_r>
 800c942:	89a0      	ldrh	r0, [r4, #12]
 800c944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c948:	f010 0301 	ands.w	r3, r0, #1
 800c94c:	d00a      	beq.n	800c964 <__swsetup_r+0xbc>
 800c94e:	2300      	movs	r3, #0
 800c950:	60a3      	str	r3, [r4, #8]
 800c952:	6963      	ldr	r3, [r4, #20]
 800c954:	425b      	negs	r3, r3
 800c956:	61a3      	str	r3, [r4, #24]
 800c958:	6923      	ldr	r3, [r4, #16]
 800c95a:	b943      	cbnz	r3, 800c96e <__swsetup_r+0xc6>
 800c95c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c960:	d1ba      	bne.n	800c8d8 <__swsetup_r+0x30>
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	0781      	lsls	r1, r0, #30
 800c966:	bf58      	it	pl
 800c968:	6963      	ldrpl	r3, [r4, #20]
 800c96a:	60a3      	str	r3, [r4, #8]
 800c96c:	e7f4      	b.n	800c958 <__swsetup_r+0xb0>
 800c96e:	2000      	movs	r0, #0
 800c970:	e7f7      	b.n	800c962 <__swsetup_r+0xba>
 800c972:	bf00      	nop
 800c974:	2000018c 	.word	0x2000018c
 800c978:	08010304 	.word	0x08010304
 800c97c:	08010324 	.word	0x08010324
 800c980:	080102e4 	.word	0x080102e4

0800c984 <abort>:
 800c984:	b508      	push	{r3, lr}
 800c986:	2006      	movs	r0, #6
 800c988:	f000 fa54 	bl	800ce34 <raise>
 800c98c:	2001      	movs	r0, #1
 800c98e:	f7f6 fa8b 	bl	8002ea8 <_exit>
	...

0800c994 <__sflush_r>:
 800c994:	898a      	ldrh	r2, [r1, #12]
 800c996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c99a:	4605      	mov	r5, r0
 800c99c:	0710      	lsls	r0, r2, #28
 800c99e:	460c      	mov	r4, r1
 800c9a0:	d458      	bmi.n	800ca54 <__sflush_r+0xc0>
 800c9a2:	684b      	ldr	r3, [r1, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	dc05      	bgt.n	800c9b4 <__sflush_r+0x20>
 800c9a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	dc02      	bgt.n	800c9b4 <__sflush_r+0x20>
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9b6:	2e00      	cmp	r6, #0
 800c9b8:	d0f9      	beq.n	800c9ae <__sflush_r+0x1a>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9c0:	682f      	ldr	r7, [r5, #0]
 800c9c2:	602b      	str	r3, [r5, #0]
 800c9c4:	d032      	beq.n	800ca2c <__sflush_r+0x98>
 800c9c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	075a      	lsls	r2, r3, #29
 800c9cc:	d505      	bpl.n	800c9da <__sflush_r+0x46>
 800c9ce:	6863      	ldr	r3, [r4, #4]
 800c9d0:	1ac0      	subs	r0, r0, r3
 800c9d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9d4:	b10b      	cbz	r3, 800c9da <__sflush_r+0x46>
 800c9d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9d8:	1ac0      	subs	r0, r0, r3
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4602      	mov	r2, r0
 800c9de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9e0:	6a21      	ldr	r1, [r4, #32]
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	47b0      	blx	r6
 800c9e6:	1c43      	adds	r3, r0, #1
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	d106      	bne.n	800c9fa <__sflush_r+0x66>
 800c9ec:	6829      	ldr	r1, [r5, #0]
 800c9ee:	291d      	cmp	r1, #29
 800c9f0:	d82c      	bhi.n	800ca4c <__sflush_r+0xb8>
 800c9f2:	4a2a      	ldr	r2, [pc, #168]	; (800ca9c <__sflush_r+0x108>)
 800c9f4:	40ca      	lsrs	r2, r1
 800c9f6:	07d6      	lsls	r6, r2, #31
 800c9f8:	d528      	bpl.n	800ca4c <__sflush_r+0xb8>
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	6062      	str	r2, [r4, #4]
 800c9fe:	04d9      	lsls	r1, r3, #19
 800ca00:	6922      	ldr	r2, [r4, #16]
 800ca02:	6022      	str	r2, [r4, #0]
 800ca04:	d504      	bpl.n	800ca10 <__sflush_r+0x7c>
 800ca06:	1c42      	adds	r2, r0, #1
 800ca08:	d101      	bne.n	800ca0e <__sflush_r+0x7a>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	b903      	cbnz	r3, 800ca10 <__sflush_r+0x7c>
 800ca0e:	6560      	str	r0, [r4, #84]	; 0x54
 800ca10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca12:	602f      	str	r7, [r5, #0]
 800ca14:	2900      	cmp	r1, #0
 800ca16:	d0ca      	beq.n	800c9ae <__sflush_r+0x1a>
 800ca18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca1c:	4299      	cmp	r1, r3
 800ca1e:	d002      	beq.n	800ca26 <__sflush_r+0x92>
 800ca20:	4628      	mov	r0, r5
 800ca22:	f7ff faa5 	bl	800bf70 <_free_r>
 800ca26:	2000      	movs	r0, #0
 800ca28:	6360      	str	r0, [r4, #52]	; 0x34
 800ca2a:	e7c1      	b.n	800c9b0 <__sflush_r+0x1c>
 800ca2c:	6a21      	ldr	r1, [r4, #32]
 800ca2e:	2301      	movs	r3, #1
 800ca30:	4628      	mov	r0, r5
 800ca32:	47b0      	blx	r6
 800ca34:	1c41      	adds	r1, r0, #1
 800ca36:	d1c7      	bne.n	800c9c8 <__sflush_r+0x34>
 800ca38:	682b      	ldr	r3, [r5, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d0c4      	beq.n	800c9c8 <__sflush_r+0x34>
 800ca3e:	2b1d      	cmp	r3, #29
 800ca40:	d001      	beq.n	800ca46 <__sflush_r+0xb2>
 800ca42:	2b16      	cmp	r3, #22
 800ca44:	d101      	bne.n	800ca4a <__sflush_r+0xb6>
 800ca46:	602f      	str	r7, [r5, #0]
 800ca48:	e7b1      	b.n	800c9ae <__sflush_r+0x1a>
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca50:	81a3      	strh	r3, [r4, #12]
 800ca52:	e7ad      	b.n	800c9b0 <__sflush_r+0x1c>
 800ca54:	690f      	ldr	r7, [r1, #16]
 800ca56:	2f00      	cmp	r7, #0
 800ca58:	d0a9      	beq.n	800c9ae <__sflush_r+0x1a>
 800ca5a:	0793      	lsls	r3, r2, #30
 800ca5c:	680e      	ldr	r6, [r1, #0]
 800ca5e:	bf08      	it	eq
 800ca60:	694b      	ldreq	r3, [r1, #20]
 800ca62:	600f      	str	r7, [r1, #0]
 800ca64:	bf18      	it	ne
 800ca66:	2300      	movne	r3, #0
 800ca68:	eba6 0807 	sub.w	r8, r6, r7
 800ca6c:	608b      	str	r3, [r1, #8]
 800ca6e:	f1b8 0f00 	cmp.w	r8, #0
 800ca72:	dd9c      	ble.n	800c9ae <__sflush_r+0x1a>
 800ca74:	6a21      	ldr	r1, [r4, #32]
 800ca76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca78:	4643      	mov	r3, r8
 800ca7a:	463a      	mov	r2, r7
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	47b0      	blx	r6
 800ca80:	2800      	cmp	r0, #0
 800ca82:	dc06      	bgt.n	800ca92 <__sflush_r+0xfe>
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca8a:	81a3      	strh	r3, [r4, #12]
 800ca8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca90:	e78e      	b.n	800c9b0 <__sflush_r+0x1c>
 800ca92:	4407      	add	r7, r0
 800ca94:	eba8 0800 	sub.w	r8, r8, r0
 800ca98:	e7e9      	b.n	800ca6e <__sflush_r+0xda>
 800ca9a:	bf00      	nop
 800ca9c:	20400001 	.word	0x20400001

0800caa0 <_fflush_r>:
 800caa0:	b538      	push	{r3, r4, r5, lr}
 800caa2:	690b      	ldr	r3, [r1, #16]
 800caa4:	4605      	mov	r5, r0
 800caa6:	460c      	mov	r4, r1
 800caa8:	b913      	cbnz	r3, 800cab0 <_fflush_r+0x10>
 800caaa:	2500      	movs	r5, #0
 800caac:	4628      	mov	r0, r5
 800caae:	bd38      	pop	{r3, r4, r5, pc}
 800cab0:	b118      	cbz	r0, 800caba <_fflush_r+0x1a>
 800cab2:	6983      	ldr	r3, [r0, #24]
 800cab4:	b90b      	cbnz	r3, 800caba <_fflush_r+0x1a>
 800cab6:	f000 f887 	bl	800cbc8 <__sinit>
 800caba:	4b14      	ldr	r3, [pc, #80]	; (800cb0c <_fflush_r+0x6c>)
 800cabc:	429c      	cmp	r4, r3
 800cabe:	d11b      	bne.n	800caf8 <_fflush_r+0x58>
 800cac0:	686c      	ldr	r4, [r5, #4]
 800cac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d0ef      	beq.n	800caaa <_fflush_r+0xa>
 800caca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cacc:	07d0      	lsls	r0, r2, #31
 800cace:	d404      	bmi.n	800cada <_fflush_r+0x3a>
 800cad0:	0599      	lsls	r1, r3, #22
 800cad2:	d402      	bmi.n	800cada <_fflush_r+0x3a>
 800cad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cad6:	f000 f915 	bl	800cd04 <__retarget_lock_acquire_recursive>
 800cada:	4628      	mov	r0, r5
 800cadc:	4621      	mov	r1, r4
 800cade:	f7ff ff59 	bl	800c994 <__sflush_r>
 800cae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cae4:	07da      	lsls	r2, r3, #31
 800cae6:	4605      	mov	r5, r0
 800cae8:	d4e0      	bmi.n	800caac <_fflush_r+0xc>
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	059b      	lsls	r3, r3, #22
 800caee:	d4dd      	bmi.n	800caac <_fflush_r+0xc>
 800caf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caf2:	f000 f908 	bl	800cd06 <__retarget_lock_release_recursive>
 800caf6:	e7d9      	b.n	800caac <_fflush_r+0xc>
 800caf8:	4b05      	ldr	r3, [pc, #20]	; (800cb10 <_fflush_r+0x70>)
 800cafa:	429c      	cmp	r4, r3
 800cafc:	d101      	bne.n	800cb02 <_fflush_r+0x62>
 800cafe:	68ac      	ldr	r4, [r5, #8]
 800cb00:	e7df      	b.n	800cac2 <_fflush_r+0x22>
 800cb02:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <_fflush_r+0x74>)
 800cb04:	429c      	cmp	r4, r3
 800cb06:	bf08      	it	eq
 800cb08:	68ec      	ldreq	r4, [r5, #12]
 800cb0a:	e7da      	b.n	800cac2 <_fflush_r+0x22>
 800cb0c:	08010304 	.word	0x08010304
 800cb10:	08010324 	.word	0x08010324
 800cb14:	080102e4 	.word	0x080102e4

0800cb18 <std>:
 800cb18:	2300      	movs	r3, #0
 800cb1a:	b510      	push	{r4, lr}
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb26:	6083      	str	r3, [r0, #8]
 800cb28:	8181      	strh	r1, [r0, #12]
 800cb2a:	6643      	str	r3, [r0, #100]	; 0x64
 800cb2c:	81c2      	strh	r2, [r0, #14]
 800cb2e:	6183      	str	r3, [r0, #24]
 800cb30:	4619      	mov	r1, r3
 800cb32:	2208      	movs	r2, #8
 800cb34:	305c      	adds	r0, #92	; 0x5c
 800cb36:	f7fd fb53 	bl	800a1e0 <memset>
 800cb3a:	4b05      	ldr	r3, [pc, #20]	; (800cb50 <std+0x38>)
 800cb3c:	6263      	str	r3, [r4, #36]	; 0x24
 800cb3e:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <std+0x3c>)
 800cb40:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb42:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <std+0x40>)
 800cb44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb46:	4b05      	ldr	r3, [pc, #20]	; (800cb5c <std+0x44>)
 800cb48:	6224      	str	r4, [r4, #32]
 800cb4a:	6323      	str	r3, [r4, #48]	; 0x30
 800cb4c:	bd10      	pop	{r4, pc}
 800cb4e:	bf00      	nop
 800cb50:	0800ce6d 	.word	0x0800ce6d
 800cb54:	0800ce8f 	.word	0x0800ce8f
 800cb58:	0800cec7 	.word	0x0800cec7
 800cb5c:	0800ceeb 	.word	0x0800ceeb

0800cb60 <_cleanup_r>:
 800cb60:	4901      	ldr	r1, [pc, #4]	; (800cb68 <_cleanup_r+0x8>)
 800cb62:	f000 b8af 	b.w	800ccc4 <_fwalk_reent>
 800cb66:	bf00      	nop
 800cb68:	0800caa1 	.word	0x0800caa1

0800cb6c <__sfmoreglue>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	2268      	movs	r2, #104	; 0x68
 800cb70:	1e4d      	subs	r5, r1, #1
 800cb72:	4355      	muls	r5, r2
 800cb74:	460e      	mov	r6, r1
 800cb76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb7a:	f7ff fa65 	bl	800c048 <_malloc_r>
 800cb7e:	4604      	mov	r4, r0
 800cb80:	b140      	cbz	r0, 800cb94 <__sfmoreglue+0x28>
 800cb82:	2100      	movs	r1, #0
 800cb84:	e9c0 1600 	strd	r1, r6, [r0]
 800cb88:	300c      	adds	r0, #12
 800cb8a:	60a0      	str	r0, [r4, #8]
 800cb8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb90:	f7fd fb26 	bl	800a1e0 <memset>
 800cb94:	4620      	mov	r0, r4
 800cb96:	bd70      	pop	{r4, r5, r6, pc}

0800cb98 <__sfp_lock_acquire>:
 800cb98:	4801      	ldr	r0, [pc, #4]	; (800cba0 <__sfp_lock_acquire+0x8>)
 800cb9a:	f000 b8b3 	b.w	800cd04 <__retarget_lock_acquire_recursive>
 800cb9e:	bf00      	nop
 800cba0:	20000b4d 	.word	0x20000b4d

0800cba4 <__sfp_lock_release>:
 800cba4:	4801      	ldr	r0, [pc, #4]	; (800cbac <__sfp_lock_release+0x8>)
 800cba6:	f000 b8ae 	b.w	800cd06 <__retarget_lock_release_recursive>
 800cbaa:	bf00      	nop
 800cbac:	20000b4d 	.word	0x20000b4d

0800cbb0 <__sinit_lock_acquire>:
 800cbb0:	4801      	ldr	r0, [pc, #4]	; (800cbb8 <__sinit_lock_acquire+0x8>)
 800cbb2:	f000 b8a7 	b.w	800cd04 <__retarget_lock_acquire_recursive>
 800cbb6:	bf00      	nop
 800cbb8:	20000b4e 	.word	0x20000b4e

0800cbbc <__sinit_lock_release>:
 800cbbc:	4801      	ldr	r0, [pc, #4]	; (800cbc4 <__sinit_lock_release+0x8>)
 800cbbe:	f000 b8a2 	b.w	800cd06 <__retarget_lock_release_recursive>
 800cbc2:	bf00      	nop
 800cbc4:	20000b4e 	.word	0x20000b4e

0800cbc8 <__sinit>:
 800cbc8:	b510      	push	{r4, lr}
 800cbca:	4604      	mov	r4, r0
 800cbcc:	f7ff fff0 	bl	800cbb0 <__sinit_lock_acquire>
 800cbd0:	69a3      	ldr	r3, [r4, #24]
 800cbd2:	b11b      	cbz	r3, 800cbdc <__sinit+0x14>
 800cbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbd8:	f7ff bff0 	b.w	800cbbc <__sinit_lock_release>
 800cbdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbe0:	6523      	str	r3, [r4, #80]	; 0x50
 800cbe2:	4b13      	ldr	r3, [pc, #76]	; (800cc30 <__sinit+0x68>)
 800cbe4:	4a13      	ldr	r2, [pc, #76]	; (800cc34 <__sinit+0x6c>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	62a2      	str	r2, [r4, #40]	; 0x28
 800cbea:	42a3      	cmp	r3, r4
 800cbec:	bf04      	itt	eq
 800cbee:	2301      	moveq	r3, #1
 800cbf0:	61a3      	streq	r3, [r4, #24]
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	f000 f820 	bl	800cc38 <__sfp>
 800cbf8:	6060      	str	r0, [r4, #4]
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f000 f81c 	bl	800cc38 <__sfp>
 800cc00:	60a0      	str	r0, [r4, #8]
 800cc02:	4620      	mov	r0, r4
 800cc04:	f000 f818 	bl	800cc38 <__sfp>
 800cc08:	2200      	movs	r2, #0
 800cc0a:	60e0      	str	r0, [r4, #12]
 800cc0c:	2104      	movs	r1, #4
 800cc0e:	6860      	ldr	r0, [r4, #4]
 800cc10:	f7ff ff82 	bl	800cb18 <std>
 800cc14:	68a0      	ldr	r0, [r4, #8]
 800cc16:	2201      	movs	r2, #1
 800cc18:	2109      	movs	r1, #9
 800cc1a:	f7ff ff7d 	bl	800cb18 <std>
 800cc1e:	68e0      	ldr	r0, [r4, #12]
 800cc20:	2202      	movs	r2, #2
 800cc22:	2112      	movs	r1, #18
 800cc24:	f7ff ff78 	bl	800cb18 <std>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	61a3      	str	r3, [r4, #24]
 800cc2c:	e7d2      	b.n	800cbd4 <__sinit+0xc>
 800cc2e:	bf00      	nop
 800cc30:	0800ff6c 	.word	0x0800ff6c
 800cc34:	0800cb61 	.word	0x0800cb61

0800cc38 <__sfp>:
 800cc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3a:	4607      	mov	r7, r0
 800cc3c:	f7ff ffac 	bl	800cb98 <__sfp_lock_acquire>
 800cc40:	4b1e      	ldr	r3, [pc, #120]	; (800ccbc <__sfp+0x84>)
 800cc42:	681e      	ldr	r6, [r3, #0]
 800cc44:	69b3      	ldr	r3, [r6, #24]
 800cc46:	b913      	cbnz	r3, 800cc4e <__sfp+0x16>
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f7ff ffbd 	bl	800cbc8 <__sinit>
 800cc4e:	3648      	adds	r6, #72	; 0x48
 800cc50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc54:	3b01      	subs	r3, #1
 800cc56:	d503      	bpl.n	800cc60 <__sfp+0x28>
 800cc58:	6833      	ldr	r3, [r6, #0]
 800cc5a:	b30b      	cbz	r3, 800cca0 <__sfp+0x68>
 800cc5c:	6836      	ldr	r6, [r6, #0]
 800cc5e:	e7f7      	b.n	800cc50 <__sfp+0x18>
 800cc60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc64:	b9d5      	cbnz	r5, 800cc9c <__sfp+0x64>
 800cc66:	4b16      	ldr	r3, [pc, #88]	; (800ccc0 <__sfp+0x88>)
 800cc68:	60e3      	str	r3, [r4, #12]
 800cc6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc6e:	6665      	str	r5, [r4, #100]	; 0x64
 800cc70:	f000 f847 	bl	800cd02 <__retarget_lock_init_recursive>
 800cc74:	f7ff ff96 	bl	800cba4 <__sfp_lock_release>
 800cc78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc80:	6025      	str	r5, [r4, #0]
 800cc82:	61a5      	str	r5, [r4, #24]
 800cc84:	2208      	movs	r2, #8
 800cc86:	4629      	mov	r1, r5
 800cc88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc8c:	f7fd faa8 	bl	800a1e0 <memset>
 800cc90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc98:	4620      	mov	r0, r4
 800cc9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc9c:	3468      	adds	r4, #104	; 0x68
 800cc9e:	e7d9      	b.n	800cc54 <__sfp+0x1c>
 800cca0:	2104      	movs	r1, #4
 800cca2:	4638      	mov	r0, r7
 800cca4:	f7ff ff62 	bl	800cb6c <__sfmoreglue>
 800cca8:	4604      	mov	r4, r0
 800ccaa:	6030      	str	r0, [r6, #0]
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d1d5      	bne.n	800cc5c <__sfp+0x24>
 800ccb0:	f7ff ff78 	bl	800cba4 <__sfp_lock_release>
 800ccb4:	230c      	movs	r3, #12
 800ccb6:	603b      	str	r3, [r7, #0]
 800ccb8:	e7ee      	b.n	800cc98 <__sfp+0x60>
 800ccba:	bf00      	nop
 800ccbc:	0800ff6c 	.word	0x0800ff6c
 800ccc0:	ffff0001 	.word	0xffff0001

0800ccc4 <_fwalk_reent>:
 800ccc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccc8:	4606      	mov	r6, r0
 800ccca:	4688      	mov	r8, r1
 800cccc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ccd0:	2700      	movs	r7, #0
 800ccd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ccd6:	f1b9 0901 	subs.w	r9, r9, #1
 800ccda:	d505      	bpl.n	800cce8 <_fwalk_reent+0x24>
 800ccdc:	6824      	ldr	r4, [r4, #0]
 800ccde:	2c00      	cmp	r4, #0
 800cce0:	d1f7      	bne.n	800ccd2 <_fwalk_reent+0xe>
 800cce2:	4638      	mov	r0, r7
 800cce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cce8:	89ab      	ldrh	r3, [r5, #12]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d907      	bls.n	800ccfe <_fwalk_reent+0x3a>
 800ccee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	d003      	beq.n	800ccfe <_fwalk_reent+0x3a>
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	47c0      	blx	r8
 800ccfc:	4307      	orrs	r7, r0
 800ccfe:	3568      	adds	r5, #104	; 0x68
 800cd00:	e7e9      	b.n	800ccd6 <_fwalk_reent+0x12>

0800cd02 <__retarget_lock_init_recursive>:
 800cd02:	4770      	bx	lr

0800cd04 <__retarget_lock_acquire_recursive>:
 800cd04:	4770      	bx	lr

0800cd06 <__retarget_lock_release_recursive>:
 800cd06:	4770      	bx	lr

0800cd08 <__swhatbuf_r>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	460e      	mov	r6, r1
 800cd0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd10:	2900      	cmp	r1, #0
 800cd12:	b096      	sub	sp, #88	; 0x58
 800cd14:	4614      	mov	r4, r2
 800cd16:	461d      	mov	r5, r3
 800cd18:	da08      	bge.n	800cd2c <__swhatbuf_r+0x24>
 800cd1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	602a      	str	r2, [r5, #0]
 800cd22:	061a      	lsls	r2, r3, #24
 800cd24:	d410      	bmi.n	800cd48 <__swhatbuf_r+0x40>
 800cd26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd2a:	e00e      	b.n	800cd4a <__swhatbuf_r+0x42>
 800cd2c:	466a      	mov	r2, sp
 800cd2e:	f000 f903 	bl	800cf38 <_fstat_r>
 800cd32:	2800      	cmp	r0, #0
 800cd34:	dbf1      	blt.n	800cd1a <__swhatbuf_r+0x12>
 800cd36:	9a01      	ldr	r2, [sp, #4]
 800cd38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd40:	425a      	negs	r2, r3
 800cd42:	415a      	adcs	r2, r3
 800cd44:	602a      	str	r2, [r5, #0]
 800cd46:	e7ee      	b.n	800cd26 <__swhatbuf_r+0x1e>
 800cd48:	2340      	movs	r3, #64	; 0x40
 800cd4a:	2000      	movs	r0, #0
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	b016      	add	sp, #88	; 0x58
 800cd50:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd54 <__smakebuf_r>:
 800cd54:	898b      	ldrh	r3, [r1, #12]
 800cd56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd58:	079d      	lsls	r5, r3, #30
 800cd5a:	4606      	mov	r6, r0
 800cd5c:	460c      	mov	r4, r1
 800cd5e:	d507      	bpl.n	800cd70 <__smakebuf_r+0x1c>
 800cd60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	6123      	str	r3, [r4, #16]
 800cd68:	2301      	movs	r3, #1
 800cd6a:	6163      	str	r3, [r4, #20]
 800cd6c:	b002      	add	sp, #8
 800cd6e:	bd70      	pop	{r4, r5, r6, pc}
 800cd70:	ab01      	add	r3, sp, #4
 800cd72:	466a      	mov	r2, sp
 800cd74:	f7ff ffc8 	bl	800cd08 <__swhatbuf_r>
 800cd78:	9900      	ldr	r1, [sp, #0]
 800cd7a:	4605      	mov	r5, r0
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	f7ff f963 	bl	800c048 <_malloc_r>
 800cd82:	b948      	cbnz	r0, 800cd98 <__smakebuf_r+0x44>
 800cd84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd88:	059a      	lsls	r2, r3, #22
 800cd8a:	d4ef      	bmi.n	800cd6c <__smakebuf_r+0x18>
 800cd8c:	f023 0303 	bic.w	r3, r3, #3
 800cd90:	f043 0302 	orr.w	r3, r3, #2
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	e7e3      	b.n	800cd60 <__smakebuf_r+0xc>
 800cd98:	4b0d      	ldr	r3, [pc, #52]	; (800cdd0 <__smakebuf_r+0x7c>)
 800cd9a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd9c:	89a3      	ldrh	r3, [r4, #12]
 800cd9e:	6020      	str	r0, [r4, #0]
 800cda0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cda4:	81a3      	strh	r3, [r4, #12]
 800cda6:	9b00      	ldr	r3, [sp, #0]
 800cda8:	6163      	str	r3, [r4, #20]
 800cdaa:	9b01      	ldr	r3, [sp, #4]
 800cdac:	6120      	str	r0, [r4, #16]
 800cdae:	b15b      	cbz	r3, 800cdc8 <__smakebuf_r+0x74>
 800cdb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f000 f8d1 	bl	800cf5c <_isatty_r>
 800cdba:	b128      	cbz	r0, 800cdc8 <__smakebuf_r+0x74>
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	f023 0303 	bic.w	r3, r3, #3
 800cdc2:	f043 0301 	orr.w	r3, r3, #1
 800cdc6:	81a3      	strh	r3, [r4, #12]
 800cdc8:	89a0      	ldrh	r0, [r4, #12]
 800cdca:	4305      	orrs	r5, r0
 800cdcc:	81a5      	strh	r5, [r4, #12]
 800cdce:	e7cd      	b.n	800cd6c <__smakebuf_r+0x18>
 800cdd0:	0800cb61 	.word	0x0800cb61

0800cdd4 <_malloc_usable_size_r>:
 800cdd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdd8:	1f18      	subs	r0, r3, #4
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	bfbc      	itt	lt
 800cdde:	580b      	ldrlt	r3, [r1, r0]
 800cde0:	18c0      	addlt	r0, r0, r3
 800cde2:	4770      	bx	lr

0800cde4 <_raise_r>:
 800cde4:	291f      	cmp	r1, #31
 800cde6:	b538      	push	{r3, r4, r5, lr}
 800cde8:	4604      	mov	r4, r0
 800cdea:	460d      	mov	r5, r1
 800cdec:	d904      	bls.n	800cdf8 <_raise_r+0x14>
 800cdee:	2316      	movs	r3, #22
 800cdf0:	6003      	str	r3, [r0, #0]
 800cdf2:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf6:	bd38      	pop	{r3, r4, r5, pc}
 800cdf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cdfa:	b112      	cbz	r2, 800ce02 <_raise_r+0x1e>
 800cdfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce00:	b94b      	cbnz	r3, 800ce16 <_raise_r+0x32>
 800ce02:	4620      	mov	r0, r4
 800ce04:	f000 f830 	bl	800ce68 <_getpid_r>
 800ce08:	462a      	mov	r2, r5
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce12:	f000 b817 	b.w	800ce44 <_kill_r>
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d00a      	beq.n	800ce30 <_raise_r+0x4c>
 800ce1a:	1c59      	adds	r1, r3, #1
 800ce1c:	d103      	bne.n	800ce26 <_raise_r+0x42>
 800ce1e:	2316      	movs	r3, #22
 800ce20:	6003      	str	r3, [r0, #0]
 800ce22:	2001      	movs	r0, #1
 800ce24:	e7e7      	b.n	800cdf6 <_raise_r+0x12>
 800ce26:	2400      	movs	r4, #0
 800ce28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	4798      	blx	r3
 800ce30:	2000      	movs	r0, #0
 800ce32:	e7e0      	b.n	800cdf6 <_raise_r+0x12>

0800ce34 <raise>:
 800ce34:	4b02      	ldr	r3, [pc, #8]	; (800ce40 <raise+0xc>)
 800ce36:	4601      	mov	r1, r0
 800ce38:	6818      	ldr	r0, [r3, #0]
 800ce3a:	f7ff bfd3 	b.w	800cde4 <_raise_r>
 800ce3e:	bf00      	nop
 800ce40:	2000018c 	.word	0x2000018c

0800ce44 <_kill_r>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4d07      	ldr	r5, [pc, #28]	; (800ce64 <_kill_r+0x20>)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	4611      	mov	r1, r2
 800ce50:	602b      	str	r3, [r5, #0]
 800ce52:	f7f6 f819 	bl	8002e88 <_kill>
 800ce56:	1c43      	adds	r3, r0, #1
 800ce58:	d102      	bne.n	800ce60 <_kill_r+0x1c>
 800ce5a:	682b      	ldr	r3, [r5, #0]
 800ce5c:	b103      	cbz	r3, 800ce60 <_kill_r+0x1c>
 800ce5e:	6023      	str	r3, [r4, #0]
 800ce60:	bd38      	pop	{r3, r4, r5, pc}
 800ce62:	bf00      	nop
 800ce64:	20000b48 	.word	0x20000b48

0800ce68 <_getpid_r>:
 800ce68:	f7f6 b806 	b.w	8002e78 <_getpid>

0800ce6c <__sread>:
 800ce6c:	b510      	push	{r4, lr}
 800ce6e:	460c      	mov	r4, r1
 800ce70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce74:	f000 f894 	bl	800cfa0 <_read_r>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	bfab      	itete	ge
 800ce7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce80:	181b      	addge	r3, r3, r0
 800ce82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce86:	bfac      	ite	ge
 800ce88:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce8a:	81a3      	strhlt	r3, [r4, #12]
 800ce8c:	bd10      	pop	{r4, pc}

0800ce8e <__swrite>:
 800ce8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce92:	461f      	mov	r7, r3
 800ce94:	898b      	ldrh	r3, [r1, #12]
 800ce96:	05db      	lsls	r3, r3, #23
 800ce98:	4605      	mov	r5, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	4616      	mov	r6, r2
 800ce9e:	d505      	bpl.n	800ceac <__swrite+0x1e>
 800cea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea4:	2302      	movs	r3, #2
 800cea6:	2200      	movs	r2, #0
 800cea8:	f000 f868 	bl	800cf7c <_lseek_r>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	4632      	mov	r2, r6
 800ceba:	463b      	mov	r3, r7
 800cebc:	4628      	mov	r0, r5
 800cebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cec2:	f000 b817 	b.w	800cef4 <_write_r>

0800cec6 <__sseek>:
 800cec6:	b510      	push	{r4, lr}
 800cec8:	460c      	mov	r4, r1
 800ceca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cece:	f000 f855 	bl	800cf7c <_lseek_r>
 800ced2:	1c43      	adds	r3, r0, #1
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	bf15      	itete	ne
 800ced8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cee2:	81a3      	strheq	r3, [r4, #12]
 800cee4:	bf18      	it	ne
 800cee6:	81a3      	strhne	r3, [r4, #12]
 800cee8:	bd10      	pop	{r4, pc}

0800ceea <__sclose>:
 800ceea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceee:	f000 b813 	b.w	800cf18 <_close_r>
	...

0800cef4 <_write_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4d07      	ldr	r5, [pc, #28]	; (800cf14 <_write_r+0x20>)
 800cef8:	4604      	mov	r4, r0
 800cefa:	4608      	mov	r0, r1
 800cefc:	4611      	mov	r1, r2
 800cefe:	2200      	movs	r2, #0
 800cf00:	602a      	str	r2, [r5, #0]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f7f5 fff7 	bl	8002ef6 <_write>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d102      	bne.n	800cf12 <_write_r+0x1e>
 800cf0c:	682b      	ldr	r3, [r5, #0]
 800cf0e:	b103      	cbz	r3, 800cf12 <_write_r+0x1e>
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	20000b48 	.word	0x20000b48

0800cf18 <_close_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d06      	ldr	r5, [pc, #24]	; (800cf34 <_close_r+0x1c>)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	4604      	mov	r4, r0
 800cf20:	4608      	mov	r0, r1
 800cf22:	602b      	str	r3, [r5, #0]
 800cf24:	f7f6 f803 	bl	8002f2e <_close>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d102      	bne.n	800cf32 <_close_r+0x1a>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	b103      	cbz	r3, 800cf32 <_close_r+0x1a>
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	bd38      	pop	{r3, r4, r5, pc}
 800cf34:	20000b48 	.word	0x20000b48

0800cf38 <_fstat_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4d07      	ldr	r5, [pc, #28]	; (800cf58 <_fstat_r+0x20>)
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	4604      	mov	r4, r0
 800cf40:	4608      	mov	r0, r1
 800cf42:	4611      	mov	r1, r2
 800cf44:	602b      	str	r3, [r5, #0]
 800cf46:	f7f5 fffe 	bl	8002f46 <_fstat>
 800cf4a:	1c43      	adds	r3, r0, #1
 800cf4c:	d102      	bne.n	800cf54 <_fstat_r+0x1c>
 800cf4e:	682b      	ldr	r3, [r5, #0]
 800cf50:	b103      	cbz	r3, 800cf54 <_fstat_r+0x1c>
 800cf52:	6023      	str	r3, [r4, #0]
 800cf54:	bd38      	pop	{r3, r4, r5, pc}
 800cf56:	bf00      	nop
 800cf58:	20000b48 	.word	0x20000b48

0800cf5c <_isatty_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d06      	ldr	r5, [pc, #24]	; (800cf78 <_isatty_r+0x1c>)
 800cf60:	2300      	movs	r3, #0
 800cf62:	4604      	mov	r4, r0
 800cf64:	4608      	mov	r0, r1
 800cf66:	602b      	str	r3, [r5, #0]
 800cf68:	f7f5 fffd 	bl	8002f66 <_isatty>
 800cf6c:	1c43      	adds	r3, r0, #1
 800cf6e:	d102      	bne.n	800cf76 <_isatty_r+0x1a>
 800cf70:	682b      	ldr	r3, [r5, #0]
 800cf72:	b103      	cbz	r3, 800cf76 <_isatty_r+0x1a>
 800cf74:	6023      	str	r3, [r4, #0]
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
 800cf78:	20000b48 	.word	0x20000b48

0800cf7c <_lseek_r>:
 800cf7c:	b538      	push	{r3, r4, r5, lr}
 800cf7e:	4d07      	ldr	r5, [pc, #28]	; (800cf9c <_lseek_r+0x20>)
 800cf80:	4604      	mov	r4, r0
 800cf82:	4608      	mov	r0, r1
 800cf84:	4611      	mov	r1, r2
 800cf86:	2200      	movs	r2, #0
 800cf88:	602a      	str	r2, [r5, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	f7f5 fff6 	bl	8002f7c <_lseek>
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	d102      	bne.n	800cf9a <_lseek_r+0x1e>
 800cf94:	682b      	ldr	r3, [r5, #0]
 800cf96:	b103      	cbz	r3, 800cf9a <_lseek_r+0x1e>
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
 800cf9c:	20000b48 	.word	0x20000b48

0800cfa0 <_read_r>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	4d07      	ldr	r5, [pc, #28]	; (800cfc0 <_read_r+0x20>)
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	4608      	mov	r0, r1
 800cfa8:	4611      	mov	r1, r2
 800cfaa:	2200      	movs	r2, #0
 800cfac:	602a      	str	r2, [r5, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	f7f5 ff84 	bl	8002ebc <_read>
 800cfb4:	1c43      	adds	r3, r0, #1
 800cfb6:	d102      	bne.n	800cfbe <_read_r+0x1e>
 800cfb8:	682b      	ldr	r3, [r5, #0]
 800cfba:	b103      	cbz	r3, 800cfbe <_read_r+0x1e>
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	bd38      	pop	{r3, r4, r5, pc}
 800cfc0:	20000b48 	.word	0x20000b48

0800cfc4 <roundf>:
 800cfc4:	ee10 0a10 	vmov	r0, s0
 800cfc8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800cfcc:	3a7f      	subs	r2, #127	; 0x7f
 800cfce:	2a16      	cmp	r2, #22
 800cfd0:	dc15      	bgt.n	800cffe <roundf+0x3a>
 800cfd2:	2a00      	cmp	r2, #0
 800cfd4:	da08      	bge.n	800cfe8 <roundf+0x24>
 800cfd6:	3201      	adds	r2, #1
 800cfd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800cfdc:	d101      	bne.n	800cfe2 <roundf+0x1e>
 800cfde:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800cfe2:	ee00 3a10 	vmov	s0, r3
 800cfe6:	4770      	bx	lr
 800cfe8:	4907      	ldr	r1, [pc, #28]	; (800d008 <roundf+0x44>)
 800cfea:	4111      	asrs	r1, r2
 800cfec:	4208      	tst	r0, r1
 800cfee:	d0fa      	beq.n	800cfe6 <roundf+0x22>
 800cff0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cff4:	4113      	asrs	r3, r2
 800cff6:	4403      	add	r3, r0
 800cff8:	ea23 0301 	bic.w	r3, r3, r1
 800cffc:	e7f1      	b.n	800cfe2 <roundf+0x1e>
 800cffe:	2a80      	cmp	r2, #128	; 0x80
 800d000:	d1f1      	bne.n	800cfe6 <roundf+0x22>
 800d002:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d006:	4770      	bx	lr
 800d008:	007fffff 	.word	0x007fffff

0800d00c <_init>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	bf00      	nop
 800d010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d012:	bc08      	pop	{r3}
 800d014:	469e      	mov	lr, r3
 800d016:	4770      	bx	lr

0800d018 <_fini>:
 800d018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01a:	bf00      	nop
 800d01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d01e:	bc08      	pop	{r3}
 800d020:	469e      	mov	lr, r3
 800d022:	4770      	bx	lr
