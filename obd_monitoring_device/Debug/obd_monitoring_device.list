
obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025ac  0800b670  0800b670  0001b670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc1c  0800dc1c  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc24  0800dc24  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc24  0800dc24  0001dc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc28  0800dc28  0001dc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800dc2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000358  0800df84  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  0800df84  000209c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac60  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0e  00000000  00000000  0003afe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0003e9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00040040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024995  00000000  00000000  00041510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfb8  00000000  00000000  00065ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d69d0  00000000  00000000  00081e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015882d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f2c  00000000  00000000  00158880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b654 	.word	0x0800b654

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800b654 	.word	0x0800b654

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CAN1_Init>:
extern IWDG_HandleTypeDef hiwdg;
extern CAN_HandleTypeDef hcan1;
uint32_t tx_mailbox;

void MX_CAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_CAN1_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f6e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f9c:	f002 f8b4 	bl	8003108 <HAL_CAN_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_CAN1_Init+0x5e>
	{
	  Error_Handler();
 8000fa6:	f001 fa8b 	bl	80024c0 <Error_Handler>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000398 	.word	0x20000398
 8000fb4:	40006400 	.word	0x40006400

08000fb8 <canConfig>:

void canConfig(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8000fca:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000fce:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8000fd4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fd8:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <canConfig+0x64>)
 8000fec:	f002 f987 	bl	80032fe <HAL_CAN_ConfigFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <canConfig+0x42>
	{
		Error_Handler();
 8000ff6:	f001 fa63 	bl	80024c0 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <canConfig+0x64>)
 8000ffc:	f002 fa49 	bl	8003492 <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <canConfig+0x52>
	{
		Error_Handler();
 8001006:	f001 fa5b 	bl	80024c0 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <canConfig+0x64>)
 800100e:	f002 fc66 	bl	80038de <HAL_CAN_ActivateNotification>
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000398 	.word	0x20000398

08001020 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	f107 0214 	add.w	r2, r7, #20
 8001030:	2100      	movs	r1, #0
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001034:	f002 fb41 	bl	80036ba <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fba7 	bl	8001790 <OBD2_PID_Parse>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001048:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	OBD2_ShowOnDisplay(obd_comm.current_value);
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800104e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f000 ff9d 	bl	8001f94 <OBD2_ShowOnDisplay>

	//HAL_IWDG_Refresh(&hiwdg);
}
 800105a:	bf00      	nop
 800105c:	3730      	adds	r7, #48	; 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000398 	.word	0x20000398
 8001068:	20000538 	.word	0x20000538

0800106c <CAN_SEND_MESSAGE>:

void CAN_SEND_MESSAGE(uint8_t *tx_frame)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = DEVICE_CAN_ID;
 8001074:	f240 73df 	movw	r3, #2015	; 0x7df
 8001078:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 800107a:	2308      	movs	r3, #8
 800107c:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_frame, &tx_mailbox) != HAL_OK)
 8001086:	f107 0108 	add.w	r1, r7, #8
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <CAN_SEND_MESSAGE+0x3c>)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <CAN_SEND_MESSAGE+0x40>)
 8001090:	f002 fa43 	bl	800351a <HAL_CAN_AddTxMessage>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <CAN_SEND_MESSAGE+0x32>
	{
		Error_Handler();
 800109a:	f001 fa11 	bl	80024c0 <Error_Handler>
	}

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000374 	.word	0x20000374
 80010ac:	20000398 	.word	0x20000398

080010b0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	60da      	str	r2, [r3, #12]
//	__HAL_CAN_Receive_IT(hcan, CAN_RX_FIFO0);
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <KLine_Init>:
static void MX_GPIO_KLineUART_Init(void);
static void UART_PIN_State(uint8_t state);
static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght);
static void MX_USART1_UART_Init(uint16_t baud_rate);

obd_protocol KLine_Init(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 80010d2:	f000 f909 	bl	80012e8 <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 80010d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010da:	f001 fff1 	bl	80030c0 <HAL_Delay>
	UART_PIN_State(0); //0
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f918 	bl	8001314 <UART_PIN_State>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f001 ffeb 	bl	80030c0 <HAL_Delay>
	UART_PIN_State(1);//11
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 f912 	bl	8001314 <UART_PIN_State>
	HAL_Delay(400);
 80010f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010f4:	f001 ffe4 	bl	80030c0 <HAL_Delay>
	UART_PIN_State(0);//00
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 f90b 	bl	8001314 <UART_PIN_State>
	HAL_Delay(400);
 80010fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001102:	f001 ffdd 	bl	80030c0 <HAL_Delay>
	UART_PIN_State(1);//11
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f904 	bl	8001314 <UART_PIN_State>
	HAL_Delay(400);
 800110c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001110:	f001 ffd6 	bl	80030c0 <HAL_Delay>
	UART_PIN_State(0);//00
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f8fd 	bl	8001314 <UART_PIN_State>
	HAL_Delay(400);
 800111a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800111e:	f001 ffcf 	bl	80030c0 <HAL_Delay>
	UART_PIN_State(1);//1
 8001122:	2001      	movs	r0, #1
 8001124:	f000 f8f6 	bl	8001314 <UART_PIN_State>

	MX_USART1_UART_Init(10400);
 8001128:	f642 00a0 	movw	r0, #10400	; 0x28a0
 800112c:	f000 fa10 	bl	8001550 <MX_USART1_UART_Init>

	HAL_UART_Receive(&huart1, uartBuf, 3, 500);
 8001130:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001134:	2203      	movs	r2, #3
 8001136:	492d      	ldr	r1, [pc, #180]	; (80011ec <KLine_Init+0x120>)
 8001138:	482d      	ldr	r0, [pc, #180]	; (80011f0 <KLine_Init+0x124>)
 800113a:	f006 f8be 	bl	80072ba <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <KLine_Init+0x120>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b55      	cmp	r3, #85	; 0x55
 8001144:	d001      	beq.n	800114a <KLine_Init+0x7e>
	{
		return OBD_NONE;
 8001146:	2300      	movs	r3, #0
 8001148:	e04b      	b.n	80011e2 <KLine_Init+0x116>
	}
	else if(uartBuf[1] == uartBuf[2])
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <KLine_Init+0x120>)
 800114c:	785a      	ldrb	r2, [r3, #1]
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <KLine_Init+0x120>)
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	429a      	cmp	r2, r3
 8001154:	d126      	bne.n	80011a4 <KLine_Init+0xd8>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <KLine_Init+0x120>)
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	43db      	mvns	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 8001160:	2019      	movs	r0, #25
 8001162:	f001 ffad 	bl	80030c0 <HAL_Delay>
			HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 8001166:	1df9      	adds	r1, r7, #7
 8001168:	2332      	movs	r3, #50	; 0x32
 800116a:	2201      	movs	r2, #1
 800116c:	4820      	ldr	r0, [pc, #128]	; (80011f0 <KLine_Init+0x124>)
 800116e:	f006 f810 	bl	8007192 <HAL_UART_Transmit>
			HAL_Delay(25);
 8001172:	2019      	movs	r0, #25
 8001174:	f001 ffa4 	bl	80030c0 <HAL_Delay>
			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <KLine_Init+0x124>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	8b1b      	ldrh	r3, [r3, #24]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <KLine_Init+0x124>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0208 	orr.w	r2, r2, #8
 8001188:	b292      	uxth	r2, r2
 800118a:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	2201      	movs	r2, #1
 8001190:	4918      	ldr	r1, [pc, #96]	; (80011f4 <KLine_Init+0x128>)
 8001192:	4817      	ldr	r0, [pc, #92]	; (80011f0 <KLine_Init+0x124>)
 8001194:	f006 f891 	bl	80072ba <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
			kline_kb = uartBuf[1];
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <KLine_Init+0x120>)
 800119a:	785a      	ldrb	r2, [r3, #1]
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <KLine_Init+0x12c>)
 800119e:	701a      	strb	r2, [r3, #0]
			return OBD_PROTO_ISO9141;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e01e      	b.n	80011e2 <KLine_Init+0x116>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <KLine_Init+0x120>)
 80011a6:	785b      	ldrb	r3, [r3, #1]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 80011ae:	2019      	movs	r0, #25
 80011b0:	f001 ff86 	bl	80030c0 <HAL_Delay>
		HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 80011b4:	1db9      	adds	r1, r7, #6
 80011b6:	2332      	movs	r3, #50	; 0x32
 80011b8:	2201      	movs	r2, #1
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <KLine_Init+0x124>)
 80011bc:	f005 ffe9 	bl	8007192 <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <KLine_Init+0x124>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	8b1b      	ldrh	r3, [r3, #24]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <KLine_Init+0x124>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0208 	orr.w	r2, r2, #8
 80011d0:	b292      	uxth	r2, r2
 80011d2:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	2201      	movs	r2, #1
 80011d8:	4906      	ldr	r1, [pc, #24]	; (80011f4 <KLine_Init+0x128>)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <KLine_Init+0x124>)
 80011dc:	f006 f86d 	bl	80072ba <HAL_UART_Receive>
		return OBD_PROTO_KWP2000_SLOW;
 80011e0:	2302      	movs	r3, #2
	}
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000052c 	.word	0x2000052c
 80011f0:	20000460 	.word	0x20000460
 80011f4:	20000390 	.word	0x20000390
 80011f8:	20000391 	.word	0x20000391

080011fc <KWP2000_Fast_Init>:

obd_protocol KWP2000_Fast_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 8001202:	4a33      	ldr	r2, [pc, #204]	; (80012d0 <KWP2000_Fast_Init+0xd4>)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120a:	6018      	str	r0, [r3, #0]
 800120c:	3304      	adds	r3, #4
 800120e:	7019      	strb	r1, [r3, #0]
//	uint8_t resp_msg[7]={0};
	checksum = 0;
 8001210:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <KWP2000_Fast_Init+0xd8>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
	msg_type = 1;
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <KWP2000_Fast_Init+0xdc>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]

	HAL_UART_DeInit(&huart1);
 800121c:	482f      	ldr	r0, [pc, #188]	; (80012dc <KWP2000_Fast_Init+0xe0>)
 800121e:	f005 ff7f 	bl	8007120 <HAL_UART_DeInit>
	HAL_Delay(3000);
 8001222:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001226:	f001 ff4b 	bl	80030c0 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 800122a:	f000 f85d 	bl	80012e8 <MX_GPIO_KLineUART_Init>
	UART_PIN_State(0);
 800122e:	2000      	movs	r0, #0
 8001230:	f000 f870 	bl	8001314 <UART_PIN_State>
	HAL_Delay(25);
 8001234:	2019      	movs	r0, #25
 8001236:	f001 ff43 	bl	80030c0 <HAL_Delay>
	UART_PIN_State(1);
 800123a:	2001      	movs	r0, #1
 800123c:	f000 f86a 	bl	8001314 <UART_PIN_State>
	HAL_Delay(25);
 8001240:	2019      	movs	r0, #25
 8001242:	f001 ff3d 	bl	80030c0 <HAL_Delay>
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001246:	4825      	ldr	r0, [pc, #148]	; (80012dc <KWP2000_Fast_Init+0xe0>)
 8001248:	f005 ff1c 	bl	8007084 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <KWP2000_Fast_Init+0x5a>
	{
		Error_Handler();
 8001252:	f001 f935 	bl	80024c0 <Error_Handler>
	}
//	MX_USART1_UART_Init(10400);
	HAL_UART_Transmit(&huart1, start_msg, 5, 10);
 8001256:	1d39      	adds	r1, r7, #4
 8001258:	230a      	movs	r3, #10
 800125a:	2205      	movs	r2, #5
 800125c:	481f      	ldr	r0, [pc, #124]	; (80012dc <KWP2000_Fast_Init+0xe0>)
 800125e:	f005 ff98 	bl	8007192 <HAL_UART_Transmit>
//	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
//	HAL_Delay(20);
	HAL_UART_Receive_DMA(&huart1, uartBuf, 8);
 8001262:	2208      	movs	r2, #8
 8001264:	491e      	ldr	r1, [pc, #120]	; (80012e0 <KWP2000_Fast_Init+0xe4>)
 8001266:	481d      	ldr	r0, [pc, #116]	; (80012dc <KWP2000_Fast_Init+0xe0>)
 8001268:	f006 f8f8 	bl	800745c <HAL_UART_Receive_DMA>
//	for(int i = 0; i < 7; i++)
//	{
//		resp_msg[i] = uartBuf[j];
//		j++;
//	}
	while(msg_type != 0)
 800126c:	e000      	b.n	8001270 <KWP2000_Fast_Init+0x74>
	{
		__NOP();
 800126e:	bf00      	nop
	while(msg_type != 0)
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <KWP2000_Fast_Init+0xdc>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1fa      	bne.n	800126e <KWP2000_Fast_Init+0x72>
	}

	for(int i = 1; i < 7; i++)
 8001278:	2301      	movs	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e00c      	b.n	8001298 <KWP2000_Fast_Init+0x9c>
	{
		checksum = checksum + uartBuf[i];
 800127e:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <KWP2000_Fast_Init+0xe4>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <KWP2000_Fast_Init+0xd8>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <KWP2000_Fast_Init+0xd8>)
 8001290:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 7; i++)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3301      	adds	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b06      	cmp	r3, #6
 800129c:	ddef      	ble.n	800127e <KWP2000_Fast_Init+0x82>
	}
	checksum = checksum % 256;
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <KWP2000_Fast_Init+0xd8>)
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <KWP2000_Fast_Init+0xd8>)
 80012a4:	701a      	strb	r2, [r3, #0]
	if(checksum == uartBuf[7] && checksum != 0)
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <KWP2000_Fast_Init+0xe4>)
 80012a8:	79da      	ldrb	r2, [r3, #7]
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <KWP2000_Fast_Init+0xd8>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d109      	bne.n	80012c6 <KWP2000_Fast_Init+0xca>
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <KWP2000_Fast_Init+0xd8>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <KWP2000_Fast_Init+0xca>
	{
		ecu_addr = uartBuf[3];
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <KWP2000_Fast_Init+0xe4>)
 80012bc:	78da      	ldrb	r2, [r3, #3]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <KWP2000_Fast_Init+0xe8>)
 80012c0:	701a      	strb	r2, [r3, #0]
		return OBD_PROTO_KWP2000_FAST;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e000      	b.n	80012c8 <KWP2000_Fast_Init+0xcc>
	}
	else
		return OBD_NONE;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	0800b670 	.word	0x0800b670
 80012d4:	2000038f 	.word	0x2000038f
 80012d8:	20000393 	.word	0x20000393
 80012dc:	20000460 	.word	0x20000460
 80012e0:	2000052c 	.word	0x2000052c
 80012e4:	20000390 	.word	0x20000390

080012e8 <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
 80012ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f003 f980 	bl	800460c <HAL_GPIO_Init>
}
 800130c:	bf00      	nop
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <UART_PIN_State>:

static void UART_PIN_State(uint8_t state)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d10e      	bne.n	8001342 <UART_PIN_State+0x2e>
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132e:	f003 fbd9 	bl	8004ae4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f003 fbd2 	bl	8004ae4 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}
 8001340:	e00d      	b.n	800135e <UART_PIN_State+0x4a>
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f003 fbca 	bl	8004ae4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f003 fbc3 	bl	8004ae4 <HAL_GPIO_WritePin>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <KLine_SEND_MESSAGE>:

void KLine_SEND_MESSAGE(uint8_t* tx_frame)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001370:	2368      	movs	r3, #104	; 0x68
 8001372:	733b      	strb	r3, [r7, #12]
 8001374:	236a      	movs	r3, #106	; 0x6a
 8001376:	737b      	strb	r3, [r7, #13]
 8001378:	23f1      	movs	r3, #241	; 0xf1
 800137a:	73bb      	strb	r3, [r7, #14]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	785b      	ldrb	r3, [r3, #1]
 8001386:	743b      	strb	r3, [r7, #16]
 8001388:	2300      	movs	r3, #0
 800138a:	747b      	strb	r3, [r7, #17]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fe3e 	bl	8002014 <PID_Get_Lenght>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <KLine_SEND_MESSAGE+0xb0>)
 800139e:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <KLine_SEND_MESSAGE+0xb4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e00d      	b.n	80013c8 <KLine_SEND_MESSAGE+0x60>
	{
		checksum += kline_msg[i];
 80013ac:	f107 020c 	add.w	r2, r7, #12
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	4413      	add	r3, r2
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <KLine_SEND_MESSAGE+0xb4>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <KLine_SEND_MESSAGE+0xb4>)
 80013c0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d9ee      	bls.n	80013ac <KLine_SEND_MESSAGE+0x44>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <KLine_SEND_MESSAGE+0xb4>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	747b      	strb	r3, [r7, #17]

	HAL_UART_Transmit(&huart1, kline_msg, sizeof(kline_msg), 12);
 80013d4:	f107 010c 	add.w	r1, r7, #12
 80013d8:	230c      	movs	r3, #12
 80013da:	2206      	movs	r2, #6
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <KLine_SEND_MESSAGE+0xb8>)
 80013de:	f005 fed8 	bl	8007192 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <KLine_SEND_MESSAGE+0xb8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	8b1b      	ldrh	r3, [r3, #24]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <KLine_SEND_MESSAGE+0xb8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0208 	orr.w	r2, r2, #8
 80013f2:	b292      	uxth	r2, r2
 80013f4:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 4);
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <KLine_SEND_MESSAGE+0xb0>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	3304      	adds	r3, #4
 80013fe:	b29b      	uxth	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <KLine_SEND_MESSAGE+0xbc>)
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <KLine_SEND_MESSAGE+0xb8>)
 8001406:	f006 f829 	bl	800745c <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 800140a:	203c      	movs	r0, #60	; 0x3c
 800140c:	f001 fe58 	bl	80030c0 <HAL_Delay>
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000392 	.word	0x20000392
 800141c:	2000038f 	.word	0x2000038f
 8001420:	20000460 	.word	0x20000460
 8001424:	20000378 	.word	0x20000378

08001428 <KWP2000_SEND_MESSAGE>:

void KWP2000_SEND_MESSAGE(uint8_t* tx_frame)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, 0x33, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001430:	23c2      	movs	r3, #194	; 0xc2
 8001432:	733b      	strb	r3, [r7, #12]
 8001434:	2333      	movs	r3, #51	; 0x33
 8001436:	737b      	strb	r3, [r7, #13]
 8001438:	23f1      	movs	r3, #241	; 0xf1
 800143a:	73bb      	strb	r3, [r7, #14]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	743b      	strb	r3, [r7, #16]
 8001448:	2300      	movs	r3, #0
 800144a:	747b      	strb	r3, [r7, #17]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fdde 	bl	8002014 <PID_Get_Lenght>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <KWP2000_SEND_MESSAGE+0xbc>)
 800145e:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <KWP2000_SEND_MESSAGE+0xc0>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	msg_type = 2;
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <KWP2000_SEND_MESSAGE+0xc4>)
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	e00d      	b.n	800148e <KWP2000_SEND_MESSAGE+0x66>
	{
		checksum += kwp_msg[i];
 8001472:	f107 020c 	add.w	r2, r7, #12
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	4413      	add	r3, r2
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <KWP2000_SEND_MESSAGE+0xc0>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <KWP2000_SEND_MESSAGE+0xc0>)
 8001486:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b04      	cmp	r3, #4
 8001492:	d9ee      	bls.n	8001472 <KWP2000_SEND_MESSAGE+0x4a>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <KWP2000_SEND_MESSAGE+0xc0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	747b      	strb	r3, [r7, #17]

	HAL_Delay(20);
 800149a:	2014      	movs	r0, #20
 800149c:	f001 fe10 	bl	80030c0 <HAL_Delay>

	HAL_UART_Transmit(&huart1, kwp_msg, sizeof(kwp_msg), 12);
 80014a0:	f107 010c 	add.w	r1, r7, #12
 80014a4:	230c      	movs	r3, #12
 80014a6:	2206      	movs	r2, #6
 80014a8:	4811      	ldr	r0, [pc, #68]	; (80014f0 <KWP2000_SEND_MESSAGE+0xc8>)
 80014aa:	f005 fe72 	bl	8007192 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <KWP2000_SEND_MESSAGE+0xc8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	8b1b      	ldrh	r3, [r3, #24]
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <KWP2000_SEND_MESSAGE+0xc8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0208 	orr.w	r2, r2, #8
 80014be:	b292      	uxth	r2, r2
 80014c0:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 5);
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <KWP2000_SEND_MESSAGE+0xbc>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3305      	adds	r3, #5
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4909      	ldr	r1, [pc, #36]	; (80014f4 <KWP2000_SEND_MESSAGE+0xcc>)
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <KWP2000_SEND_MESSAGE+0xc8>)
 80014d2:	f005 ffc3 	bl	800745c <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80014d6:	203c      	movs	r0, #60	; 0x3c
 80014d8:	f001 fdf2 	bl	80030c0 <HAL_Delay>
}
 80014dc:	bf00      	nop
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000392 	.word	0x20000392
 80014e8:	2000038f 	.word	0x2000038f
 80014ec:	20000393 	.word	0x20000393
 80014f0:	20000460 	.word	0x20000460
 80014f4:	20000378 	.word	0x20000378

080014f8 <Verify_Checksum>:

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	e009      	b.n	8001522 <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	4413      	add	r3, r2
 800151a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3301      	adds	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	3b01      	subs	r3, #1
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbf0      	blt.n	800150e <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	3b01      	subs	r3, #1
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	429a      	cmp	r2, r3
 800153a:	d101      	bne.n	8001540 <Verify_Checksum+0x48>
	{
		return 1;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <Verify_Checksum+0x4a>
	}
	return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(uint16_t baud_rate)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  huart1.Instance = USART1;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 800155c:	4a17      	ldr	r2, [pc, #92]	; (80015bc <MX_USART1_UART_Init+0x6c>)
 800155e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud_rate;
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 8001564:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 8001592:	2201      	movs	r2, #1
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 8001598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800159e:	4806      	ldr	r0, [pc, #24]	; (80015b8 <MX_USART1_UART_Init+0x68>)
 80015a0:	f005 fd70 	bl	8007084 <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80015aa:	f000 ff89 	bl	80024c0 <Error_Handler>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000460 	.word	0x20000460
 80015bc:	40013800 	.word	0x40013800

080015c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(msg_type == 1)
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_UART_RxCpltCallback+0x90>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d103      	bne.n	80015d8 <HAL_UART_RxCpltCallback+0x18>
	{
		msg_type = 0;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <HAL_UART_RxCpltCallback+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
	//		HAL_IWDG_Refresh(&hiwdg);
		}
	}


}
 80015d6:	e037      	b.n	8001648 <HAL_UART_RxCpltCallback+0x88>
	else if (msg_type == 2)
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_UART_RxCpltCallback+0x90>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d133      	bne.n	8001648 <HAL_UART_RxCpltCallback+0x88>
		if(Verify_Checksum(kline_rx_buf, pid_length + 5))
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_UART_RxCpltCallback+0x94>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3305      	adds	r3, #5
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4619      	mov	r1, r3
 80015ea:	481b      	ldr	r0, [pc, #108]	; (8001658 <HAL_UART_RxCpltCallback+0x98>)
 80015ec:	f7ff ff84 	bl	80014f8 <Verify_Checksum>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d028      	beq.n	8001648 <HAL_UART_RxCpltCallback+0x88>
			uint8_t j = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 80015fa:	2302      	movs	r3, #2
 80015fc:	73bb      	strb	r3, [r7, #14]
 80015fe:	e00b      	b.n	8001618 <HAL_UART_RxCpltCallback+0x58>
				rx_frame[j] = kline_rx_buf[i];
 8001600:	7bba      	ldrb	r2, [r7, #14]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4914      	ldr	r1, [pc, #80]	; (8001658 <HAL_UART_RxCpltCallback+0x98>)
 8001606:	5c89      	ldrb	r1, [r1, r2]
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_UART_RxCpltCallback+0x9c>)
 800160a:	54d1      	strb	r1, [r2, r3]
				j++;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	3301      	adds	r3, #1
 8001616:	73bb      	strb	r3, [r7, #14]
 8001618:	7bba      	ldrb	r2, [r7, #14]
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_UART_RxCpltCallback+0x94>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3304      	adds	r3, #4
 8001620:	429a      	cmp	r2, r3
 8001622:	dded      	ble.n	8001600 <HAL_UART_RxCpltCallback+0x40>
			msg_type = 0;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_UART_RxCpltCallback+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <HAL_UART_RxCpltCallback+0x9c>)
 800162c:	f000 f8b0 	bl	8001790 <OBD2_PID_Parse>
 8001630:	eef0 7a40 	vmov.f32	s15, s0
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_UART_RxCpltCallback+0xa0>)
 8001636:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			OBD2_ShowOnDisplay(obd_comm.current_value);
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_UART_RxCpltCallback+0xa0>)
 800163c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	f000 fca6 	bl	8001f94 <OBD2_ShowOnDisplay>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000393 	.word	0x20000393
 8001654:	20000392 	.word	0x20000392
 8001658:	20000378 	.word	0x20000378
 800165c:	20000388 	.word	0x20000388
 8001660:	20000538 	.word	0x20000538

08001664 <OBD2_PID_Decode>:
//	strcat(txTest2, "\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t *)txTest2, sizeof(txTest2),10);
//}

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	int number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3303      	adds	r3, #3
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	061a      	lsls	r2, r3, #24
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3304      	adds	r3, #4
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	041b      	lsls	r3, r3, #16
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3305      	adds	r3, #5
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	4313      	orrs	r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	3206      	adds	r2, #6
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 8001696:	231f      	movs	r3, #31
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	e030      	b.n	80016fe <OBD2_PID_Decode+0x9a>
	{
		int digit = number >> i;
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa42 f303 	asr.w	r3, r2, r3
 80016a4:	60bb      	str	r3, [r7, #8]
		digit &= 1;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
		if(obd_comm.pid == 0x00)
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <OBD2_PID_Decode+0xb0>)
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d108      	bne.n	80016c8 <OBD2_PID_Decode+0x64>
		{
			obd_comm.available_pids_1[j] = digit;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	b2d9      	uxtb	r1, r3
 80016ba:	4a16      	ldr	r2, [pc, #88]	; (8001714 <OBD2_PID_Decode+0xb0>)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	4413      	add	r3, r2
 80016c0:	3303      	adds	r3, #3
 80016c2:	460a      	mov	r2, r1
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e014      	b.n	80016f2 <OBD2_PID_Decode+0x8e>
		}
		else if(obd_comm.pid == 0x20)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <OBD2_PID_Decode+0xb0>)
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d108      	bne.n	80016e2 <OBD2_PID_Decode+0x7e>
		{
			obd_comm.available_pids_2[j] = digit;
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	b2d9      	uxtb	r1, r3
 80016d4:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <OBD2_PID_Decode+0xb0>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4413      	add	r3, r2
 80016da:	3323      	adds	r3, #35	; 0x23
 80016dc:	460a      	mov	r2, r1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e007      	b.n	80016f2 <OBD2_PID_Decode+0x8e>
		}
		else
		{
			obd_comm.available_pids_3[j] = digit;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	b2d9      	uxtb	r1, r3
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <OBD2_PID_Decode+0xb0>)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	3343      	adds	r3, #67	; 0x43
 80016ee:	460a      	mov	r2, r1
 80016f0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	dacb      	bge.n	800169c <OBD2_PID_Decode+0x38>
	}
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	371c      	adds	r7, #28
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000538 	.word	0x20000538

08001718 <OBD2_Request>:

void OBD2_Request(OBD obd)
{
 8001718:	b084      	sub	sp, #16
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	f107 0c18 	add.w	ip, r7, #24
 8001724:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(10);
 8001728:	200a      	movs	r0, #10
 800172a:	f001 fcc9 	bl	80030c0 <HAL_Delay>
	if(obd.used_protocol == OBD_PROTO_CAN)
 800172e:	7e3b      	ldrb	r3, [r7, #24]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d115      	bne.n	8001760 <OBD2_Request+0x48>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001734:	2302      	movs	r3, #2
 8001736:	723b      	strb	r3, [r7, #8]
 8001738:	2301      	movs	r3, #1
 800173a:	727b      	strb	r3, [r7, #9]
 800173c:	7e7b      	ldrb	r3, [r7, #25]
 800173e:	72bb      	strb	r3, [r7, #10]
 8001740:	2300      	movs	r3, #0
 8001742:	72fb      	strb	r3, [r7, #11]
 8001744:	2300      	movs	r3, #0
 8001746:	733b      	strb	r3, [r7, #12]
 8001748:	2300      	movs	r3, #0
 800174a:	737b      	strb	r3, [r7, #13]
 800174c:	2300      	movs	r3, #0
 800174e:	73bb      	strb	r3, [r7, #14]
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
		CAN_SEND_MESSAGE(tx_data_CAN);
 8001754:	f107 0308 	add.w	r3, r7, #8
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fc87 	bl	800106c <CAN_SEND_MESSAGE>
		else
		{
			KWP2000_SEND_MESSAGE(tx_data_ISO);
		}
	}
}
 800175e:	e00f      	b.n	8001780 <OBD2_Request+0x68>
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 8001760:	2301      	movs	r3, #1
 8001762:	713b      	strb	r3, [r7, #4]
 8001764:	7e7b      	ldrb	r3, [r7, #25]
 8001766:	717b      	strb	r3, [r7, #5]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 8001768:	7e3b      	ldrb	r3, [r7, #24]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d104      	bne.n	8001778 <OBD2_Request+0x60>
			KLine_SEND_MESSAGE(tx_data_ISO);
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fdf9 	bl	8001368 <KLine_SEND_MESSAGE>
}
 8001776:	e003      	b.n	8001780 <OBD2_Request+0x68>
			KWP2000_SEND_MESSAGE(tx_data_ISO);
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fe54 	bl	8001428 <KWP2000_SEND_MESSAGE>
}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800178a:	b004      	add	sp, #16
 800178c:	4770      	bx	lr
	...

08001790 <OBD2_PID_Parse>:

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	float value = 0;
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3302      	adds	r3, #2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2ba6      	cmp	r3, #166	; 0xa6
 80017a6:	f200 83b2 	bhi.w	8001f0e <OBD2_PID_Parse+0x77e>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <OBD2_PID_Parse+0x20>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	08001a4d 	.word	0x08001a4d
 80017b4:	08001f0f 	.word	0x08001f0f
 80017b8:	08001f0f 	.word	0x08001f0f
 80017bc:	08001f0f 	.word	0x08001f0f
 80017c0:	08001a5b 	.word	0x08001a5b
 80017c4:	08001a63 	.word	0x08001a63
 80017c8:	08001a79 	.word	0x08001a79
 80017cc:	08001a79 	.word	0x08001a79
 80017d0:	08001a79 	.word	0x08001a79
 80017d4:	08001a79 	.word	0x08001a79
 80017d8:	08001a7f 	.word	0x08001a7f
 80017dc:	08001a9b 	.word	0x08001a9b
 80017e0:	08001aaf 	.word	0x08001aaf
 80017e4:	08001ad5 	.word	0x08001ad5
 80017e8:	08001ae9 	.word	0x08001ae9
 80017ec:	08001b03 	.word	0x08001b03
 80017f0:	08001b19 	.word	0x08001b19
 80017f4:	08001b43 	.word	0x08001b43
 80017f8:	08001f0f 	.word	0x08001f0f
 80017fc:	08001f0f 	.word	0x08001f0f
 8001800:	08001b4b 	.word	0x08001b4b
 8001804:	08001b4b 	.word	0x08001b4b
 8001808:	08001b4b 	.word	0x08001b4b
 800180c:	08001b4b 	.word	0x08001b4b
 8001810:	08001b4b 	.word	0x08001b4b
 8001814:	08001b4b 	.word	0x08001b4b
 8001818:	08001b4b 	.word	0x08001b4b
 800181c:	08001b4b 	.word	0x08001b4b
 8001820:	08001f0f 	.word	0x08001f0f
 8001824:	08001f0f 	.word	0x08001f0f
 8001828:	08001f0f 	.word	0x08001f0f
 800182c:	08001b69 	.word	0x08001b69
 8001830:	08001b87 	.word	0x08001b87
 8001834:	08001b69 	.word	0x08001b69
 8001838:	08001b95 	.word	0x08001b95
 800183c:	08001bc5 	.word	0x08001bc5
 8001840:	08001beb 	.word	0x08001beb
 8001844:	08001beb 	.word	0x08001beb
 8001848:	08001beb 	.word	0x08001beb
 800184c:	08001beb 	.word	0x08001beb
 8001850:	08001beb 	.word	0x08001beb
 8001854:	08001beb 	.word	0x08001beb
 8001858:	08001beb 	.word	0x08001beb
 800185c:	08001beb 	.word	0x08001beb
 8001860:	08001bf3 	.word	0x08001bf3
 8001864:	08001bfb 	.word	0x08001bfb
 8001868:	08001c01 	.word	0x08001c01
 800186c:	08001c01 	.word	0x08001c01
 8001870:	08001c09 	.word	0x08001c09
 8001874:	08001c1d 	.word	0x08001c1d
 8001878:	08001c3b 	.word	0x08001c3b
 800187c:	08001c61 	.word	0x08001c61
 8001880:	08001c75 	.word	0x08001c75
 8001884:	08001c75 	.word	0x08001c75
 8001888:	08001c75 	.word	0x08001c75
 800188c:	08001c75 	.word	0x08001c75
 8001890:	08001c75 	.word	0x08001c75
 8001894:	08001c75 	.word	0x08001c75
 8001898:	08001c75 	.word	0x08001c75
 800189c:	08001c75 	.word	0x08001c75
 80018a0:	08001c7d 	.word	0x08001c7d
 80018a4:	08001c7d 	.word	0x08001c7d
 80018a8:	08001c7d 	.word	0x08001c7d
 80018ac:	08001c7d 	.word	0x08001c7d
 80018b0:	08001ca9 	.word	0x08001ca9
 80018b4:	08001f0f 	.word	0x08001f0f
 80018b8:	08001cb7 	.word	0x08001cb7
 80018bc:	08001ce1 	.word	0x08001ce1
 80018c0:	08001ce9 	.word	0x08001ce9
 80018c4:	08001cf1 	.word	0x08001cf1
 80018c8:	08001cf9 	.word	0x08001cf9
 80018cc:	08001d0f 	.word	0x08001d0f
 80018d0:	08001d0f 	.word	0x08001d0f
 80018d4:	08001d0f 	.word	0x08001d0f
 80018d8:	08001d0f 	.word	0x08001d0f
 80018dc:	08001d0f 	.word	0x08001d0f
 80018e0:	08001d0f 	.word	0x08001d0f
 80018e4:	08001d17 	.word	0x08001d17
 80018e8:	08001d17 	.word	0x08001d17
 80018ec:	08001d35 	.word	0x08001d35
 80018f0:	08001f0f 	.word	0x08001f0f
 80018f4:	08001f0f 	.word	0x08001f0f
 80018f8:	08001d49 	.word	0x08001d49
 80018fc:	08001d65 	.word	0x08001d65
 8001900:	08001d97 	.word	0x08001d97
 8001904:	08001dbb 	.word	0x08001dbb
 8001908:	08001dbb 	.word	0x08001dbb
 800190c:	08001dbb 	.word	0x08001dbb
 8001910:	08001dbb 	.word	0x08001dbb
 8001914:	08001dc1 	.word	0x08001dc1
 8001918:	08001ddf 	.word	0x08001ddf
 800191c:	08001ddf 	.word	0x08001ddf
 8001920:	08001de7 	.word	0x08001de7
 8001924:	08001dfd 	.word	0x08001dfd
 8001928:	08001e03 	.word	0x08001e03
 800192c:	08001f0f 	.word	0x08001f0f
 8001930:	08001f0f 	.word	0x08001f0f
 8001934:	08001e35 	.word	0x08001e35
 8001938:	08001e35 	.word	0x08001e35
 800193c:	08001e4b 	.word	0x08001e4b
 8001940:	08001e69 	.word	0x08001e69
 8001944:	08001f0f 	.word	0x08001f0f
 8001948:	08001e7f 	.word	0x08001e7f
 800194c:	08001e87 	.word	0x08001e87
 8001950:	08001e87 	.word	0x08001e87
 8001954:	08001f0f 	.word	0x08001f0f
 8001958:	08001f0f 	.word	0x08001f0f
 800195c:	08001f0f 	.word	0x08001f0f
 8001960:	08001f0f 	.word	0x08001f0f
 8001964:	08001f0f 	.word	0x08001f0f
 8001968:	08001f0f 	.word	0x08001f0f
 800196c:	08001f0f 	.word	0x08001f0f
 8001970:	08001f0f 	.word	0x08001f0f
 8001974:	08001f0f 	.word	0x08001f0f
 8001978:	08001f0f 	.word	0x08001f0f
 800197c:	08001f0f 	.word	0x08001f0f
 8001980:	08001f0f 	.word	0x08001f0f
 8001984:	08001f0f 	.word	0x08001f0f
 8001988:	08001f0f 	.word	0x08001f0f
 800198c:	08001f0f 	.word	0x08001f0f
 8001990:	08001f0f 	.word	0x08001f0f
 8001994:	08001f0f 	.word	0x08001f0f
 8001998:	08001f0f 	.word	0x08001f0f
 800199c:	08001f0f 	.word	0x08001f0f
 80019a0:	08001e9d 	.word	0x08001e9d
 80019a4:	08001f0f 	.word	0x08001f0f
 80019a8:	08001f0f 	.word	0x08001f0f
 80019ac:	08001f0f 	.word	0x08001f0f
 80019b0:	08001f0f 	.word	0x08001f0f
 80019b4:	08001f0f 	.word	0x08001f0f
 80019b8:	08001f0f 	.word	0x08001f0f
 80019bc:	08001f0f 	.word	0x08001f0f
 80019c0:	08001f0f 	.word	0x08001f0f
 80019c4:	08001f0f 	.word	0x08001f0f
 80019c8:	08001f0f 	.word	0x08001f0f
 80019cc:	08001f0f 	.word	0x08001f0f
 80019d0:	08001f0f 	.word	0x08001f0f
 80019d4:	08001f0f 	.word	0x08001f0f
 80019d8:	08001f0f 	.word	0x08001f0f
 80019dc:	08001f0f 	.word	0x08001f0f
 80019e0:	08001f0f 	.word	0x08001f0f
 80019e4:	08001f0f 	.word	0x08001f0f
 80019e8:	08001f0f 	.word	0x08001f0f
 80019ec:	08001f0f 	.word	0x08001f0f
 80019f0:	08001f0f 	.word	0x08001f0f
 80019f4:	08001f0f 	.word	0x08001f0f
 80019f8:	08001f0f 	.word	0x08001f0f
 80019fc:	08001f0f 	.word	0x08001f0f
 8001a00:	08001f0f 	.word	0x08001f0f
 8001a04:	08001f0f 	.word	0x08001f0f
 8001a08:	08001f0f 	.word	0x08001f0f
 8001a0c:	08001f0f 	.word	0x08001f0f
 8001a10:	08001f0f 	.word	0x08001f0f
 8001a14:	08001f0f 	.word	0x08001f0f
 8001a18:	08001f0f 	.word	0x08001f0f
 8001a1c:	08001f0f 	.word	0x08001f0f
 8001a20:	08001f0f 	.word	0x08001f0f
 8001a24:	08001f0f 	.word	0x08001f0f
 8001a28:	08001f0f 	.word	0x08001f0f
 8001a2c:	08001f0f 	.word	0x08001f0f
 8001a30:	08001f0f 	.word	0x08001f0f
 8001a34:	08001f0f 	.word	0x08001f0f
 8001a38:	08001f0f 	.word	0x08001f0f
 8001a3c:	08001f0f 	.word	0x08001f0f
 8001a40:	08001f0f 	.word	0x08001f0f
 8001a44:	08001f0f 	.word	0x08001f0f
 8001a48:	08001ec9 	.word	0x08001ec9
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fe09 	bl	8001664 <OBD2_PID_Decode>
		value = 0;
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
		break;
 8001a58:	e259      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
		break;
 8001a60:	e255      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3303      	adds	r3, #3
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	3b28      	subs	r3, #40	; 0x28
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a72:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a76:	e24a      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001a78:	4bb7      	ldr	r3, [pc, #732]	; (8001d58 <OBD2_PID_Parse+0x5c8>)
 8001a7a:	60fb      	str	r3, [r7, #12]
		break;
 8001a7c:	e247      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3303      	adds	r3, #3
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a94:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a98:	e239      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3303      	adds	r3, #3
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aa8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aac:	e22f      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3303      	adds	r3, #3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	3204      	adds	r2, #4
 8001aba:	7812      	ldrb	r2, [r2, #0]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da00      	bge.n	8001ac4 <OBD2_PID_Parse+0x334>
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	109b      	asrs	r3, r3, #2
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ace:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ad2:	e21c      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3303      	adds	r3, #3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	ee07 3a90 	vmov	s15, r3
 8001ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ae6:	e212      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3303      	adds	r3, #3
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	3b40      	subs	r3, #64	; 0x40
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b00:	e205      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3303      	adds	r3, #3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	3b28      	subs	r3, #40	; 0x28
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b12:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b16:	e1fa      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	3204      	adds	r2, #4
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	4a8c      	ldr	r2, [pc, #560]	; (8001d5c <OBD2_PID_Parse+0x5cc>)
 8001b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2e:	1152      	asrs	r2, r2, #5
 8001b30:	17db      	asrs	r3, r3, #31
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b40:	e1e5      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
		break;
 8001b48:	e1e1      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3303      	adds	r3, #3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4a82      	ldr	r2, [pc, #520]	; (8001d5c <OBD2_PID_Parse+0x5cc>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b62:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b66:	e1d2      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3303      	adds	r3, #3
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	3204      	adds	r2, #4
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b80:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b84:	e1c3      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fd6c 	bl	8001664 <OBD2_PID_Decode>
		value = 0;
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
		break;
 8001b92:	e1bc      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3303      	adds	r3, #3
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	3204      	adds	r2, #4
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fcbd 	bl	8000524 <__aeabi_i2d>
 8001baa:	a369      	add	r3, pc, #420	; (adr r3, 8001d50 <OBD2_PID_Parse+0x5c0>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fd22 	bl	80005f8 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7fe fff4 	bl	8000ba8 <__aeabi_d2f>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3303      	adds	r3, #3
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	3204      	adds	r2, #4
 8001bd0:	7812      	ldrb	r2, [r2, #0]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001be8:	e191      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
		break;
 8001bf0:	e18d      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
		break;
 8001bf8:	e189      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001bfa:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <OBD2_PID_Parse+0x5c8>)
 8001bfc:	60fb      	str	r3, [r7, #12]
		break;
 8001bfe:	e186      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
		break;
 8001c06:	e182      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3303      	adds	r3, #3
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c16:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c1a:	e178      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3303      	adds	r3, #3
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	3204      	adds	r2, #4
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c38:	e169      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3303      	adds	r3, #3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	3204      	adds	r2, #4
 8001c46:	7812      	ldrb	r2, [r2, #0]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da00      	bge.n	8001c50 <OBD2_PID_Parse+0x4c0>
 8001c4e:	3303      	adds	r3, #3
 8001c50:	109b      	asrs	r3, r3, #2
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c5e:	e156      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3303      	adds	r3, #3
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c72:	e14c      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
		break;
 8001c7a:	e148      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3303      	adds	r3, #3
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	3204      	adds	r2, #4
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	4a33      	ldr	r2, [pc, #204]	; (8001d5c <OBD2_PID_Parse+0x5cc>)
 8001c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001c92:	1152      	asrs	r2, r2, #5
 8001c94:	17db      	asrs	r3, r3, #31
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	3b28      	subs	r3, #40	; 0x28
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ca6:	e132      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fcdb 	bl	8001664 <OBD2_PID_Decode>
		value = 0;
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
		break;
 8001cb4:	e12b      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3303      	adds	r3, #3
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	3204      	adds	r2, #4
 8001cc2:	7812      	ldrb	r2, [r2, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <OBD2_PID_Parse+0x5d0>)
 8001cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ccc:	1192      	asrs	r2, r2, #6
 8001cce:	17db      	asrs	r3, r3, #31
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cda:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cde:	e116      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
		break;
 8001ce6:	e112      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
		break;
 8001cee:	e10e      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
		break;
 8001cf6:	e10a      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3303      	adds	r3, #3
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3b28      	subs	r3, #40	; 0x28
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d08:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d0c:	e0ff      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
		break;
 8001d14:	e0fb      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	3204      	adds	r2, #4
 8001d22:	7812      	ldrb	r2, [r2, #0]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d32:	e0ec      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3303      	adds	r3, #3
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d42:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d46:	e0e2      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
		break;
 8001d4e:	e0de      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
 8001d50:	10624dd3 	.word	0x10624dd3
 8001d54:	3fb43958 	.word	0x3fb43958
 8001d58:	c2c80000 	.word	0xc2c80000
 8001d5c:	51eb851f 	.word	0x51eb851f
 8001d60:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3303      	adds	r3, #3
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	3204      	adds	r2, #4
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbd5 	bl	8000524 <__aeabi_i2d>
 8001d7a:	a370      	add	r3, pc, #448	; (adr r3, 8001f3c <OBD2_PID_Parse+0x7ac>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc3a 	bl	80005f8 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7fe ff0c 	bl	8000ba8 <__aeabi_d2f>
 8001d90:	4603      	mov	r3, r0
 8001d92:	60fb      	str	r3, [r7, #12]
		break;
 8001d94:	e0bb      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3303      	adds	r3, #3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	3204      	adds	r2, #4
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001daa:	3b7f      	subs	r3, #127	; 0x7f
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001db8:	e0a9      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001dba:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <OBD2_PID_Parse+0x7a0>)
 8001dbc:	60fb      	str	r3, [r7, #12]
		break;
 8001dbe:	e0a6      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3303      	adds	r3, #3
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	3204      	adds	r2, #4
 8001dcc:	7812      	ldrb	r2, [r2, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ddc:	e097      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
		break;
 8001de4:	e093      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3303      	adds	r3, #3
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	3b28      	subs	r3, #40	; 0x28
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001dfa:	e088      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001dfc:	4b4d      	ldr	r3, [pc, #308]	; (8001f34 <OBD2_PID_Parse+0x7a4>)
 8001dfe:	60fb      	str	r3, [r7, #12]
		break;
 8001e00:	e085      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3303      	adds	r3, #3
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	3204      	adds	r2, #4
 8001e0e:	7812      	ldrb	r2, [r2, #0]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb86 	bl	8000524 <__aeabi_i2d>
 8001e18:	a341      	add	r3, pc, #260	; (adr r3, 8001f20 <OBD2_PID_Parse+0x790>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fbeb 	bl	80005f8 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7fe febd 	bl	8000ba8 <__aeabi_d2f>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	60fb      	str	r3, [r7, #12]
		break;
 8001e32:	e06c      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3303      	adds	r3, #3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	3b7d      	subs	r3, #125	; 0x7d
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e48:	e061      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	3204      	adds	r2, #4
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e62:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e66:	e052      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3303      	adds	r3, #3
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	3b7d      	subs	r3, #125	; 0x7d
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e78:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e7c:	e047      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
		break;
 8001e84:	e043      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3303      	adds	r3, #3
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3b28      	subs	r3, #40	; 0x28
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e9a:	e038      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3303      	adds	r3, #3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	3204      	adds	r2, #4
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <OBD2_PID_Parse+0x7a8>)
 8001eae:	fb82 1203 	smull	r1, r2, r2, r3
 8001eb2:	1152      	asrs	r2, r2, #5
 8001eb4:	17db      	asrs	r3, r3, #31
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	3b28      	subs	r3, #40	; 0x28
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ec6:	e022      	b.n	8001f0e <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3303      	adds	r3, #3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	061a      	lsls	r2, r3, #24
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	041b      	lsls	r3, r3, #16
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3305      	adds	r3, #5
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	3206      	adds	r2, #6
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fb19 	bl	8000524 <__aeabi_i2d>
 8001ef2:	a30d      	add	r3, pc, #52	; (adr r3, 8001f28 <OBD2_PID_Parse+0x798>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb7e 	bl	80005f8 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7fe fe50 	bl	8000ba8 <__aeabi_d2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60fb      	str	r3, [r7, #12]
		break;
 8001f0c:	bf00      	nop
	}
	return value;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	ee07 3a90 	vmov	s15, r3
}
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	9999999a 	.word	0x9999999a
 8001f24:	3fa99999 	.word	0x3fa99999
 8001f28:	9999999a 	.word	0x9999999a
 8001f2c:	3fb99999 	.word	0x3fb99999
 8001f30:	c2c80000 	.word	0xc2c80000
 8001f34:	c3520000 	.word	0xc3520000
 8001f38:	51eb851f 	.word	0x51eb851f
 8001f3c:	47ae147b 	.word	0x47ae147b
 8001f40:	3f747ae1 	.word	0x3f747ae1

08001f44 <OBD2_Init>:

obd_protocol OBD2_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	used_protocol = KLine_Init();
 8001f48:	f7ff f8c0 	bl	80010cc <KLine_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <OBD2_Init+0x48>)
 8001f52:	701a      	strb	r2, [r3, #0]
	if(used_protocol == OBD_NONE)
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <OBD2_Init+0x48>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d113      	bne.n	8001f84 <OBD2_Init+0x40>
	{
		used_protocol = KWP2000_Fast_Init();
 8001f5c:	f7ff f94e 	bl	80011fc <KWP2000_Fast_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	461a      	mov	r2, r3
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <OBD2_Init+0x48>)
 8001f66:	701a      	strb	r2, [r3, #0]
		if(used_protocol == OBD_NONE)
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <OBD2_Init+0x48>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d109      	bne.n	8001f84 <OBD2_Init+0x40>
		{
			used_protocol = OBD_PROTO_CAN;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <OBD2_Init+0x48>)
 8001f72:	2204      	movs	r2, #4
 8001f74:	701a      	strb	r2, [r3, #0]
			HAL_DMA_DeInit(&hdma_usart1_rx);
 8001f76:	4806      	ldr	r0, [pc, #24]	; (8001f90 <OBD2_Init+0x4c>)
 8001f78:	f002 f8f8 	bl	800416c <HAL_DMA_DeInit>
			MX_CAN1_Init();
 8001f7c:	f7fe ffe6 	bl	8000f4c <MX_CAN1_Init>
			canConfig();
 8001f80:	f7ff f81a 	bl	8000fb8 <canConfig>
		}
	}
	return used_protocol;
 8001f84:	4b01      	ldr	r3, [pc, #4]	; (8001f8c <OBD2_Init+0x48>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000394 	.word	0x20000394
 8001f90:	200004e4 	.word	0x200004e4

08001f94 <OBD2_ShowOnDisplay>:

void OBD2_ShowOnDisplay(float value)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	snprintf(str, 10, "%f", value);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe fad2 	bl	8000548 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	f107 000c 	add.w	r0, r7, #12
 8001fac:	e9cd 2300 	strd	r2, r3, [sp]
 8001fb0:	4a13      	ldr	r2, [pc, #76]	; (8002000 <OBD2_ShowOnDisplay+0x6c>)
 8001fb2:	210a      	movs	r1, #10
 8001fb4:	f007 f8ce 	bl	8009154 <sniprintf>
	ssd1306_SetCursor(0,0);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f000 ffc2 	bl	8002f44 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f000 fe71 	bl	8002ca8 <ssd1306_Fill>
	ssd1306_WriteString(pid_names[obd_comm.pid_index], Font_7x10, White);
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <OBD2_ShowOnDisplay+0x70>)
 8001fc8:	789b      	ldrb	r3, [r3, #2]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <OBD2_ShowOnDisplay+0x74>)
 8001fce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <OBD2_ShowOnDisplay+0x78>)
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	ca06      	ldmia	r2, {r1, r2}
 8001fd8:	f000 ff8e 	bl	8002ef8 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 20);
 8001fdc:	2114      	movs	r1, #20
 8001fde:	2028      	movs	r0, #40	; 0x28
 8001fe0:	f000 ffb0 	bl	8002f44 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, White);
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <OBD2_ShowOnDisplay+0x7c>)
 8001fe6:	f107 000c 	add.w	r0, r7, #12
 8001fea:	2301      	movs	r3, #1
 8001fec:	ca06      	ldmia	r2, {r1, r2}
 8001fee:	f000 ff83 	bl	8002ef8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ff2:	f000 fe7d 	bl	8002cf0 <ssd1306_UpdateScreen>
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	0800b678 	.word	0x0800b678
 8002004:	20000538 	.word	0x20000538
 8002008:	20000000 	.word	0x20000000
 800200c:	20000170 	.word	0x20000170
 8002010:	20000178 	.word	0x20000178

08002014 <PID_Get_Lenght>:
		[0x7C] = { 3 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 5 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
	return PID_LUT[pid][0];
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4a03      	ldr	r2, [pc, #12]	; (8002030 <PID_Get_Lenght+0x1c>)
 8002022:	5cd3      	ldrb	r3, [r2, r3]
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	0800bc44 	.word	0x0800bc44

08002034 <Get_PID>:

uint8_t Get_PID(uint8_t index)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
	return PID_list[index];
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4a03      	ldr	r2, [pc, #12]	; (8002050 <Get_PID+0x1c>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	0800bbe8 	.word	0x0800bbe8

08002054 <HAL_GPIO_EXTI_Callback>:

static uint8_t state = 1;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MENU_BTN_Pin)
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d106      	bne.n	8002072 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_GPIO_EXTI_Callback+0x28>)
 8002066:	f004 fbf7 	bl	8006858 <HAL_TIM_Base_Start_IT>
		state = 0;
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_GPIO_EXTI_Callback+0x2c>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		__NOP();
	}
}
 8002070:	e000      	b.n	8002074 <HAL_GPIO_EXTI_Callback+0x20>
		__NOP();
 8002072:	bf00      	nop
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000414 	.word	0x20000414
 8002080:	20000168 	.word	0x20000168

08002084 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin)== GPIO_PIN_SET)
 800208c:	2140      	movs	r1, #64	; 0x40
 800208e:	480f      	ldr	r0, [pc, #60]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002090:	f002 fd10 	bl	8004ab4 <HAL_GPIO_ReadPin>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d114      	bne.n	80020c4 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		state = 1;
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
		obd_comm.pid_index++;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80020a2:	789b      	ldrb	r3, [r3, #2]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80020aa:	709a      	strb	r2, [r3, #2]
		obd_comm.pid = Get_PID(obd_comm.pid_index);
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80020ae:	789b      	ldrb	r3, [r3, #2]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ffbf 	bl	8002034 <Get_PID>
 80020b6:	4603      	mov	r3, r0
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80020bc:	705a      	strb	r2, [r3, #1]
		HAL_TIM_Base_Stop_IT(&htim1);
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80020c0:	f004 fc1e 	bl	8006900 <HAL_TIM_Base_Stop_IT>
	}
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	48000400 	.word	0x48000400
 80020d0:	20000168 	.word	0x20000168
 80020d4:	20000538 	.word	0x20000538
 80020d8:	20000414 	.word	0x20000414

080020dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b097      	sub	sp, #92	; 0x5c
 80020e0:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e2:	f000 ff79 	bl	8002fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e6:	f000 f855 	bl	8002194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ea:	f000 f957 	bl	800239c <MX_GPIO_Init>
  MX_DMA_Init();
 80020ee:	f000 f937 	bl	8002360 <MX_DMA_Init>
  MX_I2C2_Init();
 80020f2:	f000 f8a1 	bl	8002238 <MX_I2C2_Init>
  MX_TIM1_Init();
 80020f6:	f000 f8df 	bl	80022b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 80020fa:	f000 fd6b 	bl	8002bd4 <ssd1306_Init>
  ssd1306_Fill(Black);
 80020fe:	2000      	movs	r0, #0
 8002100:	f000 fdd2 	bl	8002ca8 <ssd1306_Fill>
  ssd1306_WriteString("Teplota", Font_7x10, White);
 8002104:	4a20      	ldr	r2, [pc, #128]	; (8002188 <main+0xac>)
 8002106:	2301      	movs	r3, #1
 8002108:	ca06      	ldmia	r2, {r1, r2}
 800210a:	4820      	ldr	r0, [pc, #128]	; (800218c <main+0xb0>)
 800210c:	f000 fef4 	bl	8002ef8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002110:	f000 fdee 	bl	8002cf0 <ssd1306_UpdateScreen>

  obd_comm.used_protocol = OBD2_Init();
 8002114:	f7ff ff16 	bl	8001f44 <OBD2_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <main+0xb4>)
 800211e:	701a      	strb	r2, [r3, #0]

  obd_comm.pid = 0x04;
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <main+0xb4>)
 8002122:	2204      	movs	r2, #4
 8002124:	705a      	strb	r2, [r3, #1]

  //MX_IWDG_Init();

  OBD2_Request(obd_comm);
 8002126:	4c1a      	ldr	r4, [pc, #104]	; (8002190 <main+0xb4>)
 8002128:	4668      	mov	r0, sp
 800212a:	f104 0310 	add.w	r3, r4, #16
 800212e:	2258      	movs	r2, #88	; 0x58
 8002130:	4619      	mov	r1, r3
 8002132:	f006 fb8f 	bl	8008854 <memcpy>
 8002136:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800213a:	f7ff faed 	bl	8001718 <OBD2_Request>

  OBD2_Request(obd_comm);
 800213e:	4c14      	ldr	r4, [pc, #80]	; (8002190 <main+0xb4>)
 8002140:	4668      	mov	r0, sp
 8002142:	f104 0310 	add.w	r3, r4, #16
 8002146:	2258      	movs	r2, #88	; 0x58
 8002148:	4619      	mov	r1, r3
 800214a:	f006 fb83 	bl	8008854 <memcpy>
 800214e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002152:	f7ff fae1 	bl	8001718 <OBD2_Request>

  OBD2_Request(obd_comm);
 8002156:	4c0e      	ldr	r4, [pc, #56]	; (8002190 <main+0xb4>)
 8002158:	4668      	mov	r0, sp
 800215a:	f104 0310 	add.w	r3, r4, #16
 800215e:	2258      	movs	r2, #88	; 0x58
 8002160:	4619      	mov	r1, r3
 8002162:	f006 fb77 	bl	8008854 <memcpy>
 8002166:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800216a:	f7ff fad5 	bl	8001718 <OBD2_Request>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  OBD2_Request(obd_comm);
 800216e:	4c08      	ldr	r4, [pc, #32]	; (8002190 <main+0xb4>)
 8002170:	4668      	mov	r0, sp
 8002172:	f104 0310 	add.w	r3, r4, #16
 8002176:	2258      	movs	r2, #88	; 0x58
 8002178:	4619      	mov	r1, r3
 800217a:	f006 fb6b 	bl	8008854 <memcpy>
 800217e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002182:	f7ff fac9 	bl	8001718 <OBD2_Request>
 8002186:	e7f2      	b.n	800216e <main+0x92>
 8002188:	20000170 	.word	0x20000170
 800218c:	0800bbe0 	.word	0x0800bbe0
 8002190:	20000538 	.word	0x20000538

08002194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b096      	sub	sp, #88	; 0x58
 8002198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	2244      	movs	r2, #68	; 0x44
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f006 fb64 	bl	8008870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a8:	463b      	mov	r3, r7
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021ba:	f003 f95f 	bl	800547c <HAL_PWREx_ControlVoltageScaling>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021c4:	f000 f97c 	bl	80024c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021c8:	2309      	movs	r3, #9
 80021ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021d2:	2301      	movs	r3, #1
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d6:	2302      	movs	r3, #2
 80021d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021da:	2303      	movs	r3, #3
 80021dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021de:	2301      	movs	r3, #1
 80021e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80021e2:	230a      	movs	r3, #10
 80021e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021e6:	2307      	movs	r3, #7
 80021e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021ea:	2302      	movs	r3, #2
 80021ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021ee:	2302      	movs	r3, #2
 80021f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 f996 	bl	8005528 <HAL_RCC_OscConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002202:	f000 f95d 	bl	80024c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002206:	230f      	movs	r3, #15
 8002208:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800220a:	2303      	movs	r3, #3
 800220c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800221a:	463b      	mov	r3, r7
 800221c:	2104      	movs	r1, #4
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fd96 	bl	8005d50 <HAL_RCC_ClockConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800222a:	f000 f949 	bl	80024c0 <Error_Handler>
  }
}
 800222e:	bf00      	nop
 8002230:	3758      	adds	r7, #88	; 0x58
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <MX_I2C2_Init+0x74>)
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <MX_I2C2_Init+0x78>)
 8002240:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_I2C2_Init+0x74>)
 8002244:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <MX_I2C2_Init+0x7c>)
 8002246:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_I2C2_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <MX_I2C2_Init+0x74>)
 8002250:	2201      	movs	r2, #1
 8002252:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <MX_I2C2_Init+0x74>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <MX_I2C2_Init+0x74>)
 800225c:	2200      	movs	r2, #0
 800225e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <MX_I2C2_Init+0x74>)
 8002262:	2200      	movs	r2, #0
 8002264:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_I2C2_Init+0x74>)
 8002268:	2200      	movs	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <MX_I2C2_Init+0x74>)
 800226e:	2200      	movs	r2, #0
 8002270:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002272:	480e      	ldr	r0, [pc, #56]	; (80022ac <MX_I2C2_Init+0x74>)
 8002274:	f002 fc66 	bl	8004b44 <HAL_I2C_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800227e:	f000 f91f 	bl	80024c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002282:	2100      	movs	r1, #0
 8002284:	4809      	ldr	r0, [pc, #36]	; (80022ac <MX_I2C2_Init+0x74>)
 8002286:	f003 f853 	bl	8005330 <HAL_I2CEx_ConfigAnalogFilter>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002290:	f000 f916 	bl	80024c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002294:	2100      	movs	r1, #0
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_I2C2_Init+0x74>)
 8002298:	f003 f895 	bl	80053c6 <HAL_I2CEx_ConfigDigitalFilter>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80022a2:	f000 f90d 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200003c0 	.word	0x200003c0
 80022b0:	40005800 	.word	0x40005800
 80022b4:	10909cec 	.word	0x10909cec

080022b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <MX_TIM1_Init+0xa0>)
 80022d8:	4a20      	ldr	r2, [pc, #128]	; (800235c <MX_TIM1_Init+0xa4>)
 80022da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <MX_TIM1_Init+0xa0>)
 80022de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80022e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <MX_TIM1_Init+0xa0>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <MX_TIM1_Init+0xa0>)
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <MX_TIM1_Init+0xa0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <MX_TIM1_Init+0xa0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <MX_TIM1_Init+0xa0>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002304:	4814      	ldr	r0, [pc, #80]	; (8002358 <MX_TIM1_Init+0xa0>)
 8002306:	f004 fa4f 	bl	80067a8 <HAL_TIM_Base_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002310:	f000 f8d6 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	4619      	mov	r1, r3
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <MX_TIM1_Init+0xa0>)
 8002322:	f004 fc3b 	bl	8006b9c <HAL_TIM_ConfigClockSource>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800232c:	f000 f8c8 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	; (8002358 <MX_TIM1_Init+0xa0>)
 8002342:	f004 fe1b 	bl	8006f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800234c:	f000 f8b8 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000414 	.word	0x20000414
 800235c:	40012c00 	.word	0x40012c00

08002360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_DMA_Init+0x38>)
 8002368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <MX_DMA_Init+0x38>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6493      	str	r3, [r2, #72]	; 0x48
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_DMA_Init+0x38>)
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	200f      	movs	r0, #15
 8002384:	f001 fdf5 	bl	8003f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002388:	200f      	movs	r0, #15
 800238a:	f001 fe0e 	bl	8003faa <HAL_NVIC_EnableIRQ>

}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000

0800239c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
 80023b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b2:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ca:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	4a39      	ldr	r2, [pc, #228]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d6:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	4a33      	ldr	r2, [pc, #204]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <MX_GPIO_Init+0x118>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <MX_GPIO_Init+0x118>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002406:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <MX_GPIO_Init+0x118>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002418:	4827      	ldr	r0, [pc, #156]	; (80024b8 <MX_GPIO_Init+0x11c>)
 800241a:	f002 fb63 	bl	8004ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002428:	f002 fb5c 	bl	8004ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BAT_V_Pin */
  GPIO_InitStruct.Pin = BAT_V_Pin;
 800242c:	2320      	movs	r3, #32
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002430:	230b      	movs	r3, #11
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4619      	mov	r1, r3
 800243e:	481e      	ldr	r0, [pc, #120]	; (80024b8 <MX_GPIO_Init+0x11c>)
 8002440:	f002 f8e4 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_S_Pin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8002444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800244e:	2302      	movs	r3, #2
 8002450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	4816      	ldr	r0, [pc, #88]	; (80024b8 <MX_GPIO_Init+0x11c>)
 800245e:	f002 f8d5 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : LLine_Pin */
  GPIO_InitStruct.Pin = LLine_Pin;
 8002462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LLine_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247e:	f002 f8c5 	bl	800460c <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_BTN_Pin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin;
 8002482:	2340      	movs	r3, #64	; 0x40
 8002484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002486:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800248a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MENU_BTN_GPIO_Port, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	4809      	ldr	r0, [pc, #36]	; (80024bc <MX_GPIO_Init+0x120>)
 8002498:	f002 f8b8 	bl	800460c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800249c:	2200      	movs	r2, #0
 800249e:	2100      	movs	r1, #0
 80024a0:	2017      	movs	r0, #23
 80024a2:	f001 fd66 	bl	8003f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024a6:	2017      	movs	r0, #23
 80024a8:	f001 fd7f 	bl	8003faa <HAL_NVIC_EnableIRQ>

}
 80024ac:	bf00      	nop
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	48000800 	.word	0x48000800
 80024bc:	48000400 	.word	0x48000400

080024c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c4:	b672      	cpsid	i
}
 80024c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <Error_Handler+0x8>
	...

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_MspInit+0x44>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <HAL_MspInit+0x44>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6613      	str	r3, [r2, #96]	; 0x60
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <HAL_MspInit+0x44>)
 80024e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_MspInit+0x44>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <HAL_MspInit+0x44>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_MspInit+0x44>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_CAN_MspInit+0xa0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d139      	bne.n	80025aa <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_CAN_MspInit+0xa4>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_CAN_MspInit+0xa4>)
 800253c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_CAN_MspInit+0xa4>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_CAN_MspInit+0xa4>)
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_CAN_MspInit+0xa4>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_CAN_MspInit+0xa4>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8002566:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002578:	2309      	movs	r3, #9
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002586:	f002 f841 	bl	800460c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2101      	movs	r1, #1
 800258e:	2014      	movs	r0, #20
 8002590:	f001 fcef 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002594:	2014      	movs	r0, #20
 8002596:	f001 fd08 	bl	8003faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2101      	movs	r1, #1
 800259e:	2015      	movs	r0, #21
 80025a0:	f001 fce7 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80025a4:	2015      	movs	r0, #21
 80025a6:	f001 fd00 	bl	8003faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40006400 	.word	0x40006400
 80025b8:	40021000 	.word	0x40021000

080025bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0a0      	sub	sp, #128	; 0x80
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	225c      	movs	r2, #92	; 0x5c
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f006 f947 	bl	8008870 <memset>
  if(hi2c->Instance==I2C2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <HAL_I2C_MspInit+0xa8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d136      	bne.n	800265a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f4:	f107 0310 	add.w	r3, r7, #16
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fdcb 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002604:	f7ff ff5c 	bl	80024c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_I2C_MspInit+0xac>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	4a16      	ldr	r2, [pc, #88]	; (8002668 <HAL_I2C_MspInit+0xac>)
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_I2C_MspInit+0xac>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002620:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002624:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002626:	2312      	movs	r3, #18
 8002628:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002632:	2304      	movs	r3, #4
 8002634:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002636:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800263a:	4619      	mov	r1, r3
 800263c:	480b      	ldr	r0, [pc, #44]	; (800266c <HAL_I2C_MspInit+0xb0>)
 800263e:	f001 ffe5 	bl	800460c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_I2C_MspInit+0xac>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <HAL_I2C_MspInit+0xac>)
 8002648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800264c:	6593      	str	r3, [r2, #88]	; 0x58
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_I2C_MspInit+0xac>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800265a:	bf00      	nop
 800265c:	3780      	adds	r7, #128	; 0x80
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40005800 	.word	0x40005800
 8002668:	40021000 	.word	0x40021000
 800266c:	48000400 	.word	0x48000400

08002670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_TIM_Base_MspInit+0x74>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d12b      	bne.n	80026da <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_TIM_Base_MspInit+0x78>)
 8002684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <HAL_TIM_Base_MspInit+0x78>)
 8002688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800268c:	6613      	str	r3, [r2, #96]	; 0x60
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_TIM_Base_MspInit+0x78>)
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	2018      	movs	r0, #24
 80026a0:	f001 fc67 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80026a4:	2018      	movs	r0, #24
 80026a6:	f001 fc80 	bl	8003faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	2019      	movs	r0, #25
 80026b0:	f001 fc5f 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026b4:	2019      	movs	r0, #25
 80026b6:	f001 fc78 	bl	8003faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	201a      	movs	r0, #26
 80026c0:	f001 fc57 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80026c4:	201a      	movs	r0, #26
 80026c6:	f001 fc70 	bl	8003faa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	201b      	movs	r0, #27
 80026d0:	f001 fc4f 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80026d4:	201b      	movs	r0, #27
 80026d6:	f001 fc68 	bl	8003faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40021000 	.word	0x40021000

080026ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b0a0      	sub	sp, #128	; 0x80
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002704:	f107 0310 	add.w	r3, r7, #16
 8002708:	225c      	movs	r2, #92	; 0x5c
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f006 f8af 	bl	8008870 <memset>
  if(huart->Instance==USART1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a38      	ldr	r2, [pc, #224]	; (80027f8 <HAL_UART_MspInit+0x10c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d168      	bne.n	80027ee <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800271c:	2301      	movs	r3, #1
 800271e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002720:	2300      	movs	r3, #0
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fd33 	bl	8006194 <HAL_RCCEx_PeriphCLKConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002734:	f7ff fec4 	bl	80024c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002738:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_UART_MspInit+0x110>)
 800273a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273c:	4a2f      	ldr	r2, [pc, #188]	; (80027fc <HAL_UART_MspInit+0x110>)
 800273e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002742:	6613      	str	r3, [r2, #96]	; 0x60
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_UART_MspInit+0x110>)
 8002746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_UART_MspInit+0x110>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	4a29      	ldr	r2, [pc, #164]	; (80027fc <HAL_UART_MspInit+0x110>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_UART_MspInit+0x110>)
 800275e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = KLine_TX_Pin|KLine_RX_Pin;
 8002768:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800276c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276e:	2302      	movs	r3, #2
 8002770:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800277a:	2307      	movs	r3, #7
 800277c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002782:	4619      	mov	r1, r3
 8002784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002788:	f001 ff40 	bl	800460c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_UART_MspInit+0x114>)
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_UART_MspInit+0x118>)
 8002790:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_UART_MspInit+0x114>)
 8002794:	2202      	movs	r2, #2
 8002796:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_UART_MspInit+0x114>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_UART_MspInit+0x114>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_UART_MspInit+0x114>)
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_UART_MspInit+0x114>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_UART_MspInit+0x114>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_UART_MspInit+0x114>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_UART_MspInit+0x114>)
 80027be:	2200      	movs	r2, #0
 80027c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80027c2:	480f      	ldr	r0, [pc, #60]	; (8002800 <HAL_UART_MspInit+0x114>)
 80027c4:	f001 fc1a 	bl	8003ffc <HAL_DMA_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80027ce:	f7ff fe77 	bl	80024c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <HAL_UART_MspInit+0x114>)
 80027d6:	671a      	str	r2, [r3, #112]	; 0x70
 80027d8:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_UART_MspInit+0x114>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	2025      	movs	r0, #37	; 0x25
 80027e4:	f001 fbc5 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027e8:	2025      	movs	r0, #37	; 0x25
 80027ea:	f001 fbde 	bl	8003faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027ee:	bf00      	nop
 80027f0:	3780      	adds	r7, #128	; 0x80
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40021000 	.word	0x40021000
 8002800:	200004e4 	.word	0x200004e4
 8002804:	40020058 	.word	0x40020058

08002808 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0d      	ldr	r2, [pc, #52]	; (800284c <HAL_UART_MspDeInit+0x44>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d113      	bne.n	8002842 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_UART_MspDeInit+0x48>)
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <HAL_UART_MspDeInit+0x48>)
 8002820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002824:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, KLine_TX_Pin|KLine_RX_Pin);
 8002826:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800282a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800282e:	f002 f867 	bl	8004900 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4618      	mov	r0, r3
 8002838:	f001 fc98 	bl	800416c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800283c:	2025      	movs	r0, #37	; 0x25
 800283e:	f001 fbc2 	bl	8003fc6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40013800 	.word	0x40013800
 8002850:	40021000 	.word	0x40021000

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <NMI_Handler+0x4>

0800285a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <HardFault_Handler+0x4>

08002860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <MemManage_Handler+0x4>

08002866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286a:	e7fe      	b.n	800286a <BusFault_Handler+0x4>

0800286c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <UsageFault_Handler+0x4>

08002872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a0:	f000 fbee 	bl	8003080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80028ac:	4802      	ldr	r0, [pc, #8]	; (80028b8 <DMA1_Channel5_IRQHandler+0x10>)
 80028ae:	f001 fdce 	bl	800444e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	200004e4 	.word	0x200004e4

080028bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <CAN1_RX0_IRQHandler+0x10>)
 80028c2:	f001 f832 	bl	800392a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000398 	.word	0x20000398

080028d0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <CAN1_RX1_IRQHandler+0x10>)
 80028d6:	f001 f828 	bl	800392a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000398 	.word	0x20000398

080028e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_BTN_Pin);
 80028e8:	2040      	movs	r0, #64	; 0x40
 80028ea:	f002 f913 	bl	8004b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028f8:	4802      	ldr	r0, [pc, #8]	; (8002904 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80028fa:	f004 f830 	bl	800695e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000414 	.word	0x20000414

08002908 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800290c:	4802      	ldr	r0, [pc, #8]	; (8002918 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800290e:	f004 f826 	bl	800695e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000414 	.word	0x20000414

0800291c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002922:	f004 f81c 	bl	800695e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000414 	.word	0x20000414

08002930 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <TIM1_CC_IRQHandler+0x10>)
 8002936:	f004 f812 	bl	800695e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000414 	.word	0x20000414

08002944 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <USART1_IRQHandler+0x10>)
 800294a:	f004 fddd 	bl	8007508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000460 	.word	0x20000460

08002958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
	return 1;
 800295c:	2301      	movs	r3, #1
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_kill>:

int _kill(int pid, int sig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002972:	f005 ff45 	bl	8008800 <__errno>
 8002976:	4603      	mov	r3, r0
 8002978:	2216      	movs	r2, #22
 800297a:	601a      	str	r2, [r3, #0]
	return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <_exit>:

void _exit (int status)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ffe7 	bl	8002968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800299a:	e7fe      	b.n	800299a <_exit+0x12>

0800299c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e00a      	b.n	80029c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029ae:	f3af 8000 	nop.w
 80029b2:	4601      	mov	r1, r0
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	60ba      	str	r2, [r7, #8]
 80029ba:	b2ca      	uxtb	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dbf0      	blt.n	80029ae <_read+0x12>
	}

return len;
 80029cc:	687b      	ldr	r3, [r7, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	e009      	b.n	80029fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	60ba      	str	r2, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	dbf1      	blt.n	80029e8 <_write+0x12>
	}
	return len;
 8002a04:	687b      	ldr	r3, [r7, #4]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_close>:

int _close(int file)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
	return -1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a36:	605a      	str	r2, [r3, #4]
	return 0;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <_isatty>:

int _isatty(int file)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
	return 0;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <_sbrk+0x5c>)
 8002a82:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <_sbrk+0x60>)
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <_sbrk+0x64>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <_sbrk+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <_sbrk+0x64>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d207      	bcs.n	8002ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa8:	f005 feaa 	bl	8008800 <__errno>
 8002aac:	4603      	mov	r3, r0
 8002aae:	220c      	movs	r2, #12
 8002ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab6:	e009      	b.n	8002acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <_sbrk+0x64>)
 8002ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20010000 	.word	0x20010000
 8002ad8:	00000400 	.word	0x00000400
 8002adc:	200005a0 	.word	0x200005a0
 8002ae0:	200009c0 	.word	0x200009c0

08002ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <SystemInit+0x28>)
 8002aea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aee:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <SystemInit+0x28>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <SystemInit+0x28>)
 8002af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b14:	f7ff ffe6 	bl	8002ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b18:	480c      	ldr	r0, [pc, #48]	; (8002b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b1a:	490d      	ldr	r1, [pc, #52]	; (8002b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <LoopForever+0xe>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b20:	e002      	b.n	8002b28 <LoopCopyDataInit>

08002b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b26:	3304      	adds	r3, #4

08002b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b2c:	d3f9      	bcc.n	8002b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b30:	4c0a      	ldr	r4, [pc, #40]	; (8002b5c <LoopForever+0x16>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b34:	e001      	b.n	8002b3a <LoopFillZerobss>

08002b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b38:	3204      	adds	r2, #4

08002b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b3c:	d3fb      	bcc.n	8002b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b3e:	f005 fe65 	bl	800880c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b42:	f7ff facb 	bl	80020dc <main>

08002b46 <LoopForever>:

LoopForever:
    b LoopForever
 8002b46:	e7fe      	b.n	8002b46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b50:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002b54:	0800dc2c 	.word	0x0800dc2c
  ldr r2, =_sbss
 8002b58:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002b5c:	200009c0 	.word	0x200009c0

08002b60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <ADC1_IRQHandler>

08002b62 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af04      	add	r7, sp, #16
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	9302      	str	r3, [sp, #8]
 8002b80:	2301      	movs	r3, #1
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	1dfb      	adds	r3, r7, #7
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2178      	movs	r1, #120	; 0x78
 8002b8e:	4803      	ldr	r0, [pc, #12]	; (8002b9c <ssd1306_WriteCommand+0x2c>)
 8002b90:	f002 f868 	bl	8004c64 <HAL_I2C_Mem_Write>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200003c0 	.word	0x200003c0

08002ba0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb2:	9202      	str	r2, [sp, #8]
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	2240      	movs	r2, #64	; 0x40
 8002bbe:	2178      	movs	r1, #120	; 0x78
 8002bc0:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <ssd1306_WriteData+0x30>)
 8002bc2:	f002 f84f 	bl	8004c64 <HAL_I2C_Mem_Write>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200003c0 	.word	0x200003c0

08002bd4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002bd8:	f7ff ffc3 	bl	8002b62 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002bdc:	2064      	movs	r0, #100	; 0x64
 8002bde:	f000 fa6f 	bl	80030c0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002be2:	2000      	movs	r0, #0
 8002be4:	f000 f9da 	bl	8002f9c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002be8:	2020      	movs	r0, #32
 8002bea:	f7ff ffc1 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f7ff ffbe 	bl	8002b70 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002bf4:	20b0      	movs	r0, #176	; 0xb0
 8002bf6:	f7ff ffbb 	bl	8002b70 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002bfa:	20c8      	movs	r0, #200	; 0xc8
 8002bfc:	f7ff ffb8 	bl	8002b70 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7ff ffb5 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002c06:	2010      	movs	r0, #16
 8002c08:	f7ff ffb2 	bl	8002b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002c0c:	2040      	movs	r0, #64	; 0x40
 8002c0e:	f7ff ffaf 	bl	8002b70 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002c12:	20ff      	movs	r0, #255	; 0xff
 8002c14:	f000 f9ae 	bl	8002f74 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002c18:	20a1      	movs	r0, #161	; 0xa1
 8002c1a:	f7ff ffa9 	bl	8002b70 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002c1e:	20a6      	movs	r0, #166	; 0xa6
 8002c20:	f7ff ffa6 	bl	8002b70 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002c24:	20a8      	movs	r0, #168	; 0xa8
 8002c26:	f7ff ffa3 	bl	8002b70 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002c2a:	203f      	movs	r0, #63	; 0x3f
 8002c2c:	f7ff ffa0 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002c30:	20a4      	movs	r0, #164	; 0xa4
 8002c32:	f7ff ff9d 	bl	8002b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002c36:	20d3      	movs	r0, #211	; 0xd3
 8002c38:	f7ff ff9a 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7ff ff97 	bl	8002b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002c42:	20d5      	movs	r0, #213	; 0xd5
 8002c44:	f7ff ff94 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002c48:	20f0      	movs	r0, #240	; 0xf0
 8002c4a:	f7ff ff91 	bl	8002b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002c4e:	20d9      	movs	r0, #217	; 0xd9
 8002c50:	f7ff ff8e 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002c54:	2022      	movs	r0, #34	; 0x22
 8002c56:	f7ff ff8b 	bl	8002b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002c5a:	20da      	movs	r0, #218	; 0xda
 8002c5c:	f7ff ff88 	bl	8002b70 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002c60:	2012      	movs	r0, #18
 8002c62:	f7ff ff85 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002c66:	20db      	movs	r0, #219	; 0xdb
 8002c68:	f7ff ff82 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002c6c:	2020      	movs	r0, #32
 8002c6e:	f7ff ff7f 	bl	8002b70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002c72:	208d      	movs	r0, #141	; 0x8d
 8002c74:	f7ff ff7c 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002c78:	2014      	movs	r0, #20
 8002c7a:	f7ff ff79 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f000 f98c 	bl	8002f9c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f000 f80f 	bl	8002ca8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002c8a:	f000 f831 	bl	8002cf0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <ssd1306_Init+0xd0>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <ssd1306_Init+0xd0>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002c9a:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <ssd1306_Init+0xd0>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	711a      	strb	r2, [r3, #4]
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200009a4 	.word	0x200009a4

08002ca8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	e00d      	b.n	8002cd4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <ssd1306_Fill+0x1a>
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	e000      	b.n	8002cc4 <ssd1306_Fill+0x1c>
 8002cc2:	21ff      	movs	r1, #255	; 0xff
 8002cc4:	4a09      	ldr	r2, [pc, #36]	; (8002cec <ssd1306_Fill+0x44>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	460a      	mov	r2, r1
 8002ccc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d3ed      	bcc.n	8002cb8 <ssd1306_Fill+0x10>
    }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	200005a4 	.word	0x200005a4

08002cf0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	71fb      	strb	r3, [r7, #7]
 8002cfa:	e016      	b.n	8002d2a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	3b50      	subs	r3, #80	; 0x50
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff34 	bl	8002b70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7ff ff31 	bl	8002b70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002d0e:	2010      	movs	r0, #16
 8002d10:	f7ff ff2e 	bl	8002b70 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	01db      	lsls	r3, r3, #7
 8002d18:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <ssd1306_UpdateScreen+0x4c>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff3e 	bl	8002ba0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	3301      	adds	r3, #1
 8002d28:	71fb      	strb	r3, [r7, #7]
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	2b07      	cmp	r3, #7
 8002d2e:	d9e5      	bls.n	8002cfc <ssd1306_UpdateScreen+0xc>
    }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200005a4 	.word	0x200005a4

08002d40 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	71bb      	strb	r3, [r7, #6]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db3d      	blt.n	8002dd6 <ssd1306_DrawPixel+0x96>
 8002d5a:	79bb      	ldrb	r3, [r7, #6]
 8002d5c:	2b3f      	cmp	r3, #63	; 0x3f
 8002d5e:	d83a      	bhi.n	8002dd6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002d60:	797b      	ldrb	r3, [r7, #5]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d11a      	bne.n	8002d9c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d66:	79fa      	ldrb	r2, [r7, #7]
 8002d68:	79bb      	ldrb	r3, [r7, #6]
 8002d6a:	08db      	lsrs	r3, r3, #3
 8002d6c:	b2d8      	uxtb	r0, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	01db      	lsls	r3, r3, #7
 8002d72:	4413      	add	r3, r2
 8002d74:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <ssd1306_DrawPixel+0xa4>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	b25a      	sxtb	r2, r3
 8002d7a:	79bb      	ldrb	r3, [r7, #6]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	2101      	movs	r1, #1
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b259      	sxtb	r1, r3
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	4603      	mov	r3, r0
 8002d90:	01db      	lsls	r3, r3, #7
 8002d92:	4413      	add	r3, r2
 8002d94:	b2c9      	uxtb	r1, r1
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <ssd1306_DrawPixel+0xa4>)
 8002d98:	54d1      	strb	r1, [r2, r3]
 8002d9a:	e01d      	b.n	8002dd8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d9c:	79fa      	ldrb	r2, [r7, #7]
 8002d9e:	79bb      	ldrb	r3, [r7, #6]
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	b2d8      	uxtb	r0, r3
 8002da4:	4603      	mov	r3, r0
 8002da6:	01db      	lsls	r3, r3, #7
 8002da8:	4413      	add	r3, r2
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <ssd1306_DrawPixel+0xa4>)
 8002dac:	5cd3      	ldrb	r3, [r2, r3]
 8002dae:	b25a      	sxtb	r2, r3
 8002db0:	79bb      	ldrb	r3, [r7, #6]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	b25b      	sxtb	r3, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	b259      	sxtb	r1, r3
 8002dc6:	79fa      	ldrb	r2, [r7, #7]
 8002dc8:	4603      	mov	r3, r0
 8002dca:	01db      	lsls	r3, r3, #7
 8002dcc:	4413      	add	r3, r2
 8002dce:	b2c9      	uxtb	r1, r1
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <ssd1306_DrawPixel+0xa4>)
 8002dd2:	54d1      	strb	r1, [r2, r3]
 8002dd4:	e000      	b.n	8002dd8 <ssd1306_DrawPixel+0x98>
        return;
 8002dd6:	bf00      	nop
    }
}
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	200005a4 	.word	0x200005a4

08002de8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4604      	mov	r4, r0
 8002df0:	1d38      	adds	r0, r7, #4
 8002df2:	e880 0006 	stmia.w	r0, {r1, r2}
 8002df6:	461a      	mov	r2, r3
 8002df8:	4623      	mov	r3, r4
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b1f      	cmp	r3, #31
 8002e04:	d902      	bls.n	8002e0c <ssd1306_WriteChar+0x24>
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b7e      	cmp	r3, #126	; 0x7e
 8002e0a:	d901      	bls.n	8002e10 <ssd1306_WriteChar+0x28>
        return 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e06d      	b.n	8002eec <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002e10:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <ssd1306_WriteChar+0x10c>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	793b      	ldrb	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	2b80      	cmp	r3, #128	; 0x80
 8002e1c:	dc06      	bgt.n	8002e2c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002e1e:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <ssd1306_WriteChar+0x10c>)
 8002e20:	885b      	ldrh	r3, [r3, #2]
 8002e22:	461a      	mov	r2, r3
 8002e24:	797b      	ldrb	r3, [r7, #5]
 8002e26:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	dd01      	ble.n	8002e30 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e05d      	b.n	8002eec <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	e04c      	b.n	8002ed0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	3b20      	subs	r3, #32
 8002e3c:	7979      	ldrb	r1, [r7, #5]
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	440b      	add	r3, r1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	e034      	b.n	8002ec0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d012      	beq.n	8002e8c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <ssd1306_WriteChar+0x10c>)
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	b2d8      	uxtb	r0, r3
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <ssd1306_WriteChar+0x10c>)
 8002e76:	885b      	ldrh	r3, [r3, #2]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	7bba      	ldrb	r2, [r7, #14]
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7ff ff5b 	bl	8002d40 <ssd1306_DrawPixel>
 8002e8a:	e016      	b.n	8002eba <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <ssd1306_WriteChar+0x10c>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4413      	add	r3, r2
 8002e98:	b2d8      	uxtb	r0, r3
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <ssd1306_WriteChar+0x10c>)
 8002e9c:	885b      	ldrh	r3, [r3, #2]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	b2d9      	uxtb	r1, r3
 8002ea8:	7bbb      	ldrb	r3, [r7, #14]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f7ff ff43 	bl	8002d40 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	793b      	ldrb	r3, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d3c5      	bcc.n	8002e56 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	797b      	ldrb	r3, [r7, #5]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d3ad      	bcc.n	8002e36 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <ssd1306_WriteChar+0x10c>)
 8002edc:	881a      	ldrh	r2, [r3, #0]
 8002ede:	793b      	ldrb	r3, [r7, #4]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <ssd1306_WriteChar+0x10c>)
 8002ee8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3724      	adds	r7, #36	; 0x24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd90      	pop	{r4, r7, pc}
 8002ef4:	200009a4 	.word	0x200009a4

08002ef8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	1d38      	adds	r0, r7, #4
 8002f02:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f06:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002f08:	e012      	b.n	8002f30 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	7818      	ldrb	r0, [r3, #0]
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	1d3a      	adds	r2, r7, #4
 8002f12:	ca06      	ldmia	r2, {r1, r2}
 8002f14:	f7ff ff68 	bl	8002de8 <ssd1306_WriteChar>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d002      	beq.n	8002f2a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	e008      	b.n	8002f3c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e8      	bne.n	8002f0a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	71fb      	strb	r3, [r7, #7]
 8002f50:	4613      	mov	r3, r2
 8002f52:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <ssd1306_SetCursor+0x2c>)
 8002f5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002f5c:	79bb      	ldrb	r3, [r7, #6]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <ssd1306_SetCursor+0x2c>)
 8002f62:	805a      	strh	r2, [r3, #2]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	200009a4 	.word	0x200009a4

08002f74 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002f7e:	2381      	movs	r3, #129	; 0x81
 8002f80:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fdf3 	bl	8002b70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fdef 	bl	8002b70 <ssd1306_WriteCommand>
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002fac:	23af      	movs	r3, #175	; 0xaf
 8002fae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <ssd1306_SetDisplayOn+0x38>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	715a      	strb	r2, [r3, #5]
 8002fb6:	e004      	b.n	8002fc2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002fb8:	23ae      	movs	r3, #174	; 0xae
 8002fba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <ssd1306_SetDisplayOn+0x38>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fdd3 	bl	8002b70 <ssd1306_WriteCommand>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200009a4 	.word	0x200009a4

08002fd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	f000 ffba 	bl	8003f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f000 f80d 	bl	8003008 <HAL_InitTick>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	71fb      	strb	r3, [r7, #7]
 8002ff8:	e001      	b.n	8002ffe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ffa:	f7ff fa67 	bl	80024cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_InitTick+0x6c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d023      	beq.n	8003064 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800301c:	4b16      	ldr	r3, [pc, #88]	; (8003078 <HAL_InitTick+0x70>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <HAL_InitTick+0x6c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	4619      	mov	r1, r3
 8003026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302a:	fbb3 f3f1 	udiv	r3, r3, r1
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	4618      	mov	r0, r3
 8003034:	f000 ffd5 	bl	8003fe2 <HAL_SYSTICK_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b0f      	cmp	r3, #15
 8003042:	d809      	bhi.n	8003058 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003044:	2200      	movs	r2, #0
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	f04f 30ff 	mov.w	r0, #4294967295
 800304c:	f000 ff91 	bl	8003f72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_InitTick+0x74>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e007      	b.n	8003068 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e004      	b.n	8003068 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e001      	b.n	8003068 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000184 	.word	0x20000184
 8003078:	2000016c 	.word	0x2000016c
 800307c:	20000180 	.word	0x20000180

08003080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000184 	.word	0x20000184
 80030a4:	200009ac 	.word	0x200009ac

080030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	200009ac 	.word	0x200009ac

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000184 	.word	0x20000184

08003108 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0ed      	b.n	80032f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff f9f4 	bl	8002514 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800313c:	f7ff ffb4 	bl	80030a8 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003142:	e012      	b.n	800316a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003144:	f7ff ffb0 	bl	80030a8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b0a      	cmp	r3, #10
 8003150:	d90b      	bls.n	800316a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2205      	movs	r2, #5
 8003162:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0c5      	b.n	80032f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0e5      	beq.n	8003144 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0202 	bic.w	r2, r2, #2
 8003186:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003188:	f7ff ff8e 	bl	80030a8 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800318e:	e012      	b.n	80031b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003190:	f7ff ff8a 	bl	80030a8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b0a      	cmp	r3, #10
 800319c:	d90b      	bls.n	80031b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2205      	movs	r2, #5
 80031ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e09f      	b.n	80032f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e5      	bne.n	8003190 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e1b      	ldrb	r3, [r3, #24]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d108      	bne.n	80031de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e007      	b.n	80031ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7e5b      	ldrb	r3, [r3, #25]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d108      	bne.n	8003208 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e007      	b.n	8003218 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003216:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	7e9b      	ldrb	r3, [r3, #26]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d108      	bne.n	8003232 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0220 	orr.w	r2, r2, #32
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	e007      	b.n	8003242 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0220 	bic.w	r2, r2, #32
 8003240:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7edb      	ldrb	r3, [r3, #27]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d108      	bne.n	800325c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0210 	bic.w	r2, r2, #16
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e007      	b.n	800326c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0210 	orr.w	r2, r2, #16
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7f1b      	ldrb	r3, [r3, #28]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d108      	bne.n	8003286 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0208 	orr.w	r2, r2, #8
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e007      	b.n	8003296 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0208 	bic.w	r2, r2, #8
 8003294:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7f5b      	ldrb	r3, [r3, #29]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d108      	bne.n	80032b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0204 	orr.w	r2, r2, #4
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e007      	b.n	80032c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0204 	bic.w	r2, r2, #4
 80032be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	ea42 0103 	orr.w	r1, r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	1e5a      	subs	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003314:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d003      	beq.n	8003324 <HAL_CAN_ConfigFilter+0x26>
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b02      	cmp	r3, #2
 8003320:	f040 80aa 	bne.w	8003478 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800332a:	f043 0201 	orr.w	r2, r3, #1
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2201      	movs	r2, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	43db      	mvns	r3, r3
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d123      	bne.n	80033a6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	43db      	mvns	r3, r3
 8003368:	401a      	ands	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003380:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3248      	adds	r2, #72	; 0x48
 8003386:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800339a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800339c:	6979      	ldr	r1, [r7, #20]
 800339e:	3348      	adds	r3, #72	; 0x48
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d122      	bne.n	80033f4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	3248      	adds	r2, #72	; 0x48
 80033d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ea:	6979      	ldr	r1, [r7, #20]
 80033ec:	3348      	adds	r3, #72	; 0x48
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800340e:	e007      	b.n	8003420 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	431a      	orrs	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	43db      	mvns	r3, r3
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800343a:	e007      	b.n	800344c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	431a      	orrs	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d107      	bne.n	8003464 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	431a      	orrs	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800346a:	f023 0201 	bic.w	r2, r3, #1
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e006      	b.n	8003486 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d12e      	bne.n	8003504 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034be:	f7ff fdf3 	bl	80030a8 <HAL_GetTick>
 80034c2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034c4:	e012      	b.n	80034ec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034c6:	f7ff fdef 	bl	80030a8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b0a      	cmp	r3, #10
 80034d2:	d90b      	bls.n	80034ec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2205      	movs	r2, #5
 80034e4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e012      	b.n	8003512 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e5      	bne.n	80034c6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e006      	b.n	8003512 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800351a:	b480      	push	{r7}
 800351c:	b089      	sub	sp, #36	; 0x24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800352e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003538:	7ffb      	ldrb	r3, [r7, #31]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d003      	beq.n	8003546 <HAL_CAN_AddTxMessage+0x2c>
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	2b02      	cmp	r3, #2
 8003542:	f040 80ad 	bne.w	80036a0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003556:	2b00      	cmp	r3, #0
 8003558:	d105      	bne.n	8003566 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8095 	beq.w	8003690 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	0e1b      	lsrs	r3, r3, #24
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003570:	2201      	movs	r2, #1
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	409a      	lsls	r2, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	6809      	ldr	r1, [r1, #0]
 8003590:	431a      	orrs	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3318      	adds	r3, #24
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	440b      	add	r3, r1
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	e00f      	b.n	80035be <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	3318      	adds	r3, #24
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	440b      	add	r3, r1
 80035bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3318      	adds	r3, #24
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	440b      	add	r3, r1
 80035ce:	3304      	adds	r3, #4
 80035d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	7d1b      	ldrb	r3, [r3, #20]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d111      	bne.n	80035fe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	3318      	adds	r3, #24
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3318      	adds	r3, #24
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	440b      	add	r3, r1
 80035fa:	3304      	adds	r3, #4
 80035fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3307      	adds	r3, #7
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	061a      	lsls	r2, r3, #24
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3306      	adds	r3, #6
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3305      	adds	r3, #5
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4313      	orrs	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	3204      	adds	r2, #4
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	4610      	mov	r0, r2
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	6811      	ldr	r1, [r2, #0]
 8003626:	ea43 0200 	orr.w	r2, r3, r0
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	440b      	add	r3, r1
 8003630:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003634:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3303      	adds	r3, #3
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	061a      	lsls	r2, r3, #24
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3302      	adds	r3, #2
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3301      	adds	r3, #1
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	4313      	orrs	r3, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	4610      	mov	r0, r2
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	6811      	ldr	r1, [r2, #0]
 800365c:	ea43 0200 	orr.w	r2, r3, r0
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	440b      	add	r3, r1
 8003666:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800366a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3318      	adds	r3, #24
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4413      	add	r3, r2
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	6811      	ldr	r1, [r2, #0]
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	3318      	adds	r3, #24
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	440b      	add	r3, r1
 800368a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e00e      	b.n	80036ae <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e006      	b.n	80036ae <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036ba:	b480      	push	{r7}
 80036bc:	b087      	sub	sp, #28
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d003      	beq.n	80036de <HAL_CAN_GetRxMessage+0x24>
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	f040 80f3 	bne.w	80038c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10e      	bne.n	8003702 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d116      	bne.n	8003720 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0e7      	b.n	80038d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0d8      	b.n	80038d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	331b      	adds	r3, #27
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	4413      	add	r3, r2
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0204 	and.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10c      	bne.n	8003758 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	331b      	adds	r3, #27
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	4413      	add	r3, r2
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0d5b      	lsrs	r3, r3, #21
 800374e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e00b      	b.n	8003770 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	331b      	adds	r3, #27
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	4413      	add	r3, r2
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	331b      	adds	r3, #27
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	4413      	add	r3, r2
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0202 	and.w	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	331b      	adds	r3, #27
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	4413      	add	r3, r2
 8003792:	3304      	adds	r3, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	331b      	adds	r3, #27
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	4413      	add	r3, r2
 80037aa:	3304      	adds	r3, #4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	331b      	adds	r3, #27
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	0c1b      	lsrs	r3, r3, #16
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	0a1a      	lsrs	r2, r3, #8
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	4413      	add	r3, r2
 8003808:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0c1a      	lsrs	r2, r3, #16
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	3302      	adds	r3, #2
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	4413      	add	r3, r2
 8003822:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0e1a      	lsrs	r2, r3, #24
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	3303      	adds	r3, #3
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	4413      	add	r3, r2
 800383c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	3304      	adds	r3, #4
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	4413      	add	r3, r2
 8003854:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0a1a      	lsrs	r2, r3, #8
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	3305      	adds	r3, #5
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	4413      	add	r3, r2
 800386e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0c1a      	lsrs	r2, r3, #16
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	3306      	adds	r3, #6
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	4413      	add	r3, r2
 8003888:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0e1a      	lsrs	r2, r3, #24
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	3307      	adds	r3, #7
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d108      	bne.n	80038b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0220 	orr.w	r2, r2, #32
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	e007      	b.n	80038c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0220 	orr.w	r2, r2, #32
 80038be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e006      	b.n	80038d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
  }
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d002      	beq.n	80038fc <HAL_CAN_ActivateNotification+0x1e>
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d109      	bne.n	8003910 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6959      	ldr	r1, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e006      	b.n	800391e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b08a      	sub	sp, #40	; 0x28
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003932:	2300      	movs	r3, #0
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d07c      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d023      	beq.n	80039c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2201      	movs	r2, #1
 8003980:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f983 	bl	8003c98 <HAL_CAN_TxMailbox0CompleteCallback>
 8003992:	e016      	b.n	80039c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
 80039a6:	e00c      	b.n	80039c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	e002      	b.n	80039c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f989 	bl	8003cd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d024      	beq.n	8003a16 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f963 	bl	8003cac <HAL_CAN_TxMailbox1CompleteCallback>
 80039e6:	e016      	b.n	8003a16 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	e00c      	b.n	8003a16 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	e002      	b.n	8003a16 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f969 	bl	8003ce8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d024      	beq.n	8003a6a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f943 	bl	8003cc0 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a3a:	e016      	b.n	8003a6a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	e00c      	b.n	8003a6a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
 8003a62:	e002      	b.n	8003a6a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f949 	bl	8003cfc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00c      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f930 	bl	8003d10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fd faa9 	bl	8001020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00c      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2210      	movs	r2, #16
 8003af0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f912 	bl	8003d38 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f8f9 	bl	8003d24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8fc 	bl	8003d4c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d006      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8f5 	bl	8003d60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d07b      	beq.n	8003c78 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d072      	beq.n	8003c70 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d043      	beq.n	8003c70 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d03e      	beq.n	8003c70 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bf8:	2b60      	cmp	r3, #96	; 0x60
 8003bfa:	d02b      	beq.n	8003c54 <HAL_CAN_IRQHandler+0x32a>
 8003bfc:	2b60      	cmp	r3, #96	; 0x60
 8003bfe:	d82e      	bhi.n	8003c5e <HAL_CAN_IRQHandler+0x334>
 8003c00:	2b50      	cmp	r3, #80	; 0x50
 8003c02:	d022      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x320>
 8003c04:	2b50      	cmp	r3, #80	; 0x50
 8003c06:	d82a      	bhi.n	8003c5e <HAL_CAN_IRQHandler+0x334>
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d019      	beq.n	8003c40 <HAL_CAN_IRQHandler+0x316>
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d826      	bhi.n	8003c5e <HAL_CAN_IRQHandler+0x334>
 8003c10:	2b30      	cmp	r3, #48	; 0x30
 8003c12:	d010      	beq.n	8003c36 <HAL_CAN_IRQHandler+0x30c>
 8003c14:	2b30      	cmp	r3, #48	; 0x30
 8003c16:	d822      	bhi.n	8003c5e <HAL_CAN_IRQHandler+0x334>
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d002      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x2f8>
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d005      	beq.n	8003c2c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c20:	e01d      	b.n	8003c5e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	f043 0308 	orr.w	r3, r3, #8
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c2a:	e019      	b.n	8003c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	f043 0310 	orr.w	r3, r3, #16
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c34:	e014      	b.n	8003c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f043 0320 	orr.w	r3, r3, #32
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c3e:	e00f      	b.n	8003c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c48:	e00a      	b.n	8003c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c52:	e005      	b.n	8003c60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c5c:	e000      	b.n	8003c60 <HAL_CAN_IRQHandler+0x336>
            break;
 8003c5e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c6e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2204      	movs	r2, #4
 8003c76:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd fa10 	bl	80010b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c90:	bf00      	nop
 8003c92:	3728      	adds	r7, #40	; 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d90:	4013      	ands	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003da6:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <__NVIC_SetPriorityGrouping+0x44>)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	60d3      	str	r3, [r2, #12]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	f003 0307 	and.w	r3, r3, #7
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	db0b      	blt.n	8003e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	f003 021f 	and.w	r2, r3, #31
 8003df0:	4907      	ldr	r1, [pc, #28]	; (8003e10 <__NVIC_EnableIRQ+0x38>)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2001      	movs	r0, #1
 8003dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	db12      	blt.n	8003e4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	490a      	ldr	r1, [pc, #40]	; (8003e58 <__NVIC_DisableIRQ+0x44>)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	2001      	movs	r0, #1
 8003e36:	fa00 f202 	lsl.w	r2, r0, r2
 8003e3a:	3320      	adds	r3, #32
 8003e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e40:	f3bf 8f4f 	dsb	sy
}
 8003e44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e46:	f3bf 8f6f 	isb	sy
}
 8003e4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	e000e100 	.word	0xe000e100

08003e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	6039      	str	r1, [r7, #0]
 8003e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	db0a      	blt.n	8003e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	490c      	ldr	r1, [pc, #48]	; (8003ea8 <__NVIC_SetPriority+0x4c>)
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	0112      	lsls	r2, r2, #4
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	440b      	add	r3, r1
 8003e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e84:	e00a      	b.n	8003e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	4908      	ldr	r1, [pc, #32]	; (8003eac <__NVIC_SetPriority+0x50>)
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	3b04      	subs	r3, #4
 8003e94:	0112      	lsls	r2, r2, #4
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	440b      	add	r3, r1
 8003e9a:	761a      	strb	r2, [r3, #24]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000e100 	.word	0xe000e100
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	; 0x24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f1c3 0307 	rsb	r3, r3, #7
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	bf28      	it	cs
 8003ece:	2304      	movcs	r3, #4
 8003ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d902      	bls.n	8003ee0 <NVIC_EncodePriority+0x30>
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3b03      	subs	r3, #3
 8003ede:	e000      	b.n	8003ee2 <NVIC_EncodePriority+0x32>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43d9      	mvns	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f08:	4313      	orrs	r3, r2
         );
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3724      	adds	r7, #36	; 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f28:	d301      	bcc.n	8003f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e00f      	b.n	8003f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <SysTick_Config+0x40>)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f36:	210f      	movs	r1, #15
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	f7ff ff8e 	bl	8003e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <SysTick_Config+0x40>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f46:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <SysTick_Config+0x40>)
 8003f48:	2207      	movs	r2, #7
 8003f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	e000e010 	.word	0xe000e010

08003f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ff05 	bl	8003d74 <__NVIC_SetPriorityGrouping>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b086      	sub	sp, #24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	4603      	mov	r3, r0
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f84:	f7ff ff1a 	bl	8003dbc <__NVIC_GetPriorityGrouping>
 8003f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	6978      	ldr	r0, [r7, #20]
 8003f90:	f7ff ff8e 	bl	8003eb0 <NVIC_EncodePriority>
 8003f94:	4602      	mov	r2, r0
 8003f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff5d 	bl	8003e5c <__NVIC_SetPriority>
}
 8003fa2:	bf00      	nop
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff0d 	bl	8003dd8 <__NVIC_EnableIRQ>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff1d 	bl	8003e14 <__NVIC_DisableIRQ>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ff94 	bl	8003f18 <SysTick_Config>
 8003ff0:	4603      	mov	r3, r0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e098      	b.n	8004140 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	4b4d      	ldr	r3, [pc, #308]	; (800414c <HAL_DMA_Init+0x150>)
 8004016:	429a      	cmp	r2, r3
 8004018:	d80f      	bhi.n	800403a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	4b4b      	ldr	r3, [pc, #300]	; (8004150 <HAL_DMA_Init+0x154>)
 8004022:	4413      	add	r3, r2
 8004024:	4a4b      	ldr	r2, [pc, #300]	; (8004154 <HAL_DMA_Init+0x158>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	091b      	lsrs	r3, r3, #4
 800402c:	009a      	lsls	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a48      	ldr	r2, [pc, #288]	; (8004158 <HAL_DMA_Init+0x15c>)
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
 8004038:	e00e      	b.n	8004058 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	4b46      	ldr	r3, [pc, #280]	; (800415c <HAL_DMA_Init+0x160>)
 8004042:	4413      	add	r3, r2
 8004044:	4a43      	ldr	r2, [pc, #268]	; (8004154 <HAL_DMA_Init+0x158>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	009a      	lsls	r2, r3, #2
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a42      	ldr	r2, [pc, #264]	; (8004160 <HAL_DMA_Init+0x164>)
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800407c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b2:	d039      	beq.n	8004128 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	4a27      	ldr	r2, [pc, #156]	; (8004158 <HAL_DMA_Init+0x15c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d11a      	bne.n	80040f4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040be:	4b29      	ldr	r3, [pc, #164]	; (8004164 <HAL_DMA_Init+0x168>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f003 031c 	and.w	r3, r3, #28
 80040ca:	210f      	movs	r1, #15
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	4924      	ldr	r1, [pc, #144]	; (8004164 <HAL_DMA_Init+0x168>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80040d8:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_DMA_Init+0x168>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	f003 031c 	and.w	r3, r3, #28
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	491d      	ldr	r1, [pc, #116]	; (8004164 <HAL_DMA_Init+0x168>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]
 80040f2:	e019      	b.n	8004128 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80040f4:	4b1c      	ldr	r3, [pc, #112]	; (8004168 <HAL_DMA_Init+0x16c>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fc:	f003 031c 	and.w	r3, r3, #28
 8004100:	210f      	movs	r1, #15
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	43db      	mvns	r3, r3
 8004108:	4917      	ldr	r1, [pc, #92]	; (8004168 <HAL_DMA_Init+0x16c>)
 800410a:	4013      	ands	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800410e:	4b16      	ldr	r3, [pc, #88]	; (8004168 <HAL_DMA_Init+0x16c>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f003 031c 	and.w	r3, r3, #28
 800411e:	fa01 f303 	lsl.w	r3, r1, r3
 8004122:	4911      	ldr	r1, [pc, #68]	; (8004168 <HAL_DMA_Init+0x16c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40020407 	.word	0x40020407
 8004150:	bffdfff8 	.word	0xbffdfff8
 8004154:	cccccccd 	.word	0xcccccccd
 8004158:	40020000 	.word	0x40020000
 800415c:	bffdfbf8 	.word	0xbffdfbf8
 8004160:	40020400 	.word	0x40020400
 8004164:	400200a8 	.word	0x400200a8
 8004168:	400204a8 	.word	0x400204a8

0800416c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e072      	b.n	8004264 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_DMA_DeInit+0x104>)
 8004196:	429a      	cmp	r2, r3
 8004198:	d80f      	bhi.n	80041ba <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	4b34      	ldr	r3, [pc, #208]	; (8004274 <HAL_DMA_DeInit+0x108>)
 80041a2:	4413      	add	r3, r2
 80041a4:	4a34      	ldr	r2, [pc, #208]	; (8004278 <HAL_DMA_DeInit+0x10c>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	009a      	lsls	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a31      	ldr	r2, [pc, #196]	; (800427c <HAL_DMA_DeInit+0x110>)
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
 80041b8:	e00e      	b.n	80041d8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <HAL_DMA_DeInit+0x114>)
 80041c2:	4413      	add	r3, r2
 80041c4:	4a2c      	ldr	r2, [pc, #176]	; (8004278 <HAL_DMA_DeInit+0x10c>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	009a      	lsls	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <HAL_DMA_DeInit+0x118>)
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e4:	f003 021c 	and.w	r2, r3, #28
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	2101      	movs	r1, #1
 80041ee:	fa01 f202 	lsl.w	r2, r1, r2
 80041f2:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	4a20      	ldr	r2, [pc, #128]	; (800427c <HAL_DMA_DeInit+0x110>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10d      	bne.n	800421a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041fe:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_DMA_DeInit+0x11c>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f003 031c 	and.w	r3, r3, #28
 800420a:	210f      	movs	r1, #15
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	491d      	ldr	r1, [pc, #116]	; (8004288 <HAL_DMA_DeInit+0x11c>)
 8004214:	4013      	ands	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
 8004218:	e00c      	b.n	8004234 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800421a:	4b1c      	ldr	r3, [pc, #112]	; (800428c <HAL_DMA_DeInit+0x120>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f003 031c 	and.w	r3, r3, #28
 8004226:	210f      	movs	r1, #15
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	4917      	ldr	r1, [pc, #92]	; (800428c <HAL_DMA_DeInit+0x120>)
 8004230:	4013      	ands	r3, r2
 8004232:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40020407 	.word	0x40020407
 8004274:	bffdfff8 	.word	0xbffdfff8
 8004278:	cccccccd 	.word	0xcccccccd
 800427c:	40020000 	.word	0x40020000
 8004280:	bffdfbf8 	.word	0xbffdfbf8
 8004284:	40020400 	.word	0x40020400
 8004288:	400200a8 	.word	0x400200a8
 800428c:	400204a8 	.word	0x400204a8

08004290 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_DMA_Start_IT+0x20>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e04b      	b.n	8004348 <HAL_DMA_Start_IT+0xb8>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d13a      	bne.n	800433a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f95f 	bl	80045ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 020e 	orr.w	r2, r2, #14
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e00f      	b.n	8004328 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0204 	bic.w	r2, r2, #4
 8004316:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 020a 	orr.w	r2, r2, #10
 8004326:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e005      	b.n	8004346 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d008      	beq.n	800437a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2204      	movs	r2, #4
 800436c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e022      	b.n	80043c0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 020e 	bic.w	r2, r2, #14
 8004388:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	f003 021c 	and.w	r2, r3, #28
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2101      	movs	r1, #1
 80043a8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d005      	beq.n	80043f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2204      	movs	r2, #4
 80043e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e029      	b.n	8004444 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 020e 	bic.w	r2, r2, #14
 80043fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0201 	bic.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	f003 021c 	and.w	r2, r3, #28
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	2101      	movs	r1, #1
 800441e:	fa01 f202 	lsl.w	r2, r1, r2
 8004422:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
    }
  }
  return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f003 031c 	and.w	r3, r3, #28
 800446e:	2204      	movs	r2, #4
 8004470:	409a      	lsls	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4013      	ands	r3, r2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d026      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x7a>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d021      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d107      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0204 	bic.w	r2, r2, #4
 80044a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f003 021c 	and.w	r2, r3, #28
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2104      	movs	r1, #4
 80044b0:	fa01 f202 	lsl.w	r2, r1, r2
 80044b4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d071      	beq.n	80045a2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80044c6:	e06c      	b.n	80045a2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	f003 031c 	and.w	r3, r3, #28
 80044d0:	2202      	movs	r2, #2
 80044d2:	409a      	lsls	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02e      	beq.n	800453a <HAL_DMA_IRQHandler+0xec>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d029      	beq.n	800453a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 020a 	bic.w	r2, r2, #10
 8004502:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	f003 021c 	and.w	r2, r3, #28
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	2102      	movs	r1, #2
 800451a:	fa01 f202 	lsl.w	r2, r1, r2
 800451e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d038      	beq.n	80045a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004538:	e033      	b.n	80045a2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f003 031c 	and.w	r3, r3, #28
 8004542:	2208      	movs	r2, #8
 8004544:	409a      	lsls	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02a      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x156>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d025      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 020e 	bic.w	r2, r2, #14
 8004566:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	f003 021c 	and.w	r2, r3, #28
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f202 	lsl.w	r2, r1, r2
 800457a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004596:	2b00      	cmp	r3, #0
 8004598:	d004      	beq.n	80045a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
}
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f003 021c 	and.w	r2, r3, #28
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2101      	movs	r1, #1
 80045c8:	fa01 f202 	lsl.w	r2, r1, r2
 80045cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d108      	bne.n	80045f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045ee:	e007      	b.n	8004600 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800461a:	e154      	b.n	80048c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	2101      	movs	r1, #1
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8146 	beq.w	80048c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d005      	beq.n	800464c <HAL_GPIO_Init+0x40>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d130      	bne.n	80046ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004682:	2201      	movs	r2, #1
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	f003 0201 	and.w	r2, r3, #1
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d017      	beq.n	80046ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43db      	mvns	r3, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4013      	ands	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d123      	bne.n	800473e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	08da      	lsrs	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3208      	adds	r2, #8
 80046fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	220f      	movs	r2, #15
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	08da      	lsrs	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3208      	adds	r2, #8
 8004738:	6939      	ldr	r1, [r7, #16]
 800473a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0203 	and.w	r2, r3, #3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80a0 	beq.w	80048c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004780:	4b58      	ldr	r3, [pc, #352]	; (80048e4 <HAL_GPIO_Init+0x2d8>)
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	4a57      	ldr	r2, [pc, #348]	; (80048e4 <HAL_GPIO_Init+0x2d8>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6613      	str	r3, [r2, #96]	; 0x60
 800478c:	4b55      	ldr	r3, [pc, #340]	; (80048e4 <HAL_GPIO_Init+0x2d8>)
 800478e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004798:	4a53      	ldr	r2, [pc, #332]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	3302      	adds	r3, #2
 80047a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	220f      	movs	r2, #15
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047c2:	d019      	beq.n	80047f8 <HAL_GPIO_Init+0x1ec>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a49      	ldr	r2, [pc, #292]	; (80048ec <HAL_GPIO_Init+0x2e0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <HAL_GPIO_Init+0x1e8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a48      	ldr	r2, [pc, #288]	; (80048f0 <HAL_GPIO_Init+0x2e4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00d      	beq.n	80047f0 <HAL_GPIO_Init+0x1e4>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a47      	ldr	r2, [pc, #284]	; (80048f4 <HAL_GPIO_Init+0x2e8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d007      	beq.n	80047ec <HAL_GPIO_Init+0x1e0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a46      	ldr	r2, [pc, #280]	; (80048f8 <HAL_GPIO_Init+0x2ec>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <HAL_GPIO_Init+0x1dc>
 80047e4:	2304      	movs	r3, #4
 80047e6:	e008      	b.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047e8:	2307      	movs	r3, #7
 80047ea:	e006      	b.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047ec:	2303      	movs	r3, #3
 80047ee:	e004      	b.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e002      	b.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047f8:	2300      	movs	r3, #0
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	f002 0203 	and.w	r2, r2, #3
 8004800:	0092      	lsls	r2, r2, #2
 8004802:	4093      	lsls	r3, r2
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800480a:	4937      	ldr	r1, [pc, #220]	; (80048e8 <HAL_GPIO_Init+0x2dc>)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	3302      	adds	r3, #2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004818:	4b38      	ldr	r3, [pc, #224]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	43db      	mvns	r3, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004842:	4b2e      	ldr	r3, [pc, #184]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004866:	4a25      	ldr	r2, [pc, #148]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800486c:	4b23      	ldr	r3, [pc, #140]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	43db      	mvns	r3, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004890:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004896:	4b19      	ldr	r3, [pc, #100]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	43db      	mvns	r3, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048ba:	4a10      	ldr	r2, [pc, #64]	; (80048fc <HAL_GPIO_Init+0x2f0>)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	3301      	adds	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f47f aea3 	bne.w	800461c <HAL_GPIO_Init+0x10>
  }
}
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40010000 	.word	0x40010000
 80048ec:	48000400 	.word	0x48000400
 80048f0:	48000800 	.word	0x48000800
 80048f4:	48000c00 	.word	0x48000c00
 80048f8:	48001000 	.word	0x48001000
 80048fc:	40010400 	.word	0x40010400

08004900 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800490e:	e0b7      	b.n	8004a80 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004910:	2201      	movs	r2, #1
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	4013      	ands	r3, r2
 800491c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80aa 	beq.w	8004a7a <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004926:	4a5d      	ldr	r2, [pc, #372]	; (8004a9c <HAL_GPIO_DeInit+0x19c>)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	3302      	adds	r3, #2
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004932:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	220f      	movs	r2, #15
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4013      	ands	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800494e:	d019      	beq.n	8004984 <HAL_GPIO_DeInit+0x84>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a53      	ldr	r2, [pc, #332]	; (8004aa0 <HAL_GPIO_DeInit+0x1a0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <HAL_GPIO_DeInit+0x80>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a52      	ldr	r2, [pc, #328]	; (8004aa4 <HAL_GPIO_DeInit+0x1a4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00d      	beq.n	800497c <HAL_GPIO_DeInit+0x7c>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a51      	ldr	r2, [pc, #324]	; (8004aa8 <HAL_GPIO_DeInit+0x1a8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d007      	beq.n	8004978 <HAL_GPIO_DeInit+0x78>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a50      	ldr	r2, [pc, #320]	; (8004aac <HAL_GPIO_DeInit+0x1ac>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d101      	bne.n	8004974 <HAL_GPIO_DeInit+0x74>
 8004970:	2304      	movs	r3, #4
 8004972:	e008      	b.n	8004986 <HAL_GPIO_DeInit+0x86>
 8004974:	2307      	movs	r3, #7
 8004976:	e006      	b.n	8004986 <HAL_GPIO_DeInit+0x86>
 8004978:	2303      	movs	r3, #3
 800497a:	e004      	b.n	8004986 <HAL_GPIO_DeInit+0x86>
 800497c:	2302      	movs	r3, #2
 800497e:	e002      	b.n	8004986 <HAL_GPIO_DeInit+0x86>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <HAL_GPIO_DeInit+0x86>
 8004984:	2300      	movs	r3, #0
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	f002 0203 	and.w	r2, r2, #3
 800498c:	0092      	lsls	r2, r2, #2
 800498e:	4093      	lsls	r3, r2
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	429a      	cmp	r2, r3
 8004994:	d132      	bne.n	80049fc <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004996:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <HAL_GPIO_DeInit+0x1b0>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	43db      	mvns	r3, r3
 800499e:	4944      	ldr	r1, [pc, #272]	; (8004ab0 <HAL_GPIO_DeInit+0x1b0>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <HAL_GPIO_DeInit+0x1b0>)
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	4940      	ldr	r1, [pc, #256]	; (8004ab0 <HAL_GPIO_DeInit+0x1b0>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80049b2:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <HAL_GPIO_DeInit+0x1b0>)
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	493d      	ldr	r1, [pc, #244]	; (8004ab0 <HAL_GPIO_DeInit+0x1b0>)
 80049bc:	4013      	ands	r3, r2
 80049be:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80049c0:	4b3b      	ldr	r3, [pc, #236]	; (8004ab0 <HAL_GPIO_DeInit+0x1b0>)
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	4939      	ldr	r1, [pc, #228]	; (8004ab0 <HAL_GPIO_DeInit+0x1b0>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	220f      	movs	r2, #15
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80049de:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <HAL_GPIO_DeInit+0x19c>)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	3302      	adds	r3, #2
 80049e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	43da      	mvns	r2, r3
 80049ee:	482b      	ldr	r0, [pc, #172]	; (8004a9c <HAL_GPIO_DeInit+0x19c>)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	400a      	ands	r2, r1
 80049f6:	3302      	adds	r3, #2
 80049f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	2103      	movs	r1, #3
 8004a06:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	08da      	lsrs	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3208      	adds	r2, #8
 8004a18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	220f      	movs	r2, #15
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	08d2      	lsrs	r2, r2, #3
 8004a30:	4019      	ands	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3208      	adds	r2, #8
 8004a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	2103      	movs	r1, #3
 8004a44:	fa01 f303 	lsl.w	r3, r1, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	2101      	movs	r1, #1
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	43db      	mvns	r3, r3
 8004a5e:	401a      	ands	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	401a      	ands	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f47f af41 	bne.w	8004910 <HAL_GPIO_DeInit+0x10>
  }
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	48000400 	.word	0x48000400
 8004aa4:	48000800 	.word	0x48000800
 8004aa8:	48000c00 	.word	0x48000c00
 8004aac:	48001000 	.word	0x48001000
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e001      	b.n	8004ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
 8004af0:	4613      	mov	r3, r2
 8004af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004af4:	787b      	ldrb	r3, [r7, #1]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004afa:	887a      	ldrh	r2, [r7, #2]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b00:	e002      	b.n	8004b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b02:	887a      	ldrh	r2, [r7, #2]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d006      	beq.n	8004b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b2a:	4a05      	ldr	r2, [pc, #20]	; (8004b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fd fa8e 	bl	8002054 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40010400 	.word	0x40010400

08004b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e081      	b.n	8004c5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fd fd26 	bl	80025bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2224      	movs	r2, #36	; 0x24
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0201 	bic.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d107      	bne.n	8004bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	e006      	b.n	8004bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d104      	bne.n	8004bde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69d9      	ldr	r1, [r3, #28]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	460b      	mov	r3, r1
 8004c78:	813b      	strh	r3, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	f040 80f9 	bne.w	8004e7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_I2C_Mem_Write+0x34>
 8004c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0ed      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2C_Mem_Write+0x4e>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e0e6      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cba:	f7fe f9f5 	bl	80030a8 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2319      	movs	r3, #25
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f955 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0d1      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2221      	movs	r2, #33	; 0x21
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2240      	movs	r2, #64	; 0x40
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d04:	88f8      	ldrh	r0, [r7, #6]
 8004d06:	893a      	ldrh	r2, [r7, #8]
 8004d08:	8979      	ldrh	r1, [r7, #10]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	4603      	mov	r3, r0
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f8b9 	bl	8004e8c <I2C_RequestMemoryWrite>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0a9      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2bff      	cmp	r3, #255	; 0xff
 8004d34:	d90e      	bls.n	8004d54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	22ff      	movs	r2, #255	; 0xff
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	8979      	ldrh	r1, [r7, #10]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fabd 	bl	80052cc <I2C_TransferConfig>
 8004d52:	e00f      	b.n	8004d74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	8979      	ldrh	r1, [r7, #10]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 faac 	bl	80052cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f93f 	bl	8004ffc <I2C_WaitOnTXISFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e07b      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d034      	beq.n	8004e2c <HAL_I2C_Mem_Write+0x1c8>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d130      	bne.n	8004e2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2180      	movs	r1, #128	; 0x80
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f8d1 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e04d      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2bff      	cmp	r3, #255	; 0xff
 8004dec:	d90e      	bls.n	8004e0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	22ff      	movs	r2, #255	; 0xff
 8004df2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	8979      	ldrh	r1, [r7, #10]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fa61 	bl	80052cc <I2C_TransferConfig>
 8004e0a:	e00f      	b.n	8004e2c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	8979      	ldrh	r1, [r7, #10]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fa50 	bl	80052cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d19e      	bne.n	8004d74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f91e 	bl	800507c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e01a      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6859      	ldr	r1, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <HAL_I2C_Mem_Write+0x224>)
 8004e5e:	400b      	ands	r3, r1
 8004e60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e7e:	2302      	movs	r3, #2
  }
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	fe00e800 	.word	0xfe00e800

08004e8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	8979      	ldrh	r1, [r7, #10]
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <I2C_RequestMemoryWrite+0xa4>)
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 fa09 	bl	80052cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	69b9      	ldr	r1, [r7, #24]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f89c 	bl	8004ffc <I2C_WaitOnTXISFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e02c      	b.n	8004f28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d105      	bne.n	8004ee0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed4:	893b      	ldrh	r3, [r7, #8]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	629a      	str	r2, [r3, #40]	; 0x28
 8004ede:	e015      	b.n	8004f0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ee0:	893b      	ldrh	r3, [r7, #8]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	69b9      	ldr	r1, [r7, #24]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f882 	bl	8004ffc <I2C_WaitOnTXISFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e012      	b.n	8004f28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f02:	893b      	ldrh	r3, [r7, #8]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2200      	movs	r2, #0
 8004f14:	2180      	movs	r1, #128	; 0x80
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f830 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	80002000 	.word	0x80002000

08004f34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d103      	bne.n	8004f52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d007      	beq.n	8004f70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	619a      	str	r2, [r3, #24]
  }
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f8c:	e022      	b.n	8004fd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d01e      	beq.n	8004fd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fe f887 	bl	80030a8 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d113      	bne.n	8004fd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb0:	f043 0220 	orr.w	r2, r3, #32
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e00f      	b.n	8004ff4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d0cd      	beq.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005008:	e02c      	b.n	8005064 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f870 	bl	80050f4 <I2C_IsErrorOccurred>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e02a      	b.n	8005074 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d01e      	beq.n	8005064 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fe f83f 	bl	80030a8 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d113      	bne.n	8005064 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e007      	b.n	8005074 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d1cb      	bne.n	800500a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005088:	e028      	b.n	80050dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 f830 	bl	80050f4 <I2C_IsErrorOccurred>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e026      	b.n	80050ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509e:	f7fe f803 	bl	80030a8 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d113      	bne.n	80050dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e007      	b.n	80050ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d1cf      	bne.n	800508a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	; 0x28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	d075      	beq.n	800520c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2210      	movs	r2, #16
 8005126:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005128:	e056      	b.n	80051d8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d052      	beq.n	80051d8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005132:	f7fd ffb9 	bl	80030a8 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	d302      	bcc.n	8005148 <I2C_IsErrorOccurred+0x54>
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d147      	bne.n	80051d8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005152:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800515a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800516a:	d12e      	bne.n	80051ca <I2C_IsErrorOccurred+0xd6>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005172:	d02a      	beq.n	80051ca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	2b20      	cmp	r3, #32
 8005178:	d027      	beq.n	80051ca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005188:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800518a:	f7fd ff8d 	bl	80030a8 <HAL_GetTick>
 800518e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005190:	e01b      	b.n	80051ca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005192:	f7fd ff89 	bl	80030a8 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b19      	cmp	r3, #25
 800519e:	d914      	bls.n	80051ca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d1dc      	bne.n	8005192 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d003      	beq.n	80051ee <I2C_IsErrorOccurred+0xfa>
 80051e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d09d      	beq.n	800512a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2220      	movs	r2, #32
 80051fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	f043 0304 	orr.w	r3, r3, #4
 8005204:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00b      	beq.n	8005236 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800522e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f043 0308 	orr.w	r3, r3, #8
 8005246:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005250:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f043 0302 	orr.w	r3, r3, #2
 8005268:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005272:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800527a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01c      	beq.n	80052bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff fe56 	bl	8004f34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6859      	ldr	r1, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <I2C_IsErrorOccurred+0x1d4>)
 8005294:	400b      	ands	r3, r1
 8005296:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	431a      	orrs	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80052bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3728      	adds	r7, #40	; 0x28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	fe00e800 	.word	0xfe00e800

080052cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	607b      	str	r3, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	817b      	strh	r3, [r7, #10]
 80052da:	4613      	mov	r3, r2
 80052dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052de:	897b      	ldrh	r3, [r7, #10]
 80052e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052e4:	7a7b      	ldrb	r3, [r7, #9]
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	0d5b      	lsrs	r3, r3, #21
 8005306:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800530a:	4b08      	ldr	r3, [pc, #32]	; (800532c <I2C_TransferConfig+0x60>)
 800530c:	430b      	orrs	r3, r1
 800530e:	43db      	mvns	r3, r3
 8005310:	ea02 0103 	and.w	r1, r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	03ff63ff 	.word	0x03ff63ff

08005330 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b20      	cmp	r3, #32
 8005344:	d138      	bne.n	80053b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005350:	2302      	movs	r3, #2
 8005352:	e032      	b.n	80053ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2224      	movs	r2, #36	; 0x24
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005382:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	e000      	b.n	80053ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053b8:	2302      	movs	r3, #2
  }
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d139      	bne.n	8005450 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e033      	b.n	8005452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2224      	movs	r2, #36	; 0x24
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005418:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005464:	4b04      	ldr	r3, [pc, #16]	; (8005478 <HAL_PWREx_GetVoltageRange+0x18>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40007000 	.word	0x40007000

0800547c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548a:	d130      	bne.n	80054ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800548c:	4b23      	ldr	r3, [pc, #140]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005498:	d038      	beq.n	800550c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800549a:	4b20      	ldr	r3, [pc, #128]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054a2:	4a1e      	ldr	r2, [pc, #120]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054aa:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2232      	movs	r2, #50	; 0x32
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	0c9b      	lsrs	r3, r3, #18
 80054bc:	3301      	adds	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c0:	e002      	b.n	80054c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c8:	4b14      	ldr	r3, [pc, #80]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d4:	d102      	bne.n	80054dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f2      	bne.n	80054c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e8:	d110      	bne.n	800550c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e00f      	b.n	800550e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fa:	d007      	beq.n	800550c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054fc:	4b07      	ldr	r3, [pc, #28]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005504:	4a05      	ldr	r2, [pc, #20]	; (800551c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800550a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	40007000 	.word	0x40007000
 8005520:	2000016c 	.word	0x2000016c
 8005524:	431bde83 	.word	0x431bde83

08005528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d102      	bne.n	800553c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f000 bc02 	b.w	8005d40 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800553c:	4b96      	ldr	r3, [pc, #600]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 030c 	and.w	r3, r3, #12
 8005544:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005546:	4b94      	ldr	r3, [pc, #592]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80e4 	beq.w	8005726 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_RCC_OscConfig+0x4c>
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b0c      	cmp	r3, #12
 8005568:	f040 808b 	bne.w	8005682 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b01      	cmp	r3, #1
 8005570:	f040 8087 	bne.w	8005682 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005574:	4b88      	ldr	r3, [pc, #544]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_RCC_OscConfig+0x64>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e3d9      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1a      	ldr	r2, [r3, #32]
 8005590:	4b81      	ldr	r3, [pc, #516]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <HAL_RCC_OscConfig+0x7e>
 800559c:	4b7e      	ldr	r3, [pc, #504]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055a4:	e005      	b.n	80055b2 <HAL_RCC_OscConfig+0x8a>
 80055a6:	4b7c      	ldr	r3, [pc, #496]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80055a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d223      	bcs.n	80055fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fd8a 	bl	80060d4 <RCC_SetFlashLatencyFromMSIRange>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e3ba      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055ca:	4b73      	ldr	r3, [pc, #460]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a72      	ldr	r2, [pc, #456]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80055d0:	f043 0308 	orr.w	r3, r3, #8
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	4b70      	ldr	r3, [pc, #448]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	496d      	ldr	r1, [pc, #436]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055e8:	4b6b      	ldr	r3, [pc, #428]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	4968      	ldr	r1, [pc, #416]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	604b      	str	r3, [r1, #4]
 80055fc:	e025      	b.n	800564a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055fe:	4b66      	ldr	r3, [pc, #408]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a65      	ldr	r2, [pc, #404]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005604:	f043 0308 	orr.w	r3, r3, #8
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	4b63      	ldr	r3, [pc, #396]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	4960      	ldr	r1, [pc, #384]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005618:	4313      	orrs	r3, r2
 800561a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800561c:	4b5e      	ldr	r3, [pc, #376]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	495b      	ldr	r1, [pc, #364]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 800562c:	4313      	orrs	r3, r2
 800562e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fd4a 	bl	80060d4 <RCC_SetFlashLatencyFromMSIRange>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e37a      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800564a:	f000 fc81 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 800564e:	4602      	mov	r2, r0
 8005650:	4b51      	ldr	r3, [pc, #324]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	4950      	ldr	r1, [pc, #320]	; (800579c <HAL_RCC_OscConfig+0x274>)
 800565c:	5ccb      	ldrb	r3, [r1, r3]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	fa22 f303 	lsr.w	r3, r2, r3
 8005666:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_RCC_OscConfig+0x278>)
 8005668:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800566a:	4b4e      	ldr	r3, [pc, #312]	; (80057a4 <HAL_RCC_OscConfig+0x27c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fd fcca 	bl	8003008 <HAL_InitTick>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d052      	beq.n	8005724 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	e35e      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d032      	beq.n	80056f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800568a:	4b43      	ldr	r3, [pc, #268]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a42      	ldr	r2, [pc, #264]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005696:	f7fd fd07 	bl	80030a8 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800569e:	f7fd fd03 	bl	80030a8 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e347      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056b0:	4b39      	ldr	r3, [pc, #228]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056bc:	4b36      	ldr	r3, [pc, #216]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a35      	ldr	r2, [pc, #212]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80056c2:	f043 0308 	orr.w	r3, r3, #8
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	4b33      	ldr	r3, [pc, #204]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	4930      	ldr	r1, [pc, #192]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056da:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	492b      	ldr	r1, [pc, #172]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	604b      	str	r3, [r1, #4]
 80056ee:	e01a      	b.n	8005726 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056f0:	4b29      	ldr	r3, [pc, #164]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a28      	ldr	r2, [pc, #160]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056fc:	f7fd fcd4 	bl	80030a8 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005704:	f7fd fcd0 	bl	80030a8 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e314      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005716:	4b20      	ldr	r3, [pc, #128]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x1dc>
 8005722:	e000      	b.n	8005726 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005724:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d073      	beq.n	800581a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d005      	beq.n	8005744 <HAL_RCC_OscConfig+0x21c>
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d10e      	bne.n	800575c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d10b      	bne.n	800575c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d063      	beq.n	8005818 <HAL_RCC_OscConfig+0x2f0>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d15f      	bne.n	8005818 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e2f1      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005764:	d106      	bne.n	8005774 <HAL_RCC_OscConfig+0x24c>
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 800576c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e025      	b.n	80057c0 <HAL_RCC_OscConfig+0x298>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800577c:	d114      	bne.n	80057a8 <HAL_RCC_OscConfig+0x280>
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4b03      	ldr	r3, [pc, #12]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a02      	ldr	r2, [pc, #8]	; (8005798 <HAL_RCC_OscConfig+0x270>)
 8005790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e013      	b.n	80057c0 <HAL_RCC_OscConfig+0x298>
 8005798:	40021000 	.word	0x40021000
 800579c:	0800bd44 	.word	0x0800bd44
 80057a0:	2000016c 	.word	0x2000016c
 80057a4:	20000180 	.word	0x20000180
 80057a8:	4ba0      	ldr	r3, [pc, #640]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a9f      	ldr	r2, [pc, #636]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	4b9d      	ldr	r3, [pc, #628]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a9c      	ldr	r2, [pc, #624]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80057ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d013      	beq.n	80057f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fd fc6e 	bl	80030a8 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057d0:	f7fd fc6a 	bl	80030a8 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e2ae      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057e2:	4b92      	ldr	r3, [pc, #584]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x2a8>
 80057ee:	e014      	b.n	800581a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f0:	f7fd fc5a 	bl	80030a8 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f8:	f7fd fc56 	bl	80030a8 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b64      	cmp	r3, #100	; 0x64
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e29a      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800580a:	4b88      	ldr	r3, [pc, #544]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0x2d0>
 8005816:	e000      	b.n	800581a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d060      	beq.n	80058e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d005      	beq.n	8005838 <HAL_RCC_OscConfig+0x310>
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b0c      	cmp	r3, #12
 8005830:	d119      	bne.n	8005866 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d116      	bne.n	8005866 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005838:	4b7c      	ldr	r3, [pc, #496]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_RCC_OscConfig+0x328>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e277      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005850:	4b76      	ldr	r3, [pc, #472]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	4973      	ldr	r1, [pc, #460]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005860:	4313      	orrs	r3, r2
 8005862:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005864:	e040      	b.n	80058e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d023      	beq.n	80058b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800586e:	4b6f      	ldr	r3, [pc, #444]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a6e      	ldr	r2, [pc, #440]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587a:	f7fd fc15 	bl	80030a8 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005882:	f7fd fc11 	bl	80030a8 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e255      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005894:	4b65      	ldr	r3, [pc, #404]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a0:	4b62      	ldr	r3, [pc, #392]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	061b      	lsls	r3, r3, #24
 80058ae:	495f      	ldr	r1, [pc, #380]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	604b      	str	r3, [r1, #4]
 80058b4:	e018      	b.n	80058e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058b6:	4b5d      	ldr	r3, [pc, #372]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a5c      	ldr	r2, [pc, #368]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80058bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f7fd fbf1 	bl	80030a8 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ca:	f7fd fbed 	bl	80030a8 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e231      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058dc:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d03c      	beq.n	800596e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01c      	beq.n	8005936 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058fc:	4b4b      	ldr	r3, [pc, #300]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80058fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005902:	4a4a      	ldr	r2, [pc, #296]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005904:	f043 0301 	orr.w	r3, r3, #1
 8005908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590c:	f7fd fbcc 	bl	80030a8 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005914:	f7fd fbc8 	bl	80030a8 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e20c      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ef      	beq.n	8005914 <HAL_RCC_OscConfig+0x3ec>
 8005934:	e01b      	b.n	800596e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005936:	4b3d      	ldr	r3, [pc, #244]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800593c:	4a3b      	ldr	r2, [pc, #236]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005946:	f7fd fbaf 	bl	80030a8 <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800594e:	f7fd fbab 	bl	80030a8 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e1ef      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005960:	4b32      	ldr	r3, [pc, #200]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1ef      	bne.n	800594e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 80a6 	beq.w	8005ac8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800597c:	2300      	movs	r3, #0
 800597e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005980:	4b2a      	ldr	r3, [pc, #168]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10d      	bne.n	80059a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800598c:	4b27      	ldr	r3, [pc, #156]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	4a26      	ldr	r2, [pc, #152]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005996:	6593      	str	r3, [r2, #88]	; 0x58
 8005998:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a4:	2301      	movs	r3, #1
 80059a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059a8:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <HAL_RCC_OscConfig+0x508>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d118      	bne.n	80059e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059b4:	4b1e      	ldr	r3, [pc, #120]	; (8005a30 <HAL_RCC_OscConfig+0x508>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1d      	ldr	r2, [pc, #116]	; (8005a30 <HAL_RCC_OscConfig+0x508>)
 80059ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059c0:	f7fd fb72 	bl	80030a8 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c8:	f7fd fb6e 	bl	80030a8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e1b2      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059da:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <HAL_RCC_OscConfig+0x508>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d108      	bne.n	8005a00 <HAL_RCC_OscConfig+0x4d8>
 80059ee:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f4:	4a0d      	ldr	r2, [pc, #52]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059fe:	e029      	b.n	8005a54 <HAL_RCC_OscConfig+0x52c>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b05      	cmp	r3, #5
 8005a06:	d115      	bne.n	8005a34 <HAL_RCC_OscConfig+0x50c>
 8005a08:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0e:	4a07      	ldr	r2, [pc, #28]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005a10:	f043 0304 	orr.w	r3, r3, #4
 8005a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a18:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	4a03      	ldr	r2, [pc, #12]	; (8005a2c <HAL_RCC_OscConfig+0x504>)
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a28:	e014      	b.n	8005a54 <HAL_RCC_OscConfig+0x52c>
 8005a2a:	bf00      	nop
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40007000 	.word	0x40007000
 8005a34:	4b9a      	ldr	r3, [pc, #616]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	4a99      	ldr	r2, [pc, #612]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a44:	4b96      	ldr	r3, [pc, #600]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4a:	4a95      	ldr	r2, [pc, #596]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005a4c:	f023 0304 	bic.w	r3, r3, #4
 8005a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d016      	beq.n	8005a8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5c:	f7fd fb24 	bl	80030a8 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a62:	e00a      	b.n	8005a7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a64:	f7fd fb20 	bl	80030a8 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e162      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a7a:	4b89      	ldr	r3, [pc, #548]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0ed      	beq.n	8005a64 <HAL_RCC_OscConfig+0x53c>
 8005a88:	e015      	b.n	8005ab6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8a:	f7fd fb0d 	bl	80030a8 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a90:	e00a      	b.n	8005aa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a92:	f7fd fb09 	bl	80030a8 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e14b      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005aa8:	4b7d      	ldr	r3, [pc, #500]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1ed      	bne.n	8005a92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ab6:	7ffb      	ldrb	r3, [r7, #31]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d105      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005abc:	4b78      	ldr	r3, [pc, #480]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac0:	4a77      	ldr	r2, [pc, #476]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d03c      	beq.n	8005b4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01c      	beq.n	8005b16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005adc:	4b70      	ldr	r3, [pc, #448]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ae2:	4a6f      	ldr	r2, [pc, #444]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aec:	f7fd fadc 	bl	80030a8 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005af4:	f7fd fad8 	bl	80030a8 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e11c      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b06:	4b66      	ldr	r3, [pc, #408]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0ef      	beq.n	8005af4 <HAL_RCC_OscConfig+0x5cc>
 8005b14:	e01b      	b.n	8005b4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b16:	4b62      	ldr	r3, [pc, #392]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005b18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b1c:	4a60      	ldr	r2, [pc, #384]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005b1e:	f023 0301 	bic.w	r3, r3, #1
 8005b22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b26:	f7fd fabf 	bl	80030a8 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b2e:	f7fd fabb 	bl	80030a8 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e0ff      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b40:	4b57      	ldr	r3, [pc, #348]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1ef      	bne.n	8005b2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 80f3 	beq.w	8005d3e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	f040 80c9 	bne.w	8005cf4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b62:	4b4f      	ldr	r3, [pc, #316]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f003 0203 	and.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d12c      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	3b01      	subs	r3, #1
 8005b82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d123      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d11b      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d113      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d109      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d06b      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	d062      	beq.n	8005c9c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bd6:	4b32      	ldr	r3, [pc, #200]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0ac      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005be6:	4b2e      	ldr	r3, [pc, #184]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2d      	ldr	r2, [pc, #180]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bf2:	f7fd fa59 	bl	80030a8 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfa:	f7fd fa55 	bl	80030a8 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e099      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c0c:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c18:	4b21      	ldr	r3, [pc, #132]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <HAL_RCC_OscConfig+0x77c>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c28:	3a01      	subs	r2, #1
 8005c2a:	0112      	lsls	r2, r2, #4
 8005c2c:	4311      	orrs	r1, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c32:	0212      	lsls	r2, r2, #8
 8005c34:	4311      	orrs	r1, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c3a:	0852      	lsrs	r2, r2, #1
 8005c3c:	3a01      	subs	r2, #1
 8005c3e:	0552      	lsls	r2, r2, #21
 8005c40:	4311      	orrs	r1, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c46:	0852      	lsrs	r2, r2, #1
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	0652      	lsls	r2, r2, #25
 8005c4c:	4311      	orrs	r1, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c52:	06d2      	lsls	r2, r2, #27
 8005c54:	430a      	orrs	r2, r1
 8005c56:	4912      	ldr	r1, [pc, #72]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c5c:	4b10      	ldr	r3, [pc, #64]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0f      	ldr	r2, [pc, #60]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c74:	f7fd fa18 	bl	80030a8 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fd fa14 	bl	80030a8 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e058      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8e:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <HAL_RCC_OscConfig+0x778>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c9a:	e050      	b.n	8005d3e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e04f      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca8:	4b27      	ldr	r3, [pc, #156]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d144      	bne.n	8005d3e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cb4:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a23      	ldr	r2, [pc, #140]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cc0:	4b21      	ldr	r3, [pc, #132]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4a20      	ldr	r2, [pc, #128]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ccc:	f7fd f9ec 	bl	80030a8 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fd f9e8 	bl	80030a8 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e02c      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce6:	4b18      	ldr	r3, [pc, #96]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x7ac>
 8005cf2:	e024      	b.n	8005d3e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d01f      	beq.n	8005d3a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfa:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a12      	ldr	r2, [pc, #72]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005d00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d06:	f7fd f9cf 	bl	80030a8 <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0e:	f7fd f9cb 	bl	80030a8 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e00f      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d20:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f0      	bne.n	8005d0e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	4905      	ldr	r1, [pc, #20]	; (8005d48 <HAL_RCC_OscConfig+0x820>)
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_RCC_OscConfig+0x824>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60cb      	str	r3, [r1, #12]
 8005d38:	e001      	b.n	8005d3e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	feeefffc 	.word	0xfeeefffc

08005d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0e7      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d64:	4b75      	ldr	r3, [pc, #468]	; (8005f3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d910      	bls.n	8005d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d72:	4b72      	ldr	r3, [pc, #456]	; (8005f3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 0207 	bic.w	r2, r3, #7
 8005d7a:	4970      	ldr	r1, [pc, #448]	; (8005f3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d82:	4b6e      	ldr	r3, [pc, #440]	; (8005f3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d001      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0cf      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d010      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	4b66      	ldr	r3, [pc, #408]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d908      	bls.n	8005dc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db0:	4b63      	ldr	r3, [pc, #396]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4960      	ldr	r1, [pc, #384]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d04c      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d107      	bne.n	8005de6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd6:	4b5a      	ldr	r3, [pc, #360]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d121      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e0a6      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d107      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dee:	4b54      	ldr	r3, [pc, #336]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d115      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e09a      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d107      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e06:	4b4e      	ldr	r3, [pc, #312]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e08e      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e16:	4b4a      	ldr	r3, [pc, #296]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e086      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e26:	4b46      	ldr	r3, [pc, #280]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f023 0203 	bic.w	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4943      	ldr	r1, [pc, #268]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e38:	f7fd f936 	bl	80030a8 <HAL_GetTick>
 8005e3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e40:	f7fd f932 	bl	80030a8 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e06e      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e56:	4b3a      	ldr	r3, [pc, #232]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 020c 	and.w	r2, r3, #12
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d1eb      	bne.n	8005e40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	4b31      	ldr	r3, [pc, #196]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d208      	bcs.n	8005e96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e84:	4b2e      	ldr	r3, [pc, #184]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	492b      	ldr	r1, [pc, #172]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e96:	4b29      	ldr	r3, [pc, #164]	; (8005f3c <HAL_RCC_ClockConfig+0x1ec>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d210      	bcs.n	8005ec6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea4:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <HAL_RCC_ClockConfig+0x1ec>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 0207 	bic.w	r2, r3, #7
 8005eac:	4923      	ldr	r1, [pc, #140]	; (8005f3c <HAL_RCC_ClockConfig+0x1ec>)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb4:	4b21      	ldr	r3, [pc, #132]	; (8005f3c <HAL_RCC_ClockConfig+0x1ec>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d001      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e036      	b.n	8005f34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	4918      	ldr	r1, [pc, #96]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ef0:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	4910      	ldr	r1, [pc, #64]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f04:	f000 f824 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <HAL_RCC_ClockConfig+0x1f0>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	490b      	ldr	r1, [pc, #44]	; (8005f44 <HAL_RCC_ClockConfig+0x1f4>)
 8005f16:	5ccb      	ldrb	r3, [r1, r3]
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f20:	4a09      	ldr	r2, [pc, #36]	; (8005f48 <HAL_RCC_ClockConfig+0x1f8>)
 8005f22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <HAL_RCC_ClockConfig+0x1fc>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fd f86d 	bl	8003008 <HAL_InitTick>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f32:	7afb      	ldrb	r3, [r7, #11]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40022000 	.word	0x40022000
 8005f40:	40021000 	.word	0x40021000
 8005f44:	0800bd44 	.word	0x0800bd44
 8005f48:	2000016c 	.word	0x2000016c
 8005f4c:	20000180 	.word	0x20000180

08005f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b089      	sub	sp, #36	; 0x24
 8005f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f5e:	4b3e      	ldr	r3, [pc, #248]	; (8006058 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f68:	4b3b      	ldr	r3, [pc, #236]	; (8006058 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x34>
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b0c      	cmp	r3, #12
 8005f7c:	d121      	bne.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d11e      	bne.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f84:	4b34      	ldr	r3, [pc, #208]	; (8006058 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d107      	bne.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f90:	4b31      	ldr	r3, [pc, #196]	; (8006058 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f96:	0a1b      	lsrs	r3, r3, #8
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	61fb      	str	r3, [r7, #28]
 8005f9e:	e005      	b.n	8005fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fa0:	4b2d      	ldr	r3, [pc, #180]	; (8006058 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	091b      	lsrs	r3, r3, #4
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fac:	4a2b      	ldr	r2, [pc, #172]	; (800605c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10d      	bne.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fc0:	e00a      	b.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d102      	bne.n	8005fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fc8:	4b25      	ldr	r3, [pc, #148]	; (8006060 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e004      	b.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d101      	bne.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fd4:	4b22      	ldr	r3, [pc, #136]	; (8006060 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b0c      	cmp	r3, #12
 8005fdc:	d134      	bne.n	8006048 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fde:	4b1e      	ldr	r3, [pc, #120]	; (8006058 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d003      	beq.n	8005ffc <HAL_RCC_GetSysClockFreq+0xac>
 8005ff4:	e005      	b.n	8006002 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ff6:	4b1a      	ldr	r3, [pc, #104]	; (8006060 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ff8:	617b      	str	r3, [r7, #20]
      break;
 8005ffa:	e005      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ffc:	4b18      	ldr	r3, [pc, #96]	; (8006060 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ffe:	617b      	str	r3, [r7, #20]
      break;
 8006000:	e002      	b.n	8006008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	617b      	str	r3, [r7, #20]
      break;
 8006006:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006008:	4b13      	ldr	r3, [pc, #76]	; (8006058 <HAL_RCC_GetSysClockFreq+0x108>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	3301      	adds	r3, #1
 8006014:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006016:	4b10      	ldr	r3, [pc, #64]	; (8006058 <HAL_RCC_GetSysClockFreq+0x108>)
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	fb03 f202 	mul.w	r2, r3, r2
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	fbb2 f3f3 	udiv	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800602e:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <HAL_RCC_GetSysClockFreq+0x108>)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	0e5b      	lsrs	r3, r3, #25
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	3301      	adds	r3, #1
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	fbb2 f3f3 	udiv	r3, r2, r3
 8006046:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006048:	69bb      	ldr	r3, [r7, #24]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3724      	adds	r7, #36	; 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40021000 	.word	0x40021000
 800605c:	0800bd5c 	.word	0x0800bd5c
 8006060:	00f42400 	.word	0x00f42400

08006064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006068:	4b03      	ldr	r3, [pc, #12]	; (8006078 <HAL_RCC_GetHCLKFreq+0x14>)
 800606a:	681b      	ldr	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	2000016c 	.word	0x2000016c

0800607c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006080:	f7ff fff0 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 8006084:	4602      	mov	r2, r0
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	4904      	ldr	r1, [pc, #16]	; (80060a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006092:	5ccb      	ldrb	r3, [r1, r3]
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000
 80060a4:	0800bd54 	.word	0x0800bd54

080060a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060ac:	f7ff ffda 	bl	8006064 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b06      	ldr	r3, [pc, #24]	; (80060cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0adb      	lsrs	r3, r3, #11
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4904      	ldr	r1, [pc, #16]	; (80060d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40021000 	.word	0x40021000
 80060d0:	0800bd54 	.word	0x0800bd54

080060d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060e0:	4b2a      	ldr	r3, [pc, #168]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060ec:	f7ff f9b8 	bl	8005460 <HAL_PWREx_GetVoltageRange>
 80060f0:	6178      	str	r0, [r7, #20]
 80060f2:	e014      	b.n	800611e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060f4:	4b25      	ldr	r3, [pc, #148]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f8:	4a24      	ldr	r2, [pc, #144]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006100:	4b22      	ldr	r3, [pc, #136]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800610c:	f7ff f9a8 	bl	8005460 <HAL_PWREx_GetVoltageRange>
 8006110:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006112:	4b1e      	ldr	r3, [pc, #120]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	4a1d      	ldr	r2, [pc, #116]	; (800618c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800611c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006124:	d10b      	bne.n	800613e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d919      	bls.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2ba0      	cmp	r3, #160	; 0xa0
 8006130:	d902      	bls.n	8006138 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006132:	2302      	movs	r3, #2
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	e013      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006138:	2301      	movs	r3, #1
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	e010      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b80      	cmp	r3, #128	; 0x80
 8006142:	d902      	bls.n	800614a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006144:	2303      	movs	r3, #3
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	e00a      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b80      	cmp	r3, #128	; 0x80
 800614e:	d102      	bne.n	8006156 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006150:	2302      	movs	r3, #2
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	e004      	b.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b70      	cmp	r3, #112	; 0x70
 800615a:	d101      	bne.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800615c:	2301      	movs	r3, #1
 800615e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f023 0207 	bic.w	r2, r3, #7
 8006168:	4909      	ldr	r1, [pc, #36]	; (8006190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	429a      	cmp	r2, r3
 800617c:	d001      	beq.n	8006182 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40021000 	.word	0x40021000
 8006190:	40022000 	.word	0x40022000

08006194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800619c:	2300      	movs	r3, #0
 800619e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061a0:	2300      	movs	r3, #0
 80061a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d031      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061b8:	d01a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80061ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061be:	d814      	bhi.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d009      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061c8:	d10f      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80061ca:	4b5d      	ldr	r3, [pc, #372]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	4a5c      	ldr	r2, [pc, #368]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061d6:	e00c      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 f9f0 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 80061e4:	4603      	mov	r3, r0
 80061e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	74fb      	strb	r3, [r7, #19]
      break;
 80061ee:	e000      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80061f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f2:	7cfb      	ldrb	r3, [r7, #19]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061f8:	4b51      	ldr	r3, [pc, #324]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006206:	494e      	ldr	r1, [pc, #312]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800620e:	e001      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006210:	7cfb      	ldrb	r3, [r7, #19]
 8006212:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 809e 	beq.w	800635e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006222:	2300      	movs	r3, #0
 8006224:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006226:	4b46      	ldr	r3, [pc, #280]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006236:	2300      	movs	r3, #0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00d      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800623c:	4b40      	ldr	r3, [pc, #256]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800623e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006240:	4a3f      	ldr	r2, [pc, #252]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006246:	6593      	str	r3, [r2, #88]	; 0x58
 8006248:	4b3d      	ldr	r3, [pc, #244]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800624a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006254:	2301      	movs	r3, #1
 8006256:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006258:	4b3a      	ldr	r3, [pc, #232]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a39      	ldr	r2, [pc, #228]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800625e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006262:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006264:	f7fc ff20 	bl	80030a8 <HAL_GetTick>
 8006268:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800626a:	e009      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626c:	f7fc ff1c 	bl	80030a8 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d902      	bls.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	74fb      	strb	r3, [r7, #19]
        break;
 800627e:	e005      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006280:	4b30      	ldr	r3, [pc, #192]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0ef      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800628c:	7cfb      	ldrb	r3, [r7, #19]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d15a      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006292:	4b2b      	ldr	r3, [pc, #172]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01e      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d019      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062ae:	4b24      	ldr	r3, [pc, #144]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062ba:	4b21      	ldr	r3, [pc, #132]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c0:	4a1f      	ldr	r2, [pc, #124]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062ca:	4b1d      	ldr	r3, [pc, #116]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d0:	4a1b      	ldr	r2, [pc, #108]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062da:	4a19      	ldr	r2, [pc, #100]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ec:	f7fc fedc 	bl	80030a8 <HAL_GetTick>
 80062f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f2:	e00b      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f4:	f7fc fed8 	bl	80030a8 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d902      	bls.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	74fb      	strb	r3, [r7, #19]
            break;
 800630a:	e006      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800630c:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0ec      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800631a:	7cfb      	ldrb	r3, [r7, #19]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10b      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006320:	4b07      	ldr	r3, [pc, #28]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632e:	4904      	ldr	r1, [pc, #16]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006336:	e009      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	74bb      	strb	r3, [r7, #18]
 800633c:	e006      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800633e:	bf00      	nop
 8006340:	40021000 	.word	0x40021000
 8006344:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006348:	7cfb      	ldrb	r3, [r7, #19]
 800634a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800634c:	7c7b      	ldrb	r3, [r7, #17]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d105      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006352:	4b9b      	ldr	r3, [pc, #620]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006356:	4a9a      	ldr	r2, [pc, #616]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800635c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800636a:	4b95      	ldr	r3, [pc, #596]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006370:	f023 0203 	bic.w	r2, r3, #3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	4991      	ldr	r1, [pc, #580]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800638c:	4b8c      	ldr	r3, [pc, #560]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f023 020c 	bic.w	r2, r3, #12
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	4989      	ldr	r1, [pc, #548]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ae:	4b84      	ldr	r3, [pc, #528]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	4980      	ldr	r1, [pc, #512]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063d0:	4b7b      	ldr	r3, [pc, #492]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	4978      	ldr	r1, [pc, #480]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063f2:	4b73      	ldr	r3, [pc, #460]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006400:	496f      	ldr	r1, [pc, #444]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006414:	4b6a      	ldr	r3, [pc, #424]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	4967      	ldr	r1, [pc, #412]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006436:	4b62      	ldr	r3, [pc, #392]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	495e      	ldr	r1, [pc, #376]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006446:	4313      	orrs	r3, r2
 8006448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00a      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006458:	4b59      	ldr	r3, [pc, #356]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	4956      	ldr	r1, [pc, #344]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800647a:	4b51      	ldr	r3, [pc, #324]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800647c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	494d      	ldr	r1, [pc, #308]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d028      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800649c:	4b48      	ldr	r3, [pc, #288]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800649e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064aa:	4945      	ldr	r1, [pc, #276]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ba:	d106      	bne.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064bc:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	4a3f      	ldr	r2, [pc, #252]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064c6:	60d3      	str	r3, [r2, #12]
 80064c8:	e011      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064d2:	d10c      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	2101      	movs	r1, #1
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 f872 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d028      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064fa:	4b31      	ldr	r3, [pc, #196]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006508:	492d      	ldr	r1, [pc, #180]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006518:	d106      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800651a:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	4a28      	ldr	r2, [pc, #160]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006524:	60d3      	str	r3, [r2, #12]
 8006526:	e011      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006530:	d10c      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3304      	adds	r3, #4
 8006536:	2101      	movs	r1, #1
 8006538:	4618      	mov	r0, r3
 800653a:	f000 f843 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006542:	7cfb      	ldrb	r3, [r7, #19]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006548:	7cfb      	ldrb	r3, [r7, #19]
 800654a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01c      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006558:	4b19      	ldr	r3, [pc, #100]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006566:	4916      	ldr	r1, [pc, #88]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006576:	d10c      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3304      	adds	r3, #4
 800657c:	2102      	movs	r1, #2
 800657e:	4618      	mov	r0, r3
 8006580:	f000 f820 	bl	80065c4 <RCCEx_PLLSAI1_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006588:	7cfb      	ldrb	r3, [r7, #19]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800658e:	7cfb      	ldrb	r3, [r7, #19]
 8006590:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800659e:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ac:	4904      	ldr	r1, [pc, #16]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000

080065c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065d2:	4b74      	ldr	r3, [pc, #464]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d018      	beq.n	8006610 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065de:	4b71      	ldr	r3, [pc, #452]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0203 	and.w	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d10d      	bne.n	800660a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
       ||
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065f6:	4b6b      	ldr	r3, [pc, #428]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	091b      	lsrs	r3, r3, #4
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
       ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d047      	beq.n	800669a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	73fb      	strb	r3, [r7, #15]
 800660e:	e044      	b.n	800669a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b03      	cmp	r3, #3
 8006616:	d018      	beq.n	800664a <RCCEx_PLLSAI1_Config+0x86>
 8006618:	2b03      	cmp	r3, #3
 800661a:	d825      	bhi.n	8006668 <RCCEx_PLLSAI1_Config+0xa4>
 800661c:	2b01      	cmp	r3, #1
 800661e:	d002      	beq.n	8006626 <RCCEx_PLLSAI1_Config+0x62>
 8006620:	2b02      	cmp	r3, #2
 8006622:	d009      	beq.n	8006638 <RCCEx_PLLSAI1_Config+0x74>
 8006624:	e020      	b.n	8006668 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006626:	4b5f      	ldr	r3, [pc, #380]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d11d      	bne.n	800666e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006636:	e01a      	b.n	800666e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006638:	4b5a      	ldr	r3, [pc, #360]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006640:	2b00      	cmp	r3, #0
 8006642:	d116      	bne.n	8006672 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006648:	e013      	b.n	8006672 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800664a:	4b56      	ldr	r3, [pc, #344]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10f      	bne.n	8006676 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006656:	4b53      	ldr	r3, [pc, #332]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006666:	e006      	b.n	8006676 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	73fb      	strb	r3, [r7, #15]
      break;
 800666c:	e004      	b.n	8006678 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800666e:	bf00      	nop
 8006670:	e002      	b.n	8006678 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006672:	bf00      	nop
 8006674:	e000      	b.n	8006678 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006676:	bf00      	nop
    }

    if(status == HAL_OK)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10d      	bne.n	800669a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800667e:	4b49      	ldr	r3, [pc, #292]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6819      	ldr	r1, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	3b01      	subs	r3, #1
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	430b      	orrs	r3, r1
 8006694:	4943      	ldr	r1, [pc, #268]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006696:	4313      	orrs	r3, r2
 8006698:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d17c      	bne.n	800679a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066a0:	4b40      	ldr	r3, [pc, #256]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a3f      	ldr	r2, [pc, #252]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ac:	f7fc fcfc 	bl	80030a8 <HAL_GetTick>
 80066b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066b2:	e009      	b.n	80066c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066b4:	f7fc fcf8 	bl	80030a8 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d902      	bls.n	80066c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	73fb      	strb	r3, [r7, #15]
        break;
 80066c6:	e005      	b.n	80066d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066c8:	4b36      	ldr	r3, [pc, #216]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1ef      	bne.n	80066b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d15f      	bne.n	800679a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d110      	bne.n	8006702 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066e0:	4b30      	ldr	r3, [pc, #192]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80066e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6892      	ldr	r2, [r2, #8]
 80066f0:	0211      	lsls	r1, r2, #8
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68d2      	ldr	r2, [r2, #12]
 80066f6:	06d2      	lsls	r2, r2, #27
 80066f8:	430a      	orrs	r2, r1
 80066fa:	492a      	ldr	r1, [pc, #168]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	610b      	str	r3, [r1, #16]
 8006700:	e027      	b.n	8006752 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d112      	bne.n	800672e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006708:	4b26      	ldr	r3, [pc, #152]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006710:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6892      	ldr	r2, [r2, #8]
 8006718:	0211      	lsls	r1, r2, #8
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6912      	ldr	r2, [r2, #16]
 800671e:	0852      	lsrs	r2, r2, #1
 8006720:	3a01      	subs	r2, #1
 8006722:	0552      	lsls	r2, r2, #21
 8006724:	430a      	orrs	r2, r1
 8006726:	491f      	ldr	r1, [pc, #124]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006728:	4313      	orrs	r3, r2
 800672a:	610b      	str	r3, [r1, #16]
 800672c:	e011      	b.n	8006752 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800672e:	4b1d      	ldr	r3, [pc, #116]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006736:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6892      	ldr	r2, [r2, #8]
 800673e:	0211      	lsls	r1, r2, #8
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6952      	ldr	r2, [r2, #20]
 8006744:	0852      	lsrs	r2, r2, #1
 8006746:	3a01      	subs	r2, #1
 8006748:	0652      	lsls	r2, r2, #25
 800674a:	430a      	orrs	r2, r1
 800674c:	4915      	ldr	r1, [pc, #84]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800674e:	4313      	orrs	r3, r2
 8006750:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006752:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a13      	ldr	r2, [pc, #76]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006758:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800675c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675e:	f7fc fca3 	bl	80030a8 <HAL_GetTick>
 8006762:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006764:	e009      	b.n	800677a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006766:	f7fc fc9f 	bl	80030a8 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d902      	bls.n	800677a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	73fb      	strb	r3, [r7, #15]
          break;
 8006778:	e005      	b.n	8006786 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800677a:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0ef      	beq.n	8006766 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	4903      	ldr	r1, [pc, #12]	; (80067a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006796:	4313      	orrs	r3, r2
 8006798:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40021000 	.word	0x40021000

080067a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e049      	b.n	800684e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fb ff4e 	bl	8002670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f000 faca 	bl	8006d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d001      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e03b      	b.n	80068e8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a19      	ldr	r2, [pc, #100]	; (80068f4 <HAL_TIM_Base_Start_IT+0x9c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_TIM_Base_Start_IT+0x4e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689a:	d004      	beq.n	80068a6 <HAL_TIM_Base_Start_IT+0x4e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d115      	bne.n	80068d2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	4b13      	ldr	r3, [pc, #76]	; (80068fc <HAL_TIM_Base_Start_IT+0xa4>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b06      	cmp	r3, #6
 80068b6:	d015      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x8c>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068be:	d011      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d0:	e008      	b.n	80068e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	e000      	b.n	80068e6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40014000 	.word	0x40014000
 80068fc:	00010007 	.word	0x00010007

08006900 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6a1a      	ldr	r2, [r3, #32]
 800691e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006922:	4013      	ands	r3, r2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10f      	bne.n	8006948 <HAL_TIM_Base_Stop_IT+0x48>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6a1a      	ldr	r2, [r3, #32]
 800692e:	f240 4344 	movw	r3, #1092	; 0x444
 8006932:	4013      	ands	r3, r2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d107      	bne.n	8006948 <HAL_TIM_Base_Stop_IT+0x48>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b02      	cmp	r3, #2
 8006972:	d122      	bne.n	80069ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b02      	cmp	r3, #2
 8006980:	d11b      	bne.n	80069ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f06f 0202 	mvn.w	r2, #2
 800698a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f003 0303 	and.w	r3, r3, #3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f9ce 	bl	8006d42 <HAL_TIM_IC_CaptureCallback>
 80069a6:	e005      	b.n	80069b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f9c0 	bl	8006d2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9d1 	bl	8006d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d122      	bne.n	8006a0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d11b      	bne.n	8006a0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f06f 0204 	mvn.w	r2, #4
 80069de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9a4 	bl	8006d42 <HAL_TIM_IC_CaptureCallback>
 80069fa:	e005      	b.n	8006a08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f996 	bl	8006d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f9a7 	bl	8006d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d122      	bne.n	8006a62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d11b      	bne.n	8006a62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f06f 0208 	mvn.w	r2, #8
 8006a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2204      	movs	r2, #4
 8006a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f97a 	bl	8006d42 <HAL_TIM_IC_CaptureCallback>
 8006a4e:	e005      	b.n	8006a5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f96c 	bl	8006d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f97d 	bl	8006d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b10      	cmp	r3, #16
 8006a6e:	d122      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d11b      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f06f 0210 	mvn.w	r2, #16
 8006a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f950 	bl	8006d42 <HAL_TIM_IC_CaptureCallback>
 8006aa2:	e005      	b.n	8006ab0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f942 	bl	8006d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f953 	bl	8006d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d10e      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d107      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f06f 0201 	mvn.w	r2, #1
 8006ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fb fad1 	bl	8002084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aec:	2b80      	cmp	r3, #128	; 0x80
 8006aee:	d10e      	bne.n	8006b0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b80      	cmp	r3, #128	; 0x80
 8006afc:	d107      	bne.n	8006b0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 faa7 	bl	800705c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1c:	d10e      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b28:	2b80      	cmp	r3, #128	; 0x80
 8006b2a:	d107      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa9a 	bl	8007070 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	d10e      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	d107      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f901 	bl	8006d6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d10e      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0220 	mvn.w	r2, #32
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa5a 	bl	8007048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIM_ConfigClockSource+0x1c>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e0b6      	b.n	8006d26 <HAL_TIM_ConfigClockSource+0x18a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006be2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf4:	d03e      	beq.n	8006c74 <HAL_TIM_ConfigClockSource+0xd8>
 8006bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfa:	f200 8087 	bhi.w	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c02:	f000 8086 	beq.w	8006d12 <HAL_TIM_ConfigClockSource+0x176>
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0a:	d87f      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c0c:	2b70      	cmp	r3, #112	; 0x70
 8006c0e:	d01a      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0xaa>
 8006c10:	2b70      	cmp	r3, #112	; 0x70
 8006c12:	d87b      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c14:	2b60      	cmp	r3, #96	; 0x60
 8006c16:	d050      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x11e>
 8006c18:	2b60      	cmp	r3, #96	; 0x60
 8006c1a:	d877      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c1c:	2b50      	cmp	r3, #80	; 0x50
 8006c1e:	d03c      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0xfe>
 8006c20:	2b50      	cmp	r3, #80	; 0x50
 8006c22:	d873      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c24:	2b40      	cmp	r3, #64	; 0x40
 8006c26:	d058      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0x13e>
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d86f      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c2c:	2b30      	cmp	r3, #48	; 0x30
 8006c2e:	d064      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x15e>
 8006c30:	2b30      	cmp	r3, #48	; 0x30
 8006c32:	d86b      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d060      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x15e>
 8006c38:	2b20      	cmp	r3, #32
 8006c3a:	d867      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d05c      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x15e>
 8006c40:	2b10      	cmp	r3, #16
 8006c42:	d05a      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0x15e>
 8006c44:	e062      	b.n	8006d0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6899      	ldr	r1, [r3, #8]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f000 f971 	bl	8006f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	609a      	str	r2, [r3, #8]
      break;
 8006c72:	e04f      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	6899      	ldr	r1, [r3, #8]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f000 f95a 	bl	8006f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c96:	609a      	str	r2, [r3, #8]
      break;
 8006c98:	e03c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6859      	ldr	r1, [r3, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f000 f8ce 	bl	8006e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2150      	movs	r1, #80	; 0x50
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 f927 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006cb8:	e02c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6859      	ldr	r1, [r3, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f000 f8ed 	bl	8006ea6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2160      	movs	r1, #96	; 0x60
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 f917 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006cd8:	e01c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6859      	ldr	r1, [r3, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f000 f8ae 	bl	8006e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2140      	movs	r1, #64	; 0x40
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f907 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006cf8:	e00c      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4619      	mov	r1, r3
 8006d04:	4610      	mov	r0, r2
 8006d06:	f000 f8fe 	bl	8006f06 <TIM_ITRx_SetConfig>
      break;
 8006d0a:	e003      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d10:	e000      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d72:	bf00      	nop
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
	...

08006d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a2a      	ldr	r2, [pc, #168]	; (8006e3c <TIM_Base_SetConfig+0xbc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_Base_SetConfig+0x20>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9e:	d108      	bne.n	8006db2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a21      	ldr	r2, [pc, #132]	; (8006e3c <TIM_Base_SetConfig+0xbc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d00b      	beq.n	8006dd2 <TIM_Base_SetConfig+0x52>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc0:	d007      	beq.n	8006dd2 <TIM_Base_SetConfig+0x52>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1e      	ldr	r2, [pc, #120]	; (8006e40 <TIM_Base_SetConfig+0xc0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d003      	beq.n	8006dd2 <TIM_Base_SetConfig+0x52>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <TIM_Base_SetConfig+0xc4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d108      	bne.n	8006de4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a0c      	ldr	r2, [pc, #48]	; (8006e3c <TIM_Base_SetConfig+0xbc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d007      	beq.n	8006e20 <TIM_Base_SetConfig+0xa0>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a0b      	ldr	r2, [pc, #44]	; (8006e40 <TIM_Base_SetConfig+0xc0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_Base_SetConfig+0xa0>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a0a      	ldr	r2, [pc, #40]	; (8006e44 <TIM_Base_SetConfig+0xc4>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d103      	bne.n	8006e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	615a      	str	r2, [r3, #20]
}
 8006e2e:	bf00      	nop
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	40012c00 	.word	0x40012c00
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400

08006e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f023 0201 	bic.w	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 030a 	bic.w	r3, r3, #10
 8006e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b087      	sub	sp, #28
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f023 0210 	bic.w	r2, r3, #16
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	031b      	lsls	r3, r3, #12
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f043 0307 	orr.w	r3, r3, #7
 8006f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	609a      	str	r2, [r3, #8]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	021a      	lsls	r2, r3, #8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	609a      	str	r2, [r3, #8]
}
 8006f70:	bf00      	nop
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e04f      	b.n	8007034 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a21      	ldr	r2, [pc, #132]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d108      	bne.n	8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a14      	ldr	r2, [pc, #80]	; (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d009      	beq.n	8007008 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffc:	d004      	beq.n	8007008 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a10      	ldr	r2, [pc, #64]	; (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d10c      	bne.n	8007022 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800700e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	4313      	orrs	r3, r2
 8007018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	40012c00 	.word	0x40012c00
 8007044:	40014000 	.word	0x40014000

08007048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e040      	b.n	8007118 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800709a:	2b00      	cmp	r3, #0
 800709c:	d106      	bne.n	80070ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fb fb20 	bl	80026ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2224      	movs	r2, #36	; 0x24
 80070b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fd2c 	bl	8007b20 <UART_SetConfig>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e022      	b.n	8007118 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 ff7a 	bl	8007fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f801 	bl	8008118 <UART_CheckIdleState>
 8007116:	4603      	mov	r3, r0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e02b      	b.n	800718a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2224      	movs	r2, #36	; 0x24
 8007136:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0201 	bic.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2200      	movs	r2, #0
 800715e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7fb fb51 	bl	8002808 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b08a      	sub	sp, #40	; 0x28
 8007196:	af02      	add	r7, sp, #8
 8007198:	60f8      	str	r0, [r7, #12]
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	603b      	str	r3, [r7, #0]
 800719e:	4613      	mov	r3, r2
 80071a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	f040 8082 	bne.w	80072b0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <HAL_UART_Transmit+0x26>
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e07a      	b.n	80072b2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <HAL_UART_Transmit+0x38>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e073      	b.n	80072b2 <HAL_UART_Transmit+0x120>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2221      	movs	r2, #33	; 0x21
 80071de:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071e0:	f7fb ff62 	bl	80030a8 <HAL_GetTick>
 80071e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	88fa      	ldrh	r2, [r7, #6]
 80071ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	88fa      	ldrh	r2, [r7, #6]
 80071f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fe:	d108      	bne.n	8007212 <HAL_UART_Transmit+0x80>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d104      	bne.n	8007212 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007208:	2300      	movs	r3, #0
 800720a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	61bb      	str	r3, [r7, #24]
 8007210:	e003      	b.n	800721a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007222:	e02d      	b.n	8007280 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2200      	movs	r2, #0
 800722c:	2180      	movs	r1, #128	; 0x80
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 ffbb 	bl	80081aa <UART_WaitOnFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e039      	b.n	80072b2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	881a      	ldrh	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007250:	b292      	uxth	r2, r2
 8007252:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	3302      	adds	r3, #2
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	e008      	b.n	800726e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b292      	uxth	r2, r2
 8007266:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	3301      	adds	r3, #1
 800726c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1cb      	bne.n	8007224 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2200      	movs	r2, #0
 8007294:	2140      	movs	r1, #64	; 0x40
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 ff87 	bl	80081aa <UART_WaitOnFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e005      	b.n	80072b2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	e000      	b.n	80072b2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80072b0:	2302      	movs	r3, #2
  }
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3720      	adds	r7, #32
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b08a      	sub	sp, #40	; 0x28
 80072be:	af02      	add	r7, sp, #8
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	60b9      	str	r1, [r7, #8]
 80072c4:	603b      	str	r3, [r7, #0]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	f040 80bf 	bne.w	8007452 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_UART_Receive+0x26>
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e0b7      	b.n	8007454 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_UART_Receive+0x38>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e0b0      	b.n	8007454 <HAL_UART_Receive+0x19a>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2222      	movs	r2, #34	; 0x22
 8007306:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800730e:	f7fb fecb 	bl	80030a8 <HAL_GetTick>
 8007312:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	88fa      	ldrh	r2, [r7, #6]
 8007318:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732c:	d10e      	bne.n	800734c <HAL_UART_Receive+0x92>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d105      	bne.n	8007342 <HAL_UART_Receive+0x88>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f240 12ff 	movw	r2, #511	; 0x1ff
 800733c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007340:	e02d      	b.n	800739e <HAL_UART_Receive+0xe4>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	22ff      	movs	r2, #255	; 0xff
 8007346:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800734a:	e028      	b.n	800739e <HAL_UART_Receive+0xe4>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10d      	bne.n	8007370 <HAL_UART_Receive+0xb6>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <HAL_UART_Receive+0xac>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	22ff      	movs	r2, #255	; 0xff
 8007360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007364:	e01b      	b.n	800739e <HAL_UART_Receive+0xe4>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	227f      	movs	r2, #127	; 0x7f
 800736a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800736e:	e016      	b.n	800739e <HAL_UART_Receive+0xe4>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007378:	d10d      	bne.n	8007396 <HAL_UART_Receive+0xdc>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d104      	bne.n	800738c <HAL_UART_Receive+0xd2>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	227f      	movs	r2, #127	; 0x7f
 8007386:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800738a:	e008      	b.n	800739e <HAL_UART_Receive+0xe4>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	223f      	movs	r2, #63	; 0x3f
 8007390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007394:	e003      	b.n	800739e <HAL_UART_Receive+0xe4>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073a4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ae:	d108      	bne.n	80073c2 <HAL_UART_Receive+0x108>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	e003      	b.n	80073ca <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80073d2:	e033      	b.n	800743c <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2200      	movs	r2, #0
 80073dc:	2120      	movs	r1, #32
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 fee3 	bl	80081aa <UART_WaitOnFlagUntilTimeout>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e032      	b.n	8007454 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10c      	bne.n	800740e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	8a7b      	ldrh	r3, [r7, #18]
 80073fe:	4013      	ands	r3, r2
 8007400:	b29a      	uxth	r2, r3
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	3302      	adds	r3, #2
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	e00d      	b.n	800742a <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007414:	b29b      	uxth	r3, r3
 8007416:	b2da      	uxtb	r2, r3
 8007418:	8a7b      	ldrh	r3, [r7, #18]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	4013      	ands	r3, r2
 800741e:	b2da      	uxtb	r2, r3
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	3301      	adds	r3, #1
 8007428:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1c5      	bne.n	80073d4 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	e000      	b.n	8007454 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007452:	2302      	movs	r3, #2
  }
}
 8007454:	4618      	mov	r0, r3
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	; 0x28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	4613      	mov	r3, r2
 8007468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800746e:	2b20      	cmp	r3, #32
 8007470:	d142      	bne.n	80074f8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_UART_Receive_DMA+0x22>
 8007478:	88fb      	ldrh	r3, [r7, #6]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e03b      	b.n	80074fa <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_UART_Receive_DMA+0x34>
 800748c:	2302      	movs	r3, #2
 800748e:	e034      	b.n	80074fa <HAL_UART_Receive_DMA+0x9e>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <HAL_UART_Receive_DMA+0xa8>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d01f      	beq.n	80074e8 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d018      	beq.n	80074e8 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	613b      	str	r3, [r7, #16]
   return(result);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	623b      	str	r3, [r7, #32]
 80074d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	69f9      	ldr	r1, [r7, #28]
 80074da:	6a3a      	ldr	r2, [r7, #32]
 80074dc:	e841 2300 	strex	r3, r2, [r1]
 80074e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e6      	bne.n	80074b6 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	461a      	mov	r2, r3
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 ff20 	bl	8008334 <UART_Start_Receive_DMA>
 80074f4:	4603      	mov	r3, r0
 80074f6:	e000      	b.n	80074fa <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3728      	adds	r7, #40	; 0x28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40008000 	.word	0x40008000

08007508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b0ba      	sub	sp, #232	; 0xe8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800752e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007532:	f640 030f 	movw	r3, #2063	; 0x80f
 8007536:	4013      	ands	r3, r2
 8007538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800753c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d115      	bne.n	8007570 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00f      	beq.n	8007570 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 82a6 	beq.w	8007ab2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
      }
      return;
 800756e:	e2a0      	b.n	8007ab2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8117 	beq.w	80077a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800757a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007586:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800758a:	4b85      	ldr	r3, [pc, #532]	; (80077a0 <HAL_UART_IRQHandler+0x298>)
 800758c:	4013      	ands	r3, r2
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 810a 	beq.w	80077a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d011      	beq.n	80075c4 <HAL_UART_IRQHandler+0xbc>
 80075a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2201      	movs	r2, #1
 80075b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ba:	f043 0201 	orr.w	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d011      	beq.n	80075f4 <HAL_UART_IRQHandler+0xec>
 80075d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2202      	movs	r2, #2
 80075e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ea:	f043 0204 	orr.w	r2, r3, #4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d011      	beq.n	8007624 <HAL_UART_IRQHandler+0x11c>
 8007600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2204      	movs	r2, #4
 8007612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800761a:	f043 0202 	orr.w	r2, r3, #2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d017      	beq.n	8007660 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d105      	bne.n	8007648 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800763c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007640:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2208      	movs	r2, #8
 800764e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007656:	f043 0208 	orr.w	r2, r3, #8
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007668:	2b00      	cmp	r3, #0
 800766a:	d012      	beq.n	8007692 <HAL_UART_IRQHandler+0x18a>
 800766c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 820c 	beq.w	8007ab6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800769e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00d      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d005      	beq.n	80076ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d04f      	beq.n	800778a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 feee 	bl	80084cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fa:	2b40      	cmp	r3, #64	; 0x40
 80076fc:	d141      	bne.n	8007782 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800772a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800772e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1d9      	bne.n	80076fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774e:	2b00      	cmp	r3, #0
 8007750:	d013      	beq.n	800777a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007756:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <HAL_UART_IRQHandler+0x29c>)
 8007758:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775e:	4618      	mov	r0, r3
 8007760:	f7fc fe34 	bl	80043cc <HAL_DMA_Abort_IT>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	e00f      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9ba 	bl	8007af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007780:	e00b      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f9b6 	bl	8007af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	e007      	b.n	800779a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f9b2 	bl	8007af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007798:	e18d      	b.n	8007ab6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779a:	bf00      	nop
    return;
 800779c:	e18b      	b.n	8007ab6 <HAL_UART_IRQHandler+0x5ae>
 800779e:	bf00      	nop
 80077a0:	04000120 	.word	0x04000120
 80077a4:	0800876b 	.word	0x0800876b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	f040 8146 	bne.w	8007a3e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 813f 	beq.w	8007a3e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 8138 	beq.w	8007a3e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2210      	movs	r2, #16
 80077d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	f040 80b4 	bne.w	800794e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 815f 	beq.w	8007aba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007806:	429a      	cmp	r2, r3
 8007808:	f080 8157 	bcs.w	8007aba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	f040 8085 	bne.w	8007932 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800783c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007856:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800785e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800786a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1da      	bne.n	8007828 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007896:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800789a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800789e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e1      	bne.n	8007872 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3308      	adds	r3, #8
 80078ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e3      	bne.n	80078ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078fa:	e853 3f00 	ldrex	r3, [r3]
 80078fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007902:	f023 0310 	bic.w	r3, r3, #16
 8007906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	461a      	mov	r2, r3
 8007910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007914:	65bb      	str	r3, [r7, #88]	; 0x58
 8007916:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800791a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e4      	bne.n	80078f2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	4618      	mov	r0, r3
 800792e:	f7fc fd0f 	bl	8004350 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800793e:	b29b      	uxth	r3, r3
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	b29b      	uxth	r3, r3
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f8de 	bl	8007b08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800794c:	e0b5      	b.n	8007aba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800795a:	b29b      	uxth	r3, r3
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80a7 	beq.w	8007abe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 80a2 	beq.w	8007abe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800798e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800799c:	647b      	str	r3, [r7, #68]	; 0x44
 800799e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e4      	bne.n	800797a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3308      	adds	r3, #8
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	623b      	str	r3, [r7, #32]
   return(result);
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079d4:	633a      	str	r2, [r7, #48]	; 0x30
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e3      	bne.n	80079b0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0310 	bic.w	r3, r3, #16
 8007a0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a1c:	61fb      	str	r3, [r7, #28]
 8007a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	69b9      	ldr	r1, [r7, #24]
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	e841 2300 	strex	r3, r2, [r1]
 8007a28:	617b      	str	r3, [r7, #20]
   return(result);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e4      	bne.n	80079fa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f866 	bl	8007b08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a3c:	e03f      	b.n	8007abe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00e      	beq.n	8007a68 <HAL_UART_IRQHandler+0x560>
 8007a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d008      	beq.n	8007a68 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fec2 	bl	80087ea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a66:	e02d      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00e      	beq.n	8007a92 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d008      	beq.n	8007a92 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01c      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
    }
    return;
 8007a90:	e017      	b.n	8007ac2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d012      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
 8007a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00c      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fe73 	bl	8008796 <UART_EndTransmit_IT>
    return;
 8007ab0:	e008      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007ab2:	bf00      	nop
 8007ab4:	e006      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007ab6:	bf00      	nop
 8007ab8:	e004      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007ac2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ac4:	37e8      	adds	r7, #232	; 0xe8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop

08007acc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b24:	b08a      	sub	sp, #40	; 0x28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	69db      	ldr	r3, [r3, #28]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b9e      	ldr	r3, [pc, #632]	; (8007dc8 <UART_SetConfig+0x2a8>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a93      	ldr	r2, [pc, #588]	; (8007dcc <UART_SetConfig+0x2ac>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d004      	beq.n	8007b8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a8a      	ldr	r2, [pc, #552]	; (8007dd0 <UART_SetConfig+0x2b0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d126      	bne.n	8007bf8 <UART_SetConfig+0xd8>
 8007baa:	4b8a      	ldr	r3, [pc, #552]	; (8007dd4 <UART_SetConfig+0x2b4>)
 8007bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d81b      	bhi.n	8007bf0 <UART_SetConfig+0xd0>
 8007bb8:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <UART_SetConfig+0xa0>)
 8007bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbe:	bf00      	nop
 8007bc0:	08007bd1 	.word	0x08007bd1
 8007bc4:	08007be1 	.word	0x08007be1
 8007bc8:	08007bd9 	.word	0x08007bd9
 8007bcc:	08007be9 	.word	0x08007be9
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd6:	e0ab      	b.n	8007d30 <UART_SetConfig+0x210>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bde:	e0a7      	b.n	8007d30 <UART_SetConfig+0x210>
 8007be0:	2304      	movs	r3, #4
 8007be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007be6:	e0a3      	b.n	8007d30 <UART_SetConfig+0x210>
 8007be8:	2308      	movs	r3, #8
 8007bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bee:	e09f      	b.n	8007d30 <UART_SetConfig+0x210>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bf6:	e09b      	b.n	8007d30 <UART_SetConfig+0x210>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a76      	ldr	r2, [pc, #472]	; (8007dd8 <UART_SetConfig+0x2b8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d138      	bne.n	8007c74 <UART_SetConfig+0x154>
 8007c02:	4b74      	ldr	r3, [pc, #464]	; (8007dd4 <UART_SetConfig+0x2b4>)
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c08:	f003 030c 	and.w	r3, r3, #12
 8007c0c:	2b0c      	cmp	r3, #12
 8007c0e:	d82d      	bhi.n	8007c6c <UART_SetConfig+0x14c>
 8007c10:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <UART_SetConfig+0xf8>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c4d 	.word	0x08007c4d
 8007c1c:	08007c6d 	.word	0x08007c6d
 8007c20:	08007c6d 	.word	0x08007c6d
 8007c24:	08007c6d 	.word	0x08007c6d
 8007c28:	08007c5d 	.word	0x08007c5d
 8007c2c:	08007c6d 	.word	0x08007c6d
 8007c30:	08007c6d 	.word	0x08007c6d
 8007c34:	08007c6d 	.word	0x08007c6d
 8007c38:	08007c55 	.word	0x08007c55
 8007c3c:	08007c6d 	.word	0x08007c6d
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	08007c6d 	.word	0x08007c6d
 8007c48:	08007c65 	.word	0x08007c65
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c52:	e06d      	b.n	8007d30 <UART_SetConfig+0x210>
 8007c54:	2302      	movs	r3, #2
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5a:	e069      	b.n	8007d30 <UART_SetConfig+0x210>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c62:	e065      	b.n	8007d30 <UART_SetConfig+0x210>
 8007c64:	2308      	movs	r3, #8
 8007c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c6a:	e061      	b.n	8007d30 <UART_SetConfig+0x210>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c72:	e05d      	b.n	8007d30 <UART_SetConfig+0x210>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a58      	ldr	r2, [pc, #352]	; (8007ddc <UART_SetConfig+0x2bc>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d125      	bne.n	8007cca <UART_SetConfig+0x1aa>
 8007c7e:	4b55      	ldr	r3, [pc, #340]	; (8007dd4 <UART_SetConfig+0x2b4>)
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c88:	2b30      	cmp	r3, #48	; 0x30
 8007c8a:	d016      	beq.n	8007cba <UART_SetConfig+0x19a>
 8007c8c:	2b30      	cmp	r3, #48	; 0x30
 8007c8e:	d818      	bhi.n	8007cc2 <UART_SetConfig+0x1a2>
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d00a      	beq.n	8007caa <UART_SetConfig+0x18a>
 8007c94:	2b20      	cmp	r3, #32
 8007c96:	d814      	bhi.n	8007cc2 <UART_SetConfig+0x1a2>
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <UART_SetConfig+0x182>
 8007c9c:	2b10      	cmp	r3, #16
 8007c9e:	d008      	beq.n	8007cb2 <UART_SetConfig+0x192>
 8007ca0:	e00f      	b.n	8007cc2 <UART_SetConfig+0x1a2>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca8:	e042      	b.n	8007d30 <UART_SetConfig+0x210>
 8007caa:	2302      	movs	r3, #2
 8007cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb0:	e03e      	b.n	8007d30 <UART_SetConfig+0x210>
 8007cb2:	2304      	movs	r3, #4
 8007cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb8:	e03a      	b.n	8007d30 <UART_SetConfig+0x210>
 8007cba:	2308      	movs	r3, #8
 8007cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc0:	e036      	b.n	8007d30 <UART_SetConfig+0x210>
 8007cc2:	2310      	movs	r3, #16
 8007cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc8:	e032      	b.n	8007d30 <UART_SetConfig+0x210>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a3f      	ldr	r2, [pc, #252]	; (8007dcc <UART_SetConfig+0x2ac>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d12a      	bne.n	8007d2a <UART_SetConfig+0x20a>
 8007cd4:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <UART_SetConfig+0x2b4>)
 8007cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ce2:	d01a      	beq.n	8007d1a <UART_SetConfig+0x1fa>
 8007ce4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ce8:	d81b      	bhi.n	8007d22 <UART_SetConfig+0x202>
 8007cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cee:	d00c      	beq.n	8007d0a <UART_SetConfig+0x1ea>
 8007cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf4:	d815      	bhi.n	8007d22 <UART_SetConfig+0x202>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <UART_SetConfig+0x1e2>
 8007cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cfe:	d008      	beq.n	8007d12 <UART_SetConfig+0x1f2>
 8007d00:	e00f      	b.n	8007d22 <UART_SetConfig+0x202>
 8007d02:	2300      	movs	r3, #0
 8007d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d08:	e012      	b.n	8007d30 <UART_SetConfig+0x210>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d10:	e00e      	b.n	8007d30 <UART_SetConfig+0x210>
 8007d12:	2304      	movs	r3, #4
 8007d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d18:	e00a      	b.n	8007d30 <UART_SetConfig+0x210>
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d20:	e006      	b.n	8007d30 <UART_SetConfig+0x210>
 8007d22:	2310      	movs	r3, #16
 8007d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d28:	e002      	b.n	8007d30 <UART_SetConfig+0x210>
 8007d2a:	2310      	movs	r3, #16
 8007d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a25      	ldr	r2, [pc, #148]	; (8007dcc <UART_SetConfig+0x2ac>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	f040 808a 	bne.w	8007e50 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d824      	bhi.n	8007d8e <UART_SetConfig+0x26e>
 8007d44:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <UART_SetConfig+0x22c>)
 8007d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4a:	bf00      	nop
 8007d4c:	08007d71 	.word	0x08007d71
 8007d50:	08007d8f 	.word	0x08007d8f
 8007d54:	08007d79 	.word	0x08007d79
 8007d58:	08007d8f 	.word	0x08007d8f
 8007d5c:	08007d7f 	.word	0x08007d7f
 8007d60:	08007d8f 	.word	0x08007d8f
 8007d64:	08007d8f 	.word	0x08007d8f
 8007d68:	08007d8f 	.word	0x08007d8f
 8007d6c:	08007d87 	.word	0x08007d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d70:	f7fe f984 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 8007d74:	61f8      	str	r0, [r7, #28]
        break;
 8007d76:	e010      	b.n	8007d9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d78:	4b19      	ldr	r3, [pc, #100]	; (8007de0 <UART_SetConfig+0x2c0>)
 8007d7a:	61fb      	str	r3, [r7, #28]
        break;
 8007d7c:	e00d      	b.n	8007d9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d7e:	f7fe f8e7 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8007d82:	61f8      	str	r0, [r7, #28]
        break;
 8007d84:	e009      	b.n	8007d9a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d8a:	61fb      	str	r3, [r7, #28]
        break;
 8007d8c:	e005      	b.n	8007d9a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 8109 	beq.w	8007fb4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	4613      	mov	r3, r2
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	4413      	add	r3, r2
 8007dac:	69fa      	ldr	r2, [r7, #28]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d305      	bcc.n	8007dbe <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d912      	bls.n	8007de4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007dc4:	e0f6      	b.n	8007fb4 <UART_SetConfig+0x494>
 8007dc6:	bf00      	nop
 8007dc8:	efff69f3 	.word	0xefff69f3
 8007dcc:	40008000 	.word	0x40008000
 8007dd0:	40013800 	.word	0x40013800
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	40004400 	.word	0x40004400
 8007ddc:	40004800 	.word	0x40004800
 8007de0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	2200      	movs	r2, #0
 8007de8:	461c      	mov	r4, r3
 8007dea:	4615      	mov	r5, r2
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	022b      	lsls	r3, r5, #8
 8007df6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007dfa:	0222      	lsls	r2, r4, #8
 8007dfc:	68f9      	ldr	r1, [r7, #12]
 8007dfe:	6849      	ldr	r1, [r1, #4]
 8007e00:	0849      	lsrs	r1, r1, #1
 8007e02:	2000      	movs	r0, #0
 8007e04:	4688      	mov	r8, r1
 8007e06:	4681      	mov	r9, r0
 8007e08:	eb12 0a08 	adds.w	sl, r2, r8
 8007e0c:	eb43 0b09 	adc.w	fp, r3, r9
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	607a      	str	r2, [r7, #4]
 8007e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e1e:	4650      	mov	r0, sl
 8007e20:	4659      	mov	r1, fp
 8007e22:	f7f8 ff11 	bl	8000c48 <__aeabi_uldivmod>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e34:	d308      	bcc.n	8007e48 <UART_SetConfig+0x328>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e3c:	d204      	bcs.n	8007e48 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	60da      	str	r2, [r3, #12]
 8007e46:	e0b5      	b.n	8007fb4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e4e:	e0b1      	b.n	8007fb4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e58:	d15d      	bne.n	8007f16 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	d827      	bhi.n	8007eb2 <UART_SetConfig+0x392>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <UART_SetConfig+0x348>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007e8d 	.word	0x08007e8d
 8007e6c:	08007e95 	.word	0x08007e95
 8007e70:	08007e9d 	.word	0x08007e9d
 8007e74:	08007eb3 	.word	0x08007eb3
 8007e78:	08007ea3 	.word	0x08007ea3
 8007e7c:	08007eb3 	.word	0x08007eb3
 8007e80:	08007eb3 	.word	0x08007eb3
 8007e84:	08007eb3 	.word	0x08007eb3
 8007e88:	08007eab 	.word	0x08007eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e8c:	f7fe f8f6 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 8007e90:	61f8      	str	r0, [r7, #28]
        break;
 8007e92:	e014      	b.n	8007ebe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e94:	f7fe f908 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8007e98:	61f8      	str	r0, [r7, #28]
        break;
 8007e9a:	e010      	b.n	8007ebe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e9c:	4b4c      	ldr	r3, [pc, #304]	; (8007fd0 <UART_SetConfig+0x4b0>)
 8007e9e:	61fb      	str	r3, [r7, #28]
        break;
 8007ea0:	e00d      	b.n	8007ebe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ea2:	f7fe f855 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8007ea6:	61f8      	str	r0, [r7, #28]
        break;
 8007ea8:	e009      	b.n	8007ebe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eae:	61fb      	str	r3, [r7, #28]
        break;
 8007eb0:	e005      	b.n	8007ebe <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d077      	beq.n	8007fb4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	005a      	lsls	r2, r3, #1
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	085b      	lsrs	r3, r3, #1
 8007ece:	441a      	add	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b0f      	cmp	r3, #15
 8007ede:	d916      	bls.n	8007f0e <UART_SetConfig+0x3ee>
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee6:	d212      	bcs.n	8007f0e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	f023 030f 	bic.w	r3, r3, #15
 8007ef0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	085b      	lsrs	r3, r3, #1
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	8afb      	ldrh	r3, [r7, #22]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	8afa      	ldrh	r2, [r7, #22]
 8007f0a:	60da      	str	r2, [r3, #12]
 8007f0c:	e052      	b.n	8007fb4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f14:	e04e      	b.n	8007fb4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f1a:	2b08      	cmp	r3, #8
 8007f1c:	d827      	bhi.n	8007f6e <UART_SetConfig+0x44e>
 8007f1e:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <UART_SetConfig+0x404>)
 8007f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f24:	08007f49 	.word	0x08007f49
 8007f28:	08007f51 	.word	0x08007f51
 8007f2c:	08007f59 	.word	0x08007f59
 8007f30:	08007f6f 	.word	0x08007f6f
 8007f34:	08007f5f 	.word	0x08007f5f
 8007f38:	08007f6f 	.word	0x08007f6f
 8007f3c:	08007f6f 	.word	0x08007f6f
 8007f40:	08007f6f 	.word	0x08007f6f
 8007f44:	08007f67 	.word	0x08007f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f48:	f7fe f898 	bl	800607c <HAL_RCC_GetPCLK1Freq>
 8007f4c:	61f8      	str	r0, [r7, #28]
        break;
 8007f4e:	e014      	b.n	8007f7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f50:	f7fe f8aa 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8007f54:	61f8      	str	r0, [r7, #28]
        break;
 8007f56:	e010      	b.n	8007f7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f58:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <UART_SetConfig+0x4b0>)
 8007f5a:	61fb      	str	r3, [r7, #28]
        break;
 8007f5c:	e00d      	b.n	8007f7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f5e:	f7fd fff7 	bl	8005f50 <HAL_RCC_GetSysClockFreq>
 8007f62:	61f8      	str	r0, [r7, #28]
        break;
 8007f64:	e009      	b.n	8007f7a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f6a:	61fb      	str	r3, [r7, #28]
        break;
 8007f6c:	e005      	b.n	8007f7a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f78:	bf00      	nop
    }

    if (pclk != 0U)
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d019      	beq.n	8007fb4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	085a      	lsrs	r2, r3, #1
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	441a      	add	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	2b0f      	cmp	r3, #15
 8007f98:	d909      	bls.n	8007fae <UART_SetConfig+0x48e>
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa0:	d205      	bcs.n	8007fae <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60da      	str	r2, [r3, #12]
 8007fac:	e002      	b.n	8007fb4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007fc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3728      	adds	r7, #40	; 0x28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fce:	bf00      	nop
 8007fd0:	00f42400 	.word	0x00f42400

08007fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	f003 0301 	and.w	r3, r3, #1
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	f003 0310 	and.w	r3, r3, #16
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00a      	beq.n	8008086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	f003 0320 	and.w	r3, r3, #32
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d01a      	beq.n	80080ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080d2:	d10a      	bne.n	80080ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	605a      	str	r2, [r3, #4]
  }
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af02      	add	r7, sp, #8
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008128:	f7fa ffbe 	bl	80030a8 <HAL_GetTick>
 800812c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0308 	and.w	r3, r3, #8
 8008138:	2b08      	cmp	r3, #8
 800813a:	d10e      	bne.n	800815a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800813c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f82d 	bl	80081aa <UART_WaitOnFlagUntilTimeout>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e023      	b.n	80081a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b04      	cmp	r3, #4
 8008166:	d10e      	bne.n	8008186 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f817 	bl	80081aa <UART_WaitOnFlagUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e00d      	b.n	80081a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2220      	movs	r2, #32
 800818a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2220      	movs	r2, #32
 8008190:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b09c      	sub	sp, #112	; 0x70
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	603b      	str	r3, [r7, #0]
 80081b6:	4613      	mov	r3, r2
 80081b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ba:	e0a5      	b.n	8008308 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c2:	f000 80a1 	beq.w	8008308 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081c6:	f7fa ff6f 	bl	80030a8 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d302      	bcc.n	80081dc <UART_WaitOnFlagUntilTimeout+0x32>
 80081d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d13e      	bne.n	800825a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081f0:	667b      	str	r3, [r7, #100]	; 0x64
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e6      	bne.n	80081dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3308      	adds	r3, #8
 8008214:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	f023 0301 	bic.w	r3, r3, #1
 8008224:	663b      	str	r3, [r7, #96]	; 0x60
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	3308      	adds	r3, #8
 800822c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800822e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008230:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800823c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e5      	bne.n	800820e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2220      	movs	r2, #32
 8008246:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2220      	movs	r2, #32
 800824c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e067      	b.n	800832a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d04f      	beq.n	8008308 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008276:	d147      	bne.n	8008308 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008280:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	461a      	mov	r2, r3
 800829e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
 80082a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e6      	bne.n	8008282 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	613b      	str	r3, [r7, #16]
   return(result);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f023 0301 	bic.w	r3, r3, #1
 80082ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3308      	adds	r3, #8
 80082d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082d4:	623a      	str	r2, [r7, #32]
 80082d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d8:	69f9      	ldr	r1, [r7, #28]
 80082da:	6a3a      	ldr	r2, [r7, #32]
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1e5      	bne.n	80082b4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2220      	movs	r2, #32
 80082ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2220      	movs	r2, #32
 80082f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e010      	b.n	800832a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69da      	ldr	r2, [r3, #28]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	4013      	ands	r3, r2
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	429a      	cmp	r2, r3
 8008316:	bf0c      	ite	eq
 8008318:	2301      	moveq	r3, #1
 800831a:	2300      	movne	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	429a      	cmp	r2, r3
 8008324:	f43f af4a 	beq.w	80081bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3770      	adds	r7, #112	; 0x70
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b096      	sub	sp, #88	; 0x58
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	4613      	mov	r3, r2
 8008340:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	88fa      	ldrh	r2, [r7, #6]
 800834c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2222      	movs	r2, #34	; 0x22
 800835c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008362:	2b00      	cmp	r3, #0
 8008364:	d02b      	beq.n	80083be <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836a:	4a42      	ldr	r2, [pc, #264]	; (8008474 <UART_Start_Receive_DMA+0x140>)
 800836c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008372:	4a41      	ldr	r2, [pc, #260]	; (8008478 <UART_Start_Receive_DMA+0x144>)
 8008374:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837a:	4a40      	ldr	r2, [pc, #256]	; (800847c <UART_Start_Receive_DMA+0x148>)
 800837c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008382:	2200      	movs	r2, #0
 8008384:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3324      	adds	r3, #36	; 0x24
 8008390:	4619      	mov	r1, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	461a      	mov	r2, r3
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	f7fb ff79 	bl	8004290 <HAL_DMA_Start_IT>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00c      	beq.n	80083be <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2210      	movs	r2, #16
 80083a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e055      	b.n	800846a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d018      	beq.n	8008400 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e2:	657b      	str	r3, [r7, #84]	; 0x54
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ee:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e6      	bne.n	80083ce <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	e853 3f00 	ldrex	r3, [r3]
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	f043 0301 	orr.w	r3, r3, #1
 8008416:	653b      	str	r3, [r7, #80]	; 0x50
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3308      	adds	r3, #8
 800841e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008420:	637a      	str	r2, [r7, #52]	; 0x34
 8008422:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e5      	bne.n	8008400 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	613b      	str	r3, [r7, #16]
   return(result);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3308      	adds	r3, #8
 8008452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008454:	623a      	str	r2, [r7, #32]
 8008456:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	69f9      	ldr	r1, [r7, #28]
 800845a:	6a3a      	ldr	r2, [r7, #32]
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	61bb      	str	r3, [r7, #24]
   return(result);
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e5      	bne.n	8008434 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3758      	adds	r7, #88	; 0x58
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	08008593 	.word	0x08008593
 8008478:	080086b7 	.word	0x080086b7
 800847c:	080086ef 	.word	0x080086ef

08008480 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008480:	b480      	push	{r7}
 8008482:	b089      	sub	sp, #36	; 0x24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	60bb      	str	r3, [r7, #8]
   return(result);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	61bb      	str	r3, [r7, #24]
 80084a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	6979      	ldr	r1, [r7, #20]
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	613b      	str	r3, [r7, #16]
   return(result);
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e6      	bne.n	8008488 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	679a      	str	r2, [r3, #120]	; 0x78
}
 80084c0:	bf00      	nop
 80084c2:	3724      	adds	r7, #36	; 0x24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b095      	sub	sp, #84	; 0x54
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f2:	643b      	str	r3, [r7, #64]	; 0x40
 80084f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e6      	bne.n	80084d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	61fb      	str	r3, [r7, #28]
   return(result);
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	f023 0301 	bic.w	r3, r3, #1
 800851c:	64bb      	str	r3, [r7, #72]	; 0x48
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008526:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800852c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e5      	bne.n	8008506 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853e:	2b01      	cmp	r3, #1
 8008540:	d118      	bne.n	8008574 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f023 0310 	bic.w	r3, r3, #16
 8008556:	647b      	str	r3, [r7, #68]	; 0x44
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008560:	61bb      	str	r3, [r7, #24]
 8008562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	6979      	ldr	r1, [r7, #20]
 8008566:	69ba      	ldr	r2, [r7, #24]
 8008568:	e841 2300 	strex	r3, r2, [r1]
 800856c:	613b      	str	r3, [r7, #16]
   return(result);
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e6      	bne.n	8008542 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008586:	bf00      	nop
 8008588:	3754      	adds	r7, #84	; 0x54
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b09c      	sub	sp, #112	; 0x70
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d170      	bne.n	8008690 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80085ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80085cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80085d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e6      	bne.n	80085b6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fa:	f023 0301 	bic.w	r3, r3, #1
 80085fe:	667b      	str	r3, [r7, #100]	; 0x64
 8008600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008608:	647a      	str	r2, [r7, #68]	; 0x44
 800860a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800860e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800861c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	623b      	str	r3, [r7, #32]
   return(result);
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008632:	663b      	str	r3, [r7, #96]	; 0x60
 8008634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800863c:	633a      	str	r2, [r7, #48]	; 0x30
 800863e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e5      	bne.n	800861c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008652:	2220      	movs	r2, #32
 8008654:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865a:	2b01      	cmp	r3, #1
 800865c:	d118      	bne.n	8008690 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	60fb      	str	r3, [r7, #12]
   return(result);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0310 	bic.w	r3, r3, #16
 8008672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	69b9      	ldr	r1, [r7, #24]
 8008682:	69fa      	ldr	r2, [r7, #28]
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	617b      	str	r3, [r7, #20]
   return(result);
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008694:	2b01      	cmp	r3, #1
 8008696:	d107      	bne.n	80086a8 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800869e:	4619      	mov	r1, r3
 80086a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086a2:	f7ff fa31 	bl	8007b08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086a6:	e002      	b.n	80086ae <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80086a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086aa:	f7f8 ff89 	bl	80015c0 <HAL_UART_RxCpltCallback>
}
 80086ae:	bf00      	nop
 80086b0:	3770      	adds	r7, #112	; 0x70
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d109      	bne.n	80086e0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	4619      	mov	r1, r3
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f7ff fa15 	bl	8007b08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086de:	e002      	b.n	80086e6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7ff f9fd 	bl	8007ae0 <HAL_UART_RxHalfCpltCallback>
}
 80086e6:	bf00      	nop
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008700:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008706:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008712:	2b80      	cmp	r3, #128	; 0x80
 8008714:	d109      	bne.n	800872a <UART_DMAError+0x3c>
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b21      	cmp	r3, #33	; 0x21
 800871a:	d106      	bne.n	800872a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2200      	movs	r2, #0
 8008720:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008724:	6978      	ldr	r0, [r7, #20]
 8008726:	f7ff feab 	bl	8008480 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b40      	cmp	r3, #64	; 0x40
 8008736:	d109      	bne.n	800874c <UART_DMAError+0x5e>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b22      	cmp	r3, #34	; 0x22
 800873c:	d106      	bne.n	800874c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2200      	movs	r2, #0
 8008742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008746:	6978      	ldr	r0, [r7, #20]
 8008748:	f7ff fec0 	bl	80084cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008752:	f043 0210 	orr.w	r2, r3, #16
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800875c:	6978      	ldr	r0, [r7, #20]
 800875e:	f7ff f9c9 	bl	8007af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008762:	bf00      	nop
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff f9b3 	bl	8007af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b088      	sub	sp, #32
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b2:	61fb      	str	r3, [r7, #28]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6979      	ldr	r1, [r7, #20]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	613b      	str	r3, [r7, #16]
   return(result);
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e6      	bne.n	800879e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff f975 	bl	8007acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087e2:	bf00      	nop
 80087e4:	3720      	adds	r7, #32
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087f2:	bf00      	nop
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <__errno>:
 8008800:	4b01      	ldr	r3, [pc, #4]	; (8008808 <__errno+0x8>)
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	20000188 	.word	0x20000188

0800880c <__libc_init_array>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4d0d      	ldr	r5, [pc, #52]	; (8008844 <__libc_init_array+0x38>)
 8008810:	4c0d      	ldr	r4, [pc, #52]	; (8008848 <__libc_init_array+0x3c>)
 8008812:	1b64      	subs	r4, r4, r5
 8008814:	10a4      	asrs	r4, r4, #2
 8008816:	2600      	movs	r6, #0
 8008818:	42a6      	cmp	r6, r4
 800881a:	d109      	bne.n	8008830 <__libc_init_array+0x24>
 800881c:	4d0b      	ldr	r5, [pc, #44]	; (800884c <__libc_init_array+0x40>)
 800881e:	4c0c      	ldr	r4, [pc, #48]	; (8008850 <__libc_init_array+0x44>)
 8008820:	f002 ff18 	bl	800b654 <_init>
 8008824:	1b64      	subs	r4, r4, r5
 8008826:	10a4      	asrs	r4, r4, #2
 8008828:	2600      	movs	r6, #0
 800882a:	42a6      	cmp	r6, r4
 800882c:	d105      	bne.n	800883a <__libc_init_array+0x2e>
 800882e:	bd70      	pop	{r4, r5, r6, pc}
 8008830:	f855 3b04 	ldr.w	r3, [r5], #4
 8008834:	4798      	blx	r3
 8008836:	3601      	adds	r6, #1
 8008838:	e7ee      	b.n	8008818 <__libc_init_array+0xc>
 800883a:	f855 3b04 	ldr.w	r3, [r5], #4
 800883e:	4798      	blx	r3
 8008840:	3601      	adds	r6, #1
 8008842:	e7f2      	b.n	800882a <__libc_init_array+0x1e>
 8008844:	0800dc24 	.word	0x0800dc24
 8008848:	0800dc24 	.word	0x0800dc24
 800884c:	0800dc24 	.word	0x0800dc24
 8008850:	0800dc28 	.word	0x0800dc28

08008854 <memcpy>:
 8008854:	440a      	add	r2, r1
 8008856:	4291      	cmp	r1, r2
 8008858:	f100 33ff 	add.w	r3, r0, #4294967295
 800885c:	d100      	bne.n	8008860 <memcpy+0xc>
 800885e:	4770      	bx	lr
 8008860:	b510      	push	{r4, lr}
 8008862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800886a:	4291      	cmp	r1, r2
 800886c:	d1f9      	bne.n	8008862 <memcpy+0xe>
 800886e:	bd10      	pop	{r4, pc}

08008870 <memset>:
 8008870:	4402      	add	r2, r0
 8008872:	4603      	mov	r3, r0
 8008874:	4293      	cmp	r3, r2
 8008876:	d100      	bne.n	800887a <memset+0xa>
 8008878:	4770      	bx	lr
 800887a:	f803 1b01 	strb.w	r1, [r3], #1
 800887e:	e7f9      	b.n	8008874 <memset+0x4>

08008880 <__cvt>:
 8008880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008884:	ec55 4b10 	vmov	r4, r5, d0
 8008888:	2d00      	cmp	r5, #0
 800888a:	460e      	mov	r6, r1
 800888c:	4619      	mov	r1, r3
 800888e:	462b      	mov	r3, r5
 8008890:	bfbb      	ittet	lt
 8008892:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008896:	461d      	movlt	r5, r3
 8008898:	2300      	movge	r3, #0
 800889a:	232d      	movlt	r3, #45	; 0x2d
 800889c:	700b      	strb	r3, [r1, #0]
 800889e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088a4:	4691      	mov	r9, r2
 80088a6:	f023 0820 	bic.w	r8, r3, #32
 80088aa:	bfbc      	itt	lt
 80088ac:	4622      	movlt	r2, r4
 80088ae:	4614      	movlt	r4, r2
 80088b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088b4:	d005      	beq.n	80088c2 <__cvt+0x42>
 80088b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088ba:	d100      	bne.n	80088be <__cvt+0x3e>
 80088bc:	3601      	adds	r6, #1
 80088be:	2102      	movs	r1, #2
 80088c0:	e000      	b.n	80088c4 <__cvt+0x44>
 80088c2:	2103      	movs	r1, #3
 80088c4:	ab03      	add	r3, sp, #12
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	ab02      	add	r3, sp, #8
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	ec45 4b10 	vmov	d0, r4, r5
 80088d0:	4653      	mov	r3, sl
 80088d2:	4632      	mov	r2, r6
 80088d4:	f000 fd00 	bl	80092d8 <_dtoa_r>
 80088d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088dc:	4607      	mov	r7, r0
 80088de:	d102      	bne.n	80088e6 <__cvt+0x66>
 80088e0:	f019 0f01 	tst.w	r9, #1
 80088e4:	d022      	beq.n	800892c <__cvt+0xac>
 80088e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088ea:	eb07 0906 	add.w	r9, r7, r6
 80088ee:	d110      	bne.n	8008912 <__cvt+0x92>
 80088f0:	783b      	ldrb	r3, [r7, #0]
 80088f2:	2b30      	cmp	r3, #48	; 0x30
 80088f4:	d10a      	bne.n	800890c <__cvt+0x8c>
 80088f6:	2200      	movs	r2, #0
 80088f8:	2300      	movs	r3, #0
 80088fa:	4620      	mov	r0, r4
 80088fc:	4629      	mov	r1, r5
 80088fe:	f7f8 f8e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008902:	b918      	cbnz	r0, 800890c <__cvt+0x8c>
 8008904:	f1c6 0601 	rsb	r6, r6, #1
 8008908:	f8ca 6000 	str.w	r6, [sl]
 800890c:	f8da 3000 	ldr.w	r3, [sl]
 8008910:	4499      	add	r9, r3
 8008912:	2200      	movs	r2, #0
 8008914:	2300      	movs	r3, #0
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f8 f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800891e:	b108      	cbz	r0, 8008924 <__cvt+0xa4>
 8008920:	f8cd 900c 	str.w	r9, [sp, #12]
 8008924:	2230      	movs	r2, #48	; 0x30
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	454b      	cmp	r3, r9
 800892a:	d307      	bcc.n	800893c <__cvt+0xbc>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008930:	1bdb      	subs	r3, r3, r7
 8008932:	4638      	mov	r0, r7
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	b004      	add	sp, #16
 8008938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893c:	1c59      	adds	r1, r3, #1
 800893e:	9103      	str	r1, [sp, #12]
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	e7f0      	b.n	8008926 <__cvt+0xa6>

08008944 <__exponent>:
 8008944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008946:	4603      	mov	r3, r0
 8008948:	2900      	cmp	r1, #0
 800894a:	bfb8      	it	lt
 800894c:	4249      	neglt	r1, r1
 800894e:	f803 2b02 	strb.w	r2, [r3], #2
 8008952:	bfb4      	ite	lt
 8008954:	222d      	movlt	r2, #45	; 0x2d
 8008956:	222b      	movge	r2, #43	; 0x2b
 8008958:	2909      	cmp	r1, #9
 800895a:	7042      	strb	r2, [r0, #1]
 800895c:	dd2a      	ble.n	80089b4 <__exponent+0x70>
 800895e:	f10d 0407 	add.w	r4, sp, #7
 8008962:	46a4      	mov	ip, r4
 8008964:	270a      	movs	r7, #10
 8008966:	46a6      	mov	lr, r4
 8008968:	460a      	mov	r2, r1
 800896a:	fb91 f6f7 	sdiv	r6, r1, r7
 800896e:	fb07 1516 	mls	r5, r7, r6, r1
 8008972:	3530      	adds	r5, #48	; 0x30
 8008974:	2a63      	cmp	r2, #99	; 0x63
 8008976:	f104 34ff 	add.w	r4, r4, #4294967295
 800897a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800897e:	4631      	mov	r1, r6
 8008980:	dcf1      	bgt.n	8008966 <__exponent+0x22>
 8008982:	3130      	adds	r1, #48	; 0x30
 8008984:	f1ae 0502 	sub.w	r5, lr, #2
 8008988:	f804 1c01 	strb.w	r1, [r4, #-1]
 800898c:	1c44      	adds	r4, r0, #1
 800898e:	4629      	mov	r1, r5
 8008990:	4561      	cmp	r1, ip
 8008992:	d30a      	bcc.n	80089aa <__exponent+0x66>
 8008994:	f10d 0209 	add.w	r2, sp, #9
 8008998:	eba2 020e 	sub.w	r2, r2, lr
 800899c:	4565      	cmp	r5, ip
 800899e:	bf88      	it	hi
 80089a0:	2200      	movhi	r2, #0
 80089a2:	4413      	add	r3, r2
 80089a4:	1a18      	subs	r0, r3, r0
 80089a6:	b003      	add	sp, #12
 80089a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089b2:	e7ed      	b.n	8008990 <__exponent+0x4c>
 80089b4:	2330      	movs	r3, #48	; 0x30
 80089b6:	3130      	adds	r1, #48	; 0x30
 80089b8:	7083      	strb	r3, [r0, #2]
 80089ba:	70c1      	strb	r1, [r0, #3]
 80089bc:	1d03      	adds	r3, r0, #4
 80089be:	e7f1      	b.n	80089a4 <__exponent+0x60>

080089c0 <_printf_float>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	ed2d 8b02 	vpush	{d8}
 80089c8:	b08d      	sub	sp, #52	; 0x34
 80089ca:	460c      	mov	r4, r1
 80089cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089d0:	4616      	mov	r6, r2
 80089d2:	461f      	mov	r7, r3
 80089d4:	4605      	mov	r5, r0
 80089d6:	f001 fa6d 	bl	8009eb4 <_localeconv_r>
 80089da:	f8d0 a000 	ldr.w	sl, [r0]
 80089de:	4650      	mov	r0, sl
 80089e0:	f7f7 fbf6 	bl	80001d0 <strlen>
 80089e4:	2300      	movs	r3, #0
 80089e6:	930a      	str	r3, [sp, #40]	; 0x28
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	9305      	str	r3, [sp, #20]
 80089ec:	f8d8 3000 	ldr.w	r3, [r8]
 80089f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80089f4:	3307      	adds	r3, #7
 80089f6:	f023 0307 	bic.w	r3, r3, #7
 80089fa:	f103 0208 	add.w	r2, r3, #8
 80089fe:	f8c8 2000 	str.w	r2, [r8]
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a12:	9307      	str	r3, [sp, #28]
 8008a14:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a18:	ee08 0a10 	vmov	s16, r0
 8008a1c:	4b9f      	ldr	r3, [pc, #636]	; (8008c9c <_printf_float+0x2dc>)
 8008a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a22:	f04f 32ff 	mov.w	r2, #4294967295
 8008a26:	f7f8 f881 	bl	8000b2c <__aeabi_dcmpun>
 8008a2a:	bb88      	cbnz	r0, 8008a90 <_printf_float+0xd0>
 8008a2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a30:	4b9a      	ldr	r3, [pc, #616]	; (8008c9c <_printf_float+0x2dc>)
 8008a32:	f04f 32ff 	mov.w	r2, #4294967295
 8008a36:	f7f8 f85b 	bl	8000af0 <__aeabi_dcmple>
 8008a3a:	bb48      	cbnz	r0, 8008a90 <_printf_float+0xd0>
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	f7f8 f84a 	bl	8000adc <__aeabi_dcmplt>
 8008a48:	b110      	cbz	r0, 8008a50 <_printf_float+0x90>
 8008a4a:	232d      	movs	r3, #45	; 0x2d
 8008a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a50:	4b93      	ldr	r3, [pc, #588]	; (8008ca0 <_printf_float+0x2e0>)
 8008a52:	4894      	ldr	r0, [pc, #592]	; (8008ca4 <_printf_float+0x2e4>)
 8008a54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a58:	bf94      	ite	ls
 8008a5a:	4698      	movls	r8, r3
 8008a5c:	4680      	movhi	r8, r0
 8008a5e:	2303      	movs	r3, #3
 8008a60:	6123      	str	r3, [r4, #16]
 8008a62:	9b05      	ldr	r3, [sp, #20]
 8008a64:	f023 0204 	bic.w	r2, r3, #4
 8008a68:	6022      	str	r2, [r4, #0]
 8008a6a:	f04f 0900 	mov.w	r9, #0
 8008a6e:	9700      	str	r7, [sp, #0]
 8008a70:	4633      	mov	r3, r6
 8008a72:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a74:	4621      	mov	r1, r4
 8008a76:	4628      	mov	r0, r5
 8008a78:	f000 f9d8 	bl	8008e2c <_printf_common>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	f040 8090 	bne.w	8008ba2 <_printf_float+0x1e2>
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	b00d      	add	sp, #52	; 0x34
 8008a88:	ecbd 8b02 	vpop	{d8}
 8008a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a90:	4642      	mov	r2, r8
 8008a92:	464b      	mov	r3, r9
 8008a94:	4640      	mov	r0, r8
 8008a96:	4649      	mov	r1, r9
 8008a98:	f7f8 f848 	bl	8000b2c <__aeabi_dcmpun>
 8008a9c:	b140      	cbz	r0, 8008ab0 <_printf_float+0xf0>
 8008a9e:	464b      	mov	r3, r9
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bfbc      	itt	lt
 8008aa4:	232d      	movlt	r3, #45	; 0x2d
 8008aa6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008aaa:	487f      	ldr	r0, [pc, #508]	; (8008ca8 <_printf_float+0x2e8>)
 8008aac:	4b7f      	ldr	r3, [pc, #508]	; (8008cac <_printf_float+0x2ec>)
 8008aae:	e7d1      	b.n	8008a54 <_printf_float+0x94>
 8008ab0:	6863      	ldr	r3, [r4, #4]
 8008ab2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008ab6:	9206      	str	r2, [sp, #24]
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	d13f      	bne.n	8008b3c <_printf_float+0x17c>
 8008abc:	2306      	movs	r3, #6
 8008abe:	6063      	str	r3, [r4, #4]
 8008ac0:	9b05      	ldr	r3, [sp, #20]
 8008ac2:	6861      	ldr	r1, [r4, #4]
 8008ac4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	ab0a      	add	r3, sp, #40	; 0x28
 8008ace:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008ad2:	ab09      	add	r3, sp, #36	; 0x24
 8008ad4:	ec49 8b10 	vmov	d0, r8, r9
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	6022      	str	r2, [r4, #0]
 8008adc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f7ff fecd 	bl	8008880 <__cvt>
 8008ae6:	9b06      	ldr	r3, [sp, #24]
 8008ae8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aea:	2b47      	cmp	r3, #71	; 0x47
 8008aec:	4680      	mov	r8, r0
 8008aee:	d108      	bne.n	8008b02 <_printf_float+0x142>
 8008af0:	1cc8      	adds	r0, r1, #3
 8008af2:	db02      	blt.n	8008afa <_printf_float+0x13a>
 8008af4:	6863      	ldr	r3, [r4, #4]
 8008af6:	4299      	cmp	r1, r3
 8008af8:	dd41      	ble.n	8008b7e <_printf_float+0x1be>
 8008afa:	f1ab 0b02 	sub.w	fp, fp, #2
 8008afe:	fa5f fb8b 	uxtb.w	fp, fp
 8008b02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b06:	d820      	bhi.n	8008b4a <_printf_float+0x18a>
 8008b08:	3901      	subs	r1, #1
 8008b0a:	465a      	mov	r2, fp
 8008b0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b10:	9109      	str	r1, [sp, #36]	; 0x24
 8008b12:	f7ff ff17 	bl	8008944 <__exponent>
 8008b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b18:	1813      	adds	r3, r2, r0
 8008b1a:	2a01      	cmp	r2, #1
 8008b1c:	4681      	mov	r9, r0
 8008b1e:	6123      	str	r3, [r4, #16]
 8008b20:	dc02      	bgt.n	8008b28 <_printf_float+0x168>
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	07d2      	lsls	r2, r2, #31
 8008b26:	d501      	bpl.n	8008b2c <_printf_float+0x16c>
 8008b28:	3301      	adds	r3, #1
 8008b2a:	6123      	str	r3, [r4, #16]
 8008b2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d09c      	beq.n	8008a6e <_printf_float+0xae>
 8008b34:	232d      	movs	r3, #45	; 0x2d
 8008b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b3a:	e798      	b.n	8008a6e <_printf_float+0xae>
 8008b3c:	9a06      	ldr	r2, [sp, #24]
 8008b3e:	2a47      	cmp	r2, #71	; 0x47
 8008b40:	d1be      	bne.n	8008ac0 <_printf_float+0x100>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1bc      	bne.n	8008ac0 <_printf_float+0x100>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e7b9      	b.n	8008abe <_printf_float+0xfe>
 8008b4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b4e:	d118      	bne.n	8008b82 <_printf_float+0x1c2>
 8008b50:	2900      	cmp	r1, #0
 8008b52:	6863      	ldr	r3, [r4, #4]
 8008b54:	dd0b      	ble.n	8008b6e <_printf_float+0x1ae>
 8008b56:	6121      	str	r1, [r4, #16]
 8008b58:	b913      	cbnz	r3, 8008b60 <_printf_float+0x1a0>
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	07d0      	lsls	r0, r2, #31
 8008b5e:	d502      	bpl.n	8008b66 <_printf_float+0x1a6>
 8008b60:	3301      	adds	r3, #1
 8008b62:	440b      	add	r3, r1
 8008b64:	6123      	str	r3, [r4, #16]
 8008b66:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b68:	f04f 0900 	mov.w	r9, #0
 8008b6c:	e7de      	b.n	8008b2c <_printf_float+0x16c>
 8008b6e:	b913      	cbnz	r3, 8008b76 <_printf_float+0x1b6>
 8008b70:	6822      	ldr	r2, [r4, #0]
 8008b72:	07d2      	lsls	r2, r2, #31
 8008b74:	d501      	bpl.n	8008b7a <_printf_float+0x1ba>
 8008b76:	3302      	adds	r3, #2
 8008b78:	e7f4      	b.n	8008b64 <_printf_float+0x1a4>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e7f2      	b.n	8008b64 <_printf_float+0x1a4>
 8008b7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b84:	4299      	cmp	r1, r3
 8008b86:	db05      	blt.n	8008b94 <_printf_float+0x1d4>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	6121      	str	r1, [r4, #16]
 8008b8c:	07d8      	lsls	r0, r3, #31
 8008b8e:	d5ea      	bpl.n	8008b66 <_printf_float+0x1a6>
 8008b90:	1c4b      	adds	r3, r1, #1
 8008b92:	e7e7      	b.n	8008b64 <_printf_float+0x1a4>
 8008b94:	2900      	cmp	r1, #0
 8008b96:	bfd4      	ite	le
 8008b98:	f1c1 0202 	rsble	r2, r1, #2
 8008b9c:	2201      	movgt	r2, #1
 8008b9e:	4413      	add	r3, r2
 8008ba0:	e7e0      	b.n	8008b64 <_printf_float+0x1a4>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	055a      	lsls	r2, r3, #21
 8008ba6:	d407      	bmi.n	8008bb8 <_printf_float+0x1f8>
 8008ba8:	6923      	ldr	r3, [r4, #16]
 8008baa:	4642      	mov	r2, r8
 8008bac:	4631      	mov	r1, r6
 8008bae:	4628      	mov	r0, r5
 8008bb0:	47b8      	blx	r7
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d12c      	bne.n	8008c10 <_printf_float+0x250>
 8008bb6:	e764      	b.n	8008a82 <_printf_float+0xc2>
 8008bb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bbc:	f240 80e0 	bls.w	8008d80 <_printf_float+0x3c0>
 8008bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f7f7 ff7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d034      	beq.n	8008c3a <_printf_float+0x27a>
 8008bd0:	4a37      	ldr	r2, [pc, #220]	; (8008cb0 <_printf_float+0x2f0>)
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	4631      	mov	r1, r6
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	47b8      	blx	r7
 8008bda:	3001      	adds	r0, #1
 8008bdc:	f43f af51 	beq.w	8008a82 <_printf_float+0xc2>
 8008be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008be4:	429a      	cmp	r2, r3
 8008be6:	db02      	blt.n	8008bee <_printf_float+0x22e>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	07d8      	lsls	r0, r3, #31
 8008bec:	d510      	bpl.n	8008c10 <_printf_float+0x250>
 8008bee:	ee18 3a10 	vmov	r3, s16
 8008bf2:	4652      	mov	r2, sl
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b8      	blx	r7
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	f43f af41 	beq.w	8008a82 <_printf_float+0xc2>
 8008c00:	f04f 0800 	mov.w	r8, #0
 8008c04:	f104 091a 	add.w	r9, r4, #26
 8008c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	4543      	cmp	r3, r8
 8008c0e:	dc09      	bgt.n	8008c24 <_printf_float+0x264>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	079b      	lsls	r3, r3, #30
 8008c14:	f100 8105 	bmi.w	8008e22 <_printf_float+0x462>
 8008c18:	68e0      	ldr	r0, [r4, #12]
 8008c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c1c:	4298      	cmp	r0, r3
 8008c1e:	bfb8      	it	lt
 8008c20:	4618      	movlt	r0, r3
 8008c22:	e730      	b.n	8008a86 <_printf_float+0xc6>
 8008c24:	2301      	movs	r3, #1
 8008c26:	464a      	mov	r2, r9
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	47b8      	blx	r7
 8008c2e:	3001      	adds	r0, #1
 8008c30:	f43f af27 	beq.w	8008a82 <_printf_float+0xc2>
 8008c34:	f108 0801 	add.w	r8, r8, #1
 8008c38:	e7e6      	b.n	8008c08 <_printf_float+0x248>
 8008c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dc39      	bgt.n	8008cb4 <_printf_float+0x2f4>
 8008c40:	4a1b      	ldr	r2, [pc, #108]	; (8008cb0 <_printf_float+0x2f0>)
 8008c42:	2301      	movs	r3, #1
 8008c44:	4631      	mov	r1, r6
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	f43f af19 	beq.w	8008a82 <_printf_float+0xc2>
 8008c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c54:	4313      	orrs	r3, r2
 8008c56:	d102      	bne.n	8008c5e <_printf_float+0x29e>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	07d9      	lsls	r1, r3, #31
 8008c5c:	d5d8      	bpl.n	8008c10 <_printf_float+0x250>
 8008c5e:	ee18 3a10 	vmov	r3, s16
 8008c62:	4652      	mov	r2, sl
 8008c64:	4631      	mov	r1, r6
 8008c66:	4628      	mov	r0, r5
 8008c68:	47b8      	blx	r7
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f43f af09 	beq.w	8008a82 <_printf_float+0xc2>
 8008c70:	f04f 0900 	mov.w	r9, #0
 8008c74:	f104 0a1a 	add.w	sl, r4, #26
 8008c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7a:	425b      	negs	r3, r3
 8008c7c:	454b      	cmp	r3, r9
 8008c7e:	dc01      	bgt.n	8008c84 <_printf_float+0x2c4>
 8008c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c82:	e792      	b.n	8008baa <_printf_float+0x1ea>
 8008c84:	2301      	movs	r3, #1
 8008c86:	4652      	mov	r2, sl
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b8      	blx	r7
 8008c8e:	3001      	adds	r0, #1
 8008c90:	f43f aef7 	beq.w	8008a82 <_printf_float+0xc2>
 8008c94:	f109 0901 	add.w	r9, r9, #1
 8008c98:	e7ee      	b.n	8008c78 <_printf_float+0x2b8>
 8008c9a:	bf00      	nop
 8008c9c:	7fefffff 	.word	0x7fefffff
 8008ca0:	0800d848 	.word	0x0800d848
 8008ca4:	0800d84c 	.word	0x0800d84c
 8008ca8:	0800d854 	.word	0x0800d854
 8008cac:	0800d850 	.word	0x0800d850
 8008cb0:	0800d858 	.word	0x0800d858
 8008cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	bfa8      	it	ge
 8008cbc:	461a      	movge	r2, r3
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	4691      	mov	r9, r2
 8008cc2:	dc37      	bgt.n	8008d34 <_printf_float+0x374>
 8008cc4:	f04f 0b00 	mov.w	fp, #0
 8008cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ccc:	f104 021a 	add.w	r2, r4, #26
 8008cd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cd2:	9305      	str	r3, [sp, #20]
 8008cd4:	eba3 0309 	sub.w	r3, r3, r9
 8008cd8:	455b      	cmp	r3, fp
 8008cda:	dc33      	bgt.n	8008d44 <_printf_float+0x384>
 8008cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	db3b      	blt.n	8008d5c <_printf_float+0x39c>
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	07da      	lsls	r2, r3, #31
 8008ce8:	d438      	bmi.n	8008d5c <_printf_float+0x39c>
 8008cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cec:	9a05      	ldr	r2, [sp, #20]
 8008cee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cf0:	1a9a      	subs	r2, r3, r2
 8008cf2:	eba3 0901 	sub.w	r9, r3, r1
 8008cf6:	4591      	cmp	r9, r2
 8008cf8:	bfa8      	it	ge
 8008cfa:	4691      	movge	r9, r2
 8008cfc:	f1b9 0f00 	cmp.w	r9, #0
 8008d00:	dc35      	bgt.n	8008d6e <_printf_float+0x3ae>
 8008d02:	f04f 0800 	mov.w	r8, #0
 8008d06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d0a:	f104 0a1a 	add.w	sl, r4, #26
 8008d0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	eba3 0309 	sub.w	r3, r3, r9
 8008d18:	4543      	cmp	r3, r8
 8008d1a:	f77f af79 	ble.w	8008c10 <_printf_float+0x250>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4652      	mov	r2, sl
 8008d22:	4631      	mov	r1, r6
 8008d24:	4628      	mov	r0, r5
 8008d26:	47b8      	blx	r7
 8008d28:	3001      	adds	r0, #1
 8008d2a:	f43f aeaa 	beq.w	8008a82 <_printf_float+0xc2>
 8008d2e:	f108 0801 	add.w	r8, r8, #1
 8008d32:	e7ec      	b.n	8008d0e <_printf_float+0x34e>
 8008d34:	4613      	mov	r3, r2
 8008d36:	4631      	mov	r1, r6
 8008d38:	4642      	mov	r2, r8
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	47b8      	blx	r7
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d1c0      	bne.n	8008cc4 <_printf_float+0x304>
 8008d42:	e69e      	b.n	8008a82 <_printf_float+0xc2>
 8008d44:	2301      	movs	r3, #1
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	9205      	str	r2, [sp, #20]
 8008d4c:	47b8      	blx	r7
 8008d4e:	3001      	adds	r0, #1
 8008d50:	f43f ae97 	beq.w	8008a82 <_printf_float+0xc2>
 8008d54:	9a05      	ldr	r2, [sp, #20]
 8008d56:	f10b 0b01 	add.w	fp, fp, #1
 8008d5a:	e7b9      	b.n	8008cd0 <_printf_float+0x310>
 8008d5c:	ee18 3a10 	vmov	r3, s16
 8008d60:	4652      	mov	r2, sl
 8008d62:	4631      	mov	r1, r6
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b8      	blx	r7
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d1be      	bne.n	8008cea <_printf_float+0x32a>
 8008d6c:	e689      	b.n	8008a82 <_printf_float+0xc2>
 8008d6e:	9a05      	ldr	r2, [sp, #20]
 8008d70:	464b      	mov	r3, r9
 8008d72:	4442      	add	r2, r8
 8008d74:	4631      	mov	r1, r6
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d1c1      	bne.n	8008d02 <_printf_float+0x342>
 8008d7e:	e680      	b.n	8008a82 <_printf_float+0xc2>
 8008d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d82:	2a01      	cmp	r2, #1
 8008d84:	dc01      	bgt.n	8008d8a <_printf_float+0x3ca>
 8008d86:	07db      	lsls	r3, r3, #31
 8008d88:	d538      	bpl.n	8008dfc <_printf_float+0x43c>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4628      	mov	r0, r5
 8008d92:	47b8      	blx	r7
 8008d94:	3001      	adds	r0, #1
 8008d96:	f43f ae74 	beq.w	8008a82 <_printf_float+0xc2>
 8008d9a:	ee18 3a10 	vmov	r3, s16
 8008d9e:	4652      	mov	r2, sl
 8008da0:	4631      	mov	r1, r6
 8008da2:	4628      	mov	r0, r5
 8008da4:	47b8      	blx	r7
 8008da6:	3001      	adds	r0, #1
 8008da8:	f43f ae6b 	beq.w	8008a82 <_printf_float+0xc2>
 8008dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008db0:	2200      	movs	r2, #0
 8008db2:	2300      	movs	r3, #0
 8008db4:	f7f7 fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db8:	b9d8      	cbnz	r0, 8008df2 <_printf_float+0x432>
 8008dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dbc:	f108 0201 	add.w	r2, r8, #1
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	47b8      	blx	r7
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d10e      	bne.n	8008dea <_printf_float+0x42a>
 8008dcc:	e659      	b.n	8008a82 <_printf_float+0xc2>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	47b8      	blx	r7
 8008dd8:	3001      	adds	r0, #1
 8008dda:	f43f ae52 	beq.w	8008a82 <_printf_float+0xc2>
 8008dde:	f108 0801 	add.w	r8, r8, #1
 8008de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de4:	3b01      	subs	r3, #1
 8008de6:	4543      	cmp	r3, r8
 8008de8:	dcf1      	bgt.n	8008dce <_printf_float+0x40e>
 8008dea:	464b      	mov	r3, r9
 8008dec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008df0:	e6dc      	b.n	8008bac <_printf_float+0x1ec>
 8008df2:	f04f 0800 	mov.w	r8, #0
 8008df6:	f104 0a1a 	add.w	sl, r4, #26
 8008dfa:	e7f2      	b.n	8008de2 <_printf_float+0x422>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4642      	mov	r2, r8
 8008e00:	e7df      	b.n	8008dc2 <_printf_float+0x402>
 8008e02:	2301      	movs	r3, #1
 8008e04:	464a      	mov	r2, r9
 8008e06:	4631      	mov	r1, r6
 8008e08:	4628      	mov	r0, r5
 8008e0a:	47b8      	blx	r7
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	f43f ae38 	beq.w	8008a82 <_printf_float+0xc2>
 8008e12:	f108 0801 	add.w	r8, r8, #1
 8008e16:	68e3      	ldr	r3, [r4, #12]
 8008e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e1a:	1a5b      	subs	r3, r3, r1
 8008e1c:	4543      	cmp	r3, r8
 8008e1e:	dcf0      	bgt.n	8008e02 <_printf_float+0x442>
 8008e20:	e6fa      	b.n	8008c18 <_printf_float+0x258>
 8008e22:	f04f 0800 	mov.w	r8, #0
 8008e26:	f104 0919 	add.w	r9, r4, #25
 8008e2a:	e7f4      	b.n	8008e16 <_printf_float+0x456>

08008e2c <_printf_common>:
 8008e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e30:	4616      	mov	r6, r2
 8008e32:	4699      	mov	r9, r3
 8008e34:	688a      	ldr	r2, [r1, #8]
 8008e36:	690b      	ldr	r3, [r1, #16]
 8008e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	bfb8      	it	lt
 8008e40:	4613      	movlt	r3, r2
 8008e42:	6033      	str	r3, [r6, #0]
 8008e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e48:	4607      	mov	r7, r0
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	b10a      	cbz	r2, 8008e52 <_printf_common+0x26>
 8008e4e:	3301      	adds	r3, #1
 8008e50:	6033      	str	r3, [r6, #0]
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	0699      	lsls	r1, r3, #26
 8008e56:	bf42      	ittt	mi
 8008e58:	6833      	ldrmi	r3, [r6, #0]
 8008e5a:	3302      	addmi	r3, #2
 8008e5c:	6033      	strmi	r3, [r6, #0]
 8008e5e:	6825      	ldr	r5, [r4, #0]
 8008e60:	f015 0506 	ands.w	r5, r5, #6
 8008e64:	d106      	bne.n	8008e74 <_printf_common+0x48>
 8008e66:	f104 0a19 	add.w	sl, r4, #25
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	6832      	ldr	r2, [r6, #0]
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dc26      	bgt.n	8008ec2 <_printf_common+0x96>
 8008e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e78:	1e13      	subs	r3, r2, #0
 8008e7a:	6822      	ldr	r2, [r4, #0]
 8008e7c:	bf18      	it	ne
 8008e7e:	2301      	movne	r3, #1
 8008e80:	0692      	lsls	r2, r2, #26
 8008e82:	d42b      	bmi.n	8008edc <_printf_common+0xb0>
 8008e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e88:	4649      	mov	r1, r9
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	47c0      	blx	r8
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d01e      	beq.n	8008ed0 <_printf_common+0xa4>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	68e5      	ldr	r5, [r4, #12]
 8008e96:	6832      	ldr	r2, [r6, #0]
 8008e98:	f003 0306 	and.w	r3, r3, #6
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	bf08      	it	eq
 8008ea0:	1aad      	subeq	r5, r5, r2
 8008ea2:	68a3      	ldr	r3, [r4, #8]
 8008ea4:	6922      	ldr	r2, [r4, #16]
 8008ea6:	bf0c      	ite	eq
 8008ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eac:	2500      	movne	r5, #0
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	bfc4      	itt	gt
 8008eb2:	1a9b      	subgt	r3, r3, r2
 8008eb4:	18ed      	addgt	r5, r5, r3
 8008eb6:	2600      	movs	r6, #0
 8008eb8:	341a      	adds	r4, #26
 8008eba:	42b5      	cmp	r5, r6
 8008ebc:	d11a      	bne.n	8008ef4 <_printf_common+0xc8>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	e008      	b.n	8008ed4 <_printf_common+0xa8>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	4638      	mov	r0, r7
 8008eca:	47c0      	blx	r8
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d103      	bne.n	8008ed8 <_printf_common+0xac>
 8008ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed8:	3501      	adds	r5, #1
 8008eda:	e7c6      	b.n	8008e6a <_printf_common+0x3e>
 8008edc:	18e1      	adds	r1, r4, r3
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	2030      	movs	r0, #48	; 0x30
 8008ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ee6:	4422      	add	r2, r4
 8008ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ef0:	3302      	adds	r3, #2
 8008ef2:	e7c7      	b.n	8008e84 <_printf_common+0x58>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4638      	mov	r0, r7
 8008efc:	47c0      	blx	r8
 8008efe:	3001      	adds	r0, #1
 8008f00:	d0e6      	beq.n	8008ed0 <_printf_common+0xa4>
 8008f02:	3601      	adds	r6, #1
 8008f04:	e7d9      	b.n	8008eba <_printf_common+0x8e>
	...

08008f08 <_printf_i>:
 8008f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0c:	7e0f      	ldrb	r7, [r1, #24]
 8008f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f10:	2f78      	cmp	r7, #120	; 0x78
 8008f12:	4691      	mov	r9, r2
 8008f14:	4680      	mov	r8, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	469a      	mov	sl, r3
 8008f1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f1e:	d807      	bhi.n	8008f30 <_printf_i+0x28>
 8008f20:	2f62      	cmp	r7, #98	; 0x62
 8008f22:	d80a      	bhi.n	8008f3a <_printf_i+0x32>
 8008f24:	2f00      	cmp	r7, #0
 8008f26:	f000 80d8 	beq.w	80090da <_printf_i+0x1d2>
 8008f2a:	2f58      	cmp	r7, #88	; 0x58
 8008f2c:	f000 80a3 	beq.w	8009076 <_printf_i+0x16e>
 8008f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f38:	e03a      	b.n	8008fb0 <_printf_i+0xa8>
 8008f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f3e:	2b15      	cmp	r3, #21
 8008f40:	d8f6      	bhi.n	8008f30 <_printf_i+0x28>
 8008f42:	a101      	add	r1, pc, #4	; (adr r1, 8008f48 <_printf_i+0x40>)
 8008f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f48:	08008fa1 	.word	0x08008fa1
 8008f4c:	08008fb5 	.word	0x08008fb5
 8008f50:	08008f31 	.word	0x08008f31
 8008f54:	08008f31 	.word	0x08008f31
 8008f58:	08008f31 	.word	0x08008f31
 8008f5c:	08008f31 	.word	0x08008f31
 8008f60:	08008fb5 	.word	0x08008fb5
 8008f64:	08008f31 	.word	0x08008f31
 8008f68:	08008f31 	.word	0x08008f31
 8008f6c:	08008f31 	.word	0x08008f31
 8008f70:	08008f31 	.word	0x08008f31
 8008f74:	080090c1 	.word	0x080090c1
 8008f78:	08008fe5 	.word	0x08008fe5
 8008f7c:	080090a3 	.word	0x080090a3
 8008f80:	08008f31 	.word	0x08008f31
 8008f84:	08008f31 	.word	0x08008f31
 8008f88:	080090e3 	.word	0x080090e3
 8008f8c:	08008f31 	.word	0x08008f31
 8008f90:	08008fe5 	.word	0x08008fe5
 8008f94:	08008f31 	.word	0x08008f31
 8008f98:	08008f31 	.word	0x08008f31
 8008f9c:	080090ab 	.word	0x080090ab
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	1d1a      	adds	r2, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	602a      	str	r2, [r5, #0]
 8008fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e0a3      	b.n	80090fc <_printf_i+0x1f4>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	6829      	ldr	r1, [r5, #0]
 8008fb8:	0606      	lsls	r6, r0, #24
 8008fba:	f101 0304 	add.w	r3, r1, #4
 8008fbe:	d50a      	bpl.n	8008fd6 <_printf_i+0xce>
 8008fc0:	680e      	ldr	r6, [r1, #0]
 8008fc2:	602b      	str	r3, [r5, #0]
 8008fc4:	2e00      	cmp	r6, #0
 8008fc6:	da03      	bge.n	8008fd0 <_printf_i+0xc8>
 8008fc8:	232d      	movs	r3, #45	; 0x2d
 8008fca:	4276      	negs	r6, r6
 8008fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd0:	485e      	ldr	r0, [pc, #376]	; (800914c <_printf_i+0x244>)
 8008fd2:	230a      	movs	r3, #10
 8008fd4:	e019      	b.n	800900a <_printf_i+0x102>
 8008fd6:	680e      	ldr	r6, [r1, #0]
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fde:	bf18      	it	ne
 8008fe0:	b236      	sxthne	r6, r6
 8008fe2:	e7ef      	b.n	8008fc4 <_printf_i+0xbc>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	6820      	ldr	r0, [r4, #0]
 8008fe8:	1d19      	adds	r1, r3, #4
 8008fea:	6029      	str	r1, [r5, #0]
 8008fec:	0601      	lsls	r1, r0, #24
 8008fee:	d501      	bpl.n	8008ff4 <_printf_i+0xec>
 8008ff0:	681e      	ldr	r6, [r3, #0]
 8008ff2:	e002      	b.n	8008ffa <_printf_i+0xf2>
 8008ff4:	0646      	lsls	r6, r0, #25
 8008ff6:	d5fb      	bpl.n	8008ff0 <_printf_i+0xe8>
 8008ff8:	881e      	ldrh	r6, [r3, #0]
 8008ffa:	4854      	ldr	r0, [pc, #336]	; (800914c <_printf_i+0x244>)
 8008ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8008ffe:	bf0c      	ite	eq
 8009000:	2308      	moveq	r3, #8
 8009002:	230a      	movne	r3, #10
 8009004:	2100      	movs	r1, #0
 8009006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800900a:	6865      	ldr	r5, [r4, #4]
 800900c:	60a5      	str	r5, [r4, #8]
 800900e:	2d00      	cmp	r5, #0
 8009010:	bfa2      	ittt	ge
 8009012:	6821      	ldrge	r1, [r4, #0]
 8009014:	f021 0104 	bicge.w	r1, r1, #4
 8009018:	6021      	strge	r1, [r4, #0]
 800901a:	b90e      	cbnz	r6, 8009020 <_printf_i+0x118>
 800901c:	2d00      	cmp	r5, #0
 800901e:	d04d      	beq.n	80090bc <_printf_i+0x1b4>
 8009020:	4615      	mov	r5, r2
 8009022:	fbb6 f1f3 	udiv	r1, r6, r3
 8009026:	fb03 6711 	mls	r7, r3, r1, r6
 800902a:	5dc7      	ldrb	r7, [r0, r7]
 800902c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009030:	4637      	mov	r7, r6
 8009032:	42bb      	cmp	r3, r7
 8009034:	460e      	mov	r6, r1
 8009036:	d9f4      	bls.n	8009022 <_printf_i+0x11a>
 8009038:	2b08      	cmp	r3, #8
 800903a:	d10b      	bne.n	8009054 <_printf_i+0x14c>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	07de      	lsls	r6, r3, #31
 8009040:	d508      	bpl.n	8009054 <_printf_i+0x14c>
 8009042:	6923      	ldr	r3, [r4, #16]
 8009044:	6861      	ldr	r1, [r4, #4]
 8009046:	4299      	cmp	r1, r3
 8009048:	bfde      	ittt	le
 800904a:	2330      	movle	r3, #48	; 0x30
 800904c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009050:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009054:	1b52      	subs	r2, r2, r5
 8009056:	6122      	str	r2, [r4, #16]
 8009058:	f8cd a000 	str.w	sl, [sp]
 800905c:	464b      	mov	r3, r9
 800905e:	aa03      	add	r2, sp, #12
 8009060:	4621      	mov	r1, r4
 8009062:	4640      	mov	r0, r8
 8009064:	f7ff fee2 	bl	8008e2c <_printf_common>
 8009068:	3001      	adds	r0, #1
 800906a:	d14c      	bne.n	8009106 <_printf_i+0x1fe>
 800906c:	f04f 30ff 	mov.w	r0, #4294967295
 8009070:	b004      	add	sp, #16
 8009072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009076:	4835      	ldr	r0, [pc, #212]	; (800914c <_printf_i+0x244>)
 8009078:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800907c:	6829      	ldr	r1, [r5, #0]
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	f851 6b04 	ldr.w	r6, [r1], #4
 8009084:	6029      	str	r1, [r5, #0]
 8009086:	061d      	lsls	r5, r3, #24
 8009088:	d514      	bpl.n	80090b4 <_printf_i+0x1ac>
 800908a:	07df      	lsls	r7, r3, #31
 800908c:	bf44      	itt	mi
 800908e:	f043 0320 	orrmi.w	r3, r3, #32
 8009092:	6023      	strmi	r3, [r4, #0]
 8009094:	b91e      	cbnz	r6, 800909e <_printf_i+0x196>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	f023 0320 	bic.w	r3, r3, #32
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	2310      	movs	r3, #16
 80090a0:	e7b0      	b.n	8009004 <_printf_i+0xfc>
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	f043 0320 	orr.w	r3, r3, #32
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	2378      	movs	r3, #120	; 0x78
 80090ac:	4828      	ldr	r0, [pc, #160]	; (8009150 <_printf_i+0x248>)
 80090ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090b2:	e7e3      	b.n	800907c <_printf_i+0x174>
 80090b4:	0659      	lsls	r1, r3, #25
 80090b6:	bf48      	it	mi
 80090b8:	b2b6      	uxthmi	r6, r6
 80090ba:	e7e6      	b.n	800908a <_printf_i+0x182>
 80090bc:	4615      	mov	r5, r2
 80090be:	e7bb      	b.n	8009038 <_printf_i+0x130>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	6826      	ldr	r6, [r4, #0]
 80090c4:	6961      	ldr	r1, [r4, #20]
 80090c6:	1d18      	adds	r0, r3, #4
 80090c8:	6028      	str	r0, [r5, #0]
 80090ca:	0635      	lsls	r5, r6, #24
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	d501      	bpl.n	80090d4 <_printf_i+0x1cc>
 80090d0:	6019      	str	r1, [r3, #0]
 80090d2:	e002      	b.n	80090da <_printf_i+0x1d2>
 80090d4:	0670      	lsls	r0, r6, #25
 80090d6:	d5fb      	bpl.n	80090d0 <_printf_i+0x1c8>
 80090d8:	8019      	strh	r1, [r3, #0]
 80090da:	2300      	movs	r3, #0
 80090dc:	6123      	str	r3, [r4, #16]
 80090de:	4615      	mov	r5, r2
 80090e0:	e7ba      	b.n	8009058 <_printf_i+0x150>
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	1d1a      	adds	r2, r3, #4
 80090e6:	602a      	str	r2, [r5, #0]
 80090e8:	681d      	ldr	r5, [r3, #0]
 80090ea:	6862      	ldr	r2, [r4, #4]
 80090ec:	2100      	movs	r1, #0
 80090ee:	4628      	mov	r0, r5
 80090f0:	f7f7 f876 	bl	80001e0 <memchr>
 80090f4:	b108      	cbz	r0, 80090fa <_printf_i+0x1f2>
 80090f6:	1b40      	subs	r0, r0, r5
 80090f8:	6060      	str	r0, [r4, #4]
 80090fa:	6863      	ldr	r3, [r4, #4]
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	2300      	movs	r3, #0
 8009100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009104:	e7a8      	b.n	8009058 <_printf_i+0x150>
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	462a      	mov	r2, r5
 800910a:	4649      	mov	r1, r9
 800910c:	4640      	mov	r0, r8
 800910e:	47d0      	blx	sl
 8009110:	3001      	adds	r0, #1
 8009112:	d0ab      	beq.n	800906c <_printf_i+0x164>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	079b      	lsls	r3, r3, #30
 8009118:	d413      	bmi.n	8009142 <_printf_i+0x23a>
 800911a:	68e0      	ldr	r0, [r4, #12]
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	4298      	cmp	r0, r3
 8009120:	bfb8      	it	lt
 8009122:	4618      	movlt	r0, r3
 8009124:	e7a4      	b.n	8009070 <_printf_i+0x168>
 8009126:	2301      	movs	r3, #1
 8009128:	4632      	mov	r2, r6
 800912a:	4649      	mov	r1, r9
 800912c:	4640      	mov	r0, r8
 800912e:	47d0      	blx	sl
 8009130:	3001      	adds	r0, #1
 8009132:	d09b      	beq.n	800906c <_printf_i+0x164>
 8009134:	3501      	adds	r5, #1
 8009136:	68e3      	ldr	r3, [r4, #12]
 8009138:	9903      	ldr	r1, [sp, #12]
 800913a:	1a5b      	subs	r3, r3, r1
 800913c:	42ab      	cmp	r3, r5
 800913e:	dcf2      	bgt.n	8009126 <_printf_i+0x21e>
 8009140:	e7eb      	b.n	800911a <_printf_i+0x212>
 8009142:	2500      	movs	r5, #0
 8009144:	f104 0619 	add.w	r6, r4, #25
 8009148:	e7f5      	b.n	8009136 <_printf_i+0x22e>
 800914a:	bf00      	nop
 800914c:	0800d85a 	.word	0x0800d85a
 8009150:	0800d86b 	.word	0x0800d86b

08009154 <sniprintf>:
 8009154:	b40c      	push	{r2, r3}
 8009156:	b530      	push	{r4, r5, lr}
 8009158:	4b17      	ldr	r3, [pc, #92]	; (80091b8 <sniprintf+0x64>)
 800915a:	1e0c      	subs	r4, r1, #0
 800915c:	681d      	ldr	r5, [r3, #0]
 800915e:	b09d      	sub	sp, #116	; 0x74
 8009160:	da08      	bge.n	8009174 <sniprintf+0x20>
 8009162:	238b      	movs	r3, #139	; 0x8b
 8009164:	602b      	str	r3, [r5, #0]
 8009166:	f04f 30ff 	mov.w	r0, #4294967295
 800916a:	b01d      	add	sp, #116	; 0x74
 800916c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009170:	b002      	add	sp, #8
 8009172:	4770      	bx	lr
 8009174:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009178:	f8ad 3014 	strh.w	r3, [sp, #20]
 800917c:	bf14      	ite	ne
 800917e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009182:	4623      	moveq	r3, r4
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	9307      	str	r3, [sp, #28]
 8009188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800918c:	9002      	str	r0, [sp, #8]
 800918e:	9006      	str	r0, [sp, #24]
 8009190:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009194:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009196:	ab21      	add	r3, sp, #132	; 0x84
 8009198:	a902      	add	r1, sp, #8
 800919a:	4628      	mov	r0, r5
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	f001 fb6b 	bl	800a878 <_svfiprintf_r>
 80091a2:	1c43      	adds	r3, r0, #1
 80091a4:	bfbc      	itt	lt
 80091a6:	238b      	movlt	r3, #139	; 0x8b
 80091a8:	602b      	strlt	r3, [r5, #0]
 80091aa:	2c00      	cmp	r4, #0
 80091ac:	d0dd      	beq.n	800916a <sniprintf+0x16>
 80091ae:	9b02      	ldr	r3, [sp, #8]
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
 80091b4:	e7d9      	b.n	800916a <sniprintf+0x16>
 80091b6:	bf00      	nop
 80091b8:	20000188 	.word	0x20000188

080091bc <quorem>:
 80091bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	6903      	ldr	r3, [r0, #16]
 80091c2:	690c      	ldr	r4, [r1, #16]
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	4607      	mov	r7, r0
 80091c8:	f2c0 8081 	blt.w	80092ce <quorem+0x112>
 80091cc:	3c01      	subs	r4, #1
 80091ce:	f101 0814 	add.w	r8, r1, #20
 80091d2:	f100 0514 	add.w	r5, r0, #20
 80091d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091e4:	3301      	adds	r3, #1
 80091e6:	429a      	cmp	r2, r3
 80091e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80091f4:	d331      	bcc.n	800925a <quorem+0x9e>
 80091f6:	f04f 0e00 	mov.w	lr, #0
 80091fa:	4640      	mov	r0, r8
 80091fc:	46ac      	mov	ip, r5
 80091fe:	46f2      	mov	sl, lr
 8009200:	f850 2b04 	ldr.w	r2, [r0], #4
 8009204:	b293      	uxth	r3, r2
 8009206:	fb06 e303 	mla	r3, r6, r3, lr
 800920a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800920e:	b29b      	uxth	r3, r3
 8009210:	ebaa 0303 	sub.w	r3, sl, r3
 8009214:	f8dc a000 	ldr.w	sl, [ip]
 8009218:	0c12      	lsrs	r2, r2, #16
 800921a:	fa13 f38a 	uxtah	r3, r3, sl
 800921e:	fb06 e202 	mla	r2, r6, r2, lr
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	9b00      	ldr	r3, [sp, #0]
 8009226:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800922a:	b292      	uxth	r2, r2
 800922c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009234:	f8bd 3000 	ldrh.w	r3, [sp]
 8009238:	4581      	cmp	r9, r0
 800923a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800923e:	f84c 3b04 	str.w	r3, [ip], #4
 8009242:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009246:	d2db      	bcs.n	8009200 <quorem+0x44>
 8009248:	f855 300b 	ldr.w	r3, [r5, fp]
 800924c:	b92b      	cbnz	r3, 800925a <quorem+0x9e>
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	3b04      	subs	r3, #4
 8009252:	429d      	cmp	r5, r3
 8009254:	461a      	mov	r2, r3
 8009256:	d32e      	bcc.n	80092b6 <quorem+0xfa>
 8009258:	613c      	str	r4, [r7, #16]
 800925a:	4638      	mov	r0, r7
 800925c:	f001 f8b8 	bl	800a3d0 <__mcmp>
 8009260:	2800      	cmp	r0, #0
 8009262:	db24      	blt.n	80092ae <quorem+0xf2>
 8009264:	3601      	adds	r6, #1
 8009266:	4628      	mov	r0, r5
 8009268:	f04f 0c00 	mov.w	ip, #0
 800926c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009270:	f8d0 e000 	ldr.w	lr, [r0]
 8009274:	b293      	uxth	r3, r2
 8009276:	ebac 0303 	sub.w	r3, ip, r3
 800927a:	0c12      	lsrs	r2, r2, #16
 800927c:	fa13 f38e 	uxtah	r3, r3, lr
 8009280:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009288:	b29b      	uxth	r3, r3
 800928a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800928e:	45c1      	cmp	r9, r8
 8009290:	f840 3b04 	str.w	r3, [r0], #4
 8009294:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009298:	d2e8      	bcs.n	800926c <quorem+0xb0>
 800929a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800929e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092a2:	b922      	cbnz	r2, 80092ae <quorem+0xf2>
 80092a4:	3b04      	subs	r3, #4
 80092a6:	429d      	cmp	r5, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	d30a      	bcc.n	80092c2 <quorem+0x106>
 80092ac:	613c      	str	r4, [r7, #16]
 80092ae:	4630      	mov	r0, r6
 80092b0:	b003      	add	sp, #12
 80092b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b6:	6812      	ldr	r2, [r2, #0]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	d1cc      	bne.n	8009258 <quorem+0x9c>
 80092be:	3c01      	subs	r4, #1
 80092c0:	e7c7      	b.n	8009252 <quorem+0x96>
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	3b04      	subs	r3, #4
 80092c6:	2a00      	cmp	r2, #0
 80092c8:	d1f0      	bne.n	80092ac <quorem+0xf0>
 80092ca:	3c01      	subs	r4, #1
 80092cc:	e7eb      	b.n	80092a6 <quorem+0xea>
 80092ce:	2000      	movs	r0, #0
 80092d0:	e7ee      	b.n	80092b0 <quorem+0xf4>
 80092d2:	0000      	movs	r0, r0
 80092d4:	0000      	movs	r0, r0
	...

080092d8 <_dtoa_r>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	ed2d 8b04 	vpush	{d8-d9}
 80092e0:	ec57 6b10 	vmov	r6, r7, d0
 80092e4:	b093      	sub	sp, #76	; 0x4c
 80092e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80092ec:	9106      	str	r1, [sp, #24]
 80092ee:	ee10 aa10 	vmov	sl, s0
 80092f2:	4604      	mov	r4, r0
 80092f4:	9209      	str	r2, [sp, #36]	; 0x24
 80092f6:	930c      	str	r3, [sp, #48]	; 0x30
 80092f8:	46bb      	mov	fp, r7
 80092fa:	b975      	cbnz	r5, 800931a <_dtoa_r+0x42>
 80092fc:	2010      	movs	r0, #16
 80092fe:	f000 fddd 	bl	8009ebc <malloc>
 8009302:	4602      	mov	r2, r0
 8009304:	6260      	str	r0, [r4, #36]	; 0x24
 8009306:	b920      	cbnz	r0, 8009312 <_dtoa_r+0x3a>
 8009308:	4ba7      	ldr	r3, [pc, #668]	; (80095a8 <_dtoa_r+0x2d0>)
 800930a:	21ea      	movs	r1, #234	; 0xea
 800930c:	48a7      	ldr	r0, [pc, #668]	; (80095ac <_dtoa_r+0x2d4>)
 800930e:	f001 fbc3 	bl	800aa98 <__assert_func>
 8009312:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009316:	6005      	str	r5, [r0, #0]
 8009318:	60c5      	str	r5, [r0, #12]
 800931a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800931c:	6819      	ldr	r1, [r3, #0]
 800931e:	b151      	cbz	r1, 8009336 <_dtoa_r+0x5e>
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	604a      	str	r2, [r1, #4]
 8009324:	2301      	movs	r3, #1
 8009326:	4093      	lsls	r3, r2
 8009328:	608b      	str	r3, [r1, #8]
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fe0e 	bl	8009f4c <_Bfree>
 8009330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	1e3b      	subs	r3, r7, #0
 8009338:	bfaa      	itet	ge
 800933a:	2300      	movge	r3, #0
 800933c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009340:	f8c8 3000 	strge.w	r3, [r8]
 8009344:	4b9a      	ldr	r3, [pc, #616]	; (80095b0 <_dtoa_r+0x2d8>)
 8009346:	bfbc      	itt	lt
 8009348:	2201      	movlt	r2, #1
 800934a:	f8c8 2000 	strlt.w	r2, [r8]
 800934e:	ea33 030b 	bics.w	r3, r3, fp
 8009352:	d11b      	bne.n	800938c <_dtoa_r+0xb4>
 8009354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009356:	f242 730f 	movw	r3, #9999	; 0x270f
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009360:	4333      	orrs	r3, r6
 8009362:	f000 8592 	beq.w	8009e8a <_dtoa_r+0xbb2>
 8009366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009368:	b963      	cbnz	r3, 8009384 <_dtoa_r+0xac>
 800936a:	4b92      	ldr	r3, [pc, #584]	; (80095b4 <_dtoa_r+0x2dc>)
 800936c:	e022      	b.n	80093b4 <_dtoa_r+0xdc>
 800936e:	4b92      	ldr	r3, [pc, #584]	; (80095b8 <_dtoa_r+0x2e0>)
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	3308      	adds	r3, #8
 8009374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	9801      	ldr	r0, [sp, #4]
 800937a:	b013      	add	sp, #76	; 0x4c
 800937c:	ecbd 8b04 	vpop	{d8-d9}
 8009380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009384:	4b8b      	ldr	r3, [pc, #556]	; (80095b4 <_dtoa_r+0x2dc>)
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	3303      	adds	r3, #3
 800938a:	e7f3      	b.n	8009374 <_dtoa_r+0x9c>
 800938c:	2200      	movs	r2, #0
 800938e:	2300      	movs	r3, #0
 8009390:	4650      	mov	r0, sl
 8009392:	4659      	mov	r1, fp
 8009394:	f7f7 fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8009398:	ec4b ab19 	vmov	d9, sl, fp
 800939c:	4680      	mov	r8, r0
 800939e:	b158      	cbz	r0, 80093b8 <_dtoa_r+0xe0>
 80093a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093a2:	2301      	movs	r3, #1
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 856b 	beq.w	8009e84 <_dtoa_r+0xbac>
 80093ae:	4883      	ldr	r0, [pc, #524]	; (80095bc <_dtoa_r+0x2e4>)
 80093b0:	6018      	str	r0, [r3, #0]
 80093b2:	1e43      	subs	r3, r0, #1
 80093b4:	9301      	str	r3, [sp, #4]
 80093b6:	e7df      	b.n	8009378 <_dtoa_r+0xa0>
 80093b8:	ec4b ab10 	vmov	d0, sl, fp
 80093bc:	aa10      	add	r2, sp, #64	; 0x40
 80093be:	a911      	add	r1, sp, #68	; 0x44
 80093c0:	4620      	mov	r0, r4
 80093c2:	f001 f8ab 	bl	800a51c <__d2b>
 80093c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80093ca:	ee08 0a10 	vmov	s16, r0
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	f000 8084 	beq.w	80094dc <_dtoa_r+0x204>
 80093d4:	ee19 3a90 	vmov	r3, s19
 80093d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80093e0:	4656      	mov	r6, sl
 80093e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80093e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80093ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80093ee:	4b74      	ldr	r3, [pc, #464]	; (80095c0 <_dtoa_r+0x2e8>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	4630      	mov	r0, r6
 80093f4:	4639      	mov	r1, r7
 80093f6:	f7f6 ff47 	bl	8000288 <__aeabi_dsub>
 80093fa:	a365      	add	r3, pc, #404	; (adr r3, 8009590 <_dtoa_r+0x2b8>)
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f7f7 f8fa 	bl	80005f8 <__aeabi_dmul>
 8009404:	a364      	add	r3, pc, #400	; (adr r3, 8009598 <_dtoa_r+0x2c0>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7f6 ff3f 	bl	800028c <__adddf3>
 800940e:	4606      	mov	r6, r0
 8009410:	4628      	mov	r0, r5
 8009412:	460f      	mov	r7, r1
 8009414:	f7f7 f886 	bl	8000524 <__aeabi_i2d>
 8009418:	a361      	add	r3, pc, #388	; (adr r3, 80095a0 <_dtoa_r+0x2c8>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f7 f8eb 	bl	80005f8 <__aeabi_dmul>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4630      	mov	r0, r6
 8009428:	4639      	mov	r1, r7
 800942a:	f7f6 ff2f 	bl	800028c <__adddf3>
 800942e:	4606      	mov	r6, r0
 8009430:	460f      	mov	r7, r1
 8009432:	f7f7 fb91 	bl	8000b58 <__aeabi_d2iz>
 8009436:	2200      	movs	r2, #0
 8009438:	9000      	str	r0, [sp, #0]
 800943a:	2300      	movs	r3, #0
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f7f7 fb4c 	bl	8000adc <__aeabi_dcmplt>
 8009444:	b150      	cbz	r0, 800945c <_dtoa_r+0x184>
 8009446:	9800      	ldr	r0, [sp, #0]
 8009448:	f7f7 f86c 	bl	8000524 <__aeabi_i2d>
 800944c:	4632      	mov	r2, r6
 800944e:	463b      	mov	r3, r7
 8009450:	f7f7 fb3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009454:	b910      	cbnz	r0, 800945c <_dtoa_r+0x184>
 8009456:	9b00      	ldr	r3, [sp, #0]
 8009458:	3b01      	subs	r3, #1
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	9b00      	ldr	r3, [sp, #0]
 800945e:	2b16      	cmp	r3, #22
 8009460:	d85a      	bhi.n	8009518 <_dtoa_r+0x240>
 8009462:	9a00      	ldr	r2, [sp, #0]
 8009464:	4b57      	ldr	r3, [pc, #348]	; (80095c4 <_dtoa_r+0x2ec>)
 8009466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	ec51 0b19 	vmov	r0, r1, d9
 8009472:	f7f7 fb33 	bl	8000adc <__aeabi_dcmplt>
 8009476:	2800      	cmp	r0, #0
 8009478:	d050      	beq.n	800951c <_dtoa_r+0x244>
 800947a:	9b00      	ldr	r3, [sp, #0]
 800947c:	3b01      	subs	r3, #1
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	2300      	movs	r3, #0
 8009482:	930b      	str	r3, [sp, #44]	; 0x2c
 8009484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009486:	1b5d      	subs	r5, r3, r5
 8009488:	1e6b      	subs	r3, r5, #1
 800948a:	9305      	str	r3, [sp, #20]
 800948c:	bf45      	ittet	mi
 800948e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009492:	9304      	strmi	r3, [sp, #16]
 8009494:	2300      	movpl	r3, #0
 8009496:	2300      	movmi	r3, #0
 8009498:	bf4c      	ite	mi
 800949a:	9305      	strmi	r3, [sp, #20]
 800949c:	9304      	strpl	r3, [sp, #16]
 800949e:	9b00      	ldr	r3, [sp, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	db3d      	blt.n	8009520 <_dtoa_r+0x248>
 80094a4:	9b05      	ldr	r3, [sp, #20]
 80094a6:	9a00      	ldr	r2, [sp, #0]
 80094a8:	920a      	str	r2, [sp, #40]	; 0x28
 80094aa:	4413      	add	r3, r2
 80094ac:	9305      	str	r3, [sp, #20]
 80094ae:	2300      	movs	r3, #0
 80094b0:	9307      	str	r3, [sp, #28]
 80094b2:	9b06      	ldr	r3, [sp, #24]
 80094b4:	2b09      	cmp	r3, #9
 80094b6:	f200 8089 	bhi.w	80095cc <_dtoa_r+0x2f4>
 80094ba:	2b05      	cmp	r3, #5
 80094bc:	bfc4      	itt	gt
 80094be:	3b04      	subgt	r3, #4
 80094c0:	9306      	strgt	r3, [sp, #24]
 80094c2:	9b06      	ldr	r3, [sp, #24]
 80094c4:	f1a3 0302 	sub.w	r3, r3, #2
 80094c8:	bfcc      	ite	gt
 80094ca:	2500      	movgt	r5, #0
 80094cc:	2501      	movle	r5, #1
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	f200 8087 	bhi.w	80095e2 <_dtoa_r+0x30a>
 80094d4:	e8df f003 	tbb	[pc, r3]
 80094d8:	59383a2d 	.word	0x59383a2d
 80094dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80094e0:	441d      	add	r5, r3
 80094e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80094e6:	2b20      	cmp	r3, #32
 80094e8:	bfc1      	itttt	gt
 80094ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80094f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80094f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80094fa:	bfda      	itte	le
 80094fc:	f1c3 0320 	rsble	r3, r3, #32
 8009500:	fa06 f003 	lslle.w	r0, r6, r3
 8009504:	4318      	orrgt	r0, r3
 8009506:	f7f6 fffd 	bl	8000504 <__aeabi_ui2d>
 800950a:	2301      	movs	r3, #1
 800950c:	4606      	mov	r6, r0
 800950e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009512:	3d01      	subs	r5, #1
 8009514:	930e      	str	r3, [sp, #56]	; 0x38
 8009516:	e76a      	b.n	80093ee <_dtoa_r+0x116>
 8009518:	2301      	movs	r3, #1
 800951a:	e7b2      	b.n	8009482 <_dtoa_r+0x1aa>
 800951c:	900b      	str	r0, [sp, #44]	; 0x2c
 800951e:	e7b1      	b.n	8009484 <_dtoa_r+0x1ac>
 8009520:	9b04      	ldr	r3, [sp, #16]
 8009522:	9a00      	ldr	r2, [sp, #0]
 8009524:	1a9b      	subs	r3, r3, r2
 8009526:	9304      	str	r3, [sp, #16]
 8009528:	4253      	negs	r3, r2
 800952a:	9307      	str	r3, [sp, #28]
 800952c:	2300      	movs	r3, #0
 800952e:	930a      	str	r3, [sp, #40]	; 0x28
 8009530:	e7bf      	b.n	80094b2 <_dtoa_r+0x1da>
 8009532:	2300      	movs	r3, #0
 8009534:	9308      	str	r3, [sp, #32]
 8009536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009538:	2b00      	cmp	r3, #0
 800953a:	dc55      	bgt.n	80095e8 <_dtoa_r+0x310>
 800953c:	2301      	movs	r3, #1
 800953e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009542:	461a      	mov	r2, r3
 8009544:	9209      	str	r2, [sp, #36]	; 0x24
 8009546:	e00c      	b.n	8009562 <_dtoa_r+0x28a>
 8009548:	2301      	movs	r3, #1
 800954a:	e7f3      	b.n	8009534 <_dtoa_r+0x25c>
 800954c:	2300      	movs	r3, #0
 800954e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009550:	9308      	str	r3, [sp, #32]
 8009552:	9b00      	ldr	r3, [sp, #0]
 8009554:	4413      	add	r3, r2
 8009556:	9302      	str	r3, [sp, #8]
 8009558:	3301      	adds	r3, #1
 800955a:	2b01      	cmp	r3, #1
 800955c:	9303      	str	r3, [sp, #12]
 800955e:	bfb8      	it	lt
 8009560:	2301      	movlt	r3, #1
 8009562:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009564:	2200      	movs	r2, #0
 8009566:	6042      	str	r2, [r0, #4]
 8009568:	2204      	movs	r2, #4
 800956a:	f102 0614 	add.w	r6, r2, #20
 800956e:	429e      	cmp	r6, r3
 8009570:	6841      	ldr	r1, [r0, #4]
 8009572:	d93d      	bls.n	80095f0 <_dtoa_r+0x318>
 8009574:	4620      	mov	r0, r4
 8009576:	f000 fca9 	bl	8009ecc <_Balloc>
 800957a:	9001      	str	r0, [sp, #4]
 800957c:	2800      	cmp	r0, #0
 800957e:	d13b      	bne.n	80095f8 <_dtoa_r+0x320>
 8009580:	4b11      	ldr	r3, [pc, #68]	; (80095c8 <_dtoa_r+0x2f0>)
 8009582:	4602      	mov	r2, r0
 8009584:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009588:	e6c0      	b.n	800930c <_dtoa_r+0x34>
 800958a:	2301      	movs	r3, #1
 800958c:	e7df      	b.n	800954e <_dtoa_r+0x276>
 800958e:	bf00      	nop
 8009590:	636f4361 	.word	0x636f4361
 8009594:	3fd287a7 	.word	0x3fd287a7
 8009598:	8b60c8b3 	.word	0x8b60c8b3
 800959c:	3fc68a28 	.word	0x3fc68a28
 80095a0:	509f79fb 	.word	0x509f79fb
 80095a4:	3fd34413 	.word	0x3fd34413
 80095a8:	0800d889 	.word	0x0800d889
 80095ac:	0800d8a0 	.word	0x0800d8a0
 80095b0:	7ff00000 	.word	0x7ff00000
 80095b4:	0800d885 	.word	0x0800d885
 80095b8:	0800d87c 	.word	0x0800d87c
 80095bc:	0800d859 	.word	0x0800d859
 80095c0:	3ff80000 	.word	0x3ff80000
 80095c4:	0800d990 	.word	0x0800d990
 80095c8:	0800d8fb 	.word	0x0800d8fb
 80095cc:	2501      	movs	r5, #1
 80095ce:	2300      	movs	r3, #0
 80095d0:	9306      	str	r3, [sp, #24]
 80095d2:	9508      	str	r5, [sp, #32]
 80095d4:	f04f 33ff 	mov.w	r3, #4294967295
 80095d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095dc:	2200      	movs	r2, #0
 80095de:	2312      	movs	r3, #18
 80095e0:	e7b0      	b.n	8009544 <_dtoa_r+0x26c>
 80095e2:	2301      	movs	r3, #1
 80095e4:	9308      	str	r3, [sp, #32]
 80095e6:	e7f5      	b.n	80095d4 <_dtoa_r+0x2fc>
 80095e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095ee:	e7b8      	b.n	8009562 <_dtoa_r+0x28a>
 80095f0:	3101      	adds	r1, #1
 80095f2:	6041      	str	r1, [r0, #4]
 80095f4:	0052      	lsls	r2, r2, #1
 80095f6:	e7b8      	b.n	800956a <_dtoa_r+0x292>
 80095f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095fa:	9a01      	ldr	r2, [sp, #4]
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	2b0e      	cmp	r3, #14
 8009602:	f200 809d 	bhi.w	8009740 <_dtoa_r+0x468>
 8009606:	2d00      	cmp	r5, #0
 8009608:	f000 809a 	beq.w	8009740 <_dtoa_r+0x468>
 800960c:	9b00      	ldr	r3, [sp, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	dd32      	ble.n	8009678 <_dtoa_r+0x3a0>
 8009612:	4ab7      	ldr	r2, [pc, #732]	; (80098f0 <_dtoa_r+0x618>)
 8009614:	f003 030f 	and.w	r3, r3, #15
 8009618:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800961c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009620:	9b00      	ldr	r3, [sp, #0]
 8009622:	05d8      	lsls	r0, r3, #23
 8009624:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009628:	d516      	bpl.n	8009658 <_dtoa_r+0x380>
 800962a:	4bb2      	ldr	r3, [pc, #712]	; (80098f4 <_dtoa_r+0x61c>)
 800962c:	ec51 0b19 	vmov	r0, r1, d9
 8009630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009634:	f7f7 f90a 	bl	800084c <__aeabi_ddiv>
 8009638:	f007 070f 	and.w	r7, r7, #15
 800963c:	4682      	mov	sl, r0
 800963e:	468b      	mov	fp, r1
 8009640:	2503      	movs	r5, #3
 8009642:	4eac      	ldr	r6, [pc, #688]	; (80098f4 <_dtoa_r+0x61c>)
 8009644:	b957      	cbnz	r7, 800965c <_dtoa_r+0x384>
 8009646:	4642      	mov	r2, r8
 8009648:	464b      	mov	r3, r9
 800964a:	4650      	mov	r0, sl
 800964c:	4659      	mov	r1, fp
 800964e:	f7f7 f8fd 	bl	800084c <__aeabi_ddiv>
 8009652:	4682      	mov	sl, r0
 8009654:	468b      	mov	fp, r1
 8009656:	e028      	b.n	80096aa <_dtoa_r+0x3d2>
 8009658:	2502      	movs	r5, #2
 800965a:	e7f2      	b.n	8009642 <_dtoa_r+0x36a>
 800965c:	07f9      	lsls	r1, r7, #31
 800965e:	d508      	bpl.n	8009672 <_dtoa_r+0x39a>
 8009660:	4640      	mov	r0, r8
 8009662:	4649      	mov	r1, r9
 8009664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009668:	f7f6 ffc6 	bl	80005f8 <__aeabi_dmul>
 800966c:	3501      	adds	r5, #1
 800966e:	4680      	mov	r8, r0
 8009670:	4689      	mov	r9, r1
 8009672:	107f      	asrs	r7, r7, #1
 8009674:	3608      	adds	r6, #8
 8009676:	e7e5      	b.n	8009644 <_dtoa_r+0x36c>
 8009678:	f000 809b 	beq.w	80097b2 <_dtoa_r+0x4da>
 800967c:	9b00      	ldr	r3, [sp, #0]
 800967e:	4f9d      	ldr	r7, [pc, #628]	; (80098f4 <_dtoa_r+0x61c>)
 8009680:	425e      	negs	r6, r3
 8009682:	4b9b      	ldr	r3, [pc, #620]	; (80098f0 <_dtoa_r+0x618>)
 8009684:	f006 020f 	and.w	r2, r6, #15
 8009688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	ec51 0b19 	vmov	r0, r1, d9
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	1136      	asrs	r6, r6, #4
 800969a:	4682      	mov	sl, r0
 800969c:	468b      	mov	fp, r1
 800969e:	2300      	movs	r3, #0
 80096a0:	2502      	movs	r5, #2
 80096a2:	2e00      	cmp	r6, #0
 80096a4:	d17a      	bne.n	800979c <_dtoa_r+0x4c4>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1d3      	bne.n	8009652 <_dtoa_r+0x37a>
 80096aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8082 	beq.w	80097b6 <_dtoa_r+0x4de>
 80096b2:	4b91      	ldr	r3, [pc, #580]	; (80098f8 <_dtoa_r+0x620>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	4650      	mov	r0, sl
 80096b8:	4659      	mov	r1, fp
 80096ba:	f7f7 fa0f 	bl	8000adc <__aeabi_dcmplt>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d079      	beq.n	80097b6 <_dtoa_r+0x4de>
 80096c2:	9b03      	ldr	r3, [sp, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d076      	beq.n	80097b6 <_dtoa_r+0x4de>
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dd36      	ble.n	800973c <_dtoa_r+0x464>
 80096ce:	9b00      	ldr	r3, [sp, #0]
 80096d0:	4650      	mov	r0, sl
 80096d2:	4659      	mov	r1, fp
 80096d4:	1e5f      	subs	r7, r3, #1
 80096d6:	2200      	movs	r2, #0
 80096d8:	4b88      	ldr	r3, [pc, #544]	; (80098fc <_dtoa_r+0x624>)
 80096da:	f7f6 ff8d 	bl	80005f8 <__aeabi_dmul>
 80096de:	9e02      	ldr	r6, [sp, #8]
 80096e0:	4682      	mov	sl, r0
 80096e2:	468b      	mov	fp, r1
 80096e4:	3501      	adds	r5, #1
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7f6 ff1c 	bl	8000524 <__aeabi_i2d>
 80096ec:	4652      	mov	r2, sl
 80096ee:	465b      	mov	r3, fp
 80096f0:	f7f6 ff82 	bl	80005f8 <__aeabi_dmul>
 80096f4:	4b82      	ldr	r3, [pc, #520]	; (8009900 <_dtoa_r+0x628>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	f7f6 fdc8 	bl	800028c <__adddf3>
 80096fc:	46d0      	mov	r8, sl
 80096fe:	46d9      	mov	r9, fp
 8009700:	4682      	mov	sl, r0
 8009702:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009706:	2e00      	cmp	r6, #0
 8009708:	d158      	bne.n	80097bc <_dtoa_r+0x4e4>
 800970a:	4b7e      	ldr	r3, [pc, #504]	; (8009904 <_dtoa_r+0x62c>)
 800970c:	2200      	movs	r2, #0
 800970e:	4640      	mov	r0, r8
 8009710:	4649      	mov	r1, r9
 8009712:	f7f6 fdb9 	bl	8000288 <__aeabi_dsub>
 8009716:	4652      	mov	r2, sl
 8009718:	465b      	mov	r3, fp
 800971a:	4680      	mov	r8, r0
 800971c:	4689      	mov	r9, r1
 800971e:	f7f7 f9fb 	bl	8000b18 <__aeabi_dcmpgt>
 8009722:	2800      	cmp	r0, #0
 8009724:	f040 8295 	bne.w	8009c52 <_dtoa_r+0x97a>
 8009728:	4652      	mov	r2, sl
 800972a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800972e:	4640      	mov	r0, r8
 8009730:	4649      	mov	r1, r9
 8009732:	f7f7 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8009736:	2800      	cmp	r0, #0
 8009738:	f040 8289 	bne.w	8009c4e <_dtoa_r+0x976>
 800973c:	ec5b ab19 	vmov	sl, fp, d9
 8009740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009742:	2b00      	cmp	r3, #0
 8009744:	f2c0 8148 	blt.w	80099d8 <_dtoa_r+0x700>
 8009748:	9a00      	ldr	r2, [sp, #0]
 800974a:	2a0e      	cmp	r2, #14
 800974c:	f300 8144 	bgt.w	80099d8 <_dtoa_r+0x700>
 8009750:	4b67      	ldr	r3, [pc, #412]	; (80098f0 <_dtoa_r+0x618>)
 8009752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009756:	e9d3 8900 	ldrd	r8, r9, [r3]
 800975a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800975c:	2b00      	cmp	r3, #0
 800975e:	f280 80d5 	bge.w	800990c <_dtoa_r+0x634>
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f300 80d1 	bgt.w	800990c <_dtoa_r+0x634>
 800976a:	f040 826f 	bne.w	8009c4c <_dtoa_r+0x974>
 800976e:	4b65      	ldr	r3, [pc, #404]	; (8009904 <_dtoa_r+0x62c>)
 8009770:	2200      	movs	r2, #0
 8009772:	4640      	mov	r0, r8
 8009774:	4649      	mov	r1, r9
 8009776:	f7f6 ff3f 	bl	80005f8 <__aeabi_dmul>
 800977a:	4652      	mov	r2, sl
 800977c:	465b      	mov	r3, fp
 800977e:	f7f7 f9c1 	bl	8000b04 <__aeabi_dcmpge>
 8009782:	9e03      	ldr	r6, [sp, #12]
 8009784:	4637      	mov	r7, r6
 8009786:	2800      	cmp	r0, #0
 8009788:	f040 8245 	bne.w	8009c16 <_dtoa_r+0x93e>
 800978c:	9d01      	ldr	r5, [sp, #4]
 800978e:	2331      	movs	r3, #49	; 0x31
 8009790:	f805 3b01 	strb.w	r3, [r5], #1
 8009794:	9b00      	ldr	r3, [sp, #0]
 8009796:	3301      	adds	r3, #1
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	e240      	b.n	8009c1e <_dtoa_r+0x946>
 800979c:	07f2      	lsls	r2, r6, #31
 800979e:	d505      	bpl.n	80097ac <_dtoa_r+0x4d4>
 80097a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097a4:	f7f6 ff28 	bl	80005f8 <__aeabi_dmul>
 80097a8:	3501      	adds	r5, #1
 80097aa:	2301      	movs	r3, #1
 80097ac:	1076      	asrs	r6, r6, #1
 80097ae:	3708      	adds	r7, #8
 80097b0:	e777      	b.n	80096a2 <_dtoa_r+0x3ca>
 80097b2:	2502      	movs	r5, #2
 80097b4:	e779      	b.n	80096aa <_dtoa_r+0x3d2>
 80097b6:	9f00      	ldr	r7, [sp, #0]
 80097b8:	9e03      	ldr	r6, [sp, #12]
 80097ba:	e794      	b.n	80096e6 <_dtoa_r+0x40e>
 80097bc:	9901      	ldr	r1, [sp, #4]
 80097be:	4b4c      	ldr	r3, [pc, #304]	; (80098f0 <_dtoa_r+0x618>)
 80097c0:	4431      	add	r1, r6
 80097c2:	910d      	str	r1, [sp, #52]	; 0x34
 80097c4:	9908      	ldr	r1, [sp, #32]
 80097c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097ce:	2900      	cmp	r1, #0
 80097d0:	d043      	beq.n	800985a <_dtoa_r+0x582>
 80097d2:	494d      	ldr	r1, [pc, #308]	; (8009908 <_dtoa_r+0x630>)
 80097d4:	2000      	movs	r0, #0
 80097d6:	f7f7 f839 	bl	800084c <__aeabi_ddiv>
 80097da:	4652      	mov	r2, sl
 80097dc:	465b      	mov	r3, fp
 80097de:	f7f6 fd53 	bl	8000288 <__aeabi_dsub>
 80097e2:	9d01      	ldr	r5, [sp, #4]
 80097e4:	4682      	mov	sl, r0
 80097e6:	468b      	mov	fp, r1
 80097e8:	4649      	mov	r1, r9
 80097ea:	4640      	mov	r0, r8
 80097ec:	f7f7 f9b4 	bl	8000b58 <__aeabi_d2iz>
 80097f0:	4606      	mov	r6, r0
 80097f2:	f7f6 fe97 	bl	8000524 <__aeabi_i2d>
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	4640      	mov	r0, r8
 80097fc:	4649      	mov	r1, r9
 80097fe:	f7f6 fd43 	bl	8000288 <__aeabi_dsub>
 8009802:	3630      	adds	r6, #48	; 0x30
 8009804:	f805 6b01 	strb.w	r6, [r5], #1
 8009808:	4652      	mov	r2, sl
 800980a:	465b      	mov	r3, fp
 800980c:	4680      	mov	r8, r0
 800980e:	4689      	mov	r9, r1
 8009810:	f7f7 f964 	bl	8000adc <__aeabi_dcmplt>
 8009814:	2800      	cmp	r0, #0
 8009816:	d163      	bne.n	80098e0 <_dtoa_r+0x608>
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	4936      	ldr	r1, [pc, #216]	; (80098f8 <_dtoa_r+0x620>)
 800981e:	2000      	movs	r0, #0
 8009820:	f7f6 fd32 	bl	8000288 <__aeabi_dsub>
 8009824:	4652      	mov	r2, sl
 8009826:	465b      	mov	r3, fp
 8009828:	f7f7 f958 	bl	8000adc <__aeabi_dcmplt>
 800982c:	2800      	cmp	r0, #0
 800982e:	f040 80b5 	bne.w	800999c <_dtoa_r+0x6c4>
 8009832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009834:	429d      	cmp	r5, r3
 8009836:	d081      	beq.n	800973c <_dtoa_r+0x464>
 8009838:	4b30      	ldr	r3, [pc, #192]	; (80098fc <_dtoa_r+0x624>)
 800983a:	2200      	movs	r2, #0
 800983c:	4650      	mov	r0, sl
 800983e:	4659      	mov	r1, fp
 8009840:	f7f6 feda 	bl	80005f8 <__aeabi_dmul>
 8009844:	4b2d      	ldr	r3, [pc, #180]	; (80098fc <_dtoa_r+0x624>)
 8009846:	4682      	mov	sl, r0
 8009848:	468b      	mov	fp, r1
 800984a:	4640      	mov	r0, r8
 800984c:	4649      	mov	r1, r9
 800984e:	2200      	movs	r2, #0
 8009850:	f7f6 fed2 	bl	80005f8 <__aeabi_dmul>
 8009854:	4680      	mov	r8, r0
 8009856:	4689      	mov	r9, r1
 8009858:	e7c6      	b.n	80097e8 <_dtoa_r+0x510>
 800985a:	4650      	mov	r0, sl
 800985c:	4659      	mov	r1, fp
 800985e:	f7f6 fecb 	bl	80005f8 <__aeabi_dmul>
 8009862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009864:	9d01      	ldr	r5, [sp, #4]
 8009866:	930f      	str	r3, [sp, #60]	; 0x3c
 8009868:	4682      	mov	sl, r0
 800986a:	468b      	mov	fp, r1
 800986c:	4649      	mov	r1, r9
 800986e:	4640      	mov	r0, r8
 8009870:	f7f7 f972 	bl	8000b58 <__aeabi_d2iz>
 8009874:	4606      	mov	r6, r0
 8009876:	f7f6 fe55 	bl	8000524 <__aeabi_i2d>
 800987a:	3630      	adds	r6, #48	; 0x30
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4640      	mov	r0, r8
 8009882:	4649      	mov	r1, r9
 8009884:	f7f6 fd00 	bl	8000288 <__aeabi_dsub>
 8009888:	f805 6b01 	strb.w	r6, [r5], #1
 800988c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800988e:	429d      	cmp	r5, r3
 8009890:	4680      	mov	r8, r0
 8009892:	4689      	mov	r9, r1
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	d124      	bne.n	80098e4 <_dtoa_r+0x60c>
 800989a:	4b1b      	ldr	r3, [pc, #108]	; (8009908 <_dtoa_r+0x630>)
 800989c:	4650      	mov	r0, sl
 800989e:	4659      	mov	r1, fp
 80098a0:	f7f6 fcf4 	bl	800028c <__adddf3>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f7 f934 	bl	8000b18 <__aeabi_dcmpgt>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d173      	bne.n	800999c <_dtoa_r+0x6c4>
 80098b4:	4652      	mov	r2, sl
 80098b6:	465b      	mov	r3, fp
 80098b8:	4913      	ldr	r1, [pc, #76]	; (8009908 <_dtoa_r+0x630>)
 80098ba:	2000      	movs	r0, #0
 80098bc:	f7f6 fce4 	bl	8000288 <__aeabi_dsub>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4640      	mov	r0, r8
 80098c6:	4649      	mov	r1, r9
 80098c8:	f7f7 f908 	bl	8000adc <__aeabi_dcmplt>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f43f af35 	beq.w	800973c <_dtoa_r+0x464>
 80098d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80098d4:	1e6b      	subs	r3, r5, #1
 80098d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80098d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098dc:	2b30      	cmp	r3, #48	; 0x30
 80098de:	d0f8      	beq.n	80098d2 <_dtoa_r+0x5fa>
 80098e0:	9700      	str	r7, [sp, #0]
 80098e2:	e049      	b.n	8009978 <_dtoa_r+0x6a0>
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <_dtoa_r+0x624>)
 80098e6:	f7f6 fe87 	bl	80005f8 <__aeabi_dmul>
 80098ea:	4680      	mov	r8, r0
 80098ec:	4689      	mov	r9, r1
 80098ee:	e7bd      	b.n	800986c <_dtoa_r+0x594>
 80098f0:	0800d990 	.word	0x0800d990
 80098f4:	0800d968 	.word	0x0800d968
 80098f8:	3ff00000 	.word	0x3ff00000
 80098fc:	40240000 	.word	0x40240000
 8009900:	401c0000 	.word	0x401c0000
 8009904:	40140000 	.word	0x40140000
 8009908:	3fe00000 	.word	0x3fe00000
 800990c:	9d01      	ldr	r5, [sp, #4]
 800990e:	4656      	mov	r6, sl
 8009910:	465f      	mov	r7, fp
 8009912:	4642      	mov	r2, r8
 8009914:	464b      	mov	r3, r9
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f6 ff97 	bl	800084c <__aeabi_ddiv>
 800991e:	f7f7 f91b 	bl	8000b58 <__aeabi_d2iz>
 8009922:	4682      	mov	sl, r0
 8009924:	f7f6 fdfe 	bl	8000524 <__aeabi_i2d>
 8009928:	4642      	mov	r2, r8
 800992a:	464b      	mov	r3, r9
 800992c:	f7f6 fe64 	bl	80005f8 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800993c:	f7f6 fca4 	bl	8000288 <__aeabi_dsub>
 8009940:	f805 6b01 	strb.w	r6, [r5], #1
 8009944:	9e01      	ldr	r6, [sp, #4]
 8009946:	9f03      	ldr	r7, [sp, #12]
 8009948:	1bae      	subs	r6, r5, r6
 800994a:	42b7      	cmp	r7, r6
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	d135      	bne.n	80099be <_dtoa_r+0x6e6>
 8009952:	f7f6 fc9b 	bl	800028c <__adddf3>
 8009956:	4642      	mov	r2, r8
 8009958:	464b      	mov	r3, r9
 800995a:	4606      	mov	r6, r0
 800995c:	460f      	mov	r7, r1
 800995e:	f7f7 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8009962:	b9d0      	cbnz	r0, 800999a <_dtoa_r+0x6c2>
 8009964:	4642      	mov	r2, r8
 8009966:	464b      	mov	r3, r9
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	f7f7 f8ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009970:	b110      	cbz	r0, 8009978 <_dtoa_r+0x6a0>
 8009972:	f01a 0f01 	tst.w	sl, #1
 8009976:	d110      	bne.n	800999a <_dtoa_r+0x6c2>
 8009978:	4620      	mov	r0, r4
 800997a:	ee18 1a10 	vmov	r1, s16
 800997e:	f000 fae5 	bl	8009f4c <_Bfree>
 8009982:	2300      	movs	r3, #0
 8009984:	9800      	ldr	r0, [sp, #0]
 8009986:	702b      	strb	r3, [r5, #0]
 8009988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800998a:	3001      	adds	r0, #1
 800998c:	6018      	str	r0, [r3, #0]
 800998e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009990:	2b00      	cmp	r3, #0
 8009992:	f43f acf1 	beq.w	8009378 <_dtoa_r+0xa0>
 8009996:	601d      	str	r5, [r3, #0]
 8009998:	e4ee      	b.n	8009378 <_dtoa_r+0xa0>
 800999a:	9f00      	ldr	r7, [sp, #0]
 800999c:	462b      	mov	r3, r5
 800999e:	461d      	mov	r5, r3
 80099a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099a4:	2a39      	cmp	r2, #57	; 0x39
 80099a6:	d106      	bne.n	80099b6 <_dtoa_r+0x6de>
 80099a8:	9a01      	ldr	r2, [sp, #4]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d1f7      	bne.n	800999e <_dtoa_r+0x6c6>
 80099ae:	9901      	ldr	r1, [sp, #4]
 80099b0:	2230      	movs	r2, #48	; 0x30
 80099b2:	3701      	adds	r7, #1
 80099b4:	700a      	strb	r2, [r1, #0]
 80099b6:	781a      	ldrb	r2, [r3, #0]
 80099b8:	3201      	adds	r2, #1
 80099ba:	701a      	strb	r2, [r3, #0]
 80099bc:	e790      	b.n	80098e0 <_dtoa_r+0x608>
 80099be:	4ba6      	ldr	r3, [pc, #664]	; (8009c58 <_dtoa_r+0x980>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	f7f6 fe19 	bl	80005f8 <__aeabi_dmul>
 80099c6:	2200      	movs	r2, #0
 80099c8:	2300      	movs	r3, #0
 80099ca:	4606      	mov	r6, r0
 80099cc:	460f      	mov	r7, r1
 80099ce:	f7f7 f87b 	bl	8000ac8 <__aeabi_dcmpeq>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d09d      	beq.n	8009912 <_dtoa_r+0x63a>
 80099d6:	e7cf      	b.n	8009978 <_dtoa_r+0x6a0>
 80099d8:	9a08      	ldr	r2, [sp, #32]
 80099da:	2a00      	cmp	r2, #0
 80099dc:	f000 80d7 	beq.w	8009b8e <_dtoa_r+0x8b6>
 80099e0:	9a06      	ldr	r2, [sp, #24]
 80099e2:	2a01      	cmp	r2, #1
 80099e4:	f300 80ba 	bgt.w	8009b5c <_dtoa_r+0x884>
 80099e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099ea:	2a00      	cmp	r2, #0
 80099ec:	f000 80b2 	beq.w	8009b54 <_dtoa_r+0x87c>
 80099f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80099f4:	9e07      	ldr	r6, [sp, #28]
 80099f6:	9d04      	ldr	r5, [sp, #16]
 80099f8:	9a04      	ldr	r2, [sp, #16]
 80099fa:	441a      	add	r2, r3
 80099fc:	9204      	str	r2, [sp, #16]
 80099fe:	9a05      	ldr	r2, [sp, #20]
 8009a00:	2101      	movs	r1, #1
 8009a02:	441a      	add	r2, r3
 8009a04:	4620      	mov	r0, r4
 8009a06:	9205      	str	r2, [sp, #20]
 8009a08:	f000 fb58 	bl	800a0bc <__i2b>
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	dd0c      	ble.n	8009a2c <_dtoa_r+0x754>
 8009a12:	9b05      	ldr	r3, [sp, #20]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	dd09      	ble.n	8009a2c <_dtoa_r+0x754>
 8009a18:	42ab      	cmp	r3, r5
 8009a1a:	9a04      	ldr	r2, [sp, #16]
 8009a1c:	bfa8      	it	ge
 8009a1e:	462b      	movge	r3, r5
 8009a20:	1ad2      	subs	r2, r2, r3
 8009a22:	9204      	str	r2, [sp, #16]
 8009a24:	9a05      	ldr	r2, [sp, #20]
 8009a26:	1aed      	subs	r5, r5, r3
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	9305      	str	r3, [sp, #20]
 8009a2c:	9b07      	ldr	r3, [sp, #28]
 8009a2e:	b31b      	cbz	r3, 8009a78 <_dtoa_r+0x7a0>
 8009a30:	9b08      	ldr	r3, [sp, #32]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 80af 	beq.w	8009b96 <_dtoa_r+0x8be>
 8009a38:	2e00      	cmp	r6, #0
 8009a3a:	dd13      	ble.n	8009a64 <_dtoa_r+0x78c>
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	4632      	mov	r2, r6
 8009a40:	4620      	mov	r0, r4
 8009a42:	f000 fbfb 	bl	800a23c <__pow5mult>
 8009a46:	ee18 2a10 	vmov	r2, s16
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f000 fb4a 	bl	800a0e8 <__multiply>
 8009a54:	ee18 1a10 	vmov	r1, s16
 8009a58:	4680      	mov	r8, r0
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f000 fa76 	bl	8009f4c <_Bfree>
 8009a60:	ee08 8a10 	vmov	s16, r8
 8009a64:	9b07      	ldr	r3, [sp, #28]
 8009a66:	1b9a      	subs	r2, r3, r6
 8009a68:	d006      	beq.n	8009a78 <_dtoa_r+0x7a0>
 8009a6a:	ee18 1a10 	vmov	r1, s16
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 fbe4 	bl	800a23c <__pow5mult>
 8009a74:	ee08 0a10 	vmov	s16, r0
 8009a78:	2101      	movs	r1, #1
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 fb1e 	bl	800a0bc <__i2b>
 8009a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	4606      	mov	r6, r0
 8009a86:	f340 8088 	ble.w	8009b9a <_dtoa_r+0x8c2>
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4601      	mov	r1, r0
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 fbd4 	bl	800a23c <__pow5mult>
 8009a94:	9b06      	ldr	r3, [sp, #24]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	4606      	mov	r6, r0
 8009a9a:	f340 8081 	ble.w	8009ba0 <_dtoa_r+0x8c8>
 8009a9e:	f04f 0800 	mov.w	r8, #0
 8009aa2:	6933      	ldr	r3, [r6, #16]
 8009aa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009aa8:	6918      	ldr	r0, [r3, #16]
 8009aaa:	f000 fab7 	bl	800a01c <__hi0bits>
 8009aae:	f1c0 0020 	rsb	r0, r0, #32
 8009ab2:	9b05      	ldr	r3, [sp, #20]
 8009ab4:	4418      	add	r0, r3
 8009ab6:	f010 001f 	ands.w	r0, r0, #31
 8009aba:	f000 8092 	beq.w	8009be2 <_dtoa_r+0x90a>
 8009abe:	f1c0 0320 	rsb	r3, r0, #32
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	f340 808a 	ble.w	8009bdc <_dtoa_r+0x904>
 8009ac8:	f1c0 001c 	rsb	r0, r0, #28
 8009acc:	9b04      	ldr	r3, [sp, #16]
 8009ace:	4403      	add	r3, r0
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	9b05      	ldr	r3, [sp, #20]
 8009ad4:	4403      	add	r3, r0
 8009ad6:	4405      	add	r5, r0
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dd07      	ble.n	8009af0 <_dtoa_r+0x818>
 8009ae0:	ee18 1a10 	vmov	r1, s16
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 fc02 	bl	800a2f0 <__lshift>
 8009aec:	ee08 0a10 	vmov	s16, r0
 8009af0:	9b05      	ldr	r3, [sp, #20]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	dd05      	ble.n	8009b02 <_dtoa_r+0x82a>
 8009af6:	4631      	mov	r1, r6
 8009af8:	461a      	mov	r2, r3
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 fbf8 	bl	800a2f0 <__lshift>
 8009b00:	4606      	mov	r6, r0
 8009b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d06e      	beq.n	8009be6 <_dtoa_r+0x90e>
 8009b08:	ee18 0a10 	vmov	r0, s16
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	f000 fc5f 	bl	800a3d0 <__mcmp>
 8009b12:	2800      	cmp	r0, #0
 8009b14:	da67      	bge.n	8009be6 <_dtoa_r+0x90e>
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	ee18 1a10 	vmov	r1, s16
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	220a      	movs	r2, #10
 8009b22:	2300      	movs	r3, #0
 8009b24:	4620      	mov	r0, r4
 8009b26:	f000 fa33 	bl	8009f90 <__multadd>
 8009b2a:	9b08      	ldr	r3, [sp, #32]
 8009b2c:	ee08 0a10 	vmov	s16, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 81b1 	beq.w	8009e98 <_dtoa_r+0xbc0>
 8009b36:	2300      	movs	r3, #0
 8009b38:	4639      	mov	r1, r7
 8009b3a:	220a      	movs	r2, #10
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 fa27 	bl	8009f90 <__multadd>
 8009b42:	9b02      	ldr	r3, [sp, #8]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	4607      	mov	r7, r0
 8009b48:	f300 808e 	bgt.w	8009c68 <_dtoa_r+0x990>
 8009b4c:	9b06      	ldr	r3, [sp, #24]
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	dc51      	bgt.n	8009bf6 <_dtoa_r+0x91e>
 8009b52:	e089      	b.n	8009c68 <_dtoa_r+0x990>
 8009b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b5a:	e74b      	b.n	80099f4 <_dtoa_r+0x71c>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	1e5e      	subs	r6, r3, #1
 8009b60:	9b07      	ldr	r3, [sp, #28]
 8009b62:	42b3      	cmp	r3, r6
 8009b64:	bfbf      	itttt	lt
 8009b66:	9b07      	ldrlt	r3, [sp, #28]
 8009b68:	9607      	strlt	r6, [sp, #28]
 8009b6a:	1af2      	sublt	r2, r6, r3
 8009b6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009b6e:	bfb6      	itet	lt
 8009b70:	189b      	addlt	r3, r3, r2
 8009b72:	1b9e      	subge	r6, r3, r6
 8009b74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	bfb8      	it	lt
 8009b7a:	2600      	movlt	r6, #0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bfb7      	itett	lt
 8009b80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009b84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009b88:	1a9d      	sublt	r5, r3, r2
 8009b8a:	2300      	movlt	r3, #0
 8009b8c:	e734      	b.n	80099f8 <_dtoa_r+0x720>
 8009b8e:	9e07      	ldr	r6, [sp, #28]
 8009b90:	9d04      	ldr	r5, [sp, #16]
 8009b92:	9f08      	ldr	r7, [sp, #32]
 8009b94:	e73b      	b.n	8009a0e <_dtoa_r+0x736>
 8009b96:	9a07      	ldr	r2, [sp, #28]
 8009b98:	e767      	b.n	8009a6a <_dtoa_r+0x792>
 8009b9a:	9b06      	ldr	r3, [sp, #24]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	dc18      	bgt.n	8009bd2 <_dtoa_r+0x8fa>
 8009ba0:	f1ba 0f00 	cmp.w	sl, #0
 8009ba4:	d115      	bne.n	8009bd2 <_dtoa_r+0x8fa>
 8009ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009baa:	b993      	cbnz	r3, 8009bd2 <_dtoa_r+0x8fa>
 8009bac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bb0:	0d1b      	lsrs	r3, r3, #20
 8009bb2:	051b      	lsls	r3, r3, #20
 8009bb4:	b183      	cbz	r3, 8009bd8 <_dtoa_r+0x900>
 8009bb6:	9b04      	ldr	r3, [sp, #16]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	9304      	str	r3, [sp, #16]
 8009bbc:	9b05      	ldr	r3, [sp, #20]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	9305      	str	r3, [sp, #20]
 8009bc2:	f04f 0801 	mov.w	r8, #1
 8009bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f47f af6a 	bne.w	8009aa2 <_dtoa_r+0x7ca>
 8009bce:	2001      	movs	r0, #1
 8009bd0:	e76f      	b.n	8009ab2 <_dtoa_r+0x7da>
 8009bd2:	f04f 0800 	mov.w	r8, #0
 8009bd6:	e7f6      	b.n	8009bc6 <_dtoa_r+0x8ee>
 8009bd8:	4698      	mov	r8, r3
 8009bda:	e7f4      	b.n	8009bc6 <_dtoa_r+0x8ee>
 8009bdc:	f43f af7d 	beq.w	8009ada <_dtoa_r+0x802>
 8009be0:	4618      	mov	r0, r3
 8009be2:	301c      	adds	r0, #28
 8009be4:	e772      	b.n	8009acc <_dtoa_r+0x7f4>
 8009be6:	9b03      	ldr	r3, [sp, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dc37      	bgt.n	8009c5c <_dtoa_r+0x984>
 8009bec:	9b06      	ldr	r3, [sp, #24]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	dd34      	ble.n	8009c5c <_dtoa_r+0x984>
 8009bf2:	9b03      	ldr	r3, [sp, #12]
 8009bf4:	9302      	str	r3, [sp, #8]
 8009bf6:	9b02      	ldr	r3, [sp, #8]
 8009bf8:	b96b      	cbnz	r3, 8009c16 <_dtoa_r+0x93e>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	2205      	movs	r2, #5
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 f9c6 	bl	8009f90 <__multadd>
 8009c04:	4601      	mov	r1, r0
 8009c06:	4606      	mov	r6, r0
 8009c08:	ee18 0a10 	vmov	r0, s16
 8009c0c:	f000 fbe0 	bl	800a3d0 <__mcmp>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f73f adbb 	bgt.w	800978c <_dtoa_r+0x4b4>
 8009c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c18:	9d01      	ldr	r5, [sp, #4]
 8009c1a:	43db      	mvns	r3, r3
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	4631      	mov	r1, r6
 8009c24:	4620      	mov	r0, r4
 8009c26:	f000 f991 	bl	8009f4c <_Bfree>
 8009c2a:	2f00      	cmp	r7, #0
 8009c2c:	f43f aea4 	beq.w	8009978 <_dtoa_r+0x6a0>
 8009c30:	f1b8 0f00 	cmp.w	r8, #0
 8009c34:	d005      	beq.n	8009c42 <_dtoa_r+0x96a>
 8009c36:	45b8      	cmp	r8, r7
 8009c38:	d003      	beq.n	8009c42 <_dtoa_r+0x96a>
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f000 f985 	bl	8009f4c <_Bfree>
 8009c42:	4639      	mov	r1, r7
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 f981 	bl	8009f4c <_Bfree>
 8009c4a:	e695      	b.n	8009978 <_dtoa_r+0x6a0>
 8009c4c:	2600      	movs	r6, #0
 8009c4e:	4637      	mov	r7, r6
 8009c50:	e7e1      	b.n	8009c16 <_dtoa_r+0x93e>
 8009c52:	9700      	str	r7, [sp, #0]
 8009c54:	4637      	mov	r7, r6
 8009c56:	e599      	b.n	800978c <_dtoa_r+0x4b4>
 8009c58:	40240000 	.word	0x40240000
 8009c5c:	9b08      	ldr	r3, [sp, #32]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 80ca 	beq.w	8009df8 <_dtoa_r+0xb20>
 8009c64:	9b03      	ldr	r3, [sp, #12]
 8009c66:	9302      	str	r3, [sp, #8]
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	dd05      	ble.n	8009c78 <_dtoa_r+0x9a0>
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	462a      	mov	r2, r5
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fb3d 	bl	800a2f0 <__lshift>
 8009c76:	4607      	mov	r7, r0
 8009c78:	f1b8 0f00 	cmp.w	r8, #0
 8009c7c:	d05b      	beq.n	8009d36 <_dtoa_r+0xa5e>
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 f923 	bl	8009ecc <_Balloc>
 8009c86:	4605      	mov	r5, r0
 8009c88:	b928      	cbnz	r0, 8009c96 <_dtoa_r+0x9be>
 8009c8a:	4b87      	ldr	r3, [pc, #540]	; (8009ea8 <_dtoa_r+0xbd0>)
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c92:	f7ff bb3b 	b.w	800930c <_dtoa_r+0x34>
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	3202      	adds	r2, #2
 8009c9a:	0092      	lsls	r2, r2, #2
 8009c9c:	f107 010c 	add.w	r1, r7, #12
 8009ca0:	300c      	adds	r0, #12
 8009ca2:	f7fe fdd7 	bl	8008854 <memcpy>
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fb20 	bl	800a2f0 <__lshift>
 8009cb0:	9b01      	ldr	r3, [sp, #4]
 8009cb2:	f103 0901 	add.w	r9, r3, #1
 8009cb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009cba:	4413      	add	r3, r2
 8009cbc:	9305      	str	r3, [sp, #20]
 8009cbe:	f00a 0301 	and.w	r3, sl, #1
 8009cc2:	46b8      	mov	r8, r7
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	4631      	mov	r1, r6
 8009cca:	ee18 0a10 	vmov	r0, s16
 8009cce:	f7ff fa75 	bl	80091bc <quorem>
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	9002      	str	r0, [sp, #8]
 8009cd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009cda:	ee18 0a10 	vmov	r0, s16
 8009cde:	f000 fb77 	bl	800a3d0 <__mcmp>
 8009ce2:	463a      	mov	r2, r7
 8009ce4:	9003      	str	r0, [sp, #12]
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 fb8d 	bl	800a408 <__mdiff>
 8009cee:	68c2      	ldr	r2, [r0, #12]
 8009cf0:	f109 3bff 	add.w	fp, r9, #4294967295
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	bb02      	cbnz	r2, 8009d3a <_dtoa_r+0xa62>
 8009cf8:	4601      	mov	r1, r0
 8009cfa:	ee18 0a10 	vmov	r0, s16
 8009cfe:	f000 fb67 	bl	800a3d0 <__mcmp>
 8009d02:	4602      	mov	r2, r0
 8009d04:	4629      	mov	r1, r5
 8009d06:	4620      	mov	r0, r4
 8009d08:	9207      	str	r2, [sp, #28]
 8009d0a:	f000 f91f 	bl	8009f4c <_Bfree>
 8009d0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009d12:	ea43 0102 	orr.w	r1, r3, r2
 8009d16:	9b04      	ldr	r3, [sp, #16]
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	464d      	mov	r5, r9
 8009d1c:	d10f      	bne.n	8009d3e <_dtoa_r+0xa66>
 8009d1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d22:	d02a      	beq.n	8009d7a <_dtoa_r+0xaa2>
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dd02      	ble.n	8009d30 <_dtoa_r+0xa58>
 8009d2a:	9b02      	ldr	r3, [sp, #8]
 8009d2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009d30:	f88b a000 	strb.w	sl, [fp]
 8009d34:	e775      	b.n	8009c22 <_dtoa_r+0x94a>
 8009d36:	4638      	mov	r0, r7
 8009d38:	e7ba      	b.n	8009cb0 <_dtoa_r+0x9d8>
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	e7e2      	b.n	8009d04 <_dtoa_r+0xa2c>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	db04      	blt.n	8009d4e <_dtoa_r+0xa76>
 8009d44:	9906      	ldr	r1, [sp, #24]
 8009d46:	430b      	orrs	r3, r1
 8009d48:	9904      	ldr	r1, [sp, #16]
 8009d4a:	430b      	orrs	r3, r1
 8009d4c:	d122      	bne.n	8009d94 <_dtoa_r+0xabc>
 8009d4e:	2a00      	cmp	r2, #0
 8009d50:	ddee      	ble.n	8009d30 <_dtoa_r+0xa58>
 8009d52:	ee18 1a10 	vmov	r1, s16
 8009d56:	2201      	movs	r2, #1
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 fac9 	bl	800a2f0 <__lshift>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	ee08 0a10 	vmov	s16, r0
 8009d64:	f000 fb34 	bl	800a3d0 <__mcmp>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	dc03      	bgt.n	8009d74 <_dtoa_r+0xa9c>
 8009d6c:	d1e0      	bne.n	8009d30 <_dtoa_r+0xa58>
 8009d6e:	f01a 0f01 	tst.w	sl, #1
 8009d72:	d0dd      	beq.n	8009d30 <_dtoa_r+0xa58>
 8009d74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d78:	d1d7      	bne.n	8009d2a <_dtoa_r+0xa52>
 8009d7a:	2339      	movs	r3, #57	; 0x39
 8009d7c:	f88b 3000 	strb.w	r3, [fp]
 8009d80:	462b      	mov	r3, r5
 8009d82:	461d      	mov	r5, r3
 8009d84:	3b01      	subs	r3, #1
 8009d86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d8a:	2a39      	cmp	r2, #57	; 0x39
 8009d8c:	d071      	beq.n	8009e72 <_dtoa_r+0xb9a>
 8009d8e:	3201      	adds	r2, #1
 8009d90:	701a      	strb	r2, [r3, #0]
 8009d92:	e746      	b.n	8009c22 <_dtoa_r+0x94a>
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	dd07      	ble.n	8009da8 <_dtoa_r+0xad0>
 8009d98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d9c:	d0ed      	beq.n	8009d7a <_dtoa_r+0xaa2>
 8009d9e:	f10a 0301 	add.w	r3, sl, #1
 8009da2:	f88b 3000 	strb.w	r3, [fp]
 8009da6:	e73c      	b.n	8009c22 <_dtoa_r+0x94a>
 8009da8:	9b05      	ldr	r3, [sp, #20]
 8009daa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009dae:	4599      	cmp	r9, r3
 8009db0:	d047      	beq.n	8009e42 <_dtoa_r+0xb6a>
 8009db2:	ee18 1a10 	vmov	r1, s16
 8009db6:	2300      	movs	r3, #0
 8009db8:	220a      	movs	r2, #10
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 f8e8 	bl	8009f90 <__multadd>
 8009dc0:	45b8      	cmp	r8, r7
 8009dc2:	ee08 0a10 	vmov	s16, r0
 8009dc6:	f04f 0300 	mov.w	r3, #0
 8009dca:	f04f 020a 	mov.w	r2, #10
 8009dce:	4641      	mov	r1, r8
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	d106      	bne.n	8009de2 <_dtoa_r+0xb0a>
 8009dd4:	f000 f8dc 	bl	8009f90 <__multadd>
 8009dd8:	4680      	mov	r8, r0
 8009dda:	4607      	mov	r7, r0
 8009ddc:	f109 0901 	add.w	r9, r9, #1
 8009de0:	e772      	b.n	8009cc8 <_dtoa_r+0x9f0>
 8009de2:	f000 f8d5 	bl	8009f90 <__multadd>
 8009de6:	4639      	mov	r1, r7
 8009de8:	4680      	mov	r8, r0
 8009dea:	2300      	movs	r3, #0
 8009dec:	220a      	movs	r2, #10
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 f8ce 	bl	8009f90 <__multadd>
 8009df4:	4607      	mov	r7, r0
 8009df6:	e7f1      	b.n	8009ddc <_dtoa_r+0xb04>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	9302      	str	r3, [sp, #8]
 8009dfc:	9d01      	ldr	r5, [sp, #4]
 8009dfe:	ee18 0a10 	vmov	r0, s16
 8009e02:	4631      	mov	r1, r6
 8009e04:	f7ff f9da 	bl	80091bc <quorem>
 8009e08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e0c:	9b01      	ldr	r3, [sp, #4]
 8009e0e:	f805 ab01 	strb.w	sl, [r5], #1
 8009e12:	1aea      	subs	r2, r5, r3
 8009e14:	9b02      	ldr	r3, [sp, #8]
 8009e16:	4293      	cmp	r3, r2
 8009e18:	dd09      	ble.n	8009e2e <_dtoa_r+0xb56>
 8009e1a:	ee18 1a10 	vmov	r1, s16
 8009e1e:	2300      	movs	r3, #0
 8009e20:	220a      	movs	r2, #10
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 f8b4 	bl	8009f90 <__multadd>
 8009e28:	ee08 0a10 	vmov	s16, r0
 8009e2c:	e7e7      	b.n	8009dfe <_dtoa_r+0xb26>
 8009e2e:	9b02      	ldr	r3, [sp, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	bfc8      	it	gt
 8009e34:	461d      	movgt	r5, r3
 8009e36:	9b01      	ldr	r3, [sp, #4]
 8009e38:	bfd8      	it	le
 8009e3a:	2501      	movle	r5, #1
 8009e3c:	441d      	add	r5, r3
 8009e3e:	f04f 0800 	mov.w	r8, #0
 8009e42:	ee18 1a10 	vmov	r1, s16
 8009e46:	2201      	movs	r2, #1
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f000 fa51 	bl	800a2f0 <__lshift>
 8009e4e:	4631      	mov	r1, r6
 8009e50:	ee08 0a10 	vmov	s16, r0
 8009e54:	f000 fabc 	bl	800a3d0 <__mcmp>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	dc91      	bgt.n	8009d80 <_dtoa_r+0xaa8>
 8009e5c:	d102      	bne.n	8009e64 <_dtoa_r+0xb8c>
 8009e5e:	f01a 0f01 	tst.w	sl, #1
 8009e62:	d18d      	bne.n	8009d80 <_dtoa_r+0xaa8>
 8009e64:	462b      	mov	r3, r5
 8009e66:	461d      	mov	r5, r3
 8009e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e6c:	2a30      	cmp	r2, #48	; 0x30
 8009e6e:	d0fa      	beq.n	8009e66 <_dtoa_r+0xb8e>
 8009e70:	e6d7      	b.n	8009c22 <_dtoa_r+0x94a>
 8009e72:	9a01      	ldr	r2, [sp, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d184      	bne.n	8009d82 <_dtoa_r+0xaaa>
 8009e78:	9b00      	ldr	r3, [sp, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	2331      	movs	r3, #49	; 0x31
 8009e80:	7013      	strb	r3, [r2, #0]
 8009e82:	e6ce      	b.n	8009c22 <_dtoa_r+0x94a>
 8009e84:	4b09      	ldr	r3, [pc, #36]	; (8009eac <_dtoa_r+0xbd4>)
 8009e86:	f7ff ba95 	b.w	80093b4 <_dtoa_r+0xdc>
 8009e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f47f aa6e 	bne.w	800936e <_dtoa_r+0x96>
 8009e92:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <_dtoa_r+0xbd8>)
 8009e94:	f7ff ba8e 	b.w	80093b4 <_dtoa_r+0xdc>
 8009e98:	9b02      	ldr	r3, [sp, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	dcae      	bgt.n	8009dfc <_dtoa_r+0xb24>
 8009e9e:	9b06      	ldr	r3, [sp, #24]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	f73f aea8 	bgt.w	8009bf6 <_dtoa_r+0x91e>
 8009ea6:	e7a9      	b.n	8009dfc <_dtoa_r+0xb24>
 8009ea8:	0800d8fb 	.word	0x0800d8fb
 8009eac:	0800d858 	.word	0x0800d858
 8009eb0:	0800d87c 	.word	0x0800d87c

08009eb4 <_localeconv_r>:
 8009eb4:	4800      	ldr	r0, [pc, #0]	; (8009eb8 <_localeconv_r+0x4>)
 8009eb6:	4770      	bx	lr
 8009eb8:	200002dc 	.word	0x200002dc

08009ebc <malloc>:
 8009ebc:	4b02      	ldr	r3, [pc, #8]	; (8009ec8 <malloc+0xc>)
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	f000 bc09 	b.w	800a6d8 <_malloc_r>
 8009ec6:	bf00      	nop
 8009ec8:	20000188 	.word	0x20000188

08009ecc <_Balloc>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	460d      	mov	r5, r1
 8009ed4:	b976      	cbnz	r6, 8009ef4 <_Balloc+0x28>
 8009ed6:	2010      	movs	r0, #16
 8009ed8:	f7ff fff0 	bl	8009ebc <malloc>
 8009edc:	4602      	mov	r2, r0
 8009ede:	6260      	str	r0, [r4, #36]	; 0x24
 8009ee0:	b920      	cbnz	r0, 8009eec <_Balloc+0x20>
 8009ee2:	4b18      	ldr	r3, [pc, #96]	; (8009f44 <_Balloc+0x78>)
 8009ee4:	4818      	ldr	r0, [pc, #96]	; (8009f48 <_Balloc+0x7c>)
 8009ee6:	2166      	movs	r1, #102	; 0x66
 8009ee8:	f000 fdd6 	bl	800aa98 <__assert_func>
 8009eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ef0:	6006      	str	r6, [r0, #0]
 8009ef2:	60c6      	str	r6, [r0, #12]
 8009ef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ef6:	68f3      	ldr	r3, [r6, #12]
 8009ef8:	b183      	cbz	r3, 8009f1c <_Balloc+0x50>
 8009efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f02:	b9b8      	cbnz	r0, 8009f34 <_Balloc+0x68>
 8009f04:	2101      	movs	r1, #1
 8009f06:	fa01 f605 	lsl.w	r6, r1, r5
 8009f0a:	1d72      	adds	r2, r6, #5
 8009f0c:	0092      	lsls	r2, r2, #2
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 fb60 	bl	800a5d4 <_calloc_r>
 8009f14:	b160      	cbz	r0, 8009f30 <_Balloc+0x64>
 8009f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f1a:	e00e      	b.n	8009f3a <_Balloc+0x6e>
 8009f1c:	2221      	movs	r2, #33	; 0x21
 8009f1e:	2104      	movs	r1, #4
 8009f20:	4620      	mov	r0, r4
 8009f22:	f000 fb57 	bl	800a5d4 <_calloc_r>
 8009f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f28:	60f0      	str	r0, [r6, #12]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1e4      	bne.n	8009efa <_Balloc+0x2e>
 8009f30:	2000      	movs	r0, #0
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
 8009f34:	6802      	ldr	r2, [r0, #0]
 8009f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f40:	e7f7      	b.n	8009f32 <_Balloc+0x66>
 8009f42:	bf00      	nop
 8009f44:	0800d889 	.word	0x0800d889
 8009f48:	0800d90c 	.word	0x0800d90c

08009f4c <_Bfree>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f50:	4605      	mov	r5, r0
 8009f52:	460c      	mov	r4, r1
 8009f54:	b976      	cbnz	r6, 8009f74 <_Bfree+0x28>
 8009f56:	2010      	movs	r0, #16
 8009f58:	f7ff ffb0 	bl	8009ebc <malloc>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	6268      	str	r0, [r5, #36]	; 0x24
 8009f60:	b920      	cbnz	r0, 8009f6c <_Bfree+0x20>
 8009f62:	4b09      	ldr	r3, [pc, #36]	; (8009f88 <_Bfree+0x3c>)
 8009f64:	4809      	ldr	r0, [pc, #36]	; (8009f8c <_Bfree+0x40>)
 8009f66:	218a      	movs	r1, #138	; 0x8a
 8009f68:	f000 fd96 	bl	800aa98 <__assert_func>
 8009f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f70:	6006      	str	r6, [r0, #0]
 8009f72:	60c6      	str	r6, [r0, #12]
 8009f74:	b13c      	cbz	r4, 8009f86 <_Bfree+0x3a>
 8009f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f78:	6862      	ldr	r2, [r4, #4]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f80:	6021      	str	r1, [r4, #0]
 8009f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	0800d889 	.word	0x0800d889
 8009f8c:	0800d90c 	.word	0x0800d90c

08009f90 <__multadd>:
 8009f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f94:	690d      	ldr	r5, [r1, #16]
 8009f96:	4607      	mov	r7, r0
 8009f98:	460c      	mov	r4, r1
 8009f9a:	461e      	mov	r6, r3
 8009f9c:	f101 0c14 	add.w	ip, r1, #20
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	f8dc 3000 	ldr.w	r3, [ip]
 8009fa6:	b299      	uxth	r1, r3
 8009fa8:	fb02 6101 	mla	r1, r2, r1, r6
 8009fac:	0c1e      	lsrs	r6, r3, #16
 8009fae:	0c0b      	lsrs	r3, r1, #16
 8009fb0:	fb02 3306 	mla	r3, r2, r6, r3
 8009fb4:	b289      	uxth	r1, r1
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fbc:	4285      	cmp	r5, r0
 8009fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8009fc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fc6:	dcec      	bgt.n	8009fa2 <__multadd+0x12>
 8009fc8:	b30e      	cbz	r6, 800a00e <__multadd+0x7e>
 8009fca:	68a3      	ldr	r3, [r4, #8]
 8009fcc:	42ab      	cmp	r3, r5
 8009fce:	dc19      	bgt.n	800a004 <__multadd+0x74>
 8009fd0:	6861      	ldr	r1, [r4, #4]
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	3101      	adds	r1, #1
 8009fd6:	f7ff ff79 	bl	8009ecc <_Balloc>
 8009fda:	4680      	mov	r8, r0
 8009fdc:	b928      	cbnz	r0, 8009fea <__multadd+0x5a>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <__multadd+0x84>)
 8009fe2:	480d      	ldr	r0, [pc, #52]	; (800a018 <__multadd+0x88>)
 8009fe4:	21b5      	movs	r1, #181	; 0xb5
 8009fe6:	f000 fd57 	bl	800aa98 <__assert_func>
 8009fea:	6922      	ldr	r2, [r4, #16]
 8009fec:	3202      	adds	r2, #2
 8009fee:	f104 010c 	add.w	r1, r4, #12
 8009ff2:	0092      	lsls	r2, r2, #2
 8009ff4:	300c      	adds	r0, #12
 8009ff6:	f7fe fc2d 	bl	8008854 <memcpy>
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	f7ff ffa5 	bl	8009f4c <_Bfree>
 800a002:	4644      	mov	r4, r8
 800a004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a008:	3501      	adds	r5, #1
 800a00a:	615e      	str	r6, [r3, #20]
 800a00c:	6125      	str	r5, [r4, #16]
 800a00e:	4620      	mov	r0, r4
 800a010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a014:	0800d8fb 	.word	0x0800d8fb
 800a018:	0800d90c 	.word	0x0800d90c

0800a01c <__hi0bits>:
 800a01c:	0c03      	lsrs	r3, r0, #16
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	b9d3      	cbnz	r3, 800a058 <__hi0bits+0x3c>
 800a022:	0400      	lsls	r0, r0, #16
 800a024:	2310      	movs	r3, #16
 800a026:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a02a:	bf04      	itt	eq
 800a02c:	0200      	lsleq	r0, r0, #8
 800a02e:	3308      	addeq	r3, #8
 800a030:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a034:	bf04      	itt	eq
 800a036:	0100      	lsleq	r0, r0, #4
 800a038:	3304      	addeq	r3, #4
 800a03a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a03e:	bf04      	itt	eq
 800a040:	0080      	lsleq	r0, r0, #2
 800a042:	3302      	addeq	r3, #2
 800a044:	2800      	cmp	r0, #0
 800a046:	db05      	blt.n	800a054 <__hi0bits+0x38>
 800a048:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a04c:	f103 0301 	add.w	r3, r3, #1
 800a050:	bf08      	it	eq
 800a052:	2320      	moveq	r3, #32
 800a054:	4618      	mov	r0, r3
 800a056:	4770      	bx	lr
 800a058:	2300      	movs	r3, #0
 800a05a:	e7e4      	b.n	800a026 <__hi0bits+0xa>

0800a05c <__lo0bits>:
 800a05c:	6803      	ldr	r3, [r0, #0]
 800a05e:	f013 0207 	ands.w	r2, r3, #7
 800a062:	4601      	mov	r1, r0
 800a064:	d00b      	beq.n	800a07e <__lo0bits+0x22>
 800a066:	07da      	lsls	r2, r3, #31
 800a068:	d423      	bmi.n	800a0b2 <__lo0bits+0x56>
 800a06a:	0798      	lsls	r0, r3, #30
 800a06c:	bf49      	itett	mi
 800a06e:	085b      	lsrmi	r3, r3, #1
 800a070:	089b      	lsrpl	r3, r3, #2
 800a072:	2001      	movmi	r0, #1
 800a074:	600b      	strmi	r3, [r1, #0]
 800a076:	bf5c      	itt	pl
 800a078:	600b      	strpl	r3, [r1, #0]
 800a07a:	2002      	movpl	r0, #2
 800a07c:	4770      	bx	lr
 800a07e:	b298      	uxth	r0, r3
 800a080:	b9a8      	cbnz	r0, 800a0ae <__lo0bits+0x52>
 800a082:	0c1b      	lsrs	r3, r3, #16
 800a084:	2010      	movs	r0, #16
 800a086:	b2da      	uxtb	r2, r3
 800a088:	b90a      	cbnz	r2, 800a08e <__lo0bits+0x32>
 800a08a:	3008      	adds	r0, #8
 800a08c:	0a1b      	lsrs	r3, r3, #8
 800a08e:	071a      	lsls	r2, r3, #28
 800a090:	bf04      	itt	eq
 800a092:	091b      	lsreq	r3, r3, #4
 800a094:	3004      	addeq	r0, #4
 800a096:	079a      	lsls	r2, r3, #30
 800a098:	bf04      	itt	eq
 800a09a:	089b      	lsreq	r3, r3, #2
 800a09c:	3002      	addeq	r0, #2
 800a09e:	07da      	lsls	r2, r3, #31
 800a0a0:	d403      	bmi.n	800a0aa <__lo0bits+0x4e>
 800a0a2:	085b      	lsrs	r3, r3, #1
 800a0a4:	f100 0001 	add.w	r0, r0, #1
 800a0a8:	d005      	beq.n	800a0b6 <__lo0bits+0x5a>
 800a0aa:	600b      	str	r3, [r1, #0]
 800a0ac:	4770      	bx	lr
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	e7e9      	b.n	800a086 <__lo0bits+0x2a>
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	4770      	bx	lr
 800a0b6:	2020      	movs	r0, #32
 800a0b8:	4770      	bx	lr
	...

0800a0bc <__i2b>:
 800a0bc:	b510      	push	{r4, lr}
 800a0be:	460c      	mov	r4, r1
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	f7ff ff03 	bl	8009ecc <_Balloc>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	b928      	cbnz	r0, 800a0d6 <__i2b+0x1a>
 800a0ca:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <__i2b+0x24>)
 800a0cc:	4805      	ldr	r0, [pc, #20]	; (800a0e4 <__i2b+0x28>)
 800a0ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0d2:	f000 fce1 	bl	800aa98 <__assert_func>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	6144      	str	r4, [r0, #20]
 800a0da:	6103      	str	r3, [r0, #16]
 800a0dc:	bd10      	pop	{r4, pc}
 800a0de:	bf00      	nop
 800a0e0:	0800d8fb 	.word	0x0800d8fb
 800a0e4:	0800d90c 	.word	0x0800d90c

0800a0e8 <__multiply>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	4691      	mov	r9, r2
 800a0ee:	690a      	ldr	r2, [r1, #16]
 800a0f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	bfb8      	it	lt
 800a0f8:	460b      	movlt	r3, r1
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	bfbc      	itt	lt
 800a0fe:	464c      	movlt	r4, r9
 800a100:	4699      	movlt	r9, r3
 800a102:	6927      	ldr	r7, [r4, #16]
 800a104:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a108:	68a3      	ldr	r3, [r4, #8]
 800a10a:	6861      	ldr	r1, [r4, #4]
 800a10c:	eb07 060a 	add.w	r6, r7, sl
 800a110:	42b3      	cmp	r3, r6
 800a112:	b085      	sub	sp, #20
 800a114:	bfb8      	it	lt
 800a116:	3101      	addlt	r1, #1
 800a118:	f7ff fed8 	bl	8009ecc <_Balloc>
 800a11c:	b930      	cbnz	r0, 800a12c <__multiply+0x44>
 800a11e:	4602      	mov	r2, r0
 800a120:	4b44      	ldr	r3, [pc, #272]	; (800a234 <__multiply+0x14c>)
 800a122:	4845      	ldr	r0, [pc, #276]	; (800a238 <__multiply+0x150>)
 800a124:	f240 115d 	movw	r1, #349	; 0x15d
 800a128:	f000 fcb6 	bl	800aa98 <__assert_func>
 800a12c:	f100 0514 	add.w	r5, r0, #20
 800a130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a134:	462b      	mov	r3, r5
 800a136:	2200      	movs	r2, #0
 800a138:	4543      	cmp	r3, r8
 800a13a:	d321      	bcc.n	800a180 <__multiply+0x98>
 800a13c:	f104 0314 	add.w	r3, r4, #20
 800a140:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a144:	f109 0314 	add.w	r3, r9, #20
 800a148:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a14c:	9202      	str	r2, [sp, #8]
 800a14e:	1b3a      	subs	r2, r7, r4
 800a150:	3a15      	subs	r2, #21
 800a152:	f022 0203 	bic.w	r2, r2, #3
 800a156:	3204      	adds	r2, #4
 800a158:	f104 0115 	add.w	r1, r4, #21
 800a15c:	428f      	cmp	r7, r1
 800a15e:	bf38      	it	cc
 800a160:	2204      	movcc	r2, #4
 800a162:	9201      	str	r2, [sp, #4]
 800a164:	9a02      	ldr	r2, [sp, #8]
 800a166:	9303      	str	r3, [sp, #12]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d80c      	bhi.n	800a186 <__multiply+0x9e>
 800a16c:	2e00      	cmp	r6, #0
 800a16e:	dd03      	ble.n	800a178 <__multiply+0x90>
 800a170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a174:	2b00      	cmp	r3, #0
 800a176:	d05a      	beq.n	800a22e <__multiply+0x146>
 800a178:	6106      	str	r6, [r0, #16]
 800a17a:	b005      	add	sp, #20
 800a17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a180:	f843 2b04 	str.w	r2, [r3], #4
 800a184:	e7d8      	b.n	800a138 <__multiply+0x50>
 800a186:	f8b3 a000 	ldrh.w	sl, [r3]
 800a18a:	f1ba 0f00 	cmp.w	sl, #0
 800a18e:	d024      	beq.n	800a1da <__multiply+0xf2>
 800a190:	f104 0e14 	add.w	lr, r4, #20
 800a194:	46a9      	mov	r9, r5
 800a196:	f04f 0c00 	mov.w	ip, #0
 800a19a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a19e:	f8d9 1000 	ldr.w	r1, [r9]
 800a1a2:	fa1f fb82 	uxth.w	fp, r2
 800a1a6:	b289      	uxth	r1, r1
 800a1a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1b0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1b4:	4461      	add	r1, ip
 800a1b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1c2:	b289      	uxth	r1, r1
 800a1c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1c8:	4577      	cmp	r7, lr
 800a1ca:	f849 1b04 	str.w	r1, [r9], #4
 800a1ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1d2:	d8e2      	bhi.n	800a19a <__multiply+0xb2>
 800a1d4:	9a01      	ldr	r2, [sp, #4]
 800a1d6:	f845 c002 	str.w	ip, [r5, r2]
 800a1da:	9a03      	ldr	r2, [sp, #12]
 800a1dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	f1b9 0f00 	cmp.w	r9, #0
 800a1e6:	d020      	beq.n	800a22a <__multiply+0x142>
 800a1e8:	6829      	ldr	r1, [r5, #0]
 800a1ea:	f104 0c14 	add.w	ip, r4, #20
 800a1ee:	46ae      	mov	lr, r5
 800a1f0:	f04f 0a00 	mov.w	sl, #0
 800a1f4:	f8bc b000 	ldrh.w	fp, [ip]
 800a1f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1fc:	fb09 220b 	mla	r2, r9, fp, r2
 800a200:	4492      	add	sl, r2
 800a202:	b289      	uxth	r1, r1
 800a204:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a208:	f84e 1b04 	str.w	r1, [lr], #4
 800a20c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a210:	f8be 1000 	ldrh.w	r1, [lr]
 800a214:	0c12      	lsrs	r2, r2, #16
 800a216:	fb09 1102 	mla	r1, r9, r2, r1
 800a21a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a21e:	4567      	cmp	r7, ip
 800a220:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a224:	d8e6      	bhi.n	800a1f4 <__multiply+0x10c>
 800a226:	9a01      	ldr	r2, [sp, #4]
 800a228:	50a9      	str	r1, [r5, r2]
 800a22a:	3504      	adds	r5, #4
 800a22c:	e79a      	b.n	800a164 <__multiply+0x7c>
 800a22e:	3e01      	subs	r6, #1
 800a230:	e79c      	b.n	800a16c <__multiply+0x84>
 800a232:	bf00      	nop
 800a234:	0800d8fb 	.word	0x0800d8fb
 800a238:	0800d90c 	.word	0x0800d90c

0800a23c <__pow5mult>:
 800a23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a240:	4615      	mov	r5, r2
 800a242:	f012 0203 	ands.w	r2, r2, #3
 800a246:	4606      	mov	r6, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	d007      	beq.n	800a25c <__pow5mult+0x20>
 800a24c:	4c25      	ldr	r4, [pc, #148]	; (800a2e4 <__pow5mult+0xa8>)
 800a24e:	3a01      	subs	r2, #1
 800a250:	2300      	movs	r3, #0
 800a252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a256:	f7ff fe9b 	bl	8009f90 <__multadd>
 800a25a:	4607      	mov	r7, r0
 800a25c:	10ad      	asrs	r5, r5, #2
 800a25e:	d03d      	beq.n	800a2dc <__pow5mult+0xa0>
 800a260:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a262:	b97c      	cbnz	r4, 800a284 <__pow5mult+0x48>
 800a264:	2010      	movs	r0, #16
 800a266:	f7ff fe29 	bl	8009ebc <malloc>
 800a26a:	4602      	mov	r2, r0
 800a26c:	6270      	str	r0, [r6, #36]	; 0x24
 800a26e:	b928      	cbnz	r0, 800a27c <__pow5mult+0x40>
 800a270:	4b1d      	ldr	r3, [pc, #116]	; (800a2e8 <__pow5mult+0xac>)
 800a272:	481e      	ldr	r0, [pc, #120]	; (800a2ec <__pow5mult+0xb0>)
 800a274:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a278:	f000 fc0e 	bl	800aa98 <__assert_func>
 800a27c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a280:	6004      	str	r4, [r0, #0]
 800a282:	60c4      	str	r4, [r0, #12]
 800a284:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a28c:	b94c      	cbnz	r4, 800a2a2 <__pow5mult+0x66>
 800a28e:	f240 2171 	movw	r1, #625	; 0x271
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ff12 	bl	800a0bc <__i2b>
 800a298:	2300      	movs	r3, #0
 800a29a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a29e:	4604      	mov	r4, r0
 800a2a0:	6003      	str	r3, [r0, #0]
 800a2a2:	f04f 0900 	mov.w	r9, #0
 800a2a6:	07eb      	lsls	r3, r5, #31
 800a2a8:	d50a      	bpl.n	800a2c0 <__pow5mult+0x84>
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ff1a 	bl	800a0e8 <__multiply>
 800a2b4:	4639      	mov	r1, r7
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f7ff fe47 	bl	8009f4c <_Bfree>
 800a2be:	4647      	mov	r7, r8
 800a2c0:	106d      	asrs	r5, r5, #1
 800a2c2:	d00b      	beq.n	800a2dc <__pow5mult+0xa0>
 800a2c4:	6820      	ldr	r0, [r4, #0]
 800a2c6:	b938      	cbnz	r0, 800a2d8 <__pow5mult+0x9c>
 800a2c8:	4622      	mov	r2, r4
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7ff ff0b 	bl	800a0e8 <__multiply>
 800a2d2:	6020      	str	r0, [r4, #0]
 800a2d4:	f8c0 9000 	str.w	r9, [r0]
 800a2d8:	4604      	mov	r4, r0
 800a2da:	e7e4      	b.n	800a2a6 <__pow5mult+0x6a>
 800a2dc:	4638      	mov	r0, r7
 800a2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e2:	bf00      	nop
 800a2e4:	0800da58 	.word	0x0800da58
 800a2e8:	0800d889 	.word	0x0800d889
 800a2ec:	0800d90c 	.word	0x0800d90c

0800a2f0 <__lshift>:
 800a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	6849      	ldr	r1, [r1, #4]
 800a2f8:	6923      	ldr	r3, [r4, #16]
 800a2fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2fe:	68a3      	ldr	r3, [r4, #8]
 800a300:	4607      	mov	r7, r0
 800a302:	4691      	mov	r9, r2
 800a304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a308:	f108 0601 	add.w	r6, r8, #1
 800a30c:	42b3      	cmp	r3, r6
 800a30e:	db0b      	blt.n	800a328 <__lshift+0x38>
 800a310:	4638      	mov	r0, r7
 800a312:	f7ff fddb 	bl	8009ecc <_Balloc>
 800a316:	4605      	mov	r5, r0
 800a318:	b948      	cbnz	r0, 800a32e <__lshift+0x3e>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b2a      	ldr	r3, [pc, #168]	; (800a3c8 <__lshift+0xd8>)
 800a31e:	482b      	ldr	r0, [pc, #172]	; (800a3cc <__lshift+0xdc>)
 800a320:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a324:	f000 fbb8 	bl	800aa98 <__assert_func>
 800a328:	3101      	adds	r1, #1
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	e7ee      	b.n	800a30c <__lshift+0x1c>
 800a32e:	2300      	movs	r3, #0
 800a330:	f100 0114 	add.w	r1, r0, #20
 800a334:	f100 0210 	add.w	r2, r0, #16
 800a338:	4618      	mov	r0, r3
 800a33a:	4553      	cmp	r3, sl
 800a33c:	db37      	blt.n	800a3ae <__lshift+0xbe>
 800a33e:	6920      	ldr	r0, [r4, #16]
 800a340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a344:	f104 0314 	add.w	r3, r4, #20
 800a348:	f019 091f 	ands.w	r9, r9, #31
 800a34c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a350:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a354:	d02f      	beq.n	800a3b6 <__lshift+0xc6>
 800a356:	f1c9 0e20 	rsb	lr, r9, #32
 800a35a:	468a      	mov	sl, r1
 800a35c:	f04f 0c00 	mov.w	ip, #0
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	fa02 f209 	lsl.w	r2, r2, r9
 800a366:	ea42 020c 	orr.w	r2, r2, ip
 800a36a:	f84a 2b04 	str.w	r2, [sl], #4
 800a36e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a372:	4298      	cmp	r0, r3
 800a374:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a378:	d8f2      	bhi.n	800a360 <__lshift+0x70>
 800a37a:	1b03      	subs	r3, r0, r4
 800a37c:	3b15      	subs	r3, #21
 800a37e:	f023 0303 	bic.w	r3, r3, #3
 800a382:	3304      	adds	r3, #4
 800a384:	f104 0215 	add.w	r2, r4, #21
 800a388:	4290      	cmp	r0, r2
 800a38a:	bf38      	it	cc
 800a38c:	2304      	movcc	r3, #4
 800a38e:	f841 c003 	str.w	ip, [r1, r3]
 800a392:	f1bc 0f00 	cmp.w	ip, #0
 800a396:	d001      	beq.n	800a39c <__lshift+0xac>
 800a398:	f108 0602 	add.w	r6, r8, #2
 800a39c:	3e01      	subs	r6, #1
 800a39e:	4638      	mov	r0, r7
 800a3a0:	612e      	str	r6, [r5, #16]
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	f7ff fdd2 	bl	8009f4c <_Bfree>
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	e7c1      	b.n	800a33a <__lshift+0x4a>
 800a3b6:	3904      	subs	r1, #4
 800a3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3c0:	4298      	cmp	r0, r3
 800a3c2:	d8f9      	bhi.n	800a3b8 <__lshift+0xc8>
 800a3c4:	e7ea      	b.n	800a39c <__lshift+0xac>
 800a3c6:	bf00      	nop
 800a3c8:	0800d8fb 	.word	0x0800d8fb
 800a3cc:	0800d90c 	.word	0x0800d90c

0800a3d0 <__mcmp>:
 800a3d0:	b530      	push	{r4, r5, lr}
 800a3d2:	6902      	ldr	r2, [r0, #16]
 800a3d4:	690c      	ldr	r4, [r1, #16]
 800a3d6:	1b12      	subs	r2, r2, r4
 800a3d8:	d10e      	bne.n	800a3f8 <__mcmp+0x28>
 800a3da:	f100 0314 	add.w	r3, r0, #20
 800a3de:	3114      	adds	r1, #20
 800a3e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3f0:	42a5      	cmp	r5, r4
 800a3f2:	d003      	beq.n	800a3fc <__mcmp+0x2c>
 800a3f4:	d305      	bcc.n	800a402 <__mcmp+0x32>
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	bd30      	pop	{r4, r5, pc}
 800a3fc:	4283      	cmp	r3, r0
 800a3fe:	d3f3      	bcc.n	800a3e8 <__mcmp+0x18>
 800a400:	e7fa      	b.n	800a3f8 <__mcmp+0x28>
 800a402:	f04f 32ff 	mov.w	r2, #4294967295
 800a406:	e7f7      	b.n	800a3f8 <__mcmp+0x28>

0800a408 <__mdiff>:
 800a408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	460c      	mov	r4, r1
 800a40e:	4606      	mov	r6, r0
 800a410:	4611      	mov	r1, r2
 800a412:	4620      	mov	r0, r4
 800a414:	4690      	mov	r8, r2
 800a416:	f7ff ffdb 	bl	800a3d0 <__mcmp>
 800a41a:	1e05      	subs	r5, r0, #0
 800a41c:	d110      	bne.n	800a440 <__mdiff+0x38>
 800a41e:	4629      	mov	r1, r5
 800a420:	4630      	mov	r0, r6
 800a422:	f7ff fd53 	bl	8009ecc <_Balloc>
 800a426:	b930      	cbnz	r0, 800a436 <__mdiff+0x2e>
 800a428:	4b3a      	ldr	r3, [pc, #232]	; (800a514 <__mdiff+0x10c>)
 800a42a:	4602      	mov	r2, r0
 800a42c:	f240 2132 	movw	r1, #562	; 0x232
 800a430:	4839      	ldr	r0, [pc, #228]	; (800a518 <__mdiff+0x110>)
 800a432:	f000 fb31 	bl	800aa98 <__assert_func>
 800a436:	2301      	movs	r3, #1
 800a438:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a43c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a440:	bfa4      	itt	ge
 800a442:	4643      	movge	r3, r8
 800a444:	46a0      	movge	r8, r4
 800a446:	4630      	mov	r0, r6
 800a448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a44c:	bfa6      	itte	ge
 800a44e:	461c      	movge	r4, r3
 800a450:	2500      	movge	r5, #0
 800a452:	2501      	movlt	r5, #1
 800a454:	f7ff fd3a 	bl	8009ecc <_Balloc>
 800a458:	b920      	cbnz	r0, 800a464 <__mdiff+0x5c>
 800a45a:	4b2e      	ldr	r3, [pc, #184]	; (800a514 <__mdiff+0x10c>)
 800a45c:	4602      	mov	r2, r0
 800a45e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a462:	e7e5      	b.n	800a430 <__mdiff+0x28>
 800a464:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a468:	6926      	ldr	r6, [r4, #16]
 800a46a:	60c5      	str	r5, [r0, #12]
 800a46c:	f104 0914 	add.w	r9, r4, #20
 800a470:	f108 0514 	add.w	r5, r8, #20
 800a474:	f100 0e14 	add.w	lr, r0, #20
 800a478:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a47c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a480:	f108 0210 	add.w	r2, r8, #16
 800a484:	46f2      	mov	sl, lr
 800a486:	2100      	movs	r1, #0
 800a488:	f859 3b04 	ldr.w	r3, [r9], #4
 800a48c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a490:	fa1f f883 	uxth.w	r8, r3
 800a494:	fa11 f18b 	uxtah	r1, r1, fp
 800a498:	0c1b      	lsrs	r3, r3, #16
 800a49a:	eba1 0808 	sub.w	r8, r1, r8
 800a49e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4a6:	fa1f f888 	uxth.w	r8, r8
 800a4aa:	1419      	asrs	r1, r3, #16
 800a4ac:	454e      	cmp	r6, r9
 800a4ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4b2:	f84a 3b04 	str.w	r3, [sl], #4
 800a4b6:	d8e7      	bhi.n	800a488 <__mdiff+0x80>
 800a4b8:	1b33      	subs	r3, r6, r4
 800a4ba:	3b15      	subs	r3, #21
 800a4bc:	f023 0303 	bic.w	r3, r3, #3
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	3415      	adds	r4, #21
 800a4c4:	42a6      	cmp	r6, r4
 800a4c6:	bf38      	it	cc
 800a4c8:	2304      	movcc	r3, #4
 800a4ca:	441d      	add	r5, r3
 800a4cc:	4473      	add	r3, lr
 800a4ce:	469e      	mov	lr, r3
 800a4d0:	462e      	mov	r6, r5
 800a4d2:	4566      	cmp	r6, ip
 800a4d4:	d30e      	bcc.n	800a4f4 <__mdiff+0xec>
 800a4d6:	f10c 0203 	add.w	r2, ip, #3
 800a4da:	1b52      	subs	r2, r2, r5
 800a4dc:	f022 0203 	bic.w	r2, r2, #3
 800a4e0:	3d03      	subs	r5, #3
 800a4e2:	45ac      	cmp	ip, r5
 800a4e4:	bf38      	it	cc
 800a4e6:	2200      	movcc	r2, #0
 800a4e8:	441a      	add	r2, r3
 800a4ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4ee:	b17b      	cbz	r3, 800a510 <__mdiff+0x108>
 800a4f0:	6107      	str	r7, [r0, #16]
 800a4f2:	e7a3      	b.n	800a43c <__mdiff+0x34>
 800a4f4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4f8:	fa11 f288 	uxtah	r2, r1, r8
 800a4fc:	1414      	asrs	r4, r2, #16
 800a4fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a502:	b292      	uxth	r2, r2
 800a504:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a508:	f84e 2b04 	str.w	r2, [lr], #4
 800a50c:	1421      	asrs	r1, r4, #16
 800a50e:	e7e0      	b.n	800a4d2 <__mdiff+0xca>
 800a510:	3f01      	subs	r7, #1
 800a512:	e7ea      	b.n	800a4ea <__mdiff+0xe2>
 800a514:	0800d8fb 	.word	0x0800d8fb
 800a518:	0800d90c 	.word	0x0800d90c

0800a51c <__d2b>:
 800a51c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a520:	4689      	mov	r9, r1
 800a522:	2101      	movs	r1, #1
 800a524:	ec57 6b10 	vmov	r6, r7, d0
 800a528:	4690      	mov	r8, r2
 800a52a:	f7ff fccf 	bl	8009ecc <_Balloc>
 800a52e:	4604      	mov	r4, r0
 800a530:	b930      	cbnz	r0, 800a540 <__d2b+0x24>
 800a532:	4602      	mov	r2, r0
 800a534:	4b25      	ldr	r3, [pc, #148]	; (800a5cc <__d2b+0xb0>)
 800a536:	4826      	ldr	r0, [pc, #152]	; (800a5d0 <__d2b+0xb4>)
 800a538:	f240 310a 	movw	r1, #778	; 0x30a
 800a53c:	f000 faac 	bl	800aa98 <__assert_func>
 800a540:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a544:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a548:	bb35      	cbnz	r5, 800a598 <__d2b+0x7c>
 800a54a:	2e00      	cmp	r6, #0
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	d028      	beq.n	800a5a2 <__d2b+0x86>
 800a550:	4668      	mov	r0, sp
 800a552:	9600      	str	r6, [sp, #0]
 800a554:	f7ff fd82 	bl	800a05c <__lo0bits>
 800a558:	9900      	ldr	r1, [sp, #0]
 800a55a:	b300      	cbz	r0, 800a59e <__d2b+0x82>
 800a55c:	9a01      	ldr	r2, [sp, #4]
 800a55e:	f1c0 0320 	rsb	r3, r0, #32
 800a562:	fa02 f303 	lsl.w	r3, r2, r3
 800a566:	430b      	orrs	r3, r1
 800a568:	40c2      	lsrs	r2, r0
 800a56a:	6163      	str	r3, [r4, #20]
 800a56c:	9201      	str	r2, [sp, #4]
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	61a3      	str	r3, [r4, #24]
 800a572:	2b00      	cmp	r3, #0
 800a574:	bf14      	ite	ne
 800a576:	2202      	movne	r2, #2
 800a578:	2201      	moveq	r2, #1
 800a57a:	6122      	str	r2, [r4, #16]
 800a57c:	b1d5      	cbz	r5, 800a5b4 <__d2b+0x98>
 800a57e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a582:	4405      	add	r5, r0
 800a584:	f8c9 5000 	str.w	r5, [r9]
 800a588:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a58c:	f8c8 0000 	str.w	r0, [r8]
 800a590:	4620      	mov	r0, r4
 800a592:	b003      	add	sp, #12
 800a594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a59c:	e7d5      	b.n	800a54a <__d2b+0x2e>
 800a59e:	6161      	str	r1, [r4, #20]
 800a5a0:	e7e5      	b.n	800a56e <__d2b+0x52>
 800a5a2:	a801      	add	r0, sp, #4
 800a5a4:	f7ff fd5a 	bl	800a05c <__lo0bits>
 800a5a8:	9b01      	ldr	r3, [sp, #4]
 800a5aa:	6163      	str	r3, [r4, #20]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	6122      	str	r2, [r4, #16]
 800a5b0:	3020      	adds	r0, #32
 800a5b2:	e7e3      	b.n	800a57c <__d2b+0x60>
 800a5b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5bc:	f8c9 0000 	str.w	r0, [r9]
 800a5c0:	6918      	ldr	r0, [r3, #16]
 800a5c2:	f7ff fd2b 	bl	800a01c <__hi0bits>
 800a5c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5ca:	e7df      	b.n	800a58c <__d2b+0x70>
 800a5cc:	0800d8fb 	.word	0x0800d8fb
 800a5d0:	0800d90c 	.word	0x0800d90c

0800a5d4 <_calloc_r>:
 800a5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5d6:	fba1 2402 	umull	r2, r4, r1, r2
 800a5da:	b94c      	cbnz	r4, 800a5f0 <_calloc_r+0x1c>
 800a5dc:	4611      	mov	r1, r2
 800a5de:	9201      	str	r2, [sp, #4]
 800a5e0:	f000 f87a 	bl	800a6d8 <_malloc_r>
 800a5e4:	9a01      	ldr	r2, [sp, #4]
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	b930      	cbnz	r0, 800a5f8 <_calloc_r+0x24>
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	b003      	add	sp, #12
 800a5ee:	bd30      	pop	{r4, r5, pc}
 800a5f0:	220c      	movs	r2, #12
 800a5f2:	6002      	str	r2, [r0, #0]
 800a5f4:	2500      	movs	r5, #0
 800a5f6:	e7f8      	b.n	800a5ea <_calloc_r+0x16>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	f7fe f939 	bl	8008870 <memset>
 800a5fe:	e7f4      	b.n	800a5ea <_calloc_r+0x16>

0800a600 <_free_r>:
 800a600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a602:	2900      	cmp	r1, #0
 800a604:	d044      	beq.n	800a690 <_free_r+0x90>
 800a606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a60a:	9001      	str	r0, [sp, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f1a1 0404 	sub.w	r4, r1, #4
 800a612:	bfb8      	it	lt
 800a614:	18e4      	addlt	r4, r4, r3
 800a616:	f000 fa9b 	bl	800ab50 <__malloc_lock>
 800a61a:	4a1e      	ldr	r2, [pc, #120]	; (800a694 <_free_r+0x94>)
 800a61c:	9801      	ldr	r0, [sp, #4]
 800a61e:	6813      	ldr	r3, [r2, #0]
 800a620:	b933      	cbnz	r3, 800a630 <_free_r+0x30>
 800a622:	6063      	str	r3, [r4, #4]
 800a624:	6014      	str	r4, [r2, #0]
 800a626:	b003      	add	sp, #12
 800a628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a62c:	f000 ba96 	b.w	800ab5c <__malloc_unlock>
 800a630:	42a3      	cmp	r3, r4
 800a632:	d908      	bls.n	800a646 <_free_r+0x46>
 800a634:	6825      	ldr	r5, [r4, #0]
 800a636:	1961      	adds	r1, r4, r5
 800a638:	428b      	cmp	r3, r1
 800a63a:	bf01      	itttt	eq
 800a63c:	6819      	ldreq	r1, [r3, #0]
 800a63e:	685b      	ldreq	r3, [r3, #4]
 800a640:	1949      	addeq	r1, r1, r5
 800a642:	6021      	streq	r1, [r4, #0]
 800a644:	e7ed      	b.n	800a622 <_free_r+0x22>
 800a646:	461a      	mov	r2, r3
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	b10b      	cbz	r3, 800a650 <_free_r+0x50>
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	d9fa      	bls.n	800a646 <_free_r+0x46>
 800a650:	6811      	ldr	r1, [r2, #0]
 800a652:	1855      	adds	r5, r2, r1
 800a654:	42a5      	cmp	r5, r4
 800a656:	d10b      	bne.n	800a670 <_free_r+0x70>
 800a658:	6824      	ldr	r4, [r4, #0]
 800a65a:	4421      	add	r1, r4
 800a65c:	1854      	adds	r4, r2, r1
 800a65e:	42a3      	cmp	r3, r4
 800a660:	6011      	str	r1, [r2, #0]
 800a662:	d1e0      	bne.n	800a626 <_free_r+0x26>
 800a664:	681c      	ldr	r4, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	6053      	str	r3, [r2, #4]
 800a66a:	4421      	add	r1, r4
 800a66c:	6011      	str	r1, [r2, #0]
 800a66e:	e7da      	b.n	800a626 <_free_r+0x26>
 800a670:	d902      	bls.n	800a678 <_free_r+0x78>
 800a672:	230c      	movs	r3, #12
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	e7d6      	b.n	800a626 <_free_r+0x26>
 800a678:	6825      	ldr	r5, [r4, #0]
 800a67a:	1961      	adds	r1, r4, r5
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf04      	itt	eq
 800a680:	6819      	ldreq	r1, [r3, #0]
 800a682:	685b      	ldreq	r3, [r3, #4]
 800a684:	6063      	str	r3, [r4, #4]
 800a686:	bf04      	itt	eq
 800a688:	1949      	addeq	r1, r1, r5
 800a68a:	6021      	streq	r1, [r4, #0]
 800a68c:	6054      	str	r4, [r2, #4]
 800a68e:	e7ca      	b.n	800a626 <_free_r+0x26>
 800a690:	b003      	add	sp, #12
 800a692:	bd30      	pop	{r4, r5, pc}
 800a694:	200009b0 	.word	0x200009b0

0800a698 <sbrk_aligned>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	4e0e      	ldr	r6, [pc, #56]	; (800a6d4 <sbrk_aligned+0x3c>)
 800a69c:	460c      	mov	r4, r1
 800a69e:	6831      	ldr	r1, [r6, #0]
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	b911      	cbnz	r1, 800a6aa <sbrk_aligned+0x12>
 800a6a4:	f000 f9e8 	bl	800aa78 <_sbrk_r>
 800a6a8:	6030      	str	r0, [r6, #0]
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f000 f9e3 	bl	800aa78 <_sbrk_r>
 800a6b2:	1c43      	adds	r3, r0, #1
 800a6b4:	d00a      	beq.n	800a6cc <sbrk_aligned+0x34>
 800a6b6:	1cc4      	adds	r4, r0, #3
 800a6b8:	f024 0403 	bic.w	r4, r4, #3
 800a6bc:	42a0      	cmp	r0, r4
 800a6be:	d007      	beq.n	800a6d0 <sbrk_aligned+0x38>
 800a6c0:	1a21      	subs	r1, r4, r0
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 f9d8 	bl	800aa78 <_sbrk_r>
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d101      	bne.n	800a6d0 <sbrk_aligned+0x38>
 800a6cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	200009b4 	.word	0x200009b4

0800a6d8 <_malloc_r>:
 800a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6dc:	1ccd      	adds	r5, r1, #3
 800a6de:	f025 0503 	bic.w	r5, r5, #3
 800a6e2:	3508      	adds	r5, #8
 800a6e4:	2d0c      	cmp	r5, #12
 800a6e6:	bf38      	it	cc
 800a6e8:	250c      	movcc	r5, #12
 800a6ea:	2d00      	cmp	r5, #0
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	db01      	blt.n	800a6f4 <_malloc_r+0x1c>
 800a6f0:	42a9      	cmp	r1, r5
 800a6f2:	d905      	bls.n	800a700 <_malloc_r+0x28>
 800a6f4:	230c      	movs	r3, #12
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	2600      	movs	r6, #0
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a700:	4e2e      	ldr	r6, [pc, #184]	; (800a7bc <_malloc_r+0xe4>)
 800a702:	f000 fa25 	bl	800ab50 <__malloc_lock>
 800a706:	6833      	ldr	r3, [r6, #0]
 800a708:	461c      	mov	r4, r3
 800a70a:	bb34      	cbnz	r4, 800a75a <_malloc_r+0x82>
 800a70c:	4629      	mov	r1, r5
 800a70e:	4638      	mov	r0, r7
 800a710:	f7ff ffc2 	bl	800a698 <sbrk_aligned>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	4604      	mov	r4, r0
 800a718:	d14d      	bne.n	800a7b6 <_malloc_r+0xde>
 800a71a:	6834      	ldr	r4, [r6, #0]
 800a71c:	4626      	mov	r6, r4
 800a71e:	2e00      	cmp	r6, #0
 800a720:	d140      	bne.n	800a7a4 <_malloc_r+0xcc>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	4631      	mov	r1, r6
 800a726:	4638      	mov	r0, r7
 800a728:	eb04 0803 	add.w	r8, r4, r3
 800a72c:	f000 f9a4 	bl	800aa78 <_sbrk_r>
 800a730:	4580      	cmp	r8, r0
 800a732:	d13a      	bne.n	800a7aa <_malloc_r+0xd2>
 800a734:	6821      	ldr	r1, [r4, #0]
 800a736:	3503      	adds	r5, #3
 800a738:	1a6d      	subs	r5, r5, r1
 800a73a:	f025 0503 	bic.w	r5, r5, #3
 800a73e:	3508      	adds	r5, #8
 800a740:	2d0c      	cmp	r5, #12
 800a742:	bf38      	it	cc
 800a744:	250c      	movcc	r5, #12
 800a746:	4629      	mov	r1, r5
 800a748:	4638      	mov	r0, r7
 800a74a:	f7ff ffa5 	bl	800a698 <sbrk_aligned>
 800a74e:	3001      	adds	r0, #1
 800a750:	d02b      	beq.n	800a7aa <_malloc_r+0xd2>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	442b      	add	r3, r5
 800a756:	6023      	str	r3, [r4, #0]
 800a758:	e00e      	b.n	800a778 <_malloc_r+0xa0>
 800a75a:	6822      	ldr	r2, [r4, #0]
 800a75c:	1b52      	subs	r2, r2, r5
 800a75e:	d41e      	bmi.n	800a79e <_malloc_r+0xc6>
 800a760:	2a0b      	cmp	r2, #11
 800a762:	d916      	bls.n	800a792 <_malloc_r+0xba>
 800a764:	1961      	adds	r1, r4, r5
 800a766:	42a3      	cmp	r3, r4
 800a768:	6025      	str	r5, [r4, #0]
 800a76a:	bf18      	it	ne
 800a76c:	6059      	strne	r1, [r3, #4]
 800a76e:	6863      	ldr	r3, [r4, #4]
 800a770:	bf08      	it	eq
 800a772:	6031      	streq	r1, [r6, #0]
 800a774:	5162      	str	r2, [r4, r5]
 800a776:	604b      	str	r3, [r1, #4]
 800a778:	4638      	mov	r0, r7
 800a77a:	f104 060b 	add.w	r6, r4, #11
 800a77e:	f000 f9ed 	bl	800ab5c <__malloc_unlock>
 800a782:	f026 0607 	bic.w	r6, r6, #7
 800a786:	1d23      	adds	r3, r4, #4
 800a788:	1af2      	subs	r2, r6, r3
 800a78a:	d0b6      	beq.n	800a6fa <_malloc_r+0x22>
 800a78c:	1b9b      	subs	r3, r3, r6
 800a78e:	50a3      	str	r3, [r4, r2]
 800a790:	e7b3      	b.n	800a6fa <_malloc_r+0x22>
 800a792:	6862      	ldr	r2, [r4, #4]
 800a794:	42a3      	cmp	r3, r4
 800a796:	bf0c      	ite	eq
 800a798:	6032      	streq	r2, [r6, #0]
 800a79a:	605a      	strne	r2, [r3, #4]
 800a79c:	e7ec      	b.n	800a778 <_malloc_r+0xa0>
 800a79e:	4623      	mov	r3, r4
 800a7a0:	6864      	ldr	r4, [r4, #4]
 800a7a2:	e7b2      	b.n	800a70a <_malloc_r+0x32>
 800a7a4:	4634      	mov	r4, r6
 800a7a6:	6876      	ldr	r6, [r6, #4]
 800a7a8:	e7b9      	b.n	800a71e <_malloc_r+0x46>
 800a7aa:	230c      	movs	r3, #12
 800a7ac:	603b      	str	r3, [r7, #0]
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f000 f9d4 	bl	800ab5c <__malloc_unlock>
 800a7b4:	e7a1      	b.n	800a6fa <_malloc_r+0x22>
 800a7b6:	6025      	str	r5, [r4, #0]
 800a7b8:	e7de      	b.n	800a778 <_malloc_r+0xa0>
 800a7ba:	bf00      	nop
 800a7bc:	200009b0 	.word	0x200009b0

0800a7c0 <__ssputs_r>:
 800a7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c4:	688e      	ldr	r6, [r1, #8]
 800a7c6:	429e      	cmp	r6, r3
 800a7c8:	4682      	mov	sl, r0
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	4690      	mov	r8, r2
 800a7ce:	461f      	mov	r7, r3
 800a7d0:	d838      	bhi.n	800a844 <__ssputs_r+0x84>
 800a7d2:	898a      	ldrh	r2, [r1, #12]
 800a7d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7d8:	d032      	beq.n	800a840 <__ssputs_r+0x80>
 800a7da:	6825      	ldr	r5, [r4, #0]
 800a7dc:	6909      	ldr	r1, [r1, #16]
 800a7de:	eba5 0901 	sub.w	r9, r5, r1
 800a7e2:	6965      	ldr	r5, [r4, #20]
 800a7e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	444b      	add	r3, r9
 800a7f0:	106d      	asrs	r5, r5, #1
 800a7f2:	429d      	cmp	r5, r3
 800a7f4:	bf38      	it	cc
 800a7f6:	461d      	movcc	r5, r3
 800a7f8:	0553      	lsls	r3, r2, #21
 800a7fa:	d531      	bpl.n	800a860 <__ssputs_r+0xa0>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	f7ff ff6b 	bl	800a6d8 <_malloc_r>
 800a802:	4606      	mov	r6, r0
 800a804:	b950      	cbnz	r0, 800a81c <__ssputs_r+0x5c>
 800a806:	230c      	movs	r3, #12
 800a808:	f8ca 3000 	str.w	r3, [sl]
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a812:	81a3      	strh	r3, [r4, #12]
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81c:	6921      	ldr	r1, [r4, #16]
 800a81e:	464a      	mov	r2, r9
 800a820:	f7fe f818 	bl	8008854 <memcpy>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a82a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82e:	81a3      	strh	r3, [r4, #12]
 800a830:	6126      	str	r6, [r4, #16]
 800a832:	6165      	str	r5, [r4, #20]
 800a834:	444e      	add	r6, r9
 800a836:	eba5 0509 	sub.w	r5, r5, r9
 800a83a:	6026      	str	r6, [r4, #0]
 800a83c:	60a5      	str	r5, [r4, #8]
 800a83e:	463e      	mov	r6, r7
 800a840:	42be      	cmp	r6, r7
 800a842:	d900      	bls.n	800a846 <__ssputs_r+0x86>
 800a844:	463e      	mov	r6, r7
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	4632      	mov	r2, r6
 800a84a:	4641      	mov	r1, r8
 800a84c:	f000 f966 	bl	800ab1c <memmove>
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	1b9b      	subs	r3, r3, r6
 800a854:	60a3      	str	r3, [r4, #8]
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	4433      	add	r3, r6
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	2000      	movs	r0, #0
 800a85e:	e7db      	b.n	800a818 <__ssputs_r+0x58>
 800a860:	462a      	mov	r2, r5
 800a862:	f000 f981 	bl	800ab68 <_realloc_r>
 800a866:	4606      	mov	r6, r0
 800a868:	2800      	cmp	r0, #0
 800a86a:	d1e1      	bne.n	800a830 <__ssputs_r+0x70>
 800a86c:	6921      	ldr	r1, [r4, #16]
 800a86e:	4650      	mov	r0, sl
 800a870:	f7ff fec6 	bl	800a600 <_free_r>
 800a874:	e7c7      	b.n	800a806 <__ssputs_r+0x46>
	...

0800a878 <_svfiprintf_r>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	4698      	mov	r8, r3
 800a87e:	898b      	ldrh	r3, [r1, #12]
 800a880:	061b      	lsls	r3, r3, #24
 800a882:	b09d      	sub	sp, #116	; 0x74
 800a884:	4607      	mov	r7, r0
 800a886:	460d      	mov	r5, r1
 800a888:	4614      	mov	r4, r2
 800a88a:	d50e      	bpl.n	800a8aa <_svfiprintf_r+0x32>
 800a88c:	690b      	ldr	r3, [r1, #16]
 800a88e:	b963      	cbnz	r3, 800a8aa <_svfiprintf_r+0x32>
 800a890:	2140      	movs	r1, #64	; 0x40
 800a892:	f7ff ff21 	bl	800a6d8 <_malloc_r>
 800a896:	6028      	str	r0, [r5, #0]
 800a898:	6128      	str	r0, [r5, #16]
 800a89a:	b920      	cbnz	r0, 800a8a6 <_svfiprintf_r+0x2e>
 800a89c:	230c      	movs	r3, #12
 800a89e:	603b      	str	r3, [r7, #0]
 800a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a4:	e0d1      	b.n	800aa4a <_svfiprintf_r+0x1d2>
 800a8a6:	2340      	movs	r3, #64	; 0x40
 800a8a8:	616b      	str	r3, [r5, #20]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ae:	2320      	movs	r3, #32
 800a8b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8b8:	2330      	movs	r3, #48	; 0x30
 800a8ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa64 <_svfiprintf_r+0x1ec>
 800a8be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8c2:	f04f 0901 	mov.w	r9, #1
 800a8c6:	4623      	mov	r3, r4
 800a8c8:	469a      	mov	sl, r3
 800a8ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ce:	b10a      	cbz	r2, 800a8d4 <_svfiprintf_r+0x5c>
 800a8d0:	2a25      	cmp	r2, #37	; 0x25
 800a8d2:	d1f9      	bne.n	800a8c8 <_svfiprintf_r+0x50>
 800a8d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8d8:	d00b      	beq.n	800a8f2 <_svfiprintf_r+0x7a>
 800a8da:	465b      	mov	r3, fp
 800a8dc:	4622      	mov	r2, r4
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4638      	mov	r0, r7
 800a8e2:	f7ff ff6d 	bl	800a7c0 <__ssputs_r>
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f000 80aa 	beq.w	800aa40 <_svfiprintf_r+0x1c8>
 800a8ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ee:	445a      	add	r2, fp
 800a8f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 80a2 	beq.w	800aa40 <_svfiprintf_r+0x1c8>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a906:	f10a 0a01 	add.w	sl, sl, #1
 800a90a:	9304      	str	r3, [sp, #16]
 800a90c:	9307      	str	r3, [sp, #28]
 800a90e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a912:	931a      	str	r3, [sp, #104]	; 0x68
 800a914:	4654      	mov	r4, sl
 800a916:	2205      	movs	r2, #5
 800a918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a91c:	4851      	ldr	r0, [pc, #324]	; (800aa64 <_svfiprintf_r+0x1ec>)
 800a91e:	f7f5 fc5f 	bl	80001e0 <memchr>
 800a922:	9a04      	ldr	r2, [sp, #16]
 800a924:	b9d8      	cbnz	r0, 800a95e <_svfiprintf_r+0xe6>
 800a926:	06d0      	lsls	r0, r2, #27
 800a928:	bf44      	itt	mi
 800a92a:	2320      	movmi	r3, #32
 800a92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a930:	0711      	lsls	r1, r2, #28
 800a932:	bf44      	itt	mi
 800a934:	232b      	movmi	r3, #43	; 0x2b
 800a936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a93a:	f89a 3000 	ldrb.w	r3, [sl]
 800a93e:	2b2a      	cmp	r3, #42	; 0x2a
 800a940:	d015      	beq.n	800a96e <_svfiprintf_r+0xf6>
 800a942:	9a07      	ldr	r2, [sp, #28]
 800a944:	4654      	mov	r4, sl
 800a946:	2000      	movs	r0, #0
 800a948:	f04f 0c0a 	mov.w	ip, #10
 800a94c:	4621      	mov	r1, r4
 800a94e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a952:	3b30      	subs	r3, #48	; 0x30
 800a954:	2b09      	cmp	r3, #9
 800a956:	d94e      	bls.n	800a9f6 <_svfiprintf_r+0x17e>
 800a958:	b1b0      	cbz	r0, 800a988 <_svfiprintf_r+0x110>
 800a95a:	9207      	str	r2, [sp, #28]
 800a95c:	e014      	b.n	800a988 <_svfiprintf_r+0x110>
 800a95e:	eba0 0308 	sub.w	r3, r0, r8
 800a962:	fa09 f303 	lsl.w	r3, r9, r3
 800a966:	4313      	orrs	r3, r2
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	46a2      	mov	sl, r4
 800a96c:	e7d2      	b.n	800a914 <_svfiprintf_r+0x9c>
 800a96e:	9b03      	ldr	r3, [sp, #12]
 800a970:	1d19      	adds	r1, r3, #4
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	9103      	str	r1, [sp, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	bfbb      	ittet	lt
 800a97a:	425b      	neglt	r3, r3
 800a97c:	f042 0202 	orrlt.w	r2, r2, #2
 800a980:	9307      	strge	r3, [sp, #28]
 800a982:	9307      	strlt	r3, [sp, #28]
 800a984:	bfb8      	it	lt
 800a986:	9204      	strlt	r2, [sp, #16]
 800a988:	7823      	ldrb	r3, [r4, #0]
 800a98a:	2b2e      	cmp	r3, #46	; 0x2e
 800a98c:	d10c      	bne.n	800a9a8 <_svfiprintf_r+0x130>
 800a98e:	7863      	ldrb	r3, [r4, #1]
 800a990:	2b2a      	cmp	r3, #42	; 0x2a
 800a992:	d135      	bne.n	800aa00 <_svfiprintf_r+0x188>
 800a994:	9b03      	ldr	r3, [sp, #12]
 800a996:	1d1a      	adds	r2, r3, #4
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	9203      	str	r2, [sp, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bfb8      	it	lt
 800a9a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9a4:	3402      	adds	r4, #2
 800a9a6:	9305      	str	r3, [sp, #20]
 800a9a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa74 <_svfiprintf_r+0x1fc>
 800a9ac:	7821      	ldrb	r1, [r4, #0]
 800a9ae:	2203      	movs	r2, #3
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	f7f5 fc15 	bl	80001e0 <memchr>
 800a9b6:	b140      	cbz	r0, 800a9ca <_svfiprintf_r+0x152>
 800a9b8:	2340      	movs	r3, #64	; 0x40
 800a9ba:	eba0 000a 	sub.w	r0, r0, sl
 800a9be:	fa03 f000 	lsl.w	r0, r3, r0
 800a9c2:	9b04      	ldr	r3, [sp, #16]
 800a9c4:	4303      	orrs	r3, r0
 800a9c6:	3401      	adds	r4, #1
 800a9c8:	9304      	str	r3, [sp, #16]
 800a9ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ce:	4826      	ldr	r0, [pc, #152]	; (800aa68 <_svfiprintf_r+0x1f0>)
 800a9d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9d4:	2206      	movs	r2, #6
 800a9d6:	f7f5 fc03 	bl	80001e0 <memchr>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d038      	beq.n	800aa50 <_svfiprintf_r+0x1d8>
 800a9de:	4b23      	ldr	r3, [pc, #140]	; (800aa6c <_svfiprintf_r+0x1f4>)
 800a9e0:	bb1b      	cbnz	r3, 800aa2a <_svfiprintf_r+0x1b2>
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	3307      	adds	r3, #7
 800a9e6:	f023 0307 	bic.w	r3, r3, #7
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	9303      	str	r3, [sp, #12]
 800a9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f0:	4433      	add	r3, r6
 800a9f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f4:	e767      	b.n	800a8c6 <_svfiprintf_r+0x4e>
 800a9f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	2001      	movs	r0, #1
 800a9fe:	e7a5      	b.n	800a94c <_svfiprintf_r+0xd4>
 800aa00:	2300      	movs	r3, #0
 800aa02:	3401      	adds	r4, #1
 800aa04:	9305      	str	r3, [sp, #20]
 800aa06:	4619      	mov	r1, r3
 800aa08:	f04f 0c0a 	mov.w	ip, #10
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa12:	3a30      	subs	r2, #48	; 0x30
 800aa14:	2a09      	cmp	r2, #9
 800aa16:	d903      	bls.n	800aa20 <_svfiprintf_r+0x1a8>
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0c5      	beq.n	800a9a8 <_svfiprintf_r+0x130>
 800aa1c:	9105      	str	r1, [sp, #20]
 800aa1e:	e7c3      	b.n	800a9a8 <_svfiprintf_r+0x130>
 800aa20:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa24:	4604      	mov	r4, r0
 800aa26:	2301      	movs	r3, #1
 800aa28:	e7f0      	b.n	800aa0c <_svfiprintf_r+0x194>
 800aa2a:	ab03      	add	r3, sp, #12
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	462a      	mov	r2, r5
 800aa30:	4b0f      	ldr	r3, [pc, #60]	; (800aa70 <_svfiprintf_r+0x1f8>)
 800aa32:	a904      	add	r1, sp, #16
 800aa34:	4638      	mov	r0, r7
 800aa36:	f7fd ffc3 	bl	80089c0 <_printf_float>
 800aa3a:	1c42      	adds	r2, r0, #1
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	d1d6      	bne.n	800a9ee <_svfiprintf_r+0x176>
 800aa40:	89ab      	ldrh	r3, [r5, #12]
 800aa42:	065b      	lsls	r3, r3, #25
 800aa44:	f53f af2c 	bmi.w	800a8a0 <_svfiprintf_r+0x28>
 800aa48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa4a:	b01d      	add	sp, #116	; 0x74
 800aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa50:	ab03      	add	r3, sp, #12
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	462a      	mov	r2, r5
 800aa56:	4b06      	ldr	r3, [pc, #24]	; (800aa70 <_svfiprintf_r+0x1f8>)
 800aa58:	a904      	add	r1, sp, #16
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	f7fe fa54 	bl	8008f08 <_printf_i>
 800aa60:	e7eb      	b.n	800aa3a <_svfiprintf_r+0x1c2>
 800aa62:	bf00      	nop
 800aa64:	0800da64 	.word	0x0800da64
 800aa68:	0800da6e 	.word	0x0800da6e
 800aa6c:	080089c1 	.word	0x080089c1
 800aa70:	0800a7c1 	.word	0x0800a7c1
 800aa74:	0800da6a 	.word	0x0800da6a

0800aa78 <_sbrk_r>:
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4d06      	ldr	r5, [pc, #24]	; (800aa94 <_sbrk_r+0x1c>)
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4604      	mov	r4, r0
 800aa80:	4608      	mov	r0, r1
 800aa82:	602b      	str	r3, [r5, #0]
 800aa84:	f7f7 fff8 	bl	8002a78 <_sbrk>
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	d102      	bne.n	800aa92 <_sbrk_r+0x1a>
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	b103      	cbz	r3, 800aa92 <_sbrk_r+0x1a>
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	200009b8 	.word	0x200009b8

0800aa98 <__assert_func>:
 800aa98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa9a:	4614      	mov	r4, r2
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	4b09      	ldr	r3, [pc, #36]	; (800aac4 <__assert_func+0x2c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	68d8      	ldr	r0, [r3, #12]
 800aaa6:	b14c      	cbz	r4, 800aabc <__assert_func+0x24>
 800aaa8:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <__assert_func+0x30>)
 800aaaa:	9100      	str	r1, [sp, #0]
 800aaac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aab0:	4906      	ldr	r1, [pc, #24]	; (800aacc <__assert_func+0x34>)
 800aab2:	462b      	mov	r3, r5
 800aab4:	f000 f80e 	bl	800aad4 <fiprintf>
 800aab8:	f000 faac 	bl	800b014 <abort>
 800aabc:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <__assert_func+0x38>)
 800aabe:	461c      	mov	r4, r3
 800aac0:	e7f3      	b.n	800aaaa <__assert_func+0x12>
 800aac2:	bf00      	nop
 800aac4:	20000188 	.word	0x20000188
 800aac8:	0800da75 	.word	0x0800da75
 800aacc:	0800da82 	.word	0x0800da82
 800aad0:	0800dab0 	.word	0x0800dab0

0800aad4 <fiprintf>:
 800aad4:	b40e      	push	{r1, r2, r3}
 800aad6:	b503      	push	{r0, r1, lr}
 800aad8:	4601      	mov	r1, r0
 800aada:	ab03      	add	r3, sp, #12
 800aadc:	4805      	ldr	r0, [pc, #20]	; (800aaf4 <fiprintf+0x20>)
 800aade:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae2:	6800      	ldr	r0, [r0, #0]
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	f000 f897 	bl	800ac18 <_vfiprintf_r>
 800aaea:	b002      	add	sp, #8
 800aaec:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaf0:	b003      	add	sp, #12
 800aaf2:	4770      	bx	lr
 800aaf4:	20000188 	.word	0x20000188

0800aaf8 <__ascii_mbtowc>:
 800aaf8:	b082      	sub	sp, #8
 800aafa:	b901      	cbnz	r1, 800aafe <__ascii_mbtowc+0x6>
 800aafc:	a901      	add	r1, sp, #4
 800aafe:	b142      	cbz	r2, 800ab12 <__ascii_mbtowc+0x1a>
 800ab00:	b14b      	cbz	r3, 800ab16 <__ascii_mbtowc+0x1e>
 800ab02:	7813      	ldrb	r3, [r2, #0]
 800ab04:	600b      	str	r3, [r1, #0]
 800ab06:	7812      	ldrb	r2, [r2, #0]
 800ab08:	1e10      	subs	r0, r2, #0
 800ab0a:	bf18      	it	ne
 800ab0c:	2001      	movne	r0, #1
 800ab0e:	b002      	add	sp, #8
 800ab10:	4770      	bx	lr
 800ab12:	4610      	mov	r0, r2
 800ab14:	e7fb      	b.n	800ab0e <__ascii_mbtowc+0x16>
 800ab16:	f06f 0001 	mvn.w	r0, #1
 800ab1a:	e7f8      	b.n	800ab0e <__ascii_mbtowc+0x16>

0800ab1c <memmove>:
 800ab1c:	4288      	cmp	r0, r1
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	eb01 0402 	add.w	r4, r1, r2
 800ab24:	d902      	bls.n	800ab2c <memmove+0x10>
 800ab26:	4284      	cmp	r4, r0
 800ab28:	4623      	mov	r3, r4
 800ab2a:	d807      	bhi.n	800ab3c <memmove+0x20>
 800ab2c:	1e43      	subs	r3, r0, #1
 800ab2e:	42a1      	cmp	r1, r4
 800ab30:	d008      	beq.n	800ab44 <memmove+0x28>
 800ab32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab3a:	e7f8      	b.n	800ab2e <memmove+0x12>
 800ab3c:	4402      	add	r2, r0
 800ab3e:	4601      	mov	r1, r0
 800ab40:	428a      	cmp	r2, r1
 800ab42:	d100      	bne.n	800ab46 <memmove+0x2a>
 800ab44:	bd10      	pop	{r4, pc}
 800ab46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab4e:	e7f7      	b.n	800ab40 <memmove+0x24>

0800ab50 <__malloc_lock>:
 800ab50:	4801      	ldr	r0, [pc, #4]	; (800ab58 <__malloc_lock+0x8>)
 800ab52:	f000 bc1f 	b.w	800b394 <__retarget_lock_acquire_recursive>
 800ab56:	bf00      	nop
 800ab58:	200009bc 	.word	0x200009bc

0800ab5c <__malloc_unlock>:
 800ab5c:	4801      	ldr	r0, [pc, #4]	; (800ab64 <__malloc_unlock+0x8>)
 800ab5e:	f000 bc1a 	b.w	800b396 <__retarget_lock_release_recursive>
 800ab62:	bf00      	nop
 800ab64:	200009bc 	.word	0x200009bc

0800ab68 <_realloc_r>:
 800ab68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6c:	4680      	mov	r8, r0
 800ab6e:	4614      	mov	r4, r2
 800ab70:	460e      	mov	r6, r1
 800ab72:	b921      	cbnz	r1, 800ab7e <_realloc_r+0x16>
 800ab74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab78:	4611      	mov	r1, r2
 800ab7a:	f7ff bdad 	b.w	800a6d8 <_malloc_r>
 800ab7e:	b92a      	cbnz	r2, 800ab8c <_realloc_r+0x24>
 800ab80:	f7ff fd3e 	bl	800a600 <_free_r>
 800ab84:	4625      	mov	r5, r4
 800ab86:	4628      	mov	r0, r5
 800ab88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab8c:	f000 fc6a 	bl	800b464 <_malloc_usable_size_r>
 800ab90:	4284      	cmp	r4, r0
 800ab92:	4607      	mov	r7, r0
 800ab94:	d802      	bhi.n	800ab9c <_realloc_r+0x34>
 800ab96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab9a:	d812      	bhi.n	800abc2 <_realloc_r+0x5a>
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4640      	mov	r0, r8
 800aba0:	f7ff fd9a 	bl	800a6d8 <_malloc_r>
 800aba4:	4605      	mov	r5, r0
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d0ed      	beq.n	800ab86 <_realloc_r+0x1e>
 800abaa:	42bc      	cmp	r4, r7
 800abac:	4622      	mov	r2, r4
 800abae:	4631      	mov	r1, r6
 800abb0:	bf28      	it	cs
 800abb2:	463a      	movcs	r2, r7
 800abb4:	f7fd fe4e 	bl	8008854 <memcpy>
 800abb8:	4631      	mov	r1, r6
 800abba:	4640      	mov	r0, r8
 800abbc:	f7ff fd20 	bl	800a600 <_free_r>
 800abc0:	e7e1      	b.n	800ab86 <_realloc_r+0x1e>
 800abc2:	4635      	mov	r5, r6
 800abc4:	e7df      	b.n	800ab86 <_realloc_r+0x1e>

0800abc6 <__sfputc_r>:
 800abc6:	6893      	ldr	r3, [r2, #8]
 800abc8:	3b01      	subs	r3, #1
 800abca:	2b00      	cmp	r3, #0
 800abcc:	b410      	push	{r4}
 800abce:	6093      	str	r3, [r2, #8]
 800abd0:	da08      	bge.n	800abe4 <__sfputc_r+0x1e>
 800abd2:	6994      	ldr	r4, [r2, #24]
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	db01      	blt.n	800abdc <__sfputc_r+0x16>
 800abd8:	290a      	cmp	r1, #10
 800abda:	d103      	bne.n	800abe4 <__sfputc_r+0x1e>
 800abdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abe0:	f000 b94a 	b.w	800ae78 <__swbuf_r>
 800abe4:	6813      	ldr	r3, [r2, #0]
 800abe6:	1c58      	adds	r0, r3, #1
 800abe8:	6010      	str	r0, [r2, #0]
 800abea:	7019      	strb	r1, [r3, #0]
 800abec:	4608      	mov	r0, r1
 800abee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <__sfputs_r>:
 800abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf6:	4606      	mov	r6, r0
 800abf8:	460f      	mov	r7, r1
 800abfa:	4614      	mov	r4, r2
 800abfc:	18d5      	adds	r5, r2, r3
 800abfe:	42ac      	cmp	r4, r5
 800ac00:	d101      	bne.n	800ac06 <__sfputs_r+0x12>
 800ac02:	2000      	movs	r0, #0
 800ac04:	e007      	b.n	800ac16 <__sfputs_r+0x22>
 800ac06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac0a:	463a      	mov	r2, r7
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	f7ff ffda 	bl	800abc6 <__sfputc_r>
 800ac12:	1c43      	adds	r3, r0, #1
 800ac14:	d1f3      	bne.n	800abfe <__sfputs_r+0xa>
 800ac16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac18 <_vfiprintf_r>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	b09d      	sub	sp, #116	; 0x74
 800ac20:	4614      	mov	r4, r2
 800ac22:	4698      	mov	r8, r3
 800ac24:	4606      	mov	r6, r0
 800ac26:	b118      	cbz	r0, 800ac30 <_vfiprintf_r+0x18>
 800ac28:	6983      	ldr	r3, [r0, #24]
 800ac2a:	b90b      	cbnz	r3, 800ac30 <_vfiprintf_r+0x18>
 800ac2c:	f000 fb14 	bl	800b258 <__sinit>
 800ac30:	4b89      	ldr	r3, [pc, #548]	; (800ae58 <_vfiprintf_r+0x240>)
 800ac32:	429d      	cmp	r5, r3
 800ac34:	d11b      	bne.n	800ac6e <_vfiprintf_r+0x56>
 800ac36:	6875      	ldr	r5, [r6, #4]
 800ac38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac3a:	07d9      	lsls	r1, r3, #31
 800ac3c:	d405      	bmi.n	800ac4a <_vfiprintf_r+0x32>
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	059a      	lsls	r2, r3, #22
 800ac42:	d402      	bmi.n	800ac4a <_vfiprintf_r+0x32>
 800ac44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac46:	f000 fba5 	bl	800b394 <__retarget_lock_acquire_recursive>
 800ac4a:	89ab      	ldrh	r3, [r5, #12]
 800ac4c:	071b      	lsls	r3, r3, #28
 800ac4e:	d501      	bpl.n	800ac54 <_vfiprintf_r+0x3c>
 800ac50:	692b      	ldr	r3, [r5, #16]
 800ac52:	b9eb      	cbnz	r3, 800ac90 <_vfiprintf_r+0x78>
 800ac54:	4629      	mov	r1, r5
 800ac56:	4630      	mov	r0, r6
 800ac58:	f000 f96e 	bl	800af38 <__swsetup_r>
 800ac5c:	b1c0      	cbz	r0, 800ac90 <_vfiprintf_r+0x78>
 800ac5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac60:	07dc      	lsls	r4, r3, #31
 800ac62:	d50e      	bpl.n	800ac82 <_vfiprintf_r+0x6a>
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	b01d      	add	sp, #116	; 0x74
 800ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6e:	4b7b      	ldr	r3, [pc, #492]	; (800ae5c <_vfiprintf_r+0x244>)
 800ac70:	429d      	cmp	r5, r3
 800ac72:	d101      	bne.n	800ac78 <_vfiprintf_r+0x60>
 800ac74:	68b5      	ldr	r5, [r6, #8]
 800ac76:	e7df      	b.n	800ac38 <_vfiprintf_r+0x20>
 800ac78:	4b79      	ldr	r3, [pc, #484]	; (800ae60 <_vfiprintf_r+0x248>)
 800ac7a:	429d      	cmp	r5, r3
 800ac7c:	bf08      	it	eq
 800ac7e:	68f5      	ldreq	r5, [r6, #12]
 800ac80:	e7da      	b.n	800ac38 <_vfiprintf_r+0x20>
 800ac82:	89ab      	ldrh	r3, [r5, #12]
 800ac84:	0598      	lsls	r0, r3, #22
 800ac86:	d4ed      	bmi.n	800ac64 <_vfiprintf_r+0x4c>
 800ac88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac8a:	f000 fb84 	bl	800b396 <__retarget_lock_release_recursive>
 800ac8e:	e7e9      	b.n	800ac64 <_vfiprintf_r+0x4c>
 800ac90:	2300      	movs	r3, #0
 800ac92:	9309      	str	r3, [sp, #36]	; 0x24
 800ac94:	2320      	movs	r3, #32
 800ac96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac9e:	2330      	movs	r3, #48	; 0x30
 800aca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae64 <_vfiprintf_r+0x24c>
 800aca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aca8:	f04f 0901 	mov.w	r9, #1
 800acac:	4623      	mov	r3, r4
 800acae:	469a      	mov	sl, r3
 800acb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acb4:	b10a      	cbz	r2, 800acba <_vfiprintf_r+0xa2>
 800acb6:	2a25      	cmp	r2, #37	; 0x25
 800acb8:	d1f9      	bne.n	800acae <_vfiprintf_r+0x96>
 800acba:	ebba 0b04 	subs.w	fp, sl, r4
 800acbe:	d00b      	beq.n	800acd8 <_vfiprintf_r+0xc0>
 800acc0:	465b      	mov	r3, fp
 800acc2:	4622      	mov	r2, r4
 800acc4:	4629      	mov	r1, r5
 800acc6:	4630      	mov	r0, r6
 800acc8:	f7ff ff94 	bl	800abf4 <__sfputs_r>
 800accc:	3001      	adds	r0, #1
 800acce:	f000 80aa 	beq.w	800ae26 <_vfiprintf_r+0x20e>
 800acd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acd4:	445a      	add	r2, fp
 800acd6:	9209      	str	r2, [sp, #36]	; 0x24
 800acd8:	f89a 3000 	ldrb.w	r3, [sl]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 80a2 	beq.w	800ae26 <_vfiprintf_r+0x20e>
 800ace2:	2300      	movs	r3, #0
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295
 800ace8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acec:	f10a 0a01 	add.w	sl, sl, #1
 800acf0:	9304      	str	r3, [sp, #16]
 800acf2:	9307      	str	r3, [sp, #28]
 800acf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acf8:	931a      	str	r3, [sp, #104]	; 0x68
 800acfa:	4654      	mov	r4, sl
 800acfc:	2205      	movs	r2, #5
 800acfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad02:	4858      	ldr	r0, [pc, #352]	; (800ae64 <_vfiprintf_r+0x24c>)
 800ad04:	f7f5 fa6c 	bl	80001e0 <memchr>
 800ad08:	9a04      	ldr	r2, [sp, #16]
 800ad0a:	b9d8      	cbnz	r0, 800ad44 <_vfiprintf_r+0x12c>
 800ad0c:	06d1      	lsls	r1, r2, #27
 800ad0e:	bf44      	itt	mi
 800ad10:	2320      	movmi	r3, #32
 800ad12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad16:	0713      	lsls	r3, r2, #28
 800ad18:	bf44      	itt	mi
 800ad1a:	232b      	movmi	r3, #43	; 0x2b
 800ad1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad20:	f89a 3000 	ldrb.w	r3, [sl]
 800ad24:	2b2a      	cmp	r3, #42	; 0x2a
 800ad26:	d015      	beq.n	800ad54 <_vfiprintf_r+0x13c>
 800ad28:	9a07      	ldr	r2, [sp, #28]
 800ad2a:	4654      	mov	r4, sl
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	f04f 0c0a 	mov.w	ip, #10
 800ad32:	4621      	mov	r1, r4
 800ad34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad38:	3b30      	subs	r3, #48	; 0x30
 800ad3a:	2b09      	cmp	r3, #9
 800ad3c:	d94e      	bls.n	800addc <_vfiprintf_r+0x1c4>
 800ad3e:	b1b0      	cbz	r0, 800ad6e <_vfiprintf_r+0x156>
 800ad40:	9207      	str	r2, [sp, #28]
 800ad42:	e014      	b.n	800ad6e <_vfiprintf_r+0x156>
 800ad44:	eba0 0308 	sub.w	r3, r0, r8
 800ad48:	fa09 f303 	lsl.w	r3, r9, r3
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	9304      	str	r3, [sp, #16]
 800ad50:	46a2      	mov	sl, r4
 800ad52:	e7d2      	b.n	800acfa <_vfiprintf_r+0xe2>
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	1d19      	adds	r1, r3, #4
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	9103      	str	r1, [sp, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bfbb      	ittet	lt
 800ad60:	425b      	neglt	r3, r3
 800ad62:	f042 0202 	orrlt.w	r2, r2, #2
 800ad66:	9307      	strge	r3, [sp, #28]
 800ad68:	9307      	strlt	r3, [sp, #28]
 800ad6a:	bfb8      	it	lt
 800ad6c:	9204      	strlt	r2, [sp, #16]
 800ad6e:	7823      	ldrb	r3, [r4, #0]
 800ad70:	2b2e      	cmp	r3, #46	; 0x2e
 800ad72:	d10c      	bne.n	800ad8e <_vfiprintf_r+0x176>
 800ad74:	7863      	ldrb	r3, [r4, #1]
 800ad76:	2b2a      	cmp	r3, #42	; 0x2a
 800ad78:	d135      	bne.n	800ade6 <_vfiprintf_r+0x1ce>
 800ad7a:	9b03      	ldr	r3, [sp, #12]
 800ad7c:	1d1a      	adds	r2, r3, #4
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	9203      	str	r2, [sp, #12]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bfb8      	it	lt
 800ad86:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad8a:	3402      	adds	r4, #2
 800ad8c:	9305      	str	r3, [sp, #20]
 800ad8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae74 <_vfiprintf_r+0x25c>
 800ad92:	7821      	ldrb	r1, [r4, #0]
 800ad94:	2203      	movs	r2, #3
 800ad96:	4650      	mov	r0, sl
 800ad98:	f7f5 fa22 	bl	80001e0 <memchr>
 800ad9c:	b140      	cbz	r0, 800adb0 <_vfiprintf_r+0x198>
 800ad9e:	2340      	movs	r3, #64	; 0x40
 800ada0:	eba0 000a 	sub.w	r0, r0, sl
 800ada4:	fa03 f000 	lsl.w	r0, r3, r0
 800ada8:	9b04      	ldr	r3, [sp, #16]
 800adaa:	4303      	orrs	r3, r0
 800adac:	3401      	adds	r4, #1
 800adae:	9304      	str	r3, [sp, #16]
 800adb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb4:	482c      	ldr	r0, [pc, #176]	; (800ae68 <_vfiprintf_r+0x250>)
 800adb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adba:	2206      	movs	r2, #6
 800adbc:	f7f5 fa10 	bl	80001e0 <memchr>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d03f      	beq.n	800ae44 <_vfiprintf_r+0x22c>
 800adc4:	4b29      	ldr	r3, [pc, #164]	; (800ae6c <_vfiprintf_r+0x254>)
 800adc6:	bb1b      	cbnz	r3, 800ae10 <_vfiprintf_r+0x1f8>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	3307      	adds	r3, #7
 800adcc:	f023 0307 	bic.w	r3, r3, #7
 800add0:	3308      	adds	r3, #8
 800add2:	9303      	str	r3, [sp, #12]
 800add4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add6:	443b      	add	r3, r7
 800add8:	9309      	str	r3, [sp, #36]	; 0x24
 800adda:	e767      	b.n	800acac <_vfiprintf_r+0x94>
 800addc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ade0:	460c      	mov	r4, r1
 800ade2:	2001      	movs	r0, #1
 800ade4:	e7a5      	b.n	800ad32 <_vfiprintf_r+0x11a>
 800ade6:	2300      	movs	r3, #0
 800ade8:	3401      	adds	r4, #1
 800adea:	9305      	str	r3, [sp, #20]
 800adec:	4619      	mov	r1, r3
 800adee:	f04f 0c0a 	mov.w	ip, #10
 800adf2:	4620      	mov	r0, r4
 800adf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adf8:	3a30      	subs	r2, #48	; 0x30
 800adfa:	2a09      	cmp	r2, #9
 800adfc:	d903      	bls.n	800ae06 <_vfiprintf_r+0x1ee>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0c5      	beq.n	800ad8e <_vfiprintf_r+0x176>
 800ae02:	9105      	str	r1, [sp, #20]
 800ae04:	e7c3      	b.n	800ad8e <_vfiprintf_r+0x176>
 800ae06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e7f0      	b.n	800adf2 <_vfiprintf_r+0x1da>
 800ae10:	ab03      	add	r3, sp, #12
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	462a      	mov	r2, r5
 800ae16:	4b16      	ldr	r3, [pc, #88]	; (800ae70 <_vfiprintf_r+0x258>)
 800ae18:	a904      	add	r1, sp, #16
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7fd fdd0 	bl	80089c0 <_printf_float>
 800ae20:	4607      	mov	r7, r0
 800ae22:	1c78      	adds	r0, r7, #1
 800ae24:	d1d6      	bne.n	800add4 <_vfiprintf_r+0x1bc>
 800ae26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae28:	07d9      	lsls	r1, r3, #31
 800ae2a:	d405      	bmi.n	800ae38 <_vfiprintf_r+0x220>
 800ae2c:	89ab      	ldrh	r3, [r5, #12]
 800ae2e:	059a      	lsls	r2, r3, #22
 800ae30:	d402      	bmi.n	800ae38 <_vfiprintf_r+0x220>
 800ae32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae34:	f000 faaf 	bl	800b396 <__retarget_lock_release_recursive>
 800ae38:	89ab      	ldrh	r3, [r5, #12]
 800ae3a:	065b      	lsls	r3, r3, #25
 800ae3c:	f53f af12 	bmi.w	800ac64 <_vfiprintf_r+0x4c>
 800ae40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae42:	e711      	b.n	800ac68 <_vfiprintf_r+0x50>
 800ae44:	ab03      	add	r3, sp, #12
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	462a      	mov	r2, r5
 800ae4a:	4b09      	ldr	r3, [pc, #36]	; (800ae70 <_vfiprintf_r+0x258>)
 800ae4c:	a904      	add	r1, sp, #16
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f7fe f85a 	bl	8008f08 <_printf_i>
 800ae54:	e7e4      	b.n	800ae20 <_vfiprintf_r+0x208>
 800ae56:	bf00      	nop
 800ae58:	0800dbdc 	.word	0x0800dbdc
 800ae5c:	0800dbfc 	.word	0x0800dbfc
 800ae60:	0800dbbc 	.word	0x0800dbbc
 800ae64:	0800da64 	.word	0x0800da64
 800ae68:	0800da6e 	.word	0x0800da6e
 800ae6c:	080089c1 	.word	0x080089c1
 800ae70:	0800abf5 	.word	0x0800abf5
 800ae74:	0800da6a 	.word	0x0800da6a

0800ae78 <__swbuf_r>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	460e      	mov	r6, r1
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	4605      	mov	r5, r0
 800ae80:	b118      	cbz	r0, 800ae8a <__swbuf_r+0x12>
 800ae82:	6983      	ldr	r3, [r0, #24]
 800ae84:	b90b      	cbnz	r3, 800ae8a <__swbuf_r+0x12>
 800ae86:	f000 f9e7 	bl	800b258 <__sinit>
 800ae8a:	4b21      	ldr	r3, [pc, #132]	; (800af10 <__swbuf_r+0x98>)
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	d12b      	bne.n	800aee8 <__swbuf_r+0x70>
 800ae90:	686c      	ldr	r4, [r5, #4]
 800ae92:	69a3      	ldr	r3, [r4, #24]
 800ae94:	60a3      	str	r3, [r4, #8]
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	071a      	lsls	r2, r3, #28
 800ae9a:	d52f      	bpl.n	800aefc <__swbuf_r+0x84>
 800ae9c:	6923      	ldr	r3, [r4, #16]
 800ae9e:	b36b      	cbz	r3, 800aefc <__swbuf_r+0x84>
 800aea0:	6923      	ldr	r3, [r4, #16]
 800aea2:	6820      	ldr	r0, [r4, #0]
 800aea4:	1ac0      	subs	r0, r0, r3
 800aea6:	6963      	ldr	r3, [r4, #20]
 800aea8:	b2f6      	uxtb	r6, r6
 800aeaa:	4283      	cmp	r3, r0
 800aeac:	4637      	mov	r7, r6
 800aeae:	dc04      	bgt.n	800aeba <__swbuf_r+0x42>
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	f000 f93c 	bl	800b130 <_fflush_r>
 800aeb8:	bb30      	cbnz	r0, 800af08 <__swbuf_r+0x90>
 800aeba:	68a3      	ldr	r3, [r4, #8]
 800aebc:	3b01      	subs	r3, #1
 800aebe:	60a3      	str	r3, [r4, #8]
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	6022      	str	r2, [r4, #0]
 800aec6:	701e      	strb	r6, [r3, #0]
 800aec8:	6963      	ldr	r3, [r4, #20]
 800aeca:	3001      	adds	r0, #1
 800aecc:	4283      	cmp	r3, r0
 800aece:	d004      	beq.n	800aeda <__swbuf_r+0x62>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	07db      	lsls	r3, r3, #31
 800aed4:	d506      	bpl.n	800aee4 <__swbuf_r+0x6c>
 800aed6:	2e0a      	cmp	r6, #10
 800aed8:	d104      	bne.n	800aee4 <__swbuf_r+0x6c>
 800aeda:	4621      	mov	r1, r4
 800aedc:	4628      	mov	r0, r5
 800aede:	f000 f927 	bl	800b130 <_fflush_r>
 800aee2:	b988      	cbnz	r0, 800af08 <__swbuf_r+0x90>
 800aee4:	4638      	mov	r0, r7
 800aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee8:	4b0a      	ldr	r3, [pc, #40]	; (800af14 <__swbuf_r+0x9c>)
 800aeea:	429c      	cmp	r4, r3
 800aeec:	d101      	bne.n	800aef2 <__swbuf_r+0x7a>
 800aeee:	68ac      	ldr	r4, [r5, #8]
 800aef0:	e7cf      	b.n	800ae92 <__swbuf_r+0x1a>
 800aef2:	4b09      	ldr	r3, [pc, #36]	; (800af18 <__swbuf_r+0xa0>)
 800aef4:	429c      	cmp	r4, r3
 800aef6:	bf08      	it	eq
 800aef8:	68ec      	ldreq	r4, [r5, #12]
 800aefa:	e7ca      	b.n	800ae92 <__swbuf_r+0x1a>
 800aefc:	4621      	mov	r1, r4
 800aefe:	4628      	mov	r0, r5
 800af00:	f000 f81a 	bl	800af38 <__swsetup_r>
 800af04:	2800      	cmp	r0, #0
 800af06:	d0cb      	beq.n	800aea0 <__swbuf_r+0x28>
 800af08:	f04f 37ff 	mov.w	r7, #4294967295
 800af0c:	e7ea      	b.n	800aee4 <__swbuf_r+0x6c>
 800af0e:	bf00      	nop
 800af10:	0800dbdc 	.word	0x0800dbdc
 800af14:	0800dbfc 	.word	0x0800dbfc
 800af18:	0800dbbc 	.word	0x0800dbbc

0800af1c <__ascii_wctomb>:
 800af1c:	b149      	cbz	r1, 800af32 <__ascii_wctomb+0x16>
 800af1e:	2aff      	cmp	r2, #255	; 0xff
 800af20:	bf85      	ittet	hi
 800af22:	238a      	movhi	r3, #138	; 0x8a
 800af24:	6003      	strhi	r3, [r0, #0]
 800af26:	700a      	strbls	r2, [r1, #0]
 800af28:	f04f 30ff 	movhi.w	r0, #4294967295
 800af2c:	bf98      	it	ls
 800af2e:	2001      	movls	r0, #1
 800af30:	4770      	bx	lr
 800af32:	4608      	mov	r0, r1
 800af34:	4770      	bx	lr
	...

0800af38 <__swsetup_r>:
 800af38:	4b32      	ldr	r3, [pc, #200]	; (800b004 <__swsetup_r+0xcc>)
 800af3a:	b570      	push	{r4, r5, r6, lr}
 800af3c:	681d      	ldr	r5, [r3, #0]
 800af3e:	4606      	mov	r6, r0
 800af40:	460c      	mov	r4, r1
 800af42:	b125      	cbz	r5, 800af4e <__swsetup_r+0x16>
 800af44:	69ab      	ldr	r3, [r5, #24]
 800af46:	b913      	cbnz	r3, 800af4e <__swsetup_r+0x16>
 800af48:	4628      	mov	r0, r5
 800af4a:	f000 f985 	bl	800b258 <__sinit>
 800af4e:	4b2e      	ldr	r3, [pc, #184]	; (800b008 <__swsetup_r+0xd0>)
 800af50:	429c      	cmp	r4, r3
 800af52:	d10f      	bne.n	800af74 <__swsetup_r+0x3c>
 800af54:	686c      	ldr	r4, [r5, #4]
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af5c:	0719      	lsls	r1, r3, #28
 800af5e:	d42c      	bmi.n	800afba <__swsetup_r+0x82>
 800af60:	06dd      	lsls	r5, r3, #27
 800af62:	d411      	bmi.n	800af88 <__swsetup_r+0x50>
 800af64:	2309      	movs	r3, #9
 800af66:	6033      	str	r3, [r6, #0]
 800af68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af6c:	81a3      	strh	r3, [r4, #12]
 800af6e:	f04f 30ff 	mov.w	r0, #4294967295
 800af72:	e03e      	b.n	800aff2 <__swsetup_r+0xba>
 800af74:	4b25      	ldr	r3, [pc, #148]	; (800b00c <__swsetup_r+0xd4>)
 800af76:	429c      	cmp	r4, r3
 800af78:	d101      	bne.n	800af7e <__swsetup_r+0x46>
 800af7a:	68ac      	ldr	r4, [r5, #8]
 800af7c:	e7eb      	b.n	800af56 <__swsetup_r+0x1e>
 800af7e:	4b24      	ldr	r3, [pc, #144]	; (800b010 <__swsetup_r+0xd8>)
 800af80:	429c      	cmp	r4, r3
 800af82:	bf08      	it	eq
 800af84:	68ec      	ldreq	r4, [r5, #12]
 800af86:	e7e6      	b.n	800af56 <__swsetup_r+0x1e>
 800af88:	0758      	lsls	r0, r3, #29
 800af8a:	d512      	bpl.n	800afb2 <__swsetup_r+0x7a>
 800af8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af8e:	b141      	cbz	r1, 800afa2 <__swsetup_r+0x6a>
 800af90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af94:	4299      	cmp	r1, r3
 800af96:	d002      	beq.n	800af9e <__swsetup_r+0x66>
 800af98:	4630      	mov	r0, r6
 800af9a:	f7ff fb31 	bl	800a600 <_free_r>
 800af9e:	2300      	movs	r3, #0
 800afa0:	6363      	str	r3, [r4, #52]	; 0x34
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800afa8:	81a3      	strh	r3, [r4, #12]
 800afaa:	2300      	movs	r3, #0
 800afac:	6063      	str	r3, [r4, #4]
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	f043 0308 	orr.w	r3, r3, #8
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	6923      	ldr	r3, [r4, #16]
 800afbc:	b94b      	cbnz	r3, 800afd2 <__swsetup_r+0x9a>
 800afbe:	89a3      	ldrh	r3, [r4, #12]
 800afc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afc8:	d003      	beq.n	800afd2 <__swsetup_r+0x9a>
 800afca:	4621      	mov	r1, r4
 800afcc:	4630      	mov	r0, r6
 800afce:	f000 fa09 	bl	800b3e4 <__smakebuf_r>
 800afd2:	89a0      	ldrh	r0, [r4, #12]
 800afd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afd8:	f010 0301 	ands.w	r3, r0, #1
 800afdc:	d00a      	beq.n	800aff4 <__swsetup_r+0xbc>
 800afde:	2300      	movs	r3, #0
 800afe0:	60a3      	str	r3, [r4, #8]
 800afe2:	6963      	ldr	r3, [r4, #20]
 800afe4:	425b      	negs	r3, r3
 800afe6:	61a3      	str	r3, [r4, #24]
 800afe8:	6923      	ldr	r3, [r4, #16]
 800afea:	b943      	cbnz	r3, 800affe <__swsetup_r+0xc6>
 800afec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aff0:	d1ba      	bne.n	800af68 <__swsetup_r+0x30>
 800aff2:	bd70      	pop	{r4, r5, r6, pc}
 800aff4:	0781      	lsls	r1, r0, #30
 800aff6:	bf58      	it	pl
 800aff8:	6963      	ldrpl	r3, [r4, #20]
 800affa:	60a3      	str	r3, [r4, #8]
 800affc:	e7f4      	b.n	800afe8 <__swsetup_r+0xb0>
 800affe:	2000      	movs	r0, #0
 800b000:	e7f7      	b.n	800aff2 <__swsetup_r+0xba>
 800b002:	bf00      	nop
 800b004:	20000188 	.word	0x20000188
 800b008:	0800dbdc 	.word	0x0800dbdc
 800b00c:	0800dbfc 	.word	0x0800dbfc
 800b010:	0800dbbc 	.word	0x0800dbbc

0800b014 <abort>:
 800b014:	b508      	push	{r3, lr}
 800b016:	2006      	movs	r0, #6
 800b018:	f000 fa54 	bl	800b4c4 <raise>
 800b01c:	2001      	movs	r0, #1
 800b01e:	f7f7 fcb3 	bl	8002988 <_exit>
	...

0800b024 <__sflush_r>:
 800b024:	898a      	ldrh	r2, [r1, #12]
 800b026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b02a:	4605      	mov	r5, r0
 800b02c:	0710      	lsls	r0, r2, #28
 800b02e:	460c      	mov	r4, r1
 800b030:	d458      	bmi.n	800b0e4 <__sflush_r+0xc0>
 800b032:	684b      	ldr	r3, [r1, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	dc05      	bgt.n	800b044 <__sflush_r+0x20>
 800b038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dc02      	bgt.n	800b044 <__sflush_r+0x20>
 800b03e:	2000      	movs	r0, #0
 800b040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b046:	2e00      	cmp	r6, #0
 800b048:	d0f9      	beq.n	800b03e <__sflush_r+0x1a>
 800b04a:	2300      	movs	r3, #0
 800b04c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b050:	682f      	ldr	r7, [r5, #0]
 800b052:	602b      	str	r3, [r5, #0]
 800b054:	d032      	beq.n	800b0bc <__sflush_r+0x98>
 800b056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	075a      	lsls	r2, r3, #29
 800b05c:	d505      	bpl.n	800b06a <__sflush_r+0x46>
 800b05e:	6863      	ldr	r3, [r4, #4]
 800b060:	1ac0      	subs	r0, r0, r3
 800b062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b064:	b10b      	cbz	r3, 800b06a <__sflush_r+0x46>
 800b066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b068:	1ac0      	subs	r0, r0, r3
 800b06a:	2300      	movs	r3, #0
 800b06c:	4602      	mov	r2, r0
 800b06e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b070:	6a21      	ldr	r1, [r4, #32]
 800b072:	4628      	mov	r0, r5
 800b074:	47b0      	blx	r6
 800b076:	1c43      	adds	r3, r0, #1
 800b078:	89a3      	ldrh	r3, [r4, #12]
 800b07a:	d106      	bne.n	800b08a <__sflush_r+0x66>
 800b07c:	6829      	ldr	r1, [r5, #0]
 800b07e:	291d      	cmp	r1, #29
 800b080:	d82c      	bhi.n	800b0dc <__sflush_r+0xb8>
 800b082:	4a2a      	ldr	r2, [pc, #168]	; (800b12c <__sflush_r+0x108>)
 800b084:	40ca      	lsrs	r2, r1
 800b086:	07d6      	lsls	r6, r2, #31
 800b088:	d528      	bpl.n	800b0dc <__sflush_r+0xb8>
 800b08a:	2200      	movs	r2, #0
 800b08c:	6062      	str	r2, [r4, #4]
 800b08e:	04d9      	lsls	r1, r3, #19
 800b090:	6922      	ldr	r2, [r4, #16]
 800b092:	6022      	str	r2, [r4, #0]
 800b094:	d504      	bpl.n	800b0a0 <__sflush_r+0x7c>
 800b096:	1c42      	adds	r2, r0, #1
 800b098:	d101      	bne.n	800b09e <__sflush_r+0x7a>
 800b09a:	682b      	ldr	r3, [r5, #0]
 800b09c:	b903      	cbnz	r3, 800b0a0 <__sflush_r+0x7c>
 800b09e:	6560      	str	r0, [r4, #84]	; 0x54
 800b0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0a2:	602f      	str	r7, [r5, #0]
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	d0ca      	beq.n	800b03e <__sflush_r+0x1a>
 800b0a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0ac:	4299      	cmp	r1, r3
 800b0ae:	d002      	beq.n	800b0b6 <__sflush_r+0x92>
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f7ff faa5 	bl	800a600 <_free_r>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	6360      	str	r0, [r4, #52]	; 0x34
 800b0ba:	e7c1      	b.n	800b040 <__sflush_r+0x1c>
 800b0bc:	6a21      	ldr	r1, [r4, #32]
 800b0be:	2301      	movs	r3, #1
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	47b0      	blx	r6
 800b0c4:	1c41      	adds	r1, r0, #1
 800b0c6:	d1c7      	bne.n	800b058 <__sflush_r+0x34>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0c4      	beq.n	800b058 <__sflush_r+0x34>
 800b0ce:	2b1d      	cmp	r3, #29
 800b0d0:	d001      	beq.n	800b0d6 <__sflush_r+0xb2>
 800b0d2:	2b16      	cmp	r3, #22
 800b0d4:	d101      	bne.n	800b0da <__sflush_r+0xb6>
 800b0d6:	602f      	str	r7, [r5, #0]
 800b0d8:	e7b1      	b.n	800b03e <__sflush_r+0x1a>
 800b0da:	89a3      	ldrh	r3, [r4, #12]
 800b0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0e0:	81a3      	strh	r3, [r4, #12]
 800b0e2:	e7ad      	b.n	800b040 <__sflush_r+0x1c>
 800b0e4:	690f      	ldr	r7, [r1, #16]
 800b0e6:	2f00      	cmp	r7, #0
 800b0e8:	d0a9      	beq.n	800b03e <__sflush_r+0x1a>
 800b0ea:	0793      	lsls	r3, r2, #30
 800b0ec:	680e      	ldr	r6, [r1, #0]
 800b0ee:	bf08      	it	eq
 800b0f0:	694b      	ldreq	r3, [r1, #20]
 800b0f2:	600f      	str	r7, [r1, #0]
 800b0f4:	bf18      	it	ne
 800b0f6:	2300      	movne	r3, #0
 800b0f8:	eba6 0807 	sub.w	r8, r6, r7
 800b0fc:	608b      	str	r3, [r1, #8]
 800b0fe:	f1b8 0f00 	cmp.w	r8, #0
 800b102:	dd9c      	ble.n	800b03e <__sflush_r+0x1a>
 800b104:	6a21      	ldr	r1, [r4, #32]
 800b106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b108:	4643      	mov	r3, r8
 800b10a:	463a      	mov	r2, r7
 800b10c:	4628      	mov	r0, r5
 800b10e:	47b0      	blx	r6
 800b110:	2800      	cmp	r0, #0
 800b112:	dc06      	bgt.n	800b122 <__sflush_r+0xfe>
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b11a:	81a3      	strh	r3, [r4, #12]
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	e78e      	b.n	800b040 <__sflush_r+0x1c>
 800b122:	4407      	add	r7, r0
 800b124:	eba8 0800 	sub.w	r8, r8, r0
 800b128:	e7e9      	b.n	800b0fe <__sflush_r+0xda>
 800b12a:	bf00      	nop
 800b12c:	20400001 	.word	0x20400001

0800b130 <_fflush_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	690b      	ldr	r3, [r1, #16]
 800b134:	4605      	mov	r5, r0
 800b136:	460c      	mov	r4, r1
 800b138:	b913      	cbnz	r3, 800b140 <_fflush_r+0x10>
 800b13a:	2500      	movs	r5, #0
 800b13c:	4628      	mov	r0, r5
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	b118      	cbz	r0, 800b14a <_fflush_r+0x1a>
 800b142:	6983      	ldr	r3, [r0, #24]
 800b144:	b90b      	cbnz	r3, 800b14a <_fflush_r+0x1a>
 800b146:	f000 f887 	bl	800b258 <__sinit>
 800b14a:	4b14      	ldr	r3, [pc, #80]	; (800b19c <_fflush_r+0x6c>)
 800b14c:	429c      	cmp	r4, r3
 800b14e:	d11b      	bne.n	800b188 <_fflush_r+0x58>
 800b150:	686c      	ldr	r4, [r5, #4]
 800b152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0ef      	beq.n	800b13a <_fflush_r+0xa>
 800b15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b15c:	07d0      	lsls	r0, r2, #31
 800b15e:	d404      	bmi.n	800b16a <_fflush_r+0x3a>
 800b160:	0599      	lsls	r1, r3, #22
 800b162:	d402      	bmi.n	800b16a <_fflush_r+0x3a>
 800b164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b166:	f000 f915 	bl	800b394 <__retarget_lock_acquire_recursive>
 800b16a:	4628      	mov	r0, r5
 800b16c:	4621      	mov	r1, r4
 800b16e:	f7ff ff59 	bl	800b024 <__sflush_r>
 800b172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b174:	07da      	lsls	r2, r3, #31
 800b176:	4605      	mov	r5, r0
 800b178:	d4e0      	bmi.n	800b13c <_fflush_r+0xc>
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	059b      	lsls	r3, r3, #22
 800b17e:	d4dd      	bmi.n	800b13c <_fflush_r+0xc>
 800b180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b182:	f000 f908 	bl	800b396 <__retarget_lock_release_recursive>
 800b186:	e7d9      	b.n	800b13c <_fflush_r+0xc>
 800b188:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <_fflush_r+0x70>)
 800b18a:	429c      	cmp	r4, r3
 800b18c:	d101      	bne.n	800b192 <_fflush_r+0x62>
 800b18e:	68ac      	ldr	r4, [r5, #8]
 800b190:	e7df      	b.n	800b152 <_fflush_r+0x22>
 800b192:	4b04      	ldr	r3, [pc, #16]	; (800b1a4 <_fflush_r+0x74>)
 800b194:	429c      	cmp	r4, r3
 800b196:	bf08      	it	eq
 800b198:	68ec      	ldreq	r4, [r5, #12]
 800b19a:	e7da      	b.n	800b152 <_fflush_r+0x22>
 800b19c:	0800dbdc 	.word	0x0800dbdc
 800b1a0:	0800dbfc 	.word	0x0800dbfc
 800b1a4:	0800dbbc 	.word	0x0800dbbc

0800b1a8 <std>:
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b1b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1b6:	6083      	str	r3, [r0, #8]
 800b1b8:	8181      	strh	r1, [r0, #12]
 800b1ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b1bc:	81c2      	strh	r2, [r0, #14]
 800b1be:	6183      	str	r3, [r0, #24]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	2208      	movs	r2, #8
 800b1c4:	305c      	adds	r0, #92	; 0x5c
 800b1c6:	f7fd fb53 	bl	8008870 <memset>
 800b1ca:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <std+0x38>)
 800b1cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b1ce:	4b05      	ldr	r3, [pc, #20]	; (800b1e4 <std+0x3c>)
 800b1d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1d2:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <std+0x40>)
 800b1d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1d6:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <std+0x44>)
 800b1d8:	6224      	str	r4, [r4, #32]
 800b1da:	6323      	str	r3, [r4, #48]	; 0x30
 800b1dc:	bd10      	pop	{r4, pc}
 800b1de:	bf00      	nop
 800b1e0:	0800b4fd 	.word	0x0800b4fd
 800b1e4:	0800b51f 	.word	0x0800b51f
 800b1e8:	0800b557 	.word	0x0800b557
 800b1ec:	0800b57b 	.word	0x0800b57b

0800b1f0 <_cleanup_r>:
 800b1f0:	4901      	ldr	r1, [pc, #4]	; (800b1f8 <_cleanup_r+0x8>)
 800b1f2:	f000 b8af 	b.w	800b354 <_fwalk_reent>
 800b1f6:	bf00      	nop
 800b1f8:	0800b131 	.word	0x0800b131

0800b1fc <__sfmoreglue>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	2268      	movs	r2, #104	; 0x68
 800b200:	1e4d      	subs	r5, r1, #1
 800b202:	4355      	muls	r5, r2
 800b204:	460e      	mov	r6, r1
 800b206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b20a:	f7ff fa65 	bl	800a6d8 <_malloc_r>
 800b20e:	4604      	mov	r4, r0
 800b210:	b140      	cbz	r0, 800b224 <__sfmoreglue+0x28>
 800b212:	2100      	movs	r1, #0
 800b214:	e9c0 1600 	strd	r1, r6, [r0]
 800b218:	300c      	adds	r0, #12
 800b21a:	60a0      	str	r0, [r4, #8]
 800b21c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b220:	f7fd fb26 	bl	8008870 <memset>
 800b224:	4620      	mov	r0, r4
 800b226:	bd70      	pop	{r4, r5, r6, pc}

0800b228 <__sfp_lock_acquire>:
 800b228:	4801      	ldr	r0, [pc, #4]	; (800b230 <__sfp_lock_acquire+0x8>)
 800b22a:	f000 b8b3 	b.w	800b394 <__retarget_lock_acquire_recursive>
 800b22e:	bf00      	nop
 800b230:	200009bd 	.word	0x200009bd

0800b234 <__sfp_lock_release>:
 800b234:	4801      	ldr	r0, [pc, #4]	; (800b23c <__sfp_lock_release+0x8>)
 800b236:	f000 b8ae 	b.w	800b396 <__retarget_lock_release_recursive>
 800b23a:	bf00      	nop
 800b23c:	200009bd 	.word	0x200009bd

0800b240 <__sinit_lock_acquire>:
 800b240:	4801      	ldr	r0, [pc, #4]	; (800b248 <__sinit_lock_acquire+0x8>)
 800b242:	f000 b8a7 	b.w	800b394 <__retarget_lock_acquire_recursive>
 800b246:	bf00      	nop
 800b248:	200009be 	.word	0x200009be

0800b24c <__sinit_lock_release>:
 800b24c:	4801      	ldr	r0, [pc, #4]	; (800b254 <__sinit_lock_release+0x8>)
 800b24e:	f000 b8a2 	b.w	800b396 <__retarget_lock_release_recursive>
 800b252:	bf00      	nop
 800b254:	200009be 	.word	0x200009be

0800b258 <__sinit>:
 800b258:	b510      	push	{r4, lr}
 800b25a:	4604      	mov	r4, r0
 800b25c:	f7ff fff0 	bl	800b240 <__sinit_lock_acquire>
 800b260:	69a3      	ldr	r3, [r4, #24]
 800b262:	b11b      	cbz	r3, 800b26c <__sinit+0x14>
 800b264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b268:	f7ff bff0 	b.w	800b24c <__sinit_lock_release>
 800b26c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b270:	6523      	str	r3, [r4, #80]	; 0x50
 800b272:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <__sinit+0x68>)
 800b274:	4a13      	ldr	r2, [pc, #76]	; (800b2c4 <__sinit+0x6c>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	62a2      	str	r2, [r4, #40]	; 0x28
 800b27a:	42a3      	cmp	r3, r4
 800b27c:	bf04      	itt	eq
 800b27e:	2301      	moveq	r3, #1
 800b280:	61a3      	streq	r3, [r4, #24]
 800b282:	4620      	mov	r0, r4
 800b284:	f000 f820 	bl	800b2c8 <__sfp>
 800b288:	6060      	str	r0, [r4, #4]
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f81c 	bl	800b2c8 <__sfp>
 800b290:	60a0      	str	r0, [r4, #8]
 800b292:	4620      	mov	r0, r4
 800b294:	f000 f818 	bl	800b2c8 <__sfp>
 800b298:	2200      	movs	r2, #0
 800b29a:	60e0      	str	r0, [r4, #12]
 800b29c:	2104      	movs	r1, #4
 800b29e:	6860      	ldr	r0, [r4, #4]
 800b2a0:	f7ff ff82 	bl	800b1a8 <std>
 800b2a4:	68a0      	ldr	r0, [r4, #8]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	2109      	movs	r1, #9
 800b2aa:	f7ff ff7d 	bl	800b1a8 <std>
 800b2ae:	68e0      	ldr	r0, [r4, #12]
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	2112      	movs	r1, #18
 800b2b4:	f7ff ff78 	bl	800b1a8 <std>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	61a3      	str	r3, [r4, #24]
 800b2bc:	e7d2      	b.n	800b264 <__sinit+0xc>
 800b2be:	bf00      	nop
 800b2c0:	0800d844 	.word	0x0800d844
 800b2c4:	0800b1f1 	.word	0x0800b1f1

0800b2c8 <__sfp>:
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	f7ff ffac 	bl	800b228 <__sfp_lock_acquire>
 800b2d0:	4b1e      	ldr	r3, [pc, #120]	; (800b34c <__sfp+0x84>)
 800b2d2:	681e      	ldr	r6, [r3, #0]
 800b2d4:	69b3      	ldr	r3, [r6, #24]
 800b2d6:	b913      	cbnz	r3, 800b2de <__sfp+0x16>
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f7ff ffbd 	bl	800b258 <__sinit>
 800b2de:	3648      	adds	r6, #72	; 0x48
 800b2e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	d503      	bpl.n	800b2f0 <__sfp+0x28>
 800b2e8:	6833      	ldr	r3, [r6, #0]
 800b2ea:	b30b      	cbz	r3, 800b330 <__sfp+0x68>
 800b2ec:	6836      	ldr	r6, [r6, #0]
 800b2ee:	e7f7      	b.n	800b2e0 <__sfp+0x18>
 800b2f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2f4:	b9d5      	cbnz	r5, 800b32c <__sfp+0x64>
 800b2f6:	4b16      	ldr	r3, [pc, #88]	; (800b350 <__sfp+0x88>)
 800b2f8:	60e3      	str	r3, [r4, #12]
 800b2fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2fe:	6665      	str	r5, [r4, #100]	; 0x64
 800b300:	f000 f847 	bl	800b392 <__retarget_lock_init_recursive>
 800b304:	f7ff ff96 	bl	800b234 <__sfp_lock_release>
 800b308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b30c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b310:	6025      	str	r5, [r4, #0]
 800b312:	61a5      	str	r5, [r4, #24]
 800b314:	2208      	movs	r2, #8
 800b316:	4629      	mov	r1, r5
 800b318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b31c:	f7fd faa8 	bl	8008870 <memset>
 800b320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b328:	4620      	mov	r0, r4
 800b32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b32c:	3468      	adds	r4, #104	; 0x68
 800b32e:	e7d9      	b.n	800b2e4 <__sfp+0x1c>
 800b330:	2104      	movs	r1, #4
 800b332:	4638      	mov	r0, r7
 800b334:	f7ff ff62 	bl	800b1fc <__sfmoreglue>
 800b338:	4604      	mov	r4, r0
 800b33a:	6030      	str	r0, [r6, #0]
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d1d5      	bne.n	800b2ec <__sfp+0x24>
 800b340:	f7ff ff78 	bl	800b234 <__sfp_lock_release>
 800b344:	230c      	movs	r3, #12
 800b346:	603b      	str	r3, [r7, #0]
 800b348:	e7ee      	b.n	800b328 <__sfp+0x60>
 800b34a:	bf00      	nop
 800b34c:	0800d844 	.word	0x0800d844
 800b350:	ffff0001 	.word	0xffff0001

0800b354 <_fwalk_reent>:
 800b354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b358:	4606      	mov	r6, r0
 800b35a:	4688      	mov	r8, r1
 800b35c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b360:	2700      	movs	r7, #0
 800b362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b366:	f1b9 0901 	subs.w	r9, r9, #1
 800b36a:	d505      	bpl.n	800b378 <_fwalk_reent+0x24>
 800b36c:	6824      	ldr	r4, [r4, #0]
 800b36e:	2c00      	cmp	r4, #0
 800b370:	d1f7      	bne.n	800b362 <_fwalk_reent+0xe>
 800b372:	4638      	mov	r0, r7
 800b374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b378:	89ab      	ldrh	r3, [r5, #12]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d907      	bls.n	800b38e <_fwalk_reent+0x3a>
 800b37e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b382:	3301      	adds	r3, #1
 800b384:	d003      	beq.n	800b38e <_fwalk_reent+0x3a>
 800b386:	4629      	mov	r1, r5
 800b388:	4630      	mov	r0, r6
 800b38a:	47c0      	blx	r8
 800b38c:	4307      	orrs	r7, r0
 800b38e:	3568      	adds	r5, #104	; 0x68
 800b390:	e7e9      	b.n	800b366 <_fwalk_reent+0x12>

0800b392 <__retarget_lock_init_recursive>:
 800b392:	4770      	bx	lr

0800b394 <__retarget_lock_acquire_recursive>:
 800b394:	4770      	bx	lr

0800b396 <__retarget_lock_release_recursive>:
 800b396:	4770      	bx	lr

0800b398 <__swhatbuf_r>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	460e      	mov	r6, r1
 800b39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a0:	2900      	cmp	r1, #0
 800b3a2:	b096      	sub	sp, #88	; 0x58
 800b3a4:	4614      	mov	r4, r2
 800b3a6:	461d      	mov	r5, r3
 800b3a8:	da08      	bge.n	800b3bc <__swhatbuf_r+0x24>
 800b3aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	602a      	str	r2, [r5, #0]
 800b3b2:	061a      	lsls	r2, r3, #24
 800b3b4:	d410      	bmi.n	800b3d8 <__swhatbuf_r+0x40>
 800b3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ba:	e00e      	b.n	800b3da <__swhatbuf_r+0x42>
 800b3bc:	466a      	mov	r2, sp
 800b3be:	f000 f903 	bl	800b5c8 <_fstat_r>
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	dbf1      	blt.n	800b3aa <__swhatbuf_r+0x12>
 800b3c6:	9a01      	ldr	r2, [sp, #4]
 800b3c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3d0:	425a      	negs	r2, r3
 800b3d2:	415a      	adcs	r2, r3
 800b3d4:	602a      	str	r2, [r5, #0]
 800b3d6:	e7ee      	b.n	800b3b6 <__swhatbuf_r+0x1e>
 800b3d8:	2340      	movs	r3, #64	; 0x40
 800b3da:	2000      	movs	r0, #0
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	b016      	add	sp, #88	; 0x58
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3e4 <__smakebuf_r>:
 800b3e4:	898b      	ldrh	r3, [r1, #12]
 800b3e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3e8:	079d      	lsls	r5, r3, #30
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	d507      	bpl.n	800b400 <__smakebuf_r+0x1c>
 800b3f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	6123      	str	r3, [r4, #16]
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	6163      	str	r3, [r4, #20]
 800b3fc:	b002      	add	sp, #8
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}
 800b400:	ab01      	add	r3, sp, #4
 800b402:	466a      	mov	r2, sp
 800b404:	f7ff ffc8 	bl	800b398 <__swhatbuf_r>
 800b408:	9900      	ldr	r1, [sp, #0]
 800b40a:	4605      	mov	r5, r0
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7ff f963 	bl	800a6d8 <_malloc_r>
 800b412:	b948      	cbnz	r0, 800b428 <__smakebuf_r+0x44>
 800b414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b418:	059a      	lsls	r2, r3, #22
 800b41a:	d4ef      	bmi.n	800b3fc <__smakebuf_r+0x18>
 800b41c:	f023 0303 	bic.w	r3, r3, #3
 800b420:	f043 0302 	orr.w	r3, r3, #2
 800b424:	81a3      	strh	r3, [r4, #12]
 800b426:	e7e3      	b.n	800b3f0 <__smakebuf_r+0xc>
 800b428:	4b0d      	ldr	r3, [pc, #52]	; (800b460 <__smakebuf_r+0x7c>)
 800b42a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b42c:	89a3      	ldrh	r3, [r4, #12]
 800b42e:	6020      	str	r0, [r4, #0]
 800b430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b434:	81a3      	strh	r3, [r4, #12]
 800b436:	9b00      	ldr	r3, [sp, #0]
 800b438:	6163      	str	r3, [r4, #20]
 800b43a:	9b01      	ldr	r3, [sp, #4]
 800b43c:	6120      	str	r0, [r4, #16]
 800b43e:	b15b      	cbz	r3, 800b458 <__smakebuf_r+0x74>
 800b440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b444:	4630      	mov	r0, r6
 800b446:	f000 f8d1 	bl	800b5ec <_isatty_r>
 800b44a:	b128      	cbz	r0, 800b458 <__smakebuf_r+0x74>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	f023 0303 	bic.w	r3, r3, #3
 800b452:	f043 0301 	orr.w	r3, r3, #1
 800b456:	81a3      	strh	r3, [r4, #12]
 800b458:	89a0      	ldrh	r0, [r4, #12]
 800b45a:	4305      	orrs	r5, r0
 800b45c:	81a5      	strh	r5, [r4, #12]
 800b45e:	e7cd      	b.n	800b3fc <__smakebuf_r+0x18>
 800b460:	0800b1f1 	.word	0x0800b1f1

0800b464 <_malloc_usable_size_r>:
 800b464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b468:	1f18      	subs	r0, r3, #4
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	bfbc      	itt	lt
 800b46e:	580b      	ldrlt	r3, [r1, r0]
 800b470:	18c0      	addlt	r0, r0, r3
 800b472:	4770      	bx	lr

0800b474 <_raise_r>:
 800b474:	291f      	cmp	r1, #31
 800b476:	b538      	push	{r3, r4, r5, lr}
 800b478:	4604      	mov	r4, r0
 800b47a:	460d      	mov	r5, r1
 800b47c:	d904      	bls.n	800b488 <_raise_r+0x14>
 800b47e:	2316      	movs	r3, #22
 800b480:	6003      	str	r3, [r0, #0]
 800b482:	f04f 30ff 	mov.w	r0, #4294967295
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b48a:	b112      	cbz	r2, 800b492 <_raise_r+0x1e>
 800b48c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b490:	b94b      	cbnz	r3, 800b4a6 <_raise_r+0x32>
 800b492:	4620      	mov	r0, r4
 800b494:	f000 f830 	bl	800b4f8 <_getpid_r>
 800b498:	462a      	mov	r2, r5
 800b49a:	4601      	mov	r1, r0
 800b49c:	4620      	mov	r0, r4
 800b49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4a2:	f000 b817 	b.w	800b4d4 <_kill_r>
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d00a      	beq.n	800b4c0 <_raise_r+0x4c>
 800b4aa:	1c59      	adds	r1, r3, #1
 800b4ac:	d103      	bne.n	800b4b6 <_raise_r+0x42>
 800b4ae:	2316      	movs	r3, #22
 800b4b0:	6003      	str	r3, [r0, #0]
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	e7e7      	b.n	800b486 <_raise_r+0x12>
 800b4b6:	2400      	movs	r4, #0
 800b4b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4bc:	4628      	mov	r0, r5
 800b4be:	4798      	blx	r3
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	e7e0      	b.n	800b486 <_raise_r+0x12>

0800b4c4 <raise>:
 800b4c4:	4b02      	ldr	r3, [pc, #8]	; (800b4d0 <raise+0xc>)
 800b4c6:	4601      	mov	r1, r0
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	f7ff bfd3 	b.w	800b474 <_raise_r>
 800b4ce:	bf00      	nop
 800b4d0:	20000188 	.word	0x20000188

0800b4d4 <_kill_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4d07      	ldr	r5, [pc, #28]	; (800b4f4 <_kill_r+0x20>)
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4604      	mov	r4, r0
 800b4dc:	4608      	mov	r0, r1
 800b4de:	4611      	mov	r1, r2
 800b4e0:	602b      	str	r3, [r5, #0]
 800b4e2:	f7f7 fa41 	bl	8002968 <_kill>
 800b4e6:	1c43      	adds	r3, r0, #1
 800b4e8:	d102      	bne.n	800b4f0 <_kill_r+0x1c>
 800b4ea:	682b      	ldr	r3, [r5, #0]
 800b4ec:	b103      	cbz	r3, 800b4f0 <_kill_r+0x1c>
 800b4ee:	6023      	str	r3, [r4, #0]
 800b4f0:	bd38      	pop	{r3, r4, r5, pc}
 800b4f2:	bf00      	nop
 800b4f4:	200009b8 	.word	0x200009b8

0800b4f8 <_getpid_r>:
 800b4f8:	f7f7 ba2e 	b.w	8002958 <_getpid>

0800b4fc <__sread>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	460c      	mov	r4, r1
 800b500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b504:	f000 f894 	bl	800b630 <_read_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	bfab      	itete	ge
 800b50c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b50e:	89a3      	ldrhlt	r3, [r4, #12]
 800b510:	181b      	addge	r3, r3, r0
 800b512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b516:	bfac      	ite	ge
 800b518:	6563      	strge	r3, [r4, #84]	; 0x54
 800b51a:	81a3      	strhlt	r3, [r4, #12]
 800b51c:	bd10      	pop	{r4, pc}

0800b51e <__swrite>:
 800b51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b522:	461f      	mov	r7, r3
 800b524:	898b      	ldrh	r3, [r1, #12]
 800b526:	05db      	lsls	r3, r3, #23
 800b528:	4605      	mov	r5, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	4616      	mov	r6, r2
 800b52e:	d505      	bpl.n	800b53c <__swrite+0x1e>
 800b530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b534:	2302      	movs	r3, #2
 800b536:	2200      	movs	r2, #0
 800b538:	f000 f868 	bl	800b60c <_lseek_r>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	4632      	mov	r2, r6
 800b54a:	463b      	mov	r3, r7
 800b54c:	4628      	mov	r0, r5
 800b54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b552:	f000 b817 	b.w	800b584 <_write_r>

0800b556 <__sseek>:
 800b556:	b510      	push	{r4, lr}
 800b558:	460c      	mov	r4, r1
 800b55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55e:	f000 f855 	bl	800b60c <_lseek_r>
 800b562:	1c43      	adds	r3, r0, #1
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	bf15      	itete	ne
 800b568:	6560      	strne	r0, [r4, #84]	; 0x54
 800b56a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b56e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b572:	81a3      	strheq	r3, [r4, #12]
 800b574:	bf18      	it	ne
 800b576:	81a3      	strhne	r3, [r4, #12]
 800b578:	bd10      	pop	{r4, pc}

0800b57a <__sclose>:
 800b57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57e:	f000 b813 	b.w	800b5a8 <_close_r>
	...

0800b584 <_write_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4d07      	ldr	r5, [pc, #28]	; (800b5a4 <_write_r+0x20>)
 800b588:	4604      	mov	r4, r0
 800b58a:	4608      	mov	r0, r1
 800b58c:	4611      	mov	r1, r2
 800b58e:	2200      	movs	r2, #0
 800b590:	602a      	str	r2, [r5, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	f7f7 fa1f 	bl	80029d6 <_write>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d102      	bne.n	800b5a2 <_write_r+0x1e>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b103      	cbz	r3, 800b5a2 <_write_r+0x1e>
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	200009b8 	.word	0x200009b8

0800b5a8 <_close_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d06      	ldr	r5, [pc, #24]	; (800b5c4 <_close_r+0x1c>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f7f7 fa2b 	bl	8002a0e <_close>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_close_r+0x1a>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_close_r+0x1a>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	200009b8 	.word	0x200009b8

0800b5c8 <_fstat_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d07      	ldr	r5, [pc, #28]	; (800b5e8 <_fstat_r+0x20>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	602b      	str	r3, [r5, #0]
 800b5d6:	f7f7 fa26 	bl	8002a26 <_fstat>
 800b5da:	1c43      	adds	r3, r0, #1
 800b5dc:	d102      	bne.n	800b5e4 <_fstat_r+0x1c>
 800b5de:	682b      	ldr	r3, [r5, #0]
 800b5e0:	b103      	cbz	r3, 800b5e4 <_fstat_r+0x1c>
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	bd38      	pop	{r3, r4, r5, pc}
 800b5e6:	bf00      	nop
 800b5e8:	200009b8 	.word	0x200009b8

0800b5ec <_isatty_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d06      	ldr	r5, [pc, #24]	; (800b608 <_isatty_r+0x1c>)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	f7f7 fa25 	bl	8002a46 <_isatty>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_isatty_r+0x1a>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_isatty_r+0x1a>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	200009b8 	.word	0x200009b8

0800b60c <_lseek_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d07      	ldr	r5, [pc, #28]	; (800b62c <_lseek_r+0x20>)
 800b610:	4604      	mov	r4, r0
 800b612:	4608      	mov	r0, r1
 800b614:	4611      	mov	r1, r2
 800b616:	2200      	movs	r2, #0
 800b618:	602a      	str	r2, [r5, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	f7f7 fa1e 	bl	8002a5c <_lseek>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_lseek_r+0x1e>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_lseek_r+0x1e>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	200009b8 	.word	0x200009b8

0800b630 <_read_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d07      	ldr	r5, [pc, #28]	; (800b650 <_read_r+0x20>)
 800b634:	4604      	mov	r4, r0
 800b636:	4608      	mov	r0, r1
 800b638:	4611      	mov	r1, r2
 800b63a:	2200      	movs	r2, #0
 800b63c:	602a      	str	r2, [r5, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	f7f7 f9ac 	bl	800299c <_read>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_read_r+0x1e>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_read_r+0x1e>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	200009b8 	.word	0x200009b8

0800b654 <_init>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	bf00      	nop
 800b658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65a:	bc08      	pop	{r3}
 800b65c:	469e      	mov	lr, r3
 800b65e:	4770      	bx	lr

0800b660 <_fini>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	bf00      	nop
 800b664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b666:	bc08      	pop	{r3}
 800b668:	469e      	mov	lr, r3
 800b66a:	4770      	bx	lr
