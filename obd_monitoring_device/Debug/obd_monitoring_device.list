
obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b604  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025ac  0800b798  0800b798  0001b798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd44  0800dd44  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd44  0800dd44  0001dd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd4c  0800dd4c  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd4c  0800dd4c  0001dd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd50  0800dd50  0001dd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800dd54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  20000358  0800e0ac  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  0800e0ac  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b067  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b67  00000000  00000000  0003b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  0003ef58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  000405c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b90  00000000  00000000  00041ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c76e  00000000  00000000  00066640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6ac3  00000000  00000000  00082dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159871  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f88  00000000  00000000  001598c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b77c 	.word	0x0800b77c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0800b77c 	.word	0x0800b77c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CAN1_Init>:
extern IWDG_HandleTypeDef hiwdg;
extern CAN_HandleTypeDef hcan1;
uint32_t tx_mailbox;

void MX_CAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_CAN1_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f6e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f9c:	f002 f8ec 	bl	8003178 <HAL_CAN_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_CAN1_Init+0x5e>
	{
	  Error_Handler();
 8000fa6:	f001 fac3 	bl	8002530 <Error_Handler>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000398 	.word	0x20000398
 8000fb4:	40006400 	.word	0x40006400

08000fb8 <canConfig>:

void canConfig(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8000fca:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000fce:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8000fd4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fd8:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <canConfig+0x64>)
 8000fec:	f002 f9bf 	bl	800336e <HAL_CAN_ConfigFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <canConfig+0x42>
	{
		Error_Handler();
 8000ff6:	f001 fa9b 	bl	8002530 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <canConfig+0x64>)
 8000ffc:	f002 fa81 	bl	8003502 <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <canConfig+0x52>
	{
		Error_Handler();
 8001006:	f001 fa93 	bl	8002530 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <canConfig+0x64>)
 800100e:	f002 fc9e 	bl	800394e <HAL_CAN_ActivateNotification>
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000398 	.word	0x20000398

08001020 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	f107 0214 	add.w	r2, r7, #20
 8001030:	2100      	movs	r1, #0
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001034:	f002 fb79 	bl	800372a <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fbb7 	bl	80017b0 <OBD2_PID_Parse>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001048:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	OBD2_ShowOnDisplay(obd_comm.current_value);
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800104e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f000 ffad 	bl	8001fb4 <OBD2_ShowOnDisplay>

	HAL_IWDG_Refresh(&hiwdg);
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800105c:	f004 fa86 	bl	800556c <HAL_IWDG_Refresh>
}
 8001060:	bf00      	nop
 8001062:	3730      	adds	r7, #48	; 0x30
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000398 	.word	0x20000398
 800106c:	20000548 	.word	0x20000548
 8001070:	20000414 	.word	0x20000414

08001074 <CAN_SEND_MESSAGE>:

void CAN_SEND_MESSAGE(uint8_t *tx_frame)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = DEVICE_CAN_ID;
 800107c:	f240 73df 	movw	r3, #2015	; 0x7df
 8001080:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 8001082:	2308      	movs	r3, #8
 8001084:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_frame, &tx_mailbox) != HAL_OK)
 800108e:	f107 0108 	add.w	r1, r7, #8
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <CAN_SEND_MESSAGE+0x3c>)
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <CAN_SEND_MESSAGE+0x40>)
 8001098:	f002 fa77 	bl	800358a <HAL_CAN_AddTxMessage>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <CAN_SEND_MESSAGE+0x32>
	{
		Error_Handler();
 80010a2:	f001 fa45 	bl	8002530 <Error_Handler>
	}

}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000374 	.word	0x20000374
 80010b4:	20000398 	.word	0x20000398

080010b8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2210      	movs	r2, #16
 80010c6:	60da      	str	r2, [r3, #12]
//	__HAL_CAN_Receive_IT(hcan, CAN_RX_FIFO0);
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <KLine_Init>:
static void MX_GPIO_KLineUART_Init(void);
static void UART_PIN_State(uint8_t state);
static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght);
static void MX_USART1_UART_Init(uint16_t baud_rate);

obd_protocol KLine_Init(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 80010da:	f000 f90f 	bl	80012fc <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 80010de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010e2:	f002 f825 	bl	8003130 <HAL_Delay>
	UART_PIN_State(0); //0
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f91e 	bl	8001328 <UART_PIN_State>
	HAL_Delay(200);
 80010ec:	20c8      	movs	r0, #200	; 0xc8
 80010ee:	f002 f81f 	bl	8003130 <HAL_Delay>
	UART_PIN_State(1);//11
 80010f2:	2001      	movs	r0, #1
 80010f4:	f000 f918 	bl	8001328 <UART_PIN_State>
	HAL_Delay(400);
 80010f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010fc:	f002 f818 	bl	8003130 <HAL_Delay>
	UART_PIN_State(0);//00
 8001100:	2000      	movs	r0, #0
 8001102:	f000 f911 	bl	8001328 <UART_PIN_State>
	HAL_Delay(400);
 8001106:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800110a:	f002 f811 	bl	8003130 <HAL_Delay>
	UART_PIN_State(1);//11
 800110e:	2001      	movs	r0, #1
 8001110:	f000 f90a 	bl	8001328 <UART_PIN_State>
	HAL_Delay(400);
 8001114:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001118:	f002 f80a 	bl	8003130 <HAL_Delay>
	UART_PIN_State(0);//00
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f903 	bl	8001328 <UART_PIN_State>
	HAL_Delay(400);
 8001122:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001126:	f002 f803 	bl	8003130 <HAL_Delay>
	UART_PIN_State(1);//1
 800112a:	2001      	movs	r0, #1
 800112c:	f000 f8fc 	bl	8001328 <UART_PIN_State>

	MX_USART1_UART_Init(10400);
 8001130:	f642 00a0 	movw	r0, #10400	; 0x28a0
 8001134:	f000 fa16 	bl	8001564 <MX_USART1_UART_Init>

	HAL_UART_Receive(&huart1, uartBuf, 3, 500);
 8001138:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800113c:	2203      	movs	r2, #3
 800113e:	492d      	ldr	r1, [pc, #180]	; (80011f4 <KLine_Init+0x120>)
 8001140:	482d      	ldr	r0, [pc, #180]	; (80011f8 <KLine_Init+0x124>)
 8001142:	f006 f950 	bl	80073e6 <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <KLine_Init+0x120>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b55      	cmp	r3, #85	; 0x55
 800114c:	d001      	beq.n	8001152 <KLine_Init+0x7e>
	{
		return OBD_NONE;
 800114e:	2300      	movs	r3, #0
 8001150:	e04b      	b.n	80011ea <KLine_Init+0x116>
	}
	else if(uartBuf[1] == uartBuf[2])
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <KLine_Init+0x120>)
 8001154:	785a      	ldrb	r2, [r3, #1]
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <KLine_Init+0x120>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	429a      	cmp	r2, r3
 800115c:	d126      	bne.n	80011ac <KLine_Init+0xd8>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <KLine_Init+0x120>)
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	43db      	mvns	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 8001168:	2019      	movs	r0, #25
 800116a:	f001 ffe1 	bl	8003130 <HAL_Delay>
			HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 800116e:	1df9      	adds	r1, r7, #7
 8001170:	2332      	movs	r3, #50	; 0x32
 8001172:	2201      	movs	r2, #1
 8001174:	4820      	ldr	r0, [pc, #128]	; (80011f8 <KLine_Init+0x124>)
 8001176:	f006 f8a2 	bl	80072be <HAL_UART_Transmit>
			HAL_Delay(25);
 800117a:	2019      	movs	r0, #25
 800117c:	f001 ffd8 	bl	8003130 <HAL_Delay>
			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <KLine_Init+0x124>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	8b1b      	ldrh	r3, [r3, #24]
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <KLine_Init+0x124>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0208 	orr.w	r2, r2, #8
 8001190:	b292      	uxth	r2, r2
 8001192:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 8001194:	2364      	movs	r3, #100	; 0x64
 8001196:	2201      	movs	r2, #1
 8001198:	4918      	ldr	r1, [pc, #96]	; (80011fc <KLine_Init+0x128>)
 800119a:	4817      	ldr	r0, [pc, #92]	; (80011f8 <KLine_Init+0x124>)
 800119c:	f006 f923 	bl	80073e6 <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
			kline_kb = uartBuf[1];
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <KLine_Init+0x120>)
 80011a2:	785a      	ldrb	r2, [r3, #1]
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <KLine_Init+0x12c>)
 80011a6:	701a      	strb	r2, [r3, #0]
			return OBD_PROTO_ISO9141;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e01e      	b.n	80011ea <KLine_Init+0x116>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <KLine_Init+0x120>)
 80011ae:	785b      	ldrb	r3, [r3, #1]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 80011b6:	2019      	movs	r0, #25
 80011b8:	f001 ffba 	bl	8003130 <HAL_Delay>
		HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 80011bc:	1db9      	adds	r1, r7, #6
 80011be:	2332      	movs	r3, #50	; 0x32
 80011c0:	2201      	movs	r2, #1
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <KLine_Init+0x124>)
 80011c4:	f006 f87b 	bl	80072be <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <KLine_Init+0x124>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	8b1b      	ldrh	r3, [r3, #24]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <KLine_Init+0x124>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0208 	orr.w	r2, r2, #8
 80011d8:	b292      	uxth	r2, r2
 80011da:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	2201      	movs	r2, #1
 80011e0:	4906      	ldr	r1, [pc, #24]	; (80011fc <KLine_Init+0x128>)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <KLine_Init+0x124>)
 80011e4:	f006 f8ff 	bl	80073e6 <HAL_UART_Receive>
		return OBD_PROTO_KWP2000_SLOW;
 80011e8:	2302      	movs	r3, #2
	}
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000053c 	.word	0x2000053c
 80011f8:	20000470 	.word	0x20000470
 80011fc:	20000390 	.word	0x20000390
 8001200:	20000391 	.word	0x20000391

08001204 <KWP2000_Fast_Init>:

obd_protocol KWP2000_Fast_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 800120a:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <KWP2000_Fast_Init+0xdc>)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001212:	6018      	str	r0, [r3, #0]
 8001214:	3304      	adds	r3, #4
 8001216:	7019      	strb	r1, [r3, #0]
//	uint8_t resp_msg[7]={0};
	checksum = 0;
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <KWP2000_Fast_Init+0xe0>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
	msg_type = 1;
 800121e:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <KWP2000_Fast_Init+0xe4>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
	timeout = 0;
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <KWP2000_Fast_Init+0xe8>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]

	HAL_UART_DeInit(&huart1);
 800122a:	4831      	ldr	r0, [pc, #196]	; (80012f0 <KWP2000_Fast_Init+0xec>)
 800122c:	f006 f80e 	bl	800724c <HAL_UART_DeInit>
	HAL_Delay(3000);
 8001230:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001234:	f001 ff7c 	bl	8003130 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 8001238:	f000 f860 	bl	80012fc <MX_GPIO_KLineUART_Init>
	UART_PIN_State(0);
 800123c:	2000      	movs	r0, #0
 800123e:	f000 f873 	bl	8001328 <UART_PIN_State>
	HAL_Delay(25);
 8001242:	2019      	movs	r0, #25
 8001244:	f001 ff74 	bl	8003130 <HAL_Delay>
	UART_PIN_State(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f000 f86d 	bl	8001328 <UART_PIN_State>
	HAL_Delay(25);
 800124e:	2019      	movs	r0, #25
 8001250:	f001 ff6e 	bl	8003130 <HAL_Delay>
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001254:	4826      	ldr	r0, [pc, #152]	; (80012f0 <KWP2000_Fast_Init+0xec>)
 8001256:	f005 ffab 	bl	80071b0 <HAL_UART_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <KWP2000_Fast_Init+0x60>
	{
		Error_Handler();
 8001260:	f001 f966 	bl	8002530 <Error_Handler>
	}
//	MX_USART1_UART_Init(10400);
	HAL_UART_Transmit(&huart1, start_msg, 5, 10);
 8001264:	1d39      	adds	r1, r7, #4
 8001266:	230a      	movs	r3, #10
 8001268:	2205      	movs	r2, #5
 800126a:	4821      	ldr	r0, [pc, #132]	; (80012f0 <KWP2000_Fast_Init+0xec>)
 800126c:	f006 f827 	bl	80072be <HAL_UART_Transmit>
//	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
//	HAL_Delay(20);
	HAL_UART_Receive_DMA(&huart1, uartBuf, 8);
 8001270:	2208      	movs	r2, #8
 8001272:	4920      	ldr	r1, [pc, #128]	; (80012f4 <KWP2000_Fast_Init+0xf0>)
 8001274:	481e      	ldr	r0, [pc, #120]	; (80012f0 <KWP2000_Fast_Init+0xec>)
 8001276:	f006 f987 	bl	8007588 <HAL_UART_Receive_DMA>
//	for(int i = 0; i < 7; i++)
//	{
//		resp_msg[i] = uartBuf[j];
//		j++;
//	}
	while(msg_type != 0)
 800127a:	e000      	b.n	800127e <KWP2000_Fast_Init+0x7a>
	{
		__NOP();
 800127c:	bf00      	nop
	while(msg_type != 0)
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <KWP2000_Fast_Init+0xe4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1fa      	bne.n	800127c <KWP2000_Fast_Init+0x78>
	}

	for(int i = 1; i < 7; i++)
 8001286:	2301      	movs	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e00c      	b.n	80012a6 <KWP2000_Fast_Init+0xa2>
	{
		checksum = checksum + uartBuf[i];
 800128c:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <KWP2000_Fast_Init+0xf0>)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <KWP2000_Fast_Init+0xe0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4413      	add	r3, r2
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <KWP2000_Fast_Init+0xe0>)
 800129e:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 7; i++)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	ddef      	ble.n	800128c <KWP2000_Fast_Init+0x88>
	}
	checksum = checksum % 256;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <KWP2000_Fast_Init+0xe0>)
 80012ae:	781a      	ldrb	r2, [r3, #0]
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <KWP2000_Fast_Init+0xe0>)
 80012b2:	701a      	strb	r2, [r3, #0]
	if(checksum == uartBuf[7] && checksum != 0)
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <KWP2000_Fast_Init+0xf0>)
 80012b6:	79da      	ldrb	r2, [r3, #7]
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <KWP2000_Fast_Init+0xe0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d109      	bne.n	80012d4 <KWP2000_Fast_Init+0xd0>
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <KWP2000_Fast_Init+0xe0>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <KWP2000_Fast_Init+0xd0>
	{
		ecu_addr = uartBuf[3];
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <KWP2000_Fast_Init+0xf0>)
 80012ca:	78da      	ldrb	r2, [r3, #3]
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <KWP2000_Fast_Init+0xf4>)
 80012ce:	701a      	strb	r2, [r3, #0]
		return OBD_PROTO_KWP2000_FAST;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e000      	b.n	80012d6 <KWP2000_Fast_Init+0xd2>
	}
	else
		return OBD_NONE;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	0800b798 	.word	0x0800b798
 80012e4:	2000038f 	.word	0x2000038f
 80012e8:	20000393 	.word	0x20000393
 80012ec:	20000394 	.word	0x20000394
 80012f0:	20000470 	.word	0x20000470
 80012f4:	2000053c 	.word	0x2000053c
 80012f8:	20000390 	.word	0x20000390

080012fc <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
 8001302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001306:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f003 f9ae 	bl	800467c <HAL_GPIO_Init>
}
 8001320:	bf00      	nop
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <UART_PIN_State>:

static void UART_PIN_State(uint8_t state)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d10e      	bne.n	8001356 <UART_PIN_State+0x2e>
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f003 fc07 	bl	8004b54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f003 fc00 	bl	8004b54 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}
 8001354:	e00d      	b.n	8001372 <UART_PIN_State+0x4a>
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f003 fbf8 	bl	8004b54 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f003 fbf1 	bl	8004b54 <HAL_GPIO_WritePin>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <KLine_SEND_MESSAGE>:

void KLine_SEND_MESSAGE(uint8_t* tx_frame)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001384:	2368      	movs	r3, #104	; 0x68
 8001386:	733b      	strb	r3, [r7, #12]
 8001388:	236a      	movs	r3, #106	; 0x6a
 800138a:	737b      	strb	r3, [r7, #13]
 800138c:	23f1      	movs	r3, #241	; 0xf1
 800138e:	73bb      	strb	r3, [r7, #14]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	785b      	ldrb	r3, [r3, #1]
 800139a:	743b      	strb	r3, [r7, #16]
 800139c:	2300      	movs	r3, #0
 800139e:	747b      	strb	r3, [r7, #17]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3301      	adds	r3, #1
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fe44 	bl	8002034 <PID_Get_Lenght>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <KLine_SEND_MESSAGE+0xb0>)
 80013b2:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <KLine_SEND_MESSAGE+0xb4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e00d      	b.n	80013dc <KLine_SEND_MESSAGE+0x60>
	{
		checksum += kline_msg[i];
 80013c0:	f107 020c 	add.w	r2, r7, #12
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	4413      	add	r3, r2
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <KLine_SEND_MESSAGE+0xb4>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <KLine_SEND_MESSAGE+0xb4>)
 80013d4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d9ee      	bls.n	80013c0 <KLine_SEND_MESSAGE+0x44>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <KLine_SEND_MESSAGE+0xb4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	747b      	strb	r3, [r7, #17]

	HAL_UART_Transmit(&huart1, kline_msg, sizeof(kline_msg), 12);
 80013e8:	f107 010c 	add.w	r1, r7, #12
 80013ec:	230c      	movs	r3, #12
 80013ee:	2206      	movs	r2, #6
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <KLine_SEND_MESSAGE+0xb8>)
 80013f2:	f005 ff64 	bl	80072be <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <KLine_SEND_MESSAGE+0xb8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	8b1b      	ldrh	r3, [r3, #24]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <KLine_SEND_MESSAGE+0xb8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0208 	orr.w	r2, r2, #8
 8001406:	b292      	uxth	r2, r2
 8001408:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 4);
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <KLine_SEND_MESSAGE+0xb0>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	3304      	adds	r3, #4
 8001412:	b29b      	uxth	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <KLine_SEND_MESSAGE+0xbc>)
 8001418:	4806      	ldr	r0, [pc, #24]	; (8001434 <KLine_SEND_MESSAGE+0xb8>)
 800141a:	f006 f8b5 	bl	8007588 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 800141e:	203c      	movs	r0, #60	; 0x3c
 8001420:	f001 fe86 	bl	8003130 <HAL_Delay>
}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000392 	.word	0x20000392
 8001430:	2000038f 	.word	0x2000038f
 8001434:	20000470 	.word	0x20000470
 8001438:	20000378 	.word	0x20000378

0800143c <KWP2000_SEND_MESSAGE>:

void KWP2000_SEND_MESSAGE(uint8_t* tx_frame)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, 0x33, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001444:	23c2      	movs	r3, #194	; 0xc2
 8001446:	733b      	strb	r3, [r7, #12]
 8001448:	2333      	movs	r3, #51	; 0x33
 800144a:	737b      	strb	r3, [r7, #13]
 800144c:	23f1      	movs	r3, #241	; 0xf1
 800144e:	73bb      	strb	r3, [r7, #14]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	743b      	strb	r3, [r7, #16]
 800145c:	2300      	movs	r3, #0
 800145e:	747b      	strb	r3, [r7, #17]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3301      	adds	r3, #1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fde4 	bl	8002034 <PID_Get_Lenght>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <KWP2000_SEND_MESSAGE+0xbc>)
 8001472:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <KWP2000_SEND_MESSAGE+0xc0>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
	msg_type = 2;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <KWP2000_SEND_MESSAGE+0xc4>)
 800147c:	2202      	movs	r2, #2
 800147e:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e00d      	b.n	80014a2 <KWP2000_SEND_MESSAGE+0x66>
	{
		checksum += kwp_msg[i];
 8001486:	f107 020c 	add.w	r2, r7, #12
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	4413      	add	r3, r2
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <KWP2000_SEND_MESSAGE+0xc0>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4413      	add	r3, r2
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <KWP2000_SEND_MESSAGE+0xc0>)
 800149a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d9ee      	bls.n	8001486 <KWP2000_SEND_MESSAGE+0x4a>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <KWP2000_SEND_MESSAGE+0xc0>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	747b      	strb	r3, [r7, #17]

	HAL_Delay(20);
 80014ae:	2014      	movs	r0, #20
 80014b0:	f001 fe3e 	bl	8003130 <HAL_Delay>

	HAL_UART_Transmit(&huart1, kwp_msg, sizeof(kwp_msg), 12);
 80014b4:	f107 010c 	add.w	r1, r7, #12
 80014b8:	230c      	movs	r3, #12
 80014ba:	2206      	movs	r2, #6
 80014bc:	4811      	ldr	r0, [pc, #68]	; (8001504 <KWP2000_SEND_MESSAGE+0xc8>)
 80014be:	f005 fefe 	bl	80072be <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <KWP2000_SEND_MESSAGE+0xc8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	8b1b      	ldrh	r3, [r3, #24]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <KWP2000_SEND_MESSAGE+0xc8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0208 	orr.w	r2, r2, #8
 80014d2:	b292      	uxth	r2, r2
 80014d4:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 5);
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <KWP2000_SEND_MESSAGE+0xbc>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3305      	adds	r3, #5
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	4909      	ldr	r1, [pc, #36]	; (8001508 <KWP2000_SEND_MESSAGE+0xcc>)
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <KWP2000_SEND_MESSAGE+0xc8>)
 80014e6:	f006 f84f 	bl	8007588 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80014ea:	203c      	movs	r0, #60	; 0x3c
 80014ec:	f001 fe20 	bl	8003130 <HAL_Delay>
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000392 	.word	0x20000392
 80014fc:	2000038f 	.word	0x2000038f
 8001500:	20000393 	.word	0x20000393
 8001504:	20000470 	.word	0x20000470
 8001508:	20000378 	.word	0x20000378

0800150c <Verify_Checksum>:

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	e009      	b.n	8001536 <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	4413      	add	r3, r2
 800152e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	3301      	adds	r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	3b01      	subs	r3, #1
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf0      	blt.n	8001522 <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	3b01      	subs	r3, #1
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	429a      	cmp	r2, r3
 800154e:	d101      	bne.n	8001554 <Verify_Checksum+0x48>
	{
		return 1;
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <Verify_Checksum+0x4a>
	}
	return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(uint16_t baud_rate)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  huart1.Instance = USART1;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_USART1_UART_Init+0x68>)
 8001570:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <MX_USART1_UART_Init+0x6c>)
 8001572:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud_rate;
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <MX_USART1_UART_Init+0x68>)
 8001578:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_USART1_UART_Init+0x68>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_USART1_UART_Init+0x68>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART1_UART_Init+0x68>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_USART1_UART_Init+0x68>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_USART1_UART_Init+0x68>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_USART1_UART_Init+0x68>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART1_UART_Init+0x68>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART1_UART_Init+0x68>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART1_UART_Init+0x68>)
 80015ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_USART1_UART_Init+0x68>)
 80015b4:	f005 fdfc 	bl	80071b0 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80015be:	f000 ffb7 	bl	8002530 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000470 	.word	0x20000470
 80015d0:	40013800 	.word	0x40013800

080015d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	if(msg_type == 1)
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_UART_RxCpltCallback+0x98>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d103      	bne.n	80015ec <HAL_UART_RxCpltCallback+0x18>
	{
		msg_type = 0;
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_UART_RxCpltCallback+0x98>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
			HAL_IWDG_Refresh(&hiwdg);
		}
	}


}
 80015ea:	e03a      	b.n	8001662 <HAL_UART_RxCpltCallback+0x8e>
	else if (msg_type == 2)
 80015ec:	4b1f      	ldr	r3, [pc, #124]	; (800166c <HAL_UART_RxCpltCallback+0x98>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d136      	bne.n	8001662 <HAL_UART_RxCpltCallback+0x8e>
		if(Verify_Checksum(kline_rx_buf, pid_length + 5))
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_UART_RxCpltCallback+0x9c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3305      	adds	r3, #5
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4619      	mov	r1, r3
 80015fe:	481d      	ldr	r0, [pc, #116]	; (8001674 <HAL_UART_RxCpltCallback+0xa0>)
 8001600:	f7ff ff84 	bl	800150c <Verify_Checksum>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d02b      	beq.n	8001662 <HAL_UART_RxCpltCallback+0x8e>
			uint8_t j = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 800160e:	2302      	movs	r3, #2
 8001610:	73bb      	strb	r3, [r7, #14]
 8001612:	e00b      	b.n	800162c <HAL_UART_RxCpltCallback+0x58>
				rx_frame[j] = kline_rx_buf[i];
 8001614:	7bba      	ldrb	r2, [r7, #14]
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	4916      	ldr	r1, [pc, #88]	; (8001674 <HAL_UART_RxCpltCallback+0xa0>)
 800161a:	5c89      	ldrb	r1, [r1, r2]
 800161c:	4a16      	ldr	r2, [pc, #88]	; (8001678 <HAL_UART_RxCpltCallback+0xa4>)
 800161e:	54d1      	strb	r1, [r2, r3]
				j++;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3301      	adds	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8001626:	7bbb      	ldrb	r3, [r7, #14]
 8001628:	3301      	adds	r3, #1
 800162a:	73bb      	strb	r3, [r7, #14]
 800162c:	7bba      	ldrb	r2, [r7, #14]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_UART_RxCpltCallback+0x9c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3304      	adds	r3, #4
 8001634:	429a      	cmp	r2, r3
 8001636:	dded      	ble.n	8001614 <HAL_UART_RxCpltCallback+0x40>
			msg_type = 0;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_UART_RxCpltCallback+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 800163e:	480e      	ldr	r0, [pc, #56]	; (8001678 <HAL_UART_RxCpltCallback+0xa4>)
 8001640:	f000 f8b6 	bl	80017b0 <OBD2_PID_Parse>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_UART_RxCpltCallback+0xa8>)
 800164a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			OBD2_ShowOnDisplay(obd_comm.current_value);
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_UART_RxCpltCallback+0xa8>)
 8001650:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001654:	eeb0 0a67 	vmov.f32	s0, s15
 8001658:	f000 fcac 	bl	8001fb4 <OBD2_ShowOnDisplay>
			HAL_IWDG_Refresh(&hiwdg);
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <HAL_UART_RxCpltCallback+0xac>)
 800165e:	f003 ff85 	bl	800556c <HAL_IWDG_Refresh>
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000393 	.word	0x20000393
 8001670:	20000392 	.word	0x20000392
 8001674:	20000378 	.word	0x20000378
 8001678:	20000388 	.word	0x20000388
 800167c:	20000548 	.word	0x20000548
 8001680:	20000414 	.word	0x20000414

08001684 <OBD2_PID_Decode>:
//	strcat(txTest2, "\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t *)txTest2, sizeof(txTest2),10);
//}

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	int number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3303      	adds	r3, #3
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	061a      	lsls	r2, r3, #24
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3304      	adds	r3, #4
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3305      	adds	r3, #5
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	4313      	orrs	r3, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	3206      	adds	r2, #6
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 80016b6:	231f      	movs	r3, #31
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	e030      	b.n	800171e <OBD2_PID_Decode+0x9a>
	{
		int digit = number >> i;
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa42 f303 	asr.w	r3, r2, r3
 80016c4:	60bb      	str	r3, [r7, #8]
		digit &= 1;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
		if(obd_comm.pid == 0x00)
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <OBD2_PID_Decode+0xb0>)
 80016d0:	785b      	ldrb	r3, [r3, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d108      	bne.n	80016e8 <OBD2_PID_Decode+0x64>
		{
			obd_comm.available_pids_1[j] = digit;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	b2d9      	uxtb	r1, r3
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <OBD2_PID_Decode+0xb0>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4413      	add	r3, r2
 80016e0:	3303      	adds	r3, #3
 80016e2:	460a      	mov	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	e014      	b.n	8001712 <OBD2_PID_Decode+0x8e>
		}
		else if(obd_comm.pid == 0x20)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <OBD2_PID_Decode+0xb0>)
 80016ea:	785b      	ldrb	r3, [r3, #1]
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d108      	bne.n	8001702 <OBD2_PID_Decode+0x7e>
		{
			obd_comm.available_pids_2[j] = digit;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	b2d9      	uxtb	r1, r3
 80016f4:	4a0f      	ldr	r2, [pc, #60]	; (8001734 <OBD2_PID_Decode+0xb0>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	4413      	add	r3, r2
 80016fa:	3323      	adds	r3, #35	; 0x23
 80016fc:	460a      	mov	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	e007      	b.n	8001712 <OBD2_PID_Decode+0x8e>
		}
		else
		{
			obd_comm.available_pids_3[j] = digit;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	b2d9      	uxtb	r1, r3
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <OBD2_PID_Decode+0xb0>)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	4413      	add	r3, r2
 800170c:	3343      	adds	r3, #67	; 0x43
 800170e:	460a      	mov	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	3b01      	subs	r3, #1
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	dacb      	bge.n	80016bc <OBD2_PID_Decode+0x38>
	}
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	371c      	adds	r7, #28
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000548 	.word	0x20000548

08001738 <OBD2_Request>:

void OBD2_Request(OBD obd)
{
 8001738:	b084      	sub	sp, #16
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	f107 0c18 	add.w	ip, r7, #24
 8001744:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(10);
 8001748:	200a      	movs	r0, #10
 800174a:	f001 fcf1 	bl	8003130 <HAL_Delay>
	if(obd.used_protocol == OBD_PROTO_CAN)
 800174e:	7e3b      	ldrb	r3, [r7, #24]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d115      	bne.n	8001780 <OBD2_Request+0x48>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001754:	2302      	movs	r3, #2
 8001756:	723b      	strb	r3, [r7, #8]
 8001758:	2301      	movs	r3, #1
 800175a:	727b      	strb	r3, [r7, #9]
 800175c:	7e7b      	ldrb	r3, [r7, #25]
 800175e:	72bb      	strb	r3, [r7, #10]
 8001760:	2300      	movs	r3, #0
 8001762:	72fb      	strb	r3, [r7, #11]
 8001764:	2300      	movs	r3, #0
 8001766:	733b      	strb	r3, [r7, #12]
 8001768:	2300      	movs	r3, #0
 800176a:	737b      	strb	r3, [r7, #13]
 800176c:	2300      	movs	r3, #0
 800176e:	73bb      	strb	r3, [r7, #14]
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
		CAN_SEND_MESSAGE(tx_data_CAN);
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fc7b 	bl	8001074 <CAN_SEND_MESSAGE>
		else
		{
			KWP2000_SEND_MESSAGE(tx_data_ISO);
		}
	}
}
 800177e:	e00f      	b.n	80017a0 <OBD2_Request+0x68>
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 8001780:	2301      	movs	r3, #1
 8001782:	713b      	strb	r3, [r7, #4]
 8001784:	7e7b      	ldrb	r3, [r7, #25]
 8001786:	717b      	strb	r3, [r7, #5]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 8001788:	7e3b      	ldrb	r3, [r7, #24]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d104      	bne.n	8001798 <OBD2_Request+0x60>
			KLine_SEND_MESSAGE(tx_data_ISO);
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fdf3 	bl	800137c <KLine_SEND_MESSAGE>
}
 8001796:	e003      	b.n	80017a0 <OBD2_Request+0x68>
			KWP2000_SEND_MESSAGE(tx_data_ISO);
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fe4e 	bl	800143c <KWP2000_SEND_MESSAGE>
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017aa:	b004      	add	sp, #16
 80017ac:	4770      	bx	lr
	...

080017b0 <OBD2_PID_Parse>:

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	float value = 0;
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3302      	adds	r3, #2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2ba6      	cmp	r3, #166	; 0xa6
 80017c6:	f200 83b2 	bhi.w	8001f2e <OBD2_PID_Parse+0x77e>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <OBD2_PID_Parse+0x20>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	08001a6d 	.word	0x08001a6d
 80017d4:	08001f2f 	.word	0x08001f2f
 80017d8:	08001f2f 	.word	0x08001f2f
 80017dc:	08001f2f 	.word	0x08001f2f
 80017e0:	08001a7b 	.word	0x08001a7b
 80017e4:	08001a83 	.word	0x08001a83
 80017e8:	08001a99 	.word	0x08001a99
 80017ec:	08001a99 	.word	0x08001a99
 80017f0:	08001a99 	.word	0x08001a99
 80017f4:	08001a99 	.word	0x08001a99
 80017f8:	08001a9f 	.word	0x08001a9f
 80017fc:	08001abb 	.word	0x08001abb
 8001800:	08001acf 	.word	0x08001acf
 8001804:	08001af5 	.word	0x08001af5
 8001808:	08001b09 	.word	0x08001b09
 800180c:	08001b23 	.word	0x08001b23
 8001810:	08001b39 	.word	0x08001b39
 8001814:	08001b63 	.word	0x08001b63
 8001818:	08001f2f 	.word	0x08001f2f
 800181c:	08001f2f 	.word	0x08001f2f
 8001820:	08001b6b 	.word	0x08001b6b
 8001824:	08001b6b 	.word	0x08001b6b
 8001828:	08001b6b 	.word	0x08001b6b
 800182c:	08001b6b 	.word	0x08001b6b
 8001830:	08001b6b 	.word	0x08001b6b
 8001834:	08001b6b 	.word	0x08001b6b
 8001838:	08001b6b 	.word	0x08001b6b
 800183c:	08001b6b 	.word	0x08001b6b
 8001840:	08001f2f 	.word	0x08001f2f
 8001844:	08001f2f 	.word	0x08001f2f
 8001848:	08001f2f 	.word	0x08001f2f
 800184c:	08001b89 	.word	0x08001b89
 8001850:	08001ba7 	.word	0x08001ba7
 8001854:	08001b89 	.word	0x08001b89
 8001858:	08001bb5 	.word	0x08001bb5
 800185c:	08001be5 	.word	0x08001be5
 8001860:	08001c0b 	.word	0x08001c0b
 8001864:	08001c0b 	.word	0x08001c0b
 8001868:	08001c0b 	.word	0x08001c0b
 800186c:	08001c0b 	.word	0x08001c0b
 8001870:	08001c0b 	.word	0x08001c0b
 8001874:	08001c0b 	.word	0x08001c0b
 8001878:	08001c0b 	.word	0x08001c0b
 800187c:	08001c0b 	.word	0x08001c0b
 8001880:	08001c13 	.word	0x08001c13
 8001884:	08001c1b 	.word	0x08001c1b
 8001888:	08001c21 	.word	0x08001c21
 800188c:	08001c21 	.word	0x08001c21
 8001890:	08001c29 	.word	0x08001c29
 8001894:	08001c3d 	.word	0x08001c3d
 8001898:	08001c5b 	.word	0x08001c5b
 800189c:	08001c81 	.word	0x08001c81
 80018a0:	08001c95 	.word	0x08001c95
 80018a4:	08001c95 	.word	0x08001c95
 80018a8:	08001c95 	.word	0x08001c95
 80018ac:	08001c95 	.word	0x08001c95
 80018b0:	08001c95 	.word	0x08001c95
 80018b4:	08001c95 	.word	0x08001c95
 80018b8:	08001c95 	.word	0x08001c95
 80018bc:	08001c95 	.word	0x08001c95
 80018c0:	08001c9d 	.word	0x08001c9d
 80018c4:	08001c9d 	.word	0x08001c9d
 80018c8:	08001c9d 	.word	0x08001c9d
 80018cc:	08001c9d 	.word	0x08001c9d
 80018d0:	08001cc9 	.word	0x08001cc9
 80018d4:	08001f2f 	.word	0x08001f2f
 80018d8:	08001cd7 	.word	0x08001cd7
 80018dc:	08001d01 	.word	0x08001d01
 80018e0:	08001d09 	.word	0x08001d09
 80018e4:	08001d11 	.word	0x08001d11
 80018e8:	08001d19 	.word	0x08001d19
 80018ec:	08001d2f 	.word	0x08001d2f
 80018f0:	08001d2f 	.word	0x08001d2f
 80018f4:	08001d2f 	.word	0x08001d2f
 80018f8:	08001d2f 	.word	0x08001d2f
 80018fc:	08001d2f 	.word	0x08001d2f
 8001900:	08001d2f 	.word	0x08001d2f
 8001904:	08001d37 	.word	0x08001d37
 8001908:	08001d37 	.word	0x08001d37
 800190c:	08001d55 	.word	0x08001d55
 8001910:	08001f2f 	.word	0x08001f2f
 8001914:	08001f2f 	.word	0x08001f2f
 8001918:	08001d69 	.word	0x08001d69
 800191c:	08001d85 	.word	0x08001d85
 8001920:	08001db7 	.word	0x08001db7
 8001924:	08001ddb 	.word	0x08001ddb
 8001928:	08001ddb 	.word	0x08001ddb
 800192c:	08001ddb 	.word	0x08001ddb
 8001930:	08001ddb 	.word	0x08001ddb
 8001934:	08001de1 	.word	0x08001de1
 8001938:	08001dff 	.word	0x08001dff
 800193c:	08001dff 	.word	0x08001dff
 8001940:	08001e07 	.word	0x08001e07
 8001944:	08001e1d 	.word	0x08001e1d
 8001948:	08001e23 	.word	0x08001e23
 800194c:	08001f2f 	.word	0x08001f2f
 8001950:	08001f2f 	.word	0x08001f2f
 8001954:	08001e55 	.word	0x08001e55
 8001958:	08001e55 	.word	0x08001e55
 800195c:	08001e6b 	.word	0x08001e6b
 8001960:	08001e89 	.word	0x08001e89
 8001964:	08001f2f 	.word	0x08001f2f
 8001968:	08001e9f 	.word	0x08001e9f
 800196c:	08001ea7 	.word	0x08001ea7
 8001970:	08001ea7 	.word	0x08001ea7
 8001974:	08001f2f 	.word	0x08001f2f
 8001978:	08001f2f 	.word	0x08001f2f
 800197c:	08001f2f 	.word	0x08001f2f
 8001980:	08001f2f 	.word	0x08001f2f
 8001984:	08001f2f 	.word	0x08001f2f
 8001988:	08001f2f 	.word	0x08001f2f
 800198c:	08001f2f 	.word	0x08001f2f
 8001990:	08001f2f 	.word	0x08001f2f
 8001994:	08001f2f 	.word	0x08001f2f
 8001998:	08001f2f 	.word	0x08001f2f
 800199c:	08001f2f 	.word	0x08001f2f
 80019a0:	08001f2f 	.word	0x08001f2f
 80019a4:	08001f2f 	.word	0x08001f2f
 80019a8:	08001f2f 	.word	0x08001f2f
 80019ac:	08001f2f 	.word	0x08001f2f
 80019b0:	08001f2f 	.word	0x08001f2f
 80019b4:	08001f2f 	.word	0x08001f2f
 80019b8:	08001f2f 	.word	0x08001f2f
 80019bc:	08001f2f 	.word	0x08001f2f
 80019c0:	08001ebd 	.word	0x08001ebd
 80019c4:	08001f2f 	.word	0x08001f2f
 80019c8:	08001f2f 	.word	0x08001f2f
 80019cc:	08001f2f 	.word	0x08001f2f
 80019d0:	08001f2f 	.word	0x08001f2f
 80019d4:	08001f2f 	.word	0x08001f2f
 80019d8:	08001f2f 	.word	0x08001f2f
 80019dc:	08001f2f 	.word	0x08001f2f
 80019e0:	08001f2f 	.word	0x08001f2f
 80019e4:	08001f2f 	.word	0x08001f2f
 80019e8:	08001f2f 	.word	0x08001f2f
 80019ec:	08001f2f 	.word	0x08001f2f
 80019f0:	08001f2f 	.word	0x08001f2f
 80019f4:	08001f2f 	.word	0x08001f2f
 80019f8:	08001f2f 	.word	0x08001f2f
 80019fc:	08001f2f 	.word	0x08001f2f
 8001a00:	08001f2f 	.word	0x08001f2f
 8001a04:	08001f2f 	.word	0x08001f2f
 8001a08:	08001f2f 	.word	0x08001f2f
 8001a0c:	08001f2f 	.word	0x08001f2f
 8001a10:	08001f2f 	.word	0x08001f2f
 8001a14:	08001f2f 	.word	0x08001f2f
 8001a18:	08001f2f 	.word	0x08001f2f
 8001a1c:	08001f2f 	.word	0x08001f2f
 8001a20:	08001f2f 	.word	0x08001f2f
 8001a24:	08001f2f 	.word	0x08001f2f
 8001a28:	08001f2f 	.word	0x08001f2f
 8001a2c:	08001f2f 	.word	0x08001f2f
 8001a30:	08001f2f 	.word	0x08001f2f
 8001a34:	08001f2f 	.word	0x08001f2f
 8001a38:	08001f2f 	.word	0x08001f2f
 8001a3c:	08001f2f 	.word	0x08001f2f
 8001a40:	08001f2f 	.word	0x08001f2f
 8001a44:	08001f2f 	.word	0x08001f2f
 8001a48:	08001f2f 	.word	0x08001f2f
 8001a4c:	08001f2f 	.word	0x08001f2f
 8001a50:	08001f2f 	.word	0x08001f2f
 8001a54:	08001f2f 	.word	0x08001f2f
 8001a58:	08001f2f 	.word	0x08001f2f
 8001a5c:	08001f2f 	.word	0x08001f2f
 8001a60:	08001f2f 	.word	0x08001f2f
 8001a64:	08001f2f 	.word	0x08001f2f
 8001a68:	08001ee9 	.word	0x08001ee9
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fe09 	bl	8001684 <OBD2_PID_Decode>
		value = 0;
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
		break;
 8001a78:	e259      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
		break;
 8001a80:	e255      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3303      	adds	r3, #3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	3b28      	subs	r3, #40	; 0x28
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a92:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a96:	e24a      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001a98:	4bb7      	ldr	r3, [pc, #732]	; (8001d78 <OBD2_PID_Parse+0x5c8>)
 8001a9a:	60fb      	str	r3, [r7, #12]
		break;
 8001a9c:	e247      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3303      	adds	r3, #3
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ab8:	e239      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3303      	adds	r3, #3
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001acc:	e22f      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3303      	adds	r3, #3
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	3204      	adds	r2, #4
 8001ada:	7812      	ldrb	r2, [r2, #0]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da00      	bge.n	8001ae4 <OBD2_PID_Parse+0x334>
 8001ae2:	3303      	adds	r3, #3
 8001ae4:	109b      	asrs	r3, r3, #2
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aee:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001af2:	e21c      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3303      	adds	r3, #3
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	ee07 3a90 	vmov	s15, r3
 8001afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b02:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b06:	e212      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3303      	adds	r3, #3
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	3b40      	subs	r3, #64	; 0x40
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b20:	e205      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3303      	adds	r3, #3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	3b28      	subs	r3, #40	; 0x28
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b32:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b36:	e1fa      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	3204      	adds	r2, #4
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	4a8c      	ldr	r2, [pc, #560]	; (8001d7c <OBD2_PID_Parse+0x5cc>)
 8001b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b4e:	1152      	asrs	r2, r2, #5
 8001b50:	17db      	asrs	r3, r3, #31
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b60:	e1e5      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
		break;
 8001b68:	e1e1      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3303      	adds	r3, #3
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4a82      	ldr	r2, [pc, #520]	; (8001d7c <OBD2_PID_Parse+0x5cc>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b82:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b86:	e1d2      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3303      	adds	r3, #3
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	3204      	adds	r2, #4
 8001b94:	7812      	ldrb	r2, [r2, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ba4:	e1c3      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fd6c 	bl	8001684 <OBD2_PID_Decode>
		value = 0;
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
		break;
 8001bb2:	e1bc      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	3204      	adds	r2, #4
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcad 	bl	8000524 <__aeabi_i2d>
 8001bca:	a369      	add	r3, pc, #420	; (adr r3, 8001d70 <OBD2_PID_Parse+0x5c0>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fd12 	bl	80005f8 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe ffe4 	bl	8000ba8 <__aeabi_d2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3303      	adds	r3, #3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	3204      	adds	r2, #4
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c04:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c08:	e191      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
		break;
 8001c10:	e18d      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
		break;
 8001c18:	e189      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001c1a:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <OBD2_PID_Parse+0x5c8>)
 8001c1c:	60fb      	str	r3, [r7, #12]
		break;
 8001c1e:	e186      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
		break;
 8001c26:	e182      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3303      	adds	r3, #3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c36:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c3a:	e178      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3303      	adds	r3, #3
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	3204      	adds	r2, #4
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c58:	e169      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3303      	adds	r3, #3
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	3204      	adds	r2, #4
 8001c66:	7812      	ldrb	r2, [r2, #0]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da00      	bge.n	8001c70 <OBD2_PID_Parse+0x4c0>
 8001c6e:	3303      	adds	r3, #3
 8001c70:	109b      	asrs	r3, r3, #2
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c7e:	e156      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3303      	adds	r3, #3
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c92:	e14c      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
		break;
 8001c9a:	e148      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3303      	adds	r3, #3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	3204      	adds	r2, #4
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	4a33      	ldr	r2, [pc, #204]	; (8001d7c <OBD2_PID_Parse+0x5cc>)
 8001cae:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb2:	1152      	asrs	r2, r2, #5
 8001cb4:	17db      	asrs	r3, r3, #31
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	3b28      	subs	r3, #40	; 0x28
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cc6:	e132      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fcdb 	bl	8001684 <OBD2_PID_Decode>
		value = 0;
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
		break;
 8001cd4:	e12b      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3303      	adds	r3, #3
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	3204      	adds	r2, #4
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	4a26      	ldr	r2, [pc, #152]	; (8001d80 <OBD2_PID_Parse+0x5d0>)
 8001ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cec:	1192      	asrs	r2, r2, #6
 8001cee:	17db      	asrs	r3, r3, #31
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfa:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cfe:	e116      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
		break;
 8001d06:	e112      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
		break;
 8001d0e:	e10e      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
		break;
 8001d16:	e10a      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3303      	adds	r3, #3
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	3b28      	subs	r3, #40	; 0x28
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d28:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d2c:	e0ff      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
		break;
 8001d34:	e0fb      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3303      	adds	r3, #3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	3204      	adds	r2, #4
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d52:	e0ec      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3303      	adds	r3, #3
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	ee07 3a90 	vmov	s15, r3
 8001d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d62:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d66:	e0e2      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
		break;
 8001d6e:	e0de      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
 8001d70:	10624dd3 	.word	0x10624dd3
 8001d74:	3fb43958 	.word	0x3fb43958
 8001d78:	c2c80000 	.word	0xc2c80000
 8001d7c:	51eb851f 	.word	0x51eb851f
 8001d80:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3303      	adds	r3, #3
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	3204      	adds	r2, #4
 8001d90:	7812      	ldrb	r2, [r2, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbc5 	bl	8000524 <__aeabi_i2d>
 8001d9a:	a370      	add	r3, pc, #448	; (adr r3, 8001f5c <OBD2_PID_Parse+0x7ac>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fc2a 	bl	80005f8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7fe fefc 	bl	8000ba8 <__aeabi_d2f>
 8001db0:	4603      	mov	r3, r0
 8001db2:	60fb      	str	r3, [r7, #12]
		break;
 8001db4:	e0bb      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3303      	adds	r3, #3
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	3204      	adds	r2, #4
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001dca:	3b7f      	subs	r3, #127	; 0x7f
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001dd8:	e0a9      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <OBD2_PID_Parse+0x7a0>)
 8001ddc:	60fb      	str	r3, [r7, #12]
		break;
 8001dde:	e0a6      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3303      	adds	r3, #3
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	3204      	adds	r2, #4
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001dfc:	e097      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
		break;
 8001e04:	e093      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3303      	adds	r3, #3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3b28      	subs	r3, #40	; 0x28
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e16:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e1a:	e088      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <OBD2_PID_Parse+0x7a4>)
 8001e1e:	60fb      	str	r3, [r7, #12]
		break;
 8001e20:	e085      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3303      	adds	r3, #3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	3204      	adds	r2, #4
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fb76 	bl	8000524 <__aeabi_i2d>
 8001e38:	a341      	add	r3, pc, #260	; (adr r3, 8001f40 <OBD2_PID_Parse+0x790>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fbdb 	bl	80005f8 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fead 	bl	8000ba8 <__aeabi_d2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	60fb      	str	r3, [r7, #12]
		break;
 8001e52:	e06c      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3303      	adds	r3, #3
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	3b7d      	subs	r3, #125	; 0x7d
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e64:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e68:	e061      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	3204      	adds	r2, #4
 8001e76:	7812      	ldrb	r2, [r2, #0]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e82:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e86:	e052      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3303      	adds	r3, #3
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b7d      	subs	r3, #125	; 0x7d
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e98:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e9c:	e047      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
		break;
 8001ea4:	e043      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	3b28      	subs	r3, #40	; 0x28
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001eba:	e038      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3303      	adds	r3, #3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	3204      	adds	r2, #4
 8001ec8:	7812      	ldrb	r2, [r2, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <OBD2_PID_Parse+0x7a8>)
 8001ece:	fb82 1203 	smull	r1, r2, r2, r3
 8001ed2:	1152      	asrs	r2, r2, #5
 8001ed4:	17db      	asrs	r3, r3, #31
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	3b28      	subs	r3, #40	; 0x28
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ee6:	e022      	b.n	8001f2e <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3303      	adds	r3, #3
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	061a      	lsls	r2, r3, #24
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3305      	adds	r3, #5
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	4313      	orrs	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	3206      	adds	r2, #6
 8001f08:	7812      	ldrb	r2, [r2, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb09 	bl	8000524 <__aeabi_i2d>
 8001f12:	a30d      	add	r3, pc, #52	; (adr r3, 8001f48 <OBD2_PID_Parse+0x798>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe fb6e 	bl	80005f8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe40 	bl	8000ba8 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]
		break;
 8001f2c:	bf00      	nop
	}
	return value;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	ee07 3a90 	vmov	s15, r3
}
 8001f34:	eeb0 0a67 	vmov.f32	s0, s15
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	9999999a 	.word	0x9999999a
 8001f44:	3fa99999 	.word	0x3fa99999
 8001f48:	9999999a 	.word	0x9999999a
 8001f4c:	3fb99999 	.word	0x3fb99999
 8001f50:	c2c80000 	.word	0xc2c80000
 8001f54:	c3520000 	.word	0xc3520000
 8001f58:	51eb851f 	.word	0x51eb851f
 8001f5c:	47ae147b 	.word	0x47ae147b
 8001f60:	3f747ae1 	.word	0x3f747ae1

08001f64 <OBD2_Init>:

obd_protocol OBD2_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	used_protocol = KLine_Init();
 8001f68:	f7ff f8b4 	bl	80010d4 <KLine_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <OBD2_Init+0x48>)
 8001f72:	701a      	strb	r2, [r3, #0]
	if(used_protocol == OBD_NONE)
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <OBD2_Init+0x48>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d113      	bne.n	8001fa4 <OBD2_Init+0x40>
	{
		used_protocol = KWP2000_Fast_Init();
 8001f7c:	f7ff f942 	bl	8001204 <KWP2000_Fast_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <OBD2_Init+0x48>)
 8001f86:	701a      	strb	r2, [r3, #0]
		if(used_protocol == OBD_NONE)
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <OBD2_Init+0x48>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <OBD2_Init+0x40>
		{
			used_protocol = OBD_PROTO_CAN;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <OBD2_Init+0x48>)
 8001f92:	2204      	movs	r2, #4
 8001f94:	701a      	strb	r2, [r3, #0]
			HAL_DMA_DeInit(&hdma_usart1_rx);
 8001f96:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <OBD2_Init+0x4c>)
 8001f98:	f002 f920 	bl	80041dc <HAL_DMA_DeInit>
			MX_CAN1_Init();
 8001f9c:	f7fe ffd6 	bl	8000f4c <MX_CAN1_Init>
			canConfig();
 8001fa0:	f7ff f80a 	bl	8000fb8 <canConfig>
		}
	}
	return used_protocol;
 8001fa4:	4b01      	ldr	r3, [pc, #4]	; (8001fac <OBD2_Init+0x48>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000395 	.word	0x20000395
 8001fb0:	200004f4 	.word	0x200004f4

08001fb4 <OBD2_ShowOnDisplay>:

void OBD2_ShowOnDisplay(float value)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	snprintf(str, 10, "%f", value);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fac2 	bl	8000548 <__aeabi_f2d>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	f107 000c 	add.w	r0, r7, #12
 8001fcc:	e9cd 2300 	strd	r2, r3, [sp]
 8001fd0:	4a13      	ldr	r2, [pc, #76]	; (8002020 <OBD2_ShowOnDisplay+0x6c>)
 8001fd2:	210a      	movs	r1, #10
 8001fd4:	f007 f954 	bl	8009280 <sniprintf>
	ssd1306_SetCursor(0,0);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 ffea 	bl	8002fb4 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f000 fe99 	bl	8002d18 <ssd1306_Fill>
	ssd1306_WriteString(pid_names[obd_comm.pid_index], Font_7x10, White);
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <OBD2_ShowOnDisplay+0x70>)
 8001fe8:	789b      	ldrb	r3, [r3, #2]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <OBD2_ShowOnDisplay+0x74>)
 8001fee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <OBD2_ShowOnDisplay+0x78>)
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	ca06      	ldmia	r2, {r1, r2}
 8001ff8:	f000 ffb6 	bl	8002f68 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 20);
 8001ffc:	2114      	movs	r1, #20
 8001ffe:	2028      	movs	r0, #40	; 0x28
 8002000:	f000 ffd8 	bl	8002fb4 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, White);
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <OBD2_ShowOnDisplay+0x7c>)
 8002006:	f107 000c 	add.w	r0, r7, #12
 800200a:	2301      	movs	r3, #1
 800200c:	ca06      	ldmia	r2, {r1, r2}
 800200e:	f000 ffab 	bl	8002f68 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002012:	f000 fea5 	bl	8002d60 <ssd1306_UpdateScreen>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	0800b7a0 	.word	0x0800b7a0
 8002024:	20000548 	.word	0x20000548
 8002028:	20000000 	.word	0x20000000
 800202c:	20000170 	.word	0x20000170
 8002030:	20000178 	.word	0x20000178

08002034 <PID_Get_Lenght>:
		[0x7C] = { 3 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 5 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
	return PID_LUT[pid][0];
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4a03      	ldr	r2, [pc, #12]	; (8002050 <PID_Get_Lenght+0x1c>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	0800bd6c 	.word	0x0800bd6c

08002054 <Get_PID>:

uint8_t Get_PID(uint8_t index)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
	return PID_list[index];
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	4a03      	ldr	r2, [pc, #12]	; (8002070 <Get_PID+0x1c>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	0800bd10 	.word	0x0800bd10

08002074 <HAL_GPIO_EXTI_Callback>:

static uint8_t state = 1;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MENU_BTN_Pin)
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	2b40      	cmp	r3, #64	; 0x40
 8002082:	d106      	bne.n	8002092 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <HAL_GPIO_EXTI_Callback+0x28>)
 8002086:	f004 fc7d 	bl	8006984 <HAL_TIM_Base_Start_IT>
		state = 0;
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		__NOP();
	}
}
 8002090:	e000      	b.n	8002094 <HAL_GPIO_EXTI_Callback+0x20>
		__NOP();
 8002092:	bf00      	nop
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000424 	.word	0x20000424
 80020a0:	20000168 	.word	0x20000168

080020a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin)== GPIO_PIN_SET)
 80020ac:	2140      	movs	r1, #64	; 0x40
 80020ae:	4813      	ldr	r0, [pc, #76]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80020b0:	f002 fd38 	bl	8004b24 <HAL_GPIO_ReadPin>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d11c      	bne.n	80020f4 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		state = 1;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
		if(obd_comm.pid_index == 89)
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80020c2:	789b      	ldrb	r3, [r3, #2]
 80020c4:	2b59      	cmp	r3, #89	; 0x59
 80020c6:	d103      	bne.n	80020d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			obd_comm.pid_index = 0;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	709a      	strb	r2, [r3, #2]
 80020ce:	e005      	b.n	80020dc <HAL_TIM_PeriodElapsedCallback+0x38>
		}
		else
		{
			obd_comm.pid_index++;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80020d2:	789b      	ldrb	r3, [r3, #2]
 80020d4:	3301      	adds	r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80020da:	709a      	strb	r2, [r3, #2]
		}
		obd_comm.pid = Get_PID(obd_comm.pid_index);
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ffb7 	bl	8002054 <Get_PID>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80020ec:	705a      	strb	r2, [r3, #1]
		HAL_TIM_Base_Stop_IT(&htim1);
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80020f0:	f004 fc9c 	bl	8006a2c <HAL_TIM_Base_Stop_IT>
	}
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	48000400 	.word	0x48000400
 8002100:	20000168 	.word	0x20000168
 8002104:	20000548 	.word	0x20000548
 8002108:	20000424 	.word	0x20000424

0800210c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b097      	sub	sp, #92	; 0x5c
 8002110:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002112:	f000 ff99 	bl	8003048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002116:	f000 f857 	bl	80021c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800211a:	f000 f977 	bl	800240c <MX_GPIO_Init>
  MX_DMA_Init();
 800211e:	f000 f957 	bl	80023d0 <MX_DMA_Init>
  MX_I2C2_Init();
 8002122:	f000 f8a3 	bl	800226c <MX_I2C2_Init>
  MX_TIM1_Init();
 8002126:	f000 f8ff 	bl	8002328 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 800212a:	f000 fd8b 	bl	8002c44 <ssd1306_Init>
  ssd1306_Fill(Black);
 800212e:	2000      	movs	r0, #0
 8002130:	f000 fdf2 	bl	8002d18 <ssd1306_Fill>
  ssd1306_WriteString("Teplota", Font_7x10, White);
 8002134:	4a21      	ldr	r2, [pc, #132]	; (80021bc <main+0xb0>)
 8002136:	2301      	movs	r3, #1
 8002138:	ca06      	ldmia	r2, {r1, r2}
 800213a:	4821      	ldr	r0, [pc, #132]	; (80021c0 <main+0xb4>)
 800213c:	f000 ff14 	bl	8002f68 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002140:	f000 fe0e 	bl	8002d60 <ssd1306_UpdateScreen>

  obd_comm.used_protocol = OBD2_Init();
 8002144:	f7ff ff0e 	bl	8001f64 <OBD2_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <main+0xb8>)
 800214e:	701a      	strb	r2, [r3, #0]

  obd_comm.pid = 0x05;
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <main+0xb8>)
 8002152:	2205      	movs	r2, #5
 8002154:	705a      	strb	r2, [r3, #1]

  MX_IWDG_Init();
 8002156:	f000 f8c9 	bl	80022ec <MX_IWDG_Init>

  OBD2_Request(obd_comm);
 800215a:	4c1a      	ldr	r4, [pc, #104]	; (80021c4 <main+0xb8>)
 800215c:	4668      	mov	r0, sp
 800215e:	f104 0310 	add.w	r3, r4, #16
 8002162:	2258      	movs	r2, #88	; 0x58
 8002164:	4619      	mov	r1, r3
 8002166:	f006 fc0b 	bl	8008980 <memcpy>
 800216a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800216e:	f7ff fae3 	bl	8001738 <OBD2_Request>

  OBD2_Request(obd_comm);
 8002172:	4c14      	ldr	r4, [pc, #80]	; (80021c4 <main+0xb8>)
 8002174:	4668      	mov	r0, sp
 8002176:	f104 0310 	add.w	r3, r4, #16
 800217a:	2258      	movs	r2, #88	; 0x58
 800217c:	4619      	mov	r1, r3
 800217e:	f006 fbff 	bl	8008980 <memcpy>
 8002182:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002186:	f7ff fad7 	bl	8001738 <OBD2_Request>

  OBD2_Request(obd_comm);
 800218a:	4c0e      	ldr	r4, [pc, #56]	; (80021c4 <main+0xb8>)
 800218c:	4668      	mov	r0, sp
 800218e:	f104 0310 	add.w	r3, r4, #16
 8002192:	2258      	movs	r2, #88	; 0x58
 8002194:	4619      	mov	r1, r3
 8002196:	f006 fbf3 	bl	8008980 <memcpy>
 800219a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800219e:	f7ff facb 	bl	8001738 <OBD2_Request>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  OBD2_Request(obd_comm);
 80021a2:	4c08      	ldr	r4, [pc, #32]	; (80021c4 <main+0xb8>)
 80021a4:	4668      	mov	r0, sp
 80021a6:	f104 0310 	add.w	r3, r4, #16
 80021aa:	2258      	movs	r2, #88	; 0x58
 80021ac:	4619      	mov	r1, r3
 80021ae:	f006 fbe7 	bl	8008980 <memcpy>
 80021b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021b6:	f7ff fabf 	bl	8001738 <OBD2_Request>
 80021ba:	e7f2      	b.n	80021a2 <main+0x96>
 80021bc:	20000170 	.word	0x20000170
 80021c0:	0800bd08 	.word	0x0800bd08
 80021c4:	20000548 	.word	0x20000548

080021c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b096      	sub	sp, #88	; 0x58
 80021cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	2244      	movs	r2, #68	; 0x44
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f006 fbe0 	bl	800899c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021dc:	463b      	mov	r3, r7
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021ee:	f003 f9db 	bl	80055a8 <HAL_PWREx_ControlVoltageScaling>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021f8:	f000 f99a 	bl	8002530 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80021fc:	2309      	movs	r3, #9
 80021fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002206:	2301      	movs	r3, #1
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220a:	2302      	movs	r3, #2
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800220e:	2303      	movs	r3, #3
 8002210:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002212:	2301      	movs	r3, #1
 8002214:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002216:	230a      	movs	r3, #10
 8002218:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800221a:	2307      	movs	r3, #7
 800221c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800221e:	2302      	movs	r3, #2
 8002220:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002222:	2302      	movs	r3, #2
 8002224:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4618      	mov	r0, r3
 800222c:	f003 fa12 	bl	8005654 <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002236:	f000 f97b 	bl	8002530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223a:	230f      	movs	r3, #15
 800223c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223e:	2303      	movs	r3, #3
 8002240:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800224e:	463b      	mov	r3, r7
 8002250:	2104      	movs	r1, #4
 8002252:	4618      	mov	r0, r3
 8002254:	f003 fe12 	bl	8005e7c <HAL_RCC_ClockConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800225e:	f000 f967 	bl	8002530 <Error_Handler>
  }
}
 8002262:	bf00      	nop
 8002264:	3758      	adds	r7, #88	; 0x58
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <MX_I2C2_Init+0x74>)
 8002272:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <MX_I2C2_Init+0x78>)
 8002274:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_I2C2_Init+0x74>)
 8002278:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <MX_I2C2_Init+0x7c>)
 800227a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_I2C2_Init+0x74>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <MX_I2C2_Init+0x74>)
 8002284:	2201      	movs	r2, #1
 8002286:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <MX_I2C2_Init+0x74>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_I2C2_Init+0x74>)
 8002290:	2200      	movs	r2, #0
 8002292:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <MX_I2C2_Init+0x74>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_I2C2_Init+0x74>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_I2C2_Init+0x74>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022a6:	480e      	ldr	r0, [pc, #56]	; (80022e0 <MX_I2C2_Init+0x74>)
 80022a8:	f002 fc84 	bl	8004bb4 <HAL_I2C_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80022b2:	f000 f93d 	bl	8002530 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022b6:	2100      	movs	r1, #0
 80022b8:	4809      	ldr	r0, [pc, #36]	; (80022e0 <MX_I2C2_Init+0x74>)
 80022ba:	f003 f871 	bl	80053a0 <HAL_I2CEx_ConfigAnalogFilter>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80022c4:	f000 f934 	bl	8002530 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80022c8:	2100      	movs	r1, #0
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_I2C2_Init+0x74>)
 80022cc:	f003 f8b3 	bl	8005436 <HAL_I2CEx_ConfigDigitalFilter>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80022d6:	f000 f92b 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200003c0 	.word	0x200003c0
 80022e4:	40005800 	.word	0x40005800
 80022e8:	10909cec 	.word	0x10909cec

080022ec <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <MX_IWDG_Init+0x34>)
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <MX_IWDG_Init+0x38>)
 80022f4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <MX_IWDG_Init+0x34>)
 80022f8:	2204      	movs	r2, #4
 80022fa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <MX_IWDG_Init+0x34>)
 80022fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002302:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <MX_IWDG_Init+0x34>)
 8002306:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800230a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <MX_IWDG_Init+0x34>)
 800230e:	f003 f8de 	bl	80054ce <HAL_IWDG_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002318:	f000 f90a 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000414 	.word	0x20000414
 8002324:	40003000 	.word	0x40003000

08002328 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232e:	f107 0310 	add.w	r3, r7, #16
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <MX_TIM1_Init+0xa0>)
 8002348:	4a20      	ldr	r2, [pc, #128]	; (80023cc <MX_TIM1_Init+0xa4>)
 800234a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800;
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <MX_TIM1_Init+0xa0>)
 800234e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <MX_TIM1_Init+0xa0>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <MX_TIM1_Init+0xa0>)
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <MX_TIM1_Init+0xa0>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <MX_TIM1_Init+0xa0>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <MX_TIM1_Init+0xa0>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <MX_TIM1_Init+0xa0>)
 8002376:	f004 faad 	bl	80068d4 <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002380:	f000 f8d6 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800238a:	f107 0310 	add.w	r3, r7, #16
 800238e:	4619      	mov	r1, r3
 8002390:	480d      	ldr	r0, [pc, #52]	; (80023c8 <MX_TIM1_Init+0xa0>)
 8002392:	f004 fc99 	bl	8006cc8 <HAL_TIM_ConfigClockSource>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800239c:	f000 f8c8 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_TIM1_Init+0xa0>)
 80023b2:	f004 fe79 	bl	80070a8 <HAL_TIMEx_MasterConfigSynchronization>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80023bc:	f000 f8b8 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000424 	.word	0x20000424
 80023cc:	40012c00 	.word	0x40012c00

080023d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <MX_DMA_Init+0x38>)
 80023d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <MX_DMA_Init+0x38>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6493      	str	r3, [r2, #72]	; 0x48
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <MX_DMA_Init+0x38>)
 80023e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	200f      	movs	r0, #15
 80023f4:	f001 fdf5 	bl	8003fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80023f8:	200f      	movs	r0, #15
 80023fa:	f001 fe0e 	bl	800401a <HAL_NVIC_EnableIRQ>

}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000

0800240c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002422:	4b40      	ldr	r3, [pc, #256]	; (8002524 <MX_GPIO_Init+0x118>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <MX_GPIO_Init+0x118>)
 8002428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242e:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <MX_GPIO_Init+0x118>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800243a:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <MX_GPIO_Init+0x118>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	4a39      	ldr	r2, [pc, #228]	; (8002524 <MX_GPIO_Init+0x118>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002446:	4b37      	ldr	r3, [pc, #220]	; (8002524 <MX_GPIO_Init+0x118>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <MX_GPIO_Init+0x118>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	4a33      	ldr	r2, [pc, #204]	; (8002524 <MX_GPIO_Init+0x118>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <MX_GPIO_Init+0x118>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <MX_GPIO_Init+0x118>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	4a2d      	ldr	r2, [pc, #180]	; (8002524 <MX_GPIO_Init+0x118>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <MX_GPIO_Init+0x118>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8002482:	2200      	movs	r2, #0
 8002484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002488:	4827      	ldr	r0, [pc, #156]	; (8002528 <MX_GPIO_Init+0x11c>)
 800248a:	f002 fb63 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002498:	f002 fb5c 	bl	8004b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BAT_V_Pin */
  GPIO_InitStruct.Pin = BAT_V_Pin;
 800249c:	2320      	movs	r3, #32
 800249e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024a0:	230b      	movs	r3, #11
 80024a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	481e      	ldr	r0, [pc, #120]	; (8002528 <MX_GPIO_Init+0x11c>)
 80024b0:	f002 f8e4 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_S_Pin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 80024b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024be:	2302      	movs	r3, #2
 80024c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4619      	mov	r1, r3
 80024cc:	4816      	ldr	r0, [pc, #88]	; (8002528 <MX_GPIO_Init+0x11c>)
 80024ce:	f002 f8d5 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : LLine_Pin */
  GPIO_InitStruct.Pin = LLine_Pin;
 80024d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d8:	2301      	movs	r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LLine_GPIO_Port, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ee:	f002 f8c5 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_BTN_Pin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin;
 80024f2:	2340      	movs	r3, #64	; 0x40
 80024f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MENU_BTN_GPIO_Port, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	4809      	ldr	r0, [pc, #36]	; (800252c <MX_GPIO_Init+0x120>)
 8002508:	f002 f8b8 	bl	800467c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	2017      	movs	r0, #23
 8002512:	f001 fd66 	bl	8003fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002516:	2017      	movs	r0, #23
 8002518:	f001 fd7f 	bl	800401a <HAL_NVIC_EnableIRQ>

}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	48000800 	.word	0x48000800
 800252c:	48000400 	.word	0x48000400

08002530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002534:	b672      	cpsid	i
}
 8002536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002538:	e7fe      	b.n	8002538 <Error_Handler+0x8>
	...

0800253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_MspInit+0x44>)
 8002544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_MspInit+0x44>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6613      	str	r3, [r2, #96]	; 0x60
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_MspInit+0x44>)
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_MspInit+0x44>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <HAL_MspInit+0x44>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_MspInit+0x44>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a20      	ldr	r2, [pc, #128]	; (8002624 <HAL_CAN_MspInit+0xa0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d139      	bne.n	800261a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <HAL_CAN_MspInit+0xa4>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <HAL_CAN_MspInit+0xa4>)
 80025ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025b0:	6593      	str	r3, [r2, #88]	; 0x58
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_CAN_MspInit+0xa4>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <HAL_CAN_MspInit+0xa4>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_CAN_MspInit+0xa4>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_CAN_MspInit+0xa4>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80025d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025dc:	2302      	movs	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80025e8:	2309      	movs	r3, #9
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f6:	f002 f841 	bl	800467c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2101      	movs	r1, #1
 80025fe:	2014      	movs	r0, #20
 8002600:	f001 fcef 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002604:	2014      	movs	r0, #20
 8002606:	f001 fd08 	bl	800401a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2101      	movs	r1, #1
 800260e:	2015      	movs	r0, #21
 8002610:	f001 fce7 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002614:	2015      	movs	r0, #21
 8002616:	f001 fd00 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800261a:	bf00      	nop
 800261c:	3728      	adds	r7, #40	; 0x28
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40006400 	.word	0x40006400
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b0a0      	sub	sp, #128	; 0x80
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	225c      	movs	r2, #92	; 0x5c
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f006 f9a5 	bl	800899c <memset>
  if(hi2c->Instance==I2C2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <HAL_I2C_MspInit+0xa8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d136      	bne.n	80026ca <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002660:	2300      	movs	r3, #0
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fe29 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002674:	f7ff ff5c 	bl	8002530 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_I2C_MspInit+0xac>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <HAL_I2C_MspInit+0xac>)
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_I2C_MspInit+0xac>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002690:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002694:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002696:	2312      	movs	r3, #18
 8002698:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80026a2:	2304      	movs	r3, #4
 80026a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026aa:	4619      	mov	r1, r3
 80026ac:	480b      	ldr	r0, [pc, #44]	; (80026dc <HAL_I2C_MspInit+0xb0>)
 80026ae:	f001 ffe5 	bl	800467c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_I2C_MspInit+0xac>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <HAL_I2C_MspInit+0xac>)
 80026b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026bc:	6593      	str	r3, [r2, #88]	; 0x58
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_I2C_MspInit+0xac>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80026ca:	bf00      	nop
 80026cc:	3780      	adds	r7, #128	; 0x80
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40005800 	.word	0x40005800
 80026d8:	40021000 	.word	0x40021000
 80026dc:	48000400 	.word	0x48000400

080026e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_TIM_Base_MspInit+0x74>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d12b      	bne.n	800274a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_TIM_Base_MspInit+0x78>)
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_TIM_Base_MspInit+0x78>)
 80026f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026fc:	6613      	str	r3, [r2, #96]	; 0x60
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_TIM_Base_MspInit+0x78>)
 8002700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	2018      	movs	r0, #24
 8002710:	f001 fc67 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002714:	2018      	movs	r0, #24
 8002716:	f001 fc80 	bl	800401a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	2019      	movs	r0, #25
 8002720:	f001 fc5f 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002724:	2019      	movs	r0, #25
 8002726:	f001 fc78 	bl	800401a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	201a      	movs	r0, #26
 8002730:	f001 fc57 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002734:	201a      	movs	r0, #26
 8002736:	f001 fc70 	bl	800401a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	201b      	movs	r0, #27
 8002740:	f001 fc4f 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002744:	201b      	movs	r0, #27
 8002746:	f001 fc68 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0a0      	sub	sp, #128	; 0x80
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	225c      	movs	r2, #92	; 0x5c
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f006 f90d 	bl	800899c <memset>
  if(huart->Instance==USART1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a38      	ldr	r2, [pc, #224]	; (8002868 <HAL_UART_MspInit+0x10c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d168      	bne.n	800285e <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800278c:	2301      	movs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002790:	2300      	movs	r3, #0
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	4618      	mov	r0, r3
 800279a:	f003 fd91 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027a4:	f7ff fec4 	bl	8002530 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027a8:	4b30      	ldr	r3, [pc, #192]	; (800286c <HAL_UART_MspInit+0x110>)
 80027aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ac:	4a2f      	ldr	r2, [pc, #188]	; (800286c <HAL_UART_MspInit+0x110>)
 80027ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b2:	6613      	str	r3, [r2, #96]	; 0x60
 80027b4:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_UART_MspInit+0x110>)
 80027b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_UART_MspInit+0x110>)
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	4a29      	ldr	r2, [pc, #164]	; (800286c <HAL_UART_MspInit+0x110>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <HAL_UART_MspInit+0x110>)
 80027ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = KLine_TX_Pin|KLine_RX_Pin;
 80027d8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ea:	2307      	movs	r3, #7
 80027ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027f2:	4619      	mov	r1, r3
 80027f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f8:	f001 ff40 	bl	800467c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_UART_MspInit+0x114>)
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_UART_MspInit+0x118>)
 8002800:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_UART_MspInit+0x114>)
 8002804:	2202      	movs	r2, #2
 8002806:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_UART_MspInit+0x114>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800280e:	4b18      	ldr	r3, [pc, #96]	; (8002870 <HAL_UART_MspInit+0x114>)
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_UART_MspInit+0x114>)
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_UART_MspInit+0x114>)
 800281c:	2200      	movs	r2, #0
 800281e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_UART_MspInit+0x114>)
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_UART_MspInit+0x114>)
 8002828:	2200      	movs	r2, #0
 800282a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800282c:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_UART_MspInit+0x114>)
 800282e:	2200      	movs	r2, #0
 8002830:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002832:	480f      	ldr	r0, [pc, #60]	; (8002870 <HAL_UART_MspInit+0x114>)
 8002834:	f001 fc1a 	bl	800406c <HAL_DMA_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800283e:	f7ff fe77 	bl	8002530 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_UART_MspInit+0x114>)
 8002846:	671a      	str	r2, [r3, #112]	; 0x70
 8002848:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_UART_MspInit+0x114>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2025      	movs	r0, #37	; 0x25
 8002854:	f001 fbc5 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002858:	2025      	movs	r0, #37	; 0x25
 800285a:	f001 fbde 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800285e:	bf00      	nop
 8002860:	3780      	adds	r7, #128	; 0x80
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40013800 	.word	0x40013800
 800286c:	40021000 	.word	0x40021000
 8002870:	200004f4 	.word	0x200004f4
 8002874:	40020058 	.word	0x40020058

08002878 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <HAL_UART_MspDeInit+0x44>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d113      	bne.n	80028b2 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800288a:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_UART_MspDeInit+0x48>)
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <HAL_UART_MspDeInit+0x48>)
 8002890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002894:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, KLine_TX_Pin|KLine_RX_Pin);
 8002896:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800289a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289e:	f002 f867 	bl	8004970 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 fc98 	bl	80041dc <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80028ac:	2025      	movs	r0, #37	; 0x25
 80028ae:	f001 fbc2 	bl	8004036 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40013800 	.word	0x40013800
 80028c0:	40021000 	.word	0x40021000

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <NMI_Handler+0x4>

080028ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <MemManage_Handler+0x4>

080028d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028da:	e7fe      	b.n	80028da <BusFault_Handler+0x4>

080028dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <UsageFault_Handler+0x4>

080028e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002910:	f000 fbee 	bl	80030f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <DMA1_Channel5_IRQHandler+0x10>)
 800291e:	f001 fdce 	bl	80044be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200004f4 	.word	0x200004f4

0800292c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <CAN1_RX0_IRQHandler+0x10>)
 8002932:	f001 f832 	bl	800399a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000398 	.word	0x20000398

08002940 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002944:	4802      	ldr	r0, [pc, #8]	; (8002950 <CAN1_RX1_IRQHandler+0x10>)
 8002946:	f001 f828 	bl	800399a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000398 	.word	0x20000398

08002954 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_BTN_Pin);
 8002958:	2040      	movs	r0, #64	; 0x40
 800295a:	f002 f913 	bl	8004b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800296a:	f004 f88e 	bl	8006a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000424 	.word	0x20000424

08002978 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800297e:	f004 f884 	bl	8006a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000424 	.word	0x20000424

0800298c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002992:	f004 f87a 	bl	8006a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000424 	.word	0x20000424

080029a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <TIM1_CC_IRQHandler+0x10>)
 80029a6:	f004 f870 	bl	8006a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000424 	.word	0x20000424

080029b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <USART1_IRQHandler+0x10>)
 80029ba:	f004 fe3b 	bl	8007634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000470 	.word	0x20000470

080029c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
	return 1;
 80029cc:	2301      	movs	r3, #1
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <_kill>:

int _kill(int pid, int sig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029e2:	f005 ffa3 	bl	800892c <__errno>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2216      	movs	r2, #22
 80029ea:	601a      	str	r2, [r3, #0]
	return -1;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_exit>:

void _exit (int status)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff ffe7 	bl	80029d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a0a:	e7fe      	b.n	8002a0a <_exit+0x12>

08002a0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e00a      	b.n	8002a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a1e:	f3af 8000 	nop.w
 8002a22:	4601      	mov	r1, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	60ba      	str	r2, [r7, #8]
 8002a2a:	b2ca      	uxtb	r2, r1
 8002a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	dbf0      	blt.n	8002a1e <_read+0x12>
	}

return len;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e009      	b.n	8002a6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	60ba      	str	r2, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbf1      	blt.n	8002a58 <_write+0x12>
	}
	return len;
 8002a74:	687b      	ldr	r3, [r7, #4]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <_close>:

int _close(int file)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
	return -1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <_isatty>:

int _isatty(int file)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
	return 1;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <_sbrk+0x5c>)
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <_sbrk+0x60>)
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <_sbrk+0x64>)
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <_sbrk+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d207      	bcs.n	8002b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b18:	f005 ff08 	bl	800892c <__errno>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	220c      	movs	r2, #12
 8002b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	e009      	b.n	8002b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <_sbrk+0x64>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <_sbrk+0x64>)
 8002b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20010000 	.word	0x20010000
 8002b48:	00000400 	.word	0x00000400
 8002b4c:	200005b0 	.word	0x200005b0
 8002b50:	200009d0 	.word	0x200009d0

08002b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <SystemInit+0x28>)
 8002b5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b5e:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <SystemInit+0x28>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <SystemInit+0x28>)
 8002b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b84:	f7ff ffe6 	bl	8002b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8002b8a:	490d      	ldr	r1, [pc, #52]	; (8002bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <LoopForever+0xe>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b90:	e002      	b.n	8002b98 <LoopCopyDataInit>

08002b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b96:	3304      	adds	r3, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b9c:	d3f9      	bcc.n	8002b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ba0:	4c0a      	ldr	r4, [pc, #40]	; (8002bcc <LoopForever+0x16>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba4:	e001      	b.n	8002baa <LoopFillZerobss>

08002ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba8:	3204      	adds	r2, #4

08002baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bac:	d3fb      	bcc.n	8002ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bae:	f005 fec3 	bl	8008938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bb2:	f7ff faab 	bl	800210c <main>

08002bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8002bb6:	e7fe      	b.n	8002bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002bb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc0:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8002bc4:	0800dd54 	.word	0x0800dd54
  ldr r2, =_sbss
 8002bc8:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002bcc:	200009d0 	.word	0x200009d0

08002bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bd0:	e7fe      	b.n	8002bd0 <ADC1_IRQHandler>

08002bd2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af04      	add	r7, sp, #16
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	9302      	str	r3, [sp, #8]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	1dfb      	adds	r3, r7, #7
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2178      	movs	r1, #120	; 0x78
 8002bfe:	4803      	ldr	r0, [pc, #12]	; (8002c0c <ssd1306_WriteCommand+0x2c>)
 8002c00:	f002 f868 	bl	8004cd4 <HAL_I2C_Mem_Write>
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200003c0 	.word	0x200003c0

08002c10 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af04      	add	r7, sp, #16
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c22:	9202      	str	r2, [sp, #8]
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	2240      	movs	r2, #64	; 0x40
 8002c2e:	2178      	movs	r1, #120	; 0x78
 8002c30:	4803      	ldr	r0, [pc, #12]	; (8002c40 <ssd1306_WriteData+0x30>)
 8002c32:	f002 f84f 	bl	8004cd4 <HAL_I2C_Mem_Write>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200003c0 	.word	0x200003c0

08002c44 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002c48:	f7ff ffc3 	bl	8002bd2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002c4c:	2064      	movs	r0, #100	; 0x64
 8002c4e:	f000 fa6f 	bl	8003130 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002c52:	2000      	movs	r0, #0
 8002c54:	f000 f9da 	bl	800300c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002c58:	2020      	movs	r0, #32
 8002c5a:	f7ff ffc1 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7ff ffbe 	bl	8002be0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002c64:	20b0      	movs	r0, #176	; 0xb0
 8002c66:	f7ff ffbb 	bl	8002be0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002c6a:	20c8      	movs	r0, #200	; 0xc8
 8002c6c:	f7ff ffb8 	bl	8002be0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7ff ffb5 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002c76:	2010      	movs	r0, #16
 8002c78:	f7ff ffb2 	bl	8002be0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002c7c:	2040      	movs	r0, #64	; 0x40
 8002c7e:	f7ff ffaf 	bl	8002be0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002c82:	20ff      	movs	r0, #255	; 0xff
 8002c84:	f000 f9ae 	bl	8002fe4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002c88:	20a1      	movs	r0, #161	; 0xa1
 8002c8a:	f7ff ffa9 	bl	8002be0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002c8e:	20a6      	movs	r0, #166	; 0xa6
 8002c90:	f7ff ffa6 	bl	8002be0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002c94:	20a8      	movs	r0, #168	; 0xa8
 8002c96:	f7ff ffa3 	bl	8002be0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002c9a:	203f      	movs	r0, #63	; 0x3f
 8002c9c:	f7ff ffa0 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ca0:	20a4      	movs	r0, #164	; 0xa4
 8002ca2:	f7ff ff9d 	bl	8002be0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002ca6:	20d3      	movs	r0, #211	; 0xd3
 8002ca8:	f7ff ff9a 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7ff ff97 	bl	8002be0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002cb2:	20d5      	movs	r0, #213	; 0xd5
 8002cb4:	f7ff ff94 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002cb8:	20f0      	movs	r0, #240	; 0xf0
 8002cba:	f7ff ff91 	bl	8002be0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002cbe:	20d9      	movs	r0, #217	; 0xd9
 8002cc0:	f7ff ff8e 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002cc4:	2022      	movs	r0, #34	; 0x22
 8002cc6:	f7ff ff8b 	bl	8002be0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002cca:	20da      	movs	r0, #218	; 0xda
 8002ccc:	f7ff ff88 	bl	8002be0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002cd0:	2012      	movs	r0, #18
 8002cd2:	f7ff ff85 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002cd6:	20db      	movs	r0, #219	; 0xdb
 8002cd8:	f7ff ff82 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002cdc:	2020      	movs	r0, #32
 8002cde:	f7ff ff7f 	bl	8002be0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002ce2:	208d      	movs	r0, #141	; 0x8d
 8002ce4:	f7ff ff7c 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002ce8:	2014      	movs	r0, #20
 8002cea:	f7ff ff79 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f000 f98c 	bl	800300c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f000 f80f 	bl	8002d18 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002cfa:	f000 f831 	bl	8002d60 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <ssd1306_Init+0xd0>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <ssd1306_Init+0xd0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002d0a:	4b02      	ldr	r3, [pc, #8]	; (8002d14 <ssd1306_Init+0xd0>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	711a      	strb	r2, [r3, #4]
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200009b4 	.word	0x200009b4

08002d18 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e00d      	b.n	8002d44 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <ssd1306_Fill+0x1a>
 8002d2e:	2100      	movs	r1, #0
 8002d30:	e000      	b.n	8002d34 <ssd1306_Fill+0x1c>
 8002d32:	21ff      	movs	r1, #255	; 0xff
 8002d34:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <ssd1306_Fill+0x44>)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	460a      	mov	r2, r1
 8002d3c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3301      	adds	r3, #1
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4a:	d3ed      	bcc.n	8002d28 <ssd1306_Fill+0x10>
    }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	200005b4 	.word	0x200005b4

08002d60 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002d66:	2300      	movs	r3, #0
 8002d68:	71fb      	strb	r3, [r7, #7]
 8002d6a:	e016      	b.n	8002d9a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	3b50      	subs	r3, #80	; 0x50
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff34 	bl	8002be0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7ff ff31 	bl	8002be0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002d7e:	2010      	movs	r0, #16
 8002d80:	f7ff ff2e 	bl	8002be0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	01db      	lsls	r3, r3, #7
 8002d88:	4a08      	ldr	r2, [pc, #32]	; (8002dac <ssd1306_UpdateScreen+0x4c>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff3e 	bl	8002c10 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	3301      	adds	r3, #1
 8002d98:	71fb      	strb	r3, [r7, #7]
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	2b07      	cmp	r3, #7
 8002d9e:	d9e5      	bls.n	8002d6c <ssd1306_UpdateScreen+0xc>
    }
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200005b4 	.word	0x200005b4

08002db0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	71bb      	strb	r3, [r7, #6]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db3d      	blt.n	8002e46 <ssd1306_DrawPixel+0x96>
 8002dca:	79bb      	ldrb	r3, [r7, #6]
 8002dcc:	2b3f      	cmp	r3, #63	; 0x3f
 8002dce:	d83a      	bhi.n	8002e46 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002dd0:	797b      	ldrb	r3, [r7, #5]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d11a      	bne.n	8002e0c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002dd6:	79fa      	ldrb	r2, [r7, #7]
 8002dd8:	79bb      	ldrb	r3, [r7, #6]
 8002dda:	08db      	lsrs	r3, r3, #3
 8002ddc:	b2d8      	uxtb	r0, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	01db      	lsls	r3, r3, #7
 8002de2:	4413      	add	r3, r2
 8002de4:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <ssd1306_DrawPixel+0xa4>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	b25a      	sxtb	r2, r3
 8002dea:	79bb      	ldrb	r3, [r7, #6]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	2101      	movs	r1, #1
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	b25b      	sxtb	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b259      	sxtb	r1, r3
 8002dfc:	79fa      	ldrb	r2, [r7, #7]
 8002dfe:	4603      	mov	r3, r0
 8002e00:	01db      	lsls	r3, r3, #7
 8002e02:	4413      	add	r3, r2
 8002e04:	b2c9      	uxtb	r1, r1
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <ssd1306_DrawPixel+0xa4>)
 8002e08:	54d1      	strb	r1, [r2, r3]
 8002e0a:	e01d      	b.n	8002e48 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e0c:	79fa      	ldrb	r2, [r7, #7]
 8002e0e:	79bb      	ldrb	r3, [r7, #6]
 8002e10:	08db      	lsrs	r3, r3, #3
 8002e12:	b2d8      	uxtb	r0, r3
 8002e14:	4603      	mov	r3, r0
 8002e16:	01db      	lsls	r3, r3, #7
 8002e18:	4413      	add	r3, r2
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <ssd1306_DrawPixel+0xa4>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	b25a      	sxtb	r2, r3
 8002e20:	79bb      	ldrb	r3, [r7, #6]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	4013      	ands	r3, r2
 8002e34:	b259      	sxtb	r1, r3
 8002e36:	79fa      	ldrb	r2, [r7, #7]
 8002e38:	4603      	mov	r3, r0
 8002e3a:	01db      	lsls	r3, r3, #7
 8002e3c:	4413      	add	r3, r2
 8002e3e:	b2c9      	uxtb	r1, r1
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <ssd1306_DrawPixel+0xa4>)
 8002e42:	54d1      	strb	r1, [r2, r3]
 8002e44:	e000      	b.n	8002e48 <ssd1306_DrawPixel+0x98>
        return;
 8002e46:	bf00      	nop
    }
}
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	200005b4 	.word	0x200005b4

08002e58 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4604      	mov	r4, r0
 8002e60:	1d38      	adds	r0, r7, #4
 8002e62:	e880 0006 	stmia.w	r0, {r1, r2}
 8002e66:	461a      	mov	r2, r3
 8002e68:	4623      	mov	r3, r4
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b1f      	cmp	r3, #31
 8002e74:	d902      	bls.n	8002e7c <ssd1306_WriteChar+0x24>
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2b7e      	cmp	r3, #126	; 0x7e
 8002e7a:	d901      	bls.n	8002e80 <ssd1306_WriteChar+0x28>
        return 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e06d      	b.n	8002f5c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002e80:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <ssd1306_WriteChar+0x10c>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	793b      	ldrb	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	dc06      	bgt.n	8002e9c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002e8e:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <ssd1306_WriteChar+0x10c>)
 8002e90:	885b      	ldrh	r3, [r3, #2]
 8002e92:	461a      	mov	r2, r3
 8002e94:	797b      	ldrb	r3, [r7, #5]
 8002e96:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	dd01      	ble.n	8002ea0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e05d      	b.n	8002f5c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	e04c      	b.n	8002f40 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	3b20      	subs	r3, #32
 8002eac:	7979      	ldrb	r1, [r7, #5]
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	440b      	add	r3, r1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	e034      	b.n	8002f30 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <ssd1306_WriteChar+0x10c>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	b2d8      	uxtb	r0, r3
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <ssd1306_WriteChar+0x10c>)
 8002ee6:	885b      	ldrh	r3, [r3, #2]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	7bba      	ldrb	r2, [r7, #14]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f7ff ff5b 	bl	8002db0 <ssd1306_DrawPixel>
 8002efa:	e016      	b.n	8002f2a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <ssd1306_WriteChar+0x10c>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	b2d8      	uxtb	r0, r3
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <ssd1306_WriteChar+0x10c>)
 8002f0c:	885b      	ldrh	r3, [r3, #2]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	b2d9      	uxtb	r1, r3
 8002f18:	7bbb      	ldrb	r3, [r7, #14]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	461a      	mov	r2, r3
 8002f26:	f7ff ff43 	bl	8002db0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	793b      	ldrb	r3, [r7, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d3c5      	bcc.n	8002ec6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	797b      	ldrb	r3, [r7, #5]
 8002f42:	461a      	mov	r2, r3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d3ad      	bcc.n	8002ea6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <ssd1306_WriteChar+0x10c>)
 8002f4c:	881a      	ldrh	r2, [r3, #0]
 8002f4e:	793b      	ldrb	r3, [r7, #4]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <ssd1306_WriteChar+0x10c>)
 8002f58:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3724      	adds	r7, #36	; 0x24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd90      	pop	{r4, r7, pc}
 8002f64:	200009b4 	.word	0x200009b4

08002f68 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	1d38      	adds	r0, r7, #4
 8002f72:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f76:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002f78:	e012      	b.n	8002fa0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	7818      	ldrb	r0, [r3, #0]
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	1d3a      	adds	r2, r7, #4
 8002f82:	ca06      	ldmia	r2, {r1, r2}
 8002f84:	f7ff ff68 	bl	8002e58 <ssd1306_WriteChar>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d002      	beq.n	8002f9a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	e008      	b.n	8002fac <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e8      	bne.n	8002f7a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	781b      	ldrb	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	71fb      	strb	r3, [r7, #7]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <ssd1306_SetCursor+0x2c>)
 8002fca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002fcc:	79bb      	ldrb	r3, [r7, #6]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <ssd1306_SetCursor+0x2c>)
 8002fd2:	805a      	strh	r2, [r3, #2]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	200009b4 	.word	0x200009b4

08002fe4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002fee:	2381      	movs	r3, #129	; 0x81
 8002ff0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fdf3 	bl	8002be0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fdef 	bl	8002be0 <ssd1306_WriteCommand>
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800301c:	23af      	movs	r3, #175	; 0xaf
 800301e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <ssd1306_SetDisplayOn+0x38>)
 8003022:	2201      	movs	r2, #1
 8003024:	715a      	strb	r2, [r3, #5]
 8003026:	e004      	b.n	8003032 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003028:	23ae      	movs	r3, #174	; 0xae
 800302a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <ssd1306_SetDisplayOn+0x38>)
 800302e:	2200      	movs	r2, #0
 8003030:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fdd3 	bl	8002be0 <ssd1306_WriteCommand>
}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	200009b4 	.word	0x200009b4

08003048 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003052:	2003      	movs	r0, #3
 8003054:	f000 ffba 	bl	8003fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003058:	2000      	movs	r0, #0
 800305a:	f000 f80d 	bl	8003078 <HAL_InitTick>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	71fb      	strb	r3, [r7, #7]
 8003068:	e001      	b.n	800306e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800306a:	f7ff fa67 	bl	800253c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800306e:	79fb      	ldrb	r3, [r7, #7]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003084:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_InitTick+0x6c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d023      	beq.n	80030d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_InitTick+0x70>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_InitTick+0x6c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309a:	fbb3 f3f1 	udiv	r3, r3, r1
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 ffd5 	bl	8004052 <HAL_SYSTICK_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b0f      	cmp	r3, #15
 80030b2:	d809      	bhi.n	80030c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b4:	2200      	movs	r2, #0
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	f04f 30ff 	mov.w	r0, #4294967295
 80030bc:	f000 ff91 	bl	8003fe2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_InitTick+0x74>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e007      	b.n	80030d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
 80030cc:	e004      	b.n	80030d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
 80030d2:	e001      	b.n	80030d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000184 	.word	0x20000184
 80030e8:	2000016c 	.word	0x2000016c
 80030ec:	20000180 	.word	0x20000180

080030f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_IncTick+0x20>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_IncTick+0x24>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_IncTick+0x24>)
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20000184 	.word	0x20000184
 8003114:	200009bc 	.word	0x200009bc

08003118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return uwTick;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <HAL_GetTick+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	200009bc 	.word	0x200009bc

08003130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff ffee 	bl	8003118 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d005      	beq.n	8003156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_Delay+0x44>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003156:	bf00      	nop
 8003158:	f7ff ffde 	bl	8003118 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	429a      	cmp	r2, r3
 8003166:	d8f7      	bhi.n	8003158 <HAL_Delay+0x28>
  {
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000184 	.word	0x20000184

08003178 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0ed      	b.n	8003366 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff f9f4 	bl	8002584 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ac:	f7ff ffb4 	bl	8003118 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031b2:	e012      	b.n	80031da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031b4:	f7ff ffb0 	bl	8003118 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b0a      	cmp	r3, #10
 80031c0:	d90b      	bls.n	80031da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2205      	movs	r2, #5
 80031d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0c5      	b.n	8003366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0e5      	beq.n	80031b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0202 	bic.w	r2, r2, #2
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f8:	f7ff ff8e 	bl	8003118 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031fe:	e012      	b.n	8003226 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003200:	f7ff ff8a 	bl	8003118 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b0a      	cmp	r3, #10
 800320c:	d90b      	bls.n	8003226 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2205      	movs	r2, #5
 800321e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e09f      	b.n	8003366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e5      	bne.n	8003200 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7e1b      	ldrb	r3, [r3, #24]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d108      	bne.n	800324e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e007      	b.n	800325e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7e5b      	ldrb	r3, [r3, #25]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e007      	b.n	8003288 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7e9b      	ldrb	r3, [r3, #26]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d108      	bne.n	80032a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0220 	orr.w	r2, r2, #32
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e007      	b.n	80032b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0220 	bic.w	r2, r2, #32
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7edb      	ldrb	r3, [r3, #27]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d108      	bne.n	80032cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0210 	bic.w	r2, r2, #16
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e007      	b.n	80032dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0210 	orr.w	r2, r2, #16
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7f1b      	ldrb	r3, [r3, #28]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d108      	bne.n	80032f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e007      	b.n	8003306 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0208 	bic.w	r2, r2, #8
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	7f5b      	ldrb	r3, [r3, #29]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d108      	bne.n	8003320 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0204 	orr.w	r2, r2, #4
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e007      	b.n	8003330 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0204 	bic.w	r2, r2, #4
 800332e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	ea42 0103 	orr.w	r1, r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800336e:	b480      	push	{r7}
 8003370:	b087      	sub	sp, #28
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003384:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d003      	beq.n	8003394 <HAL_CAN_ConfigFilter+0x26>
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	2b02      	cmp	r3, #2
 8003390:	f040 80aa 	bne.w	80034e8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2201      	movs	r2, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	43db      	mvns	r3, r3
 80033be:	401a      	ands	r2, r3
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d123      	bne.n	8003416 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	401a      	ands	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3248      	adds	r2, #72	; 0x48
 80033f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800340a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	3348      	adds	r3, #72	; 0x48
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d122      	bne.n	8003464 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	431a      	orrs	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800343e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3248      	adds	r2, #72	; 0x48
 8003444:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003458:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800345a:	6979      	ldr	r1, [r7, #20]
 800345c:	3348      	adds	r3, #72	; 0x48
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43db      	mvns	r3, r3
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800347e:	e007      	b.n	8003490 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	431a      	orrs	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	401a      	ands	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80034aa:	e007      	b.n	80034bc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034da:	f023 0201 	bic.w	r2, r3, #1
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e006      	b.n	80034f6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d12e      	bne.n	8003574 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800352e:	f7ff fdf3 	bl	8003118 <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003534:	e012      	b.n	800355c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003536:	f7ff fdef 	bl	8003118 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b0a      	cmp	r3, #10
 8003542:	d90b      	bls.n	800355c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2205      	movs	r2, #5
 8003554:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e012      	b.n	8003582 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e5      	bne.n	8003536 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e006      	b.n	8003582 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800358a:	b480      	push	{r7}
 800358c:	b089      	sub	sp, #36	; 0x24
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800359e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d003      	beq.n	80035b6 <HAL_CAN_AddTxMessage+0x2c>
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	f040 80ad 	bne.w	8003710 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8095 	beq.w	8003700 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	0e1b      	lsrs	r3, r3, #24
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035e0:	2201      	movs	r2, #1
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	409a      	lsls	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	6809      	ldr	r1, [r1, #0]
 8003600:	431a      	orrs	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	3318      	adds	r3, #24
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	440b      	add	r3, r1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e00f      	b.n	800362e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003618:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800361e:	68f9      	ldr	r1, [r7, #12]
 8003620:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003622:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3318      	adds	r3, #24
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	440b      	add	r3, r1
 800362c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3318      	adds	r3, #24
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	440b      	add	r3, r1
 800363e:	3304      	adds	r3, #4
 8003640:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	7d1b      	ldrb	r3, [r3, #20]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d111      	bne.n	800366e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	3318      	adds	r3, #24
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	4413      	add	r3, r2
 8003656:	3304      	adds	r3, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	6811      	ldr	r1, [r2, #0]
 800365e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3318      	adds	r3, #24
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	440b      	add	r3, r1
 800366a:	3304      	adds	r3, #4
 800366c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3307      	adds	r3, #7
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	061a      	lsls	r2, r3, #24
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3306      	adds	r3, #6
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	041b      	lsls	r3, r3, #16
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3305      	adds	r3, #5
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	4313      	orrs	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	3204      	adds	r2, #4
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	4610      	mov	r0, r2
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	ea43 0200 	orr.w	r2, r3, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	440b      	add	r3, r1
 80036a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80036a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3303      	adds	r3, #3
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	061a      	lsls	r2, r3, #24
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3302      	adds	r3, #2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3301      	adds	r3, #1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	4313      	orrs	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	4610      	mov	r0, r2
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	6811      	ldr	r1, [r2, #0]
 80036cc:	ea43 0200 	orr.w	r2, r3, r0
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	440b      	add	r3, r1
 80036d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80036da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3318      	adds	r3, #24
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	6811      	ldr	r1, [r2, #0]
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3318      	adds	r3, #24
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	440b      	add	r3, r1
 80036fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e00e      	b.n	800371e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e006      	b.n	800371e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800372a:	b480      	push	{r7}
 800372c:	b087      	sub	sp, #28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800373e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d003      	beq.n	800374e <HAL_CAN_GetRxMessage+0x24>
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b02      	cmp	r3, #2
 800374a:	f040 80f3 	bne.w	8003934 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10e      	bne.n	8003772 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d116      	bne.n	8003790 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0e7      	b.n	8003942 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d107      	bne.n	8003790 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0d8      	b.n	8003942 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	331b      	adds	r3, #27
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	4413      	add	r3, r2
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0204 	and.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10c      	bne.n	80037c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	331b      	adds	r3, #27
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	4413      	add	r3, r2
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0d5b      	lsrs	r3, r3, #21
 80037be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e00b      	b.n	80037e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	331b      	adds	r3, #27
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	4413      	add	r3, r2
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	331b      	adds	r3, #27
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	4413      	add	r3, r2
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0202 	and.w	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	331b      	adds	r3, #27
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	3304      	adds	r3, #4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 020f 	and.w	r2, r3, #15
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	331b      	adds	r3, #27
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	4413      	add	r3, r2
 800381a:	3304      	adds	r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	b2da      	uxtb	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	331b      	adds	r3, #27
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	4413      	add	r3, r2
 8003832:	3304      	adds	r3, #4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0c1b      	lsrs	r3, r3, #16
 8003838:	b29a      	uxth	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	4413      	add	r3, r2
 8003848:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	4413      	add	r3, r2
 800385e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0a1a      	lsrs	r2, r3, #8
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4413      	add	r3, r2
 8003878:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0c1a      	lsrs	r2, r3, #16
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	3302      	adds	r3, #2
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0e1a      	lsrs	r2, r3, #24
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	3303      	adds	r3, #3
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	3304      	adds	r3, #4
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	0a1a      	lsrs	r2, r3, #8
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	3305      	adds	r3, #5
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	4413      	add	r3, r2
 80038de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	0c1a      	lsrs	r2, r3, #16
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	3306      	adds	r3, #6
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	0e1a      	lsrs	r2, r3, #24
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	3307      	adds	r3, #7
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0220 	orr.w	r2, r2, #32
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	e007      	b.n	8003930 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0220 	orr.w	r2, r2, #32
 800392e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e006      	b.n	8003942 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d002      	beq.n	800396c <HAL_CAN_ActivateNotification+0x1e>
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d109      	bne.n	8003980 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6959      	ldr	r1, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e006      	b.n	800398e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b08a      	sub	sp, #40	; 0x28
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d07c      	beq.n	8003ada <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d023      	beq.n	8003a32 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f983 	bl	8003d08 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a02:	e016      	b.n	8003a32 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	e00c      	b.n	8003a32 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2a:	e002      	b.n	8003a32 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f989 	bl	8003d44 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d024      	beq.n	8003a86 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f963 	bl	8003d1c <HAL_CAN_TxMailbox1CompleteCallback>
 8003a56:	e016      	b.n	8003a86 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6a:	e00c      	b.n	8003a86 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7e:	e002      	b.n	8003a86 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f969 	bl	8003d58 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d024      	beq.n	8003ada <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f943 	bl	8003d30 <HAL_CAN_TxMailbox2CompleteCallback>
 8003aaa:	e016      	b.n	8003ada <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	e00c      	b.n	8003ada <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	e002      	b.n	8003ada <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f949 	bl	8003d6c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00c      	beq.n	8003afe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2210      	movs	r2, #16
 8003afc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2208      	movs	r2, #8
 8003b18:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f930 	bl	8003d80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fd fa71 	bl	8001020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2210      	movs	r2, #16
 8003b60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f912 	bl	8003da8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f8f9 	bl	8003d94 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2210      	movs	r2, #16
 8003bbc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8fc 	bl	8003dbc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00b      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d006      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f8f5 	bl	8003dd0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d07b      	beq.n	8003ce8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d072      	beq.n	8003ce0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d043      	beq.n	8003ce0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d03e      	beq.n	8003ce0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c68:	2b60      	cmp	r3, #96	; 0x60
 8003c6a:	d02b      	beq.n	8003cc4 <HAL_CAN_IRQHandler+0x32a>
 8003c6c:	2b60      	cmp	r3, #96	; 0x60
 8003c6e:	d82e      	bhi.n	8003cce <HAL_CAN_IRQHandler+0x334>
 8003c70:	2b50      	cmp	r3, #80	; 0x50
 8003c72:	d022      	beq.n	8003cba <HAL_CAN_IRQHandler+0x320>
 8003c74:	2b50      	cmp	r3, #80	; 0x50
 8003c76:	d82a      	bhi.n	8003cce <HAL_CAN_IRQHandler+0x334>
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d019      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x316>
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d826      	bhi.n	8003cce <HAL_CAN_IRQHandler+0x334>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d010      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0x30c>
 8003c84:	2b30      	cmp	r3, #48	; 0x30
 8003c86:	d822      	bhi.n	8003cce <HAL_CAN_IRQHandler+0x334>
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d002      	beq.n	8003c92 <HAL_CAN_IRQHandler+0x2f8>
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d005      	beq.n	8003c9c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c90:	e01d      	b.n	8003cce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	f043 0308 	orr.w	r3, r3, #8
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c9a:	e019      	b.n	8003cd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f043 0310 	orr.w	r3, r3, #16
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ca4:	e014      	b.n	8003cd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	f043 0320 	orr.w	r3, r3, #32
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cae:	e00f      	b.n	8003cd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cb8:	e00a      	b.n	8003cd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cc2:	e005      	b.n	8003cd0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ccc:	e000      	b.n	8003cd0 <HAL_CAN_IRQHandler+0x336>
            break;
 8003cce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cde:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd f9dc 	bl	80010b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d00:	bf00      	nop
 8003d02:	3728      	adds	r7, #40	; 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e00:	4013      	ands	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	60d3      	str	r3, [r2, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <__NVIC_GetPriorityGrouping+0x18>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	f003 0307 	and.w	r3, r3, #7
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	db0b      	blt.n	8003e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	4907      	ldr	r1, [pc, #28]	; (8003e80 <__NVIC_EnableIRQ+0x38>)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2001      	movs	r0, #1
 8003e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000e100 	.word	0xe000e100

08003e84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	db12      	blt.n	8003ebc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	f003 021f 	and.w	r2, r3, #31
 8003e9c:	490a      	ldr	r1, [pc, #40]	; (8003ec8 <__NVIC_DisableIRQ+0x44>)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eaa:	3320      	adds	r3, #32
 8003eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003eb0:	f3bf 8f4f 	dsb	sy
}
 8003eb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003eb6:	f3bf 8f6f 	isb	sy
}
 8003eba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	db0a      	blt.n	8003ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	490c      	ldr	r1, [pc, #48]	; (8003f18 <__NVIC_SetPriority+0x4c>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef4:	e00a      	b.n	8003f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4908      	ldr	r1, [pc, #32]	; (8003f1c <__NVIC_SetPriority+0x50>)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3b04      	subs	r3, #4
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	440b      	add	r3, r1
 8003f0a:	761a      	strb	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf28      	it	cs
 8003f3e:	2304      	movcs	r3, #4
 8003f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d902      	bls.n	8003f50 <NVIC_EncodePriority+0x30>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3b03      	subs	r3, #3
 8003f4e:	e000      	b.n	8003f52 <NVIC_EncodePriority+0x32>
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	401a      	ands	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f68:	f04f 31ff 	mov.w	r1, #4294967295
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	43d9      	mvns	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	4313      	orrs	r3, r2
         );
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f98:	d301      	bcc.n	8003f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e00f      	b.n	8003fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <SysTick_Config+0x40>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fa6:	210f      	movs	r1, #15
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	f7ff ff8e 	bl	8003ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <SysTick_Config+0x40>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <SysTick_Config+0x40>)
 8003fb8:	2207      	movs	r2, #7
 8003fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	e000e010 	.word	0xe000e010

08003fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff05 	bl	8003de4 <__NVIC_SetPriorityGrouping>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff4:	f7ff ff1a 	bl	8003e2c <__NVIC_GetPriorityGrouping>
 8003ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f7ff ff8e 	bl	8003f20 <NVIC_EncodePriority>
 8004004:	4602      	mov	r2, r0
 8004006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff5d 	bl	8003ecc <__NVIC_SetPriority>
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff0d 	bl	8003e48 <__NVIC_EnableIRQ>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff1d 	bl	8003e84 <__NVIC_DisableIRQ>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff94 	bl	8003f88 <SysTick_Config>
 8004060:	4603      	mov	r3, r0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e098      	b.n	80041b0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4b4d      	ldr	r3, [pc, #308]	; (80041bc <HAL_DMA_Init+0x150>)
 8004086:	429a      	cmp	r2, r3
 8004088:	d80f      	bhi.n	80040aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	4b4b      	ldr	r3, [pc, #300]	; (80041c0 <HAL_DMA_Init+0x154>)
 8004092:	4413      	add	r3, r2
 8004094:	4a4b      	ldr	r2, [pc, #300]	; (80041c4 <HAL_DMA_Init+0x158>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	009a      	lsls	r2, r3, #2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a48      	ldr	r2, [pc, #288]	; (80041c8 <HAL_DMA_Init+0x15c>)
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
 80040a8:	e00e      	b.n	80040c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b46      	ldr	r3, [pc, #280]	; (80041cc <HAL_DMA_Init+0x160>)
 80040b2:	4413      	add	r3, r2
 80040b4:	4a43      	ldr	r2, [pc, #268]	; (80041c4 <HAL_DMA_Init+0x158>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	009a      	lsls	r2, r3, #2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a42      	ldr	r2, [pc, #264]	; (80041d0 <HAL_DMA_Init+0x164>)
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004104:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004122:	d039      	beq.n	8004198 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <HAL_DMA_Init+0x15c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d11a      	bne.n	8004164 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800412e:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <HAL_DMA_Init+0x168>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f003 031c 	and.w	r3, r3, #28
 800413a:	210f      	movs	r1, #15
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	4924      	ldr	r1, [pc, #144]	; (80041d4 <HAL_DMA_Init+0x168>)
 8004144:	4013      	ands	r3, r2
 8004146:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_DMA_Init+0x168>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	f003 031c 	and.w	r3, r3, #28
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	491d      	ldr	r1, [pc, #116]	; (80041d4 <HAL_DMA_Init+0x168>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
 8004162:	e019      	b.n	8004198 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004164:	4b1c      	ldr	r3, [pc, #112]	; (80041d8 <HAL_DMA_Init+0x16c>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	f003 031c 	and.w	r3, r3, #28
 8004170:	210f      	movs	r1, #15
 8004172:	fa01 f303 	lsl.w	r3, r1, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	4917      	ldr	r1, [pc, #92]	; (80041d8 <HAL_DMA_Init+0x16c>)
 800417a:	4013      	ands	r3, r2
 800417c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800417e:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <HAL_DMA_Init+0x16c>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f003 031c 	and.w	r3, r3, #28
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	4911      	ldr	r1, [pc, #68]	; (80041d8 <HAL_DMA_Init+0x16c>)
 8004194:	4313      	orrs	r3, r2
 8004196:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40020407 	.word	0x40020407
 80041c0:	bffdfff8 	.word	0xbffdfff8
 80041c4:	cccccccd 	.word	0xcccccccd
 80041c8:	40020000 	.word	0x40020000
 80041cc:	bffdfbf8 	.word	0xbffdfbf8
 80041d0:	40020400 	.word	0x40020400
 80041d4:	400200a8 	.word	0x400200a8
 80041d8:	400204a8 	.word	0x400204a8

080041dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e072      	b.n	80042d4 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <HAL_DMA_DeInit+0x104>)
 8004206:	429a      	cmp	r2, r3
 8004208:	d80f      	bhi.n	800422a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <HAL_DMA_DeInit+0x108>)
 8004212:	4413      	add	r3, r2
 8004214:	4a34      	ldr	r2, [pc, #208]	; (80042e8 <HAL_DMA_DeInit+0x10c>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	009a      	lsls	r2, r3, #2
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a31      	ldr	r2, [pc, #196]	; (80042ec <HAL_DMA_DeInit+0x110>)
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
 8004228:	e00e      	b.n	8004248 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <HAL_DMA_DeInit+0x114>)
 8004232:	4413      	add	r3, r2
 8004234:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <HAL_DMA_DeInit+0x10c>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	009a      	lsls	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <HAL_DMA_DeInit+0x118>)
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	f003 021c 	and.w	r2, r3, #28
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	2101      	movs	r1, #1
 800425e:	fa01 f202 	lsl.w	r2, r1, r2
 8004262:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	4a20      	ldr	r2, [pc, #128]	; (80042ec <HAL_DMA_DeInit+0x110>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10d      	bne.n	800428a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800426e:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <HAL_DMA_DeInit+0x11c>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f003 031c 	and.w	r3, r3, #28
 800427a:	210f      	movs	r1, #15
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	491d      	ldr	r1, [pc, #116]	; (80042f8 <HAL_DMA_DeInit+0x11c>)
 8004284:	4013      	ands	r3, r2
 8004286:	600b      	str	r3, [r1, #0]
 8004288:	e00c      	b.n	80042a4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800428a:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <HAL_DMA_DeInit+0x120>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f003 031c 	and.w	r3, r3, #28
 8004296:	210f      	movs	r1, #15
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	4917      	ldr	r1, [pc, #92]	; (80042fc <HAL_DMA_DeInit+0x120>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40020407 	.word	0x40020407
 80042e4:	bffdfff8 	.word	0xbffdfff8
 80042e8:	cccccccd 	.word	0xcccccccd
 80042ec:	40020000 	.word	0x40020000
 80042f0:	bffdfbf8 	.word	0xbffdfbf8
 80042f4:	40020400 	.word	0x40020400
 80042f8:	400200a8 	.word	0x400200a8
 80042fc:	400204a8 	.word	0x400204a8

08004300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_DMA_Start_IT+0x20>
 800431c:	2302      	movs	r3, #2
 800431e:	e04b      	b.n	80043b8 <HAL_DMA_Start_IT+0xb8>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d13a      	bne.n	80043aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f95f 	bl	800461c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 020e 	orr.w	r2, r2, #14
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e00f      	b.n	8004398 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0204 	bic.w	r2, r2, #4
 8004386:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 020a 	orr.w	r2, r2, #10
 8004396:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	e005      	b.n	80043b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
 80043b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d008      	beq.n	80043ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2204      	movs	r2, #4
 80043dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e022      	b.n	8004430 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 020e 	bic.w	r2, r2, #14
 80043f8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f003 021c 	and.w	r2, r3, #28
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d005      	beq.n	8004460 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2204      	movs	r2, #4
 8004458:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	e029      	b.n	80044b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 020e 	bic.w	r2, r2, #14
 800446e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	f003 021c 	and.w	r2, r3, #28
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	2101      	movs	r1, #1
 800448e:	fa01 f202 	lsl.w	r2, r1, r2
 8004492:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
    }
  }
  return status;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	f003 031c 	and.w	r3, r3, #28
 80044de:	2204      	movs	r2, #4
 80044e0:	409a      	lsls	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d026      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7a>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d021      	beq.n	8004538 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0204 	bic.w	r2, r2, #4
 8004510:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f003 021c 	and.w	r2, r3, #28
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2104      	movs	r1, #4
 8004520:	fa01 f202 	lsl.w	r2, r1, r2
 8004524:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	2b00      	cmp	r3, #0
 800452c:	d071      	beq.n	8004612 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004536:	e06c      	b.n	8004612 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	f003 031c 	and.w	r3, r3, #28
 8004540:	2202      	movs	r2, #2
 8004542:	409a      	lsls	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02e      	beq.n	80045aa <HAL_DMA_IRQHandler+0xec>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d029      	beq.n	80045aa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 020a 	bic.w	r2, r2, #10
 8004572:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004580:	f003 021c 	and.w	r2, r3, #28
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	2102      	movs	r1, #2
 800458a:	fa01 f202 	lsl.w	r2, r1, r2
 800458e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d038      	beq.n	8004612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045a8:	e033      	b.n	8004612 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f003 031c 	and.w	r3, r3, #28
 80045b2:	2208      	movs	r2, #8
 80045b4:	409a      	lsls	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d02a      	beq.n	8004614 <HAL_DMA_IRQHandler+0x156>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d025      	beq.n	8004614 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 020e 	bic.w	r2, r2, #14
 80045d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	f003 021c 	and.w	r2, r3, #28
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2101      	movs	r1, #1
 80045e6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	2b00      	cmp	r3, #0
 8004608:	d004      	beq.n	8004614 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004612:	bf00      	nop
 8004614:	bf00      	nop
}
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f003 021c 	and.w	r2, r3, #28
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2101      	movs	r1, #1
 8004638:	fa01 f202 	lsl.w	r2, r1, r2
 800463c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b10      	cmp	r3, #16
 800464c:	d108      	bne.n	8004660 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800465e:	e007      	b.n	8004670 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800468a:	e154      	b.n	8004936 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8146 	beq.w	8004930 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d005      	beq.n	80046bc <HAL_GPIO_Init+0x40>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d130      	bne.n	800471e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	2203      	movs	r2, #3
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046f2:	2201      	movs	r2, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0201 	and.w	r2, r3, #1
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b03      	cmp	r3, #3
 8004728:	d017      	beq.n	800475a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d123      	bne.n	80047ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	08da      	lsrs	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3208      	adds	r2, #8
 800476e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	220f      	movs	r2, #15
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	08da      	lsrs	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3208      	adds	r2, #8
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2203      	movs	r2, #3
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0203 	and.w	r2, r3, #3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80a0 	beq.w	8004930 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047f0:	4b58      	ldr	r3, [pc, #352]	; (8004954 <HAL_GPIO_Init+0x2d8>)
 80047f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f4:	4a57      	ldr	r2, [pc, #348]	; (8004954 <HAL_GPIO_Init+0x2d8>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6613      	str	r3, [r2, #96]	; 0x60
 80047fc:	4b55      	ldr	r3, [pc, #340]	; (8004954 <HAL_GPIO_Init+0x2d8>)
 80047fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004808:	4a53      	ldr	r2, [pc, #332]	; (8004958 <HAL_GPIO_Init+0x2dc>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	3302      	adds	r3, #2
 8004810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	220f      	movs	r2, #15
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004832:	d019      	beq.n	8004868 <HAL_GPIO_Init+0x1ec>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a49      	ldr	r2, [pc, #292]	; (800495c <HAL_GPIO_Init+0x2e0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <HAL_GPIO_Init+0x1e8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a48      	ldr	r2, [pc, #288]	; (8004960 <HAL_GPIO_Init+0x2e4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00d      	beq.n	8004860 <HAL_GPIO_Init+0x1e4>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a47      	ldr	r2, [pc, #284]	; (8004964 <HAL_GPIO_Init+0x2e8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d007      	beq.n	800485c <HAL_GPIO_Init+0x1e0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a46      	ldr	r2, [pc, #280]	; (8004968 <HAL_GPIO_Init+0x2ec>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_GPIO_Init+0x1dc>
 8004854:	2304      	movs	r3, #4
 8004856:	e008      	b.n	800486a <HAL_GPIO_Init+0x1ee>
 8004858:	2307      	movs	r3, #7
 800485a:	e006      	b.n	800486a <HAL_GPIO_Init+0x1ee>
 800485c:	2303      	movs	r3, #3
 800485e:	e004      	b.n	800486a <HAL_GPIO_Init+0x1ee>
 8004860:	2302      	movs	r3, #2
 8004862:	e002      	b.n	800486a <HAL_GPIO_Init+0x1ee>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_GPIO_Init+0x1ee>
 8004868:	2300      	movs	r3, #0
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	f002 0203 	and.w	r2, r2, #3
 8004870:	0092      	lsls	r2, r2, #2
 8004872:	4093      	lsls	r3, r2
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800487a:	4937      	ldr	r1, [pc, #220]	; (8004958 <HAL_GPIO_Init+0x2dc>)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	3302      	adds	r3, #2
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004888:	4b38      	ldr	r3, [pc, #224]	; (800496c <HAL_GPIO_Init+0x2f0>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	43db      	mvns	r3, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048ac:	4a2f      	ldr	r2, [pc, #188]	; (800496c <HAL_GPIO_Init+0x2f0>)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048b2:	4b2e      	ldr	r3, [pc, #184]	; (800496c <HAL_GPIO_Init+0x2f0>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048d6:	4a25      	ldr	r2, [pc, #148]	; (800496c <HAL_GPIO_Init+0x2f0>)
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048dc:	4b23      	ldr	r3, [pc, #140]	; (800496c <HAL_GPIO_Init+0x2f0>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004900:	4a1a      	ldr	r2, [pc, #104]	; (800496c <HAL_GPIO_Init+0x2f0>)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004906:	4b19      	ldr	r3, [pc, #100]	; (800496c <HAL_GPIO_Init+0x2f0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	43db      	mvns	r3, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800492a:	4a10      	ldr	r2, [pc, #64]	; (800496c <HAL_GPIO_Init+0x2f0>)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	3301      	adds	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f aea3 	bne.w	800468c <HAL_GPIO_Init+0x10>
  }
}
 8004946:	bf00      	nop
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40021000 	.word	0x40021000
 8004958:	40010000 	.word	0x40010000
 800495c:	48000400 	.word	0x48000400
 8004960:	48000800 	.word	0x48000800
 8004964:	48000c00 	.word	0x48000c00
 8004968:	48001000 	.word	0x48001000
 800496c:	40010400 	.word	0x40010400

08004970 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800497e:	e0b7      	b.n	8004af0 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004980:	2201      	movs	r2, #1
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80aa 	beq.w	8004aea <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004996:	4a5d      	ldr	r2, [pc, #372]	; (8004b0c <HAL_GPIO_DeInit+0x19c>)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	3302      	adds	r3, #2
 800499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4013      	ands	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049be:	d019      	beq.n	80049f4 <HAL_GPIO_DeInit+0x84>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a53      	ldr	r2, [pc, #332]	; (8004b10 <HAL_GPIO_DeInit+0x1a0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_GPIO_DeInit+0x80>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a52      	ldr	r2, [pc, #328]	; (8004b14 <HAL_GPIO_DeInit+0x1a4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00d      	beq.n	80049ec <HAL_GPIO_DeInit+0x7c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a51      	ldr	r2, [pc, #324]	; (8004b18 <HAL_GPIO_DeInit+0x1a8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <HAL_GPIO_DeInit+0x78>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a50      	ldr	r2, [pc, #320]	; (8004b1c <HAL_GPIO_DeInit+0x1ac>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <HAL_GPIO_DeInit+0x74>
 80049e0:	2304      	movs	r3, #4
 80049e2:	e008      	b.n	80049f6 <HAL_GPIO_DeInit+0x86>
 80049e4:	2307      	movs	r3, #7
 80049e6:	e006      	b.n	80049f6 <HAL_GPIO_DeInit+0x86>
 80049e8:	2303      	movs	r3, #3
 80049ea:	e004      	b.n	80049f6 <HAL_GPIO_DeInit+0x86>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e002      	b.n	80049f6 <HAL_GPIO_DeInit+0x86>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_GPIO_DeInit+0x86>
 80049f4:	2300      	movs	r3, #0
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	f002 0203 	and.w	r2, r2, #3
 80049fc:	0092      	lsls	r2, r2, #2
 80049fe:	4093      	lsls	r3, r2
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d132      	bne.n	8004a6c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a06:	4b46      	ldr	r3, [pc, #280]	; (8004b20 <HAL_GPIO_DeInit+0x1b0>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	4944      	ldr	r1, [pc, #272]	; (8004b20 <HAL_GPIO_DeInit+0x1b0>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004a14:	4b42      	ldr	r3, [pc, #264]	; (8004b20 <HAL_GPIO_DeInit+0x1b0>)
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	4940      	ldr	r1, [pc, #256]	; (8004b20 <HAL_GPIO_DeInit+0x1b0>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004a22:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <HAL_GPIO_DeInit+0x1b0>)
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	493d      	ldr	r1, [pc, #244]	; (8004b20 <HAL_GPIO_DeInit+0x1b0>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004a30:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <HAL_GPIO_DeInit+0x1b0>)
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	4939      	ldr	r1, [pc, #228]	; (8004b20 <HAL_GPIO_DeInit+0x1b0>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	220f      	movs	r2, #15
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004a4e:	4a2f      	ldr	r2, [pc, #188]	; (8004b0c <HAL_GPIO_DeInit+0x19c>)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	3302      	adds	r3, #2
 8004a56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	482b      	ldr	r0, [pc, #172]	; (8004b0c <HAL_GPIO_DeInit+0x19c>)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	400a      	ands	r2, r1
 8004a66:	3302      	adds	r3, #2
 8004a68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	2103      	movs	r1, #3
 8004a76:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	08da      	lsrs	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3208      	adds	r2, #8
 8004a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	220f      	movs	r2, #15
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	08d2      	lsrs	r2, r2, #3
 8004aa0:	4019      	ands	r1, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3208      	adds	r2, #8
 8004aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	2103      	movs	r1, #3
 8004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	401a      	ands	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	401a      	ands	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	2103      	movs	r1, #3
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	3301      	adds	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f47f af41 	bne.w	8004980 <HAL_GPIO_DeInit+0x10>
  }
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	48000400 	.word	0x48000400
 8004b14:	48000800 	.word	0x48000800
 8004b18:	48000c00 	.word	0x48000c00
 8004b1c:	48001000 	.word	0x48001000
 8004b20:	40010400 	.word	0x40010400

08004b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	887b      	ldrh	r3, [r7, #2]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
 8004b40:	e001      	b.n	8004b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
 8004b60:	4613      	mov	r3, r2
 8004b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b64:	787b      	ldrb	r3, [r7, #1]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b6a:	887a      	ldrh	r2, [r7, #2]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b70:	e002      	b.n	8004b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b9a:	4a05      	ldr	r2, [pc, #20]	; (8004bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fd fa66 	bl	8002074 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ba8:	bf00      	nop
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40010400 	.word	0x40010400

08004bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e081      	b.n	8004cca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fd fd26 	bl	800262c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	; 0x24
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	e006      	b.n	8004c3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d104      	bne.n	8004c4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	69d9      	ldr	r1, [r3, #28]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1a      	ldr	r2, [r3, #32]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	4608      	mov	r0, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	817b      	strh	r3, [r7, #10]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	813b      	strh	r3, [r7, #8]
 8004cea:	4613      	mov	r3, r2
 8004cec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	f040 80f9 	bne.w	8004eee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_I2C_Mem_Write+0x34>
 8004d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0ed      	b.n	8004ef0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2C_Mem_Write+0x4e>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e0e6      	b.n	8004ef0 <HAL_I2C_Mem_Write+0x21c>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fe f9f5 	bl	8003118 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2319      	movs	r3, #25
 8004d36:	2201      	movs	r2, #1
 8004d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f955 	bl	8004fec <I2C_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0d1      	b.n	8004ef0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2221      	movs	r2, #33	; 0x21
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a3a      	ldr	r2, [r7, #32]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d74:	88f8      	ldrh	r0, [r7, #6]
 8004d76:	893a      	ldrh	r2, [r7, #8]
 8004d78:	8979      	ldrh	r1, [r7, #10]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	4603      	mov	r3, r0
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f8b9 	bl	8004efc <I2C_RequestMemoryWrite>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0a9      	b.n	8004ef0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2bff      	cmp	r3, #255	; 0xff
 8004da4:	d90e      	bls.n	8004dc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	22ff      	movs	r2, #255	; 0xff
 8004daa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	8979      	ldrh	r1, [r7, #10]
 8004db4:	2300      	movs	r3, #0
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fabd 	bl	800533c <I2C_TransferConfig>
 8004dc2:	e00f      	b.n	8004de4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	8979      	ldrh	r1, [r7, #10]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 faac 	bl	800533c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f93f 	bl	800506c <I2C_WaitOnTXISFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e07b      	b.n	8004ef0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d034      	beq.n	8004e9c <HAL_I2C_Mem_Write+0x1c8>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d130      	bne.n	8004e9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	2200      	movs	r2, #0
 8004e42:	2180      	movs	r1, #128	; 0x80
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f8d1 	bl	8004fec <I2C_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e04d      	b.n	8004ef0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2bff      	cmp	r3, #255	; 0xff
 8004e5c:	d90e      	bls.n	8004e7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	22ff      	movs	r2, #255	; 0xff
 8004e62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	8979      	ldrh	r1, [r7, #10]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 fa61 	bl	800533c <I2C_TransferConfig>
 8004e7a:	e00f      	b.n	8004e9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	8979      	ldrh	r1, [r7, #10]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 fa50 	bl	800533c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d19e      	bne.n	8004de4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f91e 	bl	80050ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e01a      	b.n	8004ef0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_I2C_Mem_Write+0x224>)
 8004ece:	400b      	ands	r3, r1
 8004ed0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
  }
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	fe00e800 	.word	0xfe00e800

08004efc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	817b      	strh	r3, [r7, #10]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	813b      	strh	r3, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	8979      	ldrh	r1, [r7, #10]
 8004f1c:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <I2C_RequestMemoryWrite+0xa4>)
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fa09 	bl	800533c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	69b9      	ldr	r1, [r7, #24]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f89c 	bl	800506c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e02c      	b.n	8004f98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f44:	893b      	ldrh	r3, [r7, #8]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f4e:	e015      	b.n	8004f7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	0a1b      	lsrs	r3, r3, #8
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	69b9      	ldr	r1, [r7, #24]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f882 	bl	800506c <I2C_WaitOnTXISFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e012      	b.n	8004f98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f72:	893b      	ldrh	r3, [r7, #8]
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2200      	movs	r2, #0
 8004f84:	2180      	movs	r1, #128	; 0x80
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f830 	bl	8004fec <I2C_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	80002000 	.word	0x80002000

08004fa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d103      	bne.n	8004fc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d007      	beq.n	8004fe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	619a      	str	r2, [r3, #24]
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ffc:	e022      	b.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d01e      	beq.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7fe f887 	bl	8003118 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d302      	bcc.n	800501c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d113      	bne.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e00f      	b.n	8005064 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	429a      	cmp	r2, r3
 8005060:	d0cd      	beq.n	8004ffe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005078:	e02c      	b.n	80050d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f870 	bl	8005164 <I2C_IsErrorOccurred>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e02a      	b.n	80050e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d01e      	beq.n	80050d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005096:	f7fe f83f 	bl	8003118 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d302      	bcc.n	80050ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d113      	bne.n	80050d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e007      	b.n	80050e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d1cb      	bne.n	800507a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050f8:	e028      	b.n	800514c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f830 	bl	8005164 <I2C_IsErrorOccurred>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e026      	b.n	800515c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510e:	f7fe f803 	bl	8003118 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d113      	bne.n	800514c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	f043 0220 	orr.w	r2, r3, #32
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e007      	b.n	800515c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b20      	cmp	r3, #32
 8005158:	d1cf      	bne.n	80050fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b00      	cmp	r3, #0
 800518e:	d075      	beq.n	800527c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2210      	movs	r2, #16
 8005196:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005198:	e056      	b.n	8005248 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d052      	beq.n	8005248 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fd ffb9 	bl	8003118 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <I2C_IsErrorOccurred+0x54>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d147      	bne.n	8005248 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051da:	d12e      	bne.n	800523a <I2C_IsErrorOccurred+0xd6>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051e2:	d02a      	beq.n	800523a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d027      	beq.n	800523a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051fa:	f7fd ff8d 	bl	8003118 <HAL_GetTick>
 80051fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005200:	e01b      	b.n	800523a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005202:	f7fd ff89 	bl	8003118 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b19      	cmp	r3, #25
 800520e:	d914      	bls.n	800523a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	f043 0220 	orr.w	r2, r3, #32
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b20      	cmp	r3, #32
 8005246:	d1dc      	bne.n	8005202 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b20      	cmp	r3, #32
 8005254:	d003      	beq.n	800525e <I2C_IsErrorOccurred+0xfa>
 8005256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800525a:	2b00      	cmp	r3, #0
 800525c:	d09d      	beq.n	800519a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800525e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2220      	movs	r2, #32
 800526c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800529e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	f043 0308 	orr.w	r3, r3, #8
 80052b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	f043 0302 	orr.w	r3, r3, #2
 80052d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80052ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01c      	beq.n	800532c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff fe56 	bl	8004fa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <I2C_IsErrorOccurred+0x1d4>)
 8005304:	400b      	ands	r3, r1
 8005306:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	431a      	orrs	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800532c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005330:	4618      	mov	r0, r3
 8005332:	3728      	adds	r7, #40	; 0x28
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	fe00e800 	.word	0xfe00e800

0800533c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	817b      	strh	r3, [r7, #10]
 800534a:	4613      	mov	r3, r2
 800534c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800534e:	897b      	ldrh	r3, [r7, #10]
 8005350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005354:	7a7b      	ldrb	r3, [r7, #9]
 8005356:	041b      	lsls	r3, r3, #16
 8005358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800535c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	4313      	orrs	r3, r2
 8005366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800536a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	0d5b      	lsrs	r3, r3, #21
 8005376:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800537a:	4b08      	ldr	r3, [pc, #32]	; (800539c <I2C_TransferConfig+0x60>)
 800537c:	430b      	orrs	r3, r1
 800537e:	43db      	mvns	r3, r3
 8005380:	ea02 0103 	and.w	r1, r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	03ff63ff 	.word	0x03ff63ff

080053a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d138      	bne.n	8005428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e032      	b.n	800542a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2224      	movs	r2, #36	; 0x24
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6819      	ldr	r1, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	e000      	b.n	800542a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005428:	2302      	movs	r3, #2
  }
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b20      	cmp	r3, #32
 800544a:	d139      	bne.n	80054c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005456:	2302      	movs	r3, #2
 8005458:	e033      	b.n	80054c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2224      	movs	r2, #36	; 0x24
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e000      	b.n	80054c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
  }
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e041      	b.n	8005564 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80054e8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f245 5255 	movw	r2, #21845	; 0x5555
 80054f2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6852      	ldr	r2, [r2, #4]
 80054fc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6892      	ldr	r2, [r2, #8]
 8005506:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005508:	f7fd fe06 	bl	8003118 <HAL_GetTick>
 800550c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800550e:	e00f      	b.n	8005530 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005510:	f7fd fe02 	bl	8003118 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b31      	cmp	r3, #49	; 0x31
 800551c:	d908      	bls.n	8005530 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e019      	b.n	8005564 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e8      	bne.n	8005510 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	429a      	cmp	r2, r3
 800554a:	d005      	beq.n	8005558 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	68d2      	ldr	r2, [r2, #12]
 8005554:	611a      	str	r2, [r3, #16]
 8005556:	e004      	b.n	8005562 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800557c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005598:	4618      	mov	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40007000 	.word	0x40007000

080055a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055b6:	d130      	bne.n	800561a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80055b8:	4b23      	ldr	r3, [pc, #140]	; (8005648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c4:	d038      	beq.n	8005638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055c6:	4b20      	ldr	r3, [pc, #128]	; (8005648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055ce:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055d6:	4b1d      	ldr	r3, [pc, #116]	; (800564c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2232      	movs	r2, #50	; 0x32
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
 80055e0:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	0c9b      	lsrs	r3, r3, #18
 80055e8:	3301      	adds	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055ec:	e002      	b.n	80055f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055f4:	4b14      	ldr	r3, [pc, #80]	; (8005648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005600:	d102      	bne.n	8005608 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f2      	bne.n	80055ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005608:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005614:	d110      	bne.n	8005638 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e00f      	b.n	800563a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800561a:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005626:	d007      	beq.n	8005638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005628:	4b07      	ldr	r3, [pc, #28]	; (8005648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005630:	4a05      	ldr	r2, [pc, #20]	; (8005648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005636:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40007000 	.word	0x40007000
 800564c:	2000016c 	.word	0x2000016c
 8005650:	431bde83 	.word	0x431bde83

08005654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f000 bc02 	b.w	8005e6c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005668:	4b96      	ldr	r3, [pc, #600]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 030c 	and.w	r3, r3, #12
 8005670:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005672:	4b94      	ldr	r3, [pc, #592]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80e4 	beq.w	8005852 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d007      	beq.n	80056a0 <HAL_RCC_OscConfig+0x4c>
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	f040 808b 	bne.w	80057ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b01      	cmp	r3, #1
 800569c:	f040 8087 	bne.w	80057ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056a0:	4b88      	ldr	r3, [pc, #544]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <HAL_RCC_OscConfig+0x64>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e3d9      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	4b81      	ldr	r3, [pc, #516]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_RCC_OscConfig+0x7e>
 80056c8:	4b7e      	ldr	r3, [pc, #504]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056d0:	e005      	b.n	80056de <HAL_RCC_OscConfig+0x8a>
 80056d2:	4b7c      	ldr	r3, [pc, #496]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80056d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056de:	4293      	cmp	r3, r2
 80056e0:	d223      	bcs.n	800572a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fd8a 	bl	8006200 <RCC_SetFlashLatencyFromMSIRange>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e3ba      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056f6:	4b73      	ldr	r3, [pc, #460]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a72      	ldr	r2, [pc, #456]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80056fc:	f043 0308 	orr.w	r3, r3, #8
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	4b70      	ldr	r3, [pc, #448]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	496d      	ldr	r1, [pc, #436]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005710:	4313      	orrs	r3, r2
 8005712:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005714:	4b6b      	ldr	r3, [pc, #428]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	4968      	ldr	r1, [pc, #416]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005724:	4313      	orrs	r3, r2
 8005726:	604b      	str	r3, [r1, #4]
 8005728:	e025      	b.n	8005776 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800572a:	4b66      	ldr	r3, [pc, #408]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a65      	ldr	r2, [pc, #404]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005730:	f043 0308 	orr.w	r3, r3, #8
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	4b63      	ldr	r3, [pc, #396]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	4960      	ldr	r1, [pc, #384]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005748:	4b5e      	ldr	r3, [pc, #376]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	495b      	ldr	r1, [pc, #364]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fd4a 	bl	8006200 <RCC_SetFlashLatencyFromMSIRange>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e37a      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005776:	f000 fc81 	bl	800607c <HAL_RCC_GetSysClockFreq>
 800577a:	4602      	mov	r2, r0
 800577c:	4b51      	ldr	r3, [pc, #324]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	4950      	ldr	r1, [pc, #320]	; (80058c8 <HAL_RCC_OscConfig+0x274>)
 8005788:	5ccb      	ldrb	r3, [r1, r3]
 800578a:	f003 031f 	and.w	r3, r3, #31
 800578e:	fa22 f303 	lsr.w	r3, r2, r3
 8005792:	4a4e      	ldr	r2, [pc, #312]	; (80058cc <HAL_RCC_OscConfig+0x278>)
 8005794:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005796:	4b4e      	ldr	r3, [pc, #312]	; (80058d0 <HAL_RCC_OscConfig+0x27c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fd fc6c 	bl	8003078 <HAL_InitTick>
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d052      	beq.n	8005850 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	e35e      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d032      	beq.n	800581c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057b6:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a42      	ldr	r2, [pc, #264]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057c2:	f7fd fca9 	bl	8003118 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057ca:	f7fd fca5 	bl	8003118 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e347      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057dc:	4b39      	ldr	r3, [pc, #228]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057e8:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a35      	ldr	r2, [pc, #212]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80057ee:	f043 0308 	orr.w	r3, r3, #8
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4b33      	ldr	r3, [pc, #204]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	4930      	ldr	r1, [pc, #192]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005802:	4313      	orrs	r3, r2
 8005804:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005806:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	492b      	ldr	r1, [pc, #172]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005816:	4313      	orrs	r3, r2
 8005818:	604b      	str	r3, [r1, #4]
 800581a:	e01a      	b.n	8005852 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800581c:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005828:	f7fd fc76 	bl	8003118 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005830:	f7fd fc72 	bl	8003118 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e314      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005842:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f0      	bne.n	8005830 <HAL_RCC_OscConfig+0x1dc>
 800584e:	e000      	b.n	8005852 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005850:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d073      	beq.n	8005946 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b08      	cmp	r3, #8
 8005862:	d005      	beq.n	8005870 <HAL_RCC_OscConfig+0x21c>
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b0c      	cmp	r3, #12
 8005868:	d10e      	bne.n	8005888 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d10b      	bne.n	8005888 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005870:	4b14      	ldr	r3, [pc, #80]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d063      	beq.n	8005944 <HAL_RCC_OscConfig+0x2f0>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d15f      	bne.n	8005944 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e2f1      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005890:	d106      	bne.n	80058a0 <HAL_RCC_OscConfig+0x24c>
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a0b      	ldr	r2, [pc, #44]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e025      	b.n	80058ec <HAL_RCC_OscConfig+0x298>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058a8:	d114      	bne.n	80058d4 <HAL_RCC_OscConfig+0x280>
 80058aa:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a05      	ldr	r2, [pc, #20]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80058b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a02      	ldr	r2, [pc, #8]	; (80058c4 <HAL_RCC_OscConfig+0x270>)
 80058bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	e013      	b.n	80058ec <HAL_RCC_OscConfig+0x298>
 80058c4:	40021000 	.word	0x40021000
 80058c8:	0800be6c 	.word	0x0800be6c
 80058cc:	2000016c 	.word	0x2000016c
 80058d0:	20000180 	.word	0x20000180
 80058d4:	4ba0      	ldr	r3, [pc, #640]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a9f      	ldr	r2, [pc, #636]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80058da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4b9d      	ldr	r3, [pc, #628]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a9c      	ldr	r2, [pc, #624]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80058e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fd fc10 	bl	8003118 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058fc:	f7fd fc0c 	bl	8003118 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b64      	cmp	r3, #100	; 0x64
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e2ae      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800590e:	4b92      	ldr	r3, [pc, #584]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0x2a8>
 800591a:	e014      	b.n	8005946 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fd fbfc 	bl	8003118 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005924:	f7fd fbf8 	bl	8003118 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b64      	cmp	r3, #100	; 0x64
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e29a      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005936:	4b88      	ldr	r3, [pc, #544]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x2d0>
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d060      	beq.n	8005a14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b04      	cmp	r3, #4
 8005956:	d005      	beq.n	8005964 <HAL_RCC_OscConfig+0x310>
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b0c      	cmp	r3, #12
 800595c:	d119      	bne.n	8005992 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d116      	bne.n	8005992 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005964:	4b7c      	ldr	r3, [pc, #496]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_RCC_OscConfig+0x328>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e277      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597c:	4b76      	ldr	r3, [pc, #472]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	061b      	lsls	r3, r3, #24
 800598a:	4973      	ldr	r1, [pc, #460]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 800598c:	4313      	orrs	r3, r2
 800598e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005990:	e040      	b.n	8005a14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d023      	beq.n	80059e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800599a:	4b6f      	ldr	r3, [pc, #444]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a6e      	ldr	r2, [pc, #440]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80059a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a6:	f7fd fbb7 	bl	8003118 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ae:	f7fd fbb3 	bl	8003118 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e255      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059c0:	4b65      	ldr	r3, [pc, #404]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059cc:	4b62      	ldr	r3, [pc, #392]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	495f      	ldr	r1, [pc, #380]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]
 80059e0:	e018      	b.n	8005a14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059e2:	4b5d      	ldr	r3, [pc, #372]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a5c      	ldr	r2, [pc, #368]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 80059e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ee:	f7fd fb93 	bl	8003118 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059f6:	f7fd fb8f 	bl	8003118 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e231      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a08:	4b53      	ldr	r3, [pc, #332]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f0      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d03c      	beq.n	8005a9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01c      	beq.n	8005a62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a28:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2e:	4a4a      	ldr	r2, [pc, #296]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005a30:	f043 0301 	orr.w	r3, r3, #1
 8005a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a38:	f7fd fb6e 	bl	8003118 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a40:	f7fd fb6a 	bl	8003118 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e20c      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a52:	4b41      	ldr	r3, [pc, #260]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0ef      	beq.n	8005a40 <HAL_RCC_OscConfig+0x3ec>
 8005a60:	e01b      	b.n	8005a9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a62:	4b3d      	ldr	r3, [pc, #244]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a68:	4a3b      	ldr	r2, [pc, #236]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a72:	f7fd fb51 	bl	8003118 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a7a:	f7fd fb4d 	bl	8003118 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e1ef      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a8c:	4b32      	ldr	r3, [pc, #200]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1ef      	bne.n	8005a7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80a6 	beq.w	8005bf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10d      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab8:	4b27      	ldr	r3, [pc, #156]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abc:	4a26      	ldr	r2, [pc, #152]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad4:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <HAL_RCC_OscConfig+0x508>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d118      	bne.n	8005b12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae0:	4b1e      	ldr	r3, [pc, #120]	; (8005b5c <HAL_RCC_OscConfig+0x508>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1d      	ldr	r2, [pc, #116]	; (8005b5c <HAL_RCC_OscConfig+0x508>)
 8005ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aec:	f7fd fb14 	bl	8003118 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af4:	f7fd fb10 	bl	8003118 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e1b2      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b06:	4b15      	ldr	r3, [pc, #84]	; (8005b5c <HAL_RCC_OscConfig+0x508>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d108      	bne.n	8005b2c <HAL_RCC_OscConfig+0x4d8>
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b20:	4a0d      	ldr	r2, [pc, #52]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b2a:	e029      	b.n	8005b80 <HAL_RCC_OscConfig+0x52c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d115      	bne.n	8005b60 <HAL_RCC_OscConfig+0x50c>
 8005b34:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3a:	4a07      	ldr	r2, [pc, #28]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005b3c:	f043 0304 	orr.w	r3, r3, #4
 8005b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b44:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	4a03      	ldr	r2, [pc, #12]	; (8005b58 <HAL_RCC_OscConfig+0x504>)
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b54:	e014      	b.n	8005b80 <HAL_RCC_OscConfig+0x52c>
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40007000 	.word	0x40007000
 8005b60:	4b9a      	ldr	r3, [pc, #616]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	4a99      	ldr	r2, [pc, #612]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b70:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	4a95      	ldr	r2, [pc, #596]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005b78:	f023 0304 	bic.w	r3, r3, #4
 8005b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d016      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b88:	f7fd fac6 	bl	8003118 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b90:	f7fd fac2 	bl	8003118 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e162      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ba6:	4b89      	ldr	r3, [pc, #548]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ed      	beq.n	8005b90 <HAL_RCC_OscConfig+0x53c>
 8005bb4:	e015      	b.n	8005be2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb6:	f7fd faaf 	bl	8003118 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bbc:	e00a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bbe:	f7fd faab 	bl	8003118 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e14b      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bd4:	4b7d      	ldr	r3, [pc, #500]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1ed      	bne.n	8005bbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005be2:	7ffb      	ldrb	r3, [r7, #31]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d105      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005be8:	4b78      	ldr	r3, [pc, #480]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bec:	4a77      	ldr	r2, [pc, #476]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d03c      	beq.n	8005c7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01c      	beq.n	8005c42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c08:	4b70      	ldr	r3, [pc, #448]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c0e:	4a6f      	ldr	r2, [pc, #444]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005c10:	f043 0301 	orr.w	r3, r3, #1
 8005c14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fd fa7e 	bl	8003118 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c20:	f7fd fa7a 	bl	8003118 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e11c      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c32:	4b66      	ldr	r3, [pc, #408]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ef      	beq.n	8005c20 <HAL_RCC_OscConfig+0x5cc>
 8005c40:	e01b      	b.n	8005c7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c42:	4b62      	ldr	r3, [pc, #392]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c48:	4a60      	ldr	r2, [pc, #384]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fd fa61 	bl	8003118 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c5a:	f7fd fa5d 	bl	8003118 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e0ff      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c6c:	4b57      	ldr	r3, [pc, #348]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1ef      	bne.n	8005c5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80f3 	beq.w	8005e6a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	f040 80c9 	bne.w	8005e20 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c8e:	4b4f      	ldr	r3, [pc, #316]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f003 0203 	and.w	r2, r3, #3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d12c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	3b01      	subs	r3, #1
 8005cae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d123      	bne.n	8005cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d11b      	bne.n	8005cfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d113      	bne.n	8005cfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d109      	bne.n	8005cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d06b      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b0c      	cmp	r3, #12
 8005d00:	d062      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d02:	4b32      	ldr	r3, [pc, #200]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e0ac      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d12:	4b2e      	ldr	r3, [pc, #184]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2d      	ldr	r2, [pc, #180]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d1e:	f7fd f9fb 	bl	8003118 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d26:	f7fd f9f7 	bl	8003118 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e099      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f0      	bne.n	8005d26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d44:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <HAL_RCC_OscConfig+0x77c>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d54:	3a01      	subs	r2, #1
 8005d56:	0112      	lsls	r2, r2, #4
 8005d58:	4311      	orrs	r1, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d5e:	0212      	lsls	r2, r2, #8
 8005d60:	4311      	orrs	r1, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d66:	0852      	lsrs	r2, r2, #1
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	0552      	lsls	r2, r2, #21
 8005d6c:	4311      	orrs	r1, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d72:	0852      	lsrs	r2, r2, #1
 8005d74:	3a01      	subs	r2, #1
 8005d76:	0652      	lsls	r2, r2, #25
 8005d78:	4311      	orrs	r1, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d7e:	06d2      	lsls	r2, r2, #27
 8005d80:	430a      	orrs	r2, r1
 8005d82:	4912      	ldr	r1, [pc, #72]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d88:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0f      	ldr	r2, [pc, #60]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d94:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a0c      	ldr	r2, [pc, #48]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005da0:	f7fd f9ba 	bl	8003118 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da8:	f7fd f9b6 	bl	8003118 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e058      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dba:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <HAL_RCC_OscConfig+0x778>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dc6:	e050      	b.n	8005e6a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e04f      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd4:	4b27      	ldr	r3, [pc, #156]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d144      	bne.n	8005e6a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005de0:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dec:	4b21      	ldr	r3, [pc, #132]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005df6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005df8:	f7fd f98e 	bl	8003118 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e00:	f7fd f98a 	bl	8003118 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e02c      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0x7ac>
 8005e1e:	e024      	b.n	8005e6a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b0c      	cmp	r3, #12
 8005e24:	d01f      	beq.n	8005e66 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e26:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a12      	ldr	r2, [pc, #72]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fd f971 	bl	8003118 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3a:	f7fd f96d 	bl	8003118 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e00f      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f0      	bne.n	8005e3a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	4905      	ldr	r1, [pc, #20]	; (8005e74 <HAL_RCC_OscConfig+0x820>)
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <HAL_RCC_OscConfig+0x824>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	60cb      	str	r3, [r1, #12]
 8005e64:	e001      	b.n	8005e6a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3720      	adds	r7, #32
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40021000 	.word	0x40021000
 8005e78:	feeefffc 	.word	0xfeeefffc

08005e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e0e7      	b.n	8006060 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e90:	4b75      	ldr	r3, [pc, #468]	; (8006068 <HAL_RCC_ClockConfig+0x1ec>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d910      	bls.n	8005ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9e:	4b72      	ldr	r3, [pc, #456]	; (8006068 <HAL_RCC_ClockConfig+0x1ec>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f023 0207 	bic.w	r2, r3, #7
 8005ea6:	4970      	ldr	r1, [pc, #448]	; (8006068 <HAL_RCC_ClockConfig+0x1ec>)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eae:	4b6e      	ldr	r3, [pc, #440]	; (8006068 <HAL_RCC_ClockConfig+0x1ec>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d001      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0cf      	b.n	8006060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d010      	beq.n	8005eee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	4b66      	ldr	r3, [pc, #408]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d908      	bls.n	8005eee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005edc:	4b63      	ldr	r3, [pc, #396]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	4960      	ldr	r1, [pc, #384]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d04c      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d107      	bne.n	8005f12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f02:	4b5a      	ldr	r3, [pc, #360]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d121      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e0a6      	b.n	8006060 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d107      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f1a:	4b54      	ldr	r3, [pc, #336]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d115      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e09a      	b.n	8006060 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d107      	bne.n	8005f42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f32:	4b4e      	ldr	r3, [pc, #312]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e08e      	b.n	8006060 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f42:	4b4a      	ldr	r3, [pc, #296]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e086      	b.n	8006060 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f52:	4b46      	ldr	r3, [pc, #280]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f023 0203 	bic.w	r2, r3, #3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	4943      	ldr	r1, [pc, #268]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f64:	f7fd f8d8 	bl	8003118 <HAL_GetTick>
 8005f68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6a:	e00a      	b.n	8005f82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f6c:	f7fd f8d4 	bl	8003118 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e06e      	b.n	8006060 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f82:	4b3a      	ldr	r3, [pc, #232]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 020c 	and.w	r2, r3, #12
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d1eb      	bne.n	8005f6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d010      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	4b31      	ldr	r3, [pc, #196]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d208      	bcs.n	8005fc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb0:	4b2e      	ldr	r3, [pc, #184]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	492b      	ldr	r1, [pc, #172]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fc2:	4b29      	ldr	r3, [pc, #164]	; (8006068 <HAL_RCC_ClockConfig+0x1ec>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d210      	bcs.n	8005ff2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd0:	4b25      	ldr	r3, [pc, #148]	; (8006068 <HAL_RCC_ClockConfig+0x1ec>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f023 0207 	bic.w	r2, r3, #7
 8005fd8:	4923      	ldr	r1, [pc, #140]	; (8006068 <HAL_RCC_ClockConfig+0x1ec>)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe0:	4b21      	ldr	r3, [pc, #132]	; (8006068 <HAL_RCC_ClockConfig+0x1ec>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d001      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e036      	b.n	8006060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	4918      	ldr	r1, [pc, #96]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 800600c:	4313      	orrs	r3, r2
 800600e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800601c:	4b13      	ldr	r3, [pc, #76]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4910      	ldr	r1, [pc, #64]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 800602c:	4313      	orrs	r3, r2
 800602e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006030:	f000 f824 	bl	800607c <HAL_RCC_GetSysClockFreq>
 8006034:	4602      	mov	r2, r0
 8006036:	4b0d      	ldr	r3, [pc, #52]	; (800606c <HAL_RCC_ClockConfig+0x1f0>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	091b      	lsrs	r3, r3, #4
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	490b      	ldr	r1, [pc, #44]	; (8006070 <HAL_RCC_ClockConfig+0x1f4>)
 8006042:	5ccb      	ldrb	r3, [r1, r3]
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
 800604c:	4a09      	ldr	r2, [pc, #36]	; (8006074 <HAL_RCC_ClockConfig+0x1f8>)
 800604e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <HAL_RCC_ClockConfig+0x1fc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f7fd f80f 	bl	8003078 <HAL_InitTick>
 800605a:	4603      	mov	r3, r0
 800605c:	72fb      	strb	r3, [r7, #11]

  return status;
 800605e:	7afb      	ldrb	r3, [r7, #11]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40022000 	.word	0x40022000
 800606c:	40021000 	.word	0x40021000
 8006070:	0800be6c 	.word	0x0800be6c
 8006074:	2000016c 	.word	0x2000016c
 8006078:	20000180 	.word	0x20000180

0800607c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800607c:	b480      	push	{r7}
 800607e:	b089      	sub	sp, #36	; 0x24
 8006080:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800608a:	4b3e      	ldr	r3, [pc, #248]	; (8006184 <HAL_RCC_GetSysClockFreq+0x108>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006094:	4b3b      	ldr	r3, [pc, #236]	; (8006184 <HAL_RCC_GetSysClockFreq+0x108>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_RCC_GetSysClockFreq+0x34>
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b0c      	cmp	r3, #12
 80060a8:	d121      	bne.n	80060ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d11e      	bne.n	80060ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060b0:	4b34      	ldr	r3, [pc, #208]	; (8006184 <HAL_RCC_GetSysClockFreq+0x108>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d107      	bne.n	80060cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060bc:	4b31      	ldr	r3, [pc, #196]	; (8006184 <HAL_RCC_GetSysClockFreq+0x108>)
 80060be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	e005      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060cc:	4b2d      	ldr	r3, [pc, #180]	; (8006184 <HAL_RCC_GetSysClockFreq+0x108>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	091b      	lsrs	r3, r3, #4
 80060d2:	f003 030f 	and.w	r3, r3, #15
 80060d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80060d8:	4a2b      	ldr	r2, [pc, #172]	; (8006188 <HAL_RCC_GetSysClockFreq+0x10c>)
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10d      	bne.n	8006104 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060ec:	e00a      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d102      	bne.n	80060fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060f4:	4b25      	ldr	r3, [pc, #148]	; (800618c <HAL_RCC_GetSysClockFreq+0x110>)
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e004      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d101      	bne.n	8006104 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006100:	4b22      	ldr	r3, [pc, #136]	; (800618c <HAL_RCC_GetSysClockFreq+0x110>)
 8006102:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	2b0c      	cmp	r3, #12
 8006108:	d134      	bne.n	8006174 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800610a:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <HAL_RCC_GetSysClockFreq+0x108>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d003      	beq.n	8006122 <HAL_RCC_GetSysClockFreq+0xa6>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b03      	cmp	r3, #3
 800611e:	d003      	beq.n	8006128 <HAL_RCC_GetSysClockFreq+0xac>
 8006120:	e005      	b.n	800612e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006122:	4b1a      	ldr	r3, [pc, #104]	; (800618c <HAL_RCC_GetSysClockFreq+0x110>)
 8006124:	617b      	str	r3, [r7, #20]
      break;
 8006126:	e005      	b.n	8006134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006128:	4b18      	ldr	r3, [pc, #96]	; (800618c <HAL_RCC_GetSysClockFreq+0x110>)
 800612a:	617b      	str	r3, [r7, #20]
      break;
 800612c:	e002      	b.n	8006134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	617b      	str	r3, [r7, #20]
      break;
 8006132:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_RCC_GetSysClockFreq+0x108>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	3301      	adds	r3, #1
 8006140:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006142:	4b10      	ldr	r3, [pc, #64]	; (8006184 <HAL_RCC_GetSysClockFreq+0x108>)
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	fb03 f202 	mul.w	r2, r3, r2
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800615a:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <HAL_RCC_GetSysClockFreq+0x108>)
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	0e5b      	lsrs	r3, r3, #25
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	3301      	adds	r3, #1
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006172:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006174:	69bb      	ldr	r3, [r7, #24]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3724      	adds	r7, #36	; 0x24
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40021000 	.word	0x40021000
 8006188:	0800be84 	.word	0x0800be84
 800618c:	00f42400 	.word	0x00f42400

08006190 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006194:	4b03      	ldr	r3, [pc, #12]	; (80061a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006196:	681b      	ldr	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000016c 	.word	0x2000016c

080061a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80061ac:	f7ff fff0 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4904      	ldr	r1, [pc, #16]	; (80061d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40021000 	.word	0x40021000
 80061d0:	0800be7c 	.word	0x0800be7c

080061d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80061d8:	f7ff ffda 	bl	8006190 <HAL_RCC_GetHCLKFreq>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	0adb      	lsrs	r3, r3, #11
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	4904      	ldr	r1, [pc, #16]	; (80061fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80061ea:	5ccb      	ldrb	r3, [r1, r3]
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	0800be7c 	.word	0x0800be7c

08006200 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800620c:	4b2a      	ldr	r3, [pc, #168]	; (80062b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800620e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006218:	f7ff f9b8 	bl	800558c <HAL_PWREx_GetVoltageRange>
 800621c:	6178      	str	r0, [r7, #20]
 800621e:	e014      	b.n	800624a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006220:	4b25      	ldr	r3, [pc, #148]	; (80062b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006224:	4a24      	ldr	r2, [pc, #144]	; (80062b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622a:	6593      	str	r3, [r2, #88]	; 0x58
 800622c:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006238:	f7ff f9a8 	bl	800558c <HAL_PWREx_GetVoltageRange>
 800623c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800623e:	4b1e      	ldr	r3, [pc, #120]	; (80062b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006242:	4a1d      	ldr	r2, [pc, #116]	; (80062b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006248:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006250:	d10b      	bne.n	800626a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b80      	cmp	r3, #128	; 0x80
 8006256:	d919      	bls.n	800628c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2ba0      	cmp	r3, #160	; 0xa0
 800625c:	d902      	bls.n	8006264 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800625e:	2302      	movs	r3, #2
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	e013      	b.n	800628c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006264:	2301      	movs	r3, #1
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	e010      	b.n	800628c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b80      	cmp	r3, #128	; 0x80
 800626e:	d902      	bls.n	8006276 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006270:	2303      	movs	r3, #3
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	e00a      	b.n	800628c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b80      	cmp	r3, #128	; 0x80
 800627a:	d102      	bne.n	8006282 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800627c:	2302      	movs	r3, #2
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	e004      	b.n	800628c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b70      	cmp	r3, #112	; 0x70
 8006286:	d101      	bne.n	800628c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006288:	2301      	movs	r3, #1
 800628a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f023 0207 	bic.w	r2, r3, #7
 8006294:	4909      	ldr	r1, [pc, #36]	; (80062bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800629c:	4b07      	ldr	r3, [pc, #28]	; (80062bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0307 	and.w	r3, r3, #7
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d001      	beq.n	80062ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40021000 	.word	0x40021000
 80062bc:	40022000 	.word	0x40022000

080062c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062c8:	2300      	movs	r3, #0
 80062ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062cc:	2300      	movs	r3, #0
 80062ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d031      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062e4:	d01a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80062e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80062ea:	d814      	bhi.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d009      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80062f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062f4:	d10f      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80062f6:	4b5d      	ldr	r3, [pc, #372]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	4a5c      	ldr	r2, [pc, #368]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006300:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006302:	e00c      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3304      	adds	r3, #4
 8006308:	2100      	movs	r1, #0
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f9f0 	bl	80066f0 <RCCEx_PLLSAI1_Config>
 8006310:	4603      	mov	r3, r0
 8006312:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006314:	e003      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	74fb      	strb	r3, [r7, #19]
      break;
 800631a:	e000      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800631c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800631e:	7cfb      	ldrb	r3, [r7, #19]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006324:	4b51      	ldr	r3, [pc, #324]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	494e      	ldr	r1, [pc, #312]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006334:	4313      	orrs	r3, r2
 8006336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800633a:	e001      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	7cfb      	ldrb	r3, [r7, #19]
 800633e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 809e 	beq.w	800648a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800634e:	2300      	movs	r3, #0
 8006350:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006352:	4b46      	ldr	r3, [pc, #280]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006362:	2300      	movs	r3, #0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00d      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006368:	4b40      	ldr	r3, [pc, #256]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	4a3f      	ldr	r2, [pc, #252]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800636e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006372:	6593      	str	r3, [r2, #88]	; 0x58
 8006374:	4b3d      	ldr	r3, [pc, #244]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006380:	2301      	movs	r3, #1
 8006382:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006384:	4b3a      	ldr	r3, [pc, #232]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a39      	ldr	r2, [pc, #228]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800638a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800638e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006390:	f7fc fec2 	bl	8003118 <HAL_GetTick>
 8006394:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006396:	e009      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006398:	f7fc febe 	bl	8003118 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d902      	bls.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	74fb      	strb	r3, [r7, #19]
        break;
 80063aa:	e005      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80063ac:	4b30      	ldr	r3, [pc, #192]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0ef      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80063b8:	7cfb      	ldrb	r3, [r7, #19]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d15a      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063be:	4b2b      	ldr	r3, [pc, #172]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01e      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d019      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063da:	4b24      	ldr	r3, [pc, #144]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063e6:	4b21      	ldr	r3, [pc, #132]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	4a1f      	ldr	r2, [pc, #124]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063f6:	4b1d      	ldr	r3, [pc, #116]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fc:	4a1b      	ldr	r2, [pc, #108]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80063fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006406:	4a19      	ldr	r2, [pc, #100]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d016      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006418:	f7fc fe7e 	bl	8003118 <HAL_GetTick>
 800641c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800641e:	e00b      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006420:	f7fc fe7a 	bl	8003118 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	f241 3288 	movw	r2, #5000	; 0x1388
 800642e:	4293      	cmp	r3, r2
 8006430:	d902      	bls.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	74fb      	strb	r3, [r7, #19]
            break;
 8006436:	e006      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800643a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ec      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006446:	7cfb      	ldrb	r3, [r7, #19]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10b      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800644c:	4b07      	ldr	r3, [pc, #28]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	4904      	ldr	r1, [pc, #16]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800645c:	4313      	orrs	r3, r2
 800645e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006462:	e009      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006464:	7cfb      	ldrb	r3, [r7, #19]
 8006466:	74bb      	strb	r3, [r7, #18]
 8006468:	e006      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800646a:	bf00      	nop
 800646c:	40021000 	.word	0x40021000
 8006470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	7cfb      	ldrb	r3, [r7, #19]
 8006476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006478:	7c7b      	ldrb	r3, [r7, #17]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d105      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800647e:	4b9b      	ldr	r3, [pc, #620]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006482:	4a9a      	ldr	r2, [pc, #616]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006488:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006496:	4b95      	ldr	r3, [pc, #596]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649c:	f023 0203 	bic.w	r2, r3, #3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	4991      	ldr	r1, [pc, #580]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064b8:	4b8c      	ldr	r3, [pc, #560]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064be:	f023 020c 	bic.w	r2, r3, #12
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	4989      	ldr	r1, [pc, #548]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064da:	4b84      	ldr	r3, [pc, #528]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	4980      	ldr	r1, [pc, #512]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064fc:	4b7b      	ldr	r3, [pc, #492]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80064fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006502:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	4978      	ldr	r1, [pc, #480]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800651e:	4b73      	ldr	r3, [pc, #460]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652c:	496f      	ldr	r1, [pc, #444]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006540:	4b6a      	ldr	r3, [pc, #424]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	4967      	ldr	r1, [pc, #412]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006562:	4b62      	ldr	r3, [pc, #392]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006568:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	495e      	ldr	r1, [pc, #376]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006584:	4b59      	ldr	r3, [pc, #356]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006592:	4956      	ldr	r1, [pc, #344]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065a6:	4b51      	ldr	r3, [pc, #324]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	494d      	ldr	r1, [pc, #308]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d028      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065c8:	4b48      	ldr	r3, [pc, #288]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d6:	4945      	ldr	r1, [pc, #276]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e6:	d106      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e8:	4b40      	ldr	r3, [pc, #256]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a3f      	ldr	r2, [pc, #252]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80065ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f2:	60d3      	str	r3, [r2, #12]
 80065f4:	e011      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065fe:	d10c      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	2101      	movs	r1, #1
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f872 	bl	80066f0 <RCCEx_PLLSAI1_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006610:	7cfb      	ldrb	r3, [r7, #19]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8006616:	7cfb      	ldrb	r3, [r7, #19]
 8006618:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d028      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006626:	4b31      	ldr	r3, [pc, #196]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006634:	492d      	ldr	r1, [pc, #180]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006644:	d106      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006646:	4b29      	ldr	r3, [pc, #164]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	4a28      	ldr	r2, [pc, #160]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800664c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006650:	60d3      	str	r3, [r2, #12]
 8006652:	e011      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800665c:	d10c      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3304      	adds	r3, #4
 8006662:	2101      	movs	r1, #1
 8006664:	4618      	mov	r0, r3
 8006666:	f000 f843 	bl	80066f0 <RCCEx_PLLSAI1_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800666e:	7cfb      	ldrb	r3, [r7, #19]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006674:	7cfb      	ldrb	r3, [r7, #19]
 8006676:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01c      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006684:	4b19      	ldr	r3, [pc, #100]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	4916      	ldr	r1, [pc, #88]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a2:	d10c      	bne.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3304      	adds	r3, #4
 80066a8:	2102      	movs	r1, #2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f820 	bl	80066f0 <RCCEx_PLLSAI1_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066b4:	7cfb      	ldrb	r3, [r7, #19]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80066ba:	7cfb      	ldrb	r3, [r7, #19]
 80066bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80066cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d8:	4904      	ldr	r1, [pc, #16]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80066e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40021000 	.word	0x40021000

080066f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066fe:	4b74      	ldr	r3, [pc, #464]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d018      	beq.n	800673c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800670a:	4b71      	ldr	r3, [pc, #452]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0203 	and.w	r2, r3, #3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d10d      	bne.n	8006736 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
       ||
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006722:	4b6b      	ldr	r3, [pc, #428]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	091b      	lsrs	r3, r3, #4
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
       ||
 8006732:	429a      	cmp	r2, r3
 8006734:	d047      	beq.n	80067c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
 800673a:	e044      	b.n	80067c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d018      	beq.n	8006776 <RCCEx_PLLSAI1_Config+0x86>
 8006744:	2b03      	cmp	r3, #3
 8006746:	d825      	bhi.n	8006794 <RCCEx_PLLSAI1_Config+0xa4>
 8006748:	2b01      	cmp	r3, #1
 800674a:	d002      	beq.n	8006752 <RCCEx_PLLSAI1_Config+0x62>
 800674c:	2b02      	cmp	r3, #2
 800674e:	d009      	beq.n	8006764 <RCCEx_PLLSAI1_Config+0x74>
 8006750:	e020      	b.n	8006794 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006752:	4b5f      	ldr	r3, [pc, #380]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11d      	bne.n	800679a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006762:	e01a      	b.n	800679a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006764:	4b5a      	ldr	r3, [pc, #360]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676c:	2b00      	cmp	r3, #0
 800676e:	d116      	bne.n	800679e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006774:	e013      	b.n	800679e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006776:	4b56      	ldr	r3, [pc, #344]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006782:	4b53      	ldr	r3, [pc, #332]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006792:	e006      	b.n	80067a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
      break;
 8006798:	e004      	b.n	80067a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800679a:	bf00      	nop
 800679c:	e002      	b.n	80067a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800679e:	bf00      	nop
 80067a0:	e000      	b.n	80067a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80067a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80067aa:	4b49      	ldr	r3, [pc, #292]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	430b      	orrs	r3, r1
 80067c0:	4943      	ldr	r1, [pc, #268]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d17c      	bne.n	80068c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80067cc:	4b40      	ldr	r3, [pc, #256]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a3f      	ldr	r2, [pc, #252]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d8:	f7fc fc9e 	bl	8003118 <HAL_GetTick>
 80067dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067de:	e009      	b.n	80067f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067e0:	f7fc fc9a 	bl	8003118 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d902      	bls.n	80067f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	73fb      	strb	r3, [r7, #15]
        break;
 80067f2:	e005      	b.n	8006800 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067f4:	4b36      	ldr	r3, [pc, #216]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1ef      	bne.n	80067e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d15f      	bne.n	80068c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d110      	bne.n	800682e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800680c:	4b30      	ldr	r3, [pc, #192]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006814:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6892      	ldr	r2, [r2, #8]
 800681c:	0211      	lsls	r1, r2, #8
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	68d2      	ldr	r2, [r2, #12]
 8006822:	06d2      	lsls	r2, r2, #27
 8006824:	430a      	orrs	r2, r1
 8006826:	492a      	ldr	r1, [pc, #168]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006828:	4313      	orrs	r3, r2
 800682a:	610b      	str	r3, [r1, #16]
 800682c:	e027      	b.n	800687e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d112      	bne.n	800685a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006834:	4b26      	ldr	r3, [pc, #152]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800683c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6892      	ldr	r2, [r2, #8]
 8006844:	0211      	lsls	r1, r2, #8
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6912      	ldr	r2, [r2, #16]
 800684a:	0852      	lsrs	r2, r2, #1
 800684c:	3a01      	subs	r2, #1
 800684e:	0552      	lsls	r2, r2, #21
 8006850:	430a      	orrs	r2, r1
 8006852:	491f      	ldr	r1, [pc, #124]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006854:	4313      	orrs	r3, r2
 8006856:	610b      	str	r3, [r1, #16]
 8006858:	e011      	b.n	800687e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800685a:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006862:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6892      	ldr	r2, [r2, #8]
 800686a:	0211      	lsls	r1, r2, #8
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6952      	ldr	r2, [r2, #20]
 8006870:	0852      	lsrs	r2, r2, #1
 8006872:	3a01      	subs	r2, #1
 8006874:	0652      	lsls	r2, r2, #25
 8006876:	430a      	orrs	r2, r1
 8006878:	4915      	ldr	r1, [pc, #84]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800687a:	4313      	orrs	r3, r2
 800687c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800687e:	4b14      	ldr	r3, [pc, #80]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006888:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688a:	f7fc fc45 	bl	8003118 <HAL_GetTick>
 800688e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006890:	e009      	b.n	80068a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006892:	f7fc fc41 	bl	8003118 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d902      	bls.n	80068a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	73fb      	strb	r3, [r7, #15]
          break;
 80068a4:	e005      	b.n	80068b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80068a6:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0ef      	beq.n	8006892 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80068b8:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	4903      	ldr	r1, [pc, #12]	; (80068d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40021000 	.word	0x40021000

080068d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e049      	b.n	800697a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fb fef0 	bl	80026e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	4619      	mov	r1, r3
 8006912:	4610      	mov	r0, r2
 8006914:	f000 faca 	bl	8006eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d001      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e03b      	b.n	8006a14 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <HAL_TIM_Base_Start_IT+0x9c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_TIM_Base_Start_IT+0x4e>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c6:	d004      	beq.n	80069d2 <HAL_TIM_Base_Start_IT+0x4e>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <HAL_TIM_Base_Start_IT+0xa0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d115      	bne.n	80069fe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <HAL_TIM_Base_Start_IT+0xa4>)
 80069da:	4013      	ands	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b06      	cmp	r3, #6
 80069e2:	d015      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0x8c>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ea:	d011      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fc:	e008      	b.n	8006a10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0201 	orr.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e000      	b.n	8006a12 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	40012c00 	.word	0x40012c00
 8006a24:	40014000 	.word	0x40014000
 8006a28:	00010007 	.word	0x00010007

08006a2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0201 	bic.w	r2, r2, #1
 8006a42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6a1a      	ldr	r2, [r3, #32]
 8006a4a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10f      	bne.n	8006a74 <HAL_TIM_Base_Stop_IT+0x48>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6a1a      	ldr	r2, [r3, #32]
 8006a5a:	f240 4344 	movw	r3, #1092	; 0x444
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d107      	bne.n	8006a74 <HAL_TIM_Base_Stop_IT+0x48>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d122      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d11b      	bne.n	8006ae6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f06f 0202 	mvn.w	r2, #2
 8006ab6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f003 0303 	and.w	r3, r3, #3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f9ce 	bl	8006e6e <HAL_TIM_IC_CaptureCallback>
 8006ad2:	e005      	b.n	8006ae0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f9c0 	bl	8006e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9d1 	bl	8006e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d122      	bne.n	8006b3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d11b      	bne.n	8006b3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f06f 0204 	mvn.w	r2, #4
 8006b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f9a4 	bl	8006e6e <HAL_TIM_IC_CaptureCallback>
 8006b26:	e005      	b.n	8006b34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f996 	bl	8006e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9a7 	bl	8006e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b08      	cmp	r3, #8
 8006b46:	d122      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d11b      	bne.n	8006b8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f06f 0208 	mvn.w	r2, #8
 8006b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2204      	movs	r2, #4
 8006b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f97a 	bl	8006e6e <HAL_TIM_IC_CaptureCallback>
 8006b7a:	e005      	b.n	8006b88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f96c 	bl	8006e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f97d 	bl	8006e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d122      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d11b      	bne.n	8006be2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f06f 0210 	mvn.w	r2, #16
 8006bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f950 	bl	8006e6e <HAL_TIM_IC_CaptureCallback>
 8006bce:	e005      	b.n	8006bdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f942 	bl	8006e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f953 	bl	8006e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d10e      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d107      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f06f 0201 	mvn.w	r2, #1
 8006c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fb fa4b 	bl	80020a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b80      	cmp	r3, #128	; 0x80
 8006c1a:	d10e      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	d107      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 faa7 	bl	8007188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c48:	d10e      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c54:	2b80      	cmp	r3, #128	; 0x80
 8006c56:	d107      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa9a 	bl	800719c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d10e      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d107      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f901 	bl	8006e96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d10e      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d107      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0220 	mvn.w	r2, #32
 8006cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa5a 	bl	8007174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e0b6      	b.n	8006e52 <HAL_TIM_ConfigClockSource+0x18a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d20:	d03e      	beq.n	8006da0 <HAL_TIM_ConfigClockSource+0xd8>
 8006d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d26:	f200 8087 	bhi.w	8006e38 <HAL_TIM_ConfigClockSource+0x170>
 8006d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2e:	f000 8086 	beq.w	8006e3e <HAL_TIM_ConfigClockSource+0x176>
 8006d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d36:	d87f      	bhi.n	8006e38 <HAL_TIM_ConfigClockSource+0x170>
 8006d38:	2b70      	cmp	r3, #112	; 0x70
 8006d3a:	d01a      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0xaa>
 8006d3c:	2b70      	cmp	r3, #112	; 0x70
 8006d3e:	d87b      	bhi.n	8006e38 <HAL_TIM_ConfigClockSource+0x170>
 8006d40:	2b60      	cmp	r3, #96	; 0x60
 8006d42:	d050      	beq.n	8006de6 <HAL_TIM_ConfigClockSource+0x11e>
 8006d44:	2b60      	cmp	r3, #96	; 0x60
 8006d46:	d877      	bhi.n	8006e38 <HAL_TIM_ConfigClockSource+0x170>
 8006d48:	2b50      	cmp	r3, #80	; 0x50
 8006d4a:	d03c      	beq.n	8006dc6 <HAL_TIM_ConfigClockSource+0xfe>
 8006d4c:	2b50      	cmp	r3, #80	; 0x50
 8006d4e:	d873      	bhi.n	8006e38 <HAL_TIM_ConfigClockSource+0x170>
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d058      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0x13e>
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d86f      	bhi.n	8006e38 <HAL_TIM_ConfigClockSource+0x170>
 8006d58:	2b30      	cmp	r3, #48	; 0x30
 8006d5a:	d064      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x15e>
 8006d5c:	2b30      	cmp	r3, #48	; 0x30
 8006d5e:	d86b      	bhi.n	8006e38 <HAL_TIM_ConfigClockSource+0x170>
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d060      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x15e>
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d867      	bhi.n	8006e38 <HAL_TIM_ConfigClockSource+0x170>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d05c      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x15e>
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d05a      	beq.n	8006e26 <HAL_TIM_ConfigClockSource+0x15e>
 8006d70:	e062      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6899      	ldr	r1, [r3, #8]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f000 f971 	bl	8007068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	609a      	str	r2, [r3, #8]
      break;
 8006d9e:	e04f      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6899      	ldr	r1, [r3, #8]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f000 f95a 	bl	8007068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dc2:	609a      	str	r2, [r3, #8]
      break;
 8006dc4:	e03c      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6859      	ldr	r1, [r3, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f000 f8ce 	bl	8006f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2150      	movs	r1, #80	; 0x50
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 f927 	bl	8007032 <TIM_ITRx_SetConfig>
      break;
 8006de4:	e02c      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6859      	ldr	r1, [r3, #4]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f000 f8ed 	bl	8006fd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2160      	movs	r1, #96	; 0x60
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 f917 	bl	8007032 <TIM_ITRx_SetConfig>
      break;
 8006e04:	e01c      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6859      	ldr	r1, [r3, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f000 f8ae 	bl	8006f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2140      	movs	r1, #64	; 0x40
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f907 	bl	8007032 <TIM_ITRx_SetConfig>
      break;
 8006e24:	e00c      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f000 f8fe 	bl	8007032 <TIM_ITRx_SetConfig>
      break;
 8006e36:	e003      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3c:	e000      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e9e:	bf00      	nop
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a2a      	ldr	r2, [pc, #168]	; (8006f68 <TIM_Base_SetConfig+0xbc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_Base_SetConfig+0x20>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eca:	d108      	bne.n	8006ede <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a21      	ldr	r2, [pc, #132]	; (8006f68 <TIM_Base_SetConfig+0xbc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00b      	beq.n	8006efe <TIM_Base_SetConfig+0x52>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eec:	d007      	beq.n	8006efe <TIM_Base_SetConfig+0x52>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1e      	ldr	r2, [pc, #120]	; (8006f6c <TIM_Base_SetConfig+0xc0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_Base_SetConfig+0x52>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a1d      	ldr	r2, [pc, #116]	; (8006f70 <TIM_Base_SetConfig+0xc4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d108      	bne.n	8006f10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a0c      	ldr	r2, [pc, #48]	; (8006f68 <TIM_Base_SetConfig+0xbc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d007      	beq.n	8006f4c <TIM_Base_SetConfig+0xa0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a0b      	ldr	r2, [pc, #44]	; (8006f6c <TIM_Base_SetConfig+0xc0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_Base_SetConfig+0xa0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <TIM_Base_SetConfig+0xc4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d103      	bne.n	8006f54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	615a      	str	r2, [r3, #20]
}
 8006f5a:	bf00      	nop
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400

08006f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f023 0201 	bic.w	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f023 030a 	bic.w	r3, r3, #10
 8006fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f023 0210 	bic.w	r2, r3, #16
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	031b      	lsls	r3, r3, #12
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800700e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	621a      	str	r2, [r3, #32]
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	f043 0307 	orr.w	r3, r3, #7
 8007054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	609a      	str	r2, [r3, #8]
}
 800705c:	bf00      	nop
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	021a      	lsls	r2, r3, #8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	431a      	orrs	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4313      	orrs	r3, r2
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	609a      	str	r2, [r3, #8]
}
 800709c:	bf00      	nop
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070bc:	2302      	movs	r3, #2
 80070be:	e04f      	b.n	8007160 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a21      	ldr	r2, [pc, #132]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d108      	bne.n	80070fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a14      	ldr	r2, [pc, #80]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007128:	d004      	beq.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a10      	ldr	r2, [pc, #64]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d10c      	bne.n	800714e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800713a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	4313      	orrs	r3, r2
 8007144:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40014000 	.word	0x40014000

08007174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e040      	b.n	8007244 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7fb fac2 	bl	800275c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2224      	movs	r2, #36	; 0x24
 80071dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fd2c 	bl	8007c4c <UART_SetConfig>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e022      	b.n	8007244 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 ff7a 	bl	8008100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800721a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800722a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 f801 	bl	8008244 <UART_CheckIdleState>
 8007242:	4603      	mov	r3, r0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e02b      	b.n	80072b6 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2224      	movs	r2, #36	; 0x24
 8007262:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2200      	movs	r2, #0
 8007282:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2200      	movs	r2, #0
 800728a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7fb faf3 	bl	8002878 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b08a      	sub	sp, #40	; 0x28
 80072c2:	af02      	add	r7, sp, #8
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	603b      	str	r3, [r7, #0]
 80072ca:	4613      	mov	r3, r2
 80072cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	f040 8082 	bne.w	80073dc <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <HAL_UART_Transmit+0x26>
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e07a      	b.n	80073de <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_UART_Transmit+0x38>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e073      	b.n	80073de <HAL_UART_Transmit+0x120>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2221      	movs	r2, #33	; 0x21
 800730a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800730c:	f7fb ff04 	bl	8003118 <HAL_GetTick>
 8007310:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	88fa      	ldrh	r2, [r7, #6]
 8007316:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	88fa      	ldrh	r2, [r7, #6]
 800731e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732a:	d108      	bne.n	800733e <HAL_UART_Transmit+0x80>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d104      	bne.n	800733e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	61bb      	str	r3, [r7, #24]
 800733c:	e003      	b.n	8007346 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007342:	2300      	movs	r3, #0
 8007344:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800734e:	e02d      	b.n	80073ac <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2200      	movs	r2, #0
 8007358:	2180      	movs	r1, #128	; 0x80
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 ffbb 	bl	80082d6 <UART_WaitOnFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e039      	b.n	80073de <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10b      	bne.n	8007388 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	881a      	ldrh	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800737c:	b292      	uxth	r2, r2
 800737e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	3302      	adds	r3, #2
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e008      	b.n	800739a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	781a      	ldrb	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	b292      	uxth	r2, r2
 8007392:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	3301      	adds	r3, #1
 8007398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1cb      	bne.n	8007350 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2200      	movs	r2, #0
 80073c0:	2140      	movs	r1, #64	; 0x40
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 ff87 	bl	80082d6 <UART_WaitOnFlagUntilTimeout>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e005      	b.n	80073de <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2220      	movs	r2, #32
 80073d6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	e000      	b.n	80073de <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
  }
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b08a      	sub	sp, #40	; 0x28
 80073ea:	af02      	add	r7, sp, #8
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	603b      	str	r3, [r7, #0]
 80073f2:	4613      	mov	r3, r2
 80073f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	f040 80bf 	bne.w	800757e <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_UART_Receive+0x26>
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e0b7      	b.n	8007580 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_UART_Receive+0x38>
 800741a:	2302      	movs	r3, #2
 800741c:	e0b0      	b.n	8007580 <HAL_UART_Receive+0x19a>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2222      	movs	r2, #34	; 0x22
 8007432:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800743a:	f7fb fe6d 	bl	8003118 <HAL_GetTick>
 800743e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	88fa      	ldrh	r2, [r7, #6]
 800744c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007458:	d10e      	bne.n	8007478 <HAL_UART_Receive+0x92>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d105      	bne.n	800746e <HAL_UART_Receive+0x88>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800746c:	e02d      	b.n	80074ca <HAL_UART_Receive+0xe4>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	22ff      	movs	r2, #255	; 0xff
 8007472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007476:	e028      	b.n	80074ca <HAL_UART_Receive+0xe4>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10d      	bne.n	800749c <HAL_UART_Receive+0xb6>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d104      	bne.n	8007492 <HAL_UART_Receive+0xac>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	22ff      	movs	r2, #255	; 0xff
 800748c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007490:	e01b      	b.n	80074ca <HAL_UART_Receive+0xe4>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	227f      	movs	r2, #127	; 0x7f
 8007496:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800749a:	e016      	b.n	80074ca <HAL_UART_Receive+0xe4>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074a4:	d10d      	bne.n	80074c2 <HAL_UART_Receive+0xdc>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <HAL_UART_Receive+0xd2>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	227f      	movs	r2, #127	; 0x7f
 80074b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b6:	e008      	b.n	80074ca <HAL_UART_Receive+0xe4>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	223f      	movs	r2, #63	; 0x3f
 80074bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074c0:	e003      	b.n	80074ca <HAL_UART_Receive+0xe4>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074da:	d108      	bne.n	80074ee <HAL_UART_Receive+0x108>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	61bb      	str	r3, [r7, #24]
 80074ec:	e003      	b.n	80074f6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80074fe:	e033      	b.n	8007568 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2200      	movs	r2, #0
 8007508:	2120      	movs	r1, #32
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fee3 	bl	80082d6 <UART_WaitOnFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e032      	b.n	8007580 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10c      	bne.n	800753a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007526:	b29a      	uxth	r2, r3
 8007528:	8a7b      	ldrh	r3, [r7, #18]
 800752a:	4013      	ands	r3, r2
 800752c:	b29a      	uxth	r2, r3
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	3302      	adds	r3, #2
 8007536:	61bb      	str	r3, [r7, #24]
 8007538:	e00d      	b.n	8007556 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007540:	b29b      	uxth	r3, r3
 8007542:	b2da      	uxtb	r2, r3
 8007544:	8a7b      	ldrh	r3, [r7, #18]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	4013      	ands	r3, r2
 800754a:	b2da      	uxtb	r2, r3
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	3301      	adds	r3, #1
 8007554:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1c5      	bne.n	8007500 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2220      	movs	r2, #32
 8007578:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	e000      	b.n	8007580 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800757e:	2302      	movs	r3, #2
  }
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	; 0x28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800759a:	2b20      	cmp	r3, #32
 800759c:	d142      	bne.n	8007624 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <HAL_UART_Receive_DMA+0x22>
 80075a4:	88fb      	ldrh	r3, [r7, #6]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e03b      	b.n	8007626 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_UART_Receive_DMA+0x34>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e034      	b.n	8007626 <HAL_UART_Receive_DMA+0x9e>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a18      	ldr	r2, [pc, #96]	; (8007630 <HAL_UART_Receive_DMA+0xa8>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d01f      	beq.n	8007614 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d018      	beq.n	8007614 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	613b      	str	r3, [r7, #16]
   return(result);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	623b      	str	r3, [r7, #32]
 8007602:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	69f9      	ldr	r1, [r7, #28]
 8007606:	6a3a      	ldr	r2, [r7, #32]
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	61bb      	str	r3, [r7, #24]
   return(result);
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e6      	bne.n	80075e2 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007614:	88fb      	ldrh	r3, [r7, #6]
 8007616:	461a      	mov	r2, r3
 8007618:	68b9      	ldr	r1, [r7, #8]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 ff20 	bl	8008460 <UART_Start_Receive_DMA>
 8007620:	4603      	mov	r3, r0
 8007622:	e000      	b.n	8007626 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007624:	2302      	movs	r3, #2
  }
}
 8007626:	4618      	mov	r0, r3
 8007628:	3728      	adds	r7, #40	; 0x28
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40008000 	.word	0x40008000

08007634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b0ba      	sub	sp, #232	; 0xe8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800765a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800765e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007662:	4013      	ands	r3, r2
 8007664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800766c:	2b00      	cmp	r3, #0
 800766e:	d115      	bne.n	800769c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00f      	beq.n	800769c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800767c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d009      	beq.n	800769c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 82a6 	beq.w	8007bde <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
      }
      return;
 800769a:	e2a0      	b.n	8007bde <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800769c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 8117 	beq.w	80078d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076b6:	4b85      	ldr	r3, [pc, #532]	; (80078cc <HAL_UART_IRQHandler+0x298>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 810a 	beq.w	80078d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d011      	beq.n	80076f0 <HAL_UART_IRQHandler+0xbc>
 80076cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2201      	movs	r2, #1
 80076de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076e6:	f043 0201 	orr.w	r2, r3, #1
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d011      	beq.n	8007720 <HAL_UART_IRQHandler+0xec>
 80076fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2202      	movs	r2, #2
 800770e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007716:	f043 0204 	orr.w	r2, r3, #4
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d011      	beq.n	8007750 <HAL_UART_IRQHandler+0x11c>
 800772c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2204      	movs	r2, #4
 800773e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007746:	f043 0202 	orr.w	r2, r3, #2
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d017      	beq.n	800778c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800775c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2208      	movs	r2, #8
 800777a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007782:	f043 0208 	orr.w	r2, r3, #8
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800778c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007794:	2b00      	cmp	r3, #0
 8007796:	d012      	beq.n	80077be <HAL_UART_IRQHandler+0x18a>
 8007798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00c      	beq.n	80077be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077b4:	f043 0220 	orr.w	r2, r3, #32
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 820c 	beq.w	8007be2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80077ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00d      	beq.n	80077f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d007      	beq.n	80077f2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007806:	2b40      	cmp	r3, #64	; 0x40
 8007808:	d005      	beq.n	8007816 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800780a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800780e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007812:	2b00      	cmp	r3, #0
 8007814:	d04f      	beq.n	80078b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 feee 	bl	80085f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007826:	2b40      	cmp	r3, #64	; 0x40
 8007828:	d141      	bne.n	80078ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3308      	adds	r3, #8
 8007852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007856:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800785a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800786e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1d9      	bne.n	800782a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	2b00      	cmp	r3, #0
 800787c:	d013      	beq.n	80078a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007882:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <HAL_UART_IRQHandler+0x29c>)
 8007884:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788a:	4618      	mov	r0, r3
 800788c:	f7fc fdd6 	bl	800443c <HAL_DMA_Abort_IT>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d017      	beq.n	80078c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80078a0:	4610      	mov	r0, r2
 80078a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a4:	e00f      	b.n	80078c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f9ba 	bl	8007c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	e00b      	b.n	80078c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9b6 	bl	8007c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	e007      	b.n	80078c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9b2 	bl	8007c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80078c4:	e18d      	b.n	8007be2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c6:	bf00      	nop
    return;
 80078c8:	e18b      	b.n	8007be2 <HAL_UART_IRQHandler+0x5ae>
 80078ca:	bf00      	nop
 80078cc:	04000120 	.word	0x04000120
 80078d0:	08008897 	.word	0x08008897

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d8:	2b01      	cmp	r3, #1
 80078da:	f040 8146 	bne.w	8007b6a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 813f 	beq.w	8007b6a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8138 	beq.w	8007b6a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2210      	movs	r2, #16
 8007900:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	f040 80b4 	bne.w	8007a7a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800791e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 815f 	beq.w	8007be6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800792e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007932:	429a      	cmp	r2, r3
 8007934:	f080 8157 	bcs.w	8007be6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800793e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	f040 8085 	bne.w	8007a5e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800796c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007970:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800797e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007982:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800798a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1da      	bne.n	8007954 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3308      	adds	r3, #8
 80079a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079b0:	f023 0301 	bic.w	r3, r3, #1
 80079b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e1      	bne.n	800799e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3308      	adds	r3, #8
 80079e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3308      	adds	r3, #8
 80079fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e3      	bne.n	80079da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a2e:	f023 0310 	bic.w	r3, r3, #16
 8007a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a40:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e4      	bne.n	8007a1e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fc fcb1 	bl	80043c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f8de 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a78:	e0b5      	b.n	8007be6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 80a7 	beq.w	8007bea <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80a2 	beq.w	8007bea <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	e853 3f00 	ldrex	r3, [r3]
 8007ab2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8007aca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e4      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	623b      	str	r3, [r7, #32]
   return(result);
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	f023 0301 	bic.w	r3, r3, #1
 8007af2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b00:	633a      	str	r2, [r7, #48]	; 0x30
 8007b02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e3      	bne.n	8007adc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0310 	bic.w	r3, r3, #16
 8007b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b48:	61fb      	str	r3, [r7, #28]
 8007b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	69b9      	ldr	r1, [r7, #24]
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	617b      	str	r3, [r7, #20]
   return(result);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e4      	bne.n	8007b26 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f866 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b68:	e03f      	b.n	8007bea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00e      	beq.n	8007b94 <HAL_UART_IRQHandler+0x560>
 8007b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d008      	beq.n	8007b94 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fec2 	bl	8008916 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b92:	e02d      	b.n	8007bf0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00e      	beq.n	8007bbe <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01c      	beq.n	8007bee <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
    }
    return;
 8007bbc:	e017      	b.n	8007bee <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d012      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x5bc>
 8007bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00c      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fe73 	bl	80088c2 <UART_EndTransmit_IT>
    return;
 8007bdc:	e008      	b.n	8007bf0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007bde:	bf00      	nop
 8007be0:	e006      	b.n	8007bf0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007be2:	bf00      	nop
 8007be4:	e004      	b.n	8007bf0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007be6:	bf00      	nop
 8007be8:	e002      	b.n	8007bf0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007bea:	bf00      	nop
 8007bec:	e000      	b.n	8007bf0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007bee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007bf0:	37e8      	adds	r7, #232	; 0xe8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop

08007bf8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c50:	b08a      	sub	sp, #40	; 0x28
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	431a      	orrs	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b9e      	ldr	r3, [pc, #632]	; (8007ef4 <UART_SetConfig+0x2a8>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c84:	430b      	orrs	r3, r1
 8007c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a93      	ldr	r2, [pc, #588]	; (8007ef8 <UART_SetConfig+0x2ac>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a8a      	ldr	r2, [pc, #552]	; (8007efc <UART_SetConfig+0x2b0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d126      	bne.n	8007d24 <UART_SetConfig+0xd8>
 8007cd6:	4b8a      	ldr	r3, [pc, #552]	; (8007f00 <UART_SetConfig+0x2b4>)
 8007cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d81b      	bhi.n	8007d1c <UART_SetConfig+0xd0>
 8007ce4:	a201      	add	r2, pc, #4	; (adr r2, 8007cec <UART_SetConfig+0xa0>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007cfd 	.word	0x08007cfd
 8007cf0:	08007d0d 	.word	0x08007d0d
 8007cf4:	08007d05 	.word	0x08007d05
 8007cf8:	08007d15 	.word	0x08007d15
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d02:	e0ab      	b.n	8007e5c <UART_SetConfig+0x210>
 8007d04:	2302      	movs	r3, #2
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0a:	e0a7      	b.n	8007e5c <UART_SetConfig+0x210>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d12:	e0a3      	b.n	8007e5c <UART_SetConfig+0x210>
 8007d14:	2308      	movs	r3, #8
 8007d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d1a:	e09f      	b.n	8007e5c <UART_SetConfig+0x210>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d22:	e09b      	b.n	8007e5c <UART_SetConfig+0x210>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a76      	ldr	r2, [pc, #472]	; (8007f04 <UART_SetConfig+0x2b8>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d138      	bne.n	8007da0 <UART_SetConfig+0x154>
 8007d2e:	4b74      	ldr	r3, [pc, #464]	; (8007f00 <UART_SetConfig+0x2b4>)
 8007d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d34:	f003 030c 	and.w	r3, r3, #12
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d82d      	bhi.n	8007d98 <UART_SetConfig+0x14c>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <UART_SetConfig+0xf8>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d79 	.word	0x08007d79
 8007d48:	08007d99 	.word	0x08007d99
 8007d4c:	08007d99 	.word	0x08007d99
 8007d50:	08007d99 	.word	0x08007d99
 8007d54:	08007d89 	.word	0x08007d89
 8007d58:	08007d99 	.word	0x08007d99
 8007d5c:	08007d99 	.word	0x08007d99
 8007d60:	08007d99 	.word	0x08007d99
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	08007d99 	.word	0x08007d99
 8007d74:	08007d91 	.word	0x08007d91
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d7e:	e06d      	b.n	8007e5c <UART_SetConfig+0x210>
 8007d80:	2302      	movs	r3, #2
 8007d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d86:	e069      	b.n	8007e5c <UART_SetConfig+0x210>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d8e:	e065      	b.n	8007e5c <UART_SetConfig+0x210>
 8007d90:	2308      	movs	r3, #8
 8007d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d96:	e061      	b.n	8007e5c <UART_SetConfig+0x210>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d9e:	e05d      	b.n	8007e5c <UART_SetConfig+0x210>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a58      	ldr	r2, [pc, #352]	; (8007f08 <UART_SetConfig+0x2bc>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d125      	bne.n	8007df6 <UART_SetConfig+0x1aa>
 8007daa:	4b55      	ldr	r3, [pc, #340]	; (8007f00 <UART_SetConfig+0x2b4>)
 8007dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007db4:	2b30      	cmp	r3, #48	; 0x30
 8007db6:	d016      	beq.n	8007de6 <UART_SetConfig+0x19a>
 8007db8:	2b30      	cmp	r3, #48	; 0x30
 8007dba:	d818      	bhi.n	8007dee <UART_SetConfig+0x1a2>
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	d00a      	beq.n	8007dd6 <UART_SetConfig+0x18a>
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d814      	bhi.n	8007dee <UART_SetConfig+0x1a2>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <UART_SetConfig+0x182>
 8007dc8:	2b10      	cmp	r3, #16
 8007dca:	d008      	beq.n	8007dde <UART_SetConfig+0x192>
 8007dcc:	e00f      	b.n	8007dee <UART_SetConfig+0x1a2>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd4:	e042      	b.n	8007e5c <UART_SetConfig+0x210>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ddc:	e03e      	b.n	8007e5c <UART_SetConfig+0x210>
 8007dde:	2304      	movs	r3, #4
 8007de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007de4:	e03a      	b.n	8007e5c <UART_SetConfig+0x210>
 8007de6:	2308      	movs	r3, #8
 8007de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dec:	e036      	b.n	8007e5c <UART_SetConfig+0x210>
 8007dee:	2310      	movs	r3, #16
 8007df0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007df4:	e032      	b.n	8007e5c <UART_SetConfig+0x210>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a3f      	ldr	r2, [pc, #252]	; (8007ef8 <UART_SetConfig+0x2ac>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d12a      	bne.n	8007e56 <UART_SetConfig+0x20a>
 8007e00:	4b3f      	ldr	r3, [pc, #252]	; (8007f00 <UART_SetConfig+0x2b4>)
 8007e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e0e:	d01a      	beq.n	8007e46 <UART_SetConfig+0x1fa>
 8007e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e14:	d81b      	bhi.n	8007e4e <UART_SetConfig+0x202>
 8007e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1a:	d00c      	beq.n	8007e36 <UART_SetConfig+0x1ea>
 8007e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e20:	d815      	bhi.n	8007e4e <UART_SetConfig+0x202>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <UART_SetConfig+0x1e2>
 8007e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2a:	d008      	beq.n	8007e3e <UART_SetConfig+0x1f2>
 8007e2c:	e00f      	b.n	8007e4e <UART_SetConfig+0x202>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e34:	e012      	b.n	8007e5c <UART_SetConfig+0x210>
 8007e36:	2302      	movs	r3, #2
 8007e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e3c:	e00e      	b.n	8007e5c <UART_SetConfig+0x210>
 8007e3e:	2304      	movs	r3, #4
 8007e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e44:	e00a      	b.n	8007e5c <UART_SetConfig+0x210>
 8007e46:	2308      	movs	r3, #8
 8007e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e4c:	e006      	b.n	8007e5c <UART_SetConfig+0x210>
 8007e4e:	2310      	movs	r3, #16
 8007e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e54:	e002      	b.n	8007e5c <UART_SetConfig+0x210>
 8007e56:	2310      	movs	r3, #16
 8007e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a25      	ldr	r2, [pc, #148]	; (8007ef8 <UART_SetConfig+0x2ac>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	f040 808a 	bne.w	8007f7c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d824      	bhi.n	8007eba <UART_SetConfig+0x26e>
 8007e70:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <UART_SetConfig+0x22c>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007e9d 	.word	0x08007e9d
 8007e7c:	08007ebb 	.word	0x08007ebb
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ebb 	.word	0x08007ebb
 8007e88:	08007eab 	.word	0x08007eab
 8007e8c:	08007ebb 	.word	0x08007ebb
 8007e90:	08007ebb 	.word	0x08007ebb
 8007e94:	08007ebb 	.word	0x08007ebb
 8007e98:	08007eb3 	.word	0x08007eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9c:	f7fe f984 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8007ea0:	61f8      	str	r0, [r7, #28]
        break;
 8007ea2:	e010      	b.n	8007ec6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea4:	4b19      	ldr	r3, [pc, #100]	; (8007f0c <UART_SetConfig+0x2c0>)
 8007ea6:	61fb      	str	r3, [r7, #28]
        break;
 8007ea8:	e00d      	b.n	8007ec6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eaa:	f7fe f8e7 	bl	800607c <HAL_RCC_GetSysClockFreq>
 8007eae:	61f8      	str	r0, [r7, #28]
        break;
 8007eb0:	e009      	b.n	8007ec6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb6:	61fb      	str	r3, [r7, #28]
        break;
 8007eb8:	e005      	b.n	8007ec6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ec4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 8109 	beq.w	80080e0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d305      	bcc.n	8007eea <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d912      	bls.n	8007f10 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ef0:	e0f6      	b.n	80080e0 <UART_SetConfig+0x494>
 8007ef2:	bf00      	nop
 8007ef4:	efff69f3 	.word	0xefff69f3
 8007ef8:	40008000 	.word	0x40008000
 8007efc:	40013800 	.word	0x40013800
 8007f00:	40021000 	.word	0x40021000
 8007f04:	40004400 	.word	0x40004400
 8007f08:	40004800 	.word	0x40004800
 8007f0c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2200      	movs	r2, #0
 8007f14:	461c      	mov	r4, r3
 8007f16:	4615      	mov	r5, r2
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	022b      	lsls	r3, r5, #8
 8007f22:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007f26:	0222      	lsls	r2, r4, #8
 8007f28:	68f9      	ldr	r1, [r7, #12]
 8007f2a:	6849      	ldr	r1, [r1, #4]
 8007f2c:	0849      	lsrs	r1, r1, #1
 8007f2e:	2000      	movs	r0, #0
 8007f30:	4688      	mov	r8, r1
 8007f32:	4681      	mov	r9, r0
 8007f34:	eb12 0a08 	adds.w	sl, r2, r8
 8007f38:	eb43 0b09 	adc.w	fp, r3, r9
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	603b      	str	r3, [r7, #0]
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	4659      	mov	r1, fp
 8007f4e:	f7f8 fe7b 	bl	8000c48 <__aeabi_uldivmod>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4613      	mov	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f60:	d308      	bcc.n	8007f74 <UART_SetConfig+0x328>
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f68:	d204      	bcs.n	8007f74 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	e0b5      	b.n	80080e0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f7a:	e0b1      	b.n	80080e0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f84:	d15d      	bne.n	8008042 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f8a:	2b08      	cmp	r3, #8
 8007f8c:	d827      	bhi.n	8007fde <UART_SetConfig+0x392>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <UART_SetConfig+0x348>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fb9 	.word	0x08007fb9
 8007f98:	08007fc1 	.word	0x08007fc1
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	08007fdf 	.word	0x08007fdf
 8007fa4:	08007fcf 	.word	0x08007fcf
 8007fa8:	08007fdf 	.word	0x08007fdf
 8007fac:	08007fdf 	.word	0x08007fdf
 8007fb0:	08007fdf 	.word	0x08007fdf
 8007fb4:	08007fd7 	.word	0x08007fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fb8:	f7fe f8f6 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8007fbc:	61f8      	str	r0, [r7, #28]
        break;
 8007fbe:	e014      	b.n	8007fea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fc0:	f7fe f908 	bl	80061d4 <HAL_RCC_GetPCLK2Freq>
 8007fc4:	61f8      	str	r0, [r7, #28]
        break;
 8007fc6:	e010      	b.n	8007fea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fc8:	4b4c      	ldr	r3, [pc, #304]	; (80080fc <UART_SetConfig+0x4b0>)
 8007fca:	61fb      	str	r3, [r7, #28]
        break;
 8007fcc:	e00d      	b.n	8007fea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fce:	f7fe f855 	bl	800607c <HAL_RCC_GetSysClockFreq>
 8007fd2:	61f8      	str	r0, [r7, #28]
        break;
 8007fd4:	e009      	b.n	8007fea <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fda:	61fb      	str	r3, [r7, #28]
        break;
 8007fdc:	e005      	b.n	8007fea <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d077      	beq.n	80080e0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	005a      	lsls	r2, r3, #1
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	085b      	lsrs	r3, r3, #1
 8007ffa:	441a      	add	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	fbb2 f3f3 	udiv	r3, r2, r3
 8008004:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	2b0f      	cmp	r3, #15
 800800a:	d916      	bls.n	800803a <UART_SetConfig+0x3ee>
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008012:	d212      	bcs.n	800803a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	b29b      	uxth	r3, r3
 8008018:	f023 030f 	bic.w	r3, r3, #15
 800801c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	085b      	lsrs	r3, r3, #1
 8008022:	b29b      	uxth	r3, r3
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	b29a      	uxth	r2, r3
 800802a:	8afb      	ldrh	r3, [r7, #22]
 800802c:	4313      	orrs	r3, r2
 800802e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	8afa      	ldrh	r2, [r7, #22]
 8008036:	60da      	str	r2, [r3, #12]
 8008038:	e052      	b.n	80080e0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008040:	e04e      	b.n	80080e0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008046:	2b08      	cmp	r3, #8
 8008048:	d827      	bhi.n	800809a <UART_SetConfig+0x44e>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0x404>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008075 	.word	0x08008075
 8008054:	0800807d 	.word	0x0800807d
 8008058:	08008085 	.word	0x08008085
 800805c:	0800809b 	.word	0x0800809b
 8008060:	0800808b 	.word	0x0800808b
 8008064:	0800809b 	.word	0x0800809b
 8008068:	0800809b 	.word	0x0800809b
 800806c:	0800809b 	.word	0x0800809b
 8008070:	08008093 	.word	0x08008093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008074:	f7fe f898 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 8008078:	61f8      	str	r0, [r7, #28]
        break;
 800807a:	e014      	b.n	80080a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800807c:	f7fe f8aa 	bl	80061d4 <HAL_RCC_GetPCLK2Freq>
 8008080:	61f8      	str	r0, [r7, #28]
        break;
 8008082:	e010      	b.n	80080a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008084:	4b1d      	ldr	r3, [pc, #116]	; (80080fc <UART_SetConfig+0x4b0>)
 8008086:	61fb      	str	r3, [r7, #28]
        break;
 8008088:	e00d      	b.n	80080a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800808a:	f7fd fff7 	bl	800607c <HAL_RCC_GetSysClockFreq>
 800808e:	61f8      	str	r0, [r7, #28]
        break;
 8008090:	e009      	b.n	80080a6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008096:	61fb      	str	r3, [r7, #28]
        break;
 8008098:	e005      	b.n	80080a6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80080a4:	bf00      	nop
    }

    if (pclk != 0U)
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d019      	beq.n	80080e0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	085a      	lsrs	r2, r3, #1
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	441a      	add	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80080be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	2b0f      	cmp	r3, #15
 80080c4:	d909      	bls.n	80080da <UART_SetConfig+0x48e>
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080cc:	d205      	bcs.n	80080da <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60da      	str	r2, [r3, #12]
 80080d8:	e002      	b.n	80080e0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80080ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3728      	adds	r7, #40	; 0x28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080fa:	bf00      	nop
 80080fc:	00f42400 	.word	0x00f42400

08008100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00a      	beq.n	800812a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	f003 0308 	and.w	r3, r3, #8
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01a      	beq.n	8008216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081fe:	d10a      	bne.n	8008216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	430a      	orrs	r2, r1
 8008214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	430a      	orrs	r2, r1
 8008236:	605a      	str	r2, [r3, #4]
  }
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af02      	add	r7, sp, #8
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008254:	f7fa ff60 	bl	8003118 <HAL_GetTick>
 8008258:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0308 	and.w	r3, r3, #8
 8008264:	2b08      	cmp	r3, #8
 8008266:	d10e      	bne.n	8008286 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f82d 	bl	80082d6 <UART_WaitOnFlagUntilTimeout>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e023      	b.n	80082ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b04      	cmp	r3, #4
 8008292:	d10e      	bne.n	80082b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f817 	bl	80082d6 <UART_WaitOnFlagUntilTimeout>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e00d      	b.n	80082ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b09c      	sub	sp, #112	; 0x70
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	603b      	str	r3, [r7, #0]
 80082e2:	4613      	mov	r3, r2
 80082e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e6:	e0a5      	b.n	8008434 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ee:	f000 80a1 	beq.w	8008434 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f2:	f7fa ff11 	bl	8003118 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082fe:	429a      	cmp	r2, r3
 8008300:	d302      	bcc.n	8008308 <UART_WaitOnFlagUntilTimeout+0x32>
 8008302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008304:	2b00      	cmp	r3, #0
 8008306:	d13e      	bne.n	8008386 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008318:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800831c:	667b      	str	r3, [r7, #100]	; 0x64
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008328:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800832c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e6      	bne.n	8008308 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	663b      	str	r3, [r7, #96]	; 0x60
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800835a:	64ba      	str	r2, [r7, #72]	; 0x48
 800835c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e5      	bne.n	800833a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2220      	movs	r2, #32
 8008378:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e067      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d04f      	beq.n	8008434 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083a2:	d147      	bne.n	8008434 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
 80083ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e6      	bne.n	80083ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3308      	adds	r3, #8
 80083e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	613b      	str	r3, [r7, #16]
   return(result);
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f023 0301 	bic.w	r3, r3, #1
 80083f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3308      	adds	r3, #8
 80083fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008400:	623a      	str	r2, [r7, #32]
 8008402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	69f9      	ldr	r1, [r7, #28]
 8008406:	6a3a      	ldr	r2, [r7, #32]
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	61bb      	str	r3, [r7, #24]
   return(result);
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e5      	bne.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2220      	movs	r2, #32
 8008424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e010      	b.n	8008456 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69da      	ldr	r2, [r3, #28]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	4013      	ands	r3, r2
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	429a      	cmp	r2, r3
 8008442:	bf0c      	ite	eq
 8008444:	2301      	moveq	r3, #1
 8008446:	2300      	movne	r3, #0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	461a      	mov	r2, r3
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	429a      	cmp	r2, r3
 8008450:	f43f af4a 	beq.w	80082e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3770      	adds	r7, #112	; 0x70
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b096      	sub	sp, #88	; 0x58
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	88fa      	ldrh	r2, [r7, #6]
 8008478:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2222      	movs	r2, #34	; 0x22
 8008488:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848e:	2b00      	cmp	r3, #0
 8008490:	d02b      	beq.n	80084ea <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008496:	4a42      	ldr	r2, [pc, #264]	; (80085a0 <UART_Start_Receive_DMA+0x140>)
 8008498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849e:	4a41      	ldr	r2, [pc, #260]	; (80085a4 <UART_Start_Receive_DMA+0x144>)
 80084a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a6:	4a40      	ldr	r2, [pc, #256]	; (80085a8 <UART_Start_Receive_DMA+0x148>)
 80084a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ae:	2200      	movs	r2, #0
 80084b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3324      	adds	r3, #36	; 0x24
 80084bc:	4619      	mov	r1, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c2:	461a      	mov	r2, r3
 80084c4:	88fb      	ldrh	r3, [r7, #6]
 80084c6:	f7fb ff1b 	bl	8004300 <HAL_DMA_Start_IT>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00c      	beq.n	80084ea <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2210      	movs	r2, #16
 80084d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e055      	b.n	8008596 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d018      	beq.n	800852c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008502:	e853 3f00 	ldrex	r3, [r3]
 8008506:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800850e:	657b      	str	r3, [r7, #84]	; 0x54
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008518:	64bb      	str	r3, [r7, #72]	; 0x48
 800851a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800851e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e6      	bne.n	80084fa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3308      	adds	r3, #8
 8008532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	f043 0301 	orr.w	r3, r3, #1
 8008542:	653b      	str	r3, [r7, #80]	; 0x50
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800854c:	637a      	str	r2, [r7, #52]	; 0x34
 800854e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e5      	bne.n	800852c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3308      	adds	r3, #8
 8008566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	e853 3f00 	ldrex	r3, [r3]
 800856e:	613b      	str	r3, [r7, #16]
   return(result);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3308      	adds	r3, #8
 800857e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008580:	623a      	str	r2, [r7, #32]
 8008582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	69f9      	ldr	r1, [r7, #28]
 8008586:	6a3a      	ldr	r2, [r7, #32]
 8008588:	e841 2300 	strex	r3, r2, [r1]
 800858c:	61bb      	str	r3, [r7, #24]
   return(result);
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1e5      	bne.n	8008560 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3758      	adds	r7, #88	; 0x58
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	080086bf 	.word	0x080086bf
 80085a4:	080087e3 	.word	0x080087e3
 80085a8:	0800881b 	.word	0x0800881b

080085ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b089      	sub	sp, #36	; 0x24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	61bb      	str	r3, [r7, #24]
 80085d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6979      	ldr	r1, [r7, #20]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	613b      	str	r3, [r7, #16]
   return(result);
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e6      	bne.n	80085b4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	679a      	str	r2, [r3, #120]	; 0x78
}
 80085ec:	bf00      	nop
 80085ee:	3724      	adds	r7, #36	; 0x24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b095      	sub	sp, #84	; 0x54
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861e:	643b      	str	r3, [r7, #64]	; 0x40
 8008620:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e6      	bne.n	8008600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	61fb      	str	r3, [r7, #28]
   return(result);
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	64bb      	str	r3, [r7, #72]	; 0x48
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3308      	adds	r3, #8
 8008650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800865a:	e841 2300 	strex	r3, r2, [r1]
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e5      	bne.n	8008632 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866a:	2b01      	cmp	r3, #1
 800866c:	d118      	bne.n	80086a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	60bb      	str	r3, [r7, #8]
   return(result);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f023 0310 	bic.w	r3, r3, #16
 8008682:	647b      	str	r3, [r7, #68]	; 0x44
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800868c:	61bb      	str	r3, [r7, #24]
 800868e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6979      	ldr	r1, [r7, #20]
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	613b      	str	r3, [r7, #16]
   return(result);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e6      	bne.n	800866e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80086b2:	bf00      	nop
 80086b4:	3754      	adds	r7, #84	; 0x54
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b09c      	sub	sp, #112	; 0x70
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d170      	bne.n	80087bc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80086da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086dc:	2200      	movs	r2, #0
 80086de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80086f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008700:	65bb      	str	r3, [r7, #88]	; 0x58
 8008702:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008706:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800870e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e6      	bne.n	80086e2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	f023 0301 	bic.w	r3, r3, #1
 800872a:	667b      	str	r3, [r7, #100]	; 0x64
 800872c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3308      	adds	r3, #8
 8008732:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008734:	647a      	str	r2, [r7, #68]	; 0x44
 8008736:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800873a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e5      	bne.n	8008714 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3308      	adds	r3, #8
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	623b      	str	r3, [r7, #32]
   return(result);
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800875e:	663b      	str	r3, [r7, #96]	; 0x60
 8008760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3308      	adds	r3, #8
 8008766:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008768:	633a      	str	r2, [r7, #48]	; 0x30
 800876a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800876e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e5      	bne.n	8008748 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800877c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877e:	2220      	movs	r2, #32
 8008780:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008786:	2b01      	cmp	r3, #1
 8008788:	d118      	bne.n	80087bc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	60fb      	str	r3, [r7, #12]
   return(result);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f023 0310 	bic.w	r3, r3, #16
 800879e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a8:	61fb      	str	r3, [r7, #28]
 80087aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	69b9      	ldr	r1, [r7, #24]
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	617b      	str	r3, [r7, #20]
   return(result);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e6      	bne.n	800878a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d107      	bne.n	80087d4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087ca:	4619      	mov	r1, r3
 80087cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087ce:	f7ff fa31 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087d2:	e002      	b.n	80087da <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80087d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087d6:	f7f8 fefd 	bl	80015d4 <HAL_UART_RxCpltCallback>
}
 80087da:	bf00      	nop
 80087dc:	3770      	adds	r7, #112	; 0x70
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d109      	bne.n	800880c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	b29b      	uxth	r3, r3
 8008802:	4619      	mov	r1, r3
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff fa15 	bl	8007c34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800880a:	e002      	b.n	8008812 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f7ff f9fd 	bl	8007c0c <HAL_UART_RxHalfCpltCallback>
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800882c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008832:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883e:	2b80      	cmp	r3, #128	; 0x80
 8008840:	d109      	bne.n	8008856 <UART_DMAError+0x3c>
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	2b21      	cmp	r3, #33	; 0x21
 8008846:	d106      	bne.n	8008856 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2200      	movs	r2, #0
 800884c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008850:	6978      	ldr	r0, [r7, #20]
 8008852:	f7ff feab 	bl	80085ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008860:	2b40      	cmp	r3, #64	; 0x40
 8008862:	d109      	bne.n	8008878 <UART_DMAError+0x5e>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b22      	cmp	r3, #34	; 0x22
 8008868:	d106      	bne.n	8008878 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2200      	movs	r2, #0
 800886e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008872:	6978      	ldr	r0, [r7, #20]
 8008874:	f7ff fec0 	bl	80085f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800887e:	f043 0210 	orr.w	r2, r3, #16
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008888:	6978      	ldr	r0, [r7, #20]
 800888a:	f7ff f9c9 	bl	8007c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800888e:	bf00      	nop
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7ff f9b3 	bl	8007c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ba:	bf00      	nop
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b088      	sub	sp, #32
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088de:	61fb      	str	r3, [r7, #28]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6979      	ldr	r1, [r7, #20]
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	e841 2300 	strex	r3, r2, [r1]
 80088f4:	613b      	str	r3, [r7, #16]
   return(result);
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e6      	bne.n	80088ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7ff f975 	bl	8007bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800890e:	bf00      	nop
 8008910:	3720      	adds	r7, #32
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800891e:	bf00      	nop
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
	...

0800892c <__errno>:
 800892c:	4b01      	ldr	r3, [pc, #4]	; (8008934 <__errno+0x8>)
 800892e:	6818      	ldr	r0, [r3, #0]
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20000188 	.word	0x20000188

08008938 <__libc_init_array>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	4d0d      	ldr	r5, [pc, #52]	; (8008970 <__libc_init_array+0x38>)
 800893c:	4c0d      	ldr	r4, [pc, #52]	; (8008974 <__libc_init_array+0x3c>)
 800893e:	1b64      	subs	r4, r4, r5
 8008940:	10a4      	asrs	r4, r4, #2
 8008942:	2600      	movs	r6, #0
 8008944:	42a6      	cmp	r6, r4
 8008946:	d109      	bne.n	800895c <__libc_init_array+0x24>
 8008948:	4d0b      	ldr	r5, [pc, #44]	; (8008978 <__libc_init_array+0x40>)
 800894a:	4c0c      	ldr	r4, [pc, #48]	; (800897c <__libc_init_array+0x44>)
 800894c:	f002 ff16 	bl	800b77c <_init>
 8008950:	1b64      	subs	r4, r4, r5
 8008952:	10a4      	asrs	r4, r4, #2
 8008954:	2600      	movs	r6, #0
 8008956:	42a6      	cmp	r6, r4
 8008958:	d105      	bne.n	8008966 <__libc_init_array+0x2e>
 800895a:	bd70      	pop	{r4, r5, r6, pc}
 800895c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008960:	4798      	blx	r3
 8008962:	3601      	adds	r6, #1
 8008964:	e7ee      	b.n	8008944 <__libc_init_array+0xc>
 8008966:	f855 3b04 	ldr.w	r3, [r5], #4
 800896a:	4798      	blx	r3
 800896c:	3601      	adds	r6, #1
 800896e:	e7f2      	b.n	8008956 <__libc_init_array+0x1e>
 8008970:	0800dd4c 	.word	0x0800dd4c
 8008974:	0800dd4c 	.word	0x0800dd4c
 8008978:	0800dd4c 	.word	0x0800dd4c
 800897c:	0800dd50 	.word	0x0800dd50

08008980 <memcpy>:
 8008980:	440a      	add	r2, r1
 8008982:	4291      	cmp	r1, r2
 8008984:	f100 33ff 	add.w	r3, r0, #4294967295
 8008988:	d100      	bne.n	800898c <memcpy+0xc>
 800898a:	4770      	bx	lr
 800898c:	b510      	push	{r4, lr}
 800898e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008996:	4291      	cmp	r1, r2
 8008998:	d1f9      	bne.n	800898e <memcpy+0xe>
 800899a:	bd10      	pop	{r4, pc}

0800899c <memset>:
 800899c:	4402      	add	r2, r0
 800899e:	4603      	mov	r3, r0
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d100      	bne.n	80089a6 <memset+0xa>
 80089a4:	4770      	bx	lr
 80089a6:	f803 1b01 	strb.w	r1, [r3], #1
 80089aa:	e7f9      	b.n	80089a0 <memset+0x4>

080089ac <__cvt>:
 80089ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089b0:	ec55 4b10 	vmov	r4, r5, d0
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	460e      	mov	r6, r1
 80089b8:	4619      	mov	r1, r3
 80089ba:	462b      	mov	r3, r5
 80089bc:	bfbb      	ittet	lt
 80089be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089c2:	461d      	movlt	r5, r3
 80089c4:	2300      	movge	r3, #0
 80089c6:	232d      	movlt	r3, #45	; 0x2d
 80089c8:	700b      	strb	r3, [r1, #0]
 80089ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089d0:	4691      	mov	r9, r2
 80089d2:	f023 0820 	bic.w	r8, r3, #32
 80089d6:	bfbc      	itt	lt
 80089d8:	4622      	movlt	r2, r4
 80089da:	4614      	movlt	r4, r2
 80089dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089e0:	d005      	beq.n	80089ee <__cvt+0x42>
 80089e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80089e6:	d100      	bne.n	80089ea <__cvt+0x3e>
 80089e8:	3601      	adds	r6, #1
 80089ea:	2102      	movs	r1, #2
 80089ec:	e000      	b.n	80089f0 <__cvt+0x44>
 80089ee:	2103      	movs	r1, #3
 80089f0:	ab03      	add	r3, sp, #12
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	ab02      	add	r3, sp, #8
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	ec45 4b10 	vmov	d0, r4, r5
 80089fc:	4653      	mov	r3, sl
 80089fe:	4632      	mov	r2, r6
 8008a00:	f000 fcfe 	bl	8009400 <_dtoa_r>
 8008a04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a08:	4607      	mov	r7, r0
 8008a0a:	d102      	bne.n	8008a12 <__cvt+0x66>
 8008a0c:	f019 0f01 	tst.w	r9, #1
 8008a10:	d022      	beq.n	8008a58 <__cvt+0xac>
 8008a12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a16:	eb07 0906 	add.w	r9, r7, r6
 8008a1a:	d110      	bne.n	8008a3e <__cvt+0x92>
 8008a1c:	783b      	ldrb	r3, [r7, #0]
 8008a1e:	2b30      	cmp	r3, #48	; 0x30
 8008a20:	d10a      	bne.n	8008a38 <__cvt+0x8c>
 8008a22:	2200      	movs	r2, #0
 8008a24:	2300      	movs	r3, #0
 8008a26:	4620      	mov	r0, r4
 8008a28:	4629      	mov	r1, r5
 8008a2a:	f7f8 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a2e:	b918      	cbnz	r0, 8008a38 <__cvt+0x8c>
 8008a30:	f1c6 0601 	rsb	r6, r6, #1
 8008a34:	f8ca 6000 	str.w	r6, [sl]
 8008a38:	f8da 3000 	ldr.w	r3, [sl]
 8008a3c:	4499      	add	r9, r3
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2300      	movs	r3, #0
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f8 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a4a:	b108      	cbz	r0, 8008a50 <__cvt+0xa4>
 8008a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a50:	2230      	movs	r2, #48	; 0x30
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	454b      	cmp	r3, r9
 8008a56:	d307      	bcc.n	8008a68 <__cvt+0xbc>
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a5c:	1bdb      	subs	r3, r3, r7
 8008a5e:	4638      	mov	r0, r7
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	b004      	add	sp, #16
 8008a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a68:	1c59      	adds	r1, r3, #1
 8008a6a:	9103      	str	r1, [sp, #12]
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	e7f0      	b.n	8008a52 <__cvt+0xa6>

08008a70 <__exponent>:
 8008a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a72:	4603      	mov	r3, r0
 8008a74:	2900      	cmp	r1, #0
 8008a76:	bfb8      	it	lt
 8008a78:	4249      	neglt	r1, r1
 8008a7a:	f803 2b02 	strb.w	r2, [r3], #2
 8008a7e:	bfb4      	ite	lt
 8008a80:	222d      	movlt	r2, #45	; 0x2d
 8008a82:	222b      	movge	r2, #43	; 0x2b
 8008a84:	2909      	cmp	r1, #9
 8008a86:	7042      	strb	r2, [r0, #1]
 8008a88:	dd2a      	ble.n	8008ae0 <__exponent+0x70>
 8008a8a:	f10d 0407 	add.w	r4, sp, #7
 8008a8e:	46a4      	mov	ip, r4
 8008a90:	270a      	movs	r7, #10
 8008a92:	46a6      	mov	lr, r4
 8008a94:	460a      	mov	r2, r1
 8008a96:	fb91 f6f7 	sdiv	r6, r1, r7
 8008a9a:	fb07 1516 	mls	r5, r7, r6, r1
 8008a9e:	3530      	adds	r5, #48	; 0x30
 8008aa0:	2a63      	cmp	r2, #99	; 0x63
 8008aa2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008aa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008aaa:	4631      	mov	r1, r6
 8008aac:	dcf1      	bgt.n	8008a92 <__exponent+0x22>
 8008aae:	3130      	adds	r1, #48	; 0x30
 8008ab0:	f1ae 0502 	sub.w	r5, lr, #2
 8008ab4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ab8:	1c44      	adds	r4, r0, #1
 8008aba:	4629      	mov	r1, r5
 8008abc:	4561      	cmp	r1, ip
 8008abe:	d30a      	bcc.n	8008ad6 <__exponent+0x66>
 8008ac0:	f10d 0209 	add.w	r2, sp, #9
 8008ac4:	eba2 020e 	sub.w	r2, r2, lr
 8008ac8:	4565      	cmp	r5, ip
 8008aca:	bf88      	it	hi
 8008acc:	2200      	movhi	r2, #0
 8008ace:	4413      	add	r3, r2
 8008ad0:	1a18      	subs	r0, r3, r0
 8008ad2:	b003      	add	sp, #12
 8008ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ada:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ade:	e7ed      	b.n	8008abc <__exponent+0x4c>
 8008ae0:	2330      	movs	r3, #48	; 0x30
 8008ae2:	3130      	adds	r1, #48	; 0x30
 8008ae4:	7083      	strb	r3, [r0, #2]
 8008ae6:	70c1      	strb	r1, [r0, #3]
 8008ae8:	1d03      	adds	r3, r0, #4
 8008aea:	e7f1      	b.n	8008ad0 <__exponent+0x60>

08008aec <_printf_float>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	ed2d 8b02 	vpush	{d8}
 8008af4:	b08d      	sub	sp, #52	; 0x34
 8008af6:	460c      	mov	r4, r1
 8008af8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008afc:	4616      	mov	r6, r2
 8008afe:	461f      	mov	r7, r3
 8008b00:	4605      	mov	r5, r0
 8008b02:	f001 fa6b 	bl	8009fdc <_localeconv_r>
 8008b06:	f8d0 a000 	ldr.w	sl, [r0]
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	f7f7 fb60 	bl	80001d0 <strlen>
 8008b10:	2300      	movs	r3, #0
 8008b12:	930a      	str	r3, [sp, #40]	; 0x28
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	9305      	str	r3, [sp, #20]
 8008b18:	f8d8 3000 	ldr.w	r3, [r8]
 8008b1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b20:	3307      	adds	r3, #7
 8008b22:	f023 0307 	bic.w	r3, r3, #7
 8008b26:	f103 0208 	add.w	r2, r3, #8
 8008b2a:	f8c8 2000 	str.w	r2, [r8]
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b3e:	9307      	str	r3, [sp, #28]
 8008b40:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b44:	ee08 0a10 	vmov	s16, r0
 8008b48:	4b9f      	ldr	r3, [pc, #636]	; (8008dc8 <_printf_float+0x2dc>)
 8008b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b52:	f7f7 ffeb 	bl	8000b2c <__aeabi_dcmpun>
 8008b56:	bb88      	cbnz	r0, 8008bbc <_printf_float+0xd0>
 8008b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b5c:	4b9a      	ldr	r3, [pc, #616]	; (8008dc8 <_printf_float+0x2dc>)
 8008b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b62:	f7f7 ffc5 	bl	8000af0 <__aeabi_dcmple>
 8008b66:	bb48      	cbnz	r0, 8008bbc <_printf_float+0xd0>
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f7 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8008b74:	b110      	cbz	r0, 8008b7c <_printf_float+0x90>
 8008b76:	232d      	movs	r3, #45	; 0x2d
 8008b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b7c:	4b93      	ldr	r3, [pc, #588]	; (8008dcc <_printf_float+0x2e0>)
 8008b7e:	4894      	ldr	r0, [pc, #592]	; (8008dd0 <_printf_float+0x2e4>)
 8008b80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008b84:	bf94      	ite	ls
 8008b86:	4698      	movls	r8, r3
 8008b88:	4680      	movhi	r8, r0
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	6123      	str	r3, [r4, #16]
 8008b8e:	9b05      	ldr	r3, [sp, #20]
 8008b90:	f023 0204 	bic.w	r2, r3, #4
 8008b94:	6022      	str	r2, [r4, #0]
 8008b96:	f04f 0900 	mov.w	r9, #0
 8008b9a:	9700      	str	r7, [sp, #0]
 8008b9c:	4633      	mov	r3, r6
 8008b9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 f9d8 	bl	8008f58 <_printf_common>
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f040 8090 	bne.w	8008cce <_printf_float+0x1e2>
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb2:	b00d      	add	sp, #52	; 0x34
 8008bb4:	ecbd 8b02 	vpop	{d8}
 8008bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbc:	4642      	mov	r2, r8
 8008bbe:	464b      	mov	r3, r9
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	f7f7 ffb2 	bl	8000b2c <__aeabi_dcmpun>
 8008bc8:	b140      	cbz	r0, 8008bdc <_printf_float+0xf0>
 8008bca:	464b      	mov	r3, r9
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	bfbc      	itt	lt
 8008bd0:	232d      	movlt	r3, #45	; 0x2d
 8008bd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bd6:	487f      	ldr	r0, [pc, #508]	; (8008dd4 <_printf_float+0x2e8>)
 8008bd8:	4b7f      	ldr	r3, [pc, #508]	; (8008dd8 <_printf_float+0x2ec>)
 8008bda:	e7d1      	b.n	8008b80 <_printf_float+0x94>
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008be2:	9206      	str	r2, [sp, #24]
 8008be4:	1c5a      	adds	r2, r3, #1
 8008be6:	d13f      	bne.n	8008c68 <_printf_float+0x17c>
 8008be8:	2306      	movs	r3, #6
 8008bea:	6063      	str	r3, [r4, #4]
 8008bec:	9b05      	ldr	r3, [sp, #20]
 8008bee:	6861      	ldr	r1, [r4, #4]
 8008bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9303      	str	r3, [sp, #12]
 8008bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8008bfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008bfe:	ab09      	add	r3, sp, #36	; 0x24
 8008c00:	ec49 8b10 	vmov	d0, r8, r9
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	6022      	str	r2, [r4, #0]
 8008c08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f7ff fecd 	bl	80089ac <__cvt>
 8008c12:	9b06      	ldr	r3, [sp, #24]
 8008c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c16:	2b47      	cmp	r3, #71	; 0x47
 8008c18:	4680      	mov	r8, r0
 8008c1a:	d108      	bne.n	8008c2e <_printf_float+0x142>
 8008c1c:	1cc8      	adds	r0, r1, #3
 8008c1e:	db02      	blt.n	8008c26 <_printf_float+0x13a>
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	4299      	cmp	r1, r3
 8008c24:	dd41      	ble.n	8008caa <_printf_float+0x1be>
 8008c26:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c2a:	fa5f fb8b 	uxtb.w	fp, fp
 8008c2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c32:	d820      	bhi.n	8008c76 <_printf_float+0x18a>
 8008c34:	3901      	subs	r1, #1
 8008c36:	465a      	mov	r2, fp
 8008c38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c3c:	9109      	str	r1, [sp, #36]	; 0x24
 8008c3e:	f7ff ff17 	bl	8008a70 <__exponent>
 8008c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c44:	1813      	adds	r3, r2, r0
 8008c46:	2a01      	cmp	r2, #1
 8008c48:	4681      	mov	r9, r0
 8008c4a:	6123      	str	r3, [r4, #16]
 8008c4c:	dc02      	bgt.n	8008c54 <_printf_float+0x168>
 8008c4e:	6822      	ldr	r2, [r4, #0]
 8008c50:	07d2      	lsls	r2, r2, #31
 8008c52:	d501      	bpl.n	8008c58 <_printf_float+0x16c>
 8008c54:	3301      	adds	r3, #1
 8008c56:	6123      	str	r3, [r4, #16]
 8008c58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d09c      	beq.n	8008b9a <_printf_float+0xae>
 8008c60:	232d      	movs	r3, #45	; 0x2d
 8008c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c66:	e798      	b.n	8008b9a <_printf_float+0xae>
 8008c68:	9a06      	ldr	r2, [sp, #24]
 8008c6a:	2a47      	cmp	r2, #71	; 0x47
 8008c6c:	d1be      	bne.n	8008bec <_printf_float+0x100>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1bc      	bne.n	8008bec <_printf_float+0x100>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e7b9      	b.n	8008bea <_printf_float+0xfe>
 8008c76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c7a:	d118      	bne.n	8008cae <_printf_float+0x1c2>
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	6863      	ldr	r3, [r4, #4]
 8008c80:	dd0b      	ble.n	8008c9a <_printf_float+0x1ae>
 8008c82:	6121      	str	r1, [r4, #16]
 8008c84:	b913      	cbnz	r3, 8008c8c <_printf_float+0x1a0>
 8008c86:	6822      	ldr	r2, [r4, #0]
 8008c88:	07d0      	lsls	r0, r2, #31
 8008c8a:	d502      	bpl.n	8008c92 <_printf_float+0x1a6>
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	440b      	add	r3, r1
 8008c90:	6123      	str	r3, [r4, #16]
 8008c92:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c94:	f04f 0900 	mov.w	r9, #0
 8008c98:	e7de      	b.n	8008c58 <_printf_float+0x16c>
 8008c9a:	b913      	cbnz	r3, 8008ca2 <_printf_float+0x1b6>
 8008c9c:	6822      	ldr	r2, [r4, #0]
 8008c9e:	07d2      	lsls	r2, r2, #31
 8008ca0:	d501      	bpl.n	8008ca6 <_printf_float+0x1ba>
 8008ca2:	3302      	adds	r3, #2
 8008ca4:	e7f4      	b.n	8008c90 <_printf_float+0x1a4>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e7f2      	b.n	8008c90 <_printf_float+0x1a4>
 8008caa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb0:	4299      	cmp	r1, r3
 8008cb2:	db05      	blt.n	8008cc0 <_printf_float+0x1d4>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	6121      	str	r1, [r4, #16]
 8008cb8:	07d8      	lsls	r0, r3, #31
 8008cba:	d5ea      	bpl.n	8008c92 <_printf_float+0x1a6>
 8008cbc:	1c4b      	adds	r3, r1, #1
 8008cbe:	e7e7      	b.n	8008c90 <_printf_float+0x1a4>
 8008cc0:	2900      	cmp	r1, #0
 8008cc2:	bfd4      	ite	le
 8008cc4:	f1c1 0202 	rsble	r2, r1, #2
 8008cc8:	2201      	movgt	r2, #1
 8008cca:	4413      	add	r3, r2
 8008ccc:	e7e0      	b.n	8008c90 <_printf_float+0x1a4>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	055a      	lsls	r2, r3, #21
 8008cd2:	d407      	bmi.n	8008ce4 <_printf_float+0x1f8>
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	4642      	mov	r2, r8
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d12c      	bne.n	8008d3c <_printf_float+0x250>
 8008ce2:	e764      	b.n	8008bae <_printf_float+0xc2>
 8008ce4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ce8:	f240 80e0 	bls.w	8008eac <_printf_float+0x3c0>
 8008cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f7f7 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d034      	beq.n	8008d66 <_printf_float+0x27a>
 8008cfc:	4a37      	ldr	r2, [pc, #220]	; (8008ddc <_printf_float+0x2f0>)
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4631      	mov	r1, r6
 8008d02:	4628      	mov	r0, r5
 8008d04:	47b8      	blx	r7
 8008d06:	3001      	adds	r0, #1
 8008d08:	f43f af51 	beq.w	8008bae <_printf_float+0xc2>
 8008d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d10:	429a      	cmp	r2, r3
 8008d12:	db02      	blt.n	8008d1a <_printf_float+0x22e>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	07d8      	lsls	r0, r3, #31
 8008d18:	d510      	bpl.n	8008d3c <_printf_float+0x250>
 8008d1a:	ee18 3a10 	vmov	r3, s16
 8008d1e:	4652      	mov	r2, sl
 8008d20:	4631      	mov	r1, r6
 8008d22:	4628      	mov	r0, r5
 8008d24:	47b8      	blx	r7
 8008d26:	3001      	adds	r0, #1
 8008d28:	f43f af41 	beq.w	8008bae <_printf_float+0xc2>
 8008d2c:	f04f 0800 	mov.w	r8, #0
 8008d30:	f104 091a 	add.w	r9, r4, #26
 8008d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d36:	3b01      	subs	r3, #1
 8008d38:	4543      	cmp	r3, r8
 8008d3a:	dc09      	bgt.n	8008d50 <_printf_float+0x264>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	079b      	lsls	r3, r3, #30
 8008d40:	f100 8105 	bmi.w	8008f4e <_printf_float+0x462>
 8008d44:	68e0      	ldr	r0, [r4, #12]
 8008d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d48:	4298      	cmp	r0, r3
 8008d4a:	bfb8      	it	lt
 8008d4c:	4618      	movlt	r0, r3
 8008d4e:	e730      	b.n	8008bb2 <_printf_float+0xc6>
 8008d50:	2301      	movs	r3, #1
 8008d52:	464a      	mov	r2, r9
 8008d54:	4631      	mov	r1, r6
 8008d56:	4628      	mov	r0, r5
 8008d58:	47b8      	blx	r7
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	f43f af27 	beq.w	8008bae <_printf_float+0xc2>
 8008d60:	f108 0801 	add.w	r8, r8, #1
 8008d64:	e7e6      	b.n	8008d34 <_printf_float+0x248>
 8008d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dc39      	bgt.n	8008de0 <_printf_float+0x2f4>
 8008d6c:	4a1b      	ldr	r2, [pc, #108]	; (8008ddc <_printf_float+0x2f0>)
 8008d6e:	2301      	movs	r3, #1
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	f43f af19 	beq.w	8008bae <_printf_float+0xc2>
 8008d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d102      	bne.n	8008d8a <_printf_float+0x29e>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	07d9      	lsls	r1, r3, #31
 8008d88:	d5d8      	bpl.n	8008d3c <_printf_float+0x250>
 8008d8a:	ee18 3a10 	vmov	r3, s16
 8008d8e:	4652      	mov	r2, sl
 8008d90:	4631      	mov	r1, r6
 8008d92:	4628      	mov	r0, r5
 8008d94:	47b8      	blx	r7
 8008d96:	3001      	adds	r0, #1
 8008d98:	f43f af09 	beq.w	8008bae <_printf_float+0xc2>
 8008d9c:	f04f 0900 	mov.w	r9, #0
 8008da0:	f104 0a1a 	add.w	sl, r4, #26
 8008da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da6:	425b      	negs	r3, r3
 8008da8:	454b      	cmp	r3, r9
 8008daa:	dc01      	bgt.n	8008db0 <_printf_float+0x2c4>
 8008dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dae:	e792      	b.n	8008cd6 <_printf_float+0x1ea>
 8008db0:	2301      	movs	r3, #1
 8008db2:	4652      	mov	r2, sl
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f aef7 	beq.w	8008bae <_printf_float+0xc2>
 8008dc0:	f109 0901 	add.w	r9, r9, #1
 8008dc4:	e7ee      	b.n	8008da4 <_printf_float+0x2b8>
 8008dc6:	bf00      	nop
 8008dc8:	7fefffff 	.word	0x7fefffff
 8008dcc:	0800d970 	.word	0x0800d970
 8008dd0:	0800d974 	.word	0x0800d974
 8008dd4:	0800d97c 	.word	0x0800d97c
 8008dd8:	0800d978 	.word	0x0800d978
 8008ddc:	0800d980 	.word	0x0800d980
 8008de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008de4:	429a      	cmp	r2, r3
 8008de6:	bfa8      	it	ge
 8008de8:	461a      	movge	r2, r3
 8008dea:	2a00      	cmp	r2, #0
 8008dec:	4691      	mov	r9, r2
 8008dee:	dc37      	bgt.n	8008e60 <_printf_float+0x374>
 8008df0:	f04f 0b00 	mov.w	fp, #0
 8008df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008df8:	f104 021a 	add.w	r2, r4, #26
 8008dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dfe:	9305      	str	r3, [sp, #20]
 8008e00:	eba3 0309 	sub.w	r3, r3, r9
 8008e04:	455b      	cmp	r3, fp
 8008e06:	dc33      	bgt.n	8008e70 <_printf_float+0x384>
 8008e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	db3b      	blt.n	8008e88 <_printf_float+0x39c>
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	07da      	lsls	r2, r3, #31
 8008e14:	d438      	bmi.n	8008e88 <_printf_float+0x39c>
 8008e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e18:	9a05      	ldr	r2, [sp, #20]
 8008e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e1c:	1a9a      	subs	r2, r3, r2
 8008e1e:	eba3 0901 	sub.w	r9, r3, r1
 8008e22:	4591      	cmp	r9, r2
 8008e24:	bfa8      	it	ge
 8008e26:	4691      	movge	r9, r2
 8008e28:	f1b9 0f00 	cmp.w	r9, #0
 8008e2c:	dc35      	bgt.n	8008e9a <_printf_float+0x3ae>
 8008e2e:	f04f 0800 	mov.w	r8, #0
 8008e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e36:	f104 0a1a 	add.w	sl, r4, #26
 8008e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e3e:	1a9b      	subs	r3, r3, r2
 8008e40:	eba3 0309 	sub.w	r3, r3, r9
 8008e44:	4543      	cmp	r3, r8
 8008e46:	f77f af79 	ble.w	8008d3c <_printf_float+0x250>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4652      	mov	r2, sl
 8008e4e:	4631      	mov	r1, r6
 8008e50:	4628      	mov	r0, r5
 8008e52:	47b8      	blx	r7
 8008e54:	3001      	adds	r0, #1
 8008e56:	f43f aeaa 	beq.w	8008bae <_printf_float+0xc2>
 8008e5a:	f108 0801 	add.w	r8, r8, #1
 8008e5e:	e7ec      	b.n	8008e3a <_printf_float+0x34e>
 8008e60:	4613      	mov	r3, r2
 8008e62:	4631      	mov	r1, r6
 8008e64:	4642      	mov	r2, r8
 8008e66:	4628      	mov	r0, r5
 8008e68:	47b8      	blx	r7
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d1c0      	bne.n	8008df0 <_printf_float+0x304>
 8008e6e:	e69e      	b.n	8008bae <_printf_float+0xc2>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	9205      	str	r2, [sp, #20]
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f43f ae97 	beq.w	8008bae <_printf_float+0xc2>
 8008e80:	9a05      	ldr	r2, [sp, #20]
 8008e82:	f10b 0b01 	add.w	fp, fp, #1
 8008e86:	e7b9      	b.n	8008dfc <_printf_float+0x310>
 8008e88:	ee18 3a10 	vmov	r3, s16
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4628      	mov	r0, r5
 8008e92:	47b8      	blx	r7
 8008e94:	3001      	adds	r0, #1
 8008e96:	d1be      	bne.n	8008e16 <_printf_float+0x32a>
 8008e98:	e689      	b.n	8008bae <_printf_float+0xc2>
 8008e9a:	9a05      	ldr	r2, [sp, #20]
 8008e9c:	464b      	mov	r3, r9
 8008e9e:	4442      	add	r2, r8
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b8      	blx	r7
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d1c1      	bne.n	8008e2e <_printf_float+0x342>
 8008eaa:	e680      	b.n	8008bae <_printf_float+0xc2>
 8008eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eae:	2a01      	cmp	r2, #1
 8008eb0:	dc01      	bgt.n	8008eb6 <_printf_float+0x3ca>
 8008eb2:	07db      	lsls	r3, r3, #31
 8008eb4:	d538      	bpl.n	8008f28 <_printf_float+0x43c>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4642      	mov	r2, r8
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	f43f ae74 	beq.w	8008bae <_printf_float+0xc2>
 8008ec6:	ee18 3a10 	vmov	r3, s16
 8008eca:	4652      	mov	r2, sl
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4628      	mov	r0, r5
 8008ed0:	47b8      	blx	r7
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	f43f ae6b 	beq.w	8008bae <_printf_float+0xc2>
 8008ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008edc:	2200      	movs	r2, #0
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f7f7 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ee4:	b9d8      	cbnz	r0, 8008f1e <_printf_float+0x432>
 8008ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee8:	f108 0201 	add.w	r2, r8, #1
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d10e      	bne.n	8008f16 <_printf_float+0x42a>
 8008ef8:	e659      	b.n	8008bae <_printf_float+0xc2>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4652      	mov	r2, sl
 8008efe:	4631      	mov	r1, r6
 8008f00:	4628      	mov	r0, r5
 8008f02:	47b8      	blx	r7
 8008f04:	3001      	adds	r0, #1
 8008f06:	f43f ae52 	beq.w	8008bae <_printf_float+0xc2>
 8008f0a:	f108 0801 	add.w	r8, r8, #1
 8008f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f10:	3b01      	subs	r3, #1
 8008f12:	4543      	cmp	r3, r8
 8008f14:	dcf1      	bgt.n	8008efa <_printf_float+0x40e>
 8008f16:	464b      	mov	r3, r9
 8008f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f1c:	e6dc      	b.n	8008cd8 <_printf_float+0x1ec>
 8008f1e:	f04f 0800 	mov.w	r8, #0
 8008f22:	f104 0a1a 	add.w	sl, r4, #26
 8008f26:	e7f2      	b.n	8008f0e <_printf_float+0x422>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4642      	mov	r2, r8
 8008f2c:	e7df      	b.n	8008eee <_printf_float+0x402>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	464a      	mov	r2, r9
 8008f32:	4631      	mov	r1, r6
 8008f34:	4628      	mov	r0, r5
 8008f36:	47b8      	blx	r7
 8008f38:	3001      	adds	r0, #1
 8008f3a:	f43f ae38 	beq.w	8008bae <_printf_float+0xc2>
 8008f3e:	f108 0801 	add.w	r8, r8, #1
 8008f42:	68e3      	ldr	r3, [r4, #12]
 8008f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f46:	1a5b      	subs	r3, r3, r1
 8008f48:	4543      	cmp	r3, r8
 8008f4a:	dcf0      	bgt.n	8008f2e <_printf_float+0x442>
 8008f4c:	e6fa      	b.n	8008d44 <_printf_float+0x258>
 8008f4e:	f04f 0800 	mov.w	r8, #0
 8008f52:	f104 0919 	add.w	r9, r4, #25
 8008f56:	e7f4      	b.n	8008f42 <_printf_float+0x456>

08008f58 <_printf_common>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	4699      	mov	r9, r3
 8008f60:	688a      	ldr	r2, [r1, #8]
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	bfb8      	it	lt
 8008f6c:	4613      	movlt	r3, r2
 8008f6e:	6033      	str	r3, [r6, #0]
 8008f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f74:	4607      	mov	r7, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	b10a      	cbz	r2, 8008f7e <_printf_common+0x26>
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	6033      	str	r3, [r6, #0]
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	0699      	lsls	r1, r3, #26
 8008f82:	bf42      	ittt	mi
 8008f84:	6833      	ldrmi	r3, [r6, #0]
 8008f86:	3302      	addmi	r3, #2
 8008f88:	6033      	strmi	r3, [r6, #0]
 8008f8a:	6825      	ldr	r5, [r4, #0]
 8008f8c:	f015 0506 	ands.w	r5, r5, #6
 8008f90:	d106      	bne.n	8008fa0 <_printf_common+0x48>
 8008f92:	f104 0a19 	add.w	sl, r4, #25
 8008f96:	68e3      	ldr	r3, [r4, #12]
 8008f98:	6832      	ldr	r2, [r6, #0]
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	42ab      	cmp	r3, r5
 8008f9e:	dc26      	bgt.n	8008fee <_printf_common+0x96>
 8008fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fa4:	1e13      	subs	r3, r2, #0
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	bf18      	it	ne
 8008faa:	2301      	movne	r3, #1
 8008fac:	0692      	lsls	r2, r2, #26
 8008fae:	d42b      	bmi.n	8009008 <_printf_common+0xb0>
 8008fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	47c0      	blx	r8
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d01e      	beq.n	8008ffc <_printf_common+0xa4>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	68e5      	ldr	r5, [r4, #12]
 8008fc2:	6832      	ldr	r2, [r6, #0]
 8008fc4:	f003 0306 	and.w	r3, r3, #6
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	bf08      	it	eq
 8008fcc:	1aad      	subeq	r5, r5, r2
 8008fce:	68a3      	ldr	r3, [r4, #8]
 8008fd0:	6922      	ldr	r2, [r4, #16]
 8008fd2:	bf0c      	ite	eq
 8008fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fd8:	2500      	movne	r5, #0
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	bfc4      	itt	gt
 8008fde:	1a9b      	subgt	r3, r3, r2
 8008fe0:	18ed      	addgt	r5, r5, r3
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	341a      	adds	r4, #26
 8008fe6:	42b5      	cmp	r5, r6
 8008fe8:	d11a      	bne.n	8009020 <_printf_common+0xc8>
 8008fea:	2000      	movs	r0, #0
 8008fec:	e008      	b.n	8009000 <_printf_common+0xa8>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	47c0      	blx	r8
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d103      	bne.n	8009004 <_printf_common+0xac>
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009004:	3501      	adds	r5, #1
 8009006:	e7c6      	b.n	8008f96 <_printf_common+0x3e>
 8009008:	18e1      	adds	r1, r4, r3
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	2030      	movs	r0, #48	; 0x30
 800900e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009012:	4422      	add	r2, r4
 8009014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800901c:	3302      	adds	r3, #2
 800901e:	e7c7      	b.n	8008fb0 <_printf_common+0x58>
 8009020:	2301      	movs	r3, #1
 8009022:	4622      	mov	r2, r4
 8009024:	4649      	mov	r1, r9
 8009026:	4638      	mov	r0, r7
 8009028:	47c0      	blx	r8
 800902a:	3001      	adds	r0, #1
 800902c:	d0e6      	beq.n	8008ffc <_printf_common+0xa4>
 800902e:	3601      	adds	r6, #1
 8009030:	e7d9      	b.n	8008fe6 <_printf_common+0x8e>
	...

08009034 <_printf_i>:
 8009034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009038:	7e0f      	ldrb	r7, [r1, #24]
 800903a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800903c:	2f78      	cmp	r7, #120	; 0x78
 800903e:	4691      	mov	r9, r2
 8009040:	4680      	mov	r8, r0
 8009042:	460c      	mov	r4, r1
 8009044:	469a      	mov	sl, r3
 8009046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800904a:	d807      	bhi.n	800905c <_printf_i+0x28>
 800904c:	2f62      	cmp	r7, #98	; 0x62
 800904e:	d80a      	bhi.n	8009066 <_printf_i+0x32>
 8009050:	2f00      	cmp	r7, #0
 8009052:	f000 80d8 	beq.w	8009206 <_printf_i+0x1d2>
 8009056:	2f58      	cmp	r7, #88	; 0x58
 8009058:	f000 80a3 	beq.w	80091a2 <_printf_i+0x16e>
 800905c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009064:	e03a      	b.n	80090dc <_printf_i+0xa8>
 8009066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800906a:	2b15      	cmp	r3, #21
 800906c:	d8f6      	bhi.n	800905c <_printf_i+0x28>
 800906e:	a101      	add	r1, pc, #4	; (adr r1, 8009074 <_printf_i+0x40>)
 8009070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009074:	080090cd 	.word	0x080090cd
 8009078:	080090e1 	.word	0x080090e1
 800907c:	0800905d 	.word	0x0800905d
 8009080:	0800905d 	.word	0x0800905d
 8009084:	0800905d 	.word	0x0800905d
 8009088:	0800905d 	.word	0x0800905d
 800908c:	080090e1 	.word	0x080090e1
 8009090:	0800905d 	.word	0x0800905d
 8009094:	0800905d 	.word	0x0800905d
 8009098:	0800905d 	.word	0x0800905d
 800909c:	0800905d 	.word	0x0800905d
 80090a0:	080091ed 	.word	0x080091ed
 80090a4:	08009111 	.word	0x08009111
 80090a8:	080091cf 	.word	0x080091cf
 80090ac:	0800905d 	.word	0x0800905d
 80090b0:	0800905d 	.word	0x0800905d
 80090b4:	0800920f 	.word	0x0800920f
 80090b8:	0800905d 	.word	0x0800905d
 80090bc:	08009111 	.word	0x08009111
 80090c0:	0800905d 	.word	0x0800905d
 80090c4:	0800905d 	.word	0x0800905d
 80090c8:	080091d7 	.word	0x080091d7
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	602a      	str	r2, [r5, #0]
 80090d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090dc:	2301      	movs	r3, #1
 80090de:	e0a3      	b.n	8009228 <_printf_i+0x1f4>
 80090e0:	6820      	ldr	r0, [r4, #0]
 80090e2:	6829      	ldr	r1, [r5, #0]
 80090e4:	0606      	lsls	r6, r0, #24
 80090e6:	f101 0304 	add.w	r3, r1, #4
 80090ea:	d50a      	bpl.n	8009102 <_printf_i+0xce>
 80090ec:	680e      	ldr	r6, [r1, #0]
 80090ee:	602b      	str	r3, [r5, #0]
 80090f0:	2e00      	cmp	r6, #0
 80090f2:	da03      	bge.n	80090fc <_printf_i+0xc8>
 80090f4:	232d      	movs	r3, #45	; 0x2d
 80090f6:	4276      	negs	r6, r6
 80090f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090fc:	485e      	ldr	r0, [pc, #376]	; (8009278 <_printf_i+0x244>)
 80090fe:	230a      	movs	r3, #10
 8009100:	e019      	b.n	8009136 <_printf_i+0x102>
 8009102:	680e      	ldr	r6, [r1, #0]
 8009104:	602b      	str	r3, [r5, #0]
 8009106:	f010 0f40 	tst.w	r0, #64	; 0x40
 800910a:	bf18      	it	ne
 800910c:	b236      	sxthne	r6, r6
 800910e:	e7ef      	b.n	80090f0 <_printf_i+0xbc>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	6820      	ldr	r0, [r4, #0]
 8009114:	1d19      	adds	r1, r3, #4
 8009116:	6029      	str	r1, [r5, #0]
 8009118:	0601      	lsls	r1, r0, #24
 800911a:	d501      	bpl.n	8009120 <_printf_i+0xec>
 800911c:	681e      	ldr	r6, [r3, #0]
 800911e:	e002      	b.n	8009126 <_printf_i+0xf2>
 8009120:	0646      	lsls	r6, r0, #25
 8009122:	d5fb      	bpl.n	800911c <_printf_i+0xe8>
 8009124:	881e      	ldrh	r6, [r3, #0]
 8009126:	4854      	ldr	r0, [pc, #336]	; (8009278 <_printf_i+0x244>)
 8009128:	2f6f      	cmp	r7, #111	; 0x6f
 800912a:	bf0c      	ite	eq
 800912c:	2308      	moveq	r3, #8
 800912e:	230a      	movne	r3, #10
 8009130:	2100      	movs	r1, #0
 8009132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009136:	6865      	ldr	r5, [r4, #4]
 8009138:	60a5      	str	r5, [r4, #8]
 800913a:	2d00      	cmp	r5, #0
 800913c:	bfa2      	ittt	ge
 800913e:	6821      	ldrge	r1, [r4, #0]
 8009140:	f021 0104 	bicge.w	r1, r1, #4
 8009144:	6021      	strge	r1, [r4, #0]
 8009146:	b90e      	cbnz	r6, 800914c <_printf_i+0x118>
 8009148:	2d00      	cmp	r5, #0
 800914a:	d04d      	beq.n	80091e8 <_printf_i+0x1b4>
 800914c:	4615      	mov	r5, r2
 800914e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009152:	fb03 6711 	mls	r7, r3, r1, r6
 8009156:	5dc7      	ldrb	r7, [r0, r7]
 8009158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800915c:	4637      	mov	r7, r6
 800915e:	42bb      	cmp	r3, r7
 8009160:	460e      	mov	r6, r1
 8009162:	d9f4      	bls.n	800914e <_printf_i+0x11a>
 8009164:	2b08      	cmp	r3, #8
 8009166:	d10b      	bne.n	8009180 <_printf_i+0x14c>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	07de      	lsls	r6, r3, #31
 800916c:	d508      	bpl.n	8009180 <_printf_i+0x14c>
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	6861      	ldr	r1, [r4, #4]
 8009172:	4299      	cmp	r1, r3
 8009174:	bfde      	ittt	le
 8009176:	2330      	movle	r3, #48	; 0x30
 8009178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800917c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009180:	1b52      	subs	r2, r2, r5
 8009182:	6122      	str	r2, [r4, #16]
 8009184:	f8cd a000 	str.w	sl, [sp]
 8009188:	464b      	mov	r3, r9
 800918a:	aa03      	add	r2, sp, #12
 800918c:	4621      	mov	r1, r4
 800918e:	4640      	mov	r0, r8
 8009190:	f7ff fee2 	bl	8008f58 <_printf_common>
 8009194:	3001      	adds	r0, #1
 8009196:	d14c      	bne.n	8009232 <_printf_i+0x1fe>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	b004      	add	sp, #16
 800919e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a2:	4835      	ldr	r0, [pc, #212]	; (8009278 <_printf_i+0x244>)
 80091a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091a8:	6829      	ldr	r1, [r5, #0]
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80091b0:	6029      	str	r1, [r5, #0]
 80091b2:	061d      	lsls	r5, r3, #24
 80091b4:	d514      	bpl.n	80091e0 <_printf_i+0x1ac>
 80091b6:	07df      	lsls	r7, r3, #31
 80091b8:	bf44      	itt	mi
 80091ba:	f043 0320 	orrmi.w	r3, r3, #32
 80091be:	6023      	strmi	r3, [r4, #0]
 80091c0:	b91e      	cbnz	r6, 80091ca <_printf_i+0x196>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	f023 0320 	bic.w	r3, r3, #32
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	2310      	movs	r3, #16
 80091cc:	e7b0      	b.n	8009130 <_printf_i+0xfc>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	f043 0320 	orr.w	r3, r3, #32
 80091d4:	6023      	str	r3, [r4, #0]
 80091d6:	2378      	movs	r3, #120	; 0x78
 80091d8:	4828      	ldr	r0, [pc, #160]	; (800927c <_printf_i+0x248>)
 80091da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091de:	e7e3      	b.n	80091a8 <_printf_i+0x174>
 80091e0:	0659      	lsls	r1, r3, #25
 80091e2:	bf48      	it	mi
 80091e4:	b2b6      	uxthmi	r6, r6
 80091e6:	e7e6      	b.n	80091b6 <_printf_i+0x182>
 80091e8:	4615      	mov	r5, r2
 80091ea:	e7bb      	b.n	8009164 <_printf_i+0x130>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	6826      	ldr	r6, [r4, #0]
 80091f0:	6961      	ldr	r1, [r4, #20]
 80091f2:	1d18      	adds	r0, r3, #4
 80091f4:	6028      	str	r0, [r5, #0]
 80091f6:	0635      	lsls	r5, r6, #24
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	d501      	bpl.n	8009200 <_printf_i+0x1cc>
 80091fc:	6019      	str	r1, [r3, #0]
 80091fe:	e002      	b.n	8009206 <_printf_i+0x1d2>
 8009200:	0670      	lsls	r0, r6, #25
 8009202:	d5fb      	bpl.n	80091fc <_printf_i+0x1c8>
 8009204:	8019      	strh	r1, [r3, #0]
 8009206:	2300      	movs	r3, #0
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	4615      	mov	r5, r2
 800920c:	e7ba      	b.n	8009184 <_printf_i+0x150>
 800920e:	682b      	ldr	r3, [r5, #0]
 8009210:	1d1a      	adds	r2, r3, #4
 8009212:	602a      	str	r2, [r5, #0]
 8009214:	681d      	ldr	r5, [r3, #0]
 8009216:	6862      	ldr	r2, [r4, #4]
 8009218:	2100      	movs	r1, #0
 800921a:	4628      	mov	r0, r5
 800921c:	f7f6 ffe0 	bl	80001e0 <memchr>
 8009220:	b108      	cbz	r0, 8009226 <_printf_i+0x1f2>
 8009222:	1b40      	subs	r0, r0, r5
 8009224:	6060      	str	r0, [r4, #4]
 8009226:	6863      	ldr	r3, [r4, #4]
 8009228:	6123      	str	r3, [r4, #16]
 800922a:	2300      	movs	r3, #0
 800922c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009230:	e7a8      	b.n	8009184 <_printf_i+0x150>
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	462a      	mov	r2, r5
 8009236:	4649      	mov	r1, r9
 8009238:	4640      	mov	r0, r8
 800923a:	47d0      	blx	sl
 800923c:	3001      	adds	r0, #1
 800923e:	d0ab      	beq.n	8009198 <_printf_i+0x164>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	079b      	lsls	r3, r3, #30
 8009244:	d413      	bmi.n	800926e <_printf_i+0x23a>
 8009246:	68e0      	ldr	r0, [r4, #12]
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	4298      	cmp	r0, r3
 800924c:	bfb8      	it	lt
 800924e:	4618      	movlt	r0, r3
 8009250:	e7a4      	b.n	800919c <_printf_i+0x168>
 8009252:	2301      	movs	r3, #1
 8009254:	4632      	mov	r2, r6
 8009256:	4649      	mov	r1, r9
 8009258:	4640      	mov	r0, r8
 800925a:	47d0      	blx	sl
 800925c:	3001      	adds	r0, #1
 800925e:	d09b      	beq.n	8009198 <_printf_i+0x164>
 8009260:	3501      	adds	r5, #1
 8009262:	68e3      	ldr	r3, [r4, #12]
 8009264:	9903      	ldr	r1, [sp, #12]
 8009266:	1a5b      	subs	r3, r3, r1
 8009268:	42ab      	cmp	r3, r5
 800926a:	dcf2      	bgt.n	8009252 <_printf_i+0x21e>
 800926c:	e7eb      	b.n	8009246 <_printf_i+0x212>
 800926e:	2500      	movs	r5, #0
 8009270:	f104 0619 	add.w	r6, r4, #25
 8009274:	e7f5      	b.n	8009262 <_printf_i+0x22e>
 8009276:	bf00      	nop
 8009278:	0800d982 	.word	0x0800d982
 800927c:	0800d993 	.word	0x0800d993

08009280 <sniprintf>:
 8009280:	b40c      	push	{r2, r3}
 8009282:	b530      	push	{r4, r5, lr}
 8009284:	4b17      	ldr	r3, [pc, #92]	; (80092e4 <sniprintf+0x64>)
 8009286:	1e0c      	subs	r4, r1, #0
 8009288:	681d      	ldr	r5, [r3, #0]
 800928a:	b09d      	sub	sp, #116	; 0x74
 800928c:	da08      	bge.n	80092a0 <sniprintf+0x20>
 800928e:	238b      	movs	r3, #139	; 0x8b
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	b01d      	add	sp, #116	; 0x74
 8009298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800929c:	b002      	add	sp, #8
 800929e:	4770      	bx	lr
 80092a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80092a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092a8:	bf14      	ite	ne
 80092aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092ae:	4623      	moveq	r3, r4
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	9307      	str	r3, [sp, #28]
 80092b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092b8:	9002      	str	r0, [sp, #8]
 80092ba:	9006      	str	r0, [sp, #24]
 80092bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092c2:	ab21      	add	r3, sp, #132	; 0x84
 80092c4:	a902      	add	r1, sp, #8
 80092c6:	4628      	mov	r0, r5
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	f001 fb69 	bl	800a9a0 <_svfiprintf_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	bfbc      	itt	lt
 80092d2:	238b      	movlt	r3, #139	; 0x8b
 80092d4:	602b      	strlt	r3, [r5, #0]
 80092d6:	2c00      	cmp	r4, #0
 80092d8:	d0dd      	beq.n	8009296 <sniprintf+0x16>
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	2200      	movs	r2, #0
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	e7d9      	b.n	8009296 <sniprintf+0x16>
 80092e2:	bf00      	nop
 80092e4:	20000188 	.word	0x20000188

080092e8 <quorem>:
 80092e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	6903      	ldr	r3, [r0, #16]
 80092ee:	690c      	ldr	r4, [r1, #16]
 80092f0:	42a3      	cmp	r3, r4
 80092f2:	4607      	mov	r7, r0
 80092f4:	f2c0 8081 	blt.w	80093fa <quorem+0x112>
 80092f8:	3c01      	subs	r4, #1
 80092fa:	f101 0814 	add.w	r8, r1, #20
 80092fe:	f100 0514 	add.w	r5, r0, #20
 8009302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800930c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009310:	3301      	adds	r3, #1
 8009312:	429a      	cmp	r2, r3
 8009314:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009318:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800931c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009320:	d331      	bcc.n	8009386 <quorem+0x9e>
 8009322:	f04f 0e00 	mov.w	lr, #0
 8009326:	4640      	mov	r0, r8
 8009328:	46ac      	mov	ip, r5
 800932a:	46f2      	mov	sl, lr
 800932c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009330:	b293      	uxth	r3, r2
 8009332:	fb06 e303 	mla	r3, r6, r3, lr
 8009336:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800933a:	b29b      	uxth	r3, r3
 800933c:	ebaa 0303 	sub.w	r3, sl, r3
 8009340:	f8dc a000 	ldr.w	sl, [ip]
 8009344:	0c12      	lsrs	r2, r2, #16
 8009346:	fa13 f38a 	uxtah	r3, r3, sl
 800934a:	fb06 e202 	mla	r2, r6, r2, lr
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	9b00      	ldr	r3, [sp, #0]
 8009352:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009356:	b292      	uxth	r2, r2
 8009358:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800935c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009360:	f8bd 3000 	ldrh.w	r3, [sp]
 8009364:	4581      	cmp	r9, r0
 8009366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800936a:	f84c 3b04 	str.w	r3, [ip], #4
 800936e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009372:	d2db      	bcs.n	800932c <quorem+0x44>
 8009374:	f855 300b 	ldr.w	r3, [r5, fp]
 8009378:	b92b      	cbnz	r3, 8009386 <quorem+0x9e>
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	3b04      	subs	r3, #4
 800937e:	429d      	cmp	r5, r3
 8009380:	461a      	mov	r2, r3
 8009382:	d32e      	bcc.n	80093e2 <quorem+0xfa>
 8009384:	613c      	str	r4, [r7, #16]
 8009386:	4638      	mov	r0, r7
 8009388:	f001 f8b6 	bl	800a4f8 <__mcmp>
 800938c:	2800      	cmp	r0, #0
 800938e:	db24      	blt.n	80093da <quorem+0xf2>
 8009390:	3601      	adds	r6, #1
 8009392:	4628      	mov	r0, r5
 8009394:	f04f 0c00 	mov.w	ip, #0
 8009398:	f858 2b04 	ldr.w	r2, [r8], #4
 800939c:	f8d0 e000 	ldr.w	lr, [r0]
 80093a0:	b293      	uxth	r3, r2
 80093a2:	ebac 0303 	sub.w	r3, ip, r3
 80093a6:	0c12      	lsrs	r2, r2, #16
 80093a8:	fa13 f38e 	uxtah	r3, r3, lr
 80093ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ba:	45c1      	cmp	r9, r8
 80093bc:	f840 3b04 	str.w	r3, [r0], #4
 80093c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093c4:	d2e8      	bcs.n	8009398 <quorem+0xb0>
 80093c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ce:	b922      	cbnz	r2, 80093da <quorem+0xf2>
 80093d0:	3b04      	subs	r3, #4
 80093d2:	429d      	cmp	r5, r3
 80093d4:	461a      	mov	r2, r3
 80093d6:	d30a      	bcc.n	80093ee <quorem+0x106>
 80093d8:	613c      	str	r4, [r7, #16]
 80093da:	4630      	mov	r0, r6
 80093dc:	b003      	add	sp, #12
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e2:	6812      	ldr	r2, [r2, #0]
 80093e4:	3b04      	subs	r3, #4
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	d1cc      	bne.n	8009384 <quorem+0x9c>
 80093ea:	3c01      	subs	r4, #1
 80093ec:	e7c7      	b.n	800937e <quorem+0x96>
 80093ee:	6812      	ldr	r2, [r2, #0]
 80093f0:	3b04      	subs	r3, #4
 80093f2:	2a00      	cmp	r2, #0
 80093f4:	d1f0      	bne.n	80093d8 <quorem+0xf0>
 80093f6:	3c01      	subs	r4, #1
 80093f8:	e7eb      	b.n	80093d2 <quorem+0xea>
 80093fa:	2000      	movs	r0, #0
 80093fc:	e7ee      	b.n	80093dc <quorem+0xf4>
	...

08009400 <_dtoa_r>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	ed2d 8b04 	vpush	{d8-d9}
 8009408:	ec57 6b10 	vmov	r6, r7, d0
 800940c:	b093      	sub	sp, #76	; 0x4c
 800940e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009414:	9106      	str	r1, [sp, #24]
 8009416:	ee10 aa10 	vmov	sl, s0
 800941a:	4604      	mov	r4, r0
 800941c:	9209      	str	r2, [sp, #36]	; 0x24
 800941e:	930c      	str	r3, [sp, #48]	; 0x30
 8009420:	46bb      	mov	fp, r7
 8009422:	b975      	cbnz	r5, 8009442 <_dtoa_r+0x42>
 8009424:	2010      	movs	r0, #16
 8009426:	f000 fddd 	bl	8009fe4 <malloc>
 800942a:	4602      	mov	r2, r0
 800942c:	6260      	str	r0, [r4, #36]	; 0x24
 800942e:	b920      	cbnz	r0, 800943a <_dtoa_r+0x3a>
 8009430:	4ba7      	ldr	r3, [pc, #668]	; (80096d0 <_dtoa_r+0x2d0>)
 8009432:	21ea      	movs	r1, #234	; 0xea
 8009434:	48a7      	ldr	r0, [pc, #668]	; (80096d4 <_dtoa_r+0x2d4>)
 8009436:	f001 fbc3 	bl	800abc0 <__assert_func>
 800943a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800943e:	6005      	str	r5, [r0, #0]
 8009440:	60c5      	str	r5, [r0, #12]
 8009442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009444:	6819      	ldr	r1, [r3, #0]
 8009446:	b151      	cbz	r1, 800945e <_dtoa_r+0x5e>
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	604a      	str	r2, [r1, #4]
 800944c:	2301      	movs	r3, #1
 800944e:	4093      	lsls	r3, r2
 8009450:	608b      	str	r3, [r1, #8]
 8009452:	4620      	mov	r0, r4
 8009454:	f000 fe0e 	bl	800a074 <_Bfree>
 8009458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	1e3b      	subs	r3, r7, #0
 8009460:	bfaa      	itet	ge
 8009462:	2300      	movge	r3, #0
 8009464:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009468:	f8c8 3000 	strge.w	r3, [r8]
 800946c:	4b9a      	ldr	r3, [pc, #616]	; (80096d8 <_dtoa_r+0x2d8>)
 800946e:	bfbc      	itt	lt
 8009470:	2201      	movlt	r2, #1
 8009472:	f8c8 2000 	strlt.w	r2, [r8]
 8009476:	ea33 030b 	bics.w	r3, r3, fp
 800947a:	d11b      	bne.n	80094b4 <_dtoa_r+0xb4>
 800947c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800947e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009488:	4333      	orrs	r3, r6
 800948a:	f000 8592 	beq.w	8009fb2 <_dtoa_r+0xbb2>
 800948e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009490:	b963      	cbnz	r3, 80094ac <_dtoa_r+0xac>
 8009492:	4b92      	ldr	r3, [pc, #584]	; (80096dc <_dtoa_r+0x2dc>)
 8009494:	e022      	b.n	80094dc <_dtoa_r+0xdc>
 8009496:	4b92      	ldr	r3, [pc, #584]	; (80096e0 <_dtoa_r+0x2e0>)
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	3308      	adds	r3, #8
 800949c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	9801      	ldr	r0, [sp, #4]
 80094a2:	b013      	add	sp, #76	; 0x4c
 80094a4:	ecbd 8b04 	vpop	{d8-d9}
 80094a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ac:	4b8b      	ldr	r3, [pc, #556]	; (80096dc <_dtoa_r+0x2dc>)
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	3303      	adds	r3, #3
 80094b2:	e7f3      	b.n	800949c <_dtoa_r+0x9c>
 80094b4:	2200      	movs	r2, #0
 80094b6:	2300      	movs	r3, #0
 80094b8:	4650      	mov	r0, sl
 80094ba:	4659      	mov	r1, fp
 80094bc:	f7f7 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80094c0:	ec4b ab19 	vmov	d9, sl, fp
 80094c4:	4680      	mov	r8, r0
 80094c6:	b158      	cbz	r0, 80094e0 <_dtoa_r+0xe0>
 80094c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094ca:	2301      	movs	r3, #1
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 856b 	beq.w	8009fac <_dtoa_r+0xbac>
 80094d6:	4883      	ldr	r0, [pc, #524]	; (80096e4 <_dtoa_r+0x2e4>)
 80094d8:	6018      	str	r0, [r3, #0]
 80094da:	1e43      	subs	r3, r0, #1
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	e7df      	b.n	80094a0 <_dtoa_r+0xa0>
 80094e0:	ec4b ab10 	vmov	d0, sl, fp
 80094e4:	aa10      	add	r2, sp, #64	; 0x40
 80094e6:	a911      	add	r1, sp, #68	; 0x44
 80094e8:	4620      	mov	r0, r4
 80094ea:	f001 f8ab 	bl	800a644 <__d2b>
 80094ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80094f2:	ee08 0a10 	vmov	s16, r0
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	f000 8084 	beq.w	8009604 <_dtoa_r+0x204>
 80094fc:	ee19 3a90 	vmov	r3, s19
 8009500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009504:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009508:	4656      	mov	r6, sl
 800950a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800950e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009512:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009516:	4b74      	ldr	r3, [pc, #464]	; (80096e8 <_dtoa_r+0x2e8>)
 8009518:	2200      	movs	r2, #0
 800951a:	4630      	mov	r0, r6
 800951c:	4639      	mov	r1, r7
 800951e:	f7f6 feb3 	bl	8000288 <__aeabi_dsub>
 8009522:	a365      	add	r3, pc, #404	; (adr r3, 80096b8 <_dtoa_r+0x2b8>)
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f7f7 f866 	bl	80005f8 <__aeabi_dmul>
 800952c:	a364      	add	r3, pc, #400	; (adr r3, 80096c0 <_dtoa_r+0x2c0>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f7f6 feab 	bl	800028c <__adddf3>
 8009536:	4606      	mov	r6, r0
 8009538:	4628      	mov	r0, r5
 800953a:	460f      	mov	r7, r1
 800953c:	f7f6 fff2 	bl	8000524 <__aeabi_i2d>
 8009540:	a361      	add	r3, pc, #388	; (adr r3, 80096c8 <_dtoa_r+0x2c8>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	f7f7 f857 	bl	80005f8 <__aeabi_dmul>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4630      	mov	r0, r6
 8009550:	4639      	mov	r1, r7
 8009552:	f7f6 fe9b 	bl	800028c <__adddf3>
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	f7f7 fafd 	bl	8000b58 <__aeabi_d2iz>
 800955e:	2200      	movs	r2, #0
 8009560:	9000      	str	r0, [sp, #0]
 8009562:	2300      	movs	r3, #0
 8009564:	4630      	mov	r0, r6
 8009566:	4639      	mov	r1, r7
 8009568:	f7f7 fab8 	bl	8000adc <__aeabi_dcmplt>
 800956c:	b150      	cbz	r0, 8009584 <_dtoa_r+0x184>
 800956e:	9800      	ldr	r0, [sp, #0]
 8009570:	f7f6 ffd8 	bl	8000524 <__aeabi_i2d>
 8009574:	4632      	mov	r2, r6
 8009576:	463b      	mov	r3, r7
 8009578:	f7f7 faa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800957c:	b910      	cbnz	r0, 8009584 <_dtoa_r+0x184>
 800957e:	9b00      	ldr	r3, [sp, #0]
 8009580:	3b01      	subs	r3, #1
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	9b00      	ldr	r3, [sp, #0]
 8009586:	2b16      	cmp	r3, #22
 8009588:	d85a      	bhi.n	8009640 <_dtoa_r+0x240>
 800958a:	9a00      	ldr	r2, [sp, #0]
 800958c:	4b57      	ldr	r3, [pc, #348]	; (80096ec <_dtoa_r+0x2ec>)
 800958e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	ec51 0b19 	vmov	r0, r1, d9
 800959a:	f7f7 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d050      	beq.n	8009644 <_dtoa_r+0x244>
 80095a2:	9b00      	ldr	r3, [sp, #0]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	9300      	str	r3, [sp, #0]
 80095a8:	2300      	movs	r3, #0
 80095aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80095ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095ae:	1b5d      	subs	r5, r3, r5
 80095b0:	1e6b      	subs	r3, r5, #1
 80095b2:	9305      	str	r3, [sp, #20]
 80095b4:	bf45      	ittet	mi
 80095b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80095ba:	9304      	strmi	r3, [sp, #16]
 80095bc:	2300      	movpl	r3, #0
 80095be:	2300      	movmi	r3, #0
 80095c0:	bf4c      	ite	mi
 80095c2:	9305      	strmi	r3, [sp, #20]
 80095c4:	9304      	strpl	r3, [sp, #16]
 80095c6:	9b00      	ldr	r3, [sp, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	db3d      	blt.n	8009648 <_dtoa_r+0x248>
 80095cc:	9b05      	ldr	r3, [sp, #20]
 80095ce:	9a00      	ldr	r2, [sp, #0]
 80095d0:	920a      	str	r2, [sp, #40]	; 0x28
 80095d2:	4413      	add	r3, r2
 80095d4:	9305      	str	r3, [sp, #20]
 80095d6:	2300      	movs	r3, #0
 80095d8:	9307      	str	r3, [sp, #28]
 80095da:	9b06      	ldr	r3, [sp, #24]
 80095dc:	2b09      	cmp	r3, #9
 80095de:	f200 8089 	bhi.w	80096f4 <_dtoa_r+0x2f4>
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	bfc4      	itt	gt
 80095e6:	3b04      	subgt	r3, #4
 80095e8:	9306      	strgt	r3, [sp, #24]
 80095ea:	9b06      	ldr	r3, [sp, #24]
 80095ec:	f1a3 0302 	sub.w	r3, r3, #2
 80095f0:	bfcc      	ite	gt
 80095f2:	2500      	movgt	r5, #0
 80095f4:	2501      	movle	r5, #1
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	f200 8087 	bhi.w	800970a <_dtoa_r+0x30a>
 80095fc:	e8df f003 	tbb	[pc, r3]
 8009600:	59383a2d 	.word	0x59383a2d
 8009604:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009608:	441d      	add	r5, r3
 800960a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800960e:	2b20      	cmp	r3, #32
 8009610:	bfc1      	itttt	gt
 8009612:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009616:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800961a:	fa0b f303 	lslgt.w	r3, fp, r3
 800961e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009622:	bfda      	itte	le
 8009624:	f1c3 0320 	rsble	r3, r3, #32
 8009628:	fa06 f003 	lslle.w	r0, r6, r3
 800962c:	4318      	orrgt	r0, r3
 800962e:	f7f6 ff69 	bl	8000504 <__aeabi_ui2d>
 8009632:	2301      	movs	r3, #1
 8009634:	4606      	mov	r6, r0
 8009636:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800963a:	3d01      	subs	r5, #1
 800963c:	930e      	str	r3, [sp, #56]	; 0x38
 800963e:	e76a      	b.n	8009516 <_dtoa_r+0x116>
 8009640:	2301      	movs	r3, #1
 8009642:	e7b2      	b.n	80095aa <_dtoa_r+0x1aa>
 8009644:	900b      	str	r0, [sp, #44]	; 0x2c
 8009646:	e7b1      	b.n	80095ac <_dtoa_r+0x1ac>
 8009648:	9b04      	ldr	r3, [sp, #16]
 800964a:	9a00      	ldr	r2, [sp, #0]
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	4253      	negs	r3, r2
 8009652:	9307      	str	r3, [sp, #28]
 8009654:	2300      	movs	r3, #0
 8009656:	930a      	str	r3, [sp, #40]	; 0x28
 8009658:	e7bf      	b.n	80095da <_dtoa_r+0x1da>
 800965a:	2300      	movs	r3, #0
 800965c:	9308      	str	r3, [sp, #32]
 800965e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009660:	2b00      	cmp	r3, #0
 8009662:	dc55      	bgt.n	8009710 <_dtoa_r+0x310>
 8009664:	2301      	movs	r3, #1
 8009666:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800966a:	461a      	mov	r2, r3
 800966c:	9209      	str	r2, [sp, #36]	; 0x24
 800966e:	e00c      	b.n	800968a <_dtoa_r+0x28a>
 8009670:	2301      	movs	r3, #1
 8009672:	e7f3      	b.n	800965c <_dtoa_r+0x25c>
 8009674:	2300      	movs	r3, #0
 8009676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009678:	9308      	str	r3, [sp, #32]
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	4413      	add	r3, r2
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	3301      	adds	r3, #1
 8009682:	2b01      	cmp	r3, #1
 8009684:	9303      	str	r3, [sp, #12]
 8009686:	bfb8      	it	lt
 8009688:	2301      	movlt	r3, #1
 800968a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800968c:	2200      	movs	r2, #0
 800968e:	6042      	str	r2, [r0, #4]
 8009690:	2204      	movs	r2, #4
 8009692:	f102 0614 	add.w	r6, r2, #20
 8009696:	429e      	cmp	r6, r3
 8009698:	6841      	ldr	r1, [r0, #4]
 800969a:	d93d      	bls.n	8009718 <_dtoa_r+0x318>
 800969c:	4620      	mov	r0, r4
 800969e:	f000 fca9 	bl	8009ff4 <_Balloc>
 80096a2:	9001      	str	r0, [sp, #4]
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d13b      	bne.n	8009720 <_dtoa_r+0x320>
 80096a8:	4b11      	ldr	r3, [pc, #68]	; (80096f0 <_dtoa_r+0x2f0>)
 80096aa:	4602      	mov	r2, r0
 80096ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80096b0:	e6c0      	b.n	8009434 <_dtoa_r+0x34>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e7df      	b.n	8009676 <_dtoa_r+0x276>
 80096b6:	bf00      	nop
 80096b8:	636f4361 	.word	0x636f4361
 80096bc:	3fd287a7 	.word	0x3fd287a7
 80096c0:	8b60c8b3 	.word	0x8b60c8b3
 80096c4:	3fc68a28 	.word	0x3fc68a28
 80096c8:	509f79fb 	.word	0x509f79fb
 80096cc:	3fd34413 	.word	0x3fd34413
 80096d0:	0800d9b1 	.word	0x0800d9b1
 80096d4:	0800d9c8 	.word	0x0800d9c8
 80096d8:	7ff00000 	.word	0x7ff00000
 80096dc:	0800d9ad 	.word	0x0800d9ad
 80096e0:	0800d9a4 	.word	0x0800d9a4
 80096e4:	0800d981 	.word	0x0800d981
 80096e8:	3ff80000 	.word	0x3ff80000
 80096ec:	0800dab8 	.word	0x0800dab8
 80096f0:	0800da23 	.word	0x0800da23
 80096f4:	2501      	movs	r5, #1
 80096f6:	2300      	movs	r3, #0
 80096f8:	9306      	str	r3, [sp, #24]
 80096fa:	9508      	str	r5, [sp, #32]
 80096fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009700:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009704:	2200      	movs	r2, #0
 8009706:	2312      	movs	r3, #18
 8009708:	e7b0      	b.n	800966c <_dtoa_r+0x26c>
 800970a:	2301      	movs	r3, #1
 800970c:	9308      	str	r3, [sp, #32]
 800970e:	e7f5      	b.n	80096fc <_dtoa_r+0x2fc>
 8009710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009712:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009716:	e7b8      	b.n	800968a <_dtoa_r+0x28a>
 8009718:	3101      	adds	r1, #1
 800971a:	6041      	str	r1, [r0, #4]
 800971c:	0052      	lsls	r2, r2, #1
 800971e:	e7b8      	b.n	8009692 <_dtoa_r+0x292>
 8009720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009722:	9a01      	ldr	r2, [sp, #4]
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	2b0e      	cmp	r3, #14
 800972a:	f200 809d 	bhi.w	8009868 <_dtoa_r+0x468>
 800972e:	2d00      	cmp	r5, #0
 8009730:	f000 809a 	beq.w	8009868 <_dtoa_r+0x468>
 8009734:	9b00      	ldr	r3, [sp, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	dd32      	ble.n	80097a0 <_dtoa_r+0x3a0>
 800973a:	4ab7      	ldr	r2, [pc, #732]	; (8009a18 <_dtoa_r+0x618>)
 800973c:	f003 030f 	and.w	r3, r3, #15
 8009740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009744:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009748:	9b00      	ldr	r3, [sp, #0]
 800974a:	05d8      	lsls	r0, r3, #23
 800974c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009750:	d516      	bpl.n	8009780 <_dtoa_r+0x380>
 8009752:	4bb2      	ldr	r3, [pc, #712]	; (8009a1c <_dtoa_r+0x61c>)
 8009754:	ec51 0b19 	vmov	r0, r1, d9
 8009758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800975c:	f7f7 f876 	bl	800084c <__aeabi_ddiv>
 8009760:	f007 070f 	and.w	r7, r7, #15
 8009764:	4682      	mov	sl, r0
 8009766:	468b      	mov	fp, r1
 8009768:	2503      	movs	r5, #3
 800976a:	4eac      	ldr	r6, [pc, #688]	; (8009a1c <_dtoa_r+0x61c>)
 800976c:	b957      	cbnz	r7, 8009784 <_dtoa_r+0x384>
 800976e:	4642      	mov	r2, r8
 8009770:	464b      	mov	r3, r9
 8009772:	4650      	mov	r0, sl
 8009774:	4659      	mov	r1, fp
 8009776:	f7f7 f869 	bl	800084c <__aeabi_ddiv>
 800977a:	4682      	mov	sl, r0
 800977c:	468b      	mov	fp, r1
 800977e:	e028      	b.n	80097d2 <_dtoa_r+0x3d2>
 8009780:	2502      	movs	r5, #2
 8009782:	e7f2      	b.n	800976a <_dtoa_r+0x36a>
 8009784:	07f9      	lsls	r1, r7, #31
 8009786:	d508      	bpl.n	800979a <_dtoa_r+0x39a>
 8009788:	4640      	mov	r0, r8
 800978a:	4649      	mov	r1, r9
 800978c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009790:	f7f6 ff32 	bl	80005f8 <__aeabi_dmul>
 8009794:	3501      	adds	r5, #1
 8009796:	4680      	mov	r8, r0
 8009798:	4689      	mov	r9, r1
 800979a:	107f      	asrs	r7, r7, #1
 800979c:	3608      	adds	r6, #8
 800979e:	e7e5      	b.n	800976c <_dtoa_r+0x36c>
 80097a0:	f000 809b 	beq.w	80098da <_dtoa_r+0x4da>
 80097a4:	9b00      	ldr	r3, [sp, #0]
 80097a6:	4f9d      	ldr	r7, [pc, #628]	; (8009a1c <_dtoa_r+0x61c>)
 80097a8:	425e      	negs	r6, r3
 80097aa:	4b9b      	ldr	r3, [pc, #620]	; (8009a18 <_dtoa_r+0x618>)
 80097ac:	f006 020f 	and.w	r2, r6, #15
 80097b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	ec51 0b19 	vmov	r0, r1, d9
 80097bc:	f7f6 ff1c 	bl	80005f8 <__aeabi_dmul>
 80097c0:	1136      	asrs	r6, r6, #4
 80097c2:	4682      	mov	sl, r0
 80097c4:	468b      	mov	fp, r1
 80097c6:	2300      	movs	r3, #0
 80097c8:	2502      	movs	r5, #2
 80097ca:	2e00      	cmp	r6, #0
 80097cc:	d17a      	bne.n	80098c4 <_dtoa_r+0x4c4>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1d3      	bne.n	800977a <_dtoa_r+0x37a>
 80097d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 8082 	beq.w	80098de <_dtoa_r+0x4de>
 80097da:	4b91      	ldr	r3, [pc, #580]	; (8009a20 <_dtoa_r+0x620>)
 80097dc:	2200      	movs	r2, #0
 80097de:	4650      	mov	r0, sl
 80097e0:	4659      	mov	r1, fp
 80097e2:	f7f7 f97b 	bl	8000adc <__aeabi_dcmplt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d079      	beq.n	80098de <_dtoa_r+0x4de>
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d076      	beq.n	80098de <_dtoa_r+0x4de>
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	dd36      	ble.n	8009864 <_dtoa_r+0x464>
 80097f6:	9b00      	ldr	r3, [sp, #0]
 80097f8:	4650      	mov	r0, sl
 80097fa:	4659      	mov	r1, fp
 80097fc:	1e5f      	subs	r7, r3, #1
 80097fe:	2200      	movs	r2, #0
 8009800:	4b88      	ldr	r3, [pc, #544]	; (8009a24 <_dtoa_r+0x624>)
 8009802:	f7f6 fef9 	bl	80005f8 <__aeabi_dmul>
 8009806:	9e02      	ldr	r6, [sp, #8]
 8009808:	4682      	mov	sl, r0
 800980a:	468b      	mov	fp, r1
 800980c:	3501      	adds	r5, #1
 800980e:	4628      	mov	r0, r5
 8009810:	f7f6 fe88 	bl	8000524 <__aeabi_i2d>
 8009814:	4652      	mov	r2, sl
 8009816:	465b      	mov	r3, fp
 8009818:	f7f6 feee 	bl	80005f8 <__aeabi_dmul>
 800981c:	4b82      	ldr	r3, [pc, #520]	; (8009a28 <_dtoa_r+0x628>)
 800981e:	2200      	movs	r2, #0
 8009820:	f7f6 fd34 	bl	800028c <__adddf3>
 8009824:	46d0      	mov	r8, sl
 8009826:	46d9      	mov	r9, fp
 8009828:	4682      	mov	sl, r0
 800982a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800982e:	2e00      	cmp	r6, #0
 8009830:	d158      	bne.n	80098e4 <_dtoa_r+0x4e4>
 8009832:	4b7e      	ldr	r3, [pc, #504]	; (8009a2c <_dtoa_r+0x62c>)
 8009834:	2200      	movs	r2, #0
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f6 fd25 	bl	8000288 <__aeabi_dsub>
 800983e:	4652      	mov	r2, sl
 8009840:	465b      	mov	r3, fp
 8009842:	4680      	mov	r8, r0
 8009844:	4689      	mov	r9, r1
 8009846:	f7f7 f967 	bl	8000b18 <__aeabi_dcmpgt>
 800984a:	2800      	cmp	r0, #0
 800984c:	f040 8295 	bne.w	8009d7a <_dtoa_r+0x97a>
 8009850:	4652      	mov	r2, sl
 8009852:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009856:	4640      	mov	r0, r8
 8009858:	4649      	mov	r1, r9
 800985a:	f7f7 f93f 	bl	8000adc <__aeabi_dcmplt>
 800985e:	2800      	cmp	r0, #0
 8009860:	f040 8289 	bne.w	8009d76 <_dtoa_r+0x976>
 8009864:	ec5b ab19 	vmov	sl, fp, d9
 8009868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800986a:	2b00      	cmp	r3, #0
 800986c:	f2c0 8148 	blt.w	8009b00 <_dtoa_r+0x700>
 8009870:	9a00      	ldr	r2, [sp, #0]
 8009872:	2a0e      	cmp	r2, #14
 8009874:	f300 8144 	bgt.w	8009b00 <_dtoa_r+0x700>
 8009878:	4b67      	ldr	r3, [pc, #412]	; (8009a18 <_dtoa_r+0x618>)
 800987a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800987e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009884:	2b00      	cmp	r3, #0
 8009886:	f280 80d5 	bge.w	8009a34 <_dtoa_r+0x634>
 800988a:	9b03      	ldr	r3, [sp, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	f300 80d1 	bgt.w	8009a34 <_dtoa_r+0x634>
 8009892:	f040 826f 	bne.w	8009d74 <_dtoa_r+0x974>
 8009896:	4b65      	ldr	r3, [pc, #404]	; (8009a2c <_dtoa_r+0x62c>)
 8009898:	2200      	movs	r2, #0
 800989a:	4640      	mov	r0, r8
 800989c:	4649      	mov	r1, r9
 800989e:	f7f6 feab 	bl	80005f8 <__aeabi_dmul>
 80098a2:	4652      	mov	r2, sl
 80098a4:	465b      	mov	r3, fp
 80098a6:	f7f7 f92d 	bl	8000b04 <__aeabi_dcmpge>
 80098aa:	9e03      	ldr	r6, [sp, #12]
 80098ac:	4637      	mov	r7, r6
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f040 8245 	bne.w	8009d3e <_dtoa_r+0x93e>
 80098b4:	9d01      	ldr	r5, [sp, #4]
 80098b6:	2331      	movs	r3, #49	; 0x31
 80098b8:	f805 3b01 	strb.w	r3, [r5], #1
 80098bc:	9b00      	ldr	r3, [sp, #0]
 80098be:	3301      	adds	r3, #1
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	e240      	b.n	8009d46 <_dtoa_r+0x946>
 80098c4:	07f2      	lsls	r2, r6, #31
 80098c6:	d505      	bpl.n	80098d4 <_dtoa_r+0x4d4>
 80098c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098cc:	f7f6 fe94 	bl	80005f8 <__aeabi_dmul>
 80098d0:	3501      	adds	r5, #1
 80098d2:	2301      	movs	r3, #1
 80098d4:	1076      	asrs	r6, r6, #1
 80098d6:	3708      	adds	r7, #8
 80098d8:	e777      	b.n	80097ca <_dtoa_r+0x3ca>
 80098da:	2502      	movs	r5, #2
 80098dc:	e779      	b.n	80097d2 <_dtoa_r+0x3d2>
 80098de:	9f00      	ldr	r7, [sp, #0]
 80098e0:	9e03      	ldr	r6, [sp, #12]
 80098e2:	e794      	b.n	800980e <_dtoa_r+0x40e>
 80098e4:	9901      	ldr	r1, [sp, #4]
 80098e6:	4b4c      	ldr	r3, [pc, #304]	; (8009a18 <_dtoa_r+0x618>)
 80098e8:	4431      	add	r1, r6
 80098ea:	910d      	str	r1, [sp, #52]	; 0x34
 80098ec:	9908      	ldr	r1, [sp, #32]
 80098ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80098f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d043      	beq.n	8009982 <_dtoa_r+0x582>
 80098fa:	494d      	ldr	r1, [pc, #308]	; (8009a30 <_dtoa_r+0x630>)
 80098fc:	2000      	movs	r0, #0
 80098fe:	f7f6 ffa5 	bl	800084c <__aeabi_ddiv>
 8009902:	4652      	mov	r2, sl
 8009904:	465b      	mov	r3, fp
 8009906:	f7f6 fcbf 	bl	8000288 <__aeabi_dsub>
 800990a:	9d01      	ldr	r5, [sp, #4]
 800990c:	4682      	mov	sl, r0
 800990e:	468b      	mov	fp, r1
 8009910:	4649      	mov	r1, r9
 8009912:	4640      	mov	r0, r8
 8009914:	f7f7 f920 	bl	8000b58 <__aeabi_d2iz>
 8009918:	4606      	mov	r6, r0
 800991a:	f7f6 fe03 	bl	8000524 <__aeabi_i2d>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4640      	mov	r0, r8
 8009924:	4649      	mov	r1, r9
 8009926:	f7f6 fcaf 	bl	8000288 <__aeabi_dsub>
 800992a:	3630      	adds	r6, #48	; 0x30
 800992c:	f805 6b01 	strb.w	r6, [r5], #1
 8009930:	4652      	mov	r2, sl
 8009932:	465b      	mov	r3, fp
 8009934:	4680      	mov	r8, r0
 8009936:	4689      	mov	r9, r1
 8009938:	f7f7 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800993c:	2800      	cmp	r0, #0
 800993e:	d163      	bne.n	8009a08 <_dtoa_r+0x608>
 8009940:	4642      	mov	r2, r8
 8009942:	464b      	mov	r3, r9
 8009944:	4936      	ldr	r1, [pc, #216]	; (8009a20 <_dtoa_r+0x620>)
 8009946:	2000      	movs	r0, #0
 8009948:	f7f6 fc9e 	bl	8000288 <__aeabi_dsub>
 800994c:	4652      	mov	r2, sl
 800994e:	465b      	mov	r3, fp
 8009950:	f7f7 f8c4 	bl	8000adc <__aeabi_dcmplt>
 8009954:	2800      	cmp	r0, #0
 8009956:	f040 80b5 	bne.w	8009ac4 <_dtoa_r+0x6c4>
 800995a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800995c:	429d      	cmp	r5, r3
 800995e:	d081      	beq.n	8009864 <_dtoa_r+0x464>
 8009960:	4b30      	ldr	r3, [pc, #192]	; (8009a24 <_dtoa_r+0x624>)
 8009962:	2200      	movs	r2, #0
 8009964:	4650      	mov	r0, sl
 8009966:	4659      	mov	r1, fp
 8009968:	f7f6 fe46 	bl	80005f8 <__aeabi_dmul>
 800996c:	4b2d      	ldr	r3, [pc, #180]	; (8009a24 <_dtoa_r+0x624>)
 800996e:	4682      	mov	sl, r0
 8009970:	468b      	mov	fp, r1
 8009972:	4640      	mov	r0, r8
 8009974:	4649      	mov	r1, r9
 8009976:	2200      	movs	r2, #0
 8009978:	f7f6 fe3e 	bl	80005f8 <__aeabi_dmul>
 800997c:	4680      	mov	r8, r0
 800997e:	4689      	mov	r9, r1
 8009980:	e7c6      	b.n	8009910 <_dtoa_r+0x510>
 8009982:	4650      	mov	r0, sl
 8009984:	4659      	mov	r1, fp
 8009986:	f7f6 fe37 	bl	80005f8 <__aeabi_dmul>
 800998a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800998c:	9d01      	ldr	r5, [sp, #4]
 800998e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009990:	4682      	mov	sl, r0
 8009992:	468b      	mov	fp, r1
 8009994:	4649      	mov	r1, r9
 8009996:	4640      	mov	r0, r8
 8009998:	f7f7 f8de 	bl	8000b58 <__aeabi_d2iz>
 800999c:	4606      	mov	r6, r0
 800999e:	f7f6 fdc1 	bl	8000524 <__aeabi_i2d>
 80099a2:	3630      	adds	r6, #48	; 0x30
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	4640      	mov	r0, r8
 80099aa:	4649      	mov	r1, r9
 80099ac:	f7f6 fc6c 	bl	8000288 <__aeabi_dsub>
 80099b0:	f805 6b01 	strb.w	r6, [r5], #1
 80099b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099b6:	429d      	cmp	r5, r3
 80099b8:	4680      	mov	r8, r0
 80099ba:	4689      	mov	r9, r1
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	d124      	bne.n	8009a0c <_dtoa_r+0x60c>
 80099c2:	4b1b      	ldr	r3, [pc, #108]	; (8009a30 <_dtoa_r+0x630>)
 80099c4:	4650      	mov	r0, sl
 80099c6:	4659      	mov	r1, fp
 80099c8:	f7f6 fc60 	bl	800028c <__adddf3>
 80099cc:	4602      	mov	r2, r0
 80099ce:	460b      	mov	r3, r1
 80099d0:	4640      	mov	r0, r8
 80099d2:	4649      	mov	r1, r9
 80099d4:	f7f7 f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 80099d8:	2800      	cmp	r0, #0
 80099da:	d173      	bne.n	8009ac4 <_dtoa_r+0x6c4>
 80099dc:	4652      	mov	r2, sl
 80099de:	465b      	mov	r3, fp
 80099e0:	4913      	ldr	r1, [pc, #76]	; (8009a30 <_dtoa_r+0x630>)
 80099e2:	2000      	movs	r0, #0
 80099e4:	f7f6 fc50 	bl	8000288 <__aeabi_dsub>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	4640      	mov	r0, r8
 80099ee:	4649      	mov	r1, r9
 80099f0:	f7f7 f874 	bl	8000adc <__aeabi_dcmplt>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	f43f af35 	beq.w	8009864 <_dtoa_r+0x464>
 80099fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80099fc:	1e6b      	subs	r3, r5, #1
 80099fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a04:	2b30      	cmp	r3, #48	; 0x30
 8009a06:	d0f8      	beq.n	80099fa <_dtoa_r+0x5fa>
 8009a08:	9700      	str	r7, [sp, #0]
 8009a0a:	e049      	b.n	8009aa0 <_dtoa_r+0x6a0>
 8009a0c:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <_dtoa_r+0x624>)
 8009a0e:	f7f6 fdf3 	bl	80005f8 <__aeabi_dmul>
 8009a12:	4680      	mov	r8, r0
 8009a14:	4689      	mov	r9, r1
 8009a16:	e7bd      	b.n	8009994 <_dtoa_r+0x594>
 8009a18:	0800dab8 	.word	0x0800dab8
 8009a1c:	0800da90 	.word	0x0800da90
 8009a20:	3ff00000 	.word	0x3ff00000
 8009a24:	40240000 	.word	0x40240000
 8009a28:	401c0000 	.word	0x401c0000
 8009a2c:	40140000 	.word	0x40140000
 8009a30:	3fe00000 	.word	0x3fe00000
 8009a34:	9d01      	ldr	r5, [sp, #4]
 8009a36:	4656      	mov	r6, sl
 8009a38:	465f      	mov	r7, fp
 8009a3a:	4642      	mov	r2, r8
 8009a3c:	464b      	mov	r3, r9
 8009a3e:	4630      	mov	r0, r6
 8009a40:	4639      	mov	r1, r7
 8009a42:	f7f6 ff03 	bl	800084c <__aeabi_ddiv>
 8009a46:	f7f7 f887 	bl	8000b58 <__aeabi_d2iz>
 8009a4a:	4682      	mov	sl, r0
 8009a4c:	f7f6 fd6a 	bl	8000524 <__aeabi_i2d>
 8009a50:	4642      	mov	r2, r8
 8009a52:	464b      	mov	r3, r9
 8009a54:	f7f6 fdd0 	bl	80005f8 <__aeabi_dmul>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	4639      	mov	r1, r7
 8009a60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009a64:	f7f6 fc10 	bl	8000288 <__aeabi_dsub>
 8009a68:	f805 6b01 	strb.w	r6, [r5], #1
 8009a6c:	9e01      	ldr	r6, [sp, #4]
 8009a6e:	9f03      	ldr	r7, [sp, #12]
 8009a70:	1bae      	subs	r6, r5, r6
 8009a72:	42b7      	cmp	r7, r6
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	d135      	bne.n	8009ae6 <_dtoa_r+0x6e6>
 8009a7a:	f7f6 fc07 	bl	800028c <__adddf3>
 8009a7e:	4642      	mov	r2, r8
 8009a80:	464b      	mov	r3, r9
 8009a82:	4606      	mov	r6, r0
 8009a84:	460f      	mov	r7, r1
 8009a86:	f7f7 f847 	bl	8000b18 <__aeabi_dcmpgt>
 8009a8a:	b9d0      	cbnz	r0, 8009ac2 <_dtoa_r+0x6c2>
 8009a8c:	4642      	mov	r2, r8
 8009a8e:	464b      	mov	r3, r9
 8009a90:	4630      	mov	r0, r6
 8009a92:	4639      	mov	r1, r7
 8009a94:	f7f7 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a98:	b110      	cbz	r0, 8009aa0 <_dtoa_r+0x6a0>
 8009a9a:	f01a 0f01 	tst.w	sl, #1
 8009a9e:	d110      	bne.n	8009ac2 <_dtoa_r+0x6c2>
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	ee18 1a10 	vmov	r1, s16
 8009aa6:	f000 fae5 	bl	800a074 <_Bfree>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	9800      	ldr	r0, [sp, #0]
 8009aae:	702b      	strb	r3, [r5, #0]
 8009ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	6018      	str	r0, [r3, #0]
 8009ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f43f acf1 	beq.w	80094a0 <_dtoa_r+0xa0>
 8009abe:	601d      	str	r5, [r3, #0]
 8009ac0:	e4ee      	b.n	80094a0 <_dtoa_r+0xa0>
 8009ac2:	9f00      	ldr	r7, [sp, #0]
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	461d      	mov	r5, r3
 8009ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009acc:	2a39      	cmp	r2, #57	; 0x39
 8009ace:	d106      	bne.n	8009ade <_dtoa_r+0x6de>
 8009ad0:	9a01      	ldr	r2, [sp, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d1f7      	bne.n	8009ac6 <_dtoa_r+0x6c6>
 8009ad6:	9901      	ldr	r1, [sp, #4]
 8009ad8:	2230      	movs	r2, #48	; 0x30
 8009ada:	3701      	adds	r7, #1
 8009adc:	700a      	strb	r2, [r1, #0]
 8009ade:	781a      	ldrb	r2, [r3, #0]
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	701a      	strb	r2, [r3, #0]
 8009ae4:	e790      	b.n	8009a08 <_dtoa_r+0x608>
 8009ae6:	4ba6      	ldr	r3, [pc, #664]	; (8009d80 <_dtoa_r+0x980>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f7f6 fd85 	bl	80005f8 <__aeabi_dmul>
 8009aee:	2200      	movs	r2, #0
 8009af0:	2300      	movs	r3, #0
 8009af2:	4606      	mov	r6, r0
 8009af4:	460f      	mov	r7, r1
 8009af6:	f7f6 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d09d      	beq.n	8009a3a <_dtoa_r+0x63a>
 8009afe:	e7cf      	b.n	8009aa0 <_dtoa_r+0x6a0>
 8009b00:	9a08      	ldr	r2, [sp, #32]
 8009b02:	2a00      	cmp	r2, #0
 8009b04:	f000 80d7 	beq.w	8009cb6 <_dtoa_r+0x8b6>
 8009b08:	9a06      	ldr	r2, [sp, #24]
 8009b0a:	2a01      	cmp	r2, #1
 8009b0c:	f300 80ba 	bgt.w	8009c84 <_dtoa_r+0x884>
 8009b10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	f000 80b2 	beq.w	8009c7c <_dtoa_r+0x87c>
 8009b18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b1c:	9e07      	ldr	r6, [sp, #28]
 8009b1e:	9d04      	ldr	r5, [sp, #16]
 8009b20:	9a04      	ldr	r2, [sp, #16]
 8009b22:	441a      	add	r2, r3
 8009b24:	9204      	str	r2, [sp, #16]
 8009b26:	9a05      	ldr	r2, [sp, #20]
 8009b28:	2101      	movs	r1, #1
 8009b2a:	441a      	add	r2, r3
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	9205      	str	r2, [sp, #20]
 8009b30:	f000 fb58 	bl	800a1e4 <__i2b>
 8009b34:	4607      	mov	r7, r0
 8009b36:	2d00      	cmp	r5, #0
 8009b38:	dd0c      	ble.n	8009b54 <_dtoa_r+0x754>
 8009b3a:	9b05      	ldr	r3, [sp, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	dd09      	ble.n	8009b54 <_dtoa_r+0x754>
 8009b40:	42ab      	cmp	r3, r5
 8009b42:	9a04      	ldr	r2, [sp, #16]
 8009b44:	bfa8      	it	ge
 8009b46:	462b      	movge	r3, r5
 8009b48:	1ad2      	subs	r2, r2, r3
 8009b4a:	9204      	str	r2, [sp, #16]
 8009b4c:	9a05      	ldr	r2, [sp, #20]
 8009b4e:	1aed      	subs	r5, r5, r3
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	9305      	str	r3, [sp, #20]
 8009b54:	9b07      	ldr	r3, [sp, #28]
 8009b56:	b31b      	cbz	r3, 8009ba0 <_dtoa_r+0x7a0>
 8009b58:	9b08      	ldr	r3, [sp, #32]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f000 80af 	beq.w	8009cbe <_dtoa_r+0x8be>
 8009b60:	2e00      	cmp	r6, #0
 8009b62:	dd13      	ble.n	8009b8c <_dtoa_r+0x78c>
 8009b64:	4639      	mov	r1, r7
 8009b66:	4632      	mov	r2, r6
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f000 fbfb 	bl	800a364 <__pow5mult>
 8009b6e:	ee18 2a10 	vmov	r2, s16
 8009b72:	4601      	mov	r1, r0
 8009b74:	4607      	mov	r7, r0
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 fb4a 	bl	800a210 <__multiply>
 8009b7c:	ee18 1a10 	vmov	r1, s16
 8009b80:	4680      	mov	r8, r0
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 fa76 	bl	800a074 <_Bfree>
 8009b88:	ee08 8a10 	vmov	s16, r8
 8009b8c:	9b07      	ldr	r3, [sp, #28]
 8009b8e:	1b9a      	subs	r2, r3, r6
 8009b90:	d006      	beq.n	8009ba0 <_dtoa_r+0x7a0>
 8009b92:	ee18 1a10 	vmov	r1, s16
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 fbe4 	bl	800a364 <__pow5mult>
 8009b9c:	ee08 0a10 	vmov	s16, r0
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f000 fb1e 	bl	800a1e4 <__i2b>
 8009ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	4606      	mov	r6, r0
 8009bae:	f340 8088 	ble.w	8009cc2 <_dtoa_r+0x8c2>
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	4601      	mov	r1, r0
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f000 fbd4 	bl	800a364 <__pow5mult>
 8009bbc:	9b06      	ldr	r3, [sp, #24]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	f340 8081 	ble.w	8009cc8 <_dtoa_r+0x8c8>
 8009bc6:	f04f 0800 	mov.w	r8, #0
 8009bca:	6933      	ldr	r3, [r6, #16]
 8009bcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009bd0:	6918      	ldr	r0, [r3, #16]
 8009bd2:	f000 fab7 	bl	800a144 <__hi0bits>
 8009bd6:	f1c0 0020 	rsb	r0, r0, #32
 8009bda:	9b05      	ldr	r3, [sp, #20]
 8009bdc:	4418      	add	r0, r3
 8009bde:	f010 001f 	ands.w	r0, r0, #31
 8009be2:	f000 8092 	beq.w	8009d0a <_dtoa_r+0x90a>
 8009be6:	f1c0 0320 	rsb	r3, r0, #32
 8009bea:	2b04      	cmp	r3, #4
 8009bec:	f340 808a 	ble.w	8009d04 <_dtoa_r+0x904>
 8009bf0:	f1c0 001c 	rsb	r0, r0, #28
 8009bf4:	9b04      	ldr	r3, [sp, #16]
 8009bf6:	4403      	add	r3, r0
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	9b05      	ldr	r3, [sp, #20]
 8009bfc:	4403      	add	r3, r0
 8009bfe:	4405      	add	r5, r0
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	9b04      	ldr	r3, [sp, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	dd07      	ble.n	8009c18 <_dtoa_r+0x818>
 8009c08:	ee18 1a10 	vmov	r1, s16
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 fc02 	bl	800a418 <__lshift>
 8009c14:	ee08 0a10 	vmov	s16, r0
 8009c18:	9b05      	ldr	r3, [sp, #20]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	dd05      	ble.n	8009c2a <_dtoa_r+0x82a>
 8009c1e:	4631      	mov	r1, r6
 8009c20:	461a      	mov	r2, r3
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 fbf8 	bl	800a418 <__lshift>
 8009c28:	4606      	mov	r6, r0
 8009c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d06e      	beq.n	8009d0e <_dtoa_r+0x90e>
 8009c30:	ee18 0a10 	vmov	r0, s16
 8009c34:	4631      	mov	r1, r6
 8009c36:	f000 fc5f 	bl	800a4f8 <__mcmp>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	da67      	bge.n	8009d0e <_dtoa_r+0x90e>
 8009c3e:	9b00      	ldr	r3, [sp, #0]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	ee18 1a10 	vmov	r1, s16
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	220a      	movs	r2, #10
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f000 fa33 	bl	800a0b8 <__multadd>
 8009c52:	9b08      	ldr	r3, [sp, #32]
 8009c54:	ee08 0a10 	vmov	s16, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 81b1 	beq.w	8009fc0 <_dtoa_r+0xbc0>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	4639      	mov	r1, r7
 8009c62:	220a      	movs	r2, #10
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fa27 	bl	800a0b8 <__multadd>
 8009c6a:	9b02      	ldr	r3, [sp, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	4607      	mov	r7, r0
 8009c70:	f300 808e 	bgt.w	8009d90 <_dtoa_r+0x990>
 8009c74:	9b06      	ldr	r3, [sp, #24]
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	dc51      	bgt.n	8009d1e <_dtoa_r+0x91e>
 8009c7a:	e089      	b.n	8009d90 <_dtoa_r+0x990>
 8009c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c82:	e74b      	b.n	8009b1c <_dtoa_r+0x71c>
 8009c84:	9b03      	ldr	r3, [sp, #12]
 8009c86:	1e5e      	subs	r6, r3, #1
 8009c88:	9b07      	ldr	r3, [sp, #28]
 8009c8a:	42b3      	cmp	r3, r6
 8009c8c:	bfbf      	itttt	lt
 8009c8e:	9b07      	ldrlt	r3, [sp, #28]
 8009c90:	9607      	strlt	r6, [sp, #28]
 8009c92:	1af2      	sublt	r2, r6, r3
 8009c94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c96:	bfb6      	itet	lt
 8009c98:	189b      	addlt	r3, r3, r2
 8009c9a:	1b9e      	subge	r6, r3, r6
 8009c9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009c9e:	9b03      	ldr	r3, [sp, #12]
 8009ca0:	bfb8      	it	lt
 8009ca2:	2600      	movlt	r6, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	bfb7      	itett	lt
 8009ca8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009cac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009cb0:	1a9d      	sublt	r5, r3, r2
 8009cb2:	2300      	movlt	r3, #0
 8009cb4:	e734      	b.n	8009b20 <_dtoa_r+0x720>
 8009cb6:	9e07      	ldr	r6, [sp, #28]
 8009cb8:	9d04      	ldr	r5, [sp, #16]
 8009cba:	9f08      	ldr	r7, [sp, #32]
 8009cbc:	e73b      	b.n	8009b36 <_dtoa_r+0x736>
 8009cbe:	9a07      	ldr	r2, [sp, #28]
 8009cc0:	e767      	b.n	8009b92 <_dtoa_r+0x792>
 8009cc2:	9b06      	ldr	r3, [sp, #24]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	dc18      	bgt.n	8009cfa <_dtoa_r+0x8fa>
 8009cc8:	f1ba 0f00 	cmp.w	sl, #0
 8009ccc:	d115      	bne.n	8009cfa <_dtoa_r+0x8fa>
 8009cce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cd2:	b993      	cbnz	r3, 8009cfa <_dtoa_r+0x8fa>
 8009cd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cd8:	0d1b      	lsrs	r3, r3, #20
 8009cda:	051b      	lsls	r3, r3, #20
 8009cdc:	b183      	cbz	r3, 8009d00 <_dtoa_r+0x900>
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	9b05      	ldr	r3, [sp, #20]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	9305      	str	r3, [sp, #20]
 8009cea:	f04f 0801 	mov.w	r8, #1
 8009cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f47f af6a 	bne.w	8009bca <_dtoa_r+0x7ca>
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	e76f      	b.n	8009bda <_dtoa_r+0x7da>
 8009cfa:	f04f 0800 	mov.w	r8, #0
 8009cfe:	e7f6      	b.n	8009cee <_dtoa_r+0x8ee>
 8009d00:	4698      	mov	r8, r3
 8009d02:	e7f4      	b.n	8009cee <_dtoa_r+0x8ee>
 8009d04:	f43f af7d 	beq.w	8009c02 <_dtoa_r+0x802>
 8009d08:	4618      	mov	r0, r3
 8009d0a:	301c      	adds	r0, #28
 8009d0c:	e772      	b.n	8009bf4 <_dtoa_r+0x7f4>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	dc37      	bgt.n	8009d84 <_dtoa_r+0x984>
 8009d14:	9b06      	ldr	r3, [sp, #24]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	dd34      	ble.n	8009d84 <_dtoa_r+0x984>
 8009d1a:	9b03      	ldr	r3, [sp, #12]
 8009d1c:	9302      	str	r3, [sp, #8]
 8009d1e:	9b02      	ldr	r3, [sp, #8]
 8009d20:	b96b      	cbnz	r3, 8009d3e <_dtoa_r+0x93e>
 8009d22:	4631      	mov	r1, r6
 8009d24:	2205      	movs	r2, #5
 8009d26:	4620      	mov	r0, r4
 8009d28:	f000 f9c6 	bl	800a0b8 <__multadd>
 8009d2c:	4601      	mov	r1, r0
 8009d2e:	4606      	mov	r6, r0
 8009d30:	ee18 0a10 	vmov	r0, s16
 8009d34:	f000 fbe0 	bl	800a4f8 <__mcmp>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	f73f adbb 	bgt.w	80098b4 <_dtoa_r+0x4b4>
 8009d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d40:	9d01      	ldr	r5, [sp, #4]
 8009d42:	43db      	mvns	r3, r3
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	f04f 0800 	mov.w	r8, #0
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 f991 	bl	800a074 <_Bfree>
 8009d52:	2f00      	cmp	r7, #0
 8009d54:	f43f aea4 	beq.w	8009aa0 <_dtoa_r+0x6a0>
 8009d58:	f1b8 0f00 	cmp.w	r8, #0
 8009d5c:	d005      	beq.n	8009d6a <_dtoa_r+0x96a>
 8009d5e:	45b8      	cmp	r8, r7
 8009d60:	d003      	beq.n	8009d6a <_dtoa_r+0x96a>
 8009d62:	4641      	mov	r1, r8
 8009d64:	4620      	mov	r0, r4
 8009d66:	f000 f985 	bl	800a074 <_Bfree>
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 f981 	bl	800a074 <_Bfree>
 8009d72:	e695      	b.n	8009aa0 <_dtoa_r+0x6a0>
 8009d74:	2600      	movs	r6, #0
 8009d76:	4637      	mov	r7, r6
 8009d78:	e7e1      	b.n	8009d3e <_dtoa_r+0x93e>
 8009d7a:	9700      	str	r7, [sp, #0]
 8009d7c:	4637      	mov	r7, r6
 8009d7e:	e599      	b.n	80098b4 <_dtoa_r+0x4b4>
 8009d80:	40240000 	.word	0x40240000
 8009d84:	9b08      	ldr	r3, [sp, #32]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 80ca 	beq.w	8009f20 <_dtoa_r+0xb20>
 8009d8c:	9b03      	ldr	r3, [sp, #12]
 8009d8e:	9302      	str	r3, [sp, #8]
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	dd05      	ble.n	8009da0 <_dtoa_r+0x9a0>
 8009d94:	4639      	mov	r1, r7
 8009d96:	462a      	mov	r2, r5
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 fb3d 	bl	800a418 <__lshift>
 8009d9e:	4607      	mov	r7, r0
 8009da0:	f1b8 0f00 	cmp.w	r8, #0
 8009da4:	d05b      	beq.n	8009e5e <_dtoa_r+0xa5e>
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 f923 	bl	8009ff4 <_Balloc>
 8009dae:	4605      	mov	r5, r0
 8009db0:	b928      	cbnz	r0, 8009dbe <_dtoa_r+0x9be>
 8009db2:	4b87      	ldr	r3, [pc, #540]	; (8009fd0 <_dtoa_r+0xbd0>)
 8009db4:	4602      	mov	r2, r0
 8009db6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009dba:	f7ff bb3b 	b.w	8009434 <_dtoa_r+0x34>
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	3202      	adds	r2, #2
 8009dc2:	0092      	lsls	r2, r2, #2
 8009dc4:	f107 010c 	add.w	r1, r7, #12
 8009dc8:	300c      	adds	r0, #12
 8009dca:	f7fe fdd9 	bl	8008980 <memcpy>
 8009dce:	2201      	movs	r2, #1
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f000 fb20 	bl	800a418 <__lshift>
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	f103 0901 	add.w	r9, r3, #1
 8009dde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009de2:	4413      	add	r3, r2
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	f00a 0301 	and.w	r3, sl, #1
 8009dea:	46b8      	mov	r8, r7
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	4607      	mov	r7, r0
 8009df0:	4631      	mov	r1, r6
 8009df2:	ee18 0a10 	vmov	r0, s16
 8009df6:	f7ff fa77 	bl	80092e8 <quorem>
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	9002      	str	r0, [sp, #8]
 8009dfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e02:	ee18 0a10 	vmov	r0, s16
 8009e06:	f000 fb77 	bl	800a4f8 <__mcmp>
 8009e0a:	463a      	mov	r2, r7
 8009e0c:	9003      	str	r0, [sp, #12]
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 fb8d 	bl	800a530 <__mdiff>
 8009e16:	68c2      	ldr	r2, [r0, #12]
 8009e18:	f109 3bff 	add.w	fp, r9, #4294967295
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	bb02      	cbnz	r2, 8009e62 <_dtoa_r+0xa62>
 8009e20:	4601      	mov	r1, r0
 8009e22:	ee18 0a10 	vmov	r0, s16
 8009e26:	f000 fb67 	bl	800a4f8 <__mcmp>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	4620      	mov	r0, r4
 8009e30:	9207      	str	r2, [sp, #28]
 8009e32:	f000 f91f 	bl	800a074 <_Bfree>
 8009e36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009e3a:	ea43 0102 	orr.w	r1, r3, r2
 8009e3e:	9b04      	ldr	r3, [sp, #16]
 8009e40:	430b      	orrs	r3, r1
 8009e42:	464d      	mov	r5, r9
 8009e44:	d10f      	bne.n	8009e66 <_dtoa_r+0xa66>
 8009e46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e4a:	d02a      	beq.n	8009ea2 <_dtoa_r+0xaa2>
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	dd02      	ble.n	8009e58 <_dtoa_r+0xa58>
 8009e52:	9b02      	ldr	r3, [sp, #8]
 8009e54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009e58:	f88b a000 	strb.w	sl, [fp]
 8009e5c:	e775      	b.n	8009d4a <_dtoa_r+0x94a>
 8009e5e:	4638      	mov	r0, r7
 8009e60:	e7ba      	b.n	8009dd8 <_dtoa_r+0x9d8>
 8009e62:	2201      	movs	r2, #1
 8009e64:	e7e2      	b.n	8009e2c <_dtoa_r+0xa2c>
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	db04      	blt.n	8009e76 <_dtoa_r+0xa76>
 8009e6c:	9906      	ldr	r1, [sp, #24]
 8009e6e:	430b      	orrs	r3, r1
 8009e70:	9904      	ldr	r1, [sp, #16]
 8009e72:	430b      	orrs	r3, r1
 8009e74:	d122      	bne.n	8009ebc <_dtoa_r+0xabc>
 8009e76:	2a00      	cmp	r2, #0
 8009e78:	ddee      	ble.n	8009e58 <_dtoa_r+0xa58>
 8009e7a:	ee18 1a10 	vmov	r1, s16
 8009e7e:	2201      	movs	r2, #1
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 fac9 	bl	800a418 <__lshift>
 8009e86:	4631      	mov	r1, r6
 8009e88:	ee08 0a10 	vmov	s16, r0
 8009e8c:	f000 fb34 	bl	800a4f8 <__mcmp>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	dc03      	bgt.n	8009e9c <_dtoa_r+0xa9c>
 8009e94:	d1e0      	bne.n	8009e58 <_dtoa_r+0xa58>
 8009e96:	f01a 0f01 	tst.w	sl, #1
 8009e9a:	d0dd      	beq.n	8009e58 <_dtoa_r+0xa58>
 8009e9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ea0:	d1d7      	bne.n	8009e52 <_dtoa_r+0xa52>
 8009ea2:	2339      	movs	r3, #57	; 0x39
 8009ea4:	f88b 3000 	strb.w	r3, [fp]
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	461d      	mov	r5, r3
 8009eac:	3b01      	subs	r3, #1
 8009eae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009eb2:	2a39      	cmp	r2, #57	; 0x39
 8009eb4:	d071      	beq.n	8009f9a <_dtoa_r+0xb9a>
 8009eb6:	3201      	adds	r2, #1
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	e746      	b.n	8009d4a <_dtoa_r+0x94a>
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	dd07      	ble.n	8009ed0 <_dtoa_r+0xad0>
 8009ec0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ec4:	d0ed      	beq.n	8009ea2 <_dtoa_r+0xaa2>
 8009ec6:	f10a 0301 	add.w	r3, sl, #1
 8009eca:	f88b 3000 	strb.w	r3, [fp]
 8009ece:	e73c      	b.n	8009d4a <_dtoa_r+0x94a>
 8009ed0:	9b05      	ldr	r3, [sp, #20]
 8009ed2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009ed6:	4599      	cmp	r9, r3
 8009ed8:	d047      	beq.n	8009f6a <_dtoa_r+0xb6a>
 8009eda:	ee18 1a10 	vmov	r1, s16
 8009ede:	2300      	movs	r3, #0
 8009ee0:	220a      	movs	r2, #10
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 f8e8 	bl	800a0b8 <__multadd>
 8009ee8:	45b8      	cmp	r8, r7
 8009eea:	ee08 0a10 	vmov	s16, r0
 8009eee:	f04f 0300 	mov.w	r3, #0
 8009ef2:	f04f 020a 	mov.w	r2, #10
 8009ef6:	4641      	mov	r1, r8
 8009ef8:	4620      	mov	r0, r4
 8009efa:	d106      	bne.n	8009f0a <_dtoa_r+0xb0a>
 8009efc:	f000 f8dc 	bl	800a0b8 <__multadd>
 8009f00:	4680      	mov	r8, r0
 8009f02:	4607      	mov	r7, r0
 8009f04:	f109 0901 	add.w	r9, r9, #1
 8009f08:	e772      	b.n	8009df0 <_dtoa_r+0x9f0>
 8009f0a:	f000 f8d5 	bl	800a0b8 <__multadd>
 8009f0e:	4639      	mov	r1, r7
 8009f10:	4680      	mov	r8, r0
 8009f12:	2300      	movs	r3, #0
 8009f14:	220a      	movs	r2, #10
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 f8ce 	bl	800a0b8 <__multadd>
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	e7f1      	b.n	8009f04 <_dtoa_r+0xb04>
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	9302      	str	r3, [sp, #8]
 8009f24:	9d01      	ldr	r5, [sp, #4]
 8009f26:	ee18 0a10 	vmov	r0, s16
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	f7ff f9dc 	bl	80092e8 <quorem>
 8009f30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f34:	9b01      	ldr	r3, [sp, #4]
 8009f36:	f805 ab01 	strb.w	sl, [r5], #1
 8009f3a:	1aea      	subs	r2, r5, r3
 8009f3c:	9b02      	ldr	r3, [sp, #8]
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	dd09      	ble.n	8009f56 <_dtoa_r+0xb56>
 8009f42:	ee18 1a10 	vmov	r1, s16
 8009f46:	2300      	movs	r3, #0
 8009f48:	220a      	movs	r2, #10
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 f8b4 	bl	800a0b8 <__multadd>
 8009f50:	ee08 0a10 	vmov	s16, r0
 8009f54:	e7e7      	b.n	8009f26 <_dtoa_r+0xb26>
 8009f56:	9b02      	ldr	r3, [sp, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bfc8      	it	gt
 8009f5c:	461d      	movgt	r5, r3
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	bfd8      	it	le
 8009f62:	2501      	movle	r5, #1
 8009f64:	441d      	add	r5, r3
 8009f66:	f04f 0800 	mov.w	r8, #0
 8009f6a:	ee18 1a10 	vmov	r1, s16
 8009f6e:	2201      	movs	r2, #1
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 fa51 	bl	800a418 <__lshift>
 8009f76:	4631      	mov	r1, r6
 8009f78:	ee08 0a10 	vmov	s16, r0
 8009f7c:	f000 fabc 	bl	800a4f8 <__mcmp>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	dc91      	bgt.n	8009ea8 <_dtoa_r+0xaa8>
 8009f84:	d102      	bne.n	8009f8c <_dtoa_r+0xb8c>
 8009f86:	f01a 0f01 	tst.w	sl, #1
 8009f8a:	d18d      	bne.n	8009ea8 <_dtoa_r+0xaa8>
 8009f8c:	462b      	mov	r3, r5
 8009f8e:	461d      	mov	r5, r3
 8009f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f94:	2a30      	cmp	r2, #48	; 0x30
 8009f96:	d0fa      	beq.n	8009f8e <_dtoa_r+0xb8e>
 8009f98:	e6d7      	b.n	8009d4a <_dtoa_r+0x94a>
 8009f9a:	9a01      	ldr	r2, [sp, #4]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d184      	bne.n	8009eaa <_dtoa_r+0xaaa>
 8009fa0:	9b00      	ldr	r3, [sp, #0]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	2331      	movs	r3, #49	; 0x31
 8009fa8:	7013      	strb	r3, [r2, #0]
 8009faa:	e6ce      	b.n	8009d4a <_dtoa_r+0x94a>
 8009fac:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <_dtoa_r+0xbd4>)
 8009fae:	f7ff ba95 	b.w	80094dc <_dtoa_r+0xdc>
 8009fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f47f aa6e 	bne.w	8009496 <_dtoa_r+0x96>
 8009fba:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <_dtoa_r+0xbd8>)
 8009fbc:	f7ff ba8e 	b.w	80094dc <_dtoa_r+0xdc>
 8009fc0:	9b02      	ldr	r3, [sp, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	dcae      	bgt.n	8009f24 <_dtoa_r+0xb24>
 8009fc6:	9b06      	ldr	r3, [sp, #24]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	f73f aea8 	bgt.w	8009d1e <_dtoa_r+0x91e>
 8009fce:	e7a9      	b.n	8009f24 <_dtoa_r+0xb24>
 8009fd0:	0800da23 	.word	0x0800da23
 8009fd4:	0800d980 	.word	0x0800d980
 8009fd8:	0800d9a4 	.word	0x0800d9a4

08009fdc <_localeconv_r>:
 8009fdc:	4800      	ldr	r0, [pc, #0]	; (8009fe0 <_localeconv_r+0x4>)
 8009fde:	4770      	bx	lr
 8009fe0:	200002dc 	.word	0x200002dc

08009fe4 <malloc>:
 8009fe4:	4b02      	ldr	r3, [pc, #8]	; (8009ff0 <malloc+0xc>)
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	f000 bc09 	b.w	800a800 <_malloc_r>
 8009fee:	bf00      	nop
 8009ff0:	20000188 	.word	0x20000188

08009ff4 <_Balloc>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	b976      	cbnz	r6, 800a01c <_Balloc+0x28>
 8009ffe:	2010      	movs	r0, #16
 800a000:	f7ff fff0 	bl	8009fe4 <malloc>
 800a004:	4602      	mov	r2, r0
 800a006:	6260      	str	r0, [r4, #36]	; 0x24
 800a008:	b920      	cbnz	r0, 800a014 <_Balloc+0x20>
 800a00a:	4b18      	ldr	r3, [pc, #96]	; (800a06c <_Balloc+0x78>)
 800a00c:	4818      	ldr	r0, [pc, #96]	; (800a070 <_Balloc+0x7c>)
 800a00e:	2166      	movs	r1, #102	; 0x66
 800a010:	f000 fdd6 	bl	800abc0 <__assert_func>
 800a014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a018:	6006      	str	r6, [r0, #0]
 800a01a:	60c6      	str	r6, [r0, #12]
 800a01c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a01e:	68f3      	ldr	r3, [r6, #12]
 800a020:	b183      	cbz	r3, 800a044 <_Balloc+0x50>
 800a022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a02a:	b9b8      	cbnz	r0, 800a05c <_Balloc+0x68>
 800a02c:	2101      	movs	r1, #1
 800a02e:	fa01 f605 	lsl.w	r6, r1, r5
 800a032:	1d72      	adds	r2, r6, #5
 800a034:	0092      	lsls	r2, r2, #2
 800a036:	4620      	mov	r0, r4
 800a038:	f000 fb60 	bl	800a6fc <_calloc_r>
 800a03c:	b160      	cbz	r0, 800a058 <_Balloc+0x64>
 800a03e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a042:	e00e      	b.n	800a062 <_Balloc+0x6e>
 800a044:	2221      	movs	r2, #33	; 0x21
 800a046:	2104      	movs	r1, #4
 800a048:	4620      	mov	r0, r4
 800a04a:	f000 fb57 	bl	800a6fc <_calloc_r>
 800a04e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a050:	60f0      	str	r0, [r6, #12]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e4      	bne.n	800a022 <_Balloc+0x2e>
 800a058:	2000      	movs	r0, #0
 800a05a:	bd70      	pop	{r4, r5, r6, pc}
 800a05c:	6802      	ldr	r2, [r0, #0]
 800a05e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a062:	2300      	movs	r3, #0
 800a064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a068:	e7f7      	b.n	800a05a <_Balloc+0x66>
 800a06a:	bf00      	nop
 800a06c:	0800d9b1 	.word	0x0800d9b1
 800a070:	0800da34 	.word	0x0800da34

0800a074 <_Bfree>:
 800a074:	b570      	push	{r4, r5, r6, lr}
 800a076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a078:	4605      	mov	r5, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	b976      	cbnz	r6, 800a09c <_Bfree+0x28>
 800a07e:	2010      	movs	r0, #16
 800a080:	f7ff ffb0 	bl	8009fe4 <malloc>
 800a084:	4602      	mov	r2, r0
 800a086:	6268      	str	r0, [r5, #36]	; 0x24
 800a088:	b920      	cbnz	r0, 800a094 <_Bfree+0x20>
 800a08a:	4b09      	ldr	r3, [pc, #36]	; (800a0b0 <_Bfree+0x3c>)
 800a08c:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <_Bfree+0x40>)
 800a08e:	218a      	movs	r1, #138	; 0x8a
 800a090:	f000 fd96 	bl	800abc0 <__assert_func>
 800a094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a098:	6006      	str	r6, [r0, #0]
 800a09a:	60c6      	str	r6, [r0, #12]
 800a09c:	b13c      	cbz	r4, 800a0ae <_Bfree+0x3a>
 800a09e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0a0:	6862      	ldr	r2, [r4, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0a8:	6021      	str	r1, [r4, #0]
 800a0aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}
 800a0b0:	0800d9b1 	.word	0x0800d9b1
 800a0b4:	0800da34 	.word	0x0800da34

0800a0b8 <__multadd>:
 800a0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0bc:	690d      	ldr	r5, [r1, #16]
 800a0be:	4607      	mov	r7, r0
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	461e      	mov	r6, r3
 800a0c4:	f101 0c14 	add.w	ip, r1, #20
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	f8dc 3000 	ldr.w	r3, [ip]
 800a0ce:	b299      	uxth	r1, r3
 800a0d0:	fb02 6101 	mla	r1, r2, r1, r6
 800a0d4:	0c1e      	lsrs	r6, r3, #16
 800a0d6:	0c0b      	lsrs	r3, r1, #16
 800a0d8:	fb02 3306 	mla	r3, r2, r6, r3
 800a0dc:	b289      	uxth	r1, r1
 800a0de:	3001      	adds	r0, #1
 800a0e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0e4:	4285      	cmp	r5, r0
 800a0e6:	f84c 1b04 	str.w	r1, [ip], #4
 800a0ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0ee:	dcec      	bgt.n	800a0ca <__multadd+0x12>
 800a0f0:	b30e      	cbz	r6, 800a136 <__multadd+0x7e>
 800a0f2:	68a3      	ldr	r3, [r4, #8]
 800a0f4:	42ab      	cmp	r3, r5
 800a0f6:	dc19      	bgt.n	800a12c <__multadd+0x74>
 800a0f8:	6861      	ldr	r1, [r4, #4]
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	3101      	adds	r1, #1
 800a0fe:	f7ff ff79 	bl	8009ff4 <_Balloc>
 800a102:	4680      	mov	r8, r0
 800a104:	b928      	cbnz	r0, 800a112 <__multadd+0x5a>
 800a106:	4602      	mov	r2, r0
 800a108:	4b0c      	ldr	r3, [pc, #48]	; (800a13c <__multadd+0x84>)
 800a10a:	480d      	ldr	r0, [pc, #52]	; (800a140 <__multadd+0x88>)
 800a10c:	21b5      	movs	r1, #181	; 0xb5
 800a10e:	f000 fd57 	bl	800abc0 <__assert_func>
 800a112:	6922      	ldr	r2, [r4, #16]
 800a114:	3202      	adds	r2, #2
 800a116:	f104 010c 	add.w	r1, r4, #12
 800a11a:	0092      	lsls	r2, r2, #2
 800a11c:	300c      	adds	r0, #12
 800a11e:	f7fe fc2f 	bl	8008980 <memcpy>
 800a122:	4621      	mov	r1, r4
 800a124:	4638      	mov	r0, r7
 800a126:	f7ff ffa5 	bl	800a074 <_Bfree>
 800a12a:	4644      	mov	r4, r8
 800a12c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a130:	3501      	adds	r5, #1
 800a132:	615e      	str	r6, [r3, #20]
 800a134:	6125      	str	r5, [r4, #16]
 800a136:	4620      	mov	r0, r4
 800a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a13c:	0800da23 	.word	0x0800da23
 800a140:	0800da34 	.word	0x0800da34

0800a144 <__hi0bits>:
 800a144:	0c03      	lsrs	r3, r0, #16
 800a146:	041b      	lsls	r3, r3, #16
 800a148:	b9d3      	cbnz	r3, 800a180 <__hi0bits+0x3c>
 800a14a:	0400      	lsls	r0, r0, #16
 800a14c:	2310      	movs	r3, #16
 800a14e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a152:	bf04      	itt	eq
 800a154:	0200      	lsleq	r0, r0, #8
 800a156:	3308      	addeq	r3, #8
 800a158:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a15c:	bf04      	itt	eq
 800a15e:	0100      	lsleq	r0, r0, #4
 800a160:	3304      	addeq	r3, #4
 800a162:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a166:	bf04      	itt	eq
 800a168:	0080      	lsleq	r0, r0, #2
 800a16a:	3302      	addeq	r3, #2
 800a16c:	2800      	cmp	r0, #0
 800a16e:	db05      	blt.n	800a17c <__hi0bits+0x38>
 800a170:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a174:	f103 0301 	add.w	r3, r3, #1
 800a178:	bf08      	it	eq
 800a17a:	2320      	moveq	r3, #32
 800a17c:	4618      	mov	r0, r3
 800a17e:	4770      	bx	lr
 800a180:	2300      	movs	r3, #0
 800a182:	e7e4      	b.n	800a14e <__hi0bits+0xa>

0800a184 <__lo0bits>:
 800a184:	6803      	ldr	r3, [r0, #0]
 800a186:	f013 0207 	ands.w	r2, r3, #7
 800a18a:	4601      	mov	r1, r0
 800a18c:	d00b      	beq.n	800a1a6 <__lo0bits+0x22>
 800a18e:	07da      	lsls	r2, r3, #31
 800a190:	d423      	bmi.n	800a1da <__lo0bits+0x56>
 800a192:	0798      	lsls	r0, r3, #30
 800a194:	bf49      	itett	mi
 800a196:	085b      	lsrmi	r3, r3, #1
 800a198:	089b      	lsrpl	r3, r3, #2
 800a19a:	2001      	movmi	r0, #1
 800a19c:	600b      	strmi	r3, [r1, #0]
 800a19e:	bf5c      	itt	pl
 800a1a0:	600b      	strpl	r3, [r1, #0]
 800a1a2:	2002      	movpl	r0, #2
 800a1a4:	4770      	bx	lr
 800a1a6:	b298      	uxth	r0, r3
 800a1a8:	b9a8      	cbnz	r0, 800a1d6 <__lo0bits+0x52>
 800a1aa:	0c1b      	lsrs	r3, r3, #16
 800a1ac:	2010      	movs	r0, #16
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	b90a      	cbnz	r2, 800a1b6 <__lo0bits+0x32>
 800a1b2:	3008      	adds	r0, #8
 800a1b4:	0a1b      	lsrs	r3, r3, #8
 800a1b6:	071a      	lsls	r2, r3, #28
 800a1b8:	bf04      	itt	eq
 800a1ba:	091b      	lsreq	r3, r3, #4
 800a1bc:	3004      	addeq	r0, #4
 800a1be:	079a      	lsls	r2, r3, #30
 800a1c0:	bf04      	itt	eq
 800a1c2:	089b      	lsreq	r3, r3, #2
 800a1c4:	3002      	addeq	r0, #2
 800a1c6:	07da      	lsls	r2, r3, #31
 800a1c8:	d403      	bmi.n	800a1d2 <__lo0bits+0x4e>
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	f100 0001 	add.w	r0, r0, #1
 800a1d0:	d005      	beq.n	800a1de <__lo0bits+0x5a>
 800a1d2:	600b      	str	r3, [r1, #0]
 800a1d4:	4770      	bx	lr
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	e7e9      	b.n	800a1ae <__lo0bits+0x2a>
 800a1da:	2000      	movs	r0, #0
 800a1dc:	4770      	bx	lr
 800a1de:	2020      	movs	r0, #32
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <__i2b>:
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	f7ff ff03 	bl	8009ff4 <_Balloc>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	b928      	cbnz	r0, 800a1fe <__i2b+0x1a>
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <__i2b+0x24>)
 800a1f4:	4805      	ldr	r0, [pc, #20]	; (800a20c <__i2b+0x28>)
 800a1f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a1fa:	f000 fce1 	bl	800abc0 <__assert_func>
 800a1fe:	2301      	movs	r3, #1
 800a200:	6144      	str	r4, [r0, #20]
 800a202:	6103      	str	r3, [r0, #16]
 800a204:	bd10      	pop	{r4, pc}
 800a206:	bf00      	nop
 800a208:	0800da23 	.word	0x0800da23
 800a20c:	0800da34 	.word	0x0800da34

0800a210 <__multiply>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	4691      	mov	r9, r2
 800a216:	690a      	ldr	r2, [r1, #16]
 800a218:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	bfb8      	it	lt
 800a220:	460b      	movlt	r3, r1
 800a222:	460c      	mov	r4, r1
 800a224:	bfbc      	itt	lt
 800a226:	464c      	movlt	r4, r9
 800a228:	4699      	movlt	r9, r3
 800a22a:	6927      	ldr	r7, [r4, #16]
 800a22c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a230:	68a3      	ldr	r3, [r4, #8]
 800a232:	6861      	ldr	r1, [r4, #4]
 800a234:	eb07 060a 	add.w	r6, r7, sl
 800a238:	42b3      	cmp	r3, r6
 800a23a:	b085      	sub	sp, #20
 800a23c:	bfb8      	it	lt
 800a23e:	3101      	addlt	r1, #1
 800a240:	f7ff fed8 	bl	8009ff4 <_Balloc>
 800a244:	b930      	cbnz	r0, 800a254 <__multiply+0x44>
 800a246:	4602      	mov	r2, r0
 800a248:	4b44      	ldr	r3, [pc, #272]	; (800a35c <__multiply+0x14c>)
 800a24a:	4845      	ldr	r0, [pc, #276]	; (800a360 <__multiply+0x150>)
 800a24c:	f240 115d 	movw	r1, #349	; 0x15d
 800a250:	f000 fcb6 	bl	800abc0 <__assert_func>
 800a254:	f100 0514 	add.w	r5, r0, #20
 800a258:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a25c:	462b      	mov	r3, r5
 800a25e:	2200      	movs	r2, #0
 800a260:	4543      	cmp	r3, r8
 800a262:	d321      	bcc.n	800a2a8 <__multiply+0x98>
 800a264:	f104 0314 	add.w	r3, r4, #20
 800a268:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a26c:	f109 0314 	add.w	r3, r9, #20
 800a270:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a274:	9202      	str	r2, [sp, #8]
 800a276:	1b3a      	subs	r2, r7, r4
 800a278:	3a15      	subs	r2, #21
 800a27a:	f022 0203 	bic.w	r2, r2, #3
 800a27e:	3204      	adds	r2, #4
 800a280:	f104 0115 	add.w	r1, r4, #21
 800a284:	428f      	cmp	r7, r1
 800a286:	bf38      	it	cc
 800a288:	2204      	movcc	r2, #4
 800a28a:	9201      	str	r2, [sp, #4]
 800a28c:	9a02      	ldr	r2, [sp, #8]
 800a28e:	9303      	str	r3, [sp, #12]
 800a290:	429a      	cmp	r2, r3
 800a292:	d80c      	bhi.n	800a2ae <__multiply+0x9e>
 800a294:	2e00      	cmp	r6, #0
 800a296:	dd03      	ble.n	800a2a0 <__multiply+0x90>
 800a298:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d05a      	beq.n	800a356 <__multiply+0x146>
 800a2a0:	6106      	str	r6, [r0, #16]
 800a2a2:	b005      	add	sp, #20
 800a2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a8:	f843 2b04 	str.w	r2, [r3], #4
 800a2ac:	e7d8      	b.n	800a260 <__multiply+0x50>
 800a2ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2b2:	f1ba 0f00 	cmp.w	sl, #0
 800a2b6:	d024      	beq.n	800a302 <__multiply+0xf2>
 800a2b8:	f104 0e14 	add.w	lr, r4, #20
 800a2bc:	46a9      	mov	r9, r5
 800a2be:	f04f 0c00 	mov.w	ip, #0
 800a2c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a2c6:	f8d9 1000 	ldr.w	r1, [r9]
 800a2ca:	fa1f fb82 	uxth.w	fp, r2
 800a2ce:	b289      	uxth	r1, r1
 800a2d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a2d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a2d8:	f8d9 2000 	ldr.w	r2, [r9]
 800a2dc:	4461      	add	r1, ip
 800a2de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a2e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2ea:	b289      	uxth	r1, r1
 800a2ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2f0:	4577      	cmp	r7, lr
 800a2f2:	f849 1b04 	str.w	r1, [r9], #4
 800a2f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2fa:	d8e2      	bhi.n	800a2c2 <__multiply+0xb2>
 800a2fc:	9a01      	ldr	r2, [sp, #4]
 800a2fe:	f845 c002 	str.w	ip, [r5, r2]
 800a302:	9a03      	ldr	r2, [sp, #12]
 800a304:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a308:	3304      	adds	r3, #4
 800a30a:	f1b9 0f00 	cmp.w	r9, #0
 800a30e:	d020      	beq.n	800a352 <__multiply+0x142>
 800a310:	6829      	ldr	r1, [r5, #0]
 800a312:	f104 0c14 	add.w	ip, r4, #20
 800a316:	46ae      	mov	lr, r5
 800a318:	f04f 0a00 	mov.w	sl, #0
 800a31c:	f8bc b000 	ldrh.w	fp, [ip]
 800a320:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a324:	fb09 220b 	mla	r2, r9, fp, r2
 800a328:	4492      	add	sl, r2
 800a32a:	b289      	uxth	r1, r1
 800a32c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a330:	f84e 1b04 	str.w	r1, [lr], #4
 800a334:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a338:	f8be 1000 	ldrh.w	r1, [lr]
 800a33c:	0c12      	lsrs	r2, r2, #16
 800a33e:	fb09 1102 	mla	r1, r9, r2, r1
 800a342:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a346:	4567      	cmp	r7, ip
 800a348:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a34c:	d8e6      	bhi.n	800a31c <__multiply+0x10c>
 800a34e:	9a01      	ldr	r2, [sp, #4]
 800a350:	50a9      	str	r1, [r5, r2]
 800a352:	3504      	adds	r5, #4
 800a354:	e79a      	b.n	800a28c <__multiply+0x7c>
 800a356:	3e01      	subs	r6, #1
 800a358:	e79c      	b.n	800a294 <__multiply+0x84>
 800a35a:	bf00      	nop
 800a35c:	0800da23 	.word	0x0800da23
 800a360:	0800da34 	.word	0x0800da34

0800a364 <__pow5mult>:
 800a364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a368:	4615      	mov	r5, r2
 800a36a:	f012 0203 	ands.w	r2, r2, #3
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	d007      	beq.n	800a384 <__pow5mult+0x20>
 800a374:	4c25      	ldr	r4, [pc, #148]	; (800a40c <__pow5mult+0xa8>)
 800a376:	3a01      	subs	r2, #1
 800a378:	2300      	movs	r3, #0
 800a37a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a37e:	f7ff fe9b 	bl	800a0b8 <__multadd>
 800a382:	4607      	mov	r7, r0
 800a384:	10ad      	asrs	r5, r5, #2
 800a386:	d03d      	beq.n	800a404 <__pow5mult+0xa0>
 800a388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a38a:	b97c      	cbnz	r4, 800a3ac <__pow5mult+0x48>
 800a38c:	2010      	movs	r0, #16
 800a38e:	f7ff fe29 	bl	8009fe4 <malloc>
 800a392:	4602      	mov	r2, r0
 800a394:	6270      	str	r0, [r6, #36]	; 0x24
 800a396:	b928      	cbnz	r0, 800a3a4 <__pow5mult+0x40>
 800a398:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <__pow5mult+0xac>)
 800a39a:	481e      	ldr	r0, [pc, #120]	; (800a414 <__pow5mult+0xb0>)
 800a39c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3a0:	f000 fc0e 	bl	800abc0 <__assert_func>
 800a3a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3a8:	6004      	str	r4, [r0, #0]
 800a3aa:	60c4      	str	r4, [r0, #12]
 800a3ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3b4:	b94c      	cbnz	r4, 800a3ca <__pow5mult+0x66>
 800a3b6:	f240 2171 	movw	r1, #625	; 0x271
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7ff ff12 	bl	800a1e4 <__i2b>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	6003      	str	r3, [r0, #0]
 800a3ca:	f04f 0900 	mov.w	r9, #0
 800a3ce:	07eb      	lsls	r3, r5, #31
 800a3d0:	d50a      	bpl.n	800a3e8 <__pow5mult+0x84>
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff ff1a 	bl	800a210 <__multiply>
 800a3dc:	4639      	mov	r1, r7
 800a3de:	4680      	mov	r8, r0
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7ff fe47 	bl	800a074 <_Bfree>
 800a3e6:	4647      	mov	r7, r8
 800a3e8:	106d      	asrs	r5, r5, #1
 800a3ea:	d00b      	beq.n	800a404 <__pow5mult+0xa0>
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	b938      	cbnz	r0, 800a400 <__pow5mult+0x9c>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7ff ff0b 	bl	800a210 <__multiply>
 800a3fa:	6020      	str	r0, [r4, #0]
 800a3fc:	f8c0 9000 	str.w	r9, [r0]
 800a400:	4604      	mov	r4, r0
 800a402:	e7e4      	b.n	800a3ce <__pow5mult+0x6a>
 800a404:	4638      	mov	r0, r7
 800a406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a40a:	bf00      	nop
 800a40c:	0800db80 	.word	0x0800db80
 800a410:	0800d9b1 	.word	0x0800d9b1
 800a414:	0800da34 	.word	0x0800da34

0800a418 <__lshift>:
 800a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	460c      	mov	r4, r1
 800a41e:	6849      	ldr	r1, [r1, #4]
 800a420:	6923      	ldr	r3, [r4, #16]
 800a422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a426:	68a3      	ldr	r3, [r4, #8]
 800a428:	4607      	mov	r7, r0
 800a42a:	4691      	mov	r9, r2
 800a42c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a430:	f108 0601 	add.w	r6, r8, #1
 800a434:	42b3      	cmp	r3, r6
 800a436:	db0b      	blt.n	800a450 <__lshift+0x38>
 800a438:	4638      	mov	r0, r7
 800a43a:	f7ff fddb 	bl	8009ff4 <_Balloc>
 800a43e:	4605      	mov	r5, r0
 800a440:	b948      	cbnz	r0, 800a456 <__lshift+0x3e>
 800a442:	4602      	mov	r2, r0
 800a444:	4b2a      	ldr	r3, [pc, #168]	; (800a4f0 <__lshift+0xd8>)
 800a446:	482b      	ldr	r0, [pc, #172]	; (800a4f4 <__lshift+0xdc>)
 800a448:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a44c:	f000 fbb8 	bl	800abc0 <__assert_func>
 800a450:	3101      	adds	r1, #1
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	e7ee      	b.n	800a434 <__lshift+0x1c>
 800a456:	2300      	movs	r3, #0
 800a458:	f100 0114 	add.w	r1, r0, #20
 800a45c:	f100 0210 	add.w	r2, r0, #16
 800a460:	4618      	mov	r0, r3
 800a462:	4553      	cmp	r3, sl
 800a464:	db37      	blt.n	800a4d6 <__lshift+0xbe>
 800a466:	6920      	ldr	r0, [r4, #16]
 800a468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a46c:	f104 0314 	add.w	r3, r4, #20
 800a470:	f019 091f 	ands.w	r9, r9, #31
 800a474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a478:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a47c:	d02f      	beq.n	800a4de <__lshift+0xc6>
 800a47e:	f1c9 0e20 	rsb	lr, r9, #32
 800a482:	468a      	mov	sl, r1
 800a484:	f04f 0c00 	mov.w	ip, #0
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	fa02 f209 	lsl.w	r2, r2, r9
 800a48e:	ea42 020c 	orr.w	r2, r2, ip
 800a492:	f84a 2b04 	str.w	r2, [sl], #4
 800a496:	f853 2b04 	ldr.w	r2, [r3], #4
 800a49a:	4298      	cmp	r0, r3
 800a49c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a4a0:	d8f2      	bhi.n	800a488 <__lshift+0x70>
 800a4a2:	1b03      	subs	r3, r0, r4
 800a4a4:	3b15      	subs	r3, #21
 800a4a6:	f023 0303 	bic.w	r3, r3, #3
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	f104 0215 	add.w	r2, r4, #21
 800a4b0:	4290      	cmp	r0, r2
 800a4b2:	bf38      	it	cc
 800a4b4:	2304      	movcc	r3, #4
 800a4b6:	f841 c003 	str.w	ip, [r1, r3]
 800a4ba:	f1bc 0f00 	cmp.w	ip, #0
 800a4be:	d001      	beq.n	800a4c4 <__lshift+0xac>
 800a4c0:	f108 0602 	add.w	r6, r8, #2
 800a4c4:	3e01      	subs	r6, #1
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	612e      	str	r6, [r5, #16]
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	f7ff fdd2 	bl	800a074 <_Bfree>
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4da:	3301      	adds	r3, #1
 800a4dc:	e7c1      	b.n	800a462 <__lshift+0x4a>
 800a4de:	3904      	subs	r1, #4
 800a4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4e8:	4298      	cmp	r0, r3
 800a4ea:	d8f9      	bhi.n	800a4e0 <__lshift+0xc8>
 800a4ec:	e7ea      	b.n	800a4c4 <__lshift+0xac>
 800a4ee:	bf00      	nop
 800a4f0:	0800da23 	.word	0x0800da23
 800a4f4:	0800da34 	.word	0x0800da34

0800a4f8 <__mcmp>:
 800a4f8:	b530      	push	{r4, r5, lr}
 800a4fa:	6902      	ldr	r2, [r0, #16]
 800a4fc:	690c      	ldr	r4, [r1, #16]
 800a4fe:	1b12      	subs	r2, r2, r4
 800a500:	d10e      	bne.n	800a520 <__mcmp+0x28>
 800a502:	f100 0314 	add.w	r3, r0, #20
 800a506:	3114      	adds	r1, #20
 800a508:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a50c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a510:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a514:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a518:	42a5      	cmp	r5, r4
 800a51a:	d003      	beq.n	800a524 <__mcmp+0x2c>
 800a51c:	d305      	bcc.n	800a52a <__mcmp+0x32>
 800a51e:	2201      	movs	r2, #1
 800a520:	4610      	mov	r0, r2
 800a522:	bd30      	pop	{r4, r5, pc}
 800a524:	4283      	cmp	r3, r0
 800a526:	d3f3      	bcc.n	800a510 <__mcmp+0x18>
 800a528:	e7fa      	b.n	800a520 <__mcmp+0x28>
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295
 800a52e:	e7f7      	b.n	800a520 <__mcmp+0x28>

0800a530 <__mdiff>:
 800a530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	460c      	mov	r4, r1
 800a536:	4606      	mov	r6, r0
 800a538:	4611      	mov	r1, r2
 800a53a:	4620      	mov	r0, r4
 800a53c:	4690      	mov	r8, r2
 800a53e:	f7ff ffdb 	bl	800a4f8 <__mcmp>
 800a542:	1e05      	subs	r5, r0, #0
 800a544:	d110      	bne.n	800a568 <__mdiff+0x38>
 800a546:	4629      	mov	r1, r5
 800a548:	4630      	mov	r0, r6
 800a54a:	f7ff fd53 	bl	8009ff4 <_Balloc>
 800a54e:	b930      	cbnz	r0, 800a55e <__mdiff+0x2e>
 800a550:	4b3a      	ldr	r3, [pc, #232]	; (800a63c <__mdiff+0x10c>)
 800a552:	4602      	mov	r2, r0
 800a554:	f240 2132 	movw	r1, #562	; 0x232
 800a558:	4839      	ldr	r0, [pc, #228]	; (800a640 <__mdiff+0x110>)
 800a55a:	f000 fb31 	bl	800abc0 <__assert_func>
 800a55e:	2301      	movs	r3, #1
 800a560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a568:	bfa4      	itt	ge
 800a56a:	4643      	movge	r3, r8
 800a56c:	46a0      	movge	r8, r4
 800a56e:	4630      	mov	r0, r6
 800a570:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a574:	bfa6      	itte	ge
 800a576:	461c      	movge	r4, r3
 800a578:	2500      	movge	r5, #0
 800a57a:	2501      	movlt	r5, #1
 800a57c:	f7ff fd3a 	bl	8009ff4 <_Balloc>
 800a580:	b920      	cbnz	r0, 800a58c <__mdiff+0x5c>
 800a582:	4b2e      	ldr	r3, [pc, #184]	; (800a63c <__mdiff+0x10c>)
 800a584:	4602      	mov	r2, r0
 800a586:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a58a:	e7e5      	b.n	800a558 <__mdiff+0x28>
 800a58c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a590:	6926      	ldr	r6, [r4, #16]
 800a592:	60c5      	str	r5, [r0, #12]
 800a594:	f104 0914 	add.w	r9, r4, #20
 800a598:	f108 0514 	add.w	r5, r8, #20
 800a59c:	f100 0e14 	add.w	lr, r0, #20
 800a5a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a5a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a5a8:	f108 0210 	add.w	r2, r8, #16
 800a5ac:	46f2      	mov	sl, lr
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5b8:	fa1f f883 	uxth.w	r8, r3
 800a5bc:	fa11 f18b 	uxtah	r1, r1, fp
 800a5c0:	0c1b      	lsrs	r3, r3, #16
 800a5c2:	eba1 0808 	sub.w	r8, r1, r8
 800a5c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5ce:	fa1f f888 	uxth.w	r8, r8
 800a5d2:	1419      	asrs	r1, r3, #16
 800a5d4:	454e      	cmp	r6, r9
 800a5d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5da:	f84a 3b04 	str.w	r3, [sl], #4
 800a5de:	d8e7      	bhi.n	800a5b0 <__mdiff+0x80>
 800a5e0:	1b33      	subs	r3, r6, r4
 800a5e2:	3b15      	subs	r3, #21
 800a5e4:	f023 0303 	bic.w	r3, r3, #3
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	3415      	adds	r4, #21
 800a5ec:	42a6      	cmp	r6, r4
 800a5ee:	bf38      	it	cc
 800a5f0:	2304      	movcc	r3, #4
 800a5f2:	441d      	add	r5, r3
 800a5f4:	4473      	add	r3, lr
 800a5f6:	469e      	mov	lr, r3
 800a5f8:	462e      	mov	r6, r5
 800a5fa:	4566      	cmp	r6, ip
 800a5fc:	d30e      	bcc.n	800a61c <__mdiff+0xec>
 800a5fe:	f10c 0203 	add.w	r2, ip, #3
 800a602:	1b52      	subs	r2, r2, r5
 800a604:	f022 0203 	bic.w	r2, r2, #3
 800a608:	3d03      	subs	r5, #3
 800a60a:	45ac      	cmp	ip, r5
 800a60c:	bf38      	it	cc
 800a60e:	2200      	movcc	r2, #0
 800a610:	441a      	add	r2, r3
 800a612:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a616:	b17b      	cbz	r3, 800a638 <__mdiff+0x108>
 800a618:	6107      	str	r7, [r0, #16]
 800a61a:	e7a3      	b.n	800a564 <__mdiff+0x34>
 800a61c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a620:	fa11 f288 	uxtah	r2, r1, r8
 800a624:	1414      	asrs	r4, r2, #16
 800a626:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a62a:	b292      	uxth	r2, r2
 800a62c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a630:	f84e 2b04 	str.w	r2, [lr], #4
 800a634:	1421      	asrs	r1, r4, #16
 800a636:	e7e0      	b.n	800a5fa <__mdiff+0xca>
 800a638:	3f01      	subs	r7, #1
 800a63a:	e7ea      	b.n	800a612 <__mdiff+0xe2>
 800a63c:	0800da23 	.word	0x0800da23
 800a640:	0800da34 	.word	0x0800da34

0800a644 <__d2b>:
 800a644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a648:	4689      	mov	r9, r1
 800a64a:	2101      	movs	r1, #1
 800a64c:	ec57 6b10 	vmov	r6, r7, d0
 800a650:	4690      	mov	r8, r2
 800a652:	f7ff fccf 	bl	8009ff4 <_Balloc>
 800a656:	4604      	mov	r4, r0
 800a658:	b930      	cbnz	r0, 800a668 <__d2b+0x24>
 800a65a:	4602      	mov	r2, r0
 800a65c:	4b25      	ldr	r3, [pc, #148]	; (800a6f4 <__d2b+0xb0>)
 800a65e:	4826      	ldr	r0, [pc, #152]	; (800a6f8 <__d2b+0xb4>)
 800a660:	f240 310a 	movw	r1, #778	; 0x30a
 800a664:	f000 faac 	bl	800abc0 <__assert_func>
 800a668:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a66c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a670:	bb35      	cbnz	r5, 800a6c0 <__d2b+0x7c>
 800a672:	2e00      	cmp	r6, #0
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	d028      	beq.n	800a6ca <__d2b+0x86>
 800a678:	4668      	mov	r0, sp
 800a67a:	9600      	str	r6, [sp, #0]
 800a67c:	f7ff fd82 	bl	800a184 <__lo0bits>
 800a680:	9900      	ldr	r1, [sp, #0]
 800a682:	b300      	cbz	r0, 800a6c6 <__d2b+0x82>
 800a684:	9a01      	ldr	r2, [sp, #4]
 800a686:	f1c0 0320 	rsb	r3, r0, #32
 800a68a:	fa02 f303 	lsl.w	r3, r2, r3
 800a68e:	430b      	orrs	r3, r1
 800a690:	40c2      	lsrs	r2, r0
 800a692:	6163      	str	r3, [r4, #20]
 800a694:	9201      	str	r2, [sp, #4]
 800a696:	9b01      	ldr	r3, [sp, #4]
 800a698:	61a3      	str	r3, [r4, #24]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	bf14      	ite	ne
 800a69e:	2202      	movne	r2, #2
 800a6a0:	2201      	moveq	r2, #1
 800a6a2:	6122      	str	r2, [r4, #16]
 800a6a4:	b1d5      	cbz	r5, 800a6dc <__d2b+0x98>
 800a6a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6aa:	4405      	add	r5, r0
 800a6ac:	f8c9 5000 	str.w	r5, [r9]
 800a6b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6b4:	f8c8 0000 	str.w	r0, [r8]
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	b003      	add	sp, #12
 800a6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6c4:	e7d5      	b.n	800a672 <__d2b+0x2e>
 800a6c6:	6161      	str	r1, [r4, #20]
 800a6c8:	e7e5      	b.n	800a696 <__d2b+0x52>
 800a6ca:	a801      	add	r0, sp, #4
 800a6cc:	f7ff fd5a 	bl	800a184 <__lo0bits>
 800a6d0:	9b01      	ldr	r3, [sp, #4]
 800a6d2:	6163      	str	r3, [r4, #20]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	6122      	str	r2, [r4, #16]
 800a6d8:	3020      	adds	r0, #32
 800a6da:	e7e3      	b.n	800a6a4 <__d2b+0x60>
 800a6dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6e4:	f8c9 0000 	str.w	r0, [r9]
 800a6e8:	6918      	ldr	r0, [r3, #16]
 800a6ea:	f7ff fd2b 	bl	800a144 <__hi0bits>
 800a6ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6f2:	e7df      	b.n	800a6b4 <__d2b+0x70>
 800a6f4:	0800da23 	.word	0x0800da23
 800a6f8:	0800da34 	.word	0x0800da34

0800a6fc <_calloc_r>:
 800a6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6fe:	fba1 2402 	umull	r2, r4, r1, r2
 800a702:	b94c      	cbnz	r4, 800a718 <_calloc_r+0x1c>
 800a704:	4611      	mov	r1, r2
 800a706:	9201      	str	r2, [sp, #4]
 800a708:	f000 f87a 	bl	800a800 <_malloc_r>
 800a70c:	9a01      	ldr	r2, [sp, #4]
 800a70e:	4605      	mov	r5, r0
 800a710:	b930      	cbnz	r0, 800a720 <_calloc_r+0x24>
 800a712:	4628      	mov	r0, r5
 800a714:	b003      	add	sp, #12
 800a716:	bd30      	pop	{r4, r5, pc}
 800a718:	220c      	movs	r2, #12
 800a71a:	6002      	str	r2, [r0, #0]
 800a71c:	2500      	movs	r5, #0
 800a71e:	e7f8      	b.n	800a712 <_calloc_r+0x16>
 800a720:	4621      	mov	r1, r4
 800a722:	f7fe f93b 	bl	800899c <memset>
 800a726:	e7f4      	b.n	800a712 <_calloc_r+0x16>

0800a728 <_free_r>:
 800a728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a72a:	2900      	cmp	r1, #0
 800a72c:	d044      	beq.n	800a7b8 <_free_r+0x90>
 800a72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a732:	9001      	str	r0, [sp, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f1a1 0404 	sub.w	r4, r1, #4
 800a73a:	bfb8      	it	lt
 800a73c:	18e4      	addlt	r4, r4, r3
 800a73e:	f000 fa9b 	bl	800ac78 <__malloc_lock>
 800a742:	4a1e      	ldr	r2, [pc, #120]	; (800a7bc <_free_r+0x94>)
 800a744:	9801      	ldr	r0, [sp, #4]
 800a746:	6813      	ldr	r3, [r2, #0]
 800a748:	b933      	cbnz	r3, 800a758 <_free_r+0x30>
 800a74a:	6063      	str	r3, [r4, #4]
 800a74c:	6014      	str	r4, [r2, #0]
 800a74e:	b003      	add	sp, #12
 800a750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a754:	f000 ba96 	b.w	800ac84 <__malloc_unlock>
 800a758:	42a3      	cmp	r3, r4
 800a75a:	d908      	bls.n	800a76e <_free_r+0x46>
 800a75c:	6825      	ldr	r5, [r4, #0]
 800a75e:	1961      	adds	r1, r4, r5
 800a760:	428b      	cmp	r3, r1
 800a762:	bf01      	itttt	eq
 800a764:	6819      	ldreq	r1, [r3, #0]
 800a766:	685b      	ldreq	r3, [r3, #4]
 800a768:	1949      	addeq	r1, r1, r5
 800a76a:	6021      	streq	r1, [r4, #0]
 800a76c:	e7ed      	b.n	800a74a <_free_r+0x22>
 800a76e:	461a      	mov	r2, r3
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	b10b      	cbz	r3, 800a778 <_free_r+0x50>
 800a774:	42a3      	cmp	r3, r4
 800a776:	d9fa      	bls.n	800a76e <_free_r+0x46>
 800a778:	6811      	ldr	r1, [r2, #0]
 800a77a:	1855      	adds	r5, r2, r1
 800a77c:	42a5      	cmp	r5, r4
 800a77e:	d10b      	bne.n	800a798 <_free_r+0x70>
 800a780:	6824      	ldr	r4, [r4, #0]
 800a782:	4421      	add	r1, r4
 800a784:	1854      	adds	r4, r2, r1
 800a786:	42a3      	cmp	r3, r4
 800a788:	6011      	str	r1, [r2, #0]
 800a78a:	d1e0      	bne.n	800a74e <_free_r+0x26>
 800a78c:	681c      	ldr	r4, [r3, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	6053      	str	r3, [r2, #4]
 800a792:	4421      	add	r1, r4
 800a794:	6011      	str	r1, [r2, #0]
 800a796:	e7da      	b.n	800a74e <_free_r+0x26>
 800a798:	d902      	bls.n	800a7a0 <_free_r+0x78>
 800a79a:	230c      	movs	r3, #12
 800a79c:	6003      	str	r3, [r0, #0]
 800a79e:	e7d6      	b.n	800a74e <_free_r+0x26>
 800a7a0:	6825      	ldr	r5, [r4, #0]
 800a7a2:	1961      	adds	r1, r4, r5
 800a7a4:	428b      	cmp	r3, r1
 800a7a6:	bf04      	itt	eq
 800a7a8:	6819      	ldreq	r1, [r3, #0]
 800a7aa:	685b      	ldreq	r3, [r3, #4]
 800a7ac:	6063      	str	r3, [r4, #4]
 800a7ae:	bf04      	itt	eq
 800a7b0:	1949      	addeq	r1, r1, r5
 800a7b2:	6021      	streq	r1, [r4, #0]
 800a7b4:	6054      	str	r4, [r2, #4]
 800a7b6:	e7ca      	b.n	800a74e <_free_r+0x26>
 800a7b8:	b003      	add	sp, #12
 800a7ba:	bd30      	pop	{r4, r5, pc}
 800a7bc:	200009c0 	.word	0x200009c0

0800a7c0 <sbrk_aligned>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	4e0e      	ldr	r6, [pc, #56]	; (800a7fc <sbrk_aligned+0x3c>)
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	6831      	ldr	r1, [r6, #0]
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	b911      	cbnz	r1, 800a7d2 <sbrk_aligned+0x12>
 800a7cc:	f000 f9e8 	bl	800aba0 <_sbrk_r>
 800a7d0:	6030      	str	r0, [r6, #0]
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f000 f9e3 	bl	800aba0 <_sbrk_r>
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	d00a      	beq.n	800a7f4 <sbrk_aligned+0x34>
 800a7de:	1cc4      	adds	r4, r0, #3
 800a7e0:	f024 0403 	bic.w	r4, r4, #3
 800a7e4:	42a0      	cmp	r0, r4
 800a7e6:	d007      	beq.n	800a7f8 <sbrk_aligned+0x38>
 800a7e8:	1a21      	subs	r1, r4, r0
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f000 f9d8 	bl	800aba0 <_sbrk_r>
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d101      	bne.n	800a7f8 <sbrk_aligned+0x38>
 800a7f4:	f04f 34ff 	mov.w	r4, #4294967295
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	200009c4 	.word	0x200009c4

0800a800 <_malloc_r>:
 800a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a804:	1ccd      	adds	r5, r1, #3
 800a806:	f025 0503 	bic.w	r5, r5, #3
 800a80a:	3508      	adds	r5, #8
 800a80c:	2d0c      	cmp	r5, #12
 800a80e:	bf38      	it	cc
 800a810:	250c      	movcc	r5, #12
 800a812:	2d00      	cmp	r5, #0
 800a814:	4607      	mov	r7, r0
 800a816:	db01      	blt.n	800a81c <_malloc_r+0x1c>
 800a818:	42a9      	cmp	r1, r5
 800a81a:	d905      	bls.n	800a828 <_malloc_r+0x28>
 800a81c:	230c      	movs	r3, #12
 800a81e:	603b      	str	r3, [r7, #0]
 800a820:	2600      	movs	r6, #0
 800a822:	4630      	mov	r0, r6
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a828:	4e2e      	ldr	r6, [pc, #184]	; (800a8e4 <_malloc_r+0xe4>)
 800a82a:	f000 fa25 	bl	800ac78 <__malloc_lock>
 800a82e:	6833      	ldr	r3, [r6, #0]
 800a830:	461c      	mov	r4, r3
 800a832:	bb34      	cbnz	r4, 800a882 <_malloc_r+0x82>
 800a834:	4629      	mov	r1, r5
 800a836:	4638      	mov	r0, r7
 800a838:	f7ff ffc2 	bl	800a7c0 <sbrk_aligned>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	4604      	mov	r4, r0
 800a840:	d14d      	bne.n	800a8de <_malloc_r+0xde>
 800a842:	6834      	ldr	r4, [r6, #0]
 800a844:	4626      	mov	r6, r4
 800a846:	2e00      	cmp	r6, #0
 800a848:	d140      	bne.n	800a8cc <_malloc_r+0xcc>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	4631      	mov	r1, r6
 800a84e:	4638      	mov	r0, r7
 800a850:	eb04 0803 	add.w	r8, r4, r3
 800a854:	f000 f9a4 	bl	800aba0 <_sbrk_r>
 800a858:	4580      	cmp	r8, r0
 800a85a:	d13a      	bne.n	800a8d2 <_malloc_r+0xd2>
 800a85c:	6821      	ldr	r1, [r4, #0]
 800a85e:	3503      	adds	r5, #3
 800a860:	1a6d      	subs	r5, r5, r1
 800a862:	f025 0503 	bic.w	r5, r5, #3
 800a866:	3508      	adds	r5, #8
 800a868:	2d0c      	cmp	r5, #12
 800a86a:	bf38      	it	cc
 800a86c:	250c      	movcc	r5, #12
 800a86e:	4629      	mov	r1, r5
 800a870:	4638      	mov	r0, r7
 800a872:	f7ff ffa5 	bl	800a7c0 <sbrk_aligned>
 800a876:	3001      	adds	r0, #1
 800a878:	d02b      	beq.n	800a8d2 <_malloc_r+0xd2>
 800a87a:	6823      	ldr	r3, [r4, #0]
 800a87c:	442b      	add	r3, r5
 800a87e:	6023      	str	r3, [r4, #0]
 800a880:	e00e      	b.n	800a8a0 <_malloc_r+0xa0>
 800a882:	6822      	ldr	r2, [r4, #0]
 800a884:	1b52      	subs	r2, r2, r5
 800a886:	d41e      	bmi.n	800a8c6 <_malloc_r+0xc6>
 800a888:	2a0b      	cmp	r2, #11
 800a88a:	d916      	bls.n	800a8ba <_malloc_r+0xba>
 800a88c:	1961      	adds	r1, r4, r5
 800a88e:	42a3      	cmp	r3, r4
 800a890:	6025      	str	r5, [r4, #0]
 800a892:	bf18      	it	ne
 800a894:	6059      	strne	r1, [r3, #4]
 800a896:	6863      	ldr	r3, [r4, #4]
 800a898:	bf08      	it	eq
 800a89a:	6031      	streq	r1, [r6, #0]
 800a89c:	5162      	str	r2, [r4, r5]
 800a89e:	604b      	str	r3, [r1, #4]
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	f104 060b 	add.w	r6, r4, #11
 800a8a6:	f000 f9ed 	bl	800ac84 <__malloc_unlock>
 800a8aa:	f026 0607 	bic.w	r6, r6, #7
 800a8ae:	1d23      	adds	r3, r4, #4
 800a8b0:	1af2      	subs	r2, r6, r3
 800a8b2:	d0b6      	beq.n	800a822 <_malloc_r+0x22>
 800a8b4:	1b9b      	subs	r3, r3, r6
 800a8b6:	50a3      	str	r3, [r4, r2]
 800a8b8:	e7b3      	b.n	800a822 <_malloc_r+0x22>
 800a8ba:	6862      	ldr	r2, [r4, #4]
 800a8bc:	42a3      	cmp	r3, r4
 800a8be:	bf0c      	ite	eq
 800a8c0:	6032      	streq	r2, [r6, #0]
 800a8c2:	605a      	strne	r2, [r3, #4]
 800a8c4:	e7ec      	b.n	800a8a0 <_malloc_r+0xa0>
 800a8c6:	4623      	mov	r3, r4
 800a8c8:	6864      	ldr	r4, [r4, #4]
 800a8ca:	e7b2      	b.n	800a832 <_malloc_r+0x32>
 800a8cc:	4634      	mov	r4, r6
 800a8ce:	6876      	ldr	r6, [r6, #4]
 800a8d0:	e7b9      	b.n	800a846 <_malloc_r+0x46>
 800a8d2:	230c      	movs	r3, #12
 800a8d4:	603b      	str	r3, [r7, #0]
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	f000 f9d4 	bl	800ac84 <__malloc_unlock>
 800a8dc:	e7a1      	b.n	800a822 <_malloc_r+0x22>
 800a8de:	6025      	str	r5, [r4, #0]
 800a8e0:	e7de      	b.n	800a8a0 <_malloc_r+0xa0>
 800a8e2:	bf00      	nop
 800a8e4:	200009c0 	.word	0x200009c0

0800a8e8 <__ssputs_r>:
 800a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	688e      	ldr	r6, [r1, #8]
 800a8ee:	429e      	cmp	r6, r3
 800a8f0:	4682      	mov	sl, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	4690      	mov	r8, r2
 800a8f6:	461f      	mov	r7, r3
 800a8f8:	d838      	bhi.n	800a96c <__ssputs_r+0x84>
 800a8fa:	898a      	ldrh	r2, [r1, #12]
 800a8fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a900:	d032      	beq.n	800a968 <__ssputs_r+0x80>
 800a902:	6825      	ldr	r5, [r4, #0]
 800a904:	6909      	ldr	r1, [r1, #16]
 800a906:	eba5 0901 	sub.w	r9, r5, r1
 800a90a:	6965      	ldr	r5, [r4, #20]
 800a90c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a914:	3301      	adds	r3, #1
 800a916:	444b      	add	r3, r9
 800a918:	106d      	asrs	r5, r5, #1
 800a91a:	429d      	cmp	r5, r3
 800a91c:	bf38      	it	cc
 800a91e:	461d      	movcc	r5, r3
 800a920:	0553      	lsls	r3, r2, #21
 800a922:	d531      	bpl.n	800a988 <__ssputs_r+0xa0>
 800a924:	4629      	mov	r1, r5
 800a926:	f7ff ff6b 	bl	800a800 <_malloc_r>
 800a92a:	4606      	mov	r6, r0
 800a92c:	b950      	cbnz	r0, 800a944 <__ssputs_r+0x5c>
 800a92e:	230c      	movs	r3, #12
 800a930:	f8ca 3000 	str.w	r3, [sl]
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a93a:	81a3      	strh	r3, [r4, #12]
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a944:	6921      	ldr	r1, [r4, #16]
 800a946:	464a      	mov	r2, r9
 800a948:	f7fe f81a 	bl	8008980 <memcpy>
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a956:	81a3      	strh	r3, [r4, #12]
 800a958:	6126      	str	r6, [r4, #16]
 800a95a:	6165      	str	r5, [r4, #20]
 800a95c:	444e      	add	r6, r9
 800a95e:	eba5 0509 	sub.w	r5, r5, r9
 800a962:	6026      	str	r6, [r4, #0]
 800a964:	60a5      	str	r5, [r4, #8]
 800a966:	463e      	mov	r6, r7
 800a968:	42be      	cmp	r6, r7
 800a96a:	d900      	bls.n	800a96e <__ssputs_r+0x86>
 800a96c:	463e      	mov	r6, r7
 800a96e:	6820      	ldr	r0, [r4, #0]
 800a970:	4632      	mov	r2, r6
 800a972:	4641      	mov	r1, r8
 800a974:	f000 f966 	bl	800ac44 <memmove>
 800a978:	68a3      	ldr	r3, [r4, #8]
 800a97a:	1b9b      	subs	r3, r3, r6
 800a97c:	60a3      	str	r3, [r4, #8]
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	4433      	add	r3, r6
 800a982:	6023      	str	r3, [r4, #0]
 800a984:	2000      	movs	r0, #0
 800a986:	e7db      	b.n	800a940 <__ssputs_r+0x58>
 800a988:	462a      	mov	r2, r5
 800a98a:	f000 f981 	bl	800ac90 <_realloc_r>
 800a98e:	4606      	mov	r6, r0
 800a990:	2800      	cmp	r0, #0
 800a992:	d1e1      	bne.n	800a958 <__ssputs_r+0x70>
 800a994:	6921      	ldr	r1, [r4, #16]
 800a996:	4650      	mov	r0, sl
 800a998:	f7ff fec6 	bl	800a728 <_free_r>
 800a99c:	e7c7      	b.n	800a92e <__ssputs_r+0x46>
	...

0800a9a0 <_svfiprintf_r>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	4698      	mov	r8, r3
 800a9a6:	898b      	ldrh	r3, [r1, #12]
 800a9a8:	061b      	lsls	r3, r3, #24
 800a9aa:	b09d      	sub	sp, #116	; 0x74
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	d50e      	bpl.n	800a9d2 <_svfiprintf_r+0x32>
 800a9b4:	690b      	ldr	r3, [r1, #16]
 800a9b6:	b963      	cbnz	r3, 800a9d2 <_svfiprintf_r+0x32>
 800a9b8:	2140      	movs	r1, #64	; 0x40
 800a9ba:	f7ff ff21 	bl	800a800 <_malloc_r>
 800a9be:	6028      	str	r0, [r5, #0]
 800a9c0:	6128      	str	r0, [r5, #16]
 800a9c2:	b920      	cbnz	r0, 800a9ce <_svfiprintf_r+0x2e>
 800a9c4:	230c      	movs	r3, #12
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	e0d1      	b.n	800ab72 <_svfiprintf_r+0x1d2>
 800a9ce:	2340      	movs	r3, #64	; 0x40
 800a9d0:	616b      	str	r3, [r5, #20]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d6:	2320      	movs	r3, #32
 800a9d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9e0:	2330      	movs	r3, #48	; 0x30
 800a9e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab8c <_svfiprintf_r+0x1ec>
 800a9e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9ea:	f04f 0901 	mov.w	r9, #1
 800a9ee:	4623      	mov	r3, r4
 800a9f0:	469a      	mov	sl, r3
 800a9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9f6:	b10a      	cbz	r2, 800a9fc <_svfiprintf_r+0x5c>
 800a9f8:	2a25      	cmp	r2, #37	; 0x25
 800a9fa:	d1f9      	bne.n	800a9f0 <_svfiprintf_r+0x50>
 800a9fc:	ebba 0b04 	subs.w	fp, sl, r4
 800aa00:	d00b      	beq.n	800aa1a <_svfiprintf_r+0x7a>
 800aa02:	465b      	mov	r3, fp
 800aa04:	4622      	mov	r2, r4
 800aa06:	4629      	mov	r1, r5
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f7ff ff6d 	bl	800a8e8 <__ssputs_r>
 800aa0e:	3001      	adds	r0, #1
 800aa10:	f000 80aa 	beq.w	800ab68 <_svfiprintf_r+0x1c8>
 800aa14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa16:	445a      	add	r2, fp
 800aa18:	9209      	str	r2, [sp, #36]	; 0x24
 800aa1a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 80a2 	beq.w	800ab68 <_svfiprintf_r+0x1c8>
 800aa24:	2300      	movs	r3, #0
 800aa26:	f04f 32ff 	mov.w	r2, #4294967295
 800aa2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa2e:	f10a 0a01 	add.w	sl, sl, #1
 800aa32:	9304      	str	r3, [sp, #16]
 800aa34:	9307      	str	r3, [sp, #28]
 800aa36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa3a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa3c:	4654      	mov	r4, sl
 800aa3e:	2205      	movs	r2, #5
 800aa40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa44:	4851      	ldr	r0, [pc, #324]	; (800ab8c <_svfiprintf_r+0x1ec>)
 800aa46:	f7f5 fbcb 	bl	80001e0 <memchr>
 800aa4a:	9a04      	ldr	r2, [sp, #16]
 800aa4c:	b9d8      	cbnz	r0, 800aa86 <_svfiprintf_r+0xe6>
 800aa4e:	06d0      	lsls	r0, r2, #27
 800aa50:	bf44      	itt	mi
 800aa52:	2320      	movmi	r3, #32
 800aa54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa58:	0711      	lsls	r1, r2, #28
 800aa5a:	bf44      	itt	mi
 800aa5c:	232b      	movmi	r3, #43	; 0x2b
 800aa5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa62:	f89a 3000 	ldrb.w	r3, [sl]
 800aa66:	2b2a      	cmp	r3, #42	; 0x2a
 800aa68:	d015      	beq.n	800aa96 <_svfiprintf_r+0xf6>
 800aa6a:	9a07      	ldr	r2, [sp, #28]
 800aa6c:	4654      	mov	r4, sl
 800aa6e:	2000      	movs	r0, #0
 800aa70:	f04f 0c0a 	mov.w	ip, #10
 800aa74:	4621      	mov	r1, r4
 800aa76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa7a:	3b30      	subs	r3, #48	; 0x30
 800aa7c:	2b09      	cmp	r3, #9
 800aa7e:	d94e      	bls.n	800ab1e <_svfiprintf_r+0x17e>
 800aa80:	b1b0      	cbz	r0, 800aab0 <_svfiprintf_r+0x110>
 800aa82:	9207      	str	r2, [sp, #28]
 800aa84:	e014      	b.n	800aab0 <_svfiprintf_r+0x110>
 800aa86:	eba0 0308 	sub.w	r3, r0, r8
 800aa8a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	9304      	str	r3, [sp, #16]
 800aa92:	46a2      	mov	sl, r4
 800aa94:	e7d2      	b.n	800aa3c <_svfiprintf_r+0x9c>
 800aa96:	9b03      	ldr	r3, [sp, #12]
 800aa98:	1d19      	adds	r1, r3, #4
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	9103      	str	r1, [sp, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	bfbb      	ittet	lt
 800aaa2:	425b      	neglt	r3, r3
 800aaa4:	f042 0202 	orrlt.w	r2, r2, #2
 800aaa8:	9307      	strge	r3, [sp, #28]
 800aaaa:	9307      	strlt	r3, [sp, #28]
 800aaac:	bfb8      	it	lt
 800aaae:	9204      	strlt	r2, [sp, #16]
 800aab0:	7823      	ldrb	r3, [r4, #0]
 800aab2:	2b2e      	cmp	r3, #46	; 0x2e
 800aab4:	d10c      	bne.n	800aad0 <_svfiprintf_r+0x130>
 800aab6:	7863      	ldrb	r3, [r4, #1]
 800aab8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaba:	d135      	bne.n	800ab28 <_svfiprintf_r+0x188>
 800aabc:	9b03      	ldr	r3, [sp, #12]
 800aabe:	1d1a      	adds	r2, r3, #4
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	9203      	str	r2, [sp, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	bfb8      	it	lt
 800aac8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aacc:	3402      	adds	r4, #2
 800aace:	9305      	str	r3, [sp, #20]
 800aad0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab9c <_svfiprintf_r+0x1fc>
 800aad4:	7821      	ldrb	r1, [r4, #0]
 800aad6:	2203      	movs	r2, #3
 800aad8:	4650      	mov	r0, sl
 800aada:	f7f5 fb81 	bl	80001e0 <memchr>
 800aade:	b140      	cbz	r0, 800aaf2 <_svfiprintf_r+0x152>
 800aae0:	2340      	movs	r3, #64	; 0x40
 800aae2:	eba0 000a 	sub.w	r0, r0, sl
 800aae6:	fa03 f000 	lsl.w	r0, r3, r0
 800aaea:	9b04      	ldr	r3, [sp, #16]
 800aaec:	4303      	orrs	r3, r0
 800aaee:	3401      	adds	r4, #1
 800aaf0:	9304      	str	r3, [sp, #16]
 800aaf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf6:	4826      	ldr	r0, [pc, #152]	; (800ab90 <_svfiprintf_r+0x1f0>)
 800aaf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aafc:	2206      	movs	r2, #6
 800aafe:	f7f5 fb6f 	bl	80001e0 <memchr>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d038      	beq.n	800ab78 <_svfiprintf_r+0x1d8>
 800ab06:	4b23      	ldr	r3, [pc, #140]	; (800ab94 <_svfiprintf_r+0x1f4>)
 800ab08:	bb1b      	cbnz	r3, 800ab52 <_svfiprintf_r+0x1b2>
 800ab0a:	9b03      	ldr	r3, [sp, #12]
 800ab0c:	3307      	adds	r3, #7
 800ab0e:	f023 0307 	bic.w	r3, r3, #7
 800ab12:	3308      	adds	r3, #8
 800ab14:	9303      	str	r3, [sp, #12]
 800ab16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab18:	4433      	add	r3, r6
 800ab1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1c:	e767      	b.n	800a9ee <_svfiprintf_r+0x4e>
 800ab1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab22:	460c      	mov	r4, r1
 800ab24:	2001      	movs	r0, #1
 800ab26:	e7a5      	b.n	800aa74 <_svfiprintf_r+0xd4>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	3401      	adds	r4, #1
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	f04f 0c0a 	mov.w	ip, #10
 800ab34:	4620      	mov	r0, r4
 800ab36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab3a:	3a30      	subs	r2, #48	; 0x30
 800ab3c:	2a09      	cmp	r2, #9
 800ab3e:	d903      	bls.n	800ab48 <_svfiprintf_r+0x1a8>
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d0c5      	beq.n	800aad0 <_svfiprintf_r+0x130>
 800ab44:	9105      	str	r1, [sp, #20]
 800ab46:	e7c3      	b.n	800aad0 <_svfiprintf_r+0x130>
 800ab48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e7f0      	b.n	800ab34 <_svfiprintf_r+0x194>
 800ab52:	ab03      	add	r3, sp, #12
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	462a      	mov	r2, r5
 800ab58:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <_svfiprintf_r+0x1f8>)
 800ab5a:	a904      	add	r1, sp, #16
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	f7fd ffc5 	bl	8008aec <_printf_float>
 800ab62:	1c42      	adds	r2, r0, #1
 800ab64:	4606      	mov	r6, r0
 800ab66:	d1d6      	bne.n	800ab16 <_svfiprintf_r+0x176>
 800ab68:	89ab      	ldrh	r3, [r5, #12]
 800ab6a:	065b      	lsls	r3, r3, #25
 800ab6c:	f53f af2c 	bmi.w	800a9c8 <_svfiprintf_r+0x28>
 800ab70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab72:	b01d      	add	sp, #116	; 0x74
 800ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	ab03      	add	r3, sp, #12
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	462a      	mov	r2, r5
 800ab7e:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <_svfiprintf_r+0x1f8>)
 800ab80:	a904      	add	r1, sp, #16
 800ab82:	4638      	mov	r0, r7
 800ab84:	f7fe fa56 	bl	8009034 <_printf_i>
 800ab88:	e7eb      	b.n	800ab62 <_svfiprintf_r+0x1c2>
 800ab8a:	bf00      	nop
 800ab8c:	0800db8c 	.word	0x0800db8c
 800ab90:	0800db96 	.word	0x0800db96
 800ab94:	08008aed 	.word	0x08008aed
 800ab98:	0800a8e9 	.word	0x0800a8e9
 800ab9c:	0800db92 	.word	0x0800db92

0800aba0 <_sbrk_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d06      	ldr	r5, [pc, #24]	; (800abbc <_sbrk_r+0x1c>)
 800aba4:	2300      	movs	r3, #0
 800aba6:	4604      	mov	r4, r0
 800aba8:	4608      	mov	r0, r1
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	f7f7 ff9c 	bl	8002ae8 <_sbrk>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d102      	bne.n	800abba <_sbrk_r+0x1a>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b103      	cbz	r3, 800abba <_sbrk_r+0x1a>
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	200009c8 	.word	0x200009c8

0800abc0 <__assert_func>:
 800abc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abc2:	4614      	mov	r4, r2
 800abc4:	461a      	mov	r2, r3
 800abc6:	4b09      	ldr	r3, [pc, #36]	; (800abec <__assert_func+0x2c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4605      	mov	r5, r0
 800abcc:	68d8      	ldr	r0, [r3, #12]
 800abce:	b14c      	cbz	r4, 800abe4 <__assert_func+0x24>
 800abd0:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <__assert_func+0x30>)
 800abd2:	9100      	str	r1, [sp, #0]
 800abd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abd8:	4906      	ldr	r1, [pc, #24]	; (800abf4 <__assert_func+0x34>)
 800abda:	462b      	mov	r3, r5
 800abdc:	f000 f80e 	bl	800abfc <fiprintf>
 800abe0:	f000 faac 	bl	800b13c <abort>
 800abe4:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <__assert_func+0x38>)
 800abe6:	461c      	mov	r4, r3
 800abe8:	e7f3      	b.n	800abd2 <__assert_func+0x12>
 800abea:	bf00      	nop
 800abec:	20000188 	.word	0x20000188
 800abf0:	0800db9d 	.word	0x0800db9d
 800abf4:	0800dbaa 	.word	0x0800dbaa
 800abf8:	0800dbd8 	.word	0x0800dbd8

0800abfc <fiprintf>:
 800abfc:	b40e      	push	{r1, r2, r3}
 800abfe:	b503      	push	{r0, r1, lr}
 800ac00:	4601      	mov	r1, r0
 800ac02:	ab03      	add	r3, sp, #12
 800ac04:	4805      	ldr	r0, [pc, #20]	; (800ac1c <fiprintf+0x20>)
 800ac06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac0a:	6800      	ldr	r0, [r0, #0]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	f000 f897 	bl	800ad40 <_vfiprintf_r>
 800ac12:	b002      	add	sp, #8
 800ac14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac18:	b003      	add	sp, #12
 800ac1a:	4770      	bx	lr
 800ac1c:	20000188 	.word	0x20000188

0800ac20 <__ascii_mbtowc>:
 800ac20:	b082      	sub	sp, #8
 800ac22:	b901      	cbnz	r1, 800ac26 <__ascii_mbtowc+0x6>
 800ac24:	a901      	add	r1, sp, #4
 800ac26:	b142      	cbz	r2, 800ac3a <__ascii_mbtowc+0x1a>
 800ac28:	b14b      	cbz	r3, 800ac3e <__ascii_mbtowc+0x1e>
 800ac2a:	7813      	ldrb	r3, [r2, #0]
 800ac2c:	600b      	str	r3, [r1, #0]
 800ac2e:	7812      	ldrb	r2, [r2, #0]
 800ac30:	1e10      	subs	r0, r2, #0
 800ac32:	bf18      	it	ne
 800ac34:	2001      	movne	r0, #1
 800ac36:	b002      	add	sp, #8
 800ac38:	4770      	bx	lr
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	e7fb      	b.n	800ac36 <__ascii_mbtowc+0x16>
 800ac3e:	f06f 0001 	mvn.w	r0, #1
 800ac42:	e7f8      	b.n	800ac36 <__ascii_mbtowc+0x16>

0800ac44 <memmove>:
 800ac44:	4288      	cmp	r0, r1
 800ac46:	b510      	push	{r4, lr}
 800ac48:	eb01 0402 	add.w	r4, r1, r2
 800ac4c:	d902      	bls.n	800ac54 <memmove+0x10>
 800ac4e:	4284      	cmp	r4, r0
 800ac50:	4623      	mov	r3, r4
 800ac52:	d807      	bhi.n	800ac64 <memmove+0x20>
 800ac54:	1e43      	subs	r3, r0, #1
 800ac56:	42a1      	cmp	r1, r4
 800ac58:	d008      	beq.n	800ac6c <memmove+0x28>
 800ac5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac62:	e7f8      	b.n	800ac56 <memmove+0x12>
 800ac64:	4402      	add	r2, r0
 800ac66:	4601      	mov	r1, r0
 800ac68:	428a      	cmp	r2, r1
 800ac6a:	d100      	bne.n	800ac6e <memmove+0x2a>
 800ac6c:	bd10      	pop	{r4, pc}
 800ac6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac76:	e7f7      	b.n	800ac68 <memmove+0x24>

0800ac78 <__malloc_lock>:
 800ac78:	4801      	ldr	r0, [pc, #4]	; (800ac80 <__malloc_lock+0x8>)
 800ac7a:	f000 bc1f 	b.w	800b4bc <__retarget_lock_acquire_recursive>
 800ac7e:	bf00      	nop
 800ac80:	200009cc 	.word	0x200009cc

0800ac84 <__malloc_unlock>:
 800ac84:	4801      	ldr	r0, [pc, #4]	; (800ac8c <__malloc_unlock+0x8>)
 800ac86:	f000 bc1a 	b.w	800b4be <__retarget_lock_release_recursive>
 800ac8a:	bf00      	nop
 800ac8c:	200009cc 	.word	0x200009cc

0800ac90 <_realloc_r>:
 800ac90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac94:	4680      	mov	r8, r0
 800ac96:	4614      	mov	r4, r2
 800ac98:	460e      	mov	r6, r1
 800ac9a:	b921      	cbnz	r1, 800aca6 <_realloc_r+0x16>
 800ac9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca0:	4611      	mov	r1, r2
 800aca2:	f7ff bdad 	b.w	800a800 <_malloc_r>
 800aca6:	b92a      	cbnz	r2, 800acb4 <_realloc_r+0x24>
 800aca8:	f7ff fd3e 	bl	800a728 <_free_r>
 800acac:	4625      	mov	r5, r4
 800acae:	4628      	mov	r0, r5
 800acb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb4:	f000 fc6a 	bl	800b58c <_malloc_usable_size_r>
 800acb8:	4284      	cmp	r4, r0
 800acba:	4607      	mov	r7, r0
 800acbc:	d802      	bhi.n	800acc4 <_realloc_r+0x34>
 800acbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acc2:	d812      	bhi.n	800acea <_realloc_r+0x5a>
 800acc4:	4621      	mov	r1, r4
 800acc6:	4640      	mov	r0, r8
 800acc8:	f7ff fd9a 	bl	800a800 <_malloc_r>
 800accc:	4605      	mov	r5, r0
 800acce:	2800      	cmp	r0, #0
 800acd0:	d0ed      	beq.n	800acae <_realloc_r+0x1e>
 800acd2:	42bc      	cmp	r4, r7
 800acd4:	4622      	mov	r2, r4
 800acd6:	4631      	mov	r1, r6
 800acd8:	bf28      	it	cs
 800acda:	463a      	movcs	r2, r7
 800acdc:	f7fd fe50 	bl	8008980 <memcpy>
 800ace0:	4631      	mov	r1, r6
 800ace2:	4640      	mov	r0, r8
 800ace4:	f7ff fd20 	bl	800a728 <_free_r>
 800ace8:	e7e1      	b.n	800acae <_realloc_r+0x1e>
 800acea:	4635      	mov	r5, r6
 800acec:	e7df      	b.n	800acae <_realloc_r+0x1e>

0800acee <__sfputc_r>:
 800acee:	6893      	ldr	r3, [r2, #8]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	b410      	push	{r4}
 800acf6:	6093      	str	r3, [r2, #8]
 800acf8:	da08      	bge.n	800ad0c <__sfputc_r+0x1e>
 800acfa:	6994      	ldr	r4, [r2, #24]
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	db01      	blt.n	800ad04 <__sfputc_r+0x16>
 800ad00:	290a      	cmp	r1, #10
 800ad02:	d103      	bne.n	800ad0c <__sfputc_r+0x1e>
 800ad04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad08:	f000 b94a 	b.w	800afa0 <__swbuf_r>
 800ad0c:	6813      	ldr	r3, [r2, #0]
 800ad0e:	1c58      	adds	r0, r3, #1
 800ad10:	6010      	str	r0, [r2, #0]
 800ad12:	7019      	strb	r1, [r3, #0]
 800ad14:	4608      	mov	r0, r1
 800ad16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <__sfputs_r>:
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460f      	mov	r7, r1
 800ad22:	4614      	mov	r4, r2
 800ad24:	18d5      	adds	r5, r2, r3
 800ad26:	42ac      	cmp	r4, r5
 800ad28:	d101      	bne.n	800ad2e <__sfputs_r+0x12>
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	e007      	b.n	800ad3e <__sfputs_r+0x22>
 800ad2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad32:	463a      	mov	r2, r7
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7ff ffda 	bl	800acee <__sfputc_r>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	d1f3      	bne.n	800ad26 <__sfputs_r+0xa>
 800ad3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad40 <_vfiprintf_r>:
 800ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	460d      	mov	r5, r1
 800ad46:	b09d      	sub	sp, #116	; 0x74
 800ad48:	4614      	mov	r4, r2
 800ad4a:	4698      	mov	r8, r3
 800ad4c:	4606      	mov	r6, r0
 800ad4e:	b118      	cbz	r0, 800ad58 <_vfiprintf_r+0x18>
 800ad50:	6983      	ldr	r3, [r0, #24]
 800ad52:	b90b      	cbnz	r3, 800ad58 <_vfiprintf_r+0x18>
 800ad54:	f000 fb14 	bl	800b380 <__sinit>
 800ad58:	4b89      	ldr	r3, [pc, #548]	; (800af80 <_vfiprintf_r+0x240>)
 800ad5a:	429d      	cmp	r5, r3
 800ad5c:	d11b      	bne.n	800ad96 <_vfiprintf_r+0x56>
 800ad5e:	6875      	ldr	r5, [r6, #4]
 800ad60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad62:	07d9      	lsls	r1, r3, #31
 800ad64:	d405      	bmi.n	800ad72 <_vfiprintf_r+0x32>
 800ad66:	89ab      	ldrh	r3, [r5, #12]
 800ad68:	059a      	lsls	r2, r3, #22
 800ad6a:	d402      	bmi.n	800ad72 <_vfiprintf_r+0x32>
 800ad6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad6e:	f000 fba5 	bl	800b4bc <__retarget_lock_acquire_recursive>
 800ad72:	89ab      	ldrh	r3, [r5, #12]
 800ad74:	071b      	lsls	r3, r3, #28
 800ad76:	d501      	bpl.n	800ad7c <_vfiprintf_r+0x3c>
 800ad78:	692b      	ldr	r3, [r5, #16]
 800ad7a:	b9eb      	cbnz	r3, 800adb8 <_vfiprintf_r+0x78>
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f000 f96e 	bl	800b060 <__swsetup_r>
 800ad84:	b1c0      	cbz	r0, 800adb8 <_vfiprintf_r+0x78>
 800ad86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad88:	07dc      	lsls	r4, r3, #31
 800ad8a:	d50e      	bpl.n	800adaa <_vfiprintf_r+0x6a>
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad90:	b01d      	add	sp, #116	; 0x74
 800ad92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad96:	4b7b      	ldr	r3, [pc, #492]	; (800af84 <_vfiprintf_r+0x244>)
 800ad98:	429d      	cmp	r5, r3
 800ad9a:	d101      	bne.n	800ada0 <_vfiprintf_r+0x60>
 800ad9c:	68b5      	ldr	r5, [r6, #8]
 800ad9e:	e7df      	b.n	800ad60 <_vfiprintf_r+0x20>
 800ada0:	4b79      	ldr	r3, [pc, #484]	; (800af88 <_vfiprintf_r+0x248>)
 800ada2:	429d      	cmp	r5, r3
 800ada4:	bf08      	it	eq
 800ada6:	68f5      	ldreq	r5, [r6, #12]
 800ada8:	e7da      	b.n	800ad60 <_vfiprintf_r+0x20>
 800adaa:	89ab      	ldrh	r3, [r5, #12]
 800adac:	0598      	lsls	r0, r3, #22
 800adae:	d4ed      	bmi.n	800ad8c <_vfiprintf_r+0x4c>
 800adb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adb2:	f000 fb84 	bl	800b4be <__retarget_lock_release_recursive>
 800adb6:	e7e9      	b.n	800ad8c <_vfiprintf_r+0x4c>
 800adb8:	2300      	movs	r3, #0
 800adba:	9309      	str	r3, [sp, #36]	; 0x24
 800adbc:	2320      	movs	r3, #32
 800adbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc6:	2330      	movs	r3, #48	; 0x30
 800adc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af8c <_vfiprintf_r+0x24c>
 800adcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800add0:	f04f 0901 	mov.w	r9, #1
 800add4:	4623      	mov	r3, r4
 800add6:	469a      	mov	sl, r3
 800add8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800addc:	b10a      	cbz	r2, 800ade2 <_vfiprintf_r+0xa2>
 800adde:	2a25      	cmp	r2, #37	; 0x25
 800ade0:	d1f9      	bne.n	800add6 <_vfiprintf_r+0x96>
 800ade2:	ebba 0b04 	subs.w	fp, sl, r4
 800ade6:	d00b      	beq.n	800ae00 <_vfiprintf_r+0xc0>
 800ade8:	465b      	mov	r3, fp
 800adea:	4622      	mov	r2, r4
 800adec:	4629      	mov	r1, r5
 800adee:	4630      	mov	r0, r6
 800adf0:	f7ff ff94 	bl	800ad1c <__sfputs_r>
 800adf4:	3001      	adds	r0, #1
 800adf6:	f000 80aa 	beq.w	800af4e <_vfiprintf_r+0x20e>
 800adfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adfc:	445a      	add	r2, fp
 800adfe:	9209      	str	r2, [sp, #36]	; 0x24
 800ae00:	f89a 3000 	ldrb.w	r3, [sl]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80a2 	beq.w	800af4e <_vfiprintf_r+0x20e>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae14:	f10a 0a01 	add.w	sl, sl, #1
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	9307      	str	r3, [sp, #28]
 800ae1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae20:	931a      	str	r3, [sp, #104]	; 0x68
 800ae22:	4654      	mov	r4, sl
 800ae24:	2205      	movs	r2, #5
 800ae26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2a:	4858      	ldr	r0, [pc, #352]	; (800af8c <_vfiprintf_r+0x24c>)
 800ae2c:	f7f5 f9d8 	bl	80001e0 <memchr>
 800ae30:	9a04      	ldr	r2, [sp, #16]
 800ae32:	b9d8      	cbnz	r0, 800ae6c <_vfiprintf_r+0x12c>
 800ae34:	06d1      	lsls	r1, r2, #27
 800ae36:	bf44      	itt	mi
 800ae38:	2320      	movmi	r3, #32
 800ae3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae3e:	0713      	lsls	r3, r2, #28
 800ae40:	bf44      	itt	mi
 800ae42:	232b      	movmi	r3, #43	; 0x2b
 800ae44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae48:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae4e:	d015      	beq.n	800ae7c <_vfiprintf_r+0x13c>
 800ae50:	9a07      	ldr	r2, [sp, #28]
 800ae52:	4654      	mov	r4, sl
 800ae54:	2000      	movs	r0, #0
 800ae56:	f04f 0c0a 	mov.w	ip, #10
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae60:	3b30      	subs	r3, #48	; 0x30
 800ae62:	2b09      	cmp	r3, #9
 800ae64:	d94e      	bls.n	800af04 <_vfiprintf_r+0x1c4>
 800ae66:	b1b0      	cbz	r0, 800ae96 <_vfiprintf_r+0x156>
 800ae68:	9207      	str	r2, [sp, #28]
 800ae6a:	e014      	b.n	800ae96 <_vfiprintf_r+0x156>
 800ae6c:	eba0 0308 	sub.w	r3, r0, r8
 800ae70:	fa09 f303 	lsl.w	r3, r9, r3
 800ae74:	4313      	orrs	r3, r2
 800ae76:	9304      	str	r3, [sp, #16]
 800ae78:	46a2      	mov	sl, r4
 800ae7a:	e7d2      	b.n	800ae22 <_vfiprintf_r+0xe2>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	1d19      	adds	r1, r3, #4
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	9103      	str	r1, [sp, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	bfbb      	ittet	lt
 800ae88:	425b      	neglt	r3, r3
 800ae8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae8e:	9307      	strge	r3, [sp, #28]
 800ae90:	9307      	strlt	r3, [sp, #28]
 800ae92:	bfb8      	it	lt
 800ae94:	9204      	strlt	r2, [sp, #16]
 800ae96:	7823      	ldrb	r3, [r4, #0]
 800ae98:	2b2e      	cmp	r3, #46	; 0x2e
 800ae9a:	d10c      	bne.n	800aeb6 <_vfiprintf_r+0x176>
 800ae9c:	7863      	ldrb	r3, [r4, #1]
 800ae9e:	2b2a      	cmp	r3, #42	; 0x2a
 800aea0:	d135      	bne.n	800af0e <_vfiprintf_r+0x1ce>
 800aea2:	9b03      	ldr	r3, [sp, #12]
 800aea4:	1d1a      	adds	r2, r3, #4
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	9203      	str	r2, [sp, #12]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	bfb8      	it	lt
 800aeae:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeb2:	3402      	adds	r4, #2
 800aeb4:	9305      	str	r3, [sp, #20]
 800aeb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af9c <_vfiprintf_r+0x25c>
 800aeba:	7821      	ldrb	r1, [r4, #0]
 800aebc:	2203      	movs	r2, #3
 800aebe:	4650      	mov	r0, sl
 800aec0:	f7f5 f98e 	bl	80001e0 <memchr>
 800aec4:	b140      	cbz	r0, 800aed8 <_vfiprintf_r+0x198>
 800aec6:	2340      	movs	r3, #64	; 0x40
 800aec8:	eba0 000a 	sub.w	r0, r0, sl
 800aecc:	fa03 f000 	lsl.w	r0, r3, r0
 800aed0:	9b04      	ldr	r3, [sp, #16]
 800aed2:	4303      	orrs	r3, r0
 800aed4:	3401      	adds	r4, #1
 800aed6:	9304      	str	r3, [sp, #16]
 800aed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aedc:	482c      	ldr	r0, [pc, #176]	; (800af90 <_vfiprintf_r+0x250>)
 800aede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aee2:	2206      	movs	r2, #6
 800aee4:	f7f5 f97c 	bl	80001e0 <memchr>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d03f      	beq.n	800af6c <_vfiprintf_r+0x22c>
 800aeec:	4b29      	ldr	r3, [pc, #164]	; (800af94 <_vfiprintf_r+0x254>)
 800aeee:	bb1b      	cbnz	r3, 800af38 <_vfiprintf_r+0x1f8>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	3307      	adds	r3, #7
 800aef4:	f023 0307 	bic.w	r3, r3, #7
 800aef8:	3308      	adds	r3, #8
 800aefa:	9303      	str	r3, [sp, #12]
 800aefc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aefe:	443b      	add	r3, r7
 800af00:	9309      	str	r3, [sp, #36]	; 0x24
 800af02:	e767      	b.n	800add4 <_vfiprintf_r+0x94>
 800af04:	fb0c 3202 	mla	r2, ip, r2, r3
 800af08:	460c      	mov	r4, r1
 800af0a:	2001      	movs	r0, #1
 800af0c:	e7a5      	b.n	800ae5a <_vfiprintf_r+0x11a>
 800af0e:	2300      	movs	r3, #0
 800af10:	3401      	adds	r4, #1
 800af12:	9305      	str	r3, [sp, #20]
 800af14:	4619      	mov	r1, r3
 800af16:	f04f 0c0a 	mov.w	ip, #10
 800af1a:	4620      	mov	r0, r4
 800af1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af20:	3a30      	subs	r2, #48	; 0x30
 800af22:	2a09      	cmp	r2, #9
 800af24:	d903      	bls.n	800af2e <_vfiprintf_r+0x1ee>
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0c5      	beq.n	800aeb6 <_vfiprintf_r+0x176>
 800af2a:	9105      	str	r1, [sp, #20]
 800af2c:	e7c3      	b.n	800aeb6 <_vfiprintf_r+0x176>
 800af2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af32:	4604      	mov	r4, r0
 800af34:	2301      	movs	r3, #1
 800af36:	e7f0      	b.n	800af1a <_vfiprintf_r+0x1da>
 800af38:	ab03      	add	r3, sp, #12
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	462a      	mov	r2, r5
 800af3e:	4b16      	ldr	r3, [pc, #88]	; (800af98 <_vfiprintf_r+0x258>)
 800af40:	a904      	add	r1, sp, #16
 800af42:	4630      	mov	r0, r6
 800af44:	f7fd fdd2 	bl	8008aec <_printf_float>
 800af48:	4607      	mov	r7, r0
 800af4a:	1c78      	adds	r0, r7, #1
 800af4c:	d1d6      	bne.n	800aefc <_vfiprintf_r+0x1bc>
 800af4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af50:	07d9      	lsls	r1, r3, #31
 800af52:	d405      	bmi.n	800af60 <_vfiprintf_r+0x220>
 800af54:	89ab      	ldrh	r3, [r5, #12]
 800af56:	059a      	lsls	r2, r3, #22
 800af58:	d402      	bmi.n	800af60 <_vfiprintf_r+0x220>
 800af5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af5c:	f000 faaf 	bl	800b4be <__retarget_lock_release_recursive>
 800af60:	89ab      	ldrh	r3, [r5, #12]
 800af62:	065b      	lsls	r3, r3, #25
 800af64:	f53f af12 	bmi.w	800ad8c <_vfiprintf_r+0x4c>
 800af68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af6a:	e711      	b.n	800ad90 <_vfiprintf_r+0x50>
 800af6c:	ab03      	add	r3, sp, #12
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	462a      	mov	r2, r5
 800af72:	4b09      	ldr	r3, [pc, #36]	; (800af98 <_vfiprintf_r+0x258>)
 800af74:	a904      	add	r1, sp, #16
 800af76:	4630      	mov	r0, r6
 800af78:	f7fe f85c 	bl	8009034 <_printf_i>
 800af7c:	e7e4      	b.n	800af48 <_vfiprintf_r+0x208>
 800af7e:	bf00      	nop
 800af80:	0800dd04 	.word	0x0800dd04
 800af84:	0800dd24 	.word	0x0800dd24
 800af88:	0800dce4 	.word	0x0800dce4
 800af8c:	0800db8c 	.word	0x0800db8c
 800af90:	0800db96 	.word	0x0800db96
 800af94:	08008aed 	.word	0x08008aed
 800af98:	0800ad1d 	.word	0x0800ad1d
 800af9c:	0800db92 	.word	0x0800db92

0800afa0 <__swbuf_r>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	460e      	mov	r6, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	4605      	mov	r5, r0
 800afa8:	b118      	cbz	r0, 800afb2 <__swbuf_r+0x12>
 800afaa:	6983      	ldr	r3, [r0, #24]
 800afac:	b90b      	cbnz	r3, 800afb2 <__swbuf_r+0x12>
 800afae:	f000 f9e7 	bl	800b380 <__sinit>
 800afb2:	4b21      	ldr	r3, [pc, #132]	; (800b038 <__swbuf_r+0x98>)
 800afb4:	429c      	cmp	r4, r3
 800afb6:	d12b      	bne.n	800b010 <__swbuf_r+0x70>
 800afb8:	686c      	ldr	r4, [r5, #4]
 800afba:	69a3      	ldr	r3, [r4, #24]
 800afbc:	60a3      	str	r3, [r4, #8]
 800afbe:	89a3      	ldrh	r3, [r4, #12]
 800afc0:	071a      	lsls	r2, r3, #28
 800afc2:	d52f      	bpl.n	800b024 <__swbuf_r+0x84>
 800afc4:	6923      	ldr	r3, [r4, #16]
 800afc6:	b36b      	cbz	r3, 800b024 <__swbuf_r+0x84>
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	6820      	ldr	r0, [r4, #0]
 800afcc:	1ac0      	subs	r0, r0, r3
 800afce:	6963      	ldr	r3, [r4, #20]
 800afd0:	b2f6      	uxtb	r6, r6
 800afd2:	4283      	cmp	r3, r0
 800afd4:	4637      	mov	r7, r6
 800afd6:	dc04      	bgt.n	800afe2 <__swbuf_r+0x42>
 800afd8:	4621      	mov	r1, r4
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 f93c 	bl	800b258 <_fflush_r>
 800afe0:	bb30      	cbnz	r0, 800b030 <__swbuf_r+0x90>
 800afe2:	68a3      	ldr	r3, [r4, #8]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	60a3      	str	r3, [r4, #8]
 800afe8:	6823      	ldr	r3, [r4, #0]
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	6022      	str	r2, [r4, #0]
 800afee:	701e      	strb	r6, [r3, #0]
 800aff0:	6963      	ldr	r3, [r4, #20]
 800aff2:	3001      	adds	r0, #1
 800aff4:	4283      	cmp	r3, r0
 800aff6:	d004      	beq.n	800b002 <__swbuf_r+0x62>
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	07db      	lsls	r3, r3, #31
 800affc:	d506      	bpl.n	800b00c <__swbuf_r+0x6c>
 800affe:	2e0a      	cmp	r6, #10
 800b000:	d104      	bne.n	800b00c <__swbuf_r+0x6c>
 800b002:	4621      	mov	r1, r4
 800b004:	4628      	mov	r0, r5
 800b006:	f000 f927 	bl	800b258 <_fflush_r>
 800b00a:	b988      	cbnz	r0, 800b030 <__swbuf_r+0x90>
 800b00c:	4638      	mov	r0, r7
 800b00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b010:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <__swbuf_r+0x9c>)
 800b012:	429c      	cmp	r4, r3
 800b014:	d101      	bne.n	800b01a <__swbuf_r+0x7a>
 800b016:	68ac      	ldr	r4, [r5, #8]
 800b018:	e7cf      	b.n	800afba <__swbuf_r+0x1a>
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <__swbuf_r+0xa0>)
 800b01c:	429c      	cmp	r4, r3
 800b01e:	bf08      	it	eq
 800b020:	68ec      	ldreq	r4, [r5, #12]
 800b022:	e7ca      	b.n	800afba <__swbuf_r+0x1a>
 800b024:	4621      	mov	r1, r4
 800b026:	4628      	mov	r0, r5
 800b028:	f000 f81a 	bl	800b060 <__swsetup_r>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d0cb      	beq.n	800afc8 <__swbuf_r+0x28>
 800b030:	f04f 37ff 	mov.w	r7, #4294967295
 800b034:	e7ea      	b.n	800b00c <__swbuf_r+0x6c>
 800b036:	bf00      	nop
 800b038:	0800dd04 	.word	0x0800dd04
 800b03c:	0800dd24 	.word	0x0800dd24
 800b040:	0800dce4 	.word	0x0800dce4

0800b044 <__ascii_wctomb>:
 800b044:	b149      	cbz	r1, 800b05a <__ascii_wctomb+0x16>
 800b046:	2aff      	cmp	r2, #255	; 0xff
 800b048:	bf85      	ittet	hi
 800b04a:	238a      	movhi	r3, #138	; 0x8a
 800b04c:	6003      	strhi	r3, [r0, #0]
 800b04e:	700a      	strbls	r2, [r1, #0]
 800b050:	f04f 30ff 	movhi.w	r0, #4294967295
 800b054:	bf98      	it	ls
 800b056:	2001      	movls	r0, #1
 800b058:	4770      	bx	lr
 800b05a:	4608      	mov	r0, r1
 800b05c:	4770      	bx	lr
	...

0800b060 <__swsetup_r>:
 800b060:	4b32      	ldr	r3, [pc, #200]	; (800b12c <__swsetup_r+0xcc>)
 800b062:	b570      	push	{r4, r5, r6, lr}
 800b064:	681d      	ldr	r5, [r3, #0]
 800b066:	4606      	mov	r6, r0
 800b068:	460c      	mov	r4, r1
 800b06a:	b125      	cbz	r5, 800b076 <__swsetup_r+0x16>
 800b06c:	69ab      	ldr	r3, [r5, #24]
 800b06e:	b913      	cbnz	r3, 800b076 <__swsetup_r+0x16>
 800b070:	4628      	mov	r0, r5
 800b072:	f000 f985 	bl	800b380 <__sinit>
 800b076:	4b2e      	ldr	r3, [pc, #184]	; (800b130 <__swsetup_r+0xd0>)
 800b078:	429c      	cmp	r4, r3
 800b07a:	d10f      	bne.n	800b09c <__swsetup_r+0x3c>
 800b07c:	686c      	ldr	r4, [r5, #4]
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b084:	0719      	lsls	r1, r3, #28
 800b086:	d42c      	bmi.n	800b0e2 <__swsetup_r+0x82>
 800b088:	06dd      	lsls	r5, r3, #27
 800b08a:	d411      	bmi.n	800b0b0 <__swsetup_r+0x50>
 800b08c:	2309      	movs	r3, #9
 800b08e:	6033      	str	r3, [r6, #0]
 800b090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b094:	81a3      	strh	r3, [r4, #12]
 800b096:	f04f 30ff 	mov.w	r0, #4294967295
 800b09a:	e03e      	b.n	800b11a <__swsetup_r+0xba>
 800b09c:	4b25      	ldr	r3, [pc, #148]	; (800b134 <__swsetup_r+0xd4>)
 800b09e:	429c      	cmp	r4, r3
 800b0a0:	d101      	bne.n	800b0a6 <__swsetup_r+0x46>
 800b0a2:	68ac      	ldr	r4, [r5, #8]
 800b0a4:	e7eb      	b.n	800b07e <__swsetup_r+0x1e>
 800b0a6:	4b24      	ldr	r3, [pc, #144]	; (800b138 <__swsetup_r+0xd8>)
 800b0a8:	429c      	cmp	r4, r3
 800b0aa:	bf08      	it	eq
 800b0ac:	68ec      	ldreq	r4, [r5, #12]
 800b0ae:	e7e6      	b.n	800b07e <__swsetup_r+0x1e>
 800b0b0:	0758      	lsls	r0, r3, #29
 800b0b2:	d512      	bpl.n	800b0da <__swsetup_r+0x7a>
 800b0b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0b6:	b141      	cbz	r1, 800b0ca <__swsetup_r+0x6a>
 800b0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0bc:	4299      	cmp	r1, r3
 800b0be:	d002      	beq.n	800b0c6 <__swsetup_r+0x66>
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f7ff fb31 	bl	800a728 <_free_r>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	6363      	str	r3, [r4, #52]	; 0x34
 800b0ca:	89a3      	ldrh	r3, [r4, #12]
 800b0cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	6063      	str	r3, [r4, #4]
 800b0d6:	6923      	ldr	r3, [r4, #16]
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	89a3      	ldrh	r3, [r4, #12]
 800b0dc:	f043 0308 	orr.w	r3, r3, #8
 800b0e0:	81a3      	strh	r3, [r4, #12]
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	b94b      	cbnz	r3, 800b0fa <__swsetup_r+0x9a>
 800b0e6:	89a3      	ldrh	r3, [r4, #12]
 800b0e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0f0:	d003      	beq.n	800b0fa <__swsetup_r+0x9a>
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f000 fa09 	bl	800b50c <__smakebuf_r>
 800b0fa:	89a0      	ldrh	r0, [r4, #12]
 800b0fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b100:	f010 0301 	ands.w	r3, r0, #1
 800b104:	d00a      	beq.n	800b11c <__swsetup_r+0xbc>
 800b106:	2300      	movs	r3, #0
 800b108:	60a3      	str	r3, [r4, #8]
 800b10a:	6963      	ldr	r3, [r4, #20]
 800b10c:	425b      	negs	r3, r3
 800b10e:	61a3      	str	r3, [r4, #24]
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	b943      	cbnz	r3, 800b126 <__swsetup_r+0xc6>
 800b114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b118:	d1ba      	bne.n	800b090 <__swsetup_r+0x30>
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	0781      	lsls	r1, r0, #30
 800b11e:	bf58      	it	pl
 800b120:	6963      	ldrpl	r3, [r4, #20]
 800b122:	60a3      	str	r3, [r4, #8]
 800b124:	e7f4      	b.n	800b110 <__swsetup_r+0xb0>
 800b126:	2000      	movs	r0, #0
 800b128:	e7f7      	b.n	800b11a <__swsetup_r+0xba>
 800b12a:	bf00      	nop
 800b12c:	20000188 	.word	0x20000188
 800b130:	0800dd04 	.word	0x0800dd04
 800b134:	0800dd24 	.word	0x0800dd24
 800b138:	0800dce4 	.word	0x0800dce4

0800b13c <abort>:
 800b13c:	b508      	push	{r3, lr}
 800b13e:	2006      	movs	r0, #6
 800b140:	f000 fa54 	bl	800b5ec <raise>
 800b144:	2001      	movs	r0, #1
 800b146:	f7f7 fc57 	bl	80029f8 <_exit>
	...

0800b14c <__sflush_r>:
 800b14c:	898a      	ldrh	r2, [r1, #12]
 800b14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b152:	4605      	mov	r5, r0
 800b154:	0710      	lsls	r0, r2, #28
 800b156:	460c      	mov	r4, r1
 800b158:	d458      	bmi.n	800b20c <__sflush_r+0xc0>
 800b15a:	684b      	ldr	r3, [r1, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dc05      	bgt.n	800b16c <__sflush_r+0x20>
 800b160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b162:	2b00      	cmp	r3, #0
 800b164:	dc02      	bgt.n	800b16c <__sflush_r+0x20>
 800b166:	2000      	movs	r0, #0
 800b168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b16c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b16e:	2e00      	cmp	r6, #0
 800b170:	d0f9      	beq.n	800b166 <__sflush_r+0x1a>
 800b172:	2300      	movs	r3, #0
 800b174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b178:	682f      	ldr	r7, [r5, #0]
 800b17a:	602b      	str	r3, [r5, #0]
 800b17c:	d032      	beq.n	800b1e4 <__sflush_r+0x98>
 800b17e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	075a      	lsls	r2, r3, #29
 800b184:	d505      	bpl.n	800b192 <__sflush_r+0x46>
 800b186:	6863      	ldr	r3, [r4, #4]
 800b188:	1ac0      	subs	r0, r0, r3
 800b18a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b18c:	b10b      	cbz	r3, 800b192 <__sflush_r+0x46>
 800b18e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b190:	1ac0      	subs	r0, r0, r3
 800b192:	2300      	movs	r3, #0
 800b194:	4602      	mov	r2, r0
 800b196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b198:	6a21      	ldr	r1, [r4, #32]
 800b19a:	4628      	mov	r0, r5
 800b19c:	47b0      	blx	r6
 800b19e:	1c43      	adds	r3, r0, #1
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	d106      	bne.n	800b1b2 <__sflush_r+0x66>
 800b1a4:	6829      	ldr	r1, [r5, #0]
 800b1a6:	291d      	cmp	r1, #29
 800b1a8:	d82c      	bhi.n	800b204 <__sflush_r+0xb8>
 800b1aa:	4a2a      	ldr	r2, [pc, #168]	; (800b254 <__sflush_r+0x108>)
 800b1ac:	40ca      	lsrs	r2, r1
 800b1ae:	07d6      	lsls	r6, r2, #31
 800b1b0:	d528      	bpl.n	800b204 <__sflush_r+0xb8>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	6062      	str	r2, [r4, #4]
 800b1b6:	04d9      	lsls	r1, r3, #19
 800b1b8:	6922      	ldr	r2, [r4, #16]
 800b1ba:	6022      	str	r2, [r4, #0]
 800b1bc:	d504      	bpl.n	800b1c8 <__sflush_r+0x7c>
 800b1be:	1c42      	adds	r2, r0, #1
 800b1c0:	d101      	bne.n	800b1c6 <__sflush_r+0x7a>
 800b1c2:	682b      	ldr	r3, [r5, #0]
 800b1c4:	b903      	cbnz	r3, 800b1c8 <__sflush_r+0x7c>
 800b1c6:	6560      	str	r0, [r4, #84]	; 0x54
 800b1c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1ca:	602f      	str	r7, [r5, #0]
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	d0ca      	beq.n	800b166 <__sflush_r+0x1a>
 800b1d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1d4:	4299      	cmp	r1, r3
 800b1d6:	d002      	beq.n	800b1de <__sflush_r+0x92>
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f7ff faa5 	bl	800a728 <_free_r>
 800b1de:	2000      	movs	r0, #0
 800b1e0:	6360      	str	r0, [r4, #52]	; 0x34
 800b1e2:	e7c1      	b.n	800b168 <__sflush_r+0x1c>
 800b1e4:	6a21      	ldr	r1, [r4, #32]
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b0      	blx	r6
 800b1ec:	1c41      	adds	r1, r0, #1
 800b1ee:	d1c7      	bne.n	800b180 <__sflush_r+0x34>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0c4      	beq.n	800b180 <__sflush_r+0x34>
 800b1f6:	2b1d      	cmp	r3, #29
 800b1f8:	d001      	beq.n	800b1fe <__sflush_r+0xb2>
 800b1fa:	2b16      	cmp	r3, #22
 800b1fc:	d101      	bne.n	800b202 <__sflush_r+0xb6>
 800b1fe:	602f      	str	r7, [r5, #0]
 800b200:	e7b1      	b.n	800b166 <__sflush_r+0x1a>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	e7ad      	b.n	800b168 <__sflush_r+0x1c>
 800b20c:	690f      	ldr	r7, [r1, #16]
 800b20e:	2f00      	cmp	r7, #0
 800b210:	d0a9      	beq.n	800b166 <__sflush_r+0x1a>
 800b212:	0793      	lsls	r3, r2, #30
 800b214:	680e      	ldr	r6, [r1, #0]
 800b216:	bf08      	it	eq
 800b218:	694b      	ldreq	r3, [r1, #20]
 800b21a:	600f      	str	r7, [r1, #0]
 800b21c:	bf18      	it	ne
 800b21e:	2300      	movne	r3, #0
 800b220:	eba6 0807 	sub.w	r8, r6, r7
 800b224:	608b      	str	r3, [r1, #8]
 800b226:	f1b8 0f00 	cmp.w	r8, #0
 800b22a:	dd9c      	ble.n	800b166 <__sflush_r+0x1a>
 800b22c:	6a21      	ldr	r1, [r4, #32]
 800b22e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b230:	4643      	mov	r3, r8
 800b232:	463a      	mov	r2, r7
 800b234:	4628      	mov	r0, r5
 800b236:	47b0      	blx	r6
 800b238:	2800      	cmp	r0, #0
 800b23a:	dc06      	bgt.n	800b24a <__sflush_r+0xfe>
 800b23c:	89a3      	ldrh	r3, [r4, #12]
 800b23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b242:	81a3      	strh	r3, [r4, #12]
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	e78e      	b.n	800b168 <__sflush_r+0x1c>
 800b24a:	4407      	add	r7, r0
 800b24c:	eba8 0800 	sub.w	r8, r8, r0
 800b250:	e7e9      	b.n	800b226 <__sflush_r+0xda>
 800b252:	bf00      	nop
 800b254:	20400001 	.word	0x20400001

0800b258 <_fflush_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	690b      	ldr	r3, [r1, #16]
 800b25c:	4605      	mov	r5, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	b913      	cbnz	r3, 800b268 <_fflush_r+0x10>
 800b262:	2500      	movs	r5, #0
 800b264:	4628      	mov	r0, r5
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	b118      	cbz	r0, 800b272 <_fflush_r+0x1a>
 800b26a:	6983      	ldr	r3, [r0, #24]
 800b26c:	b90b      	cbnz	r3, 800b272 <_fflush_r+0x1a>
 800b26e:	f000 f887 	bl	800b380 <__sinit>
 800b272:	4b14      	ldr	r3, [pc, #80]	; (800b2c4 <_fflush_r+0x6c>)
 800b274:	429c      	cmp	r4, r3
 800b276:	d11b      	bne.n	800b2b0 <_fflush_r+0x58>
 800b278:	686c      	ldr	r4, [r5, #4]
 800b27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0ef      	beq.n	800b262 <_fflush_r+0xa>
 800b282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b284:	07d0      	lsls	r0, r2, #31
 800b286:	d404      	bmi.n	800b292 <_fflush_r+0x3a>
 800b288:	0599      	lsls	r1, r3, #22
 800b28a:	d402      	bmi.n	800b292 <_fflush_r+0x3a>
 800b28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b28e:	f000 f915 	bl	800b4bc <__retarget_lock_acquire_recursive>
 800b292:	4628      	mov	r0, r5
 800b294:	4621      	mov	r1, r4
 800b296:	f7ff ff59 	bl	800b14c <__sflush_r>
 800b29a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b29c:	07da      	lsls	r2, r3, #31
 800b29e:	4605      	mov	r5, r0
 800b2a0:	d4e0      	bmi.n	800b264 <_fflush_r+0xc>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	059b      	lsls	r3, r3, #22
 800b2a6:	d4dd      	bmi.n	800b264 <_fflush_r+0xc>
 800b2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2aa:	f000 f908 	bl	800b4be <__retarget_lock_release_recursive>
 800b2ae:	e7d9      	b.n	800b264 <_fflush_r+0xc>
 800b2b0:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <_fflush_r+0x70>)
 800b2b2:	429c      	cmp	r4, r3
 800b2b4:	d101      	bne.n	800b2ba <_fflush_r+0x62>
 800b2b6:	68ac      	ldr	r4, [r5, #8]
 800b2b8:	e7df      	b.n	800b27a <_fflush_r+0x22>
 800b2ba:	4b04      	ldr	r3, [pc, #16]	; (800b2cc <_fflush_r+0x74>)
 800b2bc:	429c      	cmp	r4, r3
 800b2be:	bf08      	it	eq
 800b2c0:	68ec      	ldreq	r4, [r5, #12]
 800b2c2:	e7da      	b.n	800b27a <_fflush_r+0x22>
 800b2c4:	0800dd04 	.word	0x0800dd04
 800b2c8:	0800dd24 	.word	0x0800dd24
 800b2cc:	0800dce4 	.word	0x0800dce4

0800b2d0 <std>:
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	b510      	push	{r4, lr}
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2de:	6083      	str	r3, [r0, #8]
 800b2e0:	8181      	strh	r1, [r0, #12]
 800b2e2:	6643      	str	r3, [r0, #100]	; 0x64
 800b2e4:	81c2      	strh	r2, [r0, #14]
 800b2e6:	6183      	str	r3, [r0, #24]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	2208      	movs	r2, #8
 800b2ec:	305c      	adds	r0, #92	; 0x5c
 800b2ee:	f7fd fb55 	bl	800899c <memset>
 800b2f2:	4b05      	ldr	r3, [pc, #20]	; (800b308 <std+0x38>)
 800b2f4:	6263      	str	r3, [r4, #36]	; 0x24
 800b2f6:	4b05      	ldr	r3, [pc, #20]	; (800b30c <std+0x3c>)
 800b2f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b2fa:	4b05      	ldr	r3, [pc, #20]	; (800b310 <std+0x40>)
 800b2fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b2fe:	4b05      	ldr	r3, [pc, #20]	; (800b314 <std+0x44>)
 800b300:	6224      	str	r4, [r4, #32]
 800b302:	6323      	str	r3, [r4, #48]	; 0x30
 800b304:	bd10      	pop	{r4, pc}
 800b306:	bf00      	nop
 800b308:	0800b625 	.word	0x0800b625
 800b30c:	0800b647 	.word	0x0800b647
 800b310:	0800b67f 	.word	0x0800b67f
 800b314:	0800b6a3 	.word	0x0800b6a3

0800b318 <_cleanup_r>:
 800b318:	4901      	ldr	r1, [pc, #4]	; (800b320 <_cleanup_r+0x8>)
 800b31a:	f000 b8af 	b.w	800b47c <_fwalk_reent>
 800b31e:	bf00      	nop
 800b320:	0800b259 	.word	0x0800b259

0800b324 <__sfmoreglue>:
 800b324:	b570      	push	{r4, r5, r6, lr}
 800b326:	2268      	movs	r2, #104	; 0x68
 800b328:	1e4d      	subs	r5, r1, #1
 800b32a:	4355      	muls	r5, r2
 800b32c:	460e      	mov	r6, r1
 800b32e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b332:	f7ff fa65 	bl	800a800 <_malloc_r>
 800b336:	4604      	mov	r4, r0
 800b338:	b140      	cbz	r0, 800b34c <__sfmoreglue+0x28>
 800b33a:	2100      	movs	r1, #0
 800b33c:	e9c0 1600 	strd	r1, r6, [r0]
 800b340:	300c      	adds	r0, #12
 800b342:	60a0      	str	r0, [r4, #8]
 800b344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b348:	f7fd fb28 	bl	800899c <memset>
 800b34c:	4620      	mov	r0, r4
 800b34e:	bd70      	pop	{r4, r5, r6, pc}

0800b350 <__sfp_lock_acquire>:
 800b350:	4801      	ldr	r0, [pc, #4]	; (800b358 <__sfp_lock_acquire+0x8>)
 800b352:	f000 b8b3 	b.w	800b4bc <__retarget_lock_acquire_recursive>
 800b356:	bf00      	nop
 800b358:	200009cd 	.word	0x200009cd

0800b35c <__sfp_lock_release>:
 800b35c:	4801      	ldr	r0, [pc, #4]	; (800b364 <__sfp_lock_release+0x8>)
 800b35e:	f000 b8ae 	b.w	800b4be <__retarget_lock_release_recursive>
 800b362:	bf00      	nop
 800b364:	200009cd 	.word	0x200009cd

0800b368 <__sinit_lock_acquire>:
 800b368:	4801      	ldr	r0, [pc, #4]	; (800b370 <__sinit_lock_acquire+0x8>)
 800b36a:	f000 b8a7 	b.w	800b4bc <__retarget_lock_acquire_recursive>
 800b36e:	bf00      	nop
 800b370:	200009ce 	.word	0x200009ce

0800b374 <__sinit_lock_release>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__sinit_lock_release+0x8>)
 800b376:	f000 b8a2 	b.w	800b4be <__retarget_lock_release_recursive>
 800b37a:	bf00      	nop
 800b37c:	200009ce 	.word	0x200009ce

0800b380 <__sinit>:
 800b380:	b510      	push	{r4, lr}
 800b382:	4604      	mov	r4, r0
 800b384:	f7ff fff0 	bl	800b368 <__sinit_lock_acquire>
 800b388:	69a3      	ldr	r3, [r4, #24]
 800b38a:	b11b      	cbz	r3, 800b394 <__sinit+0x14>
 800b38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b390:	f7ff bff0 	b.w	800b374 <__sinit_lock_release>
 800b394:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b398:	6523      	str	r3, [r4, #80]	; 0x50
 800b39a:	4b13      	ldr	r3, [pc, #76]	; (800b3e8 <__sinit+0x68>)
 800b39c:	4a13      	ldr	r2, [pc, #76]	; (800b3ec <__sinit+0x6c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3a2:	42a3      	cmp	r3, r4
 800b3a4:	bf04      	itt	eq
 800b3a6:	2301      	moveq	r3, #1
 800b3a8:	61a3      	streq	r3, [r4, #24]
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f000 f820 	bl	800b3f0 <__sfp>
 800b3b0:	6060      	str	r0, [r4, #4]
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 f81c 	bl	800b3f0 <__sfp>
 800b3b8:	60a0      	str	r0, [r4, #8]
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 f818 	bl	800b3f0 <__sfp>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	60e0      	str	r0, [r4, #12]
 800b3c4:	2104      	movs	r1, #4
 800b3c6:	6860      	ldr	r0, [r4, #4]
 800b3c8:	f7ff ff82 	bl	800b2d0 <std>
 800b3cc:	68a0      	ldr	r0, [r4, #8]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	2109      	movs	r1, #9
 800b3d2:	f7ff ff7d 	bl	800b2d0 <std>
 800b3d6:	68e0      	ldr	r0, [r4, #12]
 800b3d8:	2202      	movs	r2, #2
 800b3da:	2112      	movs	r1, #18
 800b3dc:	f7ff ff78 	bl	800b2d0 <std>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	61a3      	str	r3, [r4, #24]
 800b3e4:	e7d2      	b.n	800b38c <__sinit+0xc>
 800b3e6:	bf00      	nop
 800b3e8:	0800d96c 	.word	0x0800d96c
 800b3ec:	0800b319 	.word	0x0800b319

0800b3f0 <__sfp>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	4607      	mov	r7, r0
 800b3f4:	f7ff ffac 	bl	800b350 <__sfp_lock_acquire>
 800b3f8:	4b1e      	ldr	r3, [pc, #120]	; (800b474 <__sfp+0x84>)
 800b3fa:	681e      	ldr	r6, [r3, #0]
 800b3fc:	69b3      	ldr	r3, [r6, #24]
 800b3fe:	b913      	cbnz	r3, 800b406 <__sfp+0x16>
 800b400:	4630      	mov	r0, r6
 800b402:	f7ff ffbd 	bl	800b380 <__sinit>
 800b406:	3648      	adds	r6, #72	; 0x48
 800b408:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	d503      	bpl.n	800b418 <__sfp+0x28>
 800b410:	6833      	ldr	r3, [r6, #0]
 800b412:	b30b      	cbz	r3, 800b458 <__sfp+0x68>
 800b414:	6836      	ldr	r6, [r6, #0]
 800b416:	e7f7      	b.n	800b408 <__sfp+0x18>
 800b418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b41c:	b9d5      	cbnz	r5, 800b454 <__sfp+0x64>
 800b41e:	4b16      	ldr	r3, [pc, #88]	; (800b478 <__sfp+0x88>)
 800b420:	60e3      	str	r3, [r4, #12]
 800b422:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b426:	6665      	str	r5, [r4, #100]	; 0x64
 800b428:	f000 f847 	bl	800b4ba <__retarget_lock_init_recursive>
 800b42c:	f7ff ff96 	bl	800b35c <__sfp_lock_release>
 800b430:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b434:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b438:	6025      	str	r5, [r4, #0]
 800b43a:	61a5      	str	r5, [r4, #24]
 800b43c:	2208      	movs	r2, #8
 800b43e:	4629      	mov	r1, r5
 800b440:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b444:	f7fd faaa 	bl	800899c <memset>
 800b448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b44c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b450:	4620      	mov	r0, r4
 800b452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b454:	3468      	adds	r4, #104	; 0x68
 800b456:	e7d9      	b.n	800b40c <__sfp+0x1c>
 800b458:	2104      	movs	r1, #4
 800b45a:	4638      	mov	r0, r7
 800b45c:	f7ff ff62 	bl	800b324 <__sfmoreglue>
 800b460:	4604      	mov	r4, r0
 800b462:	6030      	str	r0, [r6, #0]
 800b464:	2800      	cmp	r0, #0
 800b466:	d1d5      	bne.n	800b414 <__sfp+0x24>
 800b468:	f7ff ff78 	bl	800b35c <__sfp_lock_release>
 800b46c:	230c      	movs	r3, #12
 800b46e:	603b      	str	r3, [r7, #0]
 800b470:	e7ee      	b.n	800b450 <__sfp+0x60>
 800b472:	bf00      	nop
 800b474:	0800d96c 	.word	0x0800d96c
 800b478:	ffff0001 	.word	0xffff0001

0800b47c <_fwalk_reent>:
 800b47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b480:	4606      	mov	r6, r0
 800b482:	4688      	mov	r8, r1
 800b484:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b488:	2700      	movs	r7, #0
 800b48a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b48e:	f1b9 0901 	subs.w	r9, r9, #1
 800b492:	d505      	bpl.n	800b4a0 <_fwalk_reent+0x24>
 800b494:	6824      	ldr	r4, [r4, #0]
 800b496:	2c00      	cmp	r4, #0
 800b498:	d1f7      	bne.n	800b48a <_fwalk_reent+0xe>
 800b49a:	4638      	mov	r0, r7
 800b49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a0:	89ab      	ldrh	r3, [r5, #12]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d907      	bls.n	800b4b6 <_fwalk_reent+0x3a>
 800b4a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	d003      	beq.n	800b4b6 <_fwalk_reent+0x3a>
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	47c0      	blx	r8
 800b4b4:	4307      	orrs	r7, r0
 800b4b6:	3568      	adds	r5, #104	; 0x68
 800b4b8:	e7e9      	b.n	800b48e <_fwalk_reent+0x12>

0800b4ba <__retarget_lock_init_recursive>:
 800b4ba:	4770      	bx	lr

0800b4bc <__retarget_lock_acquire_recursive>:
 800b4bc:	4770      	bx	lr

0800b4be <__retarget_lock_release_recursive>:
 800b4be:	4770      	bx	lr

0800b4c0 <__swhatbuf_r>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	460e      	mov	r6, r1
 800b4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c8:	2900      	cmp	r1, #0
 800b4ca:	b096      	sub	sp, #88	; 0x58
 800b4cc:	4614      	mov	r4, r2
 800b4ce:	461d      	mov	r5, r3
 800b4d0:	da08      	bge.n	800b4e4 <__swhatbuf_r+0x24>
 800b4d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	602a      	str	r2, [r5, #0]
 800b4da:	061a      	lsls	r2, r3, #24
 800b4dc:	d410      	bmi.n	800b500 <__swhatbuf_r+0x40>
 800b4de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4e2:	e00e      	b.n	800b502 <__swhatbuf_r+0x42>
 800b4e4:	466a      	mov	r2, sp
 800b4e6:	f000 f903 	bl	800b6f0 <_fstat_r>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	dbf1      	blt.n	800b4d2 <__swhatbuf_r+0x12>
 800b4ee:	9a01      	ldr	r2, [sp, #4]
 800b4f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b4f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b4f8:	425a      	negs	r2, r3
 800b4fa:	415a      	adcs	r2, r3
 800b4fc:	602a      	str	r2, [r5, #0]
 800b4fe:	e7ee      	b.n	800b4de <__swhatbuf_r+0x1e>
 800b500:	2340      	movs	r3, #64	; 0x40
 800b502:	2000      	movs	r0, #0
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	b016      	add	sp, #88	; 0x58
 800b508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b50c <__smakebuf_r>:
 800b50c:	898b      	ldrh	r3, [r1, #12]
 800b50e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b510:	079d      	lsls	r5, r3, #30
 800b512:	4606      	mov	r6, r0
 800b514:	460c      	mov	r4, r1
 800b516:	d507      	bpl.n	800b528 <__smakebuf_r+0x1c>
 800b518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	6123      	str	r3, [r4, #16]
 800b520:	2301      	movs	r3, #1
 800b522:	6163      	str	r3, [r4, #20]
 800b524:	b002      	add	sp, #8
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	ab01      	add	r3, sp, #4
 800b52a:	466a      	mov	r2, sp
 800b52c:	f7ff ffc8 	bl	800b4c0 <__swhatbuf_r>
 800b530:	9900      	ldr	r1, [sp, #0]
 800b532:	4605      	mov	r5, r0
 800b534:	4630      	mov	r0, r6
 800b536:	f7ff f963 	bl	800a800 <_malloc_r>
 800b53a:	b948      	cbnz	r0, 800b550 <__smakebuf_r+0x44>
 800b53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b540:	059a      	lsls	r2, r3, #22
 800b542:	d4ef      	bmi.n	800b524 <__smakebuf_r+0x18>
 800b544:	f023 0303 	bic.w	r3, r3, #3
 800b548:	f043 0302 	orr.w	r3, r3, #2
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	e7e3      	b.n	800b518 <__smakebuf_r+0xc>
 800b550:	4b0d      	ldr	r3, [pc, #52]	; (800b588 <__smakebuf_r+0x7c>)
 800b552:	62b3      	str	r3, [r6, #40]	; 0x28
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	6020      	str	r0, [r4, #0]
 800b558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	9b00      	ldr	r3, [sp, #0]
 800b560:	6163      	str	r3, [r4, #20]
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	6120      	str	r0, [r4, #16]
 800b566:	b15b      	cbz	r3, 800b580 <__smakebuf_r+0x74>
 800b568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b56c:	4630      	mov	r0, r6
 800b56e:	f000 f8d1 	bl	800b714 <_isatty_r>
 800b572:	b128      	cbz	r0, 800b580 <__smakebuf_r+0x74>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	f023 0303 	bic.w	r3, r3, #3
 800b57a:	f043 0301 	orr.w	r3, r3, #1
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	89a0      	ldrh	r0, [r4, #12]
 800b582:	4305      	orrs	r5, r0
 800b584:	81a5      	strh	r5, [r4, #12]
 800b586:	e7cd      	b.n	800b524 <__smakebuf_r+0x18>
 800b588:	0800b319 	.word	0x0800b319

0800b58c <_malloc_usable_size_r>:
 800b58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b590:	1f18      	subs	r0, r3, #4
 800b592:	2b00      	cmp	r3, #0
 800b594:	bfbc      	itt	lt
 800b596:	580b      	ldrlt	r3, [r1, r0]
 800b598:	18c0      	addlt	r0, r0, r3
 800b59a:	4770      	bx	lr

0800b59c <_raise_r>:
 800b59c:	291f      	cmp	r1, #31
 800b59e:	b538      	push	{r3, r4, r5, lr}
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	d904      	bls.n	800b5b0 <_raise_r+0x14>
 800b5a6:	2316      	movs	r3, #22
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5b2:	b112      	cbz	r2, 800b5ba <_raise_r+0x1e>
 800b5b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5b8:	b94b      	cbnz	r3, 800b5ce <_raise_r+0x32>
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 f830 	bl	800b620 <_getpid_r>
 800b5c0:	462a      	mov	r2, r5
 800b5c2:	4601      	mov	r1, r0
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5ca:	f000 b817 	b.w	800b5fc <_kill_r>
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d00a      	beq.n	800b5e8 <_raise_r+0x4c>
 800b5d2:	1c59      	adds	r1, r3, #1
 800b5d4:	d103      	bne.n	800b5de <_raise_r+0x42>
 800b5d6:	2316      	movs	r3, #22
 800b5d8:	6003      	str	r3, [r0, #0]
 800b5da:	2001      	movs	r0, #1
 800b5dc:	e7e7      	b.n	800b5ae <_raise_r+0x12>
 800b5de:	2400      	movs	r4, #0
 800b5e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	4798      	blx	r3
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	e7e0      	b.n	800b5ae <_raise_r+0x12>

0800b5ec <raise>:
 800b5ec:	4b02      	ldr	r3, [pc, #8]	; (800b5f8 <raise+0xc>)
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	6818      	ldr	r0, [r3, #0]
 800b5f2:	f7ff bfd3 	b.w	800b59c <_raise_r>
 800b5f6:	bf00      	nop
 800b5f8:	20000188 	.word	0x20000188

0800b5fc <_kill_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4d07      	ldr	r5, [pc, #28]	; (800b61c <_kill_r+0x20>)
 800b600:	2300      	movs	r3, #0
 800b602:	4604      	mov	r4, r0
 800b604:	4608      	mov	r0, r1
 800b606:	4611      	mov	r1, r2
 800b608:	602b      	str	r3, [r5, #0]
 800b60a:	f7f7 f9e5 	bl	80029d8 <_kill>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	d102      	bne.n	800b618 <_kill_r+0x1c>
 800b612:	682b      	ldr	r3, [r5, #0]
 800b614:	b103      	cbz	r3, 800b618 <_kill_r+0x1c>
 800b616:	6023      	str	r3, [r4, #0]
 800b618:	bd38      	pop	{r3, r4, r5, pc}
 800b61a:	bf00      	nop
 800b61c:	200009c8 	.word	0x200009c8

0800b620 <_getpid_r>:
 800b620:	f7f7 b9d2 	b.w	80029c8 <_getpid>

0800b624 <__sread>:
 800b624:	b510      	push	{r4, lr}
 800b626:	460c      	mov	r4, r1
 800b628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62c:	f000 f894 	bl	800b758 <_read_r>
 800b630:	2800      	cmp	r0, #0
 800b632:	bfab      	itete	ge
 800b634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b636:	89a3      	ldrhlt	r3, [r4, #12]
 800b638:	181b      	addge	r3, r3, r0
 800b63a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b63e:	bfac      	ite	ge
 800b640:	6563      	strge	r3, [r4, #84]	; 0x54
 800b642:	81a3      	strhlt	r3, [r4, #12]
 800b644:	bd10      	pop	{r4, pc}

0800b646 <__swrite>:
 800b646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b64a:	461f      	mov	r7, r3
 800b64c:	898b      	ldrh	r3, [r1, #12]
 800b64e:	05db      	lsls	r3, r3, #23
 800b650:	4605      	mov	r5, r0
 800b652:	460c      	mov	r4, r1
 800b654:	4616      	mov	r6, r2
 800b656:	d505      	bpl.n	800b664 <__swrite+0x1e>
 800b658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b65c:	2302      	movs	r3, #2
 800b65e:	2200      	movs	r2, #0
 800b660:	f000 f868 	bl	800b734 <_lseek_r>
 800b664:	89a3      	ldrh	r3, [r4, #12]
 800b666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b66a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b66e:	81a3      	strh	r3, [r4, #12]
 800b670:	4632      	mov	r2, r6
 800b672:	463b      	mov	r3, r7
 800b674:	4628      	mov	r0, r5
 800b676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b67a:	f000 b817 	b.w	800b6ac <_write_r>

0800b67e <__sseek>:
 800b67e:	b510      	push	{r4, lr}
 800b680:	460c      	mov	r4, r1
 800b682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b686:	f000 f855 	bl	800b734 <_lseek_r>
 800b68a:	1c43      	adds	r3, r0, #1
 800b68c:	89a3      	ldrh	r3, [r4, #12]
 800b68e:	bf15      	itete	ne
 800b690:	6560      	strne	r0, [r4, #84]	; 0x54
 800b692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b69a:	81a3      	strheq	r3, [r4, #12]
 800b69c:	bf18      	it	ne
 800b69e:	81a3      	strhne	r3, [r4, #12]
 800b6a0:	bd10      	pop	{r4, pc}

0800b6a2 <__sclose>:
 800b6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a6:	f000 b813 	b.w	800b6d0 <_close_r>
	...

0800b6ac <_write_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4d07      	ldr	r5, [pc, #28]	; (800b6cc <_write_r+0x20>)
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	4608      	mov	r0, r1
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	602a      	str	r2, [r5, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f7f7 f9c3 	bl	8002a46 <_write>
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	d102      	bne.n	800b6ca <_write_r+0x1e>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	b103      	cbz	r3, 800b6ca <_write_r+0x1e>
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	200009c8 	.word	0x200009c8

0800b6d0 <_close_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4d06      	ldr	r5, [pc, #24]	; (800b6ec <_close_r+0x1c>)
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	4608      	mov	r0, r1
 800b6da:	602b      	str	r3, [r5, #0]
 800b6dc:	f7f7 f9cf 	bl	8002a7e <_close>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d102      	bne.n	800b6ea <_close_r+0x1a>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	b103      	cbz	r3, 800b6ea <_close_r+0x1a>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	200009c8 	.word	0x200009c8

0800b6f0 <_fstat_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d07      	ldr	r5, [pc, #28]	; (800b710 <_fstat_r+0x20>)
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	602b      	str	r3, [r5, #0]
 800b6fe:	f7f7 f9ca 	bl	8002a96 <_fstat>
 800b702:	1c43      	adds	r3, r0, #1
 800b704:	d102      	bne.n	800b70c <_fstat_r+0x1c>
 800b706:	682b      	ldr	r3, [r5, #0]
 800b708:	b103      	cbz	r3, 800b70c <_fstat_r+0x1c>
 800b70a:	6023      	str	r3, [r4, #0]
 800b70c:	bd38      	pop	{r3, r4, r5, pc}
 800b70e:	bf00      	nop
 800b710:	200009c8 	.word	0x200009c8

0800b714 <_isatty_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4d06      	ldr	r5, [pc, #24]	; (800b730 <_isatty_r+0x1c>)
 800b718:	2300      	movs	r3, #0
 800b71a:	4604      	mov	r4, r0
 800b71c:	4608      	mov	r0, r1
 800b71e:	602b      	str	r3, [r5, #0]
 800b720:	f7f7 f9c9 	bl	8002ab6 <_isatty>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d102      	bne.n	800b72e <_isatty_r+0x1a>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	b103      	cbz	r3, 800b72e <_isatty_r+0x1a>
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	200009c8 	.word	0x200009c8

0800b734 <_lseek_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4d07      	ldr	r5, [pc, #28]	; (800b754 <_lseek_r+0x20>)
 800b738:	4604      	mov	r4, r0
 800b73a:	4608      	mov	r0, r1
 800b73c:	4611      	mov	r1, r2
 800b73e:	2200      	movs	r2, #0
 800b740:	602a      	str	r2, [r5, #0]
 800b742:	461a      	mov	r2, r3
 800b744:	f7f7 f9c2 	bl	8002acc <_lseek>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d102      	bne.n	800b752 <_lseek_r+0x1e>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	b103      	cbz	r3, 800b752 <_lseek_r+0x1e>
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	200009c8 	.word	0x200009c8

0800b758 <_read_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d07      	ldr	r5, [pc, #28]	; (800b778 <_read_r+0x20>)
 800b75c:	4604      	mov	r4, r0
 800b75e:	4608      	mov	r0, r1
 800b760:	4611      	mov	r1, r2
 800b762:	2200      	movs	r2, #0
 800b764:	602a      	str	r2, [r5, #0]
 800b766:	461a      	mov	r2, r3
 800b768:	f7f7 f950 	bl	8002a0c <_read>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d102      	bne.n	800b776 <_read_r+0x1e>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	b103      	cbz	r3, 800b776 <_read_r+0x1e>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	200009c8 	.word	0x200009c8

0800b77c <_init>:
 800b77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77e:	bf00      	nop
 800b780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b782:	bc08      	pop	{r3}
 800b784:	469e      	mov	lr, r3
 800b786:	4770      	bx	lr

0800b788 <_fini>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	bf00      	nop
 800b78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b78e:	bc08      	pop	{r3}
 800b790:	469e      	mov	lr, r3
 800b792:	4770      	bx	lr
