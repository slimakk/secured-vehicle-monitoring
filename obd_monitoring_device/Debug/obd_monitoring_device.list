
obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ff4  0800a350  0800a350  0001a350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c344  0800c344  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c344  0800c344  0001c344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c34c  0800c34c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c34c  0800c34c  0001c34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c350  0800c350  0001c350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200001ec  0800c540  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  0800c540  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c88  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003259  00000000  00000000  00033ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00037100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00038170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023755  00000000  00000000  00039088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f77  00000000  00000000  0005c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc2f7  00000000  00000000  00072754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ea4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005450  00000000  00000000  0013ea9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a334 	.word	0x0800a334

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a334 	.word	0x0800a334

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CAN1_Init>:
extern IWDG_HandleTypeDef hiwdg;
CAN_HandleTypeDef hcan1;
uint32_t tx_mailbox;

void MX_CAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_CAN1_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f6e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f9c:	f001 fd94 	bl	8002ac8 <HAL_CAN_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_CAN1_Init+0x5e>
	{
	  Error_Handler();
 8000fa6:	f001 f8e1 	bl	800216c <Error_Handler>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000208 	.word	0x20000208
 8000fb4:	40006400 	.word	0x40006400

08000fb8 <canConfig>:

void canConfig(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8000fca:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000fce:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8000fd4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fd8:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <canConfig+0x64>)
 8000fec:	f001 fe71 	bl	8002cd2 <HAL_CAN_ConfigFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <canConfig+0x42>
	{
		Error_Handler();
 8000ff6:	f001 f8b9 	bl	800216c <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <canConfig+0x64>)
 8000ffc:	f001 ff33 	bl	8002e66 <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <canConfig+0x52>
	{
		Error_Handler();
 8001006:	f001 f8b1 	bl	800216c <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <canConfig+0x64>)
 800100e:	f002 f950 	bl	80032b2 <HAL_CAN_ActivateNotification>
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000208 	.word	0x20000208

08001020 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	f107 0210 	add.w	r2, r7, #16
 8001030:	2100      	movs	r1, #0
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001034:	f002 f82b 	bl	800308e <HAL_CAN_GetRxMessage>

	float resp_value = OBD2_PID_Parse(rx_data);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fad3 	bl	80015e8 <OBD2_PID_Parse>
 8001042:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	OBD2_ShowOnDisplay(resp_value);
 8001046:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800104a:	f000 feb3 	bl	8001db4 <OBD2_ShowOnDisplay>

	HAL_IWDG_Refresh(&hiwdg);
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001050:	f003 fcc2 	bl	80049d8 <HAL_IWDG_Refresh>
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	; 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000208 	.word	0x20000208
 8001060:	2000032c 	.word	0x2000032c

08001064 <CAN_SEND_MESSAGE>:

void CAN_SEND_MESSAGE(uint8_t *txFrame)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = DEVICE_CAN_ID;
 800106c:	f240 73df 	movw	r3, #2015	; 0x7df
 8001070:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 8001072:	2308      	movs	r3, #8
 8001074:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, txFrame, &tx_mailbox) != HAL_OK)
 800107e:	f107 0108 	add.w	r1, r7, #8
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <CAN_SEND_MESSAGE+0x3c>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4807      	ldr	r0, [pc, #28]	; (80010a4 <CAN_SEND_MESSAGE+0x40>)
 8001088:	f001 ff31 	bl	8002eee <HAL_CAN_AddTxMessage>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <CAN_SEND_MESSAGE+0x32>
	{
		Error_Handler();
 8001092:	f001 f86b 	bl	800216c <Error_Handler>
	}

}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000230 	.word	0x20000230
 80010a4:	20000208 	.word	0x20000208

080010a8 <KLine_Init>:
static void MX_GPIO_KLineUART_Init(void);
static void UART_PIN_State(char state);
static char Verify_Checksum (uint8_t *data, uint8_t lenght);
static void MX_USART1_UART_Init(uint16_t baud_rate);

obd_protocol KLine_Init(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 80010ae:	f000 f90f 	bl	80012d0 <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 80010b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010b6:	f001 fce3 	bl	8002a80 <HAL_Delay>
	UART_PIN_State(0); //0
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f91e 	bl	80012fc <UART_PIN_State>
	HAL_Delay(200);
 80010c0:	20c8      	movs	r0, #200	; 0xc8
 80010c2:	f001 fcdd 	bl	8002a80 <HAL_Delay>
	UART_PIN_State(1);//11
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 f918 	bl	80012fc <UART_PIN_State>
	HAL_Delay(400);
 80010cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010d0:	f001 fcd6 	bl	8002a80 <HAL_Delay>
	UART_PIN_State(0);//00
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f911 	bl	80012fc <UART_PIN_State>
	HAL_Delay(400);
 80010da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010de:	f001 fccf 	bl	8002a80 <HAL_Delay>
	UART_PIN_State(1);//11
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 f90a 	bl	80012fc <UART_PIN_State>
	HAL_Delay(400);
 80010e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010ec:	f001 fcc8 	bl	8002a80 <HAL_Delay>
	UART_PIN_State(0);//00
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 f903 	bl	80012fc <UART_PIN_State>
	HAL_Delay(400);
 80010f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010fa:	f001 fcc1 	bl	8002a80 <HAL_Delay>
	UART_PIN_State(1);//1
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 f8fc 	bl	80012fc <UART_PIN_State>

	MX_USART1_UART_Init(10400);
 8001104:	f642 00a0 	movw	r0, #10400	; 0x28a0
 8001108:	f000 f9cc 	bl	80014a4 <MX_USART1_UART_Init>

	HAL_UART_Receive(&huart1, uartBuf, 3, 500);
 800110c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001110:	2203      	movs	r2, #3
 8001112:	492d      	ldr	r1, [pc, #180]	; (80011c8 <KLine_Init+0x120>)
 8001114:	482d      	ldr	r0, [pc, #180]	; (80011cc <KLine_Init+0x124>)
 8001116:	f004 ff42 	bl	8005f9e <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <KLine_Init+0x120>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b55      	cmp	r3, #85	; 0x55
 8001120:	d001      	beq.n	8001126 <KLine_Init+0x7e>
	{
		return OBD_NONE;
 8001122:	2300      	movs	r3, #0
 8001124:	e04b      	b.n	80011be <KLine_Init+0x116>
	}
	else if(uartBuf[1] == uartBuf[2])
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <KLine_Init+0x120>)
 8001128:	785a      	ldrb	r2, [r3, #1]
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <KLine_Init+0x120>)
 800112c:	789b      	ldrb	r3, [r3, #2]
 800112e:	429a      	cmp	r2, r3
 8001130:	d126      	bne.n	8001180 <KLine_Init+0xd8>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <KLine_Init+0x120>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	43db      	mvns	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 800113c:	2019      	movs	r0, #25
 800113e:	f001 fc9f 	bl	8002a80 <HAL_Delay>
			HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 8001142:	1df9      	adds	r1, r7, #7
 8001144:	2332      	movs	r3, #50	; 0x32
 8001146:	2201      	movs	r2, #1
 8001148:	4820      	ldr	r0, [pc, #128]	; (80011cc <KLine_Init+0x124>)
 800114a:	f004 fe94 	bl	8005e76 <HAL_UART_Transmit>
			HAL_Delay(25);
 800114e:	2019      	movs	r0, #25
 8001150:	f001 fc96 	bl	8002a80 <HAL_Delay>
			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <KLine_Init+0x124>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	8b1b      	ldrh	r3, [r3, #24]
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <KLine_Init+0x124>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0208 	orr.w	r2, r2, #8
 8001164:	b292      	uxth	r2, r2
 8001166:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2201      	movs	r2, #1
 800116c:	4918      	ldr	r1, [pc, #96]	; (80011d0 <KLine_Init+0x128>)
 800116e:	4817      	ldr	r0, [pc, #92]	; (80011cc <KLine_Init+0x124>)
 8001170:	f004 ff15 	bl	8005f9e <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
			kline_kb = uartBuf[1];
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <KLine_Init+0x120>)
 8001176:	785a      	ldrb	r2, [r3, #1]
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <KLine_Init+0x12c>)
 800117a:	701a      	strb	r2, [r3, #0]
			return OBD_PROTO_ISO9141;
 800117c:	2301      	movs	r3, #1
 800117e:	e01e      	b.n	80011be <KLine_Init+0x116>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <KLine_Init+0x120>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	43db      	mvns	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 800118a:	2019      	movs	r0, #25
 800118c:	f001 fc78 	bl	8002a80 <HAL_Delay>
		HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 8001190:	1db9      	adds	r1, r7, #6
 8001192:	2332      	movs	r3, #50	; 0x32
 8001194:	2201      	movs	r2, #1
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <KLine_Init+0x124>)
 8001198:	f004 fe6d 	bl	8005e76 <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <KLine_Init+0x124>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	8b1b      	ldrh	r3, [r3, #24]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <KLine_Init+0x124>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0208 	orr.w	r2, r2, #8
 80011ac:	b292      	uxth	r2, r2
 80011ae:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	2201      	movs	r2, #1
 80011b4:	4906      	ldr	r1, [pc, #24]	; (80011d0 <KLine_Init+0x128>)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <KLine_Init+0x124>)
 80011b8:	f004 fef1 	bl	8005f9e <HAL_UART_Receive>
		return OBD_PROTO_KWP2000_SLOW;
 80011bc:	2302      	movs	r3, #2
	}
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000384 	.word	0x20000384
 80011cc:	20000250 	.word	0x20000250
 80011d0:	2000024a 	.word	0x2000024a
 80011d4:	2000024b 	.word	0x2000024b

080011d8 <KWP2000_Fast_Init>:

obd_protocol KWP2000_Fast_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 80011de:	4a37      	ldr	r2, [pc, #220]	; (80012bc <KWP2000_Fast_Init+0xe4>)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e8:	6018      	str	r0, [r3, #0]
 80011ea:	3304      	adds	r3, #4
 80011ec:	7019      	strb	r1, [r3, #0]
	uint8_t resp_msg[7]={0};
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	2100      	movs	r1, #0
 80011f8:	460a      	mov	r2, r1
 80011fa:	801a      	strh	r2, [r3, #0]
 80011fc:	460a      	mov	r2, r1
 80011fe:	709a      	strb	r2, [r3, #2]
	checksum = 0;
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <KWP2000_Fast_Init+0xe8>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]

	HAL_UART_DeInit(&huart1);
 8001206:	482f      	ldr	r0, [pc, #188]	; (80012c4 <KWP2000_Fast_Init+0xec>)
 8001208:	f004 fde8 	bl	8005ddc <HAL_UART_DeInit>
	HAL_Delay(3000);
 800120c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001210:	f001 fc36 	bl	8002a80 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 8001214:	f000 f85c 	bl	80012d0 <MX_GPIO_KLineUART_Init>
	UART_PIN_State(0);
 8001218:	2000      	movs	r0, #0
 800121a:	f000 f86f 	bl	80012fc <UART_PIN_State>
	HAL_Delay(25);
 800121e:	2019      	movs	r0, #25
 8001220:	f001 fc2e 	bl	8002a80 <HAL_Delay>
	UART_PIN_State(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f000 f869 	bl	80012fc <UART_PIN_State>
	HAL_Delay(25);
 800122a:	2019      	movs	r0, #25
 800122c:	f001 fc28 	bl	8002a80 <HAL_Delay>
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001230:	4824      	ldr	r0, [pc, #144]	; (80012c4 <KWP2000_Fast_Init+0xec>)
 8001232:	f004 fd85 	bl	8005d40 <HAL_UART_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <KWP2000_Fast_Init+0x68>
	{
		Error_Handler();
 800123c:	f000 ff96 	bl	800216c <Error_Handler>
	}
	HAL_UART_Transmit(&huart1, start_msg, 5, 50);
 8001240:	f107 010c 	add.w	r1, r7, #12
 8001244:	2332      	movs	r3, #50	; 0x32
 8001246:	2205      	movs	r2, #5
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <KWP2000_Fast_Init+0xec>)
 800124a:	f004 fe14 	bl	8005e76 <HAL_UART_Transmit>
	HAL_Delay(20);
 800124e:	2014      	movs	r0, #20
 8001250:	f001 fc16 	bl	8002a80 <HAL_Delay>
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <KWP2000_Fast_Init+0xec>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	8b1b      	ldrh	r3, [r3, #24]
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <KWP2000_Fast_Init+0xec>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0208 	orr.w	r2, r2, #8
 8001264:	b292      	uxth	r2, r2
 8001266:	831a      	strh	r2, [r3, #24]
	HAL_UART_Receive(&huart1, uartBuf, 7, 500);
 8001268:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800126c:	2207      	movs	r2, #7
 800126e:	4916      	ldr	r1, [pc, #88]	; (80012c8 <KWP2000_Fast_Init+0xf0>)
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <KWP2000_Fast_Init+0xec>)
 8001272:	f004 fe94 	bl	8005f9e <HAL_UART_Receive>
	for(int i = 0; i < 6; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e00c      	b.n	8001296 <KWP2000_Fast_Init+0xbe>
	{
		checksum = checksum + resp_msg[i];
 800127c:	1d3a      	adds	r2, r7, #4
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4413      	add	r3, r2
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <KWP2000_Fast_Init+0xe8>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4413      	add	r3, r2
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <KWP2000_Fast_Init+0xe8>)
 800128e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2b05      	cmp	r3, #5
 800129a:	ddef      	ble.n	800127c <KWP2000_Fast_Init+0xa4>
	}
	if(checksum == resp_msg[6])
 800129c:	7aba      	ldrb	r2, [r7, #10]
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <KWP2000_Fast_Init+0xe8>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d104      	bne.n	80012b0 <KWP2000_Fast_Init+0xd8>
	{
		ecu_addr = resp_msg[2];
 80012a6:	79ba      	ldrb	r2, [r7, #6]
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <KWP2000_Fast_Init+0xf4>)
 80012aa:	701a      	strb	r2, [r3, #0]
		return OBD_PROTO_KWP2000_FAST;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e000      	b.n	80012b2 <KWP2000_Fast_Init+0xda>
	}
	else
		return OBD_NONE;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800a350 	.word	0x0800a350
 80012c0:	20000249 	.word	0x20000249
 80012c4:	20000250 	.word	0x20000250
 80012c8:	20000384 	.word	0x20000384
 80012cc:	2000024a 	.word	0x2000024a

080012d0 <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
 80012d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012da:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f0:	f002 fd04 	bl	8003cfc <HAL_GPIO_Init>
}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <UART_PIN_State>:

static void UART_PIN_State(char state)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d10e      	bne.n	800132a <UART_PIN_State+0x2e>
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001316:	f002 fe6b 	bl	8003ff0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f002 fe64 	bl	8003ff0 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}
 8001328:	e00d      	b.n	8001346 <UART_PIN_State+0x4a>
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f002 fe5c 	bl	8003ff0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f002 fe55 	bl	8003ff0 <HAL_GPIO_WritePin>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <KLine_SEND_MESSAGE>:

void KLine_SEND_MESSAGE(uint8_t* txFrame)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, txFrame[0], txFrame[1], 0};
 8001358:	2368      	movs	r3, #104	; 0x68
 800135a:	733b      	strb	r3, [r7, #12]
 800135c:	236a      	movs	r3, #106	; 0x6a
 800135e:	737b      	strb	r3, [r7, #13]
 8001360:	23f1      	movs	r3, #241	; 0xf1
 8001362:	73bb      	strb	r3, [r7, #14]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	743b      	strb	r3, [r7, #16]
 8001370:	2300      	movs	r3, #0
 8001372:	747b      	strb	r3, [r7, #17]

	pid_length = PID_Get_Lenght(txFrame[1]);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3301      	adds	r3, #1
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fd52 	bl	8001e24 <PID_Get_Lenght>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <KLine_SEND_MESSAGE+0xa0>)
 8001386:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <KLine_SEND_MESSAGE+0xa4>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e00d      	b.n	80013b0 <KLine_SEND_MESSAGE+0x60>
	{
		checksum += kline_msg[i];
 8001394:	f107 020c 	add.w	r2, r7, #12
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	4413      	add	r3, r2
 800139c:	781a      	ldrb	r2, [r3, #0]
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <KLine_SEND_MESSAGE+0xa4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <KLine_SEND_MESSAGE+0xa4>)
 80013a8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d9ee      	bls.n	8001394 <KLine_SEND_MESSAGE+0x44>
	}

	HAL_UART_Transmit(&huart1, kline_msg, sizeof(kline_msg), 12);
 80013b6:	f107 010c 	add.w	r1, r7, #12
 80013ba:	230c      	movs	r3, #12
 80013bc:	2206      	movs	r2, #6
 80013be:	480e      	ldr	r0, [pc, #56]	; (80013f8 <KLine_SEND_MESSAGE+0xa8>)
 80013c0:	f004 fd59 	bl	8005e76 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <KLine_SEND_MESSAGE+0xa8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	8b1b      	ldrh	r3, [r3, #24]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <KLine_SEND_MESSAGE+0xa8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0208 	orr.w	r2, r2, #8
 80013d4:	b292      	uxth	r2, r2
 80013d6:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, KLine_RX_Buf, 7);
 80013d8:	2207      	movs	r2, #7
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <KLine_SEND_MESSAGE+0xac>)
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <KLine_SEND_MESSAGE+0xa8>)
 80013de:	f004 feaf 	bl	8006140 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80013e2:	203c      	movs	r0, #60	; 0x3c
 80013e4:	f001 fb4c 	bl	8002a80 <HAL_Delay>
}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000024c 	.word	0x2000024c
 80013f4:	20000249 	.word	0x20000249
 80013f8:	20000250 	.word	0x20000250
 80013fc:	20000234 	.word	0x20000234

08001400 <KWP2000_SEND_MESSAGE>:

void KWP2000_SEND_MESSAGE(uint8_t* txFrame)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, ecu_addr, 0xF1, txFrame[0], txFrame[1], 0};
 8001408:	23c2      	movs	r3, #194	; 0xc2
 800140a:	733b      	strb	r3, [r7, #12]
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <KWP2000_SEND_MESSAGE+0x94>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	737b      	strb	r3, [r7, #13]
 8001412:	23f1      	movs	r3, #241	; 0xf1
 8001414:	73bb      	strb	r3, [r7, #14]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	785b      	ldrb	r3, [r3, #1]
 8001420:	743b      	strb	r3, [r7, #16]
 8001422:	2300      	movs	r3, #0
 8001424:	747b      	strb	r3, [r7, #17]
	checksum = 0;
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <KWP2000_SEND_MESSAGE+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kwp_msg); i++)
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	e00d      	b.n	800144e <KWP2000_SEND_MESSAGE+0x4e>
	{
		checksum += kwp_msg[i];
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	4413      	add	r3, r2
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <KWP2000_SEND_MESSAGE+0x98>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4413      	add	r3, r2
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <KWP2000_SEND_MESSAGE+0x98>)
 8001446:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kwp_msg); i++)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b05      	cmp	r3, #5
 8001452:	d9ee      	bls.n	8001432 <KWP2000_SEND_MESSAGE+0x32>
	}
	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <KWP2000_SEND_MESSAGE+0x98>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	747b      	strb	r3, [r7, #17]

	HAL_UART_Transmit(&huart1, kwp_msg, sizeof(kwp_msg), 10);
 800145a:	f107 010c 	add.w	r1, r7, #12
 800145e:	230a      	movs	r3, #10
 8001460:	2206      	movs	r2, #6
 8001462:	480e      	ldr	r0, [pc, #56]	; (800149c <KWP2000_SEND_MESSAGE+0x9c>)
 8001464:	f004 fd07 	bl	8005e76 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <KWP2000_SEND_MESSAGE+0x9c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	8b1b      	ldrh	r3, [r3, #24]
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <KWP2000_SEND_MESSAGE+0x9c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0208 	orr.w	r2, r2, #8
 8001478:	b292      	uxth	r2, r2
 800147a:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, KLine_RX_Buf, 7);
 800147c:	2207      	movs	r2, #7
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <KWP2000_SEND_MESSAGE+0xa0>)
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <KWP2000_SEND_MESSAGE+0x9c>)
 8001482:	f004 fe5d 	bl	8006140 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 8001486:	203c      	movs	r0, #60	; 0x3c
 8001488:	f001 fafa 	bl	8002a80 <HAL_Delay>
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000024a 	.word	0x2000024a
 8001498:	20000249 	.word	0x20000249
 800149c:	20000250 	.word	0x20000250
 80014a0:	20000234 	.word	0x20000234

080014a4 <MX_USART1_UART_Init>:
	}
	return 0;
}

void MX_USART1_UART_Init(uint16_t baud_rate)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
  huart1.Instance = USART1;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <MX_USART1_UART_Init+0x6c>)
 80014b2:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud_rate;
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	4a15      	ldr	r2, [pc, #84]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014b8:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_USART1_UART_Init+0x68>)
 80014f4:	f004 fc24 	bl	8005d40 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80014fe:	f000 fe35 	bl	800216c <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000250 	.word	0x20000250
 8001510:	40013800 	.word	0x40013800

08001514 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i <= pid_length + 3; i++)
 8001520:	2302      	movs	r3, #2
 8001522:	73bb      	strb	r3, [r7, #14]
 8001524:	e00b      	b.n	800153e <HAL_UART_RxCpltCallback+0x2a>
	{
		rxFrame[j] = KLine_RX_Buf[i];
 8001526:	7bba      	ldrb	r2, [r7, #14]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	4910      	ldr	r1, [pc, #64]	; (800156c <HAL_UART_RxCpltCallback+0x58>)
 800152c:	5c89      	ldrb	r1, [r1, r2]
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_UART_RxCpltCallback+0x5c>)
 8001530:	54d1      	strb	r1, [r2, r3]
		j++;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	3301      	adds	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i <= pid_length + 3; i++)
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	3301      	adds	r3, #1
 800153c:	73bb      	strb	r3, [r7, #14]
 800153e:	7bba      	ldrb	r2, [r7, #14]
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_UART_RxCpltCallback+0x60>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	3303      	adds	r3, #3
 8001546:	429a      	cmp	r2, r3
 8001548:	dded      	ble.n	8001526 <HAL_UART_RxCpltCallback+0x12>
	}

	OBD2_ShowOnDisplay(OBD2_PID_Parse(rxFrame));
 800154a:	4809      	ldr	r0, [pc, #36]	; (8001570 <HAL_UART_RxCpltCallback+0x5c>)
 800154c:	f000 f84c 	bl	80015e8 <OBD2_PID_Parse>
 8001550:	eef0 7a40 	vmov.f32	s15, s0
 8001554:	eeb0 0a67 	vmov.f32	s0, s15
 8001558:	f000 fc2c 	bl	8001db4 <OBD2_ShowOnDisplay>

	HAL_IWDG_Refresh(&hiwdg);
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <HAL_UART_RxCpltCallback+0x64>)
 800155e:	f003 fa3b 	bl	80049d8 <HAL_IWDG_Refresh>
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000234 	.word	0x20000234
 8001570:	20000244 	.word	0x20000244
 8001574:	2000024c 	.word	0x2000024c
 8001578:	2000032c 	.word	0x2000032c

0800157c <OBD2_Request>:
//	strcat(txTest2, "\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t *)txTest2, sizeof(txTest2),10);
//}

void OBD2_Request(OBD obd)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	80b8      	strh	r0, [r7, #4]
	if(obd.used_protocol == OBD_PROTO_CAN)
 8001584:	793b      	ldrb	r3, [r7, #4]
 8001586:	2b04      	cmp	r3, #4
 8001588:	d115      	bne.n	80015b6 <OBD2_Request+0x3a>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 800158a:	2302      	movs	r3, #2
 800158c:	743b      	strb	r3, [r7, #16]
 800158e:	2301      	movs	r3, #1
 8001590:	747b      	strb	r3, [r7, #17]
 8001592:	797b      	ldrb	r3, [r7, #5]
 8001594:	74bb      	strb	r3, [r7, #18]
 8001596:	2300      	movs	r3, #0
 8001598:	74fb      	strb	r3, [r7, #19]
 800159a:	2300      	movs	r3, #0
 800159c:	753b      	strb	r3, [r7, #20]
 800159e:	2300      	movs	r3, #0
 80015a0:	757b      	strb	r3, [r7, #21]
 80015a2:	2300      	movs	r3, #0
 80015a4:	75bb      	strb	r3, [r7, #22]
 80015a6:	2300      	movs	r3, #0
 80015a8:	75fb      	strb	r3, [r7, #23]
		CAN_SEND_MESSAGE(tx_data_CAN);
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fd58 	bl	8001064 <CAN_SEND_MESSAGE>
		else
		{
			KWP2000_SEND_MESSAGE(tx_data_ISO);
		}
	}
}
 80015b4:	e011      	b.n	80015da <OBD2_Request+0x5e>
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 80015b6:	2301      	movs	r3, #1
 80015b8:	733b      	strb	r3, [r7, #12]
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	737b      	strb	r3, [r7, #13]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 80015be:	793b      	ldrb	r3, [r7, #4]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d105      	bne.n	80015d0 <OBD2_Request+0x54>
			KLine_SEND_MESSAGE(tx_data_ISO);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fec1 	bl	8001350 <KLine_SEND_MESSAGE>
}
 80015ce:	e004      	b.n	80015da <OBD2_Request+0x5e>
			KWP2000_SEND_MESSAGE(tx_data_ISO);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff13 	bl	8001400 <KWP2000_SEND_MESSAGE>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	0000      	movs	r0, r0
 80015e4:	0000      	movs	r0, r0
	...

080015e8 <OBD2_PID_Parse>:

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	float value = 0;
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3302      	adds	r3, #2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	3b04      	subs	r3, #4
 80015fe:	2ba2      	cmp	r3, #162	; 0xa2
 8001600:	f200 8399 	bhi.w	8001d36 <OBD2_PID_Parse+0x74e>
 8001604:	a201      	add	r2, pc, #4	; (adr r2, 800160c <OBD2_PID_Parse+0x24>)
 8001606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160a:	bf00      	nop
 800160c:	08001899 	.word	0x08001899
 8001610:	080018a1 	.word	0x080018a1
 8001614:	080018b7 	.word	0x080018b7
 8001618:	080018b7 	.word	0x080018b7
 800161c:	080018b7 	.word	0x080018b7
 8001620:	080018b7 	.word	0x080018b7
 8001624:	080018bd 	.word	0x080018bd
 8001628:	080018d9 	.word	0x080018d9
 800162c:	080018ed 	.word	0x080018ed
 8001630:	08001913 	.word	0x08001913
 8001634:	08001927 	.word	0x08001927
 8001638:	08001941 	.word	0x08001941
 800163c:	08001957 	.word	0x08001957
 8001640:	08001981 	.word	0x08001981
 8001644:	08001d37 	.word	0x08001d37
 8001648:	08001d37 	.word	0x08001d37
 800164c:	08001989 	.word	0x08001989
 8001650:	08001989 	.word	0x08001989
 8001654:	08001989 	.word	0x08001989
 8001658:	08001989 	.word	0x08001989
 800165c:	08001989 	.word	0x08001989
 8001660:	08001989 	.word	0x08001989
 8001664:	08001989 	.word	0x08001989
 8001668:	08001989 	.word	0x08001989
 800166c:	08001d37 	.word	0x08001d37
 8001670:	08001d37 	.word	0x08001d37
 8001674:	08001d37 	.word	0x08001d37
 8001678:	080019a7 	.word	0x080019a7
 800167c:	08001d37 	.word	0x08001d37
 8001680:	080019a7 	.word	0x080019a7
 8001684:	080019c5 	.word	0x080019c5
 8001688:	080019f5 	.word	0x080019f5
 800168c:	08001a1b 	.word	0x08001a1b
 8001690:	08001a1b 	.word	0x08001a1b
 8001694:	08001a1b 	.word	0x08001a1b
 8001698:	08001a1b 	.word	0x08001a1b
 800169c:	08001a1b 	.word	0x08001a1b
 80016a0:	08001a1b 	.word	0x08001a1b
 80016a4:	08001a1b 	.word	0x08001a1b
 80016a8:	08001a1b 	.word	0x08001a1b
 80016ac:	08001a23 	.word	0x08001a23
 80016b0:	08001a2b 	.word	0x08001a2b
 80016b4:	08001a31 	.word	0x08001a31
 80016b8:	08001a31 	.word	0x08001a31
 80016bc:	08001a39 	.word	0x08001a39
 80016c0:	08001a4d 	.word	0x08001a4d
 80016c4:	08001a6b 	.word	0x08001a6b
 80016c8:	08001a91 	.word	0x08001a91
 80016cc:	08001aa5 	.word	0x08001aa5
 80016d0:	08001aa5 	.word	0x08001aa5
 80016d4:	08001aa5 	.word	0x08001aa5
 80016d8:	08001aa5 	.word	0x08001aa5
 80016dc:	08001aa5 	.word	0x08001aa5
 80016e0:	08001aa5 	.word	0x08001aa5
 80016e4:	08001aa5 	.word	0x08001aa5
 80016e8:	08001aa5 	.word	0x08001aa5
 80016ec:	08001aad 	.word	0x08001aad
 80016f0:	08001aad 	.word	0x08001aad
 80016f4:	08001aad 	.word	0x08001aad
 80016f8:	08001aad 	.word	0x08001aad
 80016fc:	08001d37 	.word	0x08001d37
 8001700:	08001d37 	.word	0x08001d37
 8001704:	08001ad9 	.word	0x08001ad9
 8001708:	08001b03 	.word	0x08001b03
 800170c:	08001b0b 	.word	0x08001b0b
 8001710:	08001b13 	.word	0x08001b13
 8001714:	08001b1b 	.word	0x08001b1b
 8001718:	08001b31 	.word	0x08001b31
 800171c:	08001b31 	.word	0x08001b31
 8001720:	08001b31 	.word	0x08001b31
 8001724:	08001b31 	.word	0x08001b31
 8001728:	08001b31 	.word	0x08001b31
 800172c:	08001b31 	.word	0x08001b31
 8001730:	08001b39 	.word	0x08001b39
 8001734:	08001b39 	.word	0x08001b39
 8001738:	08001b57 	.word	0x08001b57
 800173c:	08001d37 	.word	0x08001d37
 8001740:	08001d37 	.word	0x08001d37
 8001744:	08001b6b 	.word	0x08001b6b
 8001748:	08001b8d 	.word	0x08001b8d
 800174c:	08001bbf 	.word	0x08001bbf
 8001750:	08001be3 	.word	0x08001be3
 8001754:	08001be3 	.word	0x08001be3
 8001758:	08001be3 	.word	0x08001be3
 800175c:	08001be3 	.word	0x08001be3
 8001760:	08001be9 	.word	0x08001be9
 8001764:	08001c07 	.word	0x08001c07
 8001768:	08001c07 	.word	0x08001c07
 800176c:	08001c0f 	.word	0x08001c0f
 8001770:	08001c25 	.word	0x08001c25
 8001774:	08001c2b 	.word	0x08001c2b
 8001778:	08001d37 	.word	0x08001d37
 800177c:	08001d37 	.word	0x08001d37
 8001780:	08001c5d 	.word	0x08001c5d
 8001784:	08001c5d 	.word	0x08001c5d
 8001788:	08001c73 	.word	0x08001c73
 800178c:	08001c91 	.word	0x08001c91
 8001790:	08001d37 	.word	0x08001d37
 8001794:	08001ca7 	.word	0x08001ca7
 8001798:	08001caf 	.word	0x08001caf
 800179c:	08001caf 	.word	0x08001caf
 80017a0:	08001d37 	.word	0x08001d37
 80017a4:	08001d37 	.word	0x08001d37
 80017a8:	08001d37 	.word	0x08001d37
 80017ac:	08001d37 	.word	0x08001d37
 80017b0:	08001d37 	.word	0x08001d37
 80017b4:	08001d37 	.word	0x08001d37
 80017b8:	08001d37 	.word	0x08001d37
 80017bc:	08001d37 	.word	0x08001d37
 80017c0:	08001d37 	.word	0x08001d37
 80017c4:	08001d37 	.word	0x08001d37
 80017c8:	08001d37 	.word	0x08001d37
 80017cc:	08001d37 	.word	0x08001d37
 80017d0:	08001d37 	.word	0x08001d37
 80017d4:	08001d37 	.word	0x08001d37
 80017d8:	08001d37 	.word	0x08001d37
 80017dc:	08001d37 	.word	0x08001d37
 80017e0:	08001d37 	.word	0x08001d37
 80017e4:	08001d37 	.word	0x08001d37
 80017e8:	08001d37 	.word	0x08001d37
 80017ec:	08001cc5 	.word	0x08001cc5
 80017f0:	08001d37 	.word	0x08001d37
 80017f4:	08001d37 	.word	0x08001d37
 80017f8:	08001d37 	.word	0x08001d37
 80017fc:	08001d37 	.word	0x08001d37
 8001800:	08001d37 	.word	0x08001d37
 8001804:	08001d37 	.word	0x08001d37
 8001808:	08001d37 	.word	0x08001d37
 800180c:	08001d37 	.word	0x08001d37
 8001810:	08001d37 	.word	0x08001d37
 8001814:	08001d37 	.word	0x08001d37
 8001818:	08001d37 	.word	0x08001d37
 800181c:	08001d37 	.word	0x08001d37
 8001820:	08001d37 	.word	0x08001d37
 8001824:	08001d37 	.word	0x08001d37
 8001828:	08001d37 	.word	0x08001d37
 800182c:	08001d37 	.word	0x08001d37
 8001830:	08001d37 	.word	0x08001d37
 8001834:	08001d37 	.word	0x08001d37
 8001838:	08001d37 	.word	0x08001d37
 800183c:	08001d37 	.word	0x08001d37
 8001840:	08001d37 	.word	0x08001d37
 8001844:	08001d37 	.word	0x08001d37
 8001848:	08001d37 	.word	0x08001d37
 800184c:	08001d37 	.word	0x08001d37
 8001850:	08001d37 	.word	0x08001d37
 8001854:	08001d37 	.word	0x08001d37
 8001858:	08001d37 	.word	0x08001d37
 800185c:	08001d37 	.word	0x08001d37
 8001860:	08001d37 	.word	0x08001d37
 8001864:	08001d37 	.word	0x08001d37
 8001868:	08001d37 	.word	0x08001d37
 800186c:	08001d37 	.word	0x08001d37
 8001870:	08001d37 	.word	0x08001d37
 8001874:	08001d37 	.word	0x08001d37
 8001878:	08001d37 	.word	0x08001d37
 800187c:	08001d37 	.word	0x08001d37
 8001880:	08001d37 	.word	0x08001d37
 8001884:	08001d37 	.word	0x08001d37
 8001888:	08001d37 	.word	0x08001d37
 800188c:	08001d37 	.word	0x08001d37
 8001890:	08001d37 	.word	0x08001d37
 8001894:	08001cf1 	.word	0x08001cf1
	{
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
		break;
 800189e:	e24a      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x05:
		value = rx_frame[3] - 40;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3303      	adds	r3, #3
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3b28      	subs	r3, #40	; 0x28
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80018b4:	e23f      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 80018b6:	4bb2      	ldr	r3, [pc, #712]	; (8001b80 <OBD2_PID_Parse+0x598>)
 80018b8:	60fb      	str	r3, [r7, #12]
		break;
 80018ba:	e23c      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x0A:
		value = 3 * rx_frame[3];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3303      	adds	r3, #3
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	ee07 3a90 	vmov	s15, r3
 80018ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80018d6:	e22e      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x0B:
		value = rx_frame[3];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3303      	adds	r3, #3
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80018ea:	e224      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3303      	adds	r3, #3
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	3204      	adds	r2, #4
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da00      	bge.n	8001902 <OBD2_PID_Parse+0x31a>
 8001900:	3303      	adds	r3, #3
 8001902:	109b      	asrs	r3, r3, #2
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001910:	e211      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x0D:
		value = rx_frame[3];
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3303      	adds	r3, #3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001920:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001924:	e207      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3303      	adds	r3, #3
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3b40      	subs	r3, #64	; 0x40
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800193e:	e1fa      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3303      	adds	r3, #3
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3b28      	subs	r3, #40	; 0x28
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001950:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001954:	e1ef      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3303      	adds	r3, #3
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	3204      	adds	r2, #4
 8001962:	7812      	ldrb	r2, [r2, #0]
 8001964:	4313      	orrs	r3, r2
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <OBD2_PID_Parse+0x59c>)
 8001968:	fb82 1203 	smull	r1, r2, r2, r3
 800196c:	1152      	asrs	r2, r2, #5
 800196e:	17db      	asrs	r3, r3, #31
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800197e:	e1da      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
		break;
 8001986:	e1d6      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3303      	adds	r3, #3
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4a7d      	ldr	r2, [pc, #500]	; (8001b84 <OBD2_PID_Parse+0x59c>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	099b      	lsrs	r3, r3, #6
 8001996:	b2db      	uxtb	r3, r3
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019a4:	e1c7      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3303      	adds	r3, #3
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	3204      	adds	r2, #4
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019be:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019c2:	e1b8      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3303      	adds	r3, #3
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	3204      	adds	r2, #4
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fda5 	bl	8000524 <__aeabi_i2d>
 80019da:	a367      	add	r3, pc, #412	; (adr r3, 8001b78 <OBD2_PID_Parse+0x590>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fe0a 	bl	80005f8 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f8dc 	bl	8000ba8 <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3303      	adds	r3, #3
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	3204      	adds	r2, #4
 8001a00:	7812      	ldrb	r2, [r2, #0]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a14:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a18:	e18d      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
		break;
 8001a20:	e189      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
		break;
 8001a28:	e185      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001a2a:	4b55      	ldr	r3, [pc, #340]	; (8001b80 <OBD2_PID_Parse+0x598>)
 8001a2c:	60fb      	str	r3, [r7, #12]
		break;
 8001a2e:	e182      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
		break;
 8001a36:	e17e      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x30:
		value = rx_frame[3];
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3303      	adds	r3, #3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a46:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a4a:	e174      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3303      	adds	r3, #3
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	3204      	adds	r2, #4
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a64:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a68:	e165      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	3204      	adds	r2, #4
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da00      	bge.n	8001a80 <OBD2_PID_Parse+0x498>
 8001a7e:	3303      	adds	r3, #3
 8001a80:	109b      	asrs	r3, r3, #2
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a8e:	e152      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x33:
		value = rx_frame[3];
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3303      	adds	r3, #3
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aa2:	e148      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
		break;
 8001aaa:	e144      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	3204      	adds	r2, #4
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	4a31      	ldr	r2, [pc, #196]	; (8001b84 <OBD2_PID_Parse+0x59c>)
 8001abe:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac2:	1152      	asrs	r2, r2, #5
 8001ac4:	17db      	asrs	r3, r3, #31
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	3b28      	subs	r3, #40	; 0x28
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ad6:	e12e      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3303      	adds	r3, #3
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	3204      	adds	r2, #4
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <OBD2_PID_Parse+0x5a0>)
 8001aea:	fb82 1203 	smull	r1, r2, r2, r3
 8001aee:	1192      	asrs	r2, r2, #6
 8001af0:	17db      	asrs	r3, r3, #31
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b00:	e119      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
		break;
 8001b08:	e115      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
		break;
 8001b10:	e111      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
		break;
 8001b18:	e10d      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x46:
		value = rx_frame[3] - 40;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	3b28      	subs	r3, #40	; 0x28
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b2e:	e102      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
		break;
 8001b36:	e0fe      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	3204      	adds	r2, #4
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b50:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b54:	e0ef      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x4F:
		value = rx_frame[3];
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3303      	adds	r3, #3
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b64:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b68:	e0e5      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
		break;
 8001b70:	e0e1      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	10624dd3 	.word	0x10624dd3
 8001b7c:	3fb43958 	.word	0x3fb43958
 8001b80:	c2c80000 	.word	0xc2c80000
 8001b84:	51eb851f 	.word	0x51eb851f
 8001b88:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3303      	adds	r3, #3
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	3204      	adds	r2, #4
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fcc1 	bl	8000524 <__aeabi_i2d>
 8001ba2:	a370      	add	r3, pc, #448	; (adr r3, 8001d64 <OBD2_PID_Parse+0x77c>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fd26 	bl	80005f8 <__aeabi_dmul>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7fe fff8 	bl	8000ba8 <__aeabi_d2f>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	60fb      	str	r3, [r7, #12]
		break;
 8001bbc:	e0bb      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3303      	adds	r3, #3
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	3204      	adds	r2, #4
 8001bca:	7812      	ldrb	r2, [r2, #0]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001bd2:	3b7f      	subs	r3, #127	; 0x7f
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001be0:	e0a9      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001be2:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <OBD2_PID_Parse+0x770>)
 8001be4:	60fb      	str	r3, [r7, #12]
		break;
 8001be6:	e0a6      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3303      	adds	r3, #3
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	3204      	adds	r2, #4
 8001bf4:	7812      	ldrb	r2, [r2, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c00:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c04:	e097      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
		break;
 8001c0c:	e093      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3303      	adds	r3, #3
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	3b28      	subs	r3, #40	; 0x28
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c22:	e088      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001c24:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <OBD2_PID_Parse+0x774>)
 8001c26:	60fb      	str	r3, [r7, #12]
		break;
 8001c28:	e085      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	3204      	adds	r2, #4
 8001c36:	7812      	ldrb	r2, [r2, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc72 	bl	8000524 <__aeabi_i2d>
 8001c40:	a341      	add	r3, pc, #260	; (adr r3, 8001d48 <OBD2_PID_Parse+0x760>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fcd7 	bl	80005f8 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe ffa9 	bl	8000ba8 <__aeabi_d2f>
 8001c56:	4603      	mov	r3, r0
 8001c58:	60fb      	str	r3, [r7, #12]
		break;
 8001c5a:	e06c      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3303      	adds	r3, #3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	3b7d      	subs	r3, #125	; 0x7d
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c70:	e061      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3303      	adds	r3, #3
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	3204      	adds	r2, #4
 8001c7e:	7812      	ldrb	r2, [r2, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c8e:	e052      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3303      	adds	r3, #3
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	3b7d      	subs	r3, #125	; 0x7d
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ca4:	e047      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
		break;
 8001cac:	e043      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3303      	adds	r3, #3
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3b28      	subs	r3, #40	; 0x28
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbe:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cc2:	e038      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	3204      	adds	r2, #4
 8001cd0:	7812      	ldrb	r2, [r2, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <OBD2_PID_Parse+0x778>)
 8001cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cda:	1152      	asrs	r2, r2, #5
 8001cdc:	17db      	asrs	r3, r3, #31
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	3b28      	subs	r3, #40	; 0x28
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cea:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cee:	e022      	b.n	8001d36 <OBD2_PID_Parse+0x74e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3303      	adds	r3, #3
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	061a      	lsls	r2, r3, #24
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3305      	adds	r3, #5
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	3206      	adds	r2, #6
 8001d10:	7812      	ldrb	r2, [r2, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fc05 	bl	8000524 <__aeabi_i2d>
 8001d1a:	a30d      	add	r3, pc, #52	; (adr r3, 8001d50 <OBD2_PID_Parse+0x768>)
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f7fe fc6a 	bl	80005f8 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe ff3c 	bl	8000ba8 <__aeabi_d2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]
		break;
 8001d34:	bf00      	nop
	}
	return value;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	ee07 3a90 	vmov	s15, r3
}
 8001d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	9999999a 	.word	0x9999999a
 8001d4c:	3fa99999 	.word	0x3fa99999
 8001d50:	9999999a 	.word	0x9999999a
 8001d54:	3fb99999 	.word	0x3fb99999
 8001d58:	c2c80000 	.word	0xc2c80000
 8001d5c:	c3520000 	.word	0xc3520000
 8001d60:	51eb851f 	.word	0x51eb851f
 8001d64:	47ae147b 	.word	0x47ae147b
 8001d68:	3f747ae1 	.word	0x3f747ae1

08001d6c <OBD2_Init>:

obd_protocol OBD2_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	used_protocol = KLine_Init();
 8001d70:	f7ff f99a 	bl	80010a8 <KLine_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <OBD2_Init+0x44>)
 8001d7a:	701a      	strb	r2, [r3, #0]
	if(used_protocol == OBD_NONE)
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <OBD2_Init+0x44>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d110      	bne.n	8001da6 <OBD2_Init+0x3a>
	{
		used_protocol = KWP2000_Fast_Init();
 8001d84:	f7ff fa28 	bl	80011d8 <KWP2000_Fast_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <OBD2_Init+0x44>)
 8001d8e:	701a      	strb	r2, [r3, #0]
		if(used_protocol == OBD_NONE)
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <OBD2_Init+0x44>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d106      	bne.n	8001da6 <OBD2_Init+0x3a>
		{
			used_protocol = OBD_PROTO_CAN;
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <OBD2_Init+0x44>)
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	701a      	strb	r2, [r3, #0]
			MX_CAN1_Init();
 8001d9e:	f7ff f8d5 	bl	8000f4c <MX_CAN1_Init>
			canConfig();
 8001da2:	f7ff f909 	bl	8000fb8 <canConfig>
		}
	}
	return used_protocol;
 8001da6:	4b02      	ldr	r3, [pc, #8]	; (8001db0 <OBD2_Init+0x44>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200002d4 	.word	0x200002d4

08001db4 <OBD2_ShowOnDisplay>:

void OBD2_ShowOnDisplay(float value)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	snprintf(str, 10, "%f", value);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fbc2 	bl	8000548 <__aeabi_f2d>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	f107 000c 	add.w	r0, r7, #12
 8001dcc:	e9cd 2300 	strd	r2, r3, [sp]
 8001dd0:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <OBD2_ShowOnDisplay+0x60>)
 8001dd2:	210a      	movs	r1, #10
 8001dd4:	f006 f830 	bl	8007e38 <sniprintf>
	ssd1306_SetCursor(0,0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 fd92 	bl	8002904 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 fc41 	bl	8002668 <ssd1306_Fill>
	ssd1306_WriteString("Teplota", Font_7x10, White);
 8001de6:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <OBD2_ShowOnDisplay+0x64>)
 8001de8:	2301      	movs	r3, #1
 8001dea:	ca06      	ldmia	r2, {r1, r2}
 8001dec:	480b      	ldr	r0, [pc, #44]	; (8001e1c <OBD2_ShowOnDisplay+0x68>)
 8001dee:	f000 fd63 	bl	80028b8 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 20);
 8001df2:	2114      	movs	r1, #20
 8001df4:	2028      	movs	r0, #40	; 0x28
 8001df6:	f000 fd85 	bl	8002904 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, White);
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <OBD2_ShowOnDisplay+0x6c>)
 8001dfc:	f107 000c 	add.w	r0, r7, #12
 8001e00:	2301      	movs	r3, #1
 8001e02:	ca06      	ldmia	r2, {r1, r2}
 8001e04:	f000 fd58 	bl	80028b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e08:	f000 fc52 	bl	80026b0 <ssd1306_UpdateScreen>
}
 8001e0c:	bf00      	nop
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	0800a358 	.word	0x0800a358
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	0800a35c 	.word	0x0800a35c
 8001e20:	2000000c 	.word	0x2000000c

08001e24 <PID_Get_Lenght>:
		[0x7C] = { 2 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 4 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
	return PID_LUT[pid][0];
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	4a03      	ldr	r2, [pc, #12]	; (8001e40 <PID_Get_Lenght+0x1c>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	0800a36c 	.word	0x0800a36c

08001e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e48:	f000 fda6 	bl	8002998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4c:	f000 f836 	bl	8001ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e50:	f000 f902 	bl	8002058 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e54:	f000 f8e2 	bl	800201c <MX_DMA_Init>
  MX_I2C2_Init();
 8001e58:	f000 f882 	bl	8001f60 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8001e5c:	f000 fb9a 	bl	8002594 <ssd1306_Init>
  ssd1306_Fill(Black);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f000 fc01 	bl	8002668 <ssd1306_Fill>
  ssd1306_WriteString("Teplota", Font_7x10, White);
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <main+0x6c>)
 8001e68:	2301      	movs	r3, #1
 8001e6a:	ca06      	ldmia	r2, {r1, r2}
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <main+0x70>)
 8001e6e:	f000 fd23 	bl	80028b8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001e72:	f000 fc1d 	bl	80026b0 <ssd1306_UpdateScreen>



  obd_comm.used_protocol = OBD2_Init();
 8001e76:	f7ff ff79 	bl	8001d6c <OBD2_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <main+0x74>)
 8001e80:	701a      	strb	r2, [r3, #0]

  obd_comm.pid = 0x05;
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <main+0x74>)
 8001e84:	2205      	movs	r2, #5
 8001e86:	705a      	strb	r2, [r3, #1]

  MX_IWDG_Init();
 8001e88:	f000 f8aa 	bl	8001fe0 <MX_IWDG_Init>

  OBD2_Request(obd_comm);
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <main+0x74>)
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f7ff fb74 	bl	800157c <OBD2_Request>

  OBD2_Request(obd_comm);
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <main+0x74>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	f7ff fb70 	bl	800157c <OBD2_Request>

  OBD2_Request(obd_comm);
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <main+0x74>)
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	f7ff fb6c 	bl	800157c <OBD2_Request>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  OBD2_Request(obd_comm);
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <main+0x74>)
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	f7ff fb68 	bl	800157c <OBD2_Request>
 8001eac:	e7fa      	b.n	8001ea4 <main+0x60>
 8001eae:	bf00      	nop
 8001eb0:	20000004 	.word	0x20000004
 8001eb4:	0800a364 	.word	0x0800a364
 8001eb8:	20000390 	.word	0x20000390

08001ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b096      	sub	sp, #88	; 0x58
 8001ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	2244      	movs	r2, #68	; 0x44
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f005 fb42 	bl	8007554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ede:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ee2:	f002 fd97 	bl	8004a14 <HAL_PWREx_ControlVoltageScaling>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001eec:	f000 f93e 	bl	800216c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ef0:	2309      	movs	r3, #9
 8001ef2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001efa:	2301      	movs	r3, #1
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001efe:	2302      	movs	r3, #2
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f02:	2303      	movs	r3, #3
 8001f04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f0e:	2307      	movs	r3, #7
 8001f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f12:	2302      	movs	r3, #2
 8001f14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f16:	2302      	movs	r3, #2
 8001f18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fdce 	bl	8004ac0 <HAL_RCC_OscConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001f2a:	f000 f91f 	bl	800216c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2e:	230f      	movs	r3, #15
 8001f30:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f32:	2303      	movs	r3, #3
 8001f34:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f42:	463b      	mov	r3, r7
 8001f44:	2104      	movs	r1, #4
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 f9ce 	bl	80052e8 <HAL_RCC_ClockConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f52:	f000 f90b 	bl	800216c <Error_Handler>
  }
}
 8001f56:	bf00      	nop
 8001f58:	3758      	adds	r7, #88	; 0x58
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f66:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <MX_I2C2_Init+0x78>)
 8001f68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <MX_I2C2_Init+0x7c>)
 8001f6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f9a:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001f9c:	f002 f840 	bl	8004020 <HAL_I2C_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001fa6:	f000 f8e1 	bl	800216c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001faa:	2100      	movs	r1, #0
 8001fac:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001fae:	f002 fc2d 	bl	800480c <HAL_I2CEx_ConfigAnalogFilter>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001fb8:	f000 f8d8 	bl	800216c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_I2C2_Init+0x74>)
 8001fc0:	f002 fc6f 	bl	80048a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001fca:	f000 f8cf 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200002d8 	.word	0x200002d8
 8001fd8:	40005800 	.word	0x40005800
 8001fdc:	10909cec 	.word	0x10909cec

08001fe0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_IWDG_Init+0x34>)
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <MX_IWDG_Init+0x38>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <MX_IWDG_Init+0x34>)
 8001fec:	2204      	movs	r2, #4
 8001fee:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_IWDG_Init+0x34>)
 8001ff2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ff6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_IWDG_Init+0x34>)
 8001ffa:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001ffe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <MX_IWDG_Init+0x34>)
 8002002:	f002 fc9a 	bl	800493a <HAL_IWDG_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800200c:	f000 f8ae 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000032c 	.word	0x2000032c
 8002018:	40003000 	.word	0x40003000

0800201c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_DMA_Init+0x38>)
 8002024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <MX_DMA_Init+0x38>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6493      	str	r3, [r2, #72]	; 0x48
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_DMA_Init+0x38>)
 8002030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	200f      	movs	r0, #15
 8002040:	f001 fc67 	bl	8003912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002044:	200f      	movs	r0, #15
 8002046:	f001 fc80 	bl	800394a <HAL_NVIC_EnableIRQ>

}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000

08002058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206e:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <MX_GPIO_Init+0x108>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <MX_GPIO_Init+0x108>)
 8002074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <MX_GPIO_Init+0x108>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <MX_GPIO_Init+0x108>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	4a35      	ldr	r2, [pc, #212]	; (8002160 <MX_GPIO_Init+0x108>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002092:	4b33      	ldr	r3, [pc, #204]	; (8002160 <MX_GPIO_Init+0x108>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <MX_GPIO_Init+0x108>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	4a2f      	ldr	r2, [pc, #188]	; (8002160 <MX_GPIO_Init+0x108>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <MX_GPIO_Init+0x108>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <MX_GPIO_Init+0x108>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <MX_GPIO_Init+0x108>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <MX_GPIO_Init+0x108>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d4:	4823      	ldr	r0, [pc, #140]	; (8002164 <MX_GPIO_Init+0x10c>)
 80020d6:	f001 ff8b 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e4:	f001 ff84 	bl	8003ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BAT_V_Pin */
  GPIO_InitStruct.Pin = BAT_V_Pin;
 80020e8:	2320      	movs	r3, #32
 80020ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80020ec:	230b      	movs	r3, #11
 80020ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	481a      	ldr	r0, [pc, #104]	; (8002164 <MX_GPIO_Init+0x10c>)
 80020fc:	f001 fdfe 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_S_Pin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8002100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800210a:	2302      	movs	r3, #2
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	4812      	ldr	r0, [pc, #72]	; (8002164 <MX_GPIO_Init+0x10c>)
 800211a:	f001 fdef 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LLine_Pin */
  GPIO_InitStruct.Pin = LLine_Pin;
 800211e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LLine_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213a:	f001 fddf 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BTN_Pin */
  GPIO_InitStruct.Pin = LCD_BTN_Pin;
 800213e:	2320      	movs	r3, #32
 8002140:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_BTN_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_GPIO_Init+0x110>)
 8002152:	f001 fdd3 	bl	8003cfc <HAL_GPIO_Init>

}
 8002156:	bf00      	nop
 8002158:	3728      	adds	r7, #40	; 0x28
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	48000800 	.word	0x48000800
 8002168:	48000400 	.word	0x48000400

0800216c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
}
 8002172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002174:	e7fe      	b.n	8002174 <Error_Handler+0x8>
	...

08002178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_MspInit+0x44>)
 8002180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_MspInit+0x44>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6613      	str	r3, [r2, #96]	; 0x60
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_MspInit+0x44>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_MspInit+0x44>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	4a08      	ldr	r2, [pc, #32]	; (80021bc <HAL_MspInit+0x44>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6593      	str	r3, [r2, #88]	; 0x58
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_MspInit+0x44>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0a0      	sub	sp, #128	; 0x80
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	225c      	movs	r2, #92	; 0x5c
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f005 f9b7 	bl	8007554 <memset>
  if(hi2c->Instance==I2C2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <HAL_I2C_MspInit+0xa8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d136      	bne.n	800225e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fa95 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002208:	f7ff ffb0 	bl	800216c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_I2C_MspInit+0xac>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	4a16      	ldr	r2, [pc, #88]	; (800226c <HAL_I2C_MspInit+0xac>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_I2C_MspInit+0xac>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002224:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002228:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002236:	2304      	movs	r3, #4
 8002238:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800223e:	4619      	mov	r1, r3
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <HAL_I2C_MspInit+0xb0>)
 8002242:	f001 fd5b 	bl	8003cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_I2C_MspInit+0xac>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_I2C_MspInit+0xac>)
 800224c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002250:	6593      	str	r3, [r2, #88]	; 0x58
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_I2C_MspInit+0xac>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3780      	adds	r7, #128	; 0x80
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40005800 	.word	0x40005800
 800226c:	40021000 	.word	0x40021000
 8002270:	48000400 	.word	0x48000400

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <NMI_Handler+0x4>

0800227a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <HardFault_Handler+0x4>

08002280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <MemManage_Handler+0x4>

08002286 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <UsageFault_Handler+0x4>

08002292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c0:	f000 fbbe 	bl	8002a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA1_Channel5_IRQHandler+0x10>)
 80022ce:	f001 fc35 	bl	8003b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000033c 	.word	0x2000033c

080022dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <CAN1_RX0_IRQHandler+0x10>)
 80022e2:	f001 f80c 	bl	80032fe <HAL_CAN_IRQHandler>
  /* USER CODE END CAN1_RX0_IRQn 0 */

  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000208 	.word	0x20000208

080022f0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <CAN1_RX1_IRQHandler+0x10>)
 80022f6:	f001 f802 	bl	80032fe <HAL_CAN_IRQHandler>
  /* USER CODE END CAN1_RX1_IRQn 0 */

  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000208 	.word	0x20000208

08002304 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <USART1_IRQHandler+0x10>)
 800230a:	f003 ff6f 	bl	80061ec <HAL_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000250 	.word	0x20000250

08002318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
	return 1;
 800231c:	2301      	movs	r3, #1
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_kill>:

int _kill(int pid, int sig)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002332:	f005 f8d7 	bl	80074e4 <__errno>
 8002336:	4603      	mov	r3, r0
 8002338:	2216      	movs	r2, #22
 800233a:	601a      	str	r2, [r3, #0]
	return -1;
 800233c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_exit>:

void _exit (int status)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffe7 	bl	8002328 <_kill>
	while (1) {}		/* Make sure we hang here */
 800235a:	e7fe      	b.n	800235a <_exit+0x12>

0800235c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e00a      	b.n	8002384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800236e:	f3af 8000 	nop.w
 8002372:	4601      	mov	r1, r0
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	60ba      	str	r2, [r7, #8]
 800237a:	b2ca      	uxtb	r2, r1
 800237c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	dbf0      	blt.n	800236e <_read+0x12>
	}

return len;
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	e009      	b.n	80023bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	60ba      	str	r2, [r7, #8]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3301      	adds	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	dbf1      	blt.n	80023a8 <_write+0x12>
	}
	return len;
 80023c4:	687b      	ldr	r3, [r7, #4]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <_close>:

int _close(int file)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
	return -1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f6:	605a      	str	r2, [r3, #4]
	return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_isatty>:

int _isatty(int file)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
	return 1;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
	return 0;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <_sbrk+0x5c>)
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <_sbrk+0x60>)
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <_sbrk+0x64>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <_sbrk+0x68>)
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	429a      	cmp	r2, r3
 8002466:	d207      	bcs.n	8002478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002468:	f005 f83c 	bl	80074e4 <__errno>
 800246c:	4603      	mov	r3, r0
 800246e:	220c      	movs	r2, #12
 8002470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	e009      	b.n	800248c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <_sbrk+0x64>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <_sbrk+0x64>)
 8002488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20010000 	.word	0x20010000
 8002498:	00000400 	.word	0x00000400
 800249c:	20000394 	.word	0x20000394
 80024a0:	200007b8 	.word	0x200007b8

080024a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <SystemInit+0x28>)
 80024aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ae:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <SystemInit+0x28>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	4a05      	ldr	r2, [pc, #20]	; (80024cc <SystemInit+0x28>)
 80024b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002508 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024d4:	f7ff ffe6 	bl	80024a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <LoopForever+0x6>)
  ldr r1, =_edata
 80024da:	490d      	ldr	r1, [pc, #52]	; (8002510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <LoopForever+0xe>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e0:	e002      	b.n	80024e8 <LoopCopyDataInit>

080024e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e6:	3304      	adds	r3, #4

080024e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ec:	d3f9      	bcc.n	80024e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f0:	4c0a      	ldr	r4, [pc, #40]	; (800251c <LoopForever+0x16>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f4:	e001      	b.n	80024fa <LoopFillZerobss>

080024f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f8:	3204      	adds	r2, #4

080024fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024fc:	d3fb      	bcc.n	80024f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024fe:	f004 fff7 	bl	80074f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002502:	f7ff fc9f 	bl	8001e44 <main>

08002506 <LoopForever>:

LoopForever:
    b LoopForever
 8002506:	e7fe      	b.n	8002506 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002508:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800250c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002510:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002514:	0800c354 	.word	0x0800c354
  ldr r2, =_sbss
 8002518:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800251c:	200007b4 	.word	0x200007b4

08002520 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC1_IRQHandler>

08002522 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af04      	add	r7, sp, #16
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	9302      	str	r3, [sp, #8]
 8002540:	2301      	movs	r3, #1
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	1dfb      	adds	r3, r7, #7
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2301      	movs	r3, #1
 800254a:	2200      	movs	r2, #0
 800254c:	2178      	movs	r1, #120	; 0x78
 800254e:	4803      	ldr	r0, [pc, #12]	; (800255c <ssd1306_WriteCommand+0x2c>)
 8002550:	f001 fdf6 	bl	8004140 <HAL_I2C_Mem_Write>
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200002d8 	.word	0x200002d8

08002560 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af04      	add	r7, sp, #16
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f04f 32ff 	mov.w	r2, #4294967295
 8002572:	9202      	str	r2, [sp, #8]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2301      	movs	r3, #1
 800257c:	2240      	movs	r2, #64	; 0x40
 800257e:	2178      	movs	r1, #120	; 0x78
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <ssd1306_WriteData+0x30>)
 8002582:	f001 fddd 	bl	8004140 <HAL_I2C_Mem_Write>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200002d8 	.word	0x200002d8

08002594 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002598:	f7ff ffc3 	bl	8002522 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800259c:	2064      	movs	r0, #100	; 0x64
 800259e:	f000 fa6f 	bl	8002a80 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80025a2:	2000      	movs	r0, #0
 80025a4:	f000 f9da 	bl	800295c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80025a8:	2020      	movs	r0, #32
 80025aa:	f7ff ffc1 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7ff ffbe 	bl	8002530 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80025b4:	20b0      	movs	r0, #176	; 0xb0
 80025b6:	f7ff ffbb 	bl	8002530 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80025ba:	20c8      	movs	r0, #200	; 0xc8
 80025bc:	f7ff ffb8 	bl	8002530 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80025c0:	2000      	movs	r0, #0
 80025c2:	f7ff ffb5 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80025c6:	2010      	movs	r0, #16
 80025c8:	f7ff ffb2 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80025cc:	2040      	movs	r0, #64	; 0x40
 80025ce:	f7ff ffaf 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80025d2:	20ff      	movs	r0, #255	; 0xff
 80025d4:	f000 f9ae 	bl	8002934 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80025d8:	20a1      	movs	r0, #161	; 0xa1
 80025da:	f7ff ffa9 	bl	8002530 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80025de:	20a6      	movs	r0, #166	; 0xa6
 80025e0:	f7ff ffa6 	bl	8002530 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80025e4:	20a8      	movs	r0, #168	; 0xa8
 80025e6:	f7ff ffa3 	bl	8002530 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80025ea:	203f      	movs	r0, #63	; 0x3f
 80025ec:	f7ff ffa0 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80025f0:	20a4      	movs	r0, #164	; 0xa4
 80025f2:	f7ff ff9d 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80025f6:	20d3      	movs	r0, #211	; 0xd3
 80025f8:	f7ff ff9a 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff ff97 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002602:	20d5      	movs	r0, #213	; 0xd5
 8002604:	f7ff ff94 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002608:	20f0      	movs	r0, #240	; 0xf0
 800260a:	f7ff ff91 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800260e:	20d9      	movs	r0, #217	; 0xd9
 8002610:	f7ff ff8e 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002614:	2022      	movs	r0, #34	; 0x22
 8002616:	f7ff ff8b 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800261a:	20da      	movs	r0, #218	; 0xda
 800261c:	f7ff ff88 	bl	8002530 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002620:	2012      	movs	r0, #18
 8002622:	f7ff ff85 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002626:	20db      	movs	r0, #219	; 0xdb
 8002628:	f7ff ff82 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800262c:	2020      	movs	r0, #32
 800262e:	f7ff ff7f 	bl	8002530 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002632:	208d      	movs	r0, #141	; 0x8d
 8002634:	f7ff ff7c 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002638:	2014      	movs	r0, #20
 800263a:	f7ff ff79 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800263e:	2001      	movs	r0, #1
 8002640:	f000 f98c 	bl	800295c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002644:	2000      	movs	r0, #0
 8002646:	f000 f80f 	bl	8002668 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800264a:	f000 f831 	bl	80026b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <ssd1306_Init+0xd0>)
 8002650:	2200      	movs	r2, #0
 8002652:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <ssd1306_Init+0xd0>)
 8002656:	2200      	movs	r2, #0
 8002658:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800265a:	4b02      	ldr	r3, [pc, #8]	; (8002664 <ssd1306_Init+0xd0>)
 800265c:	2201      	movs	r2, #1
 800265e:	711a      	strb	r2, [r3, #4]
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000798 	.word	0x20000798

08002668 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e00d      	b.n	8002694 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <ssd1306_Fill+0x1a>
 800267e:	2100      	movs	r1, #0
 8002680:	e000      	b.n	8002684 <ssd1306_Fill+0x1c>
 8002682:	21ff      	movs	r1, #255	; 0xff
 8002684:	4a09      	ldr	r2, [pc, #36]	; (80026ac <ssd1306_Fill+0x44>)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4413      	add	r3, r2
 800268a:	460a      	mov	r2, r1
 800268c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3301      	adds	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269a:	d3ed      	bcc.n	8002678 <ssd1306_Fill+0x10>
    }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000398 	.word	0x20000398

080026b0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026b6:	2300      	movs	r3, #0
 80026b8:	71fb      	strb	r3, [r7, #7]
 80026ba:	e016      	b.n	80026ea <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	3b50      	subs	r3, #80	; 0x50
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff34 	bl	8002530 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff ff31 	bl	8002530 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80026ce:	2010      	movs	r0, #16
 80026d0:	f7ff ff2e 	bl	8002530 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	01db      	lsls	r3, r3, #7
 80026d8:	4a08      	ldr	r2, [pc, #32]	; (80026fc <ssd1306_UpdateScreen+0x4c>)
 80026da:	4413      	add	r3, r2
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff3e 	bl	8002560 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	3301      	adds	r3, #1
 80026e8:	71fb      	strb	r3, [r7, #7]
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b07      	cmp	r3, #7
 80026ee:	d9e5      	bls.n	80026bc <ssd1306_UpdateScreen+0xc>
    }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000398 	.word	0x20000398

08002700 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
 800270a:	460b      	mov	r3, r1
 800270c:	71bb      	strb	r3, [r7, #6]
 800270e:	4613      	mov	r3, r2
 8002710:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	db3d      	blt.n	8002796 <ssd1306_DrawPixel+0x96>
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	2b3f      	cmp	r3, #63	; 0x3f
 800271e:	d83a      	bhi.n	8002796 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002720:	797b      	ldrb	r3, [r7, #5]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d11a      	bne.n	800275c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002726:	79fa      	ldrb	r2, [r7, #7]
 8002728:	79bb      	ldrb	r3, [r7, #6]
 800272a:	08db      	lsrs	r3, r3, #3
 800272c:	b2d8      	uxtb	r0, r3
 800272e:	4603      	mov	r3, r0
 8002730:	01db      	lsls	r3, r3, #7
 8002732:	4413      	add	r3, r2
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <ssd1306_DrawPixel+0xa4>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	b25a      	sxtb	r2, r3
 800273a:	79bb      	ldrb	r3, [r7, #6]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	b25b      	sxtb	r3, r3
 8002748:	4313      	orrs	r3, r2
 800274a:	b259      	sxtb	r1, r3
 800274c:	79fa      	ldrb	r2, [r7, #7]
 800274e:	4603      	mov	r3, r0
 8002750:	01db      	lsls	r3, r3, #7
 8002752:	4413      	add	r3, r2
 8002754:	b2c9      	uxtb	r1, r1
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <ssd1306_DrawPixel+0xa4>)
 8002758:	54d1      	strb	r1, [r2, r3]
 800275a:	e01d      	b.n	8002798 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800275c:	79fa      	ldrb	r2, [r7, #7]
 800275e:	79bb      	ldrb	r3, [r7, #6]
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	b2d8      	uxtb	r0, r3
 8002764:	4603      	mov	r3, r0
 8002766:	01db      	lsls	r3, r3, #7
 8002768:	4413      	add	r3, r2
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <ssd1306_DrawPixel+0xa4>)
 800276c:	5cd3      	ldrb	r3, [r2, r3]
 800276e:	b25a      	sxtb	r2, r3
 8002770:	79bb      	ldrb	r3, [r7, #6]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	b25b      	sxtb	r3, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	b25b      	sxtb	r3, r3
 8002782:	4013      	ands	r3, r2
 8002784:	b259      	sxtb	r1, r3
 8002786:	79fa      	ldrb	r2, [r7, #7]
 8002788:	4603      	mov	r3, r0
 800278a:	01db      	lsls	r3, r3, #7
 800278c:	4413      	add	r3, r2
 800278e:	b2c9      	uxtb	r1, r1
 8002790:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <ssd1306_DrawPixel+0xa4>)
 8002792:	54d1      	strb	r1, [r2, r3]
 8002794:	e000      	b.n	8002798 <ssd1306_DrawPixel+0x98>
        return;
 8002796:	bf00      	nop
    }
}
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000398 	.word	0x20000398

080027a8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4604      	mov	r4, r0
 80027b0:	1d38      	adds	r0, r7, #4
 80027b2:	e880 0006 	stmia.w	r0, {r1, r2}
 80027b6:	461a      	mov	r2, r3
 80027b8:	4623      	mov	r3, r4
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	4613      	mov	r3, r2
 80027be:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b1f      	cmp	r3, #31
 80027c4:	d902      	bls.n	80027cc <ssd1306_WriteChar+0x24>
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b7e      	cmp	r3, #126	; 0x7e
 80027ca:	d901      	bls.n	80027d0 <ssd1306_WriteChar+0x28>
        return 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e06d      	b.n	80028ac <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80027d0:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <ssd1306_WriteChar+0x10c>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	793b      	ldrb	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	dc06      	bgt.n	80027ec <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80027de:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <ssd1306_WriteChar+0x10c>)
 80027e0:	885b      	ldrh	r3, [r3, #2]
 80027e2:	461a      	mov	r2, r3
 80027e4:	797b      	ldrb	r3, [r7, #5]
 80027e6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	dd01      	ble.n	80027f0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e05d      	b.n	80028ac <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	e04c      	b.n	8002890 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	3b20      	subs	r3, #32
 80027fc:	7979      	ldrb	r1, [r7, #5]
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4619      	mov	r1, r3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	440b      	add	r3, r1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	e034      	b.n	8002880 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002826:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <ssd1306_WriteChar+0x10c>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4413      	add	r3, r2
 8002832:	b2d8      	uxtb	r0, r3
 8002834:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <ssd1306_WriteChar+0x10c>)
 8002836:	885b      	ldrh	r3, [r3, #2]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4413      	add	r3, r2
 8002840:	b2db      	uxtb	r3, r3
 8002842:	7bba      	ldrb	r2, [r7, #14]
 8002844:	4619      	mov	r1, r3
 8002846:	f7ff ff5b 	bl	8002700 <ssd1306_DrawPixel>
 800284a:	e016      	b.n	800287a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <ssd1306_WriteChar+0x10c>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4413      	add	r3, r2
 8002858:	b2d8      	uxtb	r0, r3
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <ssd1306_WriteChar+0x10c>)
 800285c:	885b      	ldrh	r3, [r3, #2]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4413      	add	r3, r2
 8002866:	b2d9      	uxtb	r1, r3
 8002868:	7bbb      	ldrb	r3, [r7, #14]
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf0c      	ite	eq
 800286e:	2301      	moveq	r3, #1
 8002870:	2300      	movne	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	f7ff ff43 	bl	8002700 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	3301      	adds	r3, #1
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	793b      	ldrb	r3, [r7, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	4293      	cmp	r3, r2
 8002888:	d3c5      	bcc.n	8002816 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	797b      	ldrb	r3, [r7, #5]
 8002892:	461a      	mov	r2, r3
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4293      	cmp	r3, r2
 8002898:	d3ad      	bcc.n	80027f6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <ssd1306_WriteChar+0x10c>)
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	793b      	ldrb	r3, [r7, #4]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <ssd1306_WriteChar+0x10c>)
 80028a8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3724      	adds	r7, #36	; 0x24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	20000798 	.word	0x20000798

080028b8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	1d38      	adds	r0, r7, #4
 80028c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80028c6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80028c8:	e012      	b.n	80028f0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	7818      	ldrb	r0, [r3, #0]
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	1d3a      	adds	r2, r7, #4
 80028d2:	ca06      	ldmia	r2, {r1, r2}
 80028d4:	f7ff ff68 	bl	80027a8 <ssd1306_WriteChar>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d002      	beq.n	80028ea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	e008      	b.n	80028fc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3301      	adds	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e8      	bne.n	80028ca <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	781b      	ldrb	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	460a      	mov	r2, r1
 800290e:	71fb      	strb	r3, [r7, #7]
 8002910:	4613      	mov	r3, r2
 8002912:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	b29a      	uxth	r2, r3
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <ssd1306_SetCursor+0x2c>)
 800291a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <ssd1306_SetCursor+0x2c>)
 8002922:	805a      	strh	r2, [r3, #2]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	20000798 	.word	0x20000798

08002934 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800293e:	2381      	movs	r3, #129	; 0x81
 8002940:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fdf3 	bl	8002530 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fdef 	bl	8002530 <ssd1306_WriteCommand>
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800296c:	23af      	movs	r3, #175	; 0xaf
 800296e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <ssd1306_SetDisplayOn+0x38>)
 8002972:	2201      	movs	r2, #1
 8002974:	715a      	strb	r2, [r3, #5]
 8002976:	e004      	b.n	8002982 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002978:	23ae      	movs	r3, #174	; 0xae
 800297a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <ssd1306_SetDisplayOn+0x38>)
 800297e:	2200      	movs	r2, #0
 8002980:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fdd3 	bl	8002530 <ssd1306_WriteCommand>
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000798 	.word	0x20000798

08002998 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a2:	2003      	movs	r0, #3
 80029a4:	f000 ffaa 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a8:	2000      	movs	r0, #0
 80029aa:	f000 f80d 	bl	80029c8 <HAL_InitTick>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	71fb      	strb	r3, [r7, #7]
 80029b8:	e001      	b.n	80029be <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029ba:	f7ff fbdd 	bl	8002178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029be:	79fb      	ldrb	r3, [r7, #7]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_InitTick+0x6c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d023      	beq.n	8002a24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <HAL_InitTick+0x70>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_InitTick+0x6c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4619      	mov	r1, r3
 80029e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 ffb7 	bl	8003966 <HAL_SYSTICK_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d809      	bhi.n	8002a18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a04:	2200      	movs	r2, #0
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	f000 ff81 	bl	8003912 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <HAL_InitTick+0x74>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e007      	b.n	8002a28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e004      	b.n	8002a28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	e001      	b.n	8002a28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000018 	.word	0x20000018
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000014 	.word	0x20000014

08002a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_IncTick+0x20>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_IncTick+0x24>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <HAL_IncTick+0x24>)
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000018 	.word	0x20000018
 8002a64:	200007a0 	.word	0x200007a0

08002a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_GetTick+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	200007a0 	.word	0x200007a0

08002a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff ffee 	bl	8002a68 <HAL_GetTick>
 8002a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d005      	beq.n	8002aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_Delay+0x44>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa6:	bf00      	nop
 8002aa8:	f7ff ffde 	bl	8002a68 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d8f7      	bhi.n	8002aa8 <HAL_Delay+0x28>
  {
  }
}
 8002ab8:	bf00      	nop
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000018 	.word	0x20000018

08002ac8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0ed      	b.n	8002cb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8e9 	bl	8002cbe <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002afc:	f7ff ffb4 	bl	8002a68 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b02:	e012      	b.n	8002b2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b04:	f7ff ffb0 	bl	8002a68 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b0a      	cmp	r3, #10
 8002b10:	d90b      	bls.n	8002b2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2205      	movs	r2, #5
 8002b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0c5      	b.n	8002cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0e5      	beq.n	8002b04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0202 	bic.w	r2, r2, #2
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b48:	f7ff ff8e 	bl	8002a68 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b4e:	e012      	b.n	8002b76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b50:	f7ff ff8a 	bl	8002a68 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b0a      	cmp	r3, #10
 8002b5c:	d90b      	bls.n	8002b76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e09f      	b.n	8002cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e5      	bne.n	8002b50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7e1b      	ldrb	r3, [r3, #24]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d108      	bne.n	8002b9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e007      	b.n	8002bae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7e5b      	ldrb	r3, [r3, #25]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d108      	bne.n	8002bc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e007      	b.n	8002bd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7e9b      	ldrb	r3, [r3, #26]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d108      	bne.n	8002bf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e007      	b.n	8002c02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0220 	bic.w	r2, r2, #32
 8002c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7edb      	ldrb	r3, [r3, #27]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0210 	bic.w	r2, r2, #16
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e007      	b.n	8002c2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0210 	orr.w	r2, r2, #16
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7f1b      	ldrb	r3, [r3, #28]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d108      	bne.n	8002c46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0208 	orr.w	r2, r2, #8
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e007      	b.n	8002c56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0208 	bic.w	r2, r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7f5b      	ldrb	r3, [r3, #29]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d108      	bne.n	8002c70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0204 	orr.w	r2, r2, #4
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e007      	b.n	8002c80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0204 	bic.w	r2, r2, #4
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	ea42 0103 	orr.w	r1, r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_CAN_MspInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b087      	sub	sp, #28
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d003      	beq.n	8002cf8 <HAL_CAN_ConfigFilter+0x26>
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	f040 80aa 	bne.w	8002e4c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2201      	movs	r2, #1
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d123      	bne.n	8002d7a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3248      	adds	r2, #72	; 0x48
 8002d5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d70:	6979      	ldr	r1, [r7, #20]
 8002d72:	3348      	adds	r3, #72	; 0x48
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d122      	bne.n	8002dc8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002da2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3248      	adds	r2, #72	; 0x48
 8002da8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dbc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dbe:	6979      	ldr	r1, [r7, #20]
 8002dc0:	3348      	adds	r3, #72	; 0x48
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	401a      	ands	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002de2:	e007      	b.n	8002df4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e0e:	e007      	b.n	8002e20 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e3e:	f023 0201 	bic.w	r2, r3, #1
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e006      	b.n	8002e5a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d12e      	bne.n	8002ed8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e92:	f7ff fde9 	bl	8002a68 <HAL_GetTick>
 8002e96:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e98:	e012      	b.n	8002ec0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e9a:	f7ff fde5 	bl	8002a68 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b0a      	cmp	r3, #10
 8002ea6:	d90b      	bls.n	8002ec0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2205      	movs	r2, #5
 8002eb8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e012      	b.n	8002ee6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e5      	bne.n	8002e9a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e006      	b.n	8002ee6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b089      	sub	sp, #36	; 0x24
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f02:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f0c:	7ffb      	ldrb	r3, [r7, #31]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d003      	beq.n	8002f1a <HAL_CAN_AddTxMessage+0x2c>
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	f040 80ad 	bne.w	8003074 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d105      	bne.n	8002f3a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8095 	beq.w	8003064 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	0e1b      	lsrs	r3, r3, #24
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f44:	2201      	movs	r2, #1
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	6809      	ldr	r1, [r1, #0]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3318      	adds	r3, #24
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	440b      	add	r3, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e00f      	b.n	8002f92 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f7c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f86:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	440b      	add	r3, r1
 8002f90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3318      	adds	r3, #24
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	7d1b      	ldrb	r3, [r3, #20]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d111      	bne.n	8002fd2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3318      	adds	r3, #24
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	6811      	ldr	r1, [r2, #0]
 8002fc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3318      	adds	r3, #24
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	440b      	add	r3, r1
 8002fce:	3304      	adds	r3, #4
 8002fd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3307      	adds	r3, #7
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	061a      	lsls	r2, r3, #24
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3306      	adds	r3, #6
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3305      	adds	r3, #5
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	4313      	orrs	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	3204      	adds	r2, #4
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	6811      	ldr	r1, [r2, #0]
 8002ffa:	ea43 0200 	orr.w	r2, r3, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	440b      	add	r3, r1
 8003004:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003008:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3303      	adds	r3, #3
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	061a      	lsls	r2, r3, #24
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3302      	adds	r3, #2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3301      	adds	r3, #1
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	4313      	orrs	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	4610      	mov	r0, r2
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	6811      	ldr	r1, [r2, #0]
 8003030:	ea43 0200 	orr.w	r2, r3, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	440b      	add	r3, r1
 800303a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800303e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3318      	adds	r3, #24
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	4413      	add	r3, r2
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	6811      	ldr	r1, [r2, #0]
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3318      	adds	r3, #24
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	440b      	add	r3, r1
 800305e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e00e      	b.n	8003082 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e006      	b.n	8003082 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3724      	adds	r7, #36	; 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800308e:	b480      	push	{r7}
 8003090:	b087      	sub	sp, #28
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d003      	beq.n	80030b2 <HAL_CAN_GetRxMessage+0x24>
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	f040 80f3 	bne.w	8003298 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10e      	bne.n	80030d6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0e7      	b.n	80032a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d8      	b.n	80032a6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	331b      	adds	r3, #27
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	4413      	add	r3, r2
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0204 	and.w	r2, r3, #4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	331b      	adds	r3, #27
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	4413      	add	r3, r2
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	0d5b      	lsrs	r3, r3, #21
 8003122:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	e00b      	b.n	8003144 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	331b      	adds	r3, #27
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	4413      	add	r3, r2
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	331b      	adds	r3, #27
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	4413      	add	r3, r2
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0202 	and.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	331b      	adds	r3, #27
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	4413      	add	r3, r2
 8003166:	3304      	adds	r3, #4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	331b      	adds	r3, #27
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	b2da      	uxtb	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	331b      	adds	r3, #27
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	b29a      	uxth	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0a1a      	lsrs	r2, r3, #8
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	4413      	add	r3, r2
 80031dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	0c1a      	lsrs	r2, r3, #16
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	3302      	adds	r3, #2
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	0e1a      	lsrs	r2, r3, #24
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	3303      	adds	r3, #3
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	4413      	add	r3, r2
 8003210:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	3304      	adds	r3, #4
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	4413      	add	r3, r2
 8003228:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	0a1a      	lsrs	r2, r3, #8
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	3305      	adds	r3, #5
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	4413      	add	r3, r2
 8003242:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	0c1a      	lsrs	r2, r3, #16
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	3306      	adds	r3, #6
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	4413      	add	r3, r2
 800325c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0e1a      	lsrs	r2, r3, #24
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3307      	adds	r3, #7
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0220 	orr.w	r2, r2, #32
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	e007      	b.n	8003294 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0220 	orr.w	r2, r2, #32
 8003292:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e006      	b.n	80032a6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d002      	beq.n	80032d0 <HAL_CAN_ActivateNotification+0x1e>
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d109      	bne.n	80032e4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6959      	ldr	r1, [r3, #20]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e006      	b.n	80032f2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b08a      	sub	sp, #40	; 0x28
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d07c      	beq.n	800343e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d023      	beq.n	8003396 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2201      	movs	r2, #1
 8003354:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f983 	bl	800366c <HAL_CAN_TxMailbox0CompleteCallback>
 8003366:	e016      	b.n	8003396 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	e00c      	b.n	8003396 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	e002      	b.n	8003396 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f989 	bl	80036a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d024      	beq.n	80033ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f963 	bl	8003680 <HAL_CAN_TxMailbox1CompleteCallback>
 80033ba:	e016      	b.n	80033ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d004      	beq.n	80033d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
 80033ce:	e00c      	b.n	80033ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	e002      	b.n	80033ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f969 	bl	80036bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d024      	beq.n	800343e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f943 	bl	8003694 <HAL_CAN_TxMailbox2CompleteCallback>
 800340e:	e016      	b.n	800343e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d004      	beq.n	8003424 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	e00c      	b.n	800343e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e002      	b.n	800343e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f949 	bl	80036d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00c      	beq.n	8003462 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003458:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2210      	movs	r2, #16
 8003460:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00b      	beq.n	8003484 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2208      	movs	r2, #8
 800347c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f930 	bl	80036e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fd fdbf 	bl	8001020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2210      	movs	r2, #16
 80034c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00b      	beq.n	80034e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2208      	movs	r2, #8
 80034e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f912 	bl	800370c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8f9 	bl	80036f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2210      	movs	r2, #16
 8003520:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8fc 	bl	8003720 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d006      	beq.n	800354a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2208      	movs	r2, #8
 8003542:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f8f5 	bl	8003734 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d07b      	beq.n	800364c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d072      	beq.n	8003644 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d043      	beq.n	8003644 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d03e      	beq.n	8003644 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035cc:	2b60      	cmp	r3, #96	; 0x60
 80035ce:	d02b      	beq.n	8003628 <HAL_CAN_IRQHandler+0x32a>
 80035d0:	2b60      	cmp	r3, #96	; 0x60
 80035d2:	d82e      	bhi.n	8003632 <HAL_CAN_IRQHandler+0x334>
 80035d4:	2b50      	cmp	r3, #80	; 0x50
 80035d6:	d022      	beq.n	800361e <HAL_CAN_IRQHandler+0x320>
 80035d8:	2b50      	cmp	r3, #80	; 0x50
 80035da:	d82a      	bhi.n	8003632 <HAL_CAN_IRQHandler+0x334>
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d019      	beq.n	8003614 <HAL_CAN_IRQHandler+0x316>
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d826      	bhi.n	8003632 <HAL_CAN_IRQHandler+0x334>
 80035e4:	2b30      	cmp	r3, #48	; 0x30
 80035e6:	d010      	beq.n	800360a <HAL_CAN_IRQHandler+0x30c>
 80035e8:	2b30      	cmp	r3, #48	; 0x30
 80035ea:	d822      	bhi.n	8003632 <HAL_CAN_IRQHandler+0x334>
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d002      	beq.n	80035f6 <HAL_CAN_IRQHandler+0x2f8>
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d005      	beq.n	8003600 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035f4:	e01d      	b.n	8003632 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	f043 0308 	orr.w	r3, r3, #8
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035fe:	e019      	b.n	8003634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	f043 0310 	orr.w	r3, r3, #16
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003608:	e014      	b.n	8003634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	f043 0320 	orr.w	r3, r3, #32
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003612:	e00f      	b.n	8003634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800361c:	e00a      	b.n	8003634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003626:	e005      	b.n	8003634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003630:	e000      	b.n	8003634 <HAL_CAN_IRQHandler+0x336>
            break;
 8003632:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003642:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2204      	movs	r2, #4
 800364a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f872 	bl	8003748 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003664:	bf00      	nop
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378e:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	60d3      	str	r3, [r2, #12]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db0b      	blt.n	80037ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4907      	ldr	r1, [pc, #28]	; (80037f8 <__NVIC_EnableIRQ+0x38>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2001      	movs	r0, #1
 80037e2:	fa00 f202 	lsl.w	r2, r0, r2
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	; (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7ff ff8e 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff29 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003924:	f7ff ff3e 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 8003928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff8e 	bl	8003850 <NVIC_EncodePriority>
 8003934:	4602      	mov	r2, r0
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5d 	bl	80037fc <__NVIC_SetPriority>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff31 	bl	80037c0 <__NVIC_EnableIRQ>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ffa2 	bl	80038b8 <SysTick_Config>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b086      	sub	sp, #24
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_DMA_Start_IT+0x20>
 800399a:	2302      	movs	r3, #2
 800399c:	e04b      	b.n	8003a36 <HAL_DMA_Start_IT+0xb8>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d13a      	bne.n	8003a28 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f95f 	bl	8003c9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 020e 	orr.w	r2, r2, #14
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e00f      	b.n	8003a16 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0204 	bic.w	r2, r2, #4
 8003a04:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 020a 	orr.w	r2, r2, #10
 8003a14:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0201 	orr.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e005      	b.n	8003a34 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d008      	beq.n	8003a68 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e022      	b.n	8003aae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 020e 	bic.w	r2, r2, #14
 8003a76:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0201 	bic.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	f003 021c 	and.w	r2, r3, #28
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d005      	beq.n	8003ade <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e029      	b.n	8003b32 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 020e 	bic.w	r2, r2, #14
 8003aec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f003 021c 	and.w	r2, r3, #28
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b10:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
    }
  }
  return status;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	f003 031c 	and.w	r3, r3, #28
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d026      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x7a>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d021      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0204 	bic.w	r2, r2, #4
 8003b8e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f003 021c 	and.w	r2, r3, #28
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d071      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003bb4:	e06c      	b.n	8003c90 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	f003 031c 	and.w	r3, r3, #28
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d02e      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xec>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d029      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 020a 	bic.w	r2, r2, #10
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f003 021c 	and.w	r2, r3, #28
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2102      	movs	r1, #2
 8003c08:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d038      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c26:	e033      	b.n	8003c90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	f003 031c 	and.w	r3, r3, #28
 8003c30:	2208      	movs	r2, #8
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02a      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x156>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d025      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 020e 	bic.w	r2, r2, #14
 8003c54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f003 021c 	and.w	r2, r3, #28
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
}
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	f003 021c 	and.w	r2, r3, #28
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d108      	bne.n	8003cde <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cdc:	e007      	b.n	8003cee <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	60da      	str	r2, [r3, #12]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d0a:	e154      	b.n	8003fb6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	fa01 f303 	lsl.w	r3, r1, r3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8146 	beq.w	8003fb0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d005      	beq.n	8003d3c <HAL_GPIO_Init+0x40>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d130      	bne.n	8003d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	2203      	movs	r2, #3
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d72:	2201      	movs	r2, #1
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	f003 0201 	and.w	r2, r3, #1
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d017      	beq.n	8003dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	2203      	movs	r2, #3
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d123      	bne.n	8003e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	08da      	lsrs	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3208      	adds	r2, #8
 8003dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	220f      	movs	r2, #15
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	6939      	ldr	r1, [r7, #16]
 8003e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	2203      	movs	r2, #3
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0203 	and.w	r2, r3, #3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80a0 	beq.w	8003fb0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e70:	4b58      	ldr	r3, [pc, #352]	; (8003fd4 <HAL_GPIO_Init+0x2d8>)
 8003e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e74:	4a57      	ldr	r2, [pc, #348]	; (8003fd4 <HAL_GPIO_Init+0x2d8>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e7c:	4b55      	ldr	r3, [pc, #340]	; (8003fd4 <HAL_GPIO_Init+0x2d8>)
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e88:	4a53      	ldr	r2, [pc, #332]	; (8003fd8 <HAL_GPIO_Init+0x2dc>)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	3302      	adds	r3, #2
 8003e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	220f      	movs	r2, #15
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003eb2:	d019      	beq.n	8003ee8 <HAL_GPIO_Init+0x1ec>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a49      	ldr	r2, [pc, #292]	; (8003fdc <HAL_GPIO_Init+0x2e0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <HAL_GPIO_Init+0x1e8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a48      	ldr	r2, [pc, #288]	; (8003fe0 <HAL_GPIO_Init+0x2e4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_GPIO_Init+0x1e4>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a47      	ldr	r2, [pc, #284]	; (8003fe4 <HAL_GPIO_Init+0x2e8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <HAL_GPIO_Init+0x1e0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a46      	ldr	r2, [pc, #280]	; (8003fe8 <HAL_GPIO_Init+0x2ec>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_GPIO_Init+0x1dc>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	e008      	b.n	8003eea <HAL_GPIO_Init+0x1ee>
 8003ed8:	2307      	movs	r3, #7
 8003eda:	e006      	b.n	8003eea <HAL_GPIO_Init+0x1ee>
 8003edc:	2303      	movs	r3, #3
 8003ede:	e004      	b.n	8003eea <HAL_GPIO_Init+0x1ee>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e002      	b.n	8003eea <HAL_GPIO_Init+0x1ee>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_GPIO_Init+0x1ee>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	f002 0203 	and.w	r2, r2, #3
 8003ef0:	0092      	lsls	r2, r2, #2
 8003ef2:	4093      	lsls	r3, r2
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003efa:	4937      	ldr	r1, [pc, #220]	; (8003fd8 <HAL_GPIO_Init+0x2dc>)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	3302      	adds	r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f08:	4b38      	ldr	r3, [pc, #224]	; (8003fec <HAL_GPIO_Init+0x2f0>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f2c:	4a2f      	ldr	r2, [pc, #188]	; (8003fec <HAL_GPIO_Init+0x2f0>)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f32:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <HAL_GPIO_Init+0x2f0>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f56:	4a25      	ldr	r2, [pc, #148]	; (8003fec <HAL_GPIO_Init+0x2f0>)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f5c:	4b23      	ldr	r3, [pc, #140]	; (8003fec <HAL_GPIO_Init+0x2f0>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f80:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <HAL_GPIO_Init+0x2f0>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f86:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_GPIO_Init+0x2f0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003faa:	4a10      	ldr	r2, [pc, #64]	; (8003fec <HAL_GPIO_Init+0x2f0>)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f47f aea3 	bne.w	8003d0c <HAL_GPIO_Init+0x10>
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	48000400 	.word	0x48000400
 8003fe0:	48000800 	.word	0x48000800
 8003fe4:	48000c00 	.word	0x48000c00
 8003fe8:	48001000 	.word	0x48001000
 8003fec:	40010400 	.word	0x40010400

08003ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004000:	787b      	ldrb	r3, [r7, #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800400c:	e002      	b.n	8004014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e081      	b.n	8004136 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fe f8ba 	bl	80021c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	; 0x24
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	e006      	b.n	80040a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d104      	bne.n	80040ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69d9      	ldr	r1, [r3, #28]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1a      	ldr	r2, [r3, #32]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	817b      	strh	r3, [r7, #10]
 8004152:	460b      	mov	r3, r1
 8004154:	813b      	strh	r3, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b20      	cmp	r3, #32
 8004164:	f040 80f9 	bne.w	800435a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_I2C_Mem_Write+0x34>
 800416e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0ed      	b.n	800435c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_I2C_Mem_Write+0x4e>
 800418a:	2302      	movs	r3, #2
 800418c:	e0e6      	b.n	800435c <HAL_I2C_Mem_Write+0x21c>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004196:	f7fe fc67 	bl	8002a68 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2319      	movs	r3, #25
 80041a2:	2201      	movs	r2, #1
 80041a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f955 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0d1      	b.n	800435c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2221      	movs	r2, #33	; 0x21
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2240      	movs	r2, #64	; 0x40
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a3a      	ldr	r2, [r7, #32]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041e0:	88f8      	ldrh	r0, [r7, #6]
 80041e2:	893a      	ldrh	r2, [r7, #8]
 80041e4:	8979      	ldrh	r1, [r7, #10]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	4603      	mov	r3, r0
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f8b9 	bl	8004368 <I2C_RequestMemoryWrite>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0a9      	b.n	800435c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2bff      	cmp	r3, #255	; 0xff
 8004210:	d90e      	bls.n	8004230 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	22ff      	movs	r2, #255	; 0xff
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	b2da      	uxtb	r2, r3
 800421e:	8979      	ldrh	r1, [r7, #10]
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fabd 	bl	80047a8 <I2C_TransferConfig>
 800422e:	e00f      	b.n	8004250 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	b2da      	uxtb	r2, r3
 8004240:	8979      	ldrh	r1, [r7, #10]
 8004242:	2300      	movs	r3, #0
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 faac 	bl	80047a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f93f 	bl	80044d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e07b      	b.n	800435c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d034      	beq.n	8004308 <HAL_I2C_Mem_Write+0x1c8>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d130      	bne.n	8004308 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	2200      	movs	r2, #0
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f8d1 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e04d      	b.n	800435c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2bff      	cmp	r3, #255	; 0xff
 80042c8:	d90e      	bls.n	80042e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	22ff      	movs	r2, #255	; 0xff
 80042ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	8979      	ldrh	r1, [r7, #10]
 80042d8:	2300      	movs	r3, #0
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fa61 	bl	80047a8 <I2C_TransferConfig>
 80042e6:	e00f      	b.n	8004308 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	8979      	ldrh	r1, [r7, #10]
 80042fa:	2300      	movs	r3, #0
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fa50 	bl	80047a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d19e      	bne.n	8004250 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f91e 	bl	8004558 <I2C_WaitOnSTOPFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e01a      	b.n	800435c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2220      	movs	r2, #32
 800432c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <HAL_I2C_Mem_Write+0x224>)
 800433a:	400b      	ands	r3, r1
 800433c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	fe00e800 	.word	0xfe00e800

08004368 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	4608      	mov	r0, r1
 8004372:	4611      	mov	r1, r2
 8004374:	461a      	mov	r2, r3
 8004376:	4603      	mov	r3, r0
 8004378:	817b      	strh	r3, [r7, #10]
 800437a:	460b      	mov	r3, r1
 800437c:	813b      	strh	r3, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	8979      	ldrh	r1, [r7, #10]
 8004388:	4b20      	ldr	r3, [pc, #128]	; (800440c <I2C_RequestMemoryWrite+0xa4>)
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fa09 	bl	80047a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	69b9      	ldr	r1, [r7, #24]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f89c 	bl	80044d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e02c      	b.n	8004404 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d105      	bne.n	80043bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043b0:	893b      	ldrh	r3, [r7, #8]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	629a      	str	r2, [r3, #40]	; 0x28
 80043ba:	e015      	b.n	80043e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043bc:	893b      	ldrh	r3, [r7, #8]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	69b9      	ldr	r1, [r7, #24]
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f882 	bl	80044d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e012      	b.n	8004404 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043de:	893b      	ldrh	r3, [r7, #8]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2200      	movs	r2, #0
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f830 	bl	8004458 <I2C_WaitOnFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	80002000 	.word	0x80002000

08004410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b02      	cmp	r3, #2
 8004424:	d103      	bne.n	800442e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d007      	beq.n	800444c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	619a      	str	r2, [r3, #24]
  }
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004468:	e022      	b.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d01e      	beq.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fe faf9 	bl	8002a68 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d113      	bne.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e00f      	b.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d0cd      	beq.n	800446a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044e4:	e02c      	b.n	8004540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f870 	bl	80045d0 <I2C_IsErrorOccurred>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e02a      	b.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d01e      	beq.n	8004540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fe fab1 	bl	8002a68 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d113      	bne.n	8004540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e007      	b.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d1cb      	bne.n	80044e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004564:	e028      	b.n	80045b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f830 	bl	80045d0 <I2C_IsErrorOccurred>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e026      	b.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457a:	f7fe fa75 	bl	8002a68 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	429a      	cmp	r2, r3
 8004588:	d302      	bcc.n	8004590 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e007      	b.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d1cf      	bne.n	8004566 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d075      	beq.n	80046e8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2210      	movs	r2, #16
 8004602:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004604:	e056      	b.n	80046b4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d052      	beq.n	80046b4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800460e:	f7fe fa2b 	bl	8002a68 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	d302      	bcc.n	8004624 <I2C_IsErrorOccurred+0x54>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d147      	bne.n	80046b4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004636:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004646:	d12e      	bne.n	80046a6 <I2C_IsErrorOccurred+0xd6>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800464e:	d02a      	beq.n	80046a6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004650:	7cfb      	ldrb	r3, [r7, #19]
 8004652:	2b20      	cmp	r3, #32
 8004654:	d027      	beq.n	80046a6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004664:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004666:	f7fe f9ff 	bl	8002a68 <HAL_GetTick>
 800466a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800466c:	e01b      	b.n	80046a6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800466e:	f7fe f9fb 	bl	8002a68 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b19      	cmp	r3, #25
 800467a:	d914      	bls.n	80046a6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d1dc      	bne.n	800466e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d003      	beq.n	80046ca <I2C_IsErrorOccurred+0xfa>
 80046c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d09d      	beq.n	8004606 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2220      	movs	r2, #32
 80046d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800470a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	f043 0308 	orr.w	r3, r3, #8
 8004722:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800472c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01c      	beq.n	8004798 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff fe56 	bl	8004410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <I2C_IsErrorOccurred+0x1d4>)
 8004770:	400b      	ands	r3, r1
 8004772:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	431a      	orrs	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800479c:	4618      	mov	r0, r3
 800479e:	3728      	adds	r7, #40	; 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	fe00e800 	.word	0xfe00e800

080047a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	817b      	strh	r3, [r7, #10]
 80047b6:	4613      	mov	r3, r2
 80047b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047c0:	7a7b      	ldrb	r3, [r7, #9]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	0d5b      	lsrs	r3, r3, #21
 80047e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <I2C_TransferConfig+0x60>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	43db      	mvns	r3, r3
 80047ec:	ea02 0103 	and.w	r1, r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	03ff63ff 	.word	0x03ff63ff

0800480c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b20      	cmp	r3, #32
 8004820:	d138      	bne.n	8004894 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800482c:	2302      	movs	r3, #2
 800482e:	e032      	b.n	8004896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	; 0x24
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800485e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d139      	bne.n	800492c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e033      	b.n	800492e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2224      	movs	r2, #36	; 0x24
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e041      	b.n	80049d0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004954:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f245 5255 	movw	r2, #21845	; 0x5555
 800495e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6852      	ldr	r2, [r2, #4]
 8004968:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004974:	f7fe f878 	bl	8002a68 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800497a:	e00f      	b.n	800499c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800497c:	f7fe f874 	bl	8002a68 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b31      	cmp	r3, #49	; 0x31
 8004988:	d908      	bls.n	800499c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e019      	b.n	80049d0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e8      	bne.n	800497c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d005      	beq.n	80049c4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	68d2      	ldr	r2, [r2, #12]
 80049c0:	611a      	str	r2, [r3, #16]
 80049c2:	e004      	b.n	80049ce <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80049cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80049e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40007000 	.word	0x40007000

08004a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a22:	d130      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a30:	d038      	beq.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a32:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a42:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2232      	movs	r2, #50	; 0x32
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	0c9b      	lsrs	r3, r3, #18
 8004a54:	3301      	adds	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a58:	e002      	b.n	8004a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	d102      	bne.n	8004a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f2      	bne.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d110      	bne.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e00f      	b.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a92:	d007      	beq.n	8004aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a9c:	4a05      	ldr	r2, [pc, #20]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	20000000 	.word	0x20000000
 8004abc:	431bde83 	.word	0x431bde83

08004ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f000 bc02 	b.w	80052d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad4:	4b96      	ldr	r3, [pc, #600]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ade:	4b94      	ldr	r3, [pc, #592]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80e4 	beq.w	8004cbe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <HAL_RCC_OscConfig+0x4c>
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b0c      	cmp	r3, #12
 8004b00:	f040 808b 	bne.w	8004c1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	f040 8087 	bne.w	8004c1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b0c:	4b88      	ldr	r3, [pc, #544]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_RCC_OscConfig+0x64>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e3d9      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1a      	ldr	r2, [r3, #32]
 8004b28:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <HAL_RCC_OscConfig+0x7e>
 8004b34:	4b7e      	ldr	r3, [pc, #504]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3c:	e005      	b.n	8004b4a <HAL_RCC_OscConfig+0x8a>
 8004b3e:	4b7c      	ldr	r3, [pc, #496]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d223      	bcs.n	8004b96 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fd8a 	bl	800566c <RCC_SetFlashLatencyFromMSIRange>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e3ba      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b62:	4b73      	ldr	r3, [pc, #460]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a72      	ldr	r2, [pc, #456]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b68:	f043 0308 	orr.w	r3, r3, #8
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b70      	ldr	r3, [pc, #448]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	496d      	ldr	r1, [pc, #436]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b80:	4b6b      	ldr	r3, [pc, #428]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	4968      	ldr	r1, [pc, #416]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	604b      	str	r3, [r1, #4]
 8004b94:	e025      	b.n	8004be2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b96:	4b66      	ldr	r3, [pc, #408]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a65      	ldr	r2, [pc, #404]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004b9c:	f043 0308 	orr.w	r3, r3, #8
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	4b63      	ldr	r3, [pc, #396]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	4960      	ldr	r1, [pc, #384]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bb4:	4b5e      	ldr	r3, [pc, #376]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	021b      	lsls	r3, r3, #8
 8004bc2:	495b      	ldr	r1, [pc, #364]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fd4a 	bl	800566c <RCC_SetFlashLatencyFromMSIRange>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e37a      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004be2:	f000 fc81 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 8004be6:	4602      	mov	r2, r0
 8004be8:	4b51      	ldr	r3, [pc, #324]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	4950      	ldr	r1, [pc, #320]	; (8004d34 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	5ccb      	ldrb	r3, [r1, r3]
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfe:	4a4e      	ldr	r2, [pc, #312]	; (8004d38 <HAL_RCC_OscConfig+0x278>)
 8004c00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c02:	4b4e      	ldr	r3, [pc, #312]	; (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fd fede 	bl	80029c8 <HAL_InitTick>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d052      	beq.n	8004cbc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	e35e      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d032      	beq.n	8004c88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c22:	4b43      	ldr	r3, [pc, #268]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a42      	ldr	r2, [pc, #264]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c28:	f043 0301 	orr.w	r3, r3, #1
 8004c2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c2e:	f7fd ff1b 	bl	8002a68 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c36:	f7fd ff17 	bl	8002a68 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e347      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c48:	4b39      	ldr	r3, [pc, #228]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c54:	4b36      	ldr	r3, [pc, #216]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a35      	ldr	r2, [pc, #212]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c5a:	f043 0308 	orr.w	r3, r3, #8
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4b33      	ldr	r3, [pc, #204]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	4930      	ldr	r1, [pc, #192]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c72:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	492b      	ldr	r1, [pc, #172]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	604b      	str	r3, [r1, #4]
 8004c86:	e01a      	b.n	8004cbe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c88:	4b29      	ldr	r3, [pc, #164]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c94:	f7fd fee8 	bl	8002a68 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c9c:	f7fd fee4 	bl	8002a68 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e314      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x1dc>
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d073      	beq.n	8004db2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_OscConfig+0x21c>
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d10b      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d063      	beq.n	8004db0 <HAL_RCC_OscConfig+0x2f0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d15f      	bne.n	8004db0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e2f1      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfc:	d106      	bne.n	8004d0c <HAL_RCC_OscConfig+0x24c>
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a0b      	ldr	r2, [pc, #44]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e025      	b.n	8004d58 <HAL_RCC_OscConfig+0x298>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d14:	d114      	bne.n	8004d40 <HAL_RCC_OscConfig+0x280>
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a05      	ldr	r2, [pc, #20]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a02      	ldr	r2, [pc, #8]	; (8004d30 <HAL_RCC_OscConfig+0x270>)
 8004d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e013      	b.n	8004d58 <HAL_RCC_OscConfig+0x298>
 8004d30:	40021000 	.word	0x40021000
 8004d34:	0800a46c 	.word	0x0800a46c
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	20000014 	.word	0x20000014
 8004d40:	4ba0      	ldr	r3, [pc, #640]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a9f      	ldr	r2, [pc, #636]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b9d      	ldr	r3, [pc, #628]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a9c      	ldr	r2, [pc, #624]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fd fe82 	bl	8002a68 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fd fe7e 	bl	8002a68 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e2ae      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d7a:	4b92      	ldr	r3, [pc, #584]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0x2a8>
 8004d86:	e014      	b.n	8004db2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fd fe6e 	bl	8002a68 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fd fe6a 	bl	8002a68 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e29a      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004da2:	4b88      	ldr	r3, [pc, #544]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x2d0>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d060      	beq.n	8004e80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x310>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d119      	bne.n	8004dfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d116      	bne.n	8004dfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd0:	4b7c      	ldr	r3, [pc, #496]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_OscConfig+0x328>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e277      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de8:	4b76      	ldr	r3, [pc, #472]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	061b      	lsls	r3, r3, #24
 8004df6:	4973      	ldr	r1, [pc, #460]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dfc:	e040      	b.n	8004e80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d023      	beq.n	8004e4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e06:	4b6f      	ldr	r3, [pc, #444]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a6e      	ldr	r2, [pc, #440]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fd fe29 	bl	8002a68 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1a:	f7fd fe25 	bl	8002a68 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e255      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e2c:	4b65      	ldr	r3, [pc, #404]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e38:	4b62      	ldr	r3, [pc, #392]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	061b      	lsls	r3, r3, #24
 8004e46:	495f      	ldr	r1, [pc, #380]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]
 8004e4c:	e018      	b.n	8004e80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4e:	4b5d      	ldr	r3, [pc, #372]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a5c      	ldr	r2, [pc, #368]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fd fe05 	bl	8002a68 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e62:	f7fd fe01 	bl	8002a68 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e231      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e74:	4b53      	ldr	r3, [pc, #332]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f0      	bne.n	8004e62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d03c      	beq.n	8004f06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01c      	beq.n	8004ece <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e94:	4b4b      	ldr	r3, [pc, #300]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9a:	4a4a      	ldr	r2, [pc, #296]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea4:	f7fd fde0 	bl	8002a68 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eac:	f7fd fddc 	bl	8002a68 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e20c      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ebe:	4b41      	ldr	r3, [pc, #260]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0ef      	beq.n	8004eac <HAL_RCC_OscConfig+0x3ec>
 8004ecc:	e01b      	b.n	8004f06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ece:	4b3d      	ldr	r3, [pc, #244]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed4:	4a3b      	ldr	r2, [pc, #236]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ede:	f7fd fdc3 	bl	8002a68 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee6:	f7fd fdbf 	bl	8002a68 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e1ef      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ef8:	4b32      	ldr	r3, [pc, #200]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ef      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 80a6 	beq.w	8005060 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f14:	2300      	movs	r3, #0
 8004f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f18:	4b2a      	ldr	r3, [pc, #168]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10d      	bne.n	8004f40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f24:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	4a26      	ldr	r2, [pc, #152]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f30:	4b24      	ldr	r3, [pc, #144]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f40:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <HAL_RCC_OscConfig+0x508>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d118      	bne.n	8004f7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <HAL_RCC_OscConfig+0x508>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <HAL_RCC_OscConfig+0x508>)
 8004f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f58:	f7fd fd86 	bl	8002a68 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f60:	f7fd fd82 	bl	8002a68 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e1b2      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_RCC_OscConfig+0x508>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d108      	bne.n	8004f98 <HAL_RCC_OscConfig+0x4d8>
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8c:	4a0d      	ldr	r2, [pc, #52]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f96:	e029      	b.n	8004fec <HAL_RCC_OscConfig+0x52c>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	2b05      	cmp	r3, #5
 8004f9e:	d115      	bne.n	8004fcc <HAL_RCC_OscConfig+0x50c>
 8004fa0:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	4a07      	ldr	r2, [pc, #28]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004fa8:	f043 0304 	orr.w	r3, r3, #4
 8004fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fb0:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	4a03      	ldr	r2, [pc, #12]	; (8004fc4 <HAL_RCC_OscConfig+0x504>)
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc0:	e014      	b.n	8004fec <HAL_RCC_OscConfig+0x52c>
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	4b9a      	ldr	r3, [pc, #616]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	4a99      	ldr	r2, [pc, #612]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fdc:	4b96      	ldr	r3, [pc, #600]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	4a95      	ldr	r2, [pc, #596]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8004fe4:	f023 0304 	bic.w	r3, r3, #4
 8004fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d016      	beq.n	8005022 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fd fd38 	bl	8002a68 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffc:	f7fd fd34 	bl	8002a68 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	; 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e162      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005012:	4b89      	ldr	r3, [pc, #548]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0ed      	beq.n	8004ffc <HAL_RCC_OscConfig+0x53c>
 8005020:	e015      	b.n	800504e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005022:	f7fd fd21 	bl	8002a68 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005028:	e00a      	b.n	8005040 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fd fd1d 	bl	8002a68 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f241 3288 	movw	r2, #5000	; 0x1388
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e14b      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005040:	4b7d      	ldr	r3, [pc, #500]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1ed      	bne.n	800502a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800504e:	7ffb      	ldrb	r3, [r7, #31]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d105      	bne.n	8005060 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005054:	4b78      	ldr	r3, [pc, #480]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	4a77      	ldr	r2, [pc, #476]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 800505a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800505e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d03c      	beq.n	80050e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01c      	beq.n	80050ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005074:	4b70      	ldr	r3, [pc, #448]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800507a:	4a6f      	ldr	r2, [pc, #444]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 800507c:	f043 0301 	orr.w	r3, r3, #1
 8005080:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fd fcf0 	bl	8002a68 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800508c:	f7fd fcec 	bl	8002a68 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e11c      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800509e:	4b66      	ldr	r3, [pc, #408]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80050a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0ef      	beq.n	800508c <HAL_RCC_OscConfig+0x5cc>
 80050ac:	e01b      	b.n	80050e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ae:	4b62      	ldr	r3, [pc, #392]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80050b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050b4:	4a60      	ldr	r2, [pc, #384]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050be:	f7fd fcd3 	bl	8002a68 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050c6:	f7fd fccf 	bl	8002a68 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e0ff      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050d8:	4b57      	ldr	r3, [pc, #348]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80050da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1ef      	bne.n	80050c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80f3 	beq.w	80052d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	f040 80c9 	bne.w	800528c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050fa:	4b4f      	ldr	r3, [pc, #316]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f003 0203 	and.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	429a      	cmp	r2, r3
 800510c:	d12c      	bne.n	8005168 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	3b01      	subs	r3, #1
 800511a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d123      	bne.n	8005168 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d11b      	bne.n	8005168 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d113      	bne.n	8005168 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	3b01      	subs	r3, #1
 800514e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005150:	429a      	cmp	r2, r3
 8005152:	d109      	bne.n	8005168 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	3b01      	subs	r3, #1
 8005162:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d06b      	beq.n	8005240 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d062      	beq.n	8005234 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800516e:	4b32      	ldr	r3, [pc, #200]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0ac      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800517e:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005188:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800518a:	f7fd fc6d 	bl	8002a68 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005192:	f7fd fc69 	bl	8002a68 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e099      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a4:	4b24      	ldr	r3, [pc, #144]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b0:	4b21      	ldr	r3, [pc, #132]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <HAL_RCC_OscConfig+0x77c>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051c0:	3a01      	subs	r2, #1
 80051c2:	0112      	lsls	r2, r2, #4
 80051c4:	4311      	orrs	r1, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051ca:	0212      	lsls	r2, r2, #8
 80051cc:	4311      	orrs	r1, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051d2:	0852      	lsrs	r2, r2, #1
 80051d4:	3a01      	subs	r2, #1
 80051d6:	0552      	lsls	r2, r2, #21
 80051d8:	4311      	orrs	r1, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051de:	0852      	lsrs	r2, r2, #1
 80051e0:	3a01      	subs	r2, #1
 80051e2:	0652      	lsls	r2, r2, #25
 80051e4:	4311      	orrs	r1, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051ea:	06d2      	lsls	r2, r2, #27
 80051ec:	430a      	orrs	r2, r1
 80051ee:	4912      	ldr	r1, [pc, #72]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051f4:	4b10      	ldr	r3, [pc, #64]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a0f      	ldr	r2, [pc, #60]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 80051fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005200:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800520c:	f7fd fc2c 	bl	8002a68 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005214:	f7fd fc28 	bl	8002a68 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e058      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005226:	4b04      	ldr	r3, [pc, #16]	; (8005238 <HAL_RCC_OscConfig+0x778>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005232:	e050      	b.n	80052d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e04f      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
 8005238:	40021000 	.word	0x40021000
 800523c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005240:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d144      	bne.n	80052d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800524c:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a23      	ldr	r2, [pc, #140]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 8005252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005256:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005258:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	4a20      	ldr	r2, [pc, #128]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 800525e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005262:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005264:	f7fd fc00 	bl	8002a68 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526c:	f7fd fbfc 	bl	8002a68 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e02c      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527e:	4b18      	ldr	r3, [pc, #96]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0x7ac>
 800528a:	e024      	b.n	80052d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d01f      	beq.n	80052d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005292:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 8005298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800529c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529e:	f7fd fbe3 	bl	8002a68 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fd fbdf 	bl	8002a68 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e00f      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b8:	4b09      	ldr	r3, [pc, #36]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f0      	bne.n	80052a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	4905      	ldr	r1, [pc, #20]	; (80052e0 <HAL_RCC_OscConfig+0x820>)
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_RCC_OscConfig+0x824>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	60cb      	str	r3, [r1, #12]
 80052d0:	e001      	b.n	80052d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40021000 	.word	0x40021000
 80052e4:	feeefffc 	.word	0xfeeefffc

080052e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0e7      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052fc:	4b75      	ldr	r3, [pc, #468]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	429a      	cmp	r2, r3
 8005308:	d910      	bls.n	800532c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800530a:	4b72      	ldr	r3, [pc, #456]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f023 0207 	bic.w	r2, r3, #7
 8005312:	4970      	ldr	r1, [pc, #448]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	4313      	orrs	r3, r2
 8005318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800531a:	4b6e      	ldr	r3, [pc, #440]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0cf      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d010      	beq.n	800535a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	4b66      	ldr	r3, [pc, #408]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005344:	429a      	cmp	r2, r3
 8005346:	d908      	bls.n	800535a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005348:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4960      	ldr	r1, [pc, #384]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005356:	4313      	orrs	r3, r2
 8005358:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d04c      	beq.n	8005400 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b03      	cmp	r3, #3
 800536c:	d107      	bne.n	800537e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536e:	4b5a      	ldr	r3, [pc, #360]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d121      	bne.n	80053be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e0a6      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005386:	4b54      	ldr	r3, [pc, #336]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d115      	bne.n	80053be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e09a      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800539e:	4b4e      	ldr	r3, [pc, #312]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e08e      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ae:	4b4a      	ldr	r3, [pc, #296]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e086      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053be:	4b46      	ldr	r3, [pc, #280]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f023 0203 	bic.w	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4943      	ldr	r1, [pc, #268]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d0:	f7fd fb4a 	bl	8002a68 <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d8:	f7fd fb46 	bl	8002a68 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e06e      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	4b3a      	ldr	r3, [pc, #232]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 020c 	and.w	r2, r3, #12
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d1eb      	bne.n	80053d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d010      	beq.n	800542e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005418:	429a      	cmp	r2, r3
 800541a:	d208      	bcs.n	800542e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800541c:	4b2e      	ldr	r3, [pc, #184]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	492b      	ldr	r1, [pc, #172]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800542e:	4b29      	ldr	r3, [pc, #164]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d210      	bcs.n	800545e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f023 0207 	bic.w	r2, r3, #7
 8005444:	4923      	ldr	r1, [pc, #140]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544c:	4b21      	ldr	r3, [pc, #132]	; (80054d4 <HAL_RCC_ClockConfig+0x1ec>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d001      	beq.n	800545e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e036      	b.n	80054cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800546a:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	4918      	ldr	r1, [pc, #96]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005478:	4313      	orrs	r3, r2
 800547a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005488:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4910      	ldr	r1, [pc, #64]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005498:	4313      	orrs	r3, r2
 800549a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800549c:	f000 f824 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <HAL_RCC_ClockConfig+0x1f0>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	490b      	ldr	r1, [pc, #44]	; (80054dc <HAL_RCC_ClockConfig+0x1f4>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
 80054b8:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1f8>)
 80054ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1fc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fd fa81 	bl	80029c8 <HAL_InitTick>
 80054c6:	4603      	mov	r3, r0
 80054c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80054ca:	7afb      	ldrb	r3, [r7, #11]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40022000 	.word	0x40022000
 80054d8:	40021000 	.word	0x40021000
 80054dc:	0800a46c 	.word	0x0800a46c
 80054e0:	20000000 	.word	0x20000000
 80054e4:	20000014 	.word	0x20000014

080054e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	2300      	movs	r3, #0
 80054f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005500:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0303 	and.w	r3, r3, #3
 8005508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x34>
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b0c      	cmp	r3, #12
 8005514:	d121      	bne.n	800555a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d11e      	bne.n	800555a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800551c:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005528:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800552a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	e005      	b.n	8005544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005538:	4b2d      	ldr	r3, [pc, #180]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005544:	4a2b      	ldr	r2, [pc, #172]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10d      	bne.n	8005570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005558:	e00a      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d102      	bne.n	8005566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005560:	4b25      	ldr	r3, [pc, #148]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	e004      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b08      	cmp	r3, #8
 800556a:	d101      	bne.n	8005570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800556c:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800556e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d134      	bne.n	80055e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005576:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d003      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0xa6>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d003      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0xac>
 800558c:	e005      	b.n	800559a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005590:	617b      	str	r3, [r7, #20]
      break;
 8005592:	e005      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005594:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005596:	617b      	str	r3, [r7, #20]
      break;
 8005598:	e002      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	617b      	str	r3, [r7, #20]
      break;
 800559e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	3301      	adds	r3, #1
 80055ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	0a1b      	lsrs	r3, r3, #8
 80055b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	fb03 f202 	mul.w	r2, r3, r2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	0e5b      	lsrs	r3, r3, #25
 80055cc:	f003 0303 	and.w	r3, r3, #3
 80055d0:	3301      	adds	r3, #1
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055e0:	69bb      	ldr	r3, [r7, #24]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3724      	adds	r7, #36	; 0x24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	0800a484 	.word	0x0800a484
 80055f8:	00f42400 	.word	0x00f42400

080055fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <HAL_RCC_GetHCLKFreq+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000000 	.word	0x20000000

08005614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005618:	f7ff fff0 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4904      	ldr	r1, [pc, #16]	; (800563c <HAL_RCC_GetPCLK1Freq+0x28>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40021000 	.word	0x40021000
 800563c:	0800a47c 	.word	0x0800a47c

08005640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005644:	f7ff ffda 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0adb      	lsrs	r3, r3, #11
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	4904      	ldr	r1, [pc, #16]	; (8005668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005656:	5ccb      	ldrb	r3, [r1, r3]
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000
 8005668:	0800a47c 	.word	0x0800a47c

0800566c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005678:	4b2a      	ldr	r3, [pc, #168]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005684:	f7ff f9b8 	bl	80049f8 <HAL_PWREx_GetVoltageRange>
 8005688:	6178      	str	r0, [r7, #20]
 800568a:	e014      	b.n	80056b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800568c:	4b25      	ldr	r3, [pc, #148]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	4a24      	ldr	r2, [pc, #144]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005696:	6593      	str	r3, [r2, #88]	; 0x58
 8005698:	4b22      	ldr	r3, [pc, #136]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056a4:	f7ff f9a8 	bl	80049f8 <HAL_PWREx_GetVoltageRange>
 80056a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056aa:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056bc:	d10b      	bne.n	80056d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b80      	cmp	r3, #128	; 0x80
 80056c2:	d919      	bls.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2ba0      	cmp	r3, #160	; 0xa0
 80056c8:	d902      	bls.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056ca:	2302      	movs	r3, #2
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	e013      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056d0:	2301      	movs	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	e010      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b80      	cmp	r3, #128	; 0x80
 80056da:	d902      	bls.n	80056e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056dc:	2303      	movs	r3, #3
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	e00a      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d102      	bne.n	80056ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056e8:	2302      	movs	r3, #2
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	e004      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b70      	cmp	r3, #112	; 0x70
 80056f2:	d101      	bne.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056f4:	2301      	movs	r3, #1
 80056f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f023 0207 	bic.w	r2, r3, #7
 8005700:	4909      	ldr	r1, [pc, #36]	; (8005728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d001      	beq.n	800571a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40021000 	.word	0x40021000
 8005728:	40022000 	.word	0x40022000

0800572c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005734:	2300      	movs	r3, #0
 8005736:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005738:	2300      	movs	r3, #0
 800573a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005744:	2b00      	cmp	r3, #0
 8005746:	d031      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005750:	d01a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005752:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005756:	d814      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800575c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005760:	d10f      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005762:	4b5d      	ldr	r3, [pc, #372]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	4a5c      	ldr	r2, [pc, #368]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800576e:	e00c      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3304      	adds	r3, #4
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f000 f9f0 	bl	8005b5c <RCCEx_PLLSAI1_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	74fb      	strb	r3, [r7, #19]
      break;
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005790:	4b51      	ldr	r3, [pc, #324]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579e:	494e      	ldr	r1, [pc, #312]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057a6:	e001      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 809e 	beq.w	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ba:	2300      	movs	r3, #0
 80057bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057be:	4b46      	ldr	r3, [pc, #280]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d4:	4b40      	ldr	r3, [pc, #256]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	4a3f      	ldr	r2, [pc, #252]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057de:	6593      	str	r3, [r2, #88]	; 0x58
 80057e0:	4b3d      	ldr	r3, [pc, #244]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ec:	2301      	movs	r3, #1
 80057ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f0:	4b3a      	ldr	r3, [pc, #232]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a39      	ldr	r2, [pc, #228]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057fc:	f7fd f934 	bl	8002a68 <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005802:	e009      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005804:	f7fd f930 	bl	8002a68 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d902      	bls.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	74fb      	strb	r3, [r7, #19]
        break;
 8005816:	e005      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ef      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d15a      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800582a:	4b2b      	ldr	r3, [pc, #172]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005834:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01e      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	429a      	cmp	r2, r3
 8005844:	d019      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005846:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005852:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005858:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800585a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005862:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005868:	4a1b      	ldr	r2, [pc, #108]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800586a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005872:	4a19      	ldr	r2, [pc, #100]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d016      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005884:	f7fd f8f0 	bl	8002a68 <HAL_GetTick>
 8005888:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588a:	e00b      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588c:	f7fd f8ec 	bl	8002a68 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f241 3288 	movw	r2, #5000	; 0x1388
 800589a:	4293      	cmp	r3, r2
 800589c:	d902      	bls.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	74fb      	strb	r3, [r7, #19]
            break;
 80058a2:	e006      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a4:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0ec      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80058b2:	7cfb      	ldrb	r3, [r7, #19]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b8:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c6:	4904      	ldr	r1, [pc, #16]	; (80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058ce:	e009      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058d0:	7cfb      	ldrb	r3, [r7, #19]
 80058d2:	74bb      	strb	r3, [r7, #18]
 80058d4:	e006      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000
 80058dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e0:	7cfb      	ldrb	r3, [r7, #19]
 80058e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058e4:	7c7b      	ldrb	r3, [r7, #17]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d105      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ea:	4b9b      	ldr	r3, [pc, #620]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	4a9a      	ldr	r2, [pc, #616]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80058f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005902:	4b95      	ldr	r3, [pc, #596]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	f023 0203 	bic.w	r2, r3, #3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	4991      	ldr	r1, [pc, #580]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005924:	4b8c      	ldr	r3, [pc, #560]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	f023 020c 	bic.w	r2, r3, #12
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	4989      	ldr	r1, [pc, #548]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005946:	4b84      	ldr	r3, [pc, #528]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	4980      	ldr	r1, [pc, #512]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005968:	4b7b      	ldr	r3, [pc, #492]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	4978      	ldr	r1, [pc, #480]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800598a:	4b73      	ldr	r3, [pc, #460]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005998:	496f      	ldr	r1, [pc, #444]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059ac:	4b6a      	ldr	r3, [pc, #424]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	4967      	ldr	r1, [pc, #412]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ce:	4b62      	ldr	r3, [pc, #392]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	495e      	ldr	r1, [pc, #376]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059f0:	4b59      	ldr	r3, [pc, #356]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	4956      	ldr	r1, [pc, #344]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a12:	4b51      	ldr	r3, [pc, #324]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	494d      	ldr	r1, [pc, #308]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d028      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a34:	4b48      	ldr	r3, [pc, #288]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a42:	4945      	ldr	r1, [pc, #276]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a52:	d106      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a54:	4b40      	ldr	r3, [pc, #256]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4a3f      	ldr	r2, [pc, #252]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a5e:	60d3      	str	r3, [r2, #12]
 8005a60:	e011      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a6a:	d10c      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	2101      	movs	r1, #1
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f872 	bl	8005b5c <RCCEx_PLLSAI1_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a7c:	7cfb      	ldrb	r3, [r7, #19]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005a82:	7cfb      	ldrb	r3, [r7, #19]
 8005a84:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d028      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a92:	4b31      	ldr	r3, [pc, #196]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa0:	492d      	ldr	r1, [pc, #180]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab0:	d106      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab2:	4b29      	ldr	r3, [pc, #164]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	4a28      	ldr	r2, [pc, #160]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005abc:	60d3      	str	r3, [r2, #12]
 8005abe:	e011      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3304      	adds	r3, #4
 8005ace:	2101      	movs	r1, #1
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f843 	bl	8005b5c <RCCEx_PLLSAI1_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005ae0:	7cfb      	ldrb	r3, [r7, #19]
 8005ae2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01c      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005af0:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afe:	4916      	ldr	r1, [pc, #88]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b0e:	d10c      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3304      	adds	r3, #4
 8005b14:	2102      	movs	r1, #2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f820 	bl	8005b5c <RCCEx_PLLSAI1_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b20:	7cfb      	ldrb	r3, [r7, #19]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005b26:	7cfb      	ldrb	r3, [r7, #19]
 8005b28:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b36:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b44:	4904      	ldr	r1, [pc, #16]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40021000 	.word	0x40021000

08005b5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b6a:	4b74      	ldr	r3, [pc, #464]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d018      	beq.n	8005ba8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b76:	4b71      	ldr	r3, [pc, #452]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0203 	and.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d10d      	bne.n	8005ba2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
       ||
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b8e:	4b6b      	ldr	r3, [pc, #428]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	091b      	lsrs	r3, r3, #4
 8005b94:	f003 0307 	and.w	r3, r3, #7
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
       ||
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d047      	beq.n	8005c32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
 8005ba6:	e044      	b.n	8005c32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d018      	beq.n	8005be2 <RCCEx_PLLSAI1_Config+0x86>
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d825      	bhi.n	8005c00 <RCCEx_PLLSAI1_Config+0xa4>
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d002      	beq.n	8005bbe <RCCEx_PLLSAI1_Config+0x62>
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d009      	beq.n	8005bd0 <RCCEx_PLLSAI1_Config+0x74>
 8005bbc:	e020      	b.n	8005c00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bbe:	4b5f      	ldr	r3, [pc, #380]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d11d      	bne.n	8005c06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bce:	e01a      	b.n	8005c06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bd0:	4b5a      	ldr	r3, [pc, #360]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d116      	bne.n	8005c0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005be0:	e013      	b.n	8005c0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005be2:	4b56      	ldr	r3, [pc, #344]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bee:	4b53      	ldr	r3, [pc, #332]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bfe:	e006      	b.n	8005c0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
      break;
 8005c04:	e004      	b.n	8005c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10d      	bne.n	8005c32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c16:	4b49      	ldr	r3, [pc, #292]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	4943      	ldr	r1, [pc, #268]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d17c      	bne.n	8005d32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c38:	4b40      	ldr	r3, [pc, #256]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a3f      	ldr	r2, [pc, #252]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c44:	f7fc ff10 	bl	8002a68 <HAL_GetTick>
 8005c48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c4a:	e009      	b.n	8005c60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c4c:	f7fc ff0c 	bl	8002a68 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d902      	bls.n	8005c60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c5e:	e005      	b.n	8005c6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c60:	4b36      	ldr	r3, [pc, #216]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1ef      	bne.n	8005c4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d15f      	bne.n	8005d32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d110      	bne.n	8005c9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c78:	4b30      	ldr	r3, [pc, #192]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005c80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6892      	ldr	r2, [r2, #8]
 8005c88:	0211      	lsls	r1, r2, #8
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	68d2      	ldr	r2, [r2, #12]
 8005c8e:	06d2      	lsls	r2, r2, #27
 8005c90:	430a      	orrs	r2, r1
 8005c92:	492a      	ldr	r1, [pc, #168]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	610b      	str	r3, [r1, #16]
 8005c98:	e027      	b.n	8005cea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d112      	bne.n	8005cc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ca0:	4b26      	ldr	r3, [pc, #152]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005ca8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6892      	ldr	r2, [r2, #8]
 8005cb0:	0211      	lsls	r1, r2, #8
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6912      	ldr	r2, [r2, #16]
 8005cb6:	0852      	lsrs	r2, r2, #1
 8005cb8:	3a01      	subs	r2, #1
 8005cba:	0552      	lsls	r2, r2, #21
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	491f      	ldr	r1, [pc, #124]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	610b      	str	r3, [r1, #16]
 8005cc4:	e011      	b.n	8005cea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cc6:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005cce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6892      	ldr	r2, [r2, #8]
 8005cd6:	0211      	lsls	r1, r2, #8
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6952      	ldr	r2, [r2, #20]
 8005cdc:	0852      	lsrs	r2, r2, #1
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	0652      	lsls	r2, r2, #25
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	4915      	ldr	r1, [pc, #84]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cf4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf6:	f7fc feb7 	bl	8002a68 <HAL_GetTick>
 8005cfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cfc:	e009      	b.n	8005d12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cfe:	f7fc feb3 	bl	8002a68 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d902      	bls.n	8005d12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	73fb      	strb	r3, [r7, #15]
          break;
 8005d10:	e005      	b.n	8005d1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d12:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0ef      	beq.n	8005cfe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	4903      	ldr	r1, [pc, #12]	; (8005d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	40021000 	.word	0x40021000

08005d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e040      	b.n	8005dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f873 	bl	8005e4e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2224      	movs	r2, #36	; 0x24
 8005d6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fd40 	bl	8006804 <UART_SetConfig>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e022      	b.n	8005dd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 ff8e 	bl	8006cb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 f815 	bl	8006dfc <UART_CheckIdleState>
 8005dd2:	4603      	mov	r3, r0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e02b      	b.n	8005e46 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2224      	movs	r2, #36	; 0x24
 8005df2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0201 	bic.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2200      	movs	r2, #0
 8005e12:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f820 	bl	8005e62 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b08a      	sub	sp, #40	; 0x28
 8005e7a:	af02      	add	r7, sp, #8
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	f040 8082 	bne.w	8005f94 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_UART_Transmit+0x26>
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e07a      	b.n	8005f96 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Transmit+0x38>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e073      	b.n	8005f96 <HAL_UART_Transmit+0x120>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2221      	movs	r2, #33	; 0x21
 8005ec2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ec4:	f7fc fdd0 	bl	8002a68 <HAL_GetTick>
 8005ec8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	88fa      	ldrh	r2, [r7, #6]
 8005ed6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee2:	d108      	bne.n	8005ef6 <HAL_UART_Transmit+0x80>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	e003      	b.n	8005efe <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f06:	e02d      	b.n	8005f64 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2180      	movs	r1, #128	; 0x80
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 ffbb 	bl	8006e8e <UART_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e039      	b.n	8005f96 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10b      	bne.n	8005f40 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	881a      	ldrh	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f34:	b292      	uxth	r2, r2
 8005f36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	e008      	b.n	8005f52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	781a      	ldrb	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	b292      	uxth	r2, r2
 8005f4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1cb      	bne.n	8005f08 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2140      	movs	r1, #64	; 0x40
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 ff87 	bl	8006e8e <UART_WaitOnFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e005      	b.n	8005f96 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e000      	b.n	8005f96 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3720      	adds	r7, #32
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b08a      	sub	sp, #40	; 0x28
 8005fa2:	af02      	add	r7, sp, #8
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	603b      	str	r3, [r7, #0]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	f040 80bf 	bne.w	8006136 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_UART_Receive+0x26>
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0b7      	b.n	8006138 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Receive+0x38>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	e0b0      	b.n	8006138 <HAL_UART_Receive+0x19a>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2222      	movs	r2, #34	; 0x22
 8005fea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ff2:	f7fc fd39 	bl	8002a68 <HAL_GetTick>
 8005ff6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	88fa      	ldrh	r2, [r7, #6]
 8005ffc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006010:	d10e      	bne.n	8006030 <HAL_UART_Receive+0x92>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d105      	bne.n	8006026 <HAL_UART_Receive+0x88>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006024:	e02d      	b.n	8006082 <HAL_UART_Receive+0xe4>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	22ff      	movs	r2, #255	; 0xff
 800602a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800602e:	e028      	b.n	8006082 <HAL_UART_Receive+0xe4>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10d      	bne.n	8006054 <HAL_UART_Receive+0xb6>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <HAL_UART_Receive+0xac>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	22ff      	movs	r2, #255	; 0xff
 8006044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006048:	e01b      	b.n	8006082 <HAL_UART_Receive+0xe4>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	227f      	movs	r2, #127	; 0x7f
 800604e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006052:	e016      	b.n	8006082 <HAL_UART_Receive+0xe4>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800605c:	d10d      	bne.n	800607a <HAL_UART_Receive+0xdc>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <HAL_UART_Receive+0xd2>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	227f      	movs	r2, #127	; 0x7f
 800606a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800606e:	e008      	b.n	8006082 <HAL_UART_Receive+0xe4>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	223f      	movs	r2, #63	; 0x3f
 8006074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006078:	e003      	b.n	8006082 <HAL_UART_Receive+0xe4>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006088:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006092:	d108      	bne.n	80060a6 <HAL_UART_Receive+0x108>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	e003      	b.n	80060ae <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80060b6:	e033      	b.n	8006120 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	2120      	movs	r1, #32
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fee3 	bl	8006e8e <UART_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e032      	b.n	8006138 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10c      	bne.n	80060f2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060de:	b29a      	uxth	r2, r3
 80060e0:	8a7b      	ldrh	r3, [r7, #18]
 80060e2:	4013      	ands	r3, r2
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	3302      	adds	r3, #2
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	e00d      	b.n	800610e <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	8a7b      	ldrh	r3, [r7, #18]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	4013      	ands	r3, r2
 8006102:	b2da      	uxtb	r2, r3
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	3301      	adds	r3, #1
 800610c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1c5      	bne.n	80060b8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	; 0x28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006152:	2b20      	cmp	r3, #32
 8006154:	d142      	bne.n	80061dc <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <HAL_UART_Receive_DMA+0x22>
 800615c:	88fb      	ldrh	r3, [r7, #6]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e03b      	b.n	80061de <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_UART_Receive_DMA+0x34>
 8006170:	2302      	movs	r3, #2
 8006172:	e034      	b.n	80061de <HAL_UART_Receive_DMA+0x9e>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <HAL_UART_Receive_DMA+0xa8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d01f      	beq.n	80061cc <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	613b      	str	r3, [r7, #16]
   return(result);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	69f9      	ldr	r1, [r7, #28]
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e6      	bne.n	800619a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 ff20 	bl	8007018 <UART_Start_Receive_DMA>
 80061d8:	4603      	mov	r3, r0
 80061da:	e000      	b.n	80061de <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3728      	adds	r7, #40	; 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40008000 	.word	0x40008000

080061ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b0ba      	sub	sp, #232	; 0xe8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006212:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006216:	f640 030f 	movw	r3, #2063	; 0x80f
 800621a:	4013      	ands	r3, r2
 800621c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d115      	bne.n	8006254 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00f      	beq.n	8006254 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 82a6 	beq.w	8006796 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
      }
      return;
 8006252:	e2a0      	b.n	8006796 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8117 	beq.w	800648c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800625e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800626a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800626e:	4b85      	ldr	r3, [pc, #532]	; (8006484 <HAL_UART_IRQHandler+0x298>)
 8006270:	4013      	ands	r3, r2
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 810a 	beq.w	800648c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d011      	beq.n	80062a8 <HAL_UART_IRQHandler+0xbc>
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00b      	beq.n	80062a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2201      	movs	r2, #1
 8006296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629e:	f043 0201 	orr.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d011      	beq.n	80062d8 <HAL_UART_IRQHandler+0xec>
 80062b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2202      	movs	r2, #2
 80062c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ce:	f043 0204 	orr.w	r2, r3, #4
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d011      	beq.n	8006308 <HAL_UART_IRQHandler+0x11c>
 80062e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2204      	movs	r2, #4
 80062f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062fe:	f043 0202 	orr.w	r2, r3, #2
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d017      	beq.n	8006344 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d105      	bne.n	800632c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006324:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2208      	movs	r2, #8
 8006332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800633a:	f043 0208 	orr.w	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800634c:	2b00      	cmp	r3, #0
 800634e:	d012      	beq.n	8006376 <HAL_UART_IRQHandler+0x18a>
 8006350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00c      	beq.n	8006376 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636c:	f043 0220 	orr.w	r2, r3, #32
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 820c 	beq.w	800679a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00d      	beq.n	80063aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800638e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d005      	beq.n	80063ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04f      	beq.n	800646e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 feee 	bl	80071b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d141      	bne.n	8006466 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3308      	adds	r3, #8
 80063e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800640e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800641a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1d9      	bne.n	80063e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	2b00      	cmp	r3, #0
 8006434:	d013      	beq.n	800645e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643a:	4a13      	ldr	r2, [pc, #76]	; (8006488 <HAL_UART_IRQHandler+0x29c>)
 800643c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006442:	4618      	mov	r0, r3
 8006444:	f7fd fb39 	bl	8003aba <HAL_DMA_Abort_IT>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d017      	beq.n	800647e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	e00f      	b.n	800647e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9ba 	bl	80067d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e00b      	b.n	800647e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f9b6 	bl	80067d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	e007      	b.n	800647e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9b2 	bl	80067d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800647c:	e18d      	b.n	800679a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647e:	bf00      	nop
    return;
 8006480:	e18b      	b.n	800679a <HAL_UART_IRQHandler+0x5ae>
 8006482:	bf00      	nop
 8006484:	04000120 	.word	0x04000120
 8006488:	0800744f 	.word	0x0800744f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006490:	2b01      	cmp	r3, #1
 8006492:	f040 8146 	bne.w	8006722 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649a:	f003 0310 	and.w	r3, r3, #16
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 813f 	beq.w	8006722 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8138 	beq.w	8006722 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2210      	movs	r2, #16
 80064b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c4:	2b40      	cmp	r3, #64	; 0x40
 80064c6:	f040 80b4 	bne.w	8006632 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 815f 	beq.w	800679e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80064e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ea:	429a      	cmp	r2, r3
 80064ec:	f080 8157 	bcs.w	800679e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 8085 	bne.w	8006616 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800653a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006542:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800654e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1da      	bne.n	800650c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3308      	adds	r3, #8
 8006576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800657a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800657e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006580:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006582:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800658c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e1      	bne.n	8006556 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3308      	adds	r3, #8
 8006598:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3308      	adds	r3, #8
 80065b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e3      	bne.n	8006592 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e6:	f023 0310 	bic.w	r3, r3, #16
 80065ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80065fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e4      	bne.n	80065d6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006610:	4618      	mov	r0, r3
 8006612:	f7fd fa14 	bl	8003a3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006622:	b29b      	uxth	r3, r3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f8de 	bl	80067ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006630:	e0b5      	b.n	800679e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800663e:	b29b      	uxth	r3, r3
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 80a7 	beq.w	80067a2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80a2 	beq.w	80067a2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800666c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006672:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
 8006682:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800668e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e4      	bne.n	800665e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3308      	adds	r3, #8
 800669a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	623b      	str	r3, [r7, #32]
   return(result);
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066b8:	633a      	str	r2, [r7, #48]	; 0x30
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e3      	bne.n	8006694 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0310 	bic.w	r3, r3, #16
 80066f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006700:	61fb      	str	r3, [r7, #28]
 8006702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	69b9      	ldr	r1, [r7, #24]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	617b      	str	r3, [r7, #20]
   return(result);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e4      	bne.n	80066de <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f866 	bl	80067ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006720:	e03f      	b.n	80067a2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00e      	beq.n	800674c <HAL_UART_IRQHandler+0x560>
 800672e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006742:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fec2 	bl	80074ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800674a:	e02d      	b.n	80067a8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00e      	beq.n	8006776 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01c      	beq.n	80067a6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
    }
    return;
 8006774:	e017      	b.n	80067a6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d012      	beq.n	80067a8 <HAL_UART_IRQHandler+0x5bc>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00c      	beq.n	80067a8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fe73 	bl	800747a <UART_EndTransmit_IT>
    return;
 8006794:	e008      	b.n	80067a8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006796:	bf00      	nop
 8006798:	e006      	b.n	80067a8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800679a:	bf00      	nop
 800679c:	e004      	b.n	80067a8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800679e:	bf00      	nop
 80067a0:	e002      	b.n	80067a8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80067a2:	bf00      	nop
 80067a4:	e000      	b.n	80067a8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80067a6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80067a8:	37e8      	adds	r7, #232	; 0xe8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop

080067b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006808:	b08a      	sub	sp, #40	; 0x28
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	431a      	orrs	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	431a      	orrs	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	4313      	orrs	r3, r2
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b9e      	ldr	r3, [pc, #632]	; (8006aac <UART_SetConfig+0x2a8>)
 8006834:	4013      	ands	r3, r2
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800683c:	430b      	orrs	r3, r1
 800683e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a93      	ldr	r2, [pc, #588]	; (8006ab0 <UART_SetConfig+0x2ac>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686c:	4313      	orrs	r3, r2
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006880:	430a      	orrs	r2, r1
 8006882:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a8a      	ldr	r2, [pc, #552]	; (8006ab4 <UART_SetConfig+0x2b0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d126      	bne.n	80068dc <UART_SetConfig+0xd8>
 800688e:	4b8a      	ldr	r3, [pc, #552]	; (8006ab8 <UART_SetConfig+0x2b4>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	2b03      	cmp	r3, #3
 800689a:	d81b      	bhi.n	80068d4 <UART_SetConfig+0xd0>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <UART_SetConfig+0xa0>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c5 	.word	0x080068c5
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068cd 	.word	0x080068cd
 80068b4:	2301      	movs	r3, #1
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ba:	e0ab      	b.n	8006a14 <UART_SetConfig+0x210>
 80068bc:	2302      	movs	r3, #2
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c2:	e0a7      	b.n	8006a14 <UART_SetConfig+0x210>
 80068c4:	2304      	movs	r3, #4
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ca:	e0a3      	b.n	8006a14 <UART_SetConfig+0x210>
 80068cc:	2308      	movs	r3, #8
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d2:	e09f      	b.n	8006a14 <UART_SetConfig+0x210>
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068da:	e09b      	b.n	8006a14 <UART_SetConfig+0x210>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a76      	ldr	r2, [pc, #472]	; (8006abc <UART_SetConfig+0x2b8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d138      	bne.n	8006958 <UART_SetConfig+0x154>
 80068e6:	4b74      	ldr	r3, [pc, #464]	; (8006ab8 <UART_SetConfig+0x2b4>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ec:	f003 030c 	and.w	r3, r3, #12
 80068f0:	2b0c      	cmp	r3, #12
 80068f2:	d82d      	bhi.n	8006950 <UART_SetConfig+0x14c>
 80068f4:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0xf8>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	08006931 	.word	0x08006931
 8006900:	08006951 	.word	0x08006951
 8006904:	08006951 	.word	0x08006951
 8006908:	08006951 	.word	0x08006951
 800690c:	08006941 	.word	0x08006941
 8006910:	08006951 	.word	0x08006951
 8006914:	08006951 	.word	0x08006951
 8006918:	08006951 	.word	0x08006951
 800691c:	08006939 	.word	0x08006939
 8006920:	08006951 	.word	0x08006951
 8006924:	08006951 	.word	0x08006951
 8006928:	08006951 	.word	0x08006951
 800692c:	08006949 	.word	0x08006949
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006936:	e06d      	b.n	8006a14 <UART_SetConfig+0x210>
 8006938:	2302      	movs	r3, #2
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e069      	b.n	8006a14 <UART_SetConfig+0x210>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e065      	b.n	8006a14 <UART_SetConfig+0x210>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e061      	b.n	8006a14 <UART_SetConfig+0x210>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006956:	e05d      	b.n	8006a14 <UART_SetConfig+0x210>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a58      	ldr	r2, [pc, #352]	; (8006ac0 <UART_SetConfig+0x2bc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d125      	bne.n	80069ae <UART_SetConfig+0x1aa>
 8006962:	4b55      	ldr	r3, [pc, #340]	; (8006ab8 <UART_SetConfig+0x2b4>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800696c:	2b30      	cmp	r3, #48	; 0x30
 800696e:	d016      	beq.n	800699e <UART_SetConfig+0x19a>
 8006970:	2b30      	cmp	r3, #48	; 0x30
 8006972:	d818      	bhi.n	80069a6 <UART_SetConfig+0x1a2>
 8006974:	2b20      	cmp	r3, #32
 8006976:	d00a      	beq.n	800698e <UART_SetConfig+0x18a>
 8006978:	2b20      	cmp	r3, #32
 800697a:	d814      	bhi.n	80069a6 <UART_SetConfig+0x1a2>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <UART_SetConfig+0x182>
 8006980:	2b10      	cmp	r3, #16
 8006982:	d008      	beq.n	8006996 <UART_SetConfig+0x192>
 8006984:	e00f      	b.n	80069a6 <UART_SetConfig+0x1a2>
 8006986:	2300      	movs	r3, #0
 8006988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698c:	e042      	b.n	8006a14 <UART_SetConfig+0x210>
 800698e:	2302      	movs	r3, #2
 8006990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006994:	e03e      	b.n	8006a14 <UART_SetConfig+0x210>
 8006996:	2304      	movs	r3, #4
 8006998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699c:	e03a      	b.n	8006a14 <UART_SetConfig+0x210>
 800699e:	2308      	movs	r3, #8
 80069a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a4:	e036      	b.n	8006a14 <UART_SetConfig+0x210>
 80069a6:	2310      	movs	r3, #16
 80069a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ac:	e032      	b.n	8006a14 <UART_SetConfig+0x210>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a3f      	ldr	r2, [pc, #252]	; (8006ab0 <UART_SetConfig+0x2ac>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d12a      	bne.n	8006a0e <UART_SetConfig+0x20a>
 80069b8:	4b3f      	ldr	r3, [pc, #252]	; (8006ab8 <UART_SetConfig+0x2b4>)
 80069ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c6:	d01a      	beq.n	80069fe <UART_SetConfig+0x1fa>
 80069c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069cc:	d81b      	bhi.n	8006a06 <UART_SetConfig+0x202>
 80069ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d2:	d00c      	beq.n	80069ee <UART_SetConfig+0x1ea>
 80069d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d8:	d815      	bhi.n	8006a06 <UART_SetConfig+0x202>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <UART_SetConfig+0x1e2>
 80069de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e2:	d008      	beq.n	80069f6 <UART_SetConfig+0x1f2>
 80069e4:	e00f      	b.n	8006a06 <UART_SetConfig+0x202>
 80069e6:	2300      	movs	r3, #0
 80069e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ec:	e012      	b.n	8006a14 <UART_SetConfig+0x210>
 80069ee:	2302      	movs	r3, #2
 80069f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f4:	e00e      	b.n	8006a14 <UART_SetConfig+0x210>
 80069f6:	2304      	movs	r3, #4
 80069f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fc:	e00a      	b.n	8006a14 <UART_SetConfig+0x210>
 80069fe:	2308      	movs	r3, #8
 8006a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a04:	e006      	b.n	8006a14 <UART_SetConfig+0x210>
 8006a06:	2310      	movs	r3, #16
 8006a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0c:	e002      	b.n	8006a14 <UART_SetConfig+0x210>
 8006a0e:	2310      	movs	r3, #16
 8006a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a25      	ldr	r2, [pc, #148]	; (8006ab0 <UART_SetConfig+0x2ac>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	f040 808a 	bne.w	8006b34 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d824      	bhi.n	8006a72 <UART_SetConfig+0x26e>
 8006a28:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <UART_SetConfig+0x22c>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a73 	.word	0x08006a73
 8006a38:	08006a5d 	.word	0x08006a5d
 8006a3c:	08006a73 	.word	0x08006a73
 8006a40:	08006a63 	.word	0x08006a63
 8006a44:	08006a73 	.word	0x08006a73
 8006a48:	08006a73 	.word	0x08006a73
 8006a4c:	08006a73 	.word	0x08006a73
 8006a50:	08006a6b 	.word	0x08006a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7fe fdde 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8006a58:	61f8      	str	r0, [r7, #28]
        break;
 8006a5a:	e010      	b.n	8006a7e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a5c:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <UART_SetConfig+0x2c0>)
 8006a5e:	61fb      	str	r3, [r7, #28]
        break;
 8006a60:	e00d      	b.n	8006a7e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a62:	f7fe fd41 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 8006a66:	61f8      	str	r0, [r7, #28]
        break;
 8006a68:	e009      	b.n	8006a7e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6e:	61fb      	str	r3, [r7, #28]
        break;
 8006a70:	e005      	b.n	8006a7e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8109 	beq.w	8006c98 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	4413      	add	r3, r2
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d305      	bcc.n	8006aa2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d912      	bls.n	8006ac8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006aa8:	e0f6      	b.n	8006c98 <UART_SetConfig+0x494>
 8006aaa:	bf00      	nop
 8006aac:	efff69f3 	.word	0xefff69f3
 8006ab0:	40008000 	.word	0x40008000
 8006ab4:	40013800 	.word	0x40013800
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	40004400 	.word	0x40004400
 8006ac0:	40004800 	.word	0x40004800
 8006ac4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	2200      	movs	r2, #0
 8006acc:	461c      	mov	r4, r3
 8006ace:	4615      	mov	r5, r2
 8006ad0:	f04f 0200 	mov.w	r2, #0
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	022b      	lsls	r3, r5, #8
 8006ada:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ade:	0222      	lsls	r2, r4, #8
 8006ae0:	68f9      	ldr	r1, [r7, #12]
 8006ae2:	6849      	ldr	r1, [r1, #4]
 8006ae4:	0849      	lsrs	r1, r1, #1
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	4688      	mov	r8, r1
 8006aea:	4681      	mov	r9, r0
 8006aec:	eb12 0a08 	adds.w	sl, r2, r8
 8006af0:	eb43 0b09 	adc.w	fp, r3, r9
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b02:	4650      	mov	r0, sl
 8006b04:	4659      	mov	r1, fp
 8006b06:	f7fa f89f 	bl	8000c48 <__aeabi_uldivmod>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4613      	mov	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b18:	d308      	bcc.n	8006b2c <UART_SetConfig+0x328>
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b20:	d204      	bcs.n	8006b2c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	e0b5      	b.n	8006c98 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b32:	e0b1      	b.n	8006c98 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3c:	d15d      	bne.n	8006bfa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	d827      	bhi.n	8006b96 <UART_SetConfig+0x392>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <UART_SetConfig+0x348>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b71 	.word	0x08006b71
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b81 	.word	0x08006b81
 8006b58:	08006b97 	.word	0x08006b97
 8006b5c:	08006b87 	.word	0x08006b87
 8006b60:	08006b97 	.word	0x08006b97
 8006b64:	08006b97 	.word	0x08006b97
 8006b68:	08006b97 	.word	0x08006b97
 8006b6c:	08006b8f 	.word	0x08006b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b70:	f7fe fd50 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8006b74:	61f8      	str	r0, [r7, #28]
        break;
 8006b76:	e014      	b.n	8006ba2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b78:	f7fe fd62 	bl	8005640 <HAL_RCC_GetPCLK2Freq>
 8006b7c:	61f8      	str	r0, [r7, #28]
        break;
 8006b7e:	e010      	b.n	8006ba2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b80:	4b4c      	ldr	r3, [pc, #304]	; (8006cb4 <UART_SetConfig+0x4b0>)
 8006b82:	61fb      	str	r3, [r7, #28]
        break;
 8006b84:	e00d      	b.n	8006ba2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b86:	f7fe fcaf 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 8006b8a:	61f8      	str	r0, [r7, #28]
        break;
 8006b8c:	e009      	b.n	8006ba2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b92:	61fb      	str	r3, [r7, #28]
        break;
 8006b94:	e005      	b.n	8006ba2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d077      	beq.n	8006c98 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	005a      	lsls	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	085b      	lsrs	r3, r3, #1
 8006bb2:	441a      	add	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b0f      	cmp	r3, #15
 8006bc2:	d916      	bls.n	8006bf2 <UART_SetConfig+0x3ee>
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bca:	d212      	bcs.n	8006bf2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f023 030f 	bic.w	r3, r3, #15
 8006bd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	085b      	lsrs	r3, r3, #1
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	8afb      	ldrh	r3, [r7, #22]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	8afa      	ldrh	r2, [r7, #22]
 8006bee:	60da      	str	r2, [r3, #12]
 8006bf0:	e052      	b.n	8006c98 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bf8:	e04e      	b.n	8006c98 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d827      	bhi.n	8006c52 <UART_SetConfig+0x44e>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <UART_SetConfig+0x404>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c2d 	.word	0x08006c2d
 8006c0c:	08006c35 	.word	0x08006c35
 8006c10:	08006c3d 	.word	0x08006c3d
 8006c14:	08006c53 	.word	0x08006c53
 8006c18:	08006c43 	.word	0x08006c43
 8006c1c:	08006c53 	.word	0x08006c53
 8006c20:	08006c53 	.word	0x08006c53
 8006c24:	08006c53 	.word	0x08006c53
 8006c28:	08006c4b 	.word	0x08006c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c2c:	f7fe fcf2 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8006c30:	61f8      	str	r0, [r7, #28]
        break;
 8006c32:	e014      	b.n	8006c5e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c34:	f7fe fd04 	bl	8005640 <HAL_RCC_GetPCLK2Freq>
 8006c38:	61f8      	str	r0, [r7, #28]
        break;
 8006c3a:	e010      	b.n	8006c5e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <UART_SetConfig+0x4b0>)
 8006c3e:	61fb      	str	r3, [r7, #28]
        break;
 8006c40:	e00d      	b.n	8006c5e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c42:	f7fe fc51 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 8006c46:	61f8      	str	r0, [r7, #28]
        break;
 8006c48:	e009      	b.n	8006c5e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4e:	61fb      	str	r3, [r7, #28]
        break;
 8006c50:	e005      	b.n	8006c5e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c5c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d019      	beq.n	8006c98 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	085a      	lsrs	r2, r3, #1
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	441a      	add	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d909      	bls.n	8006c92 <UART_SetConfig+0x48e>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d205      	bcs.n	8006c92 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60da      	str	r2, [r3, #12]
 8006c90:	e002      	b.n	8006c98 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ca4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3728      	adds	r7, #40	; 0x28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb2:	bf00      	nop
 8006cb4:	00f42400 	.word	0x00f42400

08006cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01a      	beq.n	8006dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006db6:	d10a      	bne.n	8006dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	605a      	str	r2, [r3, #4]
  }
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e0c:	f7fb fe2c 	bl	8002a68 <HAL_GetTick>
 8006e10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d10e      	bne.n	8006e3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f82d 	bl	8006e8e <UART_WaitOnFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e023      	b.n	8006e86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d10e      	bne.n	8006e6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f817 	bl	8006e8e <UART_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e00d      	b.n	8006e86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b09c      	sub	sp, #112	; 0x70
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	603b      	str	r3, [r7, #0]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9e:	e0a5      	b.n	8006fec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea6:	f000 80a1 	beq.w	8006fec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eaa:	f7fb fddd 	bl	8002a68 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d302      	bcc.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d13e      	bne.n	8006f3e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ee0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e6      	bne.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	f023 0301 	bic.w	r3, r3, #1
 8006f08:	663b      	str	r3, [r7, #96]	; 0x60
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f12:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e067      	b.n	800700e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d04f      	beq.n	8006fec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5a:	d147      	bne.n	8006fec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f64:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
 8006f86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e6      	bne.n	8006f66 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fb8:	623a      	str	r2, [r7, #32]
 8006fba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	69f9      	ldr	r1, [r7, #28]
 8006fbe:	6a3a      	ldr	r2, [r7, #32]
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e5      	bne.n	8006f98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e010      	b.n	800700e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69da      	ldr	r2, [r3, #28]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	bf0c      	ite	eq
 8006ffc:	2301      	moveq	r3, #1
 8006ffe:	2300      	movne	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	429a      	cmp	r2, r3
 8007008:	f43f af4a 	beq.w	8006ea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3770      	adds	r7, #112	; 0x70
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b096      	sub	sp, #88	; 0x58
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	4613      	mov	r3, r2
 8007024:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	88fa      	ldrh	r2, [r7, #6]
 8007030:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2222      	movs	r2, #34	; 0x22
 8007040:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	2b00      	cmp	r3, #0
 8007048:	d02b      	beq.n	80070a2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704e:	4a42      	ldr	r2, [pc, #264]	; (8007158 <UART_Start_Receive_DMA+0x140>)
 8007050:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007056:	4a41      	ldr	r2, [pc, #260]	; (800715c <UART_Start_Receive_DMA+0x144>)
 8007058:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	4a40      	ldr	r2, [pc, #256]	; (8007160 <UART_Start_Receive_DMA+0x148>)
 8007060:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	2200      	movs	r2, #0
 8007068:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3324      	adds	r3, #36	; 0x24
 8007074:	4619      	mov	r1, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707a:	461a      	mov	r2, r3
 800707c:	88fb      	ldrh	r3, [r7, #6]
 800707e:	f7fc fc7e 	bl	800397e <HAL_DMA_Start_IT>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00c      	beq.n	80070a2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2210      	movs	r2, #16
 800708c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e055      	b.n	800714e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d018      	beq.n	80070e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070c6:	657b      	str	r3, [r7, #84]	; 0x54
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070d8:	e841 2300 	strex	r3, r2, [r1]
 80070dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e6      	bne.n	80070b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	653b      	str	r3, [r7, #80]	; 0x50
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3308      	adds	r3, #8
 8007102:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007104:	637a      	str	r2, [r7, #52]	; 0x34
 8007106:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800710a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e5      	bne.n	80070e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	613b      	str	r3, [r7, #16]
   return(result);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800712e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007138:	623a      	str	r2, [r7, #32]
 800713a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	69f9      	ldr	r1, [r7, #28]
 800713e:	6a3a      	ldr	r2, [r7, #32]
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	61bb      	str	r3, [r7, #24]
   return(result);
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3758      	adds	r7, #88	; 0x58
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	08007277 	.word	0x08007277
 800715c:	0800739b 	.word	0x0800739b
 8007160:	080073d3 	.word	0x080073d3

08007164 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b089      	sub	sp, #36	; 0x24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	60bb      	str	r3, [r7, #8]
   return(result);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007180:	61fb      	str	r3, [r7, #28]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	61bb      	str	r3, [r7, #24]
 800718c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6979      	ldr	r1, [r7, #20]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	613b      	str	r3, [r7, #16]
   return(result);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e6      	bne.n	800716c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80071a4:	bf00      	nop
 80071a6:	3724      	adds	r7, #36	; 0x24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b095      	sub	sp, #84	; 0x54
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d6:	643b      	str	r3, [r7, #64]	; 0x40
 80071d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e6      	bne.n	80071b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	64bb      	str	r3, [r7, #72]	; 0x48
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e5      	bne.n	80071ea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007222:	2b01      	cmp	r3, #1
 8007224:	d118      	bne.n	8007258 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60bb      	str	r3, [r7, #8]
   return(result);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	647b      	str	r3, [r7, #68]	; 0x44
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	461a      	mov	r2, r3
 8007242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	6979      	ldr	r1, [r7, #20]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	613b      	str	r3, [r7, #16]
   return(result);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e6      	bne.n	8007226 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	665a      	str	r2, [r3, #100]	; 0x64
}
 800726a:	bf00      	nop
 800726c:	3754      	adds	r7, #84	; 0x54
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b09c      	sub	sp, #112	; 0x70
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d170      	bne.n	8007374 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8007292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007294:	2200      	movs	r2, #0
 8007296:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800729a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a2:	e853 3f00 	ldrex	r3, [r3]
 80072a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80072b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80072ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e6      	bne.n	800729a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3308      	adds	r3, #8
 80072d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	f023 0301 	bic.w	r3, r3, #1
 80072e2:	667b      	str	r3, [r7, #100]	; 0x64
 80072e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072ec:	647a      	str	r2, [r7, #68]	; 0x44
 80072ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	623b      	str	r3, [r7, #32]
   return(result);
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007316:	663b      	str	r3, [r7, #96]	; 0x60
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007320:	633a      	str	r2, [r7, #48]	; 0x30
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007336:	2220      	movs	r2, #32
 8007338:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800733c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733e:	2b01      	cmp	r3, #1
 8007340:	d118      	bne.n	8007374 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0310 	bic.w	r3, r3, #16
 8007356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007360:	61fb      	str	r3, [r7, #28]
 8007362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	69b9      	ldr	r1, [r7, #24]
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	617b      	str	r3, [r7, #20]
   return(result);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007378:	2b01      	cmp	r3, #1
 800737a:	d107      	bne.n	800738c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800737c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007382:	4619      	mov	r1, r3
 8007384:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007386:	f7ff fa31 	bl	80067ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800738a:	e002      	b.n	8007392 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800738c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800738e:	f7fa f8c1 	bl	8001514 <HAL_UART_RxCpltCallback>
}
 8007392:	bf00      	nop
 8007394:	3770      	adds	r7, #112	; 0x70
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d109      	bne.n	80073c4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	4619      	mov	r1, r3
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7ff fa15 	bl	80067ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073c2:	e002      	b.n	80073ca <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7ff f9fd 	bl	80067c4 <HAL_UART_RxHalfCpltCallback>
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	2b80      	cmp	r3, #128	; 0x80
 80073f8:	d109      	bne.n	800740e <UART_DMAError+0x3c>
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	2b21      	cmp	r3, #33	; 0x21
 80073fe:	d106      	bne.n	800740e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2200      	movs	r2, #0
 8007404:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007408:	6978      	ldr	r0, [r7, #20]
 800740a:	f7ff feab 	bl	8007164 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d109      	bne.n	8007430 <UART_DMAError+0x5e>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b22      	cmp	r3, #34	; 0x22
 8007420:	d106      	bne.n	8007430 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2200      	movs	r2, #0
 8007426:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800742a:	6978      	ldr	r0, [r7, #20]
 800742c:	f7ff fec0 	bl	80071b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007436:	f043 0210 	orr.w	r2, r3, #16
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007440:	6978      	ldr	r0, [r7, #20]
 8007442:	f7ff f9c9 	bl	80067d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7ff f9b3 	bl	80067d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b088      	sub	sp, #32
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007496:	61fb      	str	r3, [r7, #28]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	61bb      	str	r3, [r7, #24]
 80074a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6979      	ldr	r1, [r7, #20]
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	613b      	str	r3, [r7, #16]
   return(result);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff f975 	bl	80067b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c6:	bf00      	nop
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <__errno>:
 80074e4:	4b01      	ldr	r3, [pc, #4]	; (80074ec <__errno+0x8>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	2000001c 	.word	0x2000001c

080074f0 <__libc_init_array>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	4d0d      	ldr	r5, [pc, #52]	; (8007528 <__libc_init_array+0x38>)
 80074f4:	4c0d      	ldr	r4, [pc, #52]	; (800752c <__libc_init_array+0x3c>)
 80074f6:	1b64      	subs	r4, r4, r5
 80074f8:	10a4      	asrs	r4, r4, #2
 80074fa:	2600      	movs	r6, #0
 80074fc:	42a6      	cmp	r6, r4
 80074fe:	d109      	bne.n	8007514 <__libc_init_array+0x24>
 8007500:	4d0b      	ldr	r5, [pc, #44]	; (8007530 <__libc_init_array+0x40>)
 8007502:	4c0c      	ldr	r4, [pc, #48]	; (8007534 <__libc_init_array+0x44>)
 8007504:	f002 ff16 	bl	800a334 <_init>
 8007508:	1b64      	subs	r4, r4, r5
 800750a:	10a4      	asrs	r4, r4, #2
 800750c:	2600      	movs	r6, #0
 800750e:	42a6      	cmp	r6, r4
 8007510:	d105      	bne.n	800751e <__libc_init_array+0x2e>
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	f855 3b04 	ldr.w	r3, [r5], #4
 8007518:	4798      	blx	r3
 800751a:	3601      	adds	r6, #1
 800751c:	e7ee      	b.n	80074fc <__libc_init_array+0xc>
 800751e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007522:	4798      	blx	r3
 8007524:	3601      	adds	r6, #1
 8007526:	e7f2      	b.n	800750e <__libc_init_array+0x1e>
 8007528:	0800c34c 	.word	0x0800c34c
 800752c:	0800c34c 	.word	0x0800c34c
 8007530:	0800c34c 	.word	0x0800c34c
 8007534:	0800c350 	.word	0x0800c350

08007538 <memcpy>:
 8007538:	440a      	add	r2, r1
 800753a:	4291      	cmp	r1, r2
 800753c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007540:	d100      	bne.n	8007544 <memcpy+0xc>
 8007542:	4770      	bx	lr
 8007544:	b510      	push	{r4, lr}
 8007546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800754a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800754e:	4291      	cmp	r1, r2
 8007550:	d1f9      	bne.n	8007546 <memcpy+0xe>
 8007552:	bd10      	pop	{r4, pc}

08007554 <memset>:
 8007554:	4402      	add	r2, r0
 8007556:	4603      	mov	r3, r0
 8007558:	4293      	cmp	r3, r2
 800755a:	d100      	bne.n	800755e <memset+0xa>
 800755c:	4770      	bx	lr
 800755e:	f803 1b01 	strb.w	r1, [r3], #1
 8007562:	e7f9      	b.n	8007558 <memset+0x4>

08007564 <__cvt>:
 8007564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	ec55 4b10 	vmov	r4, r5, d0
 800756c:	2d00      	cmp	r5, #0
 800756e:	460e      	mov	r6, r1
 8007570:	4619      	mov	r1, r3
 8007572:	462b      	mov	r3, r5
 8007574:	bfbb      	ittet	lt
 8007576:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800757a:	461d      	movlt	r5, r3
 800757c:	2300      	movge	r3, #0
 800757e:	232d      	movlt	r3, #45	; 0x2d
 8007580:	700b      	strb	r3, [r1, #0]
 8007582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007584:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007588:	4691      	mov	r9, r2
 800758a:	f023 0820 	bic.w	r8, r3, #32
 800758e:	bfbc      	itt	lt
 8007590:	4622      	movlt	r2, r4
 8007592:	4614      	movlt	r4, r2
 8007594:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007598:	d005      	beq.n	80075a6 <__cvt+0x42>
 800759a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800759e:	d100      	bne.n	80075a2 <__cvt+0x3e>
 80075a0:	3601      	adds	r6, #1
 80075a2:	2102      	movs	r1, #2
 80075a4:	e000      	b.n	80075a8 <__cvt+0x44>
 80075a6:	2103      	movs	r1, #3
 80075a8:	ab03      	add	r3, sp, #12
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	ab02      	add	r3, sp, #8
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	ec45 4b10 	vmov	d0, r4, r5
 80075b4:	4653      	mov	r3, sl
 80075b6:	4632      	mov	r2, r6
 80075b8:	f000 fcfe 	bl	8007fb8 <_dtoa_r>
 80075bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80075c0:	4607      	mov	r7, r0
 80075c2:	d102      	bne.n	80075ca <__cvt+0x66>
 80075c4:	f019 0f01 	tst.w	r9, #1
 80075c8:	d022      	beq.n	8007610 <__cvt+0xac>
 80075ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075ce:	eb07 0906 	add.w	r9, r7, r6
 80075d2:	d110      	bne.n	80075f6 <__cvt+0x92>
 80075d4:	783b      	ldrb	r3, [r7, #0]
 80075d6:	2b30      	cmp	r3, #48	; 0x30
 80075d8:	d10a      	bne.n	80075f0 <__cvt+0x8c>
 80075da:	2200      	movs	r2, #0
 80075dc:	2300      	movs	r3, #0
 80075de:	4620      	mov	r0, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	f7f9 fa71 	bl	8000ac8 <__aeabi_dcmpeq>
 80075e6:	b918      	cbnz	r0, 80075f0 <__cvt+0x8c>
 80075e8:	f1c6 0601 	rsb	r6, r6, #1
 80075ec:	f8ca 6000 	str.w	r6, [sl]
 80075f0:	f8da 3000 	ldr.w	r3, [sl]
 80075f4:	4499      	add	r9, r3
 80075f6:	2200      	movs	r2, #0
 80075f8:	2300      	movs	r3, #0
 80075fa:	4620      	mov	r0, r4
 80075fc:	4629      	mov	r1, r5
 80075fe:	f7f9 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007602:	b108      	cbz	r0, 8007608 <__cvt+0xa4>
 8007604:	f8cd 900c 	str.w	r9, [sp, #12]
 8007608:	2230      	movs	r2, #48	; 0x30
 800760a:	9b03      	ldr	r3, [sp, #12]
 800760c:	454b      	cmp	r3, r9
 800760e:	d307      	bcc.n	8007620 <__cvt+0xbc>
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007614:	1bdb      	subs	r3, r3, r7
 8007616:	4638      	mov	r0, r7
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	b004      	add	sp, #16
 800761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007620:	1c59      	adds	r1, r3, #1
 8007622:	9103      	str	r1, [sp, #12]
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e7f0      	b.n	800760a <__cvt+0xa6>

08007628 <__exponent>:
 8007628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800762a:	4603      	mov	r3, r0
 800762c:	2900      	cmp	r1, #0
 800762e:	bfb8      	it	lt
 8007630:	4249      	neglt	r1, r1
 8007632:	f803 2b02 	strb.w	r2, [r3], #2
 8007636:	bfb4      	ite	lt
 8007638:	222d      	movlt	r2, #45	; 0x2d
 800763a:	222b      	movge	r2, #43	; 0x2b
 800763c:	2909      	cmp	r1, #9
 800763e:	7042      	strb	r2, [r0, #1]
 8007640:	dd2a      	ble.n	8007698 <__exponent+0x70>
 8007642:	f10d 0407 	add.w	r4, sp, #7
 8007646:	46a4      	mov	ip, r4
 8007648:	270a      	movs	r7, #10
 800764a:	46a6      	mov	lr, r4
 800764c:	460a      	mov	r2, r1
 800764e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007652:	fb07 1516 	mls	r5, r7, r6, r1
 8007656:	3530      	adds	r5, #48	; 0x30
 8007658:	2a63      	cmp	r2, #99	; 0x63
 800765a:	f104 34ff 	add.w	r4, r4, #4294967295
 800765e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007662:	4631      	mov	r1, r6
 8007664:	dcf1      	bgt.n	800764a <__exponent+0x22>
 8007666:	3130      	adds	r1, #48	; 0x30
 8007668:	f1ae 0502 	sub.w	r5, lr, #2
 800766c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007670:	1c44      	adds	r4, r0, #1
 8007672:	4629      	mov	r1, r5
 8007674:	4561      	cmp	r1, ip
 8007676:	d30a      	bcc.n	800768e <__exponent+0x66>
 8007678:	f10d 0209 	add.w	r2, sp, #9
 800767c:	eba2 020e 	sub.w	r2, r2, lr
 8007680:	4565      	cmp	r5, ip
 8007682:	bf88      	it	hi
 8007684:	2200      	movhi	r2, #0
 8007686:	4413      	add	r3, r2
 8007688:	1a18      	subs	r0, r3, r0
 800768a:	b003      	add	sp, #12
 800768c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800768e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007692:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007696:	e7ed      	b.n	8007674 <__exponent+0x4c>
 8007698:	2330      	movs	r3, #48	; 0x30
 800769a:	3130      	adds	r1, #48	; 0x30
 800769c:	7083      	strb	r3, [r0, #2]
 800769e:	70c1      	strb	r1, [r0, #3]
 80076a0:	1d03      	adds	r3, r0, #4
 80076a2:	e7f1      	b.n	8007688 <__exponent+0x60>

080076a4 <_printf_float>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	ed2d 8b02 	vpush	{d8}
 80076ac:	b08d      	sub	sp, #52	; 0x34
 80076ae:	460c      	mov	r4, r1
 80076b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80076b4:	4616      	mov	r6, r2
 80076b6:	461f      	mov	r7, r3
 80076b8:	4605      	mov	r5, r0
 80076ba:	f001 fa6b 	bl	8008b94 <_localeconv_r>
 80076be:	f8d0 a000 	ldr.w	sl, [r0]
 80076c2:	4650      	mov	r0, sl
 80076c4:	f7f8 fd84 	bl	80001d0 <strlen>
 80076c8:	2300      	movs	r3, #0
 80076ca:	930a      	str	r3, [sp, #40]	; 0x28
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	9305      	str	r3, [sp, #20]
 80076d0:	f8d8 3000 	ldr.w	r3, [r8]
 80076d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80076d8:	3307      	adds	r3, #7
 80076da:	f023 0307 	bic.w	r3, r3, #7
 80076de:	f103 0208 	add.w	r2, r3, #8
 80076e2:	f8c8 2000 	str.w	r2, [r8]
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80076f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80076fc:	ee08 0a10 	vmov	s16, r0
 8007700:	4b9f      	ldr	r3, [pc, #636]	; (8007980 <_printf_float+0x2dc>)
 8007702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007706:	f04f 32ff 	mov.w	r2, #4294967295
 800770a:	f7f9 fa0f 	bl	8000b2c <__aeabi_dcmpun>
 800770e:	bb88      	cbnz	r0, 8007774 <_printf_float+0xd0>
 8007710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007714:	4b9a      	ldr	r3, [pc, #616]	; (8007980 <_printf_float+0x2dc>)
 8007716:	f04f 32ff 	mov.w	r2, #4294967295
 800771a:	f7f9 f9e9 	bl	8000af0 <__aeabi_dcmple>
 800771e:	bb48      	cbnz	r0, 8007774 <_printf_float+0xd0>
 8007720:	2200      	movs	r2, #0
 8007722:	2300      	movs	r3, #0
 8007724:	4640      	mov	r0, r8
 8007726:	4649      	mov	r1, r9
 8007728:	f7f9 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800772c:	b110      	cbz	r0, 8007734 <_printf_float+0x90>
 800772e:	232d      	movs	r3, #45	; 0x2d
 8007730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007734:	4b93      	ldr	r3, [pc, #588]	; (8007984 <_printf_float+0x2e0>)
 8007736:	4894      	ldr	r0, [pc, #592]	; (8007988 <_printf_float+0x2e4>)
 8007738:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800773c:	bf94      	ite	ls
 800773e:	4698      	movls	r8, r3
 8007740:	4680      	movhi	r8, r0
 8007742:	2303      	movs	r3, #3
 8007744:	6123      	str	r3, [r4, #16]
 8007746:	9b05      	ldr	r3, [sp, #20]
 8007748:	f023 0204 	bic.w	r2, r3, #4
 800774c:	6022      	str	r2, [r4, #0]
 800774e:	f04f 0900 	mov.w	r9, #0
 8007752:	9700      	str	r7, [sp, #0]
 8007754:	4633      	mov	r3, r6
 8007756:	aa0b      	add	r2, sp, #44	; 0x2c
 8007758:	4621      	mov	r1, r4
 800775a:	4628      	mov	r0, r5
 800775c:	f000 f9d8 	bl	8007b10 <_printf_common>
 8007760:	3001      	adds	r0, #1
 8007762:	f040 8090 	bne.w	8007886 <_printf_float+0x1e2>
 8007766:	f04f 30ff 	mov.w	r0, #4294967295
 800776a:	b00d      	add	sp, #52	; 0x34
 800776c:	ecbd 8b02 	vpop	{d8}
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	4642      	mov	r2, r8
 8007776:	464b      	mov	r3, r9
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	f7f9 f9d6 	bl	8000b2c <__aeabi_dcmpun>
 8007780:	b140      	cbz	r0, 8007794 <_printf_float+0xf0>
 8007782:	464b      	mov	r3, r9
 8007784:	2b00      	cmp	r3, #0
 8007786:	bfbc      	itt	lt
 8007788:	232d      	movlt	r3, #45	; 0x2d
 800778a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800778e:	487f      	ldr	r0, [pc, #508]	; (800798c <_printf_float+0x2e8>)
 8007790:	4b7f      	ldr	r3, [pc, #508]	; (8007990 <_printf_float+0x2ec>)
 8007792:	e7d1      	b.n	8007738 <_printf_float+0x94>
 8007794:	6863      	ldr	r3, [r4, #4]
 8007796:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800779a:	9206      	str	r2, [sp, #24]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	d13f      	bne.n	8007820 <_printf_float+0x17c>
 80077a0:	2306      	movs	r3, #6
 80077a2:	6063      	str	r3, [r4, #4]
 80077a4:	9b05      	ldr	r3, [sp, #20]
 80077a6:	6861      	ldr	r1, [r4, #4]
 80077a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077ac:	2300      	movs	r3, #0
 80077ae:	9303      	str	r3, [sp, #12]
 80077b0:	ab0a      	add	r3, sp, #40	; 0x28
 80077b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80077b6:	ab09      	add	r3, sp, #36	; 0x24
 80077b8:	ec49 8b10 	vmov	d0, r8, r9
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	6022      	str	r2, [r4, #0]
 80077c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077c4:	4628      	mov	r0, r5
 80077c6:	f7ff fecd 	bl	8007564 <__cvt>
 80077ca:	9b06      	ldr	r3, [sp, #24]
 80077cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077ce:	2b47      	cmp	r3, #71	; 0x47
 80077d0:	4680      	mov	r8, r0
 80077d2:	d108      	bne.n	80077e6 <_printf_float+0x142>
 80077d4:	1cc8      	adds	r0, r1, #3
 80077d6:	db02      	blt.n	80077de <_printf_float+0x13a>
 80077d8:	6863      	ldr	r3, [r4, #4]
 80077da:	4299      	cmp	r1, r3
 80077dc:	dd41      	ble.n	8007862 <_printf_float+0x1be>
 80077de:	f1ab 0b02 	sub.w	fp, fp, #2
 80077e2:	fa5f fb8b 	uxtb.w	fp, fp
 80077e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077ea:	d820      	bhi.n	800782e <_printf_float+0x18a>
 80077ec:	3901      	subs	r1, #1
 80077ee:	465a      	mov	r2, fp
 80077f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077f4:	9109      	str	r1, [sp, #36]	; 0x24
 80077f6:	f7ff ff17 	bl	8007628 <__exponent>
 80077fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077fc:	1813      	adds	r3, r2, r0
 80077fe:	2a01      	cmp	r2, #1
 8007800:	4681      	mov	r9, r0
 8007802:	6123      	str	r3, [r4, #16]
 8007804:	dc02      	bgt.n	800780c <_printf_float+0x168>
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	07d2      	lsls	r2, r2, #31
 800780a:	d501      	bpl.n	8007810 <_printf_float+0x16c>
 800780c:	3301      	adds	r3, #1
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007814:	2b00      	cmp	r3, #0
 8007816:	d09c      	beq.n	8007752 <_printf_float+0xae>
 8007818:	232d      	movs	r3, #45	; 0x2d
 800781a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800781e:	e798      	b.n	8007752 <_printf_float+0xae>
 8007820:	9a06      	ldr	r2, [sp, #24]
 8007822:	2a47      	cmp	r2, #71	; 0x47
 8007824:	d1be      	bne.n	80077a4 <_printf_float+0x100>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1bc      	bne.n	80077a4 <_printf_float+0x100>
 800782a:	2301      	movs	r3, #1
 800782c:	e7b9      	b.n	80077a2 <_printf_float+0xfe>
 800782e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007832:	d118      	bne.n	8007866 <_printf_float+0x1c2>
 8007834:	2900      	cmp	r1, #0
 8007836:	6863      	ldr	r3, [r4, #4]
 8007838:	dd0b      	ble.n	8007852 <_printf_float+0x1ae>
 800783a:	6121      	str	r1, [r4, #16]
 800783c:	b913      	cbnz	r3, 8007844 <_printf_float+0x1a0>
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	07d0      	lsls	r0, r2, #31
 8007842:	d502      	bpl.n	800784a <_printf_float+0x1a6>
 8007844:	3301      	adds	r3, #1
 8007846:	440b      	add	r3, r1
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	65a1      	str	r1, [r4, #88]	; 0x58
 800784c:	f04f 0900 	mov.w	r9, #0
 8007850:	e7de      	b.n	8007810 <_printf_float+0x16c>
 8007852:	b913      	cbnz	r3, 800785a <_printf_float+0x1b6>
 8007854:	6822      	ldr	r2, [r4, #0]
 8007856:	07d2      	lsls	r2, r2, #31
 8007858:	d501      	bpl.n	800785e <_printf_float+0x1ba>
 800785a:	3302      	adds	r3, #2
 800785c:	e7f4      	b.n	8007848 <_printf_float+0x1a4>
 800785e:	2301      	movs	r3, #1
 8007860:	e7f2      	b.n	8007848 <_printf_float+0x1a4>
 8007862:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007868:	4299      	cmp	r1, r3
 800786a:	db05      	blt.n	8007878 <_printf_float+0x1d4>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	6121      	str	r1, [r4, #16]
 8007870:	07d8      	lsls	r0, r3, #31
 8007872:	d5ea      	bpl.n	800784a <_printf_float+0x1a6>
 8007874:	1c4b      	adds	r3, r1, #1
 8007876:	e7e7      	b.n	8007848 <_printf_float+0x1a4>
 8007878:	2900      	cmp	r1, #0
 800787a:	bfd4      	ite	le
 800787c:	f1c1 0202 	rsble	r2, r1, #2
 8007880:	2201      	movgt	r2, #1
 8007882:	4413      	add	r3, r2
 8007884:	e7e0      	b.n	8007848 <_printf_float+0x1a4>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	055a      	lsls	r2, r3, #21
 800788a:	d407      	bmi.n	800789c <_printf_float+0x1f8>
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	4642      	mov	r2, r8
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	d12c      	bne.n	80078f4 <_printf_float+0x250>
 800789a:	e764      	b.n	8007766 <_printf_float+0xc2>
 800789c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078a0:	f240 80e0 	bls.w	8007a64 <_printf_float+0x3c0>
 80078a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078a8:	2200      	movs	r2, #0
 80078aa:	2300      	movs	r3, #0
 80078ac:	f7f9 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d034      	beq.n	800791e <_printf_float+0x27a>
 80078b4:	4a37      	ldr	r2, [pc, #220]	; (8007994 <_printf_float+0x2f0>)
 80078b6:	2301      	movs	r3, #1
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	47b8      	blx	r7
 80078be:	3001      	adds	r0, #1
 80078c0:	f43f af51 	beq.w	8007766 <_printf_float+0xc2>
 80078c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078c8:	429a      	cmp	r2, r3
 80078ca:	db02      	blt.n	80078d2 <_printf_float+0x22e>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	07d8      	lsls	r0, r3, #31
 80078d0:	d510      	bpl.n	80078f4 <_printf_float+0x250>
 80078d2:	ee18 3a10 	vmov	r3, s16
 80078d6:	4652      	mov	r2, sl
 80078d8:	4631      	mov	r1, r6
 80078da:	4628      	mov	r0, r5
 80078dc:	47b8      	blx	r7
 80078de:	3001      	adds	r0, #1
 80078e0:	f43f af41 	beq.w	8007766 <_printf_float+0xc2>
 80078e4:	f04f 0800 	mov.w	r8, #0
 80078e8:	f104 091a 	add.w	r9, r4, #26
 80078ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ee:	3b01      	subs	r3, #1
 80078f0:	4543      	cmp	r3, r8
 80078f2:	dc09      	bgt.n	8007908 <_printf_float+0x264>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	079b      	lsls	r3, r3, #30
 80078f8:	f100 8105 	bmi.w	8007b06 <_printf_float+0x462>
 80078fc:	68e0      	ldr	r0, [r4, #12]
 80078fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007900:	4298      	cmp	r0, r3
 8007902:	bfb8      	it	lt
 8007904:	4618      	movlt	r0, r3
 8007906:	e730      	b.n	800776a <_printf_float+0xc6>
 8007908:	2301      	movs	r3, #1
 800790a:	464a      	mov	r2, r9
 800790c:	4631      	mov	r1, r6
 800790e:	4628      	mov	r0, r5
 8007910:	47b8      	blx	r7
 8007912:	3001      	adds	r0, #1
 8007914:	f43f af27 	beq.w	8007766 <_printf_float+0xc2>
 8007918:	f108 0801 	add.w	r8, r8, #1
 800791c:	e7e6      	b.n	80078ec <_printf_float+0x248>
 800791e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc39      	bgt.n	8007998 <_printf_float+0x2f4>
 8007924:	4a1b      	ldr	r2, [pc, #108]	; (8007994 <_printf_float+0x2f0>)
 8007926:	2301      	movs	r3, #1
 8007928:	4631      	mov	r1, r6
 800792a:	4628      	mov	r0, r5
 800792c:	47b8      	blx	r7
 800792e:	3001      	adds	r0, #1
 8007930:	f43f af19 	beq.w	8007766 <_printf_float+0xc2>
 8007934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007938:	4313      	orrs	r3, r2
 800793a:	d102      	bne.n	8007942 <_printf_float+0x29e>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	07d9      	lsls	r1, r3, #31
 8007940:	d5d8      	bpl.n	80078f4 <_printf_float+0x250>
 8007942:	ee18 3a10 	vmov	r3, s16
 8007946:	4652      	mov	r2, sl
 8007948:	4631      	mov	r1, r6
 800794a:	4628      	mov	r0, r5
 800794c:	47b8      	blx	r7
 800794e:	3001      	adds	r0, #1
 8007950:	f43f af09 	beq.w	8007766 <_printf_float+0xc2>
 8007954:	f04f 0900 	mov.w	r9, #0
 8007958:	f104 0a1a 	add.w	sl, r4, #26
 800795c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795e:	425b      	negs	r3, r3
 8007960:	454b      	cmp	r3, r9
 8007962:	dc01      	bgt.n	8007968 <_printf_float+0x2c4>
 8007964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007966:	e792      	b.n	800788e <_printf_float+0x1ea>
 8007968:	2301      	movs	r3, #1
 800796a:	4652      	mov	r2, sl
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	47b8      	blx	r7
 8007972:	3001      	adds	r0, #1
 8007974:	f43f aef7 	beq.w	8007766 <_printf_float+0xc2>
 8007978:	f109 0901 	add.w	r9, r9, #1
 800797c:	e7ee      	b.n	800795c <_printf_float+0x2b8>
 800797e:	bf00      	nop
 8007980:	7fefffff 	.word	0x7fefffff
 8007984:	0800bf70 	.word	0x0800bf70
 8007988:	0800bf74 	.word	0x0800bf74
 800798c:	0800bf7c 	.word	0x0800bf7c
 8007990:	0800bf78 	.word	0x0800bf78
 8007994:	0800bf80 	.word	0x0800bf80
 8007998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800799a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800799c:	429a      	cmp	r2, r3
 800799e:	bfa8      	it	ge
 80079a0:	461a      	movge	r2, r3
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	4691      	mov	r9, r2
 80079a6:	dc37      	bgt.n	8007a18 <_printf_float+0x374>
 80079a8:	f04f 0b00 	mov.w	fp, #0
 80079ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079b0:	f104 021a 	add.w	r2, r4, #26
 80079b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079b6:	9305      	str	r3, [sp, #20]
 80079b8:	eba3 0309 	sub.w	r3, r3, r9
 80079bc:	455b      	cmp	r3, fp
 80079be:	dc33      	bgt.n	8007a28 <_printf_float+0x384>
 80079c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079c4:	429a      	cmp	r2, r3
 80079c6:	db3b      	blt.n	8007a40 <_printf_float+0x39c>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	07da      	lsls	r2, r3, #31
 80079cc:	d438      	bmi.n	8007a40 <_printf_float+0x39c>
 80079ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d0:	9a05      	ldr	r2, [sp, #20]
 80079d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079d4:	1a9a      	subs	r2, r3, r2
 80079d6:	eba3 0901 	sub.w	r9, r3, r1
 80079da:	4591      	cmp	r9, r2
 80079dc:	bfa8      	it	ge
 80079de:	4691      	movge	r9, r2
 80079e0:	f1b9 0f00 	cmp.w	r9, #0
 80079e4:	dc35      	bgt.n	8007a52 <_printf_float+0x3ae>
 80079e6:	f04f 0800 	mov.w	r8, #0
 80079ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079ee:	f104 0a1a 	add.w	sl, r4, #26
 80079f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	eba3 0309 	sub.w	r3, r3, r9
 80079fc:	4543      	cmp	r3, r8
 80079fe:	f77f af79 	ble.w	80078f4 <_printf_float+0x250>
 8007a02:	2301      	movs	r3, #1
 8007a04:	4652      	mov	r2, sl
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b8      	blx	r7
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f43f aeaa 	beq.w	8007766 <_printf_float+0xc2>
 8007a12:	f108 0801 	add.w	r8, r8, #1
 8007a16:	e7ec      	b.n	80079f2 <_printf_float+0x34e>
 8007a18:	4613      	mov	r3, r2
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	d1c0      	bne.n	80079a8 <_printf_float+0x304>
 8007a26:	e69e      	b.n	8007766 <_printf_float+0xc2>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	9205      	str	r2, [sp, #20]
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	f43f ae97 	beq.w	8007766 <_printf_float+0xc2>
 8007a38:	9a05      	ldr	r2, [sp, #20]
 8007a3a:	f10b 0b01 	add.w	fp, fp, #1
 8007a3e:	e7b9      	b.n	80079b4 <_printf_float+0x310>
 8007a40:	ee18 3a10 	vmov	r3, s16
 8007a44:	4652      	mov	r2, sl
 8007a46:	4631      	mov	r1, r6
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b8      	blx	r7
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d1be      	bne.n	80079ce <_printf_float+0x32a>
 8007a50:	e689      	b.n	8007766 <_printf_float+0xc2>
 8007a52:	9a05      	ldr	r2, [sp, #20]
 8007a54:	464b      	mov	r3, r9
 8007a56:	4442      	add	r2, r8
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d1c1      	bne.n	80079e6 <_printf_float+0x342>
 8007a62:	e680      	b.n	8007766 <_printf_float+0xc2>
 8007a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a66:	2a01      	cmp	r2, #1
 8007a68:	dc01      	bgt.n	8007a6e <_printf_float+0x3ca>
 8007a6a:	07db      	lsls	r3, r3, #31
 8007a6c:	d538      	bpl.n	8007ae0 <_printf_float+0x43c>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4642      	mov	r2, r8
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f43f ae74 	beq.w	8007766 <_printf_float+0xc2>
 8007a7e:	ee18 3a10 	vmov	r3, s16
 8007a82:	4652      	mov	r2, sl
 8007a84:	4631      	mov	r1, r6
 8007a86:	4628      	mov	r0, r5
 8007a88:	47b8      	blx	r7
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	f43f ae6b 	beq.w	8007766 <_printf_float+0xc2>
 8007a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a94:	2200      	movs	r2, #0
 8007a96:	2300      	movs	r3, #0
 8007a98:	f7f9 f816 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a9c:	b9d8      	cbnz	r0, 8007ad6 <_printf_float+0x432>
 8007a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa0:	f108 0201 	add.w	r2, r8, #1
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	d10e      	bne.n	8007ace <_printf_float+0x42a>
 8007ab0:	e659      	b.n	8007766 <_printf_float+0xc2>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4652      	mov	r2, sl
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	f43f ae52 	beq.w	8007766 <_printf_float+0xc2>
 8007ac2:	f108 0801 	add.w	r8, r8, #1
 8007ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	4543      	cmp	r3, r8
 8007acc:	dcf1      	bgt.n	8007ab2 <_printf_float+0x40e>
 8007ace:	464b      	mov	r3, r9
 8007ad0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ad4:	e6dc      	b.n	8007890 <_printf_float+0x1ec>
 8007ad6:	f04f 0800 	mov.w	r8, #0
 8007ada:	f104 0a1a 	add.w	sl, r4, #26
 8007ade:	e7f2      	b.n	8007ac6 <_printf_float+0x422>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	4642      	mov	r2, r8
 8007ae4:	e7df      	b.n	8007aa6 <_printf_float+0x402>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	464a      	mov	r2, r9
 8007aea:	4631      	mov	r1, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	f43f ae38 	beq.w	8007766 <_printf_float+0xc2>
 8007af6:	f108 0801 	add.w	r8, r8, #1
 8007afa:	68e3      	ldr	r3, [r4, #12]
 8007afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007afe:	1a5b      	subs	r3, r3, r1
 8007b00:	4543      	cmp	r3, r8
 8007b02:	dcf0      	bgt.n	8007ae6 <_printf_float+0x442>
 8007b04:	e6fa      	b.n	80078fc <_printf_float+0x258>
 8007b06:	f04f 0800 	mov.w	r8, #0
 8007b0a:	f104 0919 	add.w	r9, r4, #25
 8007b0e:	e7f4      	b.n	8007afa <_printf_float+0x456>

08007b10 <_printf_common>:
 8007b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b14:	4616      	mov	r6, r2
 8007b16:	4699      	mov	r9, r3
 8007b18:	688a      	ldr	r2, [r1, #8]
 8007b1a:	690b      	ldr	r3, [r1, #16]
 8007b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b20:	4293      	cmp	r3, r2
 8007b22:	bfb8      	it	lt
 8007b24:	4613      	movlt	r3, r2
 8007b26:	6033      	str	r3, [r6, #0]
 8007b28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	b10a      	cbz	r2, 8007b36 <_printf_common+0x26>
 8007b32:	3301      	adds	r3, #1
 8007b34:	6033      	str	r3, [r6, #0]
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	0699      	lsls	r1, r3, #26
 8007b3a:	bf42      	ittt	mi
 8007b3c:	6833      	ldrmi	r3, [r6, #0]
 8007b3e:	3302      	addmi	r3, #2
 8007b40:	6033      	strmi	r3, [r6, #0]
 8007b42:	6825      	ldr	r5, [r4, #0]
 8007b44:	f015 0506 	ands.w	r5, r5, #6
 8007b48:	d106      	bne.n	8007b58 <_printf_common+0x48>
 8007b4a:	f104 0a19 	add.w	sl, r4, #25
 8007b4e:	68e3      	ldr	r3, [r4, #12]
 8007b50:	6832      	ldr	r2, [r6, #0]
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	42ab      	cmp	r3, r5
 8007b56:	dc26      	bgt.n	8007ba6 <_printf_common+0x96>
 8007b58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b5c:	1e13      	subs	r3, r2, #0
 8007b5e:	6822      	ldr	r2, [r4, #0]
 8007b60:	bf18      	it	ne
 8007b62:	2301      	movne	r3, #1
 8007b64:	0692      	lsls	r2, r2, #26
 8007b66:	d42b      	bmi.n	8007bc0 <_printf_common+0xb0>
 8007b68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	4638      	mov	r0, r7
 8007b70:	47c0      	blx	r8
 8007b72:	3001      	adds	r0, #1
 8007b74:	d01e      	beq.n	8007bb4 <_printf_common+0xa4>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	68e5      	ldr	r5, [r4, #12]
 8007b7a:	6832      	ldr	r2, [r6, #0]
 8007b7c:	f003 0306 	and.w	r3, r3, #6
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	bf08      	it	eq
 8007b84:	1aad      	subeq	r5, r5, r2
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	6922      	ldr	r2, [r4, #16]
 8007b8a:	bf0c      	ite	eq
 8007b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b90:	2500      	movne	r5, #0
 8007b92:	4293      	cmp	r3, r2
 8007b94:	bfc4      	itt	gt
 8007b96:	1a9b      	subgt	r3, r3, r2
 8007b98:	18ed      	addgt	r5, r5, r3
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	341a      	adds	r4, #26
 8007b9e:	42b5      	cmp	r5, r6
 8007ba0:	d11a      	bne.n	8007bd8 <_printf_common+0xc8>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e008      	b.n	8007bb8 <_printf_common+0xa8>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4652      	mov	r2, sl
 8007baa:	4649      	mov	r1, r9
 8007bac:	4638      	mov	r0, r7
 8007bae:	47c0      	blx	r8
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d103      	bne.n	8007bbc <_printf_common+0xac>
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	e7c6      	b.n	8007b4e <_printf_common+0x3e>
 8007bc0:	18e1      	adds	r1, r4, r3
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	2030      	movs	r0, #48	; 0x30
 8007bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bca:	4422      	add	r2, r4
 8007bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	e7c7      	b.n	8007b68 <_printf_common+0x58>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4622      	mov	r2, r4
 8007bdc:	4649      	mov	r1, r9
 8007bde:	4638      	mov	r0, r7
 8007be0:	47c0      	blx	r8
 8007be2:	3001      	adds	r0, #1
 8007be4:	d0e6      	beq.n	8007bb4 <_printf_common+0xa4>
 8007be6:	3601      	adds	r6, #1
 8007be8:	e7d9      	b.n	8007b9e <_printf_common+0x8e>
	...

08007bec <_printf_i>:
 8007bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	7e0f      	ldrb	r7, [r1, #24]
 8007bf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bf4:	2f78      	cmp	r7, #120	; 0x78
 8007bf6:	4691      	mov	r9, r2
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	469a      	mov	sl, r3
 8007bfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c02:	d807      	bhi.n	8007c14 <_printf_i+0x28>
 8007c04:	2f62      	cmp	r7, #98	; 0x62
 8007c06:	d80a      	bhi.n	8007c1e <_printf_i+0x32>
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	f000 80d8 	beq.w	8007dbe <_printf_i+0x1d2>
 8007c0e:	2f58      	cmp	r7, #88	; 0x58
 8007c10:	f000 80a3 	beq.w	8007d5a <_printf_i+0x16e>
 8007c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c1c:	e03a      	b.n	8007c94 <_printf_i+0xa8>
 8007c1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c22:	2b15      	cmp	r3, #21
 8007c24:	d8f6      	bhi.n	8007c14 <_printf_i+0x28>
 8007c26:	a101      	add	r1, pc, #4	; (adr r1, 8007c2c <_printf_i+0x40>)
 8007c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c2c:	08007c85 	.word	0x08007c85
 8007c30:	08007c99 	.word	0x08007c99
 8007c34:	08007c15 	.word	0x08007c15
 8007c38:	08007c15 	.word	0x08007c15
 8007c3c:	08007c15 	.word	0x08007c15
 8007c40:	08007c15 	.word	0x08007c15
 8007c44:	08007c99 	.word	0x08007c99
 8007c48:	08007c15 	.word	0x08007c15
 8007c4c:	08007c15 	.word	0x08007c15
 8007c50:	08007c15 	.word	0x08007c15
 8007c54:	08007c15 	.word	0x08007c15
 8007c58:	08007da5 	.word	0x08007da5
 8007c5c:	08007cc9 	.word	0x08007cc9
 8007c60:	08007d87 	.word	0x08007d87
 8007c64:	08007c15 	.word	0x08007c15
 8007c68:	08007c15 	.word	0x08007c15
 8007c6c:	08007dc7 	.word	0x08007dc7
 8007c70:	08007c15 	.word	0x08007c15
 8007c74:	08007cc9 	.word	0x08007cc9
 8007c78:	08007c15 	.word	0x08007c15
 8007c7c:	08007c15 	.word	0x08007c15
 8007c80:	08007d8f 	.word	0x08007d8f
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	1d1a      	adds	r2, r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	602a      	str	r2, [r5, #0]
 8007c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c94:	2301      	movs	r3, #1
 8007c96:	e0a3      	b.n	8007de0 <_printf_i+0x1f4>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	6829      	ldr	r1, [r5, #0]
 8007c9c:	0606      	lsls	r6, r0, #24
 8007c9e:	f101 0304 	add.w	r3, r1, #4
 8007ca2:	d50a      	bpl.n	8007cba <_printf_i+0xce>
 8007ca4:	680e      	ldr	r6, [r1, #0]
 8007ca6:	602b      	str	r3, [r5, #0]
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	da03      	bge.n	8007cb4 <_printf_i+0xc8>
 8007cac:	232d      	movs	r3, #45	; 0x2d
 8007cae:	4276      	negs	r6, r6
 8007cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb4:	485e      	ldr	r0, [pc, #376]	; (8007e30 <_printf_i+0x244>)
 8007cb6:	230a      	movs	r3, #10
 8007cb8:	e019      	b.n	8007cee <_printf_i+0x102>
 8007cba:	680e      	ldr	r6, [r1, #0]
 8007cbc:	602b      	str	r3, [r5, #0]
 8007cbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cc2:	bf18      	it	ne
 8007cc4:	b236      	sxthne	r6, r6
 8007cc6:	e7ef      	b.n	8007ca8 <_printf_i+0xbc>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	6820      	ldr	r0, [r4, #0]
 8007ccc:	1d19      	adds	r1, r3, #4
 8007cce:	6029      	str	r1, [r5, #0]
 8007cd0:	0601      	lsls	r1, r0, #24
 8007cd2:	d501      	bpl.n	8007cd8 <_printf_i+0xec>
 8007cd4:	681e      	ldr	r6, [r3, #0]
 8007cd6:	e002      	b.n	8007cde <_printf_i+0xf2>
 8007cd8:	0646      	lsls	r6, r0, #25
 8007cda:	d5fb      	bpl.n	8007cd4 <_printf_i+0xe8>
 8007cdc:	881e      	ldrh	r6, [r3, #0]
 8007cde:	4854      	ldr	r0, [pc, #336]	; (8007e30 <_printf_i+0x244>)
 8007ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ce2:	bf0c      	ite	eq
 8007ce4:	2308      	moveq	r3, #8
 8007ce6:	230a      	movne	r3, #10
 8007ce8:	2100      	movs	r1, #0
 8007cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cee:	6865      	ldr	r5, [r4, #4]
 8007cf0:	60a5      	str	r5, [r4, #8]
 8007cf2:	2d00      	cmp	r5, #0
 8007cf4:	bfa2      	ittt	ge
 8007cf6:	6821      	ldrge	r1, [r4, #0]
 8007cf8:	f021 0104 	bicge.w	r1, r1, #4
 8007cfc:	6021      	strge	r1, [r4, #0]
 8007cfe:	b90e      	cbnz	r6, 8007d04 <_printf_i+0x118>
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	d04d      	beq.n	8007da0 <_printf_i+0x1b4>
 8007d04:	4615      	mov	r5, r2
 8007d06:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d0a:	fb03 6711 	mls	r7, r3, r1, r6
 8007d0e:	5dc7      	ldrb	r7, [r0, r7]
 8007d10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d14:	4637      	mov	r7, r6
 8007d16:	42bb      	cmp	r3, r7
 8007d18:	460e      	mov	r6, r1
 8007d1a:	d9f4      	bls.n	8007d06 <_printf_i+0x11a>
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d10b      	bne.n	8007d38 <_printf_i+0x14c>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	07de      	lsls	r6, r3, #31
 8007d24:	d508      	bpl.n	8007d38 <_printf_i+0x14c>
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	6861      	ldr	r1, [r4, #4]
 8007d2a:	4299      	cmp	r1, r3
 8007d2c:	bfde      	ittt	le
 8007d2e:	2330      	movle	r3, #48	; 0x30
 8007d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d38:	1b52      	subs	r2, r2, r5
 8007d3a:	6122      	str	r2, [r4, #16]
 8007d3c:	f8cd a000 	str.w	sl, [sp]
 8007d40:	464b      	mov	r3, r9
 8007d42:	aa03      	add	r2, sp, #12
 8007d44:	4621      	mov	r1, r4
 8007d46:	4640      	mov	r0, r8
 8007d48:	f7ff fee2 	bl	8007b10 <_printf_common>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d14c      	bne.n	8007dea <_printf_i+0x1fe>
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	b004      	add	sp, #16
 8007d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5a:	4835      	ldr	r0, [pc, #212]	; (8007e30 <_printf_i+0x244>)
 8007d5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d60:	6829      	ldr	r1, [r5, #0]
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d68:	6029      	str	r1, [r5, #0]
 8007d6a:	061d      	lsls	r5, r3, #24
 8007d6c:	d514      	bpl.n	8007d98 <_printf_i+0x1ac>
 8007d6e:	07df      	lsls	r7, r3, #31
 8007d70:	bf44      	itt	mi
 8007d72:	f043 0320 	orrmi.w	r3, r3, #32
 8007d76:	6023      	strmi	r3, [r4, #0]
 8007d78:	b91e      	cbnz	r6, 8007d82 <_printf_i+0x196>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	f023 0320 	bic.w	r3, r3, #32
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	2310      	movs	r3, #16
 8007d84:	e7b0      	b.n	8007ce8 <_printf_i+0xfc>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	f043 0320 	orr.w	r3, r3, #32
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	2378      	movs	r3, #120	; 0x78
 8007d90:	4828      	ldr	r0, [pc, #160]	; (8007e34 <_printf_i+0x248>)
 8007d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d96:	e7e3      	b.n	8007d60 <_printf_i+0x174>
 8007d98:	0659      	lsls	r1, r3, #25
 8007d9a:	bf48      	it	mi
 8007d9c:	b2b6      	uxthmi	r6, r6
 8007d9e:	e7e6      	b.n	8007d6e <_printf_i+0x182>
 8007da0:	4615      	mov	r5, r2
 8007da2:	e7bb      	b.n	8007d1c <_printf_i+0x130>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	6826      	ldr	r6, [r4, #0]
 8007da8:	6961      	ldr	r1, [r4, #20]
 8007daa:	1d18      	adds	r0, r3, #4
 8007dac:	6028      	str	r0, [r5, #0]
 8007dae:	0635      	lsls	r5, r6, #24
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	d501      	bpl.n	8007db8 <_printf_i+0x1cc>
 8007db4:	6019      	str	r1, [r3, #0]
 8007db6:	e002      	b.n	8007dbe <_printf_i+0x1d2>
 8007db8:	0670      	lsls	r0, r6, #25
 8007dba:	d5fb      	bpl.n	8007db4 <_printf_i+0x1c8>
 8007dbc:	8019      	strh	r1, [r3, #0]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	4615      	mov	r5, r2
 8007dc4:	e7ba      	b.n	8007d3c <_printf_i+0x150>
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	1d1a      	adds	r2, r3, #4
 8007dca:	602a      	str	r2, [r5, #0]
 8007dcc:	681d      	ldr	r5, [r3, #0]
 8007dce:	6862      	ldr	r2, [r4, #4]
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f7f8 fa04 	bl	80001e0 <memchr>
 8007dd8:	b108      	cbz	r0, 8007dde <_printf_i+0x1f2>
 8007dda:	1b40      	subs	r0, r0, r5
 8007ddc:	6060      	str	r0, [r4, #4]
 8007dde:	6863      	ldr	r3, [r4, #4]
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	2300      	movs	r3, #0
 8007de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de8:	e7a8      	b.n	8007d3c <_printf_i+0x150>
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	462a      	mov	r2, r5
 8007dee:	4649      	mov	r1, r9
 8007df0:	4640      	mov	r0, r8
 8007df2:	47d0      	blx	sl
 8007df4:	3001      	adds	r0, #1
 8007df6:	d0ab      	beq.n	8007d50 <_printf_i+0x164>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	079b      	lsls	r3, r3, #30
 8007dfc:	d413      	bmi.n	8007e26 <_printf_i+0x23a>
 8007dfe:	68e0      	ldr	r0, [r4, #12]
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	4298      	cmp	r0, r3
 8007e04:	bfb8      	it	lt
 8007e06:	4618      	movlt	r0, r3
 8007e08:	e7a4      	b.n	8007d54 <_printf_i+0x168>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4640      	mov	r0, r8
 8007e12:	47d0      	blx	sl
 8007e14:	3001      	adds	r0, #1
 8007e16:	d09b      	beq.n	8007d50 <_printf_i+0x164>
 8007e18:	3501      	adds	r5, #1
 8007e1a:	68e3      	ldr	r3, [r4, #12]
 8007e1c:	9903      	ldr	r1, [sp, #12]
 8007e1e:	1a5b      	subs	r3, r3, r1
 8007e20:	42ab      	cmp	r3, r5
 8007e22:	dcf2      	bgt.n	8007e0a <_printf_i+0x21e>
 8007e24:	e7eb      	b.n	8007dfe <_printf_i+0x212>
 8007e26:	2500      	movs	r5, #0
 8007e28:	f104 0619 	add.w	r6, r4, #25
 8007e2c:	e7f5      	b.n	8007e1a <_printf_i+0x22e>
 8007e2e:	bf00      	nop
 8007e30:	0800bf82 	.word	0x0800bf82
 8007e34:	0800bf93 	.word	0x0800bf93

08007e38 <sniprintf>:
 8007e38:	b40c      	push	{r2, r3}
 8007e3a:	b530      	push	{r4, r5, lr}
 8007e3c:	4b17      	ldr	r3, [pc, #92]	; (8007e9c <sniprintf+0x64>)
 8007e3e:	1e0c      	subs	r4, r1, #0
 8007e40:	681d      	ldr	r5, [r3, #0]
 8007e42:	b09d      	sub	sp, #116	; 0x74
 8007e44:	da08      	bge.n	8007e58 <sniprintf+0x20>
 8007e46:	238b      	movs	r3, #139	; 0x8b
 8007e48:	602b      	str	r3, [r5, #0]
 8007e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4e:	b01d      	add	sp, #116	; 0x74
 8007e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e54:	b002      	add	sp, #8
 8007e56:	4770      	bx	lr
 8007e58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007e5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e60:	bf14      	ite	ne
 8007e62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e66:	4623      	moveq	r3, r4
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	9307      	str	r3, [sp, #28]
 8007e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e70:	9002      	str	r0, [sp, #8]
 8007e72:	9006      	str	r0, [sp, #24]
 8007e74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e7a:	ab21      	add	r3, sp, #132	; 0x84
 8007e7c:	a902      	add	r1, sp, #8
 8007e7e:	4628      	mov	r0, r5
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	f001 fb69 	bl	8009558 <_svfiprintf_r>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	bfbc      	itt	lt
 8007e8a:	238b      	movlt	r3, #139	; 0x8b
 8007e8c:	602b      	strlt	r3, [r5, #0]
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	d0dd      	beq.n	8007e4e <sniprintf+0x16>
 8007e92:	9b02      	ldr	r3, [sp, #8]
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	e7d9      	b.n	8007e4e <sniprintf+0x16>
 8007e9a:	bf00      	nop
 8007e9c:	2000001c 	.word	0x2000001c

08007ea0 <quorem>:
 8007ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	6903      	ldr	r3, [r0, #16]
 8007ea6:	690c      	ldr	r4, [r1, #16]
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	4607      	mov	r7, r0
 8007eac:	f2c0 8081 	blt.w	8007fb2 <quorem+0x112>
 8007eb0:	3c01      	subs	r4, #1
 8007eb2:	f101 0814 	add.w	r8, r1, #20
 8007eb6:	f100 0514 	add.w	r5, r0, #20
 8007eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ec4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ed0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ed4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ed8:	d331      	bcc.n	8007f3e <quorem+0x9e>
 8007eda:	f04f 0e00 	mov.w	lr, #0
 8007ede:	4640      	mov	r0, r8
 8007ee0:	46ac      	mov	ip, r5
 8007ee2:	46f2      	mov	sl, lr
 8007ee4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ee8:	b293      	uxth	r3, r2
 8007eea:	fb06 e303 	mla	r3, r6, r3, lr
 8007eee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ef8:	f8dc a000 	ldr.w	sl, [ip]
 8007efc:	0c12      	lsrs	r2, r2, #16
 8007efe:	fa13 f38a 	uxtah	r3, r3, sl
 8007f02:	fb06 e202 	mla	r2, r6, r2, lr
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	9b00      	ldr	r3, [sp, #0]
 8007f0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f0e:	b292      	uxth	r2, r2
 8007f10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f18:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f1c:	4581      	cmp	r9, r0
 8007f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f22:	f84c 3b04 	str.w	r3, [ip], #4
 8007f26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f2a:	d2db      	bcs.n	8007ee4 <quorem+0x44>
 8007f2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f30:	b92b      	cbnz	r3, 8007f3e <quorem+0x9e>
 8007f32:	9b01      	ldr	r3, [sp, #4]
 8007f34:	3b04      	subs	r3, #4
 8007f36:	429d      	cmp	r5, r3
 8007f38:	461a      	mov	r2, r3
 8007f3a:	d32e      	bcc.n	8007f9a <quorem+0xfa>
 8007f3c:	613c      	str	r4, [r7, #16]
 8007f3e:	4638      	mov	r0, r7
 8007f40:	f001 f8b6 	bl	80090b0 <__mcmp>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	db24      	blt.n	8007f92 <quorem+0xf2>
 8007f48:	3601      	adds	r6, #1
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f04f 0c00 	mov.w	ip, #0
 8007f50:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f54:	f8d0 e000 	ldr.w	lr, [r0]
 8007f58:	b293      	uxth	r3, r2
 8007f5a:	ebac 0303 	sub.w	r3, ip, r3
 8007f5e:	0c12      	lsrs	r2, r2, #16
 8007f60:	fa13 f38e 	uxtah	r3, r3, lr
 8007f64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f72:	45c1      	cmp	r9, r8
 8007f74:	f840 3b04 	str.w	r3, [r0], #4
 8007f78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f7c:	d2e8      	bcs.n	8007f50 <quorem+0xb0>
 8007f7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f86:	b922      	cbnz	r2, 8007f92 <quorem+0xf2>
 8007f88:	3b04      	subs	r3, #4
 8007f8a:	429d      	cmp	r5, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	d30a      	bcc.n	8007fa6 <quorem+0x106>
 8007f90:	613c      	str	r4, [r7, #16]
 8007f92:	4630      	mov	r0, r6
 8007f94:	b003      	add	sp, #12
 8007f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	3b04      	subs	r3, #4
 8007f9e:	2a00      	cmp	r2, #0
 8007fa0:	d1cc      	bne.n	8007f3c <quorem+0x9c>
 8007fa2:	3c01      	subs	r4, #1
 8007fa4:	e7c7      	b.n	8007f36 <quorem+0x96>
 8007fa6:	6812      	ldr	r2, [r2, #0]
 8007fa8:	3b04      	subs	r3, #4
 8007faa:	2a00      	cmp	r2, #0
 8007fac:	d1f0      	bne.n	8007f90 <quorem+0xf0>
 8007fae:	3c01      	subs	r4, #1
 8007fb0:	e7eb      	b.n	8007f8a <quorem+0xea>
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	e7ee      	b.n	8007f94 <quorem+0xf4>
	...

08007fb8 <_dtoa_r>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	ed2d 8b04 	vpush	{d8-d9}
 8007fc0:	ec57 6b10 	vmov	r6, r7, d0
 8007fc4:	b093      	sub	sp, #76	; 0x4c
 8007fc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fcc:	9106      	str	r1, [sp, #24]
 8007fce:	ee10 aa10 	vmov	sl, s0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007fd8:	46bb      	mov	fp, r7
 8007fda:	b975      	cbnz	r5, 8007ffa <_dtoa_r+0x42>
 8007fdc:	2010      	movs	r0, #16
 8007fde:	f000 fddd 	bl	8008b9c <malloc>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	6260      	str	r0, [r4, #36]	; 0x24
 8007fe6:	b920      	cbnz	r0, 8007ff2 <_dtoa_r+0x3a>
 8007fe8:	4ba7      	ldr	r3, [pc, #668]	; (8008288 <_dtoa_r+0x2d0>)
 8007fea:	21ea      	movs	r1, #234	; 0xea
 8007fec:	48a7      	ldr	r0, [pc, #668]	; (800828c <_dtoa_r+0x2d4>)
 8007fee:	f001 fbc3 	bl	8009778 <__assert_func>
 8007ff2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ff6:	6005      	str	r5, [r0, #0]
 8007ff8:	60c5      	str	r5, [r0, #12]
 8007ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ffc:	6819      	ldr	r1, [r3, #0]
 8007ffe:	b151      	cbz	r1, 8008016 <_dtoa_r+0x5e>
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	604a      	str	r2, [r1, #4]
 8008004:	2301      	movs	r3, #1
 8008006:	4093      	lsls	r3, r2
 8008008:	608b      	str	r3, [r1, #8]
 800800a:	4620      	mov	r0, r4
 800800c:	f000 fe0e 	bl	8008c2c <_Bfree>
 8008010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	1e3b      	subs	r3, r7, #0
 8008018:	bfaa      	itet	ge
 800801a:	2300      	movge	r3, #0
 800801c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008020:	f8c8 3000 	strge.w	r3, [r8]
 8008024:	4b9a      	ldr	r3, [pc, #616]	; (8008290 <_dtoa_r+0x2d8>)
 8008026:	bfbc      	itt	lt
 8008028:	2201      	movlt	r2, #1
 800802a:	f8c8 2000 	strlt.w	r2, [r8]
 800802e:	ea33 030b 	bics.w	r3, r3, fp
 8008032:	d11b      	bne.n	800806c <_dtoa_r+0xb4>
 8008034:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008036:	f242 730f 	movw	r3, #9999	; 0x270f
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008040:	4333      	orrs	r3, r6
 8008042:	f000 8592 	beq.w	8008b6a <_dtoa_r+0xbb2>
 8008046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008048:	b963      	cbnz	r3, 8008064 <_dtoa_r+0xac>
 800804a:	4b92      	ldr	r3, [pc, #584]	; (8008294 <_dtoa_r+0x2dc>)
 800804c:	e022      	b.n	8008094 <_dtoa_r+0xdc>
 800804e:	4b92      	ldr	r3, [pc, #584]	; (8008298 <_dtoa_r+0x2e0>)
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	3308      	adds	r3, #8
 8008054:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	9801      	ldr	r0, [sp, #4]
 800805a:	b013      	add	sp, #76	; 0x4c
 800805c:	ecbd 8b04 	vpop	{d8-d9}
 8008060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	4b8b      	ldr	r3, [pc, #556]	; (8008294 <_dtoa_r+0x2dc>)
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	3303      	adds	r3, #3
 800806a:	e7f3      	b.n	8008054 <_dtoa_r+0x9c>
 800806c:	2200      	movs	r2, #0
 800806e:	2300      	movs	r3, #0
 8008070:	4650      	mov	r0, sl
 8008072:	4659      	mov	r1, fp
 8008074:	f7f8 fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008078:	ec4b ab19 	vmov	d9, sl, fp
 800807c:	4680      	mov	r8, r0
 800807e:	b158      	cbz	r0, 8008098 <_dtoa_r+0xe0>
 8008080:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008082:	2301      	movs	r3, #1
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 856b 	beq.w	8008b64 <_dtoa_r+0xbac>
 800808e:	4883      	ldr	r0, [pc, #524]	; (800829c <_dtoa_r+0x2e4>)
 8008090:	6018      	str	r0, [r3, #0]
 8008092:	1e43      	subs	r3, r0, #1
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	e7df      	b.n	8008058 <_dtoa_r+0xa0>
 8008098:	ec4b ab10 	vmov	d0, sl, fp
 800809c:	aa10      	add	r2, sp, #64	; 0x40
 800809e:	a911      	add	r1, sp, #68	; 0x44
 80080a0:	4620      	mov	r0, r4
 80080a2:	f001 f8ab 	bl	80091fc <__d2b>
 80080a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80080aa:	ee08 0a10 	vmov	s16, r0
 80080ae:	2d00      	cmp	r5, #0
 80080b0:	f000 8084 	beq.w	80081bc <_dtoa_r+0x204>
 80080b4:	ee19 3a90 	vmov	r3, s19
 80080b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80080c0:	4656      	mov	r6, sl
 80080c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80080c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80080ce:	4b74      	ldr	r3, [pc, #464]	; (80082a0 <_dtoa_r+0x2e8>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	4630      	mov	r0, r6
 80080d4:	4639      	mov	r1, r7
 80080d6:	f7f8 f8d7 	bl	8000288 <__aeabi_dsub>
 80080da:	a365      	add	r3, pc, #404	; (adr r3, 8008270 <_dtoa_r+0x2b8>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	a364      	add	r3, pc, #400	; (adr r3, 8008278 <_dtoa_r+0x2c0>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 f8cf 	bl	800028c <__adddf3>
 80080ee:	4606      	mov	r6, r0
 80080f0:	4628      	mov	r0, r5
 80080f2:	460f      	mov	r7, r1
 80080f4:	f7f8 fa16 	bl	8000524 <__aeabi_i2d>
 80080f8:	a361      	add	r3, pc, #388	; (adr r3, 8008280 <_dtoa_r+0x2c8>)
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f7f8 fa7b 	bl	80005f8 <__aeabi_dmul>
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4630      	mov	r0, r6
 8008108:	4639      	mov	r1, r7
 800810a:	f7f8 f8bf 	bl	800028c <__adddf3>
 800810e:	4606      	mov	r6, r0
 8008110:	460f      	mov	r7, r1
 8008112:	f7f8 fd21 	bl	8000b58 <__aeabi_d2iz>
 8008116:	2200      	movs	r2, #0
 8008118:	9000      	str	r0, [sp, #0]
 800811a:	2300      	movs	r3, #0
 800811c:	4630      	mov	r0, r6
 800811e:	4639      	mov	r1, r7
 8008120:	f7f8 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8008124:	b150      	cbz	r0, 800813c <_dtoa_r+0x184>
 8008126:	9800      	ldr	r0, [sp, #0]
 8008128:	f7f8 f9fc 	bl	8000524 <__aeabi_i2d>
 800812c:	4632      	mov	r2, r6
 800812e:	463b      	mov	r3, r7
 8008130:	f7f8 fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008134:	b910      	cbnz	r0, 800813c <_dtoa_r+0x184>
 8008136:	9b00      	ldr	r3, [sp, #0]
 8008138:	3b01      	subs	r3, #1
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	9b00      	ldr	r3, [sp, #0]
 800813e:	2b16      	cmp	r3, #22
 8008140:	d85a      	bhi.n	80081f8 <_dtoa_r+0x240>
 8008142:	9a00      	ldr	r2, [sp, #0]
 8008144:	4b57      	ldr	r3, [pc, #348]	; (80082a4 <_dtoa_r+0x2ec>)
 8008146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	ec51 0b19 	vmov	r0, r1, d9
 8008152:	f7f8 fcc3 	bl	8000adc <__aeabi_dcmplt>
 8008156:	2800      	cmp	r0, #0
 8008158:	d050      	beq.n	80081fc <_dtoa_r+0x244>
 800815a:	9b00      	ldr	r3, [sp, #0]
 800815c:	3b01      	subs	r3, #1
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	2300      	movs	r3, #0
 8008162:	930b      	str	r3, [sp, #44]	; 0x2c
 8008164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008166:	1b5d      	subs	r5, r3, r5
 8008168:	1e6b      	subs	r3, r5, #1
 800816a:	9305      	str	r3, [sp, #20]
 800816c:	bf45      	ittet	mi
 800816e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008172:	9304      	strmi	r3, [sp, #16]
 8008174:	2300      	movpl	r3, #0
 8008176:	2300      	movmi	r3, #0
 8008178:	bf4c      	ite	mi
 800817a:	9305      	strmi	r3, [sp, #20]
 800817c:	9304      	strpl	r3, [sp, #16]
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	db3d      	blt.n	8008200 <_dtoa_r+0x248>
 8008184:	9b05      	ldr	r3, [sp, #20]
 8008186:	9a00      	ldr	r2, [sp, #0]
 8008188:	920a      	str	r2, [sp, #40]	; 0x28
 800818a:	4413      	add	r3, r2
 800818c:	9305      	str	r3, [sp, #20]
 800818e:	2300      	movs	r3, #0
 8008190:	9307      	str	r3, [sp, #28]
 8008192:	9b06      	ldr	r3, [sp, #24]
 8008194:	2b09      	cmp	r3, #9
 8008196:	f200 8089 	bhi.w	80082ac <_dtoa_r+0x2f4>
 800819a:	2b05      	cmp	r3, #5
 800819c:	bfc4      	itt	gt
 800819e:	3b04      	subgt	r3, #4
 80081a0:	9306      	strgt	r3, [sp, #24]
 80081a2:	9b06      	ldr	r3, [sp, #24]
 80081a4:	f1a3 0302 	sub.w	r3, r3, #2
 80081a8:	bfcc      	ite	gt
 80081aa:	2500      	movgt	r5, #0
 80081ac:	2501      	movle	r5, #1
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	f200 8087 	bhi.w	80082c2 <_dtoa_r+0x30a>
 80081b4:	e8df f003 	tbb	[pc, r3]
 80081b8:	59383a2d 	.word	0x59383a2d
 80081bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80081c0:	441d      	add	r5, r3
 80081c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	bfc1      	itttt	gt
 80081ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80081d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081da:	bfda      	itte	le
 80081dc:	f1c3 0320 	rsble	r3, r3, #32
 80081e0:	fa06 f003 	lslle.w	r0, r6, r3
 80081e4:	4318      	orrgt	r0, r3
 80081e6:	f7f8 f98d 	bl	8000504 <__aeabi_ui2d>
 80081ea:	2301      	movs	r3, #1
 80081ec:	4606      	mov	r6, r0
 80081ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081f2:	3d01      	subs	r5, #1
 80081f4:	930e      	str	r3, [sp, #56]	; 0x38
 80081f6:	e76a      	b.n	80080ce <_dtoa_r+0x116>
 80081f8:	2301      	movs	r3, #1
 80081fa:	e7b2      	b.n	8008162 <_dtoa_r+0x1aa>
 80081fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80081fe:	e7b1      	b.n	8008164 <_dtoa_r+0x1ac>
 8008200:	9b04      	ldr	r3, [sp, #16]
 8008202:	9a00      	ldr	r2, [sp, #0]
 8008204:	1a9b      	subs	r3, r3, r2
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	4253      	negs	r3, r2
 800820a:	9307      	str	r3, [sp, #28]
 800820c:	2300      	movs	r3, #0
 800820e:	930a      	str	r3, [sp, #40]	; 0x28
 8008210:	e7bf      	b.n	8008192 <_dtoa_r+0x1da>
 8008212:	2300      	movs	r3, #0
 8008214:	9308      	str	r3, [sp, #32]
 8008216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008218:	2b00      	cmp	r3, #0
 800821a:	dc55      	bgt.n	80082c8 <_dtoa_r+0x310>
 800821c:	2301      	movs	r3, #1
 800821e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008222:	461a      	mov	r2, r3
 8008224:	9209      	str	r2, [sp, #36]	; 0x24
 8008226:	e00c      	b.n	8008242 <_dtoa_r+0x28a>
 8008228:	2301      	movs	r3, #1
 800822a:	e7f3      	b.n	8008214 <_dtoa_r+0x25c>
 800822c:	2300      	movs	r3, #0
 800822e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008230:	9308      	str	r3, [sp, #32]
 8008232:	9b00      	ldr	r3, [sp, #0]
 8008234:	4413      	add	r3, r2
 8008236:	9302      	str	r3, [sp, #8]
 8008238:	3301      	adds	r3, #1
 800823a:	2b01      	cmp	r3, #1
 800823c:	9303      	str	r3, [sp, #12]
 800823e:	bfb8      	it	lt
 8008240:	2301      	movlt	r3, #1
 8008242:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008244:	2200      	movs	r2, #0
 8008246:	6042      	str	r2, [r0, #4]
 8008248:	2204      	movs	r2, #4
 800824a:	f102 0614 	add.w	r6, r2, #20
 800824e:	429e      	cmp	r6, r3
 8008250:	6841      	ldr	r1, [r0, #4]
 8008252:	d93d      	bls.n	80082d0 <_dtoa_r+0x318>
 8008254:	4620      	mov	r0, r4
 8008256:	f000 fca9 	bl	8008bac <_Balloc>
 800825a:	9001      	str	r0, [sp, #4]
 800825c:	2800      	cmp	r0, #0
 800825e:	d13b      	bne.n	80082d8 <_dtoa_r+0x320>
 8008260:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <_dtoa_r+0x2f0>)
 8008262:	4602      	mov	r2, r0
 8008264:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008268:	e6c0      	b.n	8007fec <_dtoa_r+0x34>
 800826a:	2301      	movs	r3, #1
 800826c:	e7df      	b.n	800822e <_dtoa_r+0x276>
 800826e:	bf00      	nop
 8008270:	636f4361 	.word	0x636f4361
 8008274:	3fd287a7 	.word	0x3fd287a7
 8008278:	8b60c8b3 	.word	0x8b60c8b3
 800827c:	3fc68a28 	.word	0x3fc68a28
 8008280:	509f79fb 	.word	0x509f79fb
 8008284:	3fd34413 	.word	0x3fd34413
 8008288:	0800bfb1 	.word	0x0800bfb1
 800828c:	0800bfc8 	.word	0x0800bfc8
 8008290:	7ff00000 	.word	0x7ff00000
 8008294:	0800bfad 	.word	0x0800bfad
 8008298:	0800bfa4 	.word	0x0800bfa4
 800829c:	0800bf81 	.word	0x0800bf81
 80082a0:	3ff80000 	.word	0x3ff80000
 80082a4:	0800c0b8 	.word	0x0800c0b8
 80082a8:	0800c023 	.word	0x0800c023
 80082ac:	2501      	movs	r5, #1
 80082ae:	2300      	movs	r3, #0
 80082b0:	9306      	str	r3, [sp, #24]
 80082b2:	9508      	str	r5, [sp, #32]
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295
 80082b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082bc:	2200      	movs	r2, #0
 80082be:	2312      	movs	r3, #18
 80082c0:	e7b0      	b.n	8008224 <_dtoa_r+0x26c>
 80082c2:	2301      	movs	r3, #1
 80082c4:	9308      	str	r3, [sp, #32]
 80082c6:	e7f5      	b.n	80082b4 <_dtoa_r+0x2fc>
 80082c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082ce:	e7b8      	b.n	8008242 <_dtoa_r+0x28a>
 80082d0:	3101      	adds	r1, #1
 80082d2:	6041      	str	r1, [r0, #4]
 80082d4:	0052      	lsls	r2, r2, #1
 80082d6:	e7b8      	b.n	800824a <_dtoa_r+0x292>
 80082d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082da:	9a01      	ldr	r2, [sp, #4]
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	2b0e      	cmp	r3, #14
 80082e2:	f200 809d 	bhi.w	8008420 <_dtoa_r+0x468>
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	f000 809a 	beq.w	8008420 <_dtoa_r+0x468>
 80082ec:	9b00      	ldr	r3, [sp, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	dd32      	ble.n	8008358 <_dtoa_r+0x3a0>
 80082f2:	4ab7      	ldr	r2, [pc, #732]	; (80085d0 <_dtoa_r+0x618>)
 80082f4:	f003 030f 	and.w	r3, r3, #15
 80082f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008300:	9b00      	ldr	r3, [sp, #0]
 8008302:	05d8      	lsls	r0, r3, #23
 8008304:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008308:	d516      	bpl.n	8008338 <_dtoa_r+0x380>
 800830a:	4bb2      	ldr	r3, [pc, #712]	; (80085d4 <_dtoa_r+0x61c>)
 800830c:	ec51 0b19 	vmov	r0, r1, d9
 8008310:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008314:	f7f8 fa9a 	bl	800084c <__aeabi_ddiv>
 8008318:	f007 070f 	and.w	r7, r7, #15
 800831c:	4682      	mov	sl, r0
 800831e:	468b      	mov	fp, r1
 8008320:	2503      	movs	r5, #3
 8008322:	4eac      	ldr	r6, [pc, #688]	; (80085d4 <_dtoa_r+0x61c>)
 8008324:	b957      	cbnz	r7, 800833c <_dtoa_r+0x384>
 8008326:	4642      	mov	r2, r8
 8008328:	464b      	mov	r3, r9
 800832a:	4650      	mov	r0, sl
 800832c:	4659      	mov	r1, fp
 800832e:	f7f8 fa8d 	bl	800084c <__aeabi_ddiv>
 8008332:	4682      	mov	sl, r0
 8008334:	468b      	mov	fp, r1
 8008336:	e028      	b.n	800838a <_dtoa_r+0x3d2>
 8008338:	2502      	movs	r5, #2
 800833a:	e7f2      	b.n	8008322 <_dtoa_r+0x36a>
 800833c:	07f9      	lsls	r1, r7, #31
 800833e:	d508      	bpl.n	8008352 <_dtoa_r+0x39a>
 8008340:	4640      	mov	r0, r8
 8008342:	4649      	mov	r1, r9
 8008344:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008348:	f7f8 f956 	bl	80005f8 <__aeabi_dmul>
 800834c:	3501      	adds	r5, #1
 800834e:	4680      	mov	r8, r0
 8008350:	4689      	mov	r9, r1
 8008352:	107f      	asrs	r7, r7, #1
 8008354:	3608      	adds	r6, #8
 8008356:	e7e5      	b.n	8008324 <_dtoa_r+0x36c>
 8008358:	f000 809b 	beq.w	8008492 <_dtoa_r+0x4da>
 800835c:	9b00      	ldr	r3, [sp, #0]
 800835e:	4f9d      	ldr	r7, [pc, #628]	; (80085d4 <_dtoa_r+0x61c>)
 8008360:	425e      	negs	r6, r3
 8008362:	4b9b      	ldr	r3, [pc, #620]	; (80085d0 <_dtoa_r+0x618>)
 8008364:	f006 020f 	and.w	r2, r6, #15
 8008368:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	ec51 0b19 	vmov	r0, r1, d9
 8008374:	f7f8 f940 	bl	80005f8 <__aeabi_dmul>
 8008378:	1136      	asrs	r6, r6, #4
 800837a:	4682      	mov	sl, r0
 800837c:	468b      	mov	fp, r1
 800837e:	2300      	movs	r3, #0
 8008380:	2502      	movs	r5, #2
 8008382:	2e00      	cmp	r6, #0
 8008384:	d17a      	bne.n	800847c <_dtoa_r+0x4c4>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1d3      	bne.n	8008332 <_dtoa_r+0x37a>
 800838a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 8082 	beq.w	8008496 <_dtoa_r+0x4de>
 8008392:	4b91      	ldr	r3, [pc, #580]	; (80085d8 <_dtoa_r+0x620>)
 8008394:	2200      	movs	r2, #0
 8008396:	4650      	mov	r0, sl
 8008398:	4659      	mov	r1, fp
 800839a:	f7f8 fb9f 	bl	8000adc <__aeabi_dcmplt>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d079      	beq.n	8008496 <_dtoa_r+0x4de>
 80083a2:	9b03      	ldr	r3, [sp, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d076      	beq.n	8008496 <_dtoa_r+0x4de>
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dd36      	ble.n	800841c <_dtoa_r+0x464>
 80083ae:	9b00      	ldr	r3, [sp, #0]
 80083b0:	4650      	mov	r0, sl
 80083b2:	4659      	mov	r1, fp
 80083b4:	1e5f      	subs	r7, r3, #1
 80083b6:	2200      	movs	r2, #0
 80083b8:	4b88      	ldr	r3, [pc, #544]	; (80085dc <_dtoa_r+0x624>)
 80083ba:	f7f8 f91d 	bl	80005f8 <__aeabi_dmul>
 80083be:	9e02      	ldr	r6, [sp, #8]
 80083c0:	4682      	mov	sl, r0
 80083c2:	468b      	mov	fp, r1
 80083c4:	3501      	adds	r5, #1
 80083c6:	4628      	mov	r0, r5
 80083c8:	f7f8 f8ac 	bl	8000524 <__aeabi_i2d>
 80083cc:	4652      	mov	r2, sl
 80083ce:	465b      	mov	r3, fp
 80083d0:	f7f8 f912 	bl	80005f8 <__aeabi_dmul>
 80083d4:	4b82      	ldr	r3, [pc, #520]	; (80085e0 <_dtoa_r+0x628>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	f7f7 ff58 	bl	800028c <__adddf3>
 80083dc:	46d0      	mov	r8, sl
 80083de:	46d9      	mov	r9, fp
 80083e0:	4682      	mov	sl, r0
 80083e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083e6:	2e00      	cmp	r6, #0
 80083e8:	d158      	bne.n	800849c <_dtoa_r+0x4e4>
 80083ea:	4b7e      	ldr	r3, [pc, #504]	; (80085e4 <_dtoa_r+0x62c>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	4640      	mov	r0, r8
 80083f0:	4649      	mov	r1, r9
 80083f2:	f7f7 ff49 	bl	8000288 <__aeabi_dsub>
 80083f6:	4652      	mov	r2, sl
 80083f8:	465b      	mov	r3, fp
 80083fa:	4680      	mov	r8, r0
 80083fc:	4689      	mov	r9, r1
 80083fe:	f7f8 fb8b 	bl	8000b18 <__aeabi_dcmpgt>
 8008402:	2800      	cmp	r0, #0
 8008404:	f040 8295 	bne.w	8008932 <_dtoa_r+0x97a>
 8008408:	4652      	mov	r2, sl
 800840a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800840e:	4640      	mov	r0, r8
 8008410:	4649      	mov	r1, r9
 8008412:	f7f8 fb63 	bl	8000adc <__aeabi_dcmplt>
 8008416:	2800      	cmp	r0, #0
 8008418:	f040 8289 	bne.w	800892e <_dtoa_r+0x976>
 800841c:	ec5b ab19 	vmov	sl, fp, d9
 8008420:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008422:	2b00      	cmp	r3, #0
 8008424:	f2c0 8148 	blt.w	80086b8 <_dtoa_r+0x700>
 8008428:	9a00      	ldr	r2, [sp, #0]
 800842a:	2a0e      	cmp	r2, #14
 800842c:	f300 8144 	bgt.w	80086b8 <_dtoa_r+0x700>
 8008430:	4b67      	ldr	r3, [pc, #412]	; (80085d0 <_dtoa_r+0x618>)
 8008432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008436:	e9d3 8900 	ldrd	r8, r9, [r3]
 800843a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843c:	2b00      	cmp	r3, #0
 800843e:	f280 80d5 	bge.w	80085ec <_dtoa_r+0x634>
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	f300 80d1 	bgt.w	80085ec <_dtoa_r+0x634>
 800844a:	f040 826f 	bne.w	800892c <_dtoa_r+0x974>
 800844e:	4b65      	ldr	r3, [pc, #404]	; (80085e4 <_dtoa_r+0x62c>)
 8008450:	2200      	movs	r2, #0
 8008452:	4640      	mov	r0, r8
 8008454:	4649      	mov	r1, r9
 8008456:	f7f8 f8cf 	bl	80005f8 <__aeabi_dmul>
 800845a:	4652      	mov	r2, sl
 800845c:	465b      	mov	r3, fp
 800845e:	f7f8 fb51 	bl	8000b04 <__aeabi_dcmpge>
 8008462:	9e03      	ldr	r6, [sp, #12]
 8008464:	4637      	mov	r7, r6
 8008466:	2800      	cmp	r0, #0
 8008468:	f040 8245 	bne.w	80088f6 <_dtoa_r+0x93e>
 800846c:	9d01      	ldr	r5, [sp, #4]
 800846e:	2331      	movs	r3, #49	; 0x31
 8008470:	f805 3b01 	strb.w	r3, [r5], #1
 8008474:	9b00      	ldr	r3, [sp, #0]
 8008476:	3301      	adds	r3, #1
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	e240      	b.n	80088fe <_dtoa_r+0x946>
 800847c:	07f2      	lsls	r2, r6, #31
 800847e:	d505      	bpl.n	800848c <_dtoa_r+0x4d4>
 8008480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008484:	f7f8 f8b8 	bl	80005f8 <__aeabi_dmul>
 8008488:	3501      	adds	r5, #1
 800848a:	2301      	movs	r3, #1
 800848c:	1076      	asrs	r6, r6, #1
 800848e:	3708      	adds	r7, #8
 8008490:	e777      	b.n	8008382 <_dtoa_r+0x3ca>
 8008492:	2502      	movs	r5, #2
 8008494:	e779      	b.n	800838a <_dtoa_r+0x3d2>
 8008496:	9f00      	ldr	r7, [sp, #0]
 8008498:	9e03      	ldr	r6, [sp, #12]
 800849a:	e794      	b.n	80083c6 <_dtoa_r+0x40e>
 800849c:	9901      	ldr	r1, [sp, #4]
 800849e:	4b4c      	ldr	r3, [pc, #304]	; (80085d0 <_dtoa_r+0x618>)
 80084a0:	4431      	add	r1, r6
 80084a2:	910d      	str	r1, [sp, #52]	; 0x34
 80084a4:	9908      	ldr	r1, [sp, #32]
 80084a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084ae:	2900      	cmp	r1, #0
 80084b0:	d043      	beq.n	800853a <_dtoa_r+0x582>
 80084b2:	494d      	ldr	r1, [pc, #308]	; (80085e8 <_dtoa_r+0x630>)
 80084b4:	2000      	movs	r0, #0
 80084b6:	f7f8 f9c9 	bl	800084c <__aeabi_ddiv>
 80084ba:	4652      	mov	r2, sl
 80084bc:	465b      	mov	r3, fp
 80084be:	f7f7 fee3 	bl	8000288 <__aeabi_dsub>
 80084c2:	9d01      	ldr	r5, [sp, #4]
 80084c4:	4682      	mov	sl, r0
 80084c6:	468b      	mov	fp, r1
 80084c8:	4649      	mov	r1, r9
 80084ca:	4640      	mov	r0, r8
 80084cc:	f7f8 fb44 	bl	8000b58 <__aeabi_d2iz>
 80084d0:	4606      	mov	r6, r0
 80084d2:	f7f8 f827 	bl	8000524 <__aeabi_i2d>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4640      	mov	r0, r8
 80084dc:	4649      	mov	r1, r9
 80084de:	f7f7 fed3 	bl	8000288 <__aeabi_dsub>
 80084e2:	3630      	adds	r6, #48	; 0x30
 80084e4:	f805 6b01 	strb.w	r6, [r5], #1
 80084e8:	4652      	mov	r2, sl
 80084ea:	465b      	mov	r3, fp
 80084ec:	4680      	mov	r8, r0
 80084ee:	4689      	mov	r9, r1
 80084f0:	f7f8 faf4 	bl	8000adc <__aeabi_dcmplt>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d163      	bne.n	80085c0 <_dtoa_r+0x608>
 80084f8:	4642      	mov	r2, r8
 80084fa:	464b      	mov	r3, r9
 80084fc:	4936      	ldr	r1, [pc, #216]	; (80085d8 <_dtoa_r+0x620>)
 80084fe:	2000      	movs	r0, #0
 8008500:	f7f7 fec2 	bl	8000288 <__aeabi_dsub>
 8008504:	4652      	mov	r2, sl
 8008506:	465b      	mov	r3, fp
 8008508:	f7f8 fae8 	bl	8000adc <__aeabi_dcmplt>
 800850c:	2800      	cmp	r0, #0
 800850e:	f040 80b5 	bne.w	800867c <_dtoa_r+0x6c4>
 8008512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008514:	429d      	cmp	r5, r3
 8008516:	d081      	beq.n	800841c <_dtoa_r+0x464>
 8008518:	4b30      	ldr	r3, [pc, #192]	; (80085dc <_dtoa_r+0x624>)
 800851a:	2200      	movs	r2, #0
 800851c:	4650      	mov	r0, sl
 800851e:	4659      	mov	r1, fp
 8008520:	f7f8 f86a 	bl	80005f8 <__aeabi_dmul>
 8008524:	4b2d      	ldr	r3, [pc, #180]	; (80085dc <_dtoa_r+0x624>)
 8008526:	4682      	mov	sl, r0
 8008528:	468b      	mov	fp, r1
 800852a:	4640      	mov	r0, r8
 800852c:	4649      	mov	r1, r9
 800852e:	2200      	movs	r2, #0
 8008530:	f7f8 f862 	bl	80005f8 <__aeabi_dmul>
 8008534:	4680      	mov	r8, r0
 8008536:	4689      	mov	r9, r1
 8008538:	e7c6      	b.n	80084c8 <_dtoa_r+0x510>
 800853a:	4650      	mov	r0, sl
 800853c:	4659      	mov	r1, fp
 800853e:	f7f8 f85b 	bl	80005f8 <__aeabi_dmul>
 8008542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008544:	9d01      	ldr	r5, [sp, #4]
 8008546:	930f      	str	r3, [sp, #60]	; 0x3c
 8008548:	4682      	mov	sl, r0
 800854a:	468b      	mov	fp, r1
 800854c:	4649      	mov	r1, r9
 800854e:	4640      	mov	r0, r8
 8008550:	f7f8 fb02 	bl	8000b58 <__aeabi_d2iz>
 8008554:	4606      	mov	r6, r0
 8008556:	f7f7 ffe5 	bl	8000524 <__aeabi_i2d>
 800855a:	3630      	adds	r6, #48	; 0x30
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4640      	mov	r0, r8
 8008562:	4649      	mov	r1, r9
 8008564:	f7f7 fe90 	bl	8000288 <__aeabi_dsub>
 8008568:	f805 6b01 	strb.w	r6, [r5], #1
 800856c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800856e:	429d      	cmp	r5, r3
 8008570:	4680      	mov	r8, r0
 8008572:	4689      	mov	r9, r1
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	d124      	bne.n	80085c4 <_dtoa_r+0x60c>
 800857a:	4b1b      	ldr	r3, [pc, #108]	; (80085e8 <_dtoa_r+0x630>)
 800857c:	4650      	mov	r0, sl
 800857e:	4659      	mov	r1, fp
 8008580:	f7f7 fe84 	bl	800028c <__adddf3>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4640      	mov	r0, r8
 800858a:	4649      	mov	r1, r9
 800858c:	f7f8 fac4 	bl	8000b18 <__aeabi_dcmpgt>
 8008590:	2800      	cmp	r0, #0
 8008592:	d173      	bne.n	800867c <_dtoa_r+0x6c4>
 8008594:	4652      	mov	r2, sl
 8008596:	465b      	mov	r3, fp
 8008598:	4913      	ldr	r1, [pc, #76]	; (80085e8 <_dtoa_r+0x630>)
 800859a:	2000      	movs	r0, #0
 800859c:	f7f7 fe74 	bl	8000288 <__aeabi_dsub>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	4640      	mov	r0, r8
 80085a6:	4649      	mov	r1, r9
 80085a8:	f7f8 fa98 	bl	8000adc <__aeabi_dcmplt>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	f43f af35 	beq.w	800841c <_dtoa_r+0x464>
 80085b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085b4:	1e6b      	subs	r3, r5, #1
 80085b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085bc:	2b30      	cmp	r3, #48	; 0x30
 80085be:	d0f8      	beq.n	80085b2 <_dtoa_r+0x5fa>
 80085c0:	9700      	str	r7, [sp, #0]
 80085c2:	e049      	b.n	8008658 <_dtoa_r+0x6a0>
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <_dtoa_r+0x624>)
 80085c6:	f7f8 f817 	bl	80005f8 <__aeabi_dmul>
 80085ca:	4680      	mov	r8, r0
 80085cc:	4689      	mov	r9, r1
 80085ce:	e7bd      	b.n	800854c <_dtoa_r+0x594>
 80085d0:	0800c0b8 	.word	0x0800c0b8
 80085d4:	0800c090 	.word	0x0800c090
 80085d8:	3ff00000 	.word	0x3ff00000
 80085dc:	40240000 	.word	0x40240000
 80085e0:	401c0000 	.word	0x401c0000
 80085e4:	40140000 	.word	0x40140000
 80085e8:	3fe00000 	.word	0x3fe00000
 80085ec:	9d01      	ldr	r5, [sp, #4]
 80085ee:	4656      	mov	r6, sl
 80085f0:	465f      	mov	r7, fp
 80085f2:	4642      	mov	r2, r8
 80085f4:	464b      	mov	r3, r9
 80085f6:	4630      	mov	r0, r6
 80085f8:	4639      	mov	r1, r7
 80085fa:	f7f8 f927 	bl	800084c <__aeabi_ddiv>
 80085fe:	f7f8 faab 	bl	8000b58 <__aeabi_d2iz>
 8008602:	4682      	mov	sl, r0
 8008604:	f7f7 ff8e 	bl	8000524 <__aeabi_i2d>
 8008608:	4642      	mov	r2, r8
 800860a:	464b      	mov	r3, r9
 800860c:	f7f7 fff4 	bl	80005f8 <__aeabi_dmul>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4630      	mov	r0, r6
 8008616:	4639      	mov	r1, r7
 8008618:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800861c:	f7f7 fe34 	bl	8000288 <__aeabi_dsub>
 8008620:	f805 6b01 	strb.w	r6, [r5], #1
 8008624:	9e01      	ldr	r6, [sp, #4]
 8008626:	9f03      	ldr	r7, [sp, #12]
 8008628:	1bae      	subs	r6, r5, r6
 800862a:	42b7      	cmp	r7, r6
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	d135      	bne.n	800869e <_dtoa_r+0x6e6>
 8008632:	f7f7 fe2b 	bl	800028c <__adddf3>
 8008636:	4642      	mov	r2, r8
 8008638:	464b      	mov	r3, r9
 800863a:	4606      	mov	r6, r0
 800863c:	460f      	mov	r7, r1
 800863e:	f7f8 fa6b 	bl	8000b18 <__aeabi_dcmpgt>
 8008642:	b9d0      	cbnz	r0, 800867a <_dtoa_r+0x6c2>
 8008644:	4642      	mov	r2, r8
 8008646:	464b      	mov	r3, r9
 8008648:	4630      	mov	r0, r6
 800864a:	4639      	mov	r1, r7
 800864c:	f7f8 fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008650:	b110      	cbz	r0, 8008658 <_dtoa_r+0x6a0>
 8008652:	f01a 0f01 	tst.w	sl, #1
 8008656:	d110      	bne.n	800867a <_dtoa_r+0x6c2>
 8008658:	4620      	mov	r0, r4
 800865a:	ee18 1a10 	vmov	r1, s16
 800865e:	f000 fae5 	bl	8008c2c <_Bfree>
 8008662:	2300      	movs	r3, #0
 8008664:	9800      	ldr	r0, [sp, #0]
 8008666:	702b      	strb	r3, [r5, #0]
 8008668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800866a:	3001      	adds	r0, #1
 800866c:	6018      	str	r0, [r3, #0]
 800866e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008670:	2b00      	cmp	r3, #0
 8008672:	f43f acf1 	beq.w	8008058 <_dtoa_r+0xa0>
 8008676:	601d      	str	r5, [r3, #0]
 8008678:	e4ee      	b.n	8008058 <_dtoa_r+0xa0>
 800867a:	9f00      	ldr	r7, [sp, #0]
 800867c:	462b      	mov	r3, r5
 800867e:	461d      	mov	r5, r3
 8008680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008684:	2a39      	cmp	r2, #57	; 0x39
 8008686:	d106      	bne.n	8008696 <_dtoa_r+0x6de>
 8008688:	9a01      	ldr	r2, [sp, #4]
 800868a:	429a      	cmp	r2, r3
 800868c:	d1f7      	bne.n	800867e <_dtoa_r+0x6c6>
 800868e:	9901      	ldr	r1, [sp, #4]
 8008690:	2230      	movs	r2, #48	; 0x30
 8008692:	3701      	adds	r7, #1
 8008694:	700a      	strb	r2, [r1, #0]
 8008696:	781a      	ldrb	r2, [r3, #0]
 8008698:	3201      	adds	r2, #1
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	e790      	b.n	80085c0 <_dtoa_r+0x608>
 800869e:	4ba6      	ldr	r3, [pc, #664]	; (8008938 <_dtoa_r+0x980>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	f7f7 ffa9 	bl	80005f8 <__aeabi_dmul>
 80086a6:	2200      	movs	r2, #0
 80086a8:	2300      	movs	r3, #0
 80086aa:	4606      	mov	r6, r0
 80086ac:	460f      	mov	r7, r1
 80086ae:	f7f8 fa0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d09d      	beq.n	80085f2 <_dtoa_r+0x63a>
 80086b6:	e7cf      	b.n	8008658 <_dtoa_r+0x6a0>
 80086b8:	9a08      	ldr	r2, [sp, #32]
 80086ba:	2a00      	cmp	r2, #0
 80086bc:	f000 80d7 	beq.w	800886e <_dtoa_r+0x8b6>
 80086c0:	9a06      	ldr	r2, [sp, #24]
 80086c2:	2a01      	cmp	r2, #1
 80086c4:	f300 80ba 	bgt.w	800883c <_dtoa_r+0x884>
 80086c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ca:	2a00      	cmp	r2, #0
 80086cc:	f000 80b2 	beq.w	8008834 <_dtoa_r+0x87c>
 80086d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086d4:	9e07      	ldr	r6, [sp, #28]
 80086d6:	9d04      	ldr	r5, [sp, #16]
 80086d8:	9a04      	ldr	r2, [sp, #16]
 80086da:	441a      	add	r2, r3
 80086dc:	9204      	str	r2, [sp, #16]
 80086de:	9a05      	ldr	r2, [sp, #20]
 80086e0:	2101      	movs	r1, #1
 80086e2:	441a      	add	r2, r3
 80086e4:	4620      	mov	r0, r4
 80086e6:	9205      	str	r2, [sp, #20]
 80086e8:	f000 fb58 	bl	8008d9c <__i2b>
 80086ec:	4607      	mov	r7, r0
 80086ee:	2d00      	cmp	r5, #0
 80086f0:	dd0c      	ble.n	800870c <_dtoa_r+0x754>
 80086f2:	9b05      	ldr	r3, [sp, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	dd09      	ble.n	800870c <_dtoa_r+0x754>
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	9a04      	ldr	r2, [sp, #16]
 80086fc:	bfa8      	it	ge
 80086fe:	462b      	movge	r3, r5
 8008700:	1ad2      	subs	r2, r2, r3
 8008702:	9204      	str	r2, [sp, #16]
 8008704:	9a05      	ldr	r2, [sp, #20]
 8008706:	1aed      	subs	r5, r5, r3
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	9305      	str	r3, [sp, #20]
 800870c:	9b07      	ldr	r3, [sp, #28]
 800870e:	b31b      	cbz	r3, 8008758 <_dtoa_r+0x7a0>
 8008710:	9b08      	ldr	r3, [sp, #32]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80af 	beq.w	8008876 <_dtoa_r+0x8be>
 8008718:	2e00      	cmp	r6, #0
 800871a:	dd13      	ble.n	8008744 <_dtoa_r+0x78c>
 800871c:	4639      	mov	r1, r7
 800871e:	4632      	mov	r2, r6
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fbfb 	bl	8008f1c <__pow5mult>
 8008726:	ee18 2a10 	vmov	r2, s16
 800872a:	4601      	mov	r1, r0
 800872c:	4607      	mov	r7, r0
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fb4a 	bl	8008dc8 <__multiply>
 8008734:	ee18 1a10 	vmov	r1, s16
 8008738:	4680      	mov	r8, r0
 800873a:	4620      	mov	r0, r4
 800873c:	f000 fa76 	bl	8008c2c <_Bfree>
 8008740:	ee08 8a10 	vmov	s16, r8
 8008744:	9b07      	ldr	r3, [sp, #28]
 8008746:	1b9a      	subs	r2, r3, r6
 8008748:	d006      	beq.n	8008758 <_dtoa_r+0x7a0>
 800874a:	ee18 1a10 	vmov	r1, s16
 800874e:	4620      	mov	r0, r4
 8008750:	f000 fbe4 	bl	8008f1c <__pow5mult>
 8008754:	ee08 0a10 	vmov	s16, r0
 8008758:	2101      	movs	r1, #1
 800875a:	4620      	mov	r0, r4
 800875c:	f000 fb1e 	bl	8008d9c <__i2b>
 8008760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008762:	2b00      	cmp	r3, #0
 8008764:	4606      	mov	r6, r0
 8008766:	f340 8088 	ble.w	800887a <_dtoa_r+0x8c2>
 800876a:	461a      	mov	r2, r3
 800876c:	4601      	mov	r1, r0
 800876e:	4620      	mov	r0, r4
 8008770:	f000 fbd4 	bl	8008f1c <__pow5mult>
 8008774:	9b06      	ldr	r3, [sp, #24]
 8008776:	2b01      	cmp	r3, #1
 8008778:	4606      	mov	r6, r0
 800877a:	f340 8081 	ble.w	8008880 <_dtoa_r+0x8c8>
 800877e:	f04f 0800 	mov.w	r8, #0
 8008782:	6933      	ldr	r3, [r6, #16]
 8008784:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008788:	6918      	ldr	r0, [r3, #16]
 800878a:	f000 fab7 	bl	8008cfc <__hi0bits>
 800878e:	f1c0 0020 	rsb	r0, r0, #32
 8008792:	9b05      	ldr	r3, [sp, #20]
 8008794:	4418      	add	r0, r3
 8008796:	f010 001f 	ands.w	r0, r0, #31
 800879a:	f000 8092 	beq.w	80088c2 <_dtoa_r+0x90a>
 800879e:	f1c0 0320 	rsb	r3, r0, #32
 80087a2:	2b04      	cmp	r3, #4
 80087a4:	f340 808a 	ble.w	80088bc <_dtoa_r+0x904>
 80087a8:	f1c0 001c 	rsb	r0, r0, #28
 80087ac:	9b04      	ldr	r3, [sp, #16]
 80087ae:	4403      	add	r3, r0
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	9b05      	ldr	r3, [sp, #20]
 80087b4:	4403      	add	r3, r0
 80087b6:	4405      	add	r5, r0
 80087b8:	9305      	str	r3, [sp, #20]
 80087ba:	9b04      	ldr	r3, [sp, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	dd07      	ble.n	80087d0 <_dtoa_r+0x818>
 80087c0:	ee18 1a10 	vmov	r1, s16
 80087c4:	461a      	mov	r2, r3
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 fc02 	bl	8008fd0 <__lshift>
 80087cc:	ee08 0a10 	vmov	s16, r0
 80087d0:	9b05      	ldr	r3, [sp, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	dd05      	ble.n	80087e2 <_dtoa_r+0x82a>
 80087d6:	4631      	mov	r1, r6
 80087d8:	461a      	mov	r2, r3
 80087da:	4620      	mov	r0, r4
 80087dc:	f000 fbf8 	bl	8008fd0 <__lshift>
 80087e0:	4606      	mov	r6, r0
 80087e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d06e      	beq.n	80088c6 <_dtoa_r+0x90e>
 80087e8:	ee18 0a10 	vmov	r0, s16
 80087ec:	4631      	mov	r1, r6
 80087ee:	f000 fc5f 	bl	80090b0 <__mcmp>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	da67      	bge.n	80088c6 <_dtoa_r+0x90e>
 80087f6:	9b00      	ldr	r3, [sp, #0]
 80087f8:	3b01      	subs	r3, #1
 80087fa:	ee18 1a10 	vmov	r1, s16
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	220a      	movs	r2, #10
 8008802:	2300      	movs	r3, #0
 8008804:	4620      	mov	r0, r4
 8008806:	f000 fa33 	bl	8008c70 <__multadd>
 800880a:	9b08      	ldr	r3, [sp, #32]
 800880c:	ee08 0a10 	vmov	s16, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 81b1 	beq.w	8008b78 <_dtoa_r+0xbc0>
 8008816:	2300      	movs	r3, #0
 8008818:	4639      	mov	r1, r7
 800881a:	220a      	movs	r2, #10
 800881c:	4620      	mov	r0, r4
 800881e:	f000 fa27 	bl	8008c70 <__multadd>
 8008822:	9b02      	ldr	r3, [sp, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	4607      	mov	r7, r0
 8008828:	f300 808e 	bgt.w	8008948 <_dtoa_r+0x990>
 800882c:	9b06      	ldr	r3, [sp, #24]
 800882e:	2b02      	cmp	r3, #2
 8008830:	dc51      	bgt.n	80088d6 <_dtoa_r+0x91e>
 8008832:	e089      	b.n	8008948 <_dtoa_r+0x990>
 8008834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800883a:	e74b      	b.n	80086d4 <_dtoa_r+0x71c>
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	1e5e      	subs	r6, r3, #1
 8008840:	9b07      	ldr	r3, [sp, #28]
 8008842:	42b3      	cmp	r3, r6
 8008844:	bfbf      	itttt	lt
 8008846:	9b07      	ldrlt	r3, [sp, #28]
 8008848:	9607      	strlt	r6, [sp, #28]
 800884a:	1af2      	sublt	r2, r6, r3
 800884c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800884e:	bfb6      	itet	lt
 8008850:	189b      	addlt	r3, r3, r2
 8008852:	1b9e      	subge	r6, r3, r6
 8008854:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008856:	9b03      	ldr	r3, [sp, #12]
 8008858:	bfb8      	it	lt
 800885a:	2600      	movlt	r6, #0
 800885c:	2b00      	cmp	r3, #0
 800885e:	bfb7      	itett	lt
 8008860:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008864:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008868:	1a9d      	sublt	r5, r3, r2
 800886a:	2300      	movlt	r3, #0
 800886c:	e734      	b.n	80086d8 <_dtoa_r+0x720>
 800886e:	9e07      	ldr	r6, [sp, #28]
 8008870:	9d04      	ldr	r5, [sp, #16]
 8008872:	9f08      	ldr	r7, [sp, #32]
 8008874:	e73b      	b.n	80086ee <_dtoa_r+0x736>
 8008876:	9a07      	ldr	r2, [sp, #28]
 8008878:	e767      	b.n	800874a <_dtoa_r+0x792>
 800887a:	9b06      	ldr	r3, [sp, #24]
 800887c:	2b01      	cmp	r3, #1
 800887e:	dc18      	bgt.n	80088b2 <_dtoa_r+0x8fa>
 8008880:	f1ba 0f00 	cmp.w	sl, #0
 8008884:	d115      	bne.n	80088b2 <_dtoa_r+0x8fa>
 8008886:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800888a:	b993      	cbnz	r3, 80088b2 <_dtoa_r+0x8fa>
 800888c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008890:	0d1b      	lsrs	r3, r3, #20
 8008892:	051b      	lsls	r3, r3, #20
 8008894:	b183      	cbz	r3, 80088b8 <_dtoa_r+0x900>
 8008896:	9b04      	ldr	r3, [sp, #16]
 8008898:	3301      	adds	r3, #1
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	9b05      	ldr	r3, [sp, #20]
 800889e:	3301      	adds	r3, #1
 80088a0:	9305      	str	r3, [sp, #20]
 80088a2:	f04f 0801 	mov.w	r8, #1
 80088a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f47f af6a 	bne.w	8008782 <_dtoa_r+0x7ca>
 80088ae:	2001      	movs	r0, #1
 80088b0:	e76f      	b.n	8008792 <_dtoa_r+0x7da>
 80088b2:	f04f 0800 	mov.w	r8, #0
 80088b6:	e7f6      	b.n	80088a6 <_dtoa_r+0x8ee>
 80088b8:	4698      	mov	r8, r3
 80088ba:	e7f4      	b.n	80088a6 <_dtoa_r+0x8ee>
 80088bc:	f43f af7d 	beq.w	80087ba <_dtoa_r+0x802>
 80088c0:	4618      	mov	r0, r3
 80088c2:	301c      	adds	r0, #28
 80088c4:	e772      	b.n	80087ac <_dtoa_r+0x7f4>
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	dc37      	bgt.n	800893c <_dtoa_r+0x984>
 80088cc:	9b06      	ldr	r3, [sp, #24]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	dd34      	ble.n	800893c <_dtoa_r+0x984>
 80088d2:	9b03      	ldr	r3, [sp, #12]
 80088d4:	9302      	str	r3, [sp, #8]
 80088d6:	9b02      	ldr	r3, [sp, #8]
 80088d8:	b96b      	cbnz	r3, 80088f6 <_dtoa_r+0x93e>
 80088da:	4631      	mov	r1, r6
 80088dc:	2205      	movs	r2, #5
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 f9c6 	bl	8008c70 <__multadd>
 80088e4:	4601      	mov	r1, r0
 80088e6:	4606      	mov	r6, r0
 80088e8:	ee18 0a10 	vmov	r0, s16
 80088ec:	f000 fbe0 	bl	80090b0 <__mcmp>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	f73f adbb 	bgt.w	800846c <_dtoa_r+0x4b4>
 80088f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f8:	9d01      	ldr	r5, [sp, #4]
 80088fa:	43db      	mvns	r3, r3
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	f04f 0800 	mov.w	r8, #0
 8008902:	4631      	mov	r1, r6
 8008904:	4620      	mov	r0, r4
 8008906:	f000 f991 	bl	8008c2c <_Bfree>
 800890a:	2f00      	cmp	r7, #0
 800890c:	f43f aea4 	beq.w	8008658 <_dtoa_r+0x6a0>
 8008910:	f1b8 0f00 	cmp.w	r8, #0
 8008914:	d005      	beq.n	8008922 <_dtoa_r+0x96a>
 8008916:	45b8      	cmp	r8, r7
 8008918:	d003      	beq.n	8008922 <_dtoa_r+0x96a>
 800891a:	4641      	mov	r1, r8
 800891c:	4620      	mov	r0, r4
 800891e:	f000 f985 	bl	8008c2c <_Bfree>
 8008922:	4639      	mov	r1, r7
 8008924:	4620      	mov	r0, r4
 8008926:	f000 f981 	bl	8008c2c <_Bfree>
 800892a:	e695      	b.n	8008658 <_dtoa_r+0x6a0>
 800892c:	2600      	movs	r6, #0
 800892e:	4637      	mov	r7, r6
 8008930:	e7e1      	b.n	80088f6 <_dtoa_r+0x93e>
 8008932:	9700      	str	r7, [sp, #0]
 8008934:	4637      	mov	r7, r6
 8008936:	e599      	b.n	800846c <_dtoa_r+0x4b4>
 8008938:	40240000 	.word	0x40240000
 800893c:	9b08      	ldr	r3, [sp, #32]
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 80ca 	beq.w	8008ad8 <_dtoa_r+0xb20>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	9302      	str	r3, [sp, #8]
 8008948:	2d00      	cmp	r5, #0
 800894a:	dd05      	ble.n	8008958 <_dtoa_r+0x9a0>
 800894c:	4639      	mov	r1, r7
 800894e:	462a      	mov	r2, r5
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fb3d 	bl	8008fd0 <__lshift>
 8008956:	4607      	mov	r7, r0
 8008958:	f1b8 0f00 	cmp.w	r8, #0
 800895c:	d05b      	beq.n	8008a16 <_dtoa_r+0xa5e>
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	4620      	mov	r0, r4
 8008962:	f000 f923 	bl	8008bac <_Balloc>
 8008966:	4605      	mov	r5, r0
 8008968:	b928      	cbnz	r0, 8008976 <_dtoa_r+0x9be>
 800896a:	4b87      	ldr	r3, [pc, #540]	; (8008b88 <_dtoa_r+0xbd0>)
 800896c:	4602      	mov	r2, r0
 800896e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008972:	f7ff bb3b 	b.w	8007fec <_dtoa_r+0x34>
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	3202      	adds	r2, #2
 800897a:	0092      	lsls	r2, r2, #2
 800897c:	f107 010c 	add.w	r1, r7, #12
 8008980:	300c      	adds	r0, #12
 8008982:	f7fe fdd9 	bl	8007538 <memcpy>
 8008986:	2201      	movs	r2, #1
 8008988:	4629      	mov	r1, r5
 800898a:	4620      	mov	r0, r4
 800898c:	f000 fb20 	bl	8008fd0 <__lshift>
 8008990:	9b01      	ldr	r3, [sp, #4]
 8008992:	f103 0901 	add.w	r9, r3, #1
 8008996:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800899a:	4413      	add	r3, r2
 800899c:	9305      	str	r3, [sp, #20]
 800899e:	f00a 0301 	and.w	r3, sl, #1
 80089a2:	46b8      	mov	r8, r7
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	4607      	mov	r7, r0
 80089a8:	4631      	mov	r1, r6
 80089aa:	ee18 0a10 	vmov	r0, s16
 80089ae:	f7ff fa77 	bl	8007ea0 <quorem>
 80089b2:	4641      	mov	r1, r8
 80089b4:	9002      	str	r0, [sp, #8]
 80089b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089ba:	ee18 0a10 	vmov	r0, s16
 80089be:	f000 fb77 	bl	80090b0 <__mcmp>
 80089c2:	463a      	mov	r2, r7
 80089c4:	9003      	str	r0, [sp, #12]
 80089c6:	4631      	mov	r1, r6
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 fb8d 	bl	80090e8 <__mdiff>
 80089ce:	68c2      	ldr	r2, [r0, #12]
 80089d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80089d4:	4605      	mov	r5, r0
 80089d6:	bb02      	cbnz	r2, 8008a1a <_dtoa_r+0xa62>
 80089d8:	4601      	mov	r1, r0
 80089da:	ee18 0a10 	vmov	r0, s16
 80089de:	f000 fb67 	bl	80090b0 <__mcmp>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4629      	mov	r1, r5
 80089e6:	4620      	mov	r0, r4
 80089e8:	9207      	str	r2, [sp, #28]
 80089ea:	f000 f91f 	bl	8008c2c <_Bfree>
 80089ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089f2:	ea43 0102 	orr.w	r1, r3, r2
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	430b      	orrs	r3, r1
 80089fa:	464d      	mov	r5, r9
 80089fc:	d10f      	bne.n	8008a1e <_dtoa_r+0xa66>
 80089fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a02:	d02a      	beq.n	8008a5a <_dtoa_r+0xaa2>
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dd02      	ble.n	8008a10 <_dtoa_r+0xa58>
 8008a0a:	9b02      	ldr	r3, [sp, #8]
 8008a0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008a10:	f88b a000 	strb.w	sl, [fp]
 8008a14:	e775      	b.n	8008902 <_dtoa_r+0x94a>
 8008a16:	4638      	mov	r0, r7
 8008a18:	e7ba      	b.n	8008990 <_dtoa_r+0x9d8>
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	e7e2      	b.n	80089e4 <_dtoa_r+0xa2c>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	db04      	blt.n	8008a2e <_dtoa_r+0xa76>
 8008a24:	9906      	ldr	r1, [sp, #24]
 8008a26:	430b      	orrs	r3, r1
 8008a28:	9904      	ldr	r1, [sp, #16]
 8008a2a:	430b      	orrs	r3, r1
 8008a2c:	d122      	bne.n	8008a74 <_dtoa_r+0xabc>
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	ddee      	ble.n	8008a10 <_dtoa_r+0xa58>
 8008a32:	ee18 1a10 	vmov	r1, s16
 8008a36:	2201      	movs	r2, #1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fac9 	bl	8008fd0 <__lshift>
 8008a3e:	4631      	mov	r1, r6
 8008a40:	ee08 0a10 	vmov	s16, r0
 8008a44:	f000 fb34 	bl	80090b0 <__mcmp>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	dc03      	bgt.n	8008a54 <_dtoa_r+0xa9c>
 8008a4c:	d1e0      	bne.n	8008a10 <_dtoa_r+0xa58>
 8008a4e:	f01a 0f01 	tst.w	sl, #1
 8008a52:	d0dd      	beq.n	8008a10 <_dtoa_r+0xa58>
 8008a54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a58:	d1d7      	bne.n	8008a0a <_dtoa_r+0xa52>
 8008a5a:	2339      	movs	r3, #57	; 0x39
 8008a5c:	f88b 3000 	strb.w	r3, [fp]
 8008a60:	462b      	mov	r3, r5
 8008a62:	461d      	mov	r5, r3
 8008a64:	3b01      	subs	r3, #1
 8008a66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a6a:	2a39      	cmp	r2, #57	; 0x39
 8008a6c:	d071      	beq.n	8008b52 <_dtoa_r+0xb9a>
 8008a6e:	3201      	adds	r2, #1
 8008a70:	701a      	strb	r2, [r3, #0]
 8008a72:	e746      	b.n	8008902 <_dtoa_r+0x94a>
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	dd07      	ble.n	8008a88 <_dtoa_r+0xad0>
 8008a78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a7c:	d0ed      	beq.n	8008a5a <_dtoa_r+0xaa2>
 8008a7e:	f10a 0301 	add.w	r3, sl, #1
 8008a82:	f88b 3000 	strb.w	r3, [fp]
 8008a86:	e73c      	b.n	8008902 <_dtoa_r+0x94a>
 8008a88:	9b05      	ldr	r3, [sp, #20]
 8008a8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a8e:	4599      	cmp	r9, r3
 8008a90:	d047      	beq.n	8008b22 <_dtoa_r+0xb6a>
 8008a92:	ee18 1a10 	vmov	r1, s16
 8008a96:	2300      	movs	r3, #0
 8008a98:	220a      	movs	r2, #10
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 f8e8 	bl	8008c70 <__multadd>
 8008aa0:	45b8      	cmp	r8, r7
 8008aa2:	ee08 0a10 	vmov	s16, r0
 8008aa6:	f04f 0300 	mov.w	r3, #0
 8008aaa:	f04f 020a 	mov.w	r2, #10
 8008aae:	4641      	mov	r1, r8
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	d106      	bne.n	8008ac2 <_dtoa_r+0xb0a>
 8008ab4:	f000 f8dc 	bl	8008c70 <__multadd>
 8008ab8:	4680      	mov	r8, r0
 8008aba:	4607      	mov	r7, r0
 8008abc:	f109 0901 	add.w	r9, r9, #1
 8008ac0:	e772      	b.n	80089a8 <_dtoa_r+0x9f0>
 8008ac2:	f000 f8d5 	bl	8008c70 <__multadd>
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	4680      	mov	r8, r0
 8008aca:	2300      	movs	r3, #0
 8008acc:	220a      	movs	r2, #10
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 f8ce 	bl	8008c70 <__multadd>
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	e7f1      	b.n	8008abc <_dtoa_r+0xb04>
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	9302      	str	r3, [sp, #8]
 8008adc:	9d01      	ldr	r5, [sp, #4]
 8008ade:	ee18 0a10 	vmov	r0, s16
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	f7ff f9dc 	bl	8007ea0 <quorem>
 8008ae8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008aec:	9b01      	ldr	r3, [sp, #4]
 8008aee:	f805 ab01 	strb.w	sl, [r5], #1
 8008af2:	1aea      	subs	r2, r5, r3
 8008af4:	9b02      	ldr	r3, [sp, #8]
 8008af6:	4293      	cmp	r3, r2
 8008af8:	dd09      	ble.n	8008b0e <_dtoa_r+0xb56>
 8008afa:	ee18 1a10 	vmov	r1, s16
 8008afe:	2300      	movs	r3, #0
 8008b00:	220a      	movs	r2, #10
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 f8b4 	bl	8008c70 <__multadd>
 8008b08:	ee08 0a10 	vmov	s16, r0
 8008b0c:	e7e7      	b.n	8008ade <_dtoa_r+0xb26>
 8008b0e:	9b02      	ldr	r3, [sp, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bfc8      	it	gt
 8008b14:	461d      	movgt	r5, r3
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	bfd8      	it	le
 8008b1a:	2501      	movle	r5, #1
 8008b1c:	441d      	add	r5, r3
 8008b1e:	f04f 0800 	mov.w	r8, #0
 8008b22:	ee18 1a10 	vmov	r1, s16
 8008b26:	2201      	movs	r2, #1
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fa51 	bl	8008fd0 <__lshift>
 8008b2e:	4631      	mov	r1, r6
 8008b30:	ee08 0a10 	vmov	s16, r0
 8008b34:	f000 fabc 	bl	80090b0 <__mcmp>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	dc91      	bgt.n	8008a60 <_dtoa_r+0xaa8>
 8008b3c:	d102      	bne.n	8008b44 <_dtoa_r+0xb8c>
 8008b3e:	f01a 0f01 	tst.w	sl, #1
 8008b42:	d18d      	bne.n	8008a60 <_dtoa_r+0xaa8>
 8008b44:	462b      	mov	r3, r5
 8008b46:	461d      	mov	r5, r3
 8008b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b4c:	2a30      	cmp	r2, #48	; 0x30
 8008b4e:	d0fa      	beq.n	8008b46 <_dtoa_r+0xb8e>
 8008b50:	e6d7      	b.n	8008902 <_dtoa_r+0x94a>
 8008b52:	9a01      	ldr	r2, [sp, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d184      	bne.n	8008a62 <_dtoa_r+0xaaa>
 8008b58:	9b00      	ldr	r3, [sp, #0]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	2331      	movs	r3, #49	; 0x31
 8008b60:	7013      	strb	r3, [r2, #0]
 8008b62:	e6ce      	b.n	8008902 <_dtoa_r+0x94a>
 8008b64:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <_dtoa_r+0xbd4>)
 8008b66:	f7ff ba95 	b.w	8008094 <_dtoa_r+0xdc>
 8008b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f47f aa6e 	bne.w	800804e <_dtoa_r+0x96>
 8008b72:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <_dtoa_r+0xbd8>)
 8008b74:	f7ff ba8e 	b.w	8008094 <_dtoa_r+0xdc>
 8008b78:	9b02      	ldr	r3, [sp, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	dcae      	bgt.n	8008adc <_dtoa_r+0xb24>
 8008b7e:	9b06      	ldr	r3, [sp, #24]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	f73f aea8 	bgt.w	80088d6 <_dtoa_r+0x91e>
 8008b86:	e7a9      	b.n	8008adc <_dtoa_r+0xb24>
 8008b88:	0800c023 	.word	0x0800c023
 8008b8c:	0800bf80 	.word	0x0800bf80
 8008b90:	0800bfa4 	.word	0x0800bfa4

08008b94 <_localeconv_r>:
 8008b94:	4800      	ldr	r0, [pc, #0]	; (8008b98 <_localeconv_r+0x4>)
 8008b96:	4770      	bx	lr
 8008b98:	20000170 	.word	0x20000170

08008b9c <malloc>:
 8008b9c:	4b02      	ldr	r3, [pc, #8]	; (8008ba8 <malloc+0xc>)
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	f000 bc09 	b.w	80093b8 <_malloc_r>
 8008ba6:	bf00      	nop
 8008ba8:	2000001c 	.word	0x2000001c

08008bac <_Balloc>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	b976      	cbnz	r6, 8008bd4 <_Balloc+0x28>
 8008bb6:	2010      	movs	r0, #16
 8008bb8:	f7ff fff0 	bl	8008b9c <malloc>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6260      	str	r0, [r4, #36]	; 0x24
 8008bc0:	b920      	cbnz	r0, 8008bcc <_Balloc+0x20>
 8008bc2:	4b18      	ldr	r3, [pc, #96]	; (8008c24 <_Balloc+0x78>)
 8008bc4:	4818      	ldr	r0, [pc, #96]	; (8008c28 <_Balloc+0x7c>)
 8008bc6:	2166      	movs	r1, #102	; 0x66
 8008bc8:	f000 fdd6 	bl	8009778 <__assert_func>
 8008bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bd0:	6006      	str	r6, [r0, #0]
 8008bd2:	60c6      	str	r6, [r0, #12]
 8008bd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bd6:	68f3      	ldr	r3, [r6, #12]
 8008bd8:	b183      	cbz	r3, 8008bfc <_Balloc+0x50>
 8008bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008be2:	b9b8      	cbnz	r0, 8008c14 <_Balloc+0x68>
 8008be4:	2101      	movs	r1, #1
 8008be6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bea:	1d72      	adds	r2, r6, #5
 8008bec:	0092      	lsls	r2, r2, #2
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 fb60 	bl	80092b4 <_calloc_r>
 8008bf4:	b160      	cbz	r0, 8008c10 <_Balloc+0x64>
 8008bf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bfa:	e00e      	b.n	8008c1a <_Balloc+0x6e>
 8008bfc:	2221      	movs	r2, #33	; 0x21
 8008bfe:	2104      	movs	r1, #4
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 fb57 	bl	80092b4 <_calloc_r>
 8008c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c08:	60f0      	str	r0, [r6, #12]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e4      	bne.n	8008bda <_Balloc+0x2e>
 8008c10:	2000      	movs	r0, #0
 8008c12:	bd70      	pop	{r4, r5, r6, pc}
 8008c14:	6802      	ldr	r2, [r0, #0]
 8008c16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c20:	e7f7      	b.n	8008c12 <_Balloc+0x66>
 8008c22:	bf00      	nop
 8008c24:	0800bfb1 	.word	0x0800bfb1
 8008c28:	0800c034 	.word	0x0800c034

08008c2c <_Bfree>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c30:	4605      	mov	r5, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	b976      	cbnz	r6, 8008c54 <_Bfree+0x28>
 8008c36:	2010      	movs	r0, #16
 8008c38:	f7ff ffb0 	bl	8008b9c <malloc>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	6268      	str	r0, [r5, #36]	; 0x24
 8008c40:	b920      	cbnz	r0, 8008c4c <_Bfree+0x20>
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <_Bfree+0x3c>)
 8008c44:	4809      	ldr	r0, [pc, #36]	; (8008c6c <_Bfree+0x40>)
 8008c46:	218a      	movs	r1, #138	; 0x8a
 8008c48:	f000 fd96 	bl	8009778 <__assert_func>
 8008c4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c50:	6006      	str	r6, [r0, #0]
 8008c52:	60c6      	str	r6, [r0, #12]
 8008c54:	b13c      	cbz	r4, 8008c66 <_Bfree+0x3a>
 8008c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c60:	6021      	str	r1, [r4, #0]
 8008c62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	0800bfb1 	.word	0x0800bfb1
 8008c6c:	0800c034 	.word	0x0800c034

08008c70 <__multadd>:
 8008c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c74:	690d      	ldr	r5, [r1, #16]
 8008c76:	4607      	mov	r7, r0
 8008c78:	460c      	mov	r4, r1
 8008c7a:	461e      	mov	r6, r3
 8008c7c:	f101 0c14 	add.w	ip, r1, #20
 8008c80:	2000      	movs	r0, #0
 8008c82:	f8dc 3000 	ldr.w	r3, [ip]
 8008c86:	b299      	uxth	r1, r3
 8008c88:	fb02 6101 	mla	r1, r2, r1, r6
 8008c8c:	0c1e      	lsrs	r6, r3, #16
 8008c8e:	0c0b      	lsrs	r3, r1, #16
 8008c90:	fb02 3306 	mla	r3, r2, r6, r3
 8008c94:	b289      	uxth	r1, r1
 8008c96:	3001      	adds	r0, #1
 8008c98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c9c:	4285      	cmp	r5, r0
 8008c9e:	f84c 1b04 	str.w	r1, [ip], #4
 8008ca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ca6:	dcec      	bgt.n	8008c82 <__multadd+0x12>
 8008ca8:	b30e      	cbz	r6, 8008cee <__multadd+0x7e>
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	42ab      	cmp	r3, r5
 8008cae:	dc19      	bgt.n	8008ce4 <__multadd+0x74>
 8008cb0:	6861      	ldr	r1, [r4, #4]
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	3101      	adds	r1, #1
 8008cb6:	f7ff ff79 	bl	8008bac <_Balloc>
 8008cba:	4680      	mov	r8, r0
 8008cbc:	b928      	cbnz	r0, 8008cca <__multadd+0x5a>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	4b0c      	ldr	r3, [pc, #48]	; (8008cf4 <__multadd+0x84>)
 8008cc2:	480d      	ldr	r0, [pc, #52]	; (8008cf8 <__multadd+0x88>)
 8008cc4:	21b5      	movs	r1, #181	; 0xb5
 8008cc6:	f000 fd57 	bl	8009778 <__assert_func>
 8008cca:	6922      	ldr	r2, [r4, #16]
 8008ccc:	3202      	adds	r2, #2
 8008cce:	f104 010c 	add.w	r1, r4, #12
 8008cd2:	0092      	lsls	r2, r2, #2
 8008cd4:	300c      	adds	r0, #12
 8008cd6:	f7fe fc2f 	bl	8007538 <memcpy>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff ffa5 	bl	8008c2c <_Bfree>
 8008ce2:	4644      	mov	r4, r8
 8008ce4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ce8:	3501      	adds	r5, #1
 8008cea:	615e      	str	r6, [r3, #20]
 8008cec:	6125      	str	r5, [r4, #16]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf4:	0800c023 	.word	0x0800c023
 8008cf8:	0800c034 	.word	0x0800c034

08008cfc <__hi0bits>:
 8008cfc:	0c03      	lsrs	r3, r0, #16
 8008cfe:	041b      	lsls	r3, r3, #16
 8008d00:	b9d3      	cbnz	r3, 8008d38 <__hi0bits+0x3c>
 8008d02:	0400      	lsls	r0, r0, #16
 8008d04:	2310      	movs	r3, #16
 8008d06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d0a:	bf04      	itt	eq
 8008d0c:	0200      	lsleq	r0, r0, #8
 8008d0e:	3308      	addeq	r3, #8
 8008d10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d14:	bf04      	itt	eq
 8008d16:	0100      	lsleq	r0, r0, #4
 8008d18:	3304      	addeq	r3, #4
 8008d1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d1e:	bf04      	itt	eq
 8008d20:	0080      	lsleq	r0, r0, #2
 8008d22:	3302      	addeq	r3, #2
 8008d24:	2800      	cmp	r0, #0
 8008d26:	db05      	blt.n	8008d34 <__hi0bits+0x38>
 8008d28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d2c:	f103 0301 	add.w	r3, r3, #1
 8008d30:	bf08      	it	eq
 8008d32:	2320      	moveq	r3, #32
 8008d34:	4618      	mov	r0, r3
 8008d36:	4770      	bx	lr
 8008d38:	2300      	movs	r3, #0
 8008d3a:	e7e4      	b.n	8008d06 <__hi0bits+0xa>

08008d3c <__lo0bits>:
 8008d3c:	6803      	ldr	r3, [r0, #0]
 8008d3e:	f013 0207 	ands.w	r2, r3, #7
 8008d42:	4601      	mov	r1, r0
 8008d44:	d00b      	beq.n	8008d5e <__lo0bits+0x22>
 8008d46:	07da      	lsls	r2, r3, #31
 8008d48:	d423      	bmi.n	8008d92 <__lo0bits+0x56>
 8008d4a:	0798      	lsls	r0, r3, #30
 8008d4c:	bf49      	itett	mi
 8008d4e:	085b      	lsrmi	r3, r3, #1
 8008d50:	089b      	lsrpl	r3, r3, #2
 8008d52:	2001      	movmi	r0, #1
 8008d54:	600b      	strmi	r3, [r1, #0]
 8008d56:	bf5c      	itt	pl
 8008d58:	600b      	strpl	r3, [r1, #0]
 8008d5a:	2002      	movpl	r0, #2
 8008d5c:	4770      	bx	lr
 8008d5e:	b298      	uxth	r0, r3
 8008d60:	b9a8      	cbnz	r0, 8008d8e <__lo0bits+0x52>
 8008d62:	0c1b      	lsrs	r3, r3, #16
 8008d64:	2010      	movs	r0, #16
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	b90a      	cbnz	r2, 8008d6e <__lo0bits+0x32>
 8008d6a:	3008      	adds	r0, #8
 8008d6c:	0a1b      	lsrs	r3, r3, #8
 8008d6e:	071a      	lsls	r2, r3, #28
 8008d70:	bf04      	itt	eq
 8008d72:	091b      	lsreq	r3, r3, #4
 8008d74:	3004      	addeq	r0, #4
 8008d76:	079a      	lsls	r2, r3, #30
 8008d78:	bf04      	itt	eq
 8008d7a:	089b      	lsreq	r3, r3, #2
 8008d7c:	3002      	addeq	r0, #2
 8008d7e:	07da      	lsls	r2, r3, #31
 8008d80:	d403      	bmi.n	8008d8a <__lo0bits+0x4e>
 8008d82:	085b      	lsrs	r3, r3, #1
 8008d84:	f100 0001 	add.w	r0, r0, #1
 8008d88:	d005      	beq.n	8008d96 <__lo0bits+0x5a>
 8008d8a:	600b      	str	r3, [r1, #0]
 8008d8c:	4770      	bx	lr
 8008d8e:	4610      	mov	r0, r2
 8008d90:	e7e9      	b.n	8008d66 <__lo0bits+0x2a>
 8008d92:	2000      	movs	r0, #0
 8008d94:	4770      	bx	lr
 8008d96:	2020      	movs	r0, #32
 8008d98:	4770      	bx	lr
	...

08008d9c <__i2b>:
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	460c      	mov	r4, r1
 8008da0:	2101      	movs	r1, #1
 8008da2:	f7ff ff03 	bl	8008bac <_Balloc>
 8008da6:	4602      	mov	r2, r0
 8008da8:	b928      	cbnz	r0, 8008db6 <__i2b+0x1a>
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <__i2b+0x24>)
 8008dac:	4805      	ldr	r0, [pc, #20]	; (8008dc4 <__i2b+0x28>)
 8008dae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008db2:	f000 fce1 	bl	8009778 <__assert_func>
 8008db6:	2301      	movs	r3, #1
 8008db8:	6144      	str	r4, [r0, #20]
 8008dba:	6103      	str	r3, [r0, #16]
 8008dbc:	bd10      	pop	{r4, pc}
 8008dbe:	bf00      	nop
 8008dc0:	0800c023 	.word	0x0800c023
 8008dc4:	0800c034 	.word	0x0800c034

08008dc8 <__multiply>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	4691      	mov	r9, r2
 8008dce:	690a      	ldr	r2, [r1, #16]
 8008dd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	bfb8      	it	lt
 8008dd8:	460b      	movlt	r3, r1
 8008dda:	460c      	mov	r4, r1
 8008ddc:	bfbc      	itt	lt
 8008dde:	464c      	movlt	r4, r9
 8008de0:	4699      	movlt	r9, r3
 8008de2:	6927      	ldr	r7, [r4, #16]
 8008de4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008de8:	68a3      	ldr	r3, [r4, #8]
 8008dea:	6861      	ldr	r1, [r4, #4]
 8008dec:	eb07 060a 	add.w	r6, r7, sl
 8008df0:	42b3      	cmp	r3, r6
 8008df2:	b085      	sub	sp, #20
 8008df4:	bfb8      	it	lt
 8008df6:	3101      	addlt	r1, #1
 8008df8:	f7ff fed8 	bl	8008bac <_Balloc>
 8008dfc:	b930      	cbnz	r0, 8008e0c <__multiply+0x44>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	4b44      	ldr	r3, [pc, #272]	; (8008f14 <__multiply+0x14c>)
 8008e02:	4845      	ldr	r0, [pc, #276]	; (8008f18 <__multiply+0x150>)
 8008e04:	f240 115d 	movw	r1, #349	; 0x15d
 8008e08:	f000 fcb6 	bl	8009778 <__assert_func>
 8008e0c:	f100 0514 	add.w	r5, r0, #20
 8008e10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e14:	462b      	mov	r3, r5
 8008e16:	2200      	movs	r2, #0
 8008e18:	4543      	cmp	r3, r8
 8008e1a:	d321      	bcc.n	8008e60 <__multiply+0x98>
 8008e1c:	f104 0314 	add.w	r3, r4, #20
 8008e20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e24:	f109 0314 	add.w	r3, r9, #20
 8008e28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e2c:	9202      	str	r2, [sp, #8]
 8008e2e:	1b3a      	subs	r2, r7, r4
 8008e30:	3a15      	subs	r2, #21
 8008e32:	f022 0203 	bic.w	r2, r2, #3
 8008e36:	3204      	adds	r2, #4
 8008e38:	f104 0115 	add.w	r1, r4, #21
 8008e3c:	428f      	cmp	r7, r1
 8008e3e:	bf38      	it	cc
 8008e40:	2204      	movcc	r2, #4
 8008e42:	9201      	str	r2, [sp, #4]
 8008e44:	9a02      	ldr	r2, [sp, #8]
 8008e46:	9303      	str	r3, [sp, #12]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d80c      	bhi.n	8008e66 <__multiply+0x9e>
 8008e4c:	2e00      	cmp	r6, #0
 8008e4e:	dd03      	ble.n	8008e58 <__multiply+0x90>
 8008e50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d05a      	beq.n	8008f0e <__multiply+0x146>
 8008e58:	6106      	str	r6, [r0, #16]
 8008e5a:	b005      	add	sp, #20
 8008e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e60:	f843 2b04 	str.w	r2, [r3], #4
 8008e64:	e7d8      	b.n	8008e18 <__multiply+0x50>
 8008e66:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e6a:	f1ba 0f00 	cmp.w	sl, #0
 8008e6e:	d024      	beq.n	8008eba <__multiply+0xf2>
 8008e70:	f104 0e14 	add.w	lr, r4, #20
 8008e74:	46a9      	mov	r9, r5
 8008e76:	f04f 0c00 	mov.w	ip, #0
 8008e7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e7e:	f8d9 1000 	ldr.w	r1, [r9]
 8008e82:	fa1f fb82 	uxth.w	fp, r2
 8008e86:	b289      	uxth	r1, r1
 8008e88:	fb0a 110b 	mla	r1, sl, fp, r1
 8008e8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008e90:	f8d9 2000 	ldr.w	r2, [r9]
 8008e94:	4461      	add	r1, ip
 8008e96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008e9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008e9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ea2:	b289      	uxth	r1, r1
 8008ea4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ea8:	4577      	cmp	r7, lr
 8008eaa:	f849 1b04 	str.w	r1, [r9], #4
 8008eae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008eb2:	d8e2      	bhi.n	8008e7a <__multiply+0xb2>
 8008eb4:	9a01      	ldr	r2, [sp, #4]
 8008eb6:	f845 c002 	str.w	ip, [r5, r2]
 8008eba:	9a03      	ldr	r2, [sp, #12]
 8008ebc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	f1b9 0f00 	cmp.w	r9, #0
 8008ec6:	d020      	beq.n	8008f0a <__multiply+0x142>
 8008ec8:	6829      	ldr	r1, [r5, #0]
 8008eca:	f104 0c14 	add.w	ip, r4, #20
 8008ece:	46ae      	mov	lr, r5
 8008ed0:	f04f 0a00 	mov.w	sl, #0
 8008ed4:	f8bc b000 	ldrh.w	fp, [ip]
 8008ed8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008edc:	fb09 220b 	mla	r2, r9, fp, r2
 8008ee0:	4492      	add	sl, r2
 8008ee2:	b289      	uxth	r1, r1
 8008ee4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ee8:	f84e 1b04 	str.w	r1, [lr], #4
 8008eec:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ef0:	f8be 1000 	ldrh.w	r1, [lr]
 8008ef4:	0c12      	lsrs	r2, r2, #16
 8008ef6:	fb09 1102 	mla	r1, r9, r2, r1
 8008efa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008efe:	4567      	cmp	r7, ip
 8008f00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f04:	d8e6      	bhi.n	8008ed4 <__multiply+0x10c>
 8008f06:	9a01      	ldr	r2, [sp, #4]
 8008f08:	50a9      	str	r1, [r5, r2]
 8008f0a:	3504      	adds	r5, #4
 8008f0c:	e79a      	b.n	8008e44 <__multiply+0x7c>
 8008f0e:	3e01      	subs	r6, #1
 8008f10:	e79c      	b.n	8008e4c <__multiply+0x84>
 8008f12:	bf00      	nop
 8008f14:	0800c023 	.word	0x0800c023
 8008f18:	0800c034 	.word	0x0800c034

08008f1c <__pow5mult>:
 8008f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f20:	4615      	mov	r5, r2
 8008f22:	f012 0203 	ands.w	r2, r2, #3
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	d007      	beq.n	8008f3c <__pow5mult+0x20>
 8008f2c:	4c25      	ldr	r4, [pc, #148]	; (8008fc4 <__pow5mult+0xa8>)
 8008f2e:	3a01      	subs	r2, #1
 8008f30:	2300      	movs	r3, #0
 8008f32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f36:	f7ff fe9b 	bl	8008c70 <__multadd>
 8008f3a:	4607      	mov	r7, r0
 8008f3c:	10ad      	asrs	r5, r5, #2
 8008f3e:	d03d      	beq.n	8008fbc <__pow5mult+0xa0>
 8008f40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f42:	b97c      	cbnz	r4, 8008f64 <__pow5mult+0x48>
 8008f44:	2010      	movs	r0, #16
 8008f46:	f7ff fe29 	bl	8008b9c <malloc>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	6270      	str	r0, [r6, #36]	; 0x24
 8008f4e:	b928      	cbnz	r0, 8008f5c <__pow5mult+0x40>
 8008f50:	4b1d      	ldr	r3, [pc, #116]	; (8008fc8 <__pow5mult+0xac>)
 8008f52:	481e      	ldr	r0, [pc, #120]	; (8008fcc <__pow5mult+0xb0>)
 8008f54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f58:	f000 fc0e 	bl	8009778 <__assert_func>
 8008f5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f60:	6004      	str	r4, [r0, #0]
 8008f62:	60c4      	str	r4, [r0, #12]
 8008f64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f6c:	b94c      	cbnz	r4, 8008f82 <__pow5mult+0x66>
 8008f6e:	f240 2171 	movw	r1, #625	; 0x271
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7ff ff12 	bl	8008d9c <__i2b>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f7e:	4604      	mov	r4, r0
 8008f80:	6003      	str	r3, [r0, #0]
 8008f82:	f04f 0900 	mov.w	r9, #0
 8008f86:	07eb      	lsls	r3, r5, #31
 8008f88:	d50a      	bpl.n	8008fa0 <__pow5mult+0x84>
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	4622      	mov	r2, r4
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f7ff ff1a 	bl	8008dc8 <__multiply>
 8008f94:	4639      	mov	r1, r7
 8008f96:	4680      	mov	r8, r0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f7ff fe47 	bl	8008c2c <_Bfree>
 8008f9e:	4647      	mov	r7, r8
 8008fa0:	106d      	asrs	r5, r5, #1
 8008fa2:	d00b      	beq.n	8008fbc <__pow5mult+0xa0>
 8008fa4:	6820      	ldr	r0, [r4, #0]
 8008fa6:	b938      	cbnz	r0, 8008fb8 <__pow5mult+0x9c>
 8008fa8:	4622      	mov	r2, r4
 8008faa:	4621      	mov	r1, r4
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7ff ff0b 	bl	8008dc8 <__multiply>
 8008fb2:	6020      	str	r0, [r4, #0]
 8008fb4:	f8c0 9000 	str.w	r9, [r0]
 8008fb8:	4604      	mov	r4, r0
 8008fba:	e7e4      	b.n	8008f86 <__pow5mult+0x6a>
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc2:	bf00      	nop
 8008fc4:	0800c180 	.word	0x0800c180
 8008fc8:	0800bfb1 	.word	0x0800bfb1
 8008fcc:	0800c034 	.word	0x0800c034

08008fd0 <__lshift>:
 8008fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	6849      	ldr	r1, [r1, #4]
 8008fd8:	6923      	ldr	r3, [r4, #16]
 8008fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fde:	68a3      	ldr	r3, [r4, #8]
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	4691      	mov	r9, r2
 8008fe4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fe8:	f108 0601 	add.w	r6, r8, #1
 8008fec:	42b3      	cmp	r3, r6
 8008fee:	db0b      	blt.n	8009008 <__lshift+0x38>
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f7ff fddb 	bl	8008bac <_Balloc>
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	b948      	cbnz	r0, 800900e <__lshift+0x3e>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	4b2a      	ldr	r3, [pc, #168]	; (80090a8 <__lshift+0xd8>)
 8008ffe:	482b      	ldr	r0, [pc, #172]	; (80090ac <__lshift+0xdc>)
 8009000:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009004:	f000 fbb8 	bl	8009778 <__assert_func>
 8009008:	3101      	adds	r1, #1
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	e7ee      	b.n	8008fec <__lshift+0x1c>
 800900e:	2300      	movs	r3, #0
 8009010:	f100 0114 	add.w	r1, r0, #20
 8009014:	f100 0210 	add.w	r2, r0, #16
 8009018:	4618      	mov	r0, r3
 800901a:	4553      	cmp	r3, sl
 800901c:	db37      	blt.n	800908e <__lshift+0xbe>
 800901e:	6920      	ldr	r0, [r4, #16]
 8009020:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009024:	f104 0314 	add.w	r3, r4, #20
 8009028:	f019 091f 	ands.w	r9, r9, #31
 800902c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009030:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009034:	d02f      	beq.n	8009096 <__lshift+0xc6>
 8009036:	f1c9 0e20 	rsb	lr, r9, #32
 800903a:	468a      	mov	sl, r1
 800903c:	f04f 0c00 	mov.w	ip, #0
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	fa02 f209 	lsl.w	r2, r2, r9
 8009046:	ea42 020c 	orr.w	r2, r2, ip
 800904a:	f84a 2b04 	str.w	r2, [sl], #4
 800904e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009052:	4298      	cmp	r0, r3
 8009054:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009058:	d8f2      	bhi.n	8009040 <__lshift+0x70>
 800905a:	1b03      	subs	r3, r0, r4
 800905c:	3b15      	subs	r3, #21
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	3304      	adds	r3, #4
 8009064:	f104 0215 	add.w	r2, r4, #21
 8009068:	4290      	cmp	r0, r2
 800906a:	bf38      	it	cc
 800906c:	2304      	movcc	r3, #4
 800906e:	f841 c003 	str.w	ip, [r1, r3]
 8009072:	f1bc 0f00 	cmp.w	ip, #0
 8009076:	d001      	beq.n	800907c <__lshift+0xac>
 8009078:	f108 0602 	add.w	r6, r8, #2
 800907c:	3e01      	subs	r6, #1
 800907e:	4638      	mov	r0, r7
 8009080:	612e      	str	r6, [r5, #16]
 8009082:	4621      	mov	r1, r4
 8009084:	f7ff fdd2 	bl	8008c2c <_Bfree>
 8009088:	4628      	mov	r0, r5
 800908a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009092:	3301      	adds	r3, #1
 8009094:	e7c1      	b.n	800901a <__lshift+0x4a>
 8009096:	3904      	subs	r1, #4
 8009098:	f853 2b04 	ldr.w	r2, [r3], #4
 800909c:	f841 2f04 	str.w	r2, [r1, #4]!
 80090a0:	4298      	cmp	r0, r3
 80090a2:	d8f9      	bhi.n	8009098 <__lshift+0xc8>
 80090a4:	e7ea      	b.n	800907c <__lshift+0xac>
 80090a6:	bf00      	nop
 80090a8:	0800c023 	.word	0x0800c023
 80090ac:	0800c034 	.word	0x0800c034

080090b0 <__mcmp>:
 80090b0:	b530      	push	{r4, r5, lr}
 80090b2:	6902      	ldr	r2, [r0, #16]
 80090b4:	690c      	ldr	r4, [r1, #16]
 80090b6:	1b12      	subs	r2, r2, r4
 80090b8:	d10e      	bne.n	80090d8 <__mcmp+0x28>
 80090ba:	f100 0314 	add.w	r3, r0, #20
 80090be:	3114      	adds	r1, #20
 80090c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80090c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80090cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090d0:	42a5      	cmp	r5, r4
 80090d2:	d003      	beq.n	80090dc <__mcmp+0x2c>
 80090d4:	d305      	bcc.n	80090e2 <__mcmp+0x32>
 80090d6:	2201      	movs	r2, #1
 80090d8:	4610      	mov	r0, r2
 80090da:	bd30      	pop	{r4, r5, pc}
 80090dc:	4283      	cmp	r3, r0
 80090de:	d3f3      	bcc.n	80090c8 <__mcmp+0x18>
 80090e0:	e7fa      	b.n	80090d8 <__mcmp+0x28>
 80090e2:	f04f 32ff 	mov.w	r2, #4294967295
 80090e6:	e7f7      	b.n	80090d8 <__mcmp+0x28>

080090e8 <__mdiff>:
 80090e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	460c      	mov	r4, r1
 80090ee:	4606      	mov	r6, r0
 80090f0:	4611      	mov	r1, r2
 80090f2:	4620      	mov	r0, r4
 80090f4:	4690      	mov	r8, r2
 80090f6:	f7ff ffdb 	bl	80090b0 <__mcmp>
 80090fa:	1e05      	subs	r5, r0, #0
 80090fc:	d110      	bne.n	8009120 <__mdiff+0x38>
 80090fe:	4629      	mov	r1, r5
 8009100:	4630      	mov	r0, r6
 8009102:	f7ff fd53 	bl	8008bac <_Balloc>
 8009106:	b930      	cbnz	r0, 8009116 <__mdiff+0x2e>
 8009108:	4b3a      	ldr	r3, [pc, #232]	; (80091f4 <__mdiff+0x10c>)
 800910a:	4602      	mov	r2, r0
 800910c:	f240 2132 	movw	r1, #562	; 0x232
 8009110:	4839      	ldr	r0, [pc, #228]	; (80091f8 <__mdiff+0x110>)
 8009112:	f000 fb31 	bl	8009778 <__assert_func>
 8009116:	2301      	movs	r3, #1
 8009118:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800911c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	bfa4      	itt	ge
 8009122:	4643      	movge	r3, r8
 8009124:	46a0      	movge	r8, r4
 8009126:	4630      	mov	r0, r6
 8009128:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800912c:	bfa6      	itte	ge
 800912e:	461c      	movge	r4, r3
 8009130:	2500      	movge	r5, #0
 8009132:	2501      	movlt	r5, #1
 8009134:	f7ff fd3a 	bl	8008bac <_Balloc>
 8009138:	b920      	cbnz	r0, 8009144 <__mdiff+0x5c>
 800913a:	4b2e      	ldr	r3, [pc, #184]	; (80091f4 <__mdiff+0x10c>)
 800913c:	4602      	mov	r2, r0
 800913e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009142:	e7e5      	b.n	8009110 <__mdiff+0x28>
 8009144:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009148:	6926      	ldr	r6, [r4, #16]
 800914a:	60c5      	str	r5, [r0, #12]
 800914c:	f104 0914 	add.w	r9, r4, #20
 8009150:	f108 0514 	add.w	r5, r8, #20
 8009154:	f100 0e14 	add.w	lr, r0, #20
 8009158:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800915c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009160:	f108 0210 	add.w	r2, r8, #16
 8009164:	46f2      	mov	sl, lr
 8009166:	2100      	movs	r1, #0
 8009168:	f859 3b04 	ldr.w	r3, [r9], #4
 800916c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009170:	fa1f f883 	uxth.w	r8, r3
 8009174:	fa11 f18b 	uxtah	r1, r1, fp
 8009178:	0c1b      	lsrs	r3, r3, #16
 800917a:	eba1 0808 	sub.w	r8, r1, r8
 800917e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009182:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009186:	fa1f f888 	uxth.w	r8, r8
 800918a:	1419      	asrs	r1, r3, #16
 800918c:	454e      	cmp	r6, r9
 800918e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009192:	f84a 3b04 	str.w	r3, [sl], #4
 8009196:	d8e7      	bhi.n	8009168 <__mdiff+0x80>
 8009198:	1b33      	subs	r3, r6, r4
 800919a:	3b15      	subs	r3, #21
 800919c:	f023 0303 	bic.w	r3, r3, #3
 80091a0:	3304      	adds	r3, #4
 80091a2:	3415      	adds	r4, #21
 80091a4:	42a6      	cmp	r6, r4
 80091a6:	bf38      	it	cc
 80091a8:	2304      	movcc	r3, #4
 80091aa:	441d      	add	r5, r3
 80091ac:	4473      	add	r3, lr
 80091ae:	469e      	mov	lr, r3
 80091b0:	462e      	mov	r6, r5
 80091b2:	4566      	cmp	r6, ip
 80091b4:	d30e      	bcc.n	80091d4 <__mdiff+0xec>
 80091b6:	f10c 0203 	add.w	r2, ip, #3
 80091ba:	1b52      	subs	r2, r2, r5
 80091bc:	f022 0203 	bic.w	r2, r2, #3
 80091c0:	3d03      	subs	r5, #3
 80091c2:	45ac      	cmp	ip, r5
 80091c4:	bf38      	it	cc
 80091c6:	2200      	movcc	r2, #0
 80091c8:	441a      	add	r2, r3
 80091ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80091ce:	b17b      	cbz	r3, 80091f0 <__mdiff+0x108>
 80091d0:	6107      	str	r7, [r0, #16]
 80091d2:	e7a3      	b.n	800911c <__mdiff+0x34>
 80091d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80091d8:	fa11 f288 	uxtah	r2, r1, r8
 80091dc:	1414      	asrs	r4, r2, #16
 80091de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80091e2:	b292      	uxth	r2, r2
 80091e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80091e8:	f84e 2b04 	str.w	r2, [lr], #4
 80091ec:	1421      	asrs	r1, r4, #16
 80091ee:	e7e0      	b.n	80091b2 <__mdiff+0xca>
 80091f0:	3f01      	subs	r7, #1
 80091f2:	e7ea      	b.n	80091ca <__mdiff+0xe2>
 80091f4:	0800c023 	.word	0x0800c023
 80091f8:	0800c034 	.word	0x0800c034

080091fc <__d2b>:
 80091fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009200:	4689      	mov	r9, r1
 8009202:	2101      	movs	r1, #1
 8009204:	ec57 6b10 	vmov	r6, r7, d0
 8009208:	4690      	mov	r8, r2
 800920a:	f7ff fccf 	bl	8008bac <_Balloc>
 800920e:	4604      	mov	r4, r0
 8009210:	b930      	cbnz	r0, 8009220 <__d2b+0x24>
 8009212:	4602      	mov	r2, r0
 8009214:	4b25      	ldr	r3, [pc, #148]	; (80092ac <__d2b+0xb0>)
 8009216:	4826      	ldr	r0, [pc, #152]	; (80092b0 <__d2b+0xb4>)
 8009218:	f240 310a 	movw	r1, #778	; 0x30a
 800921c:	f000 faac 	bl	8009778 <__assert_func>
 8009220:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009224:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009228:	bb35      	cbnz	r5, 8009278 <__d2b+0x7c>
 800922a:	2e00      	cmp	r6, #0
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	d028      	beq.n	8009282 <__d2b+0x86>
 8009230:	4668      	mov	r0, sp
 8009232:	9600      	str	r6, [sp, #0]
 8009234:	f7ff fd82 	bl	8008d3c <__lo0bits>
 8009238:	9900      	ldr	r1, [sp, #0]
 800923a:	b300      	cbz	r0, 800927e <__d2b+0x82>
 800923c:	9a01      	ldr	r2, [sp, #4]
 800923e:	f1c0 0320 	rsb	r3, r0, #32
 8009242:	fa02 f303 	lsl.w	r3, r2, r3
 8009246:	430b      	orrs	r3, r1
 8009248:	40c2      	lsrs	r2, r0
 800924a:	6163      	str	r3, [r4, #20]
 800924c:	9201      	str	r2, [sp, #4]
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	61a3      	str	r3, [r4, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	bf14      	ite	ne
 8009256:	2202      	movne	r2, #2
 8009258:	2201      	moveq	r2, #1
 800925a:	6122      	str	r2, [r4, #16]
 800925c:	b1d5      	cbz	r5, 8009294 <__d2b+0x98>
 800925e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009262:	4405      	add	r5, r0
 8009264:	f8c9 5000 	str.w	r5, [r9]
 8009268:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800926c:	f8c8 0000 	str.w	r0, [r8]
 8009270:	4620      	mov	r0, r4
 8009272:	b003      	add	sp, #12
 8009274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800927c:	e7d5      	b.n	800922a <__d2b+0x2e>
 800927e:	6161      	str	r1, [r4, #20]
 8009280:	e7e5      	b.n	800924e <__d2b+0x52>
 8009282:	a801      	add	r0, sp, #4
 8009284:	f7ff fd5a 	bl	8008d3c <__lo0bits>
 8009288:	9b01      	ldr	r3, [sp, #4]
 800928a:	6163      	str	r3, [r4, #20]
 800928c:	2201      	movs	r2, #1
 800928e:	6122      	str	r2, [r4, #16]
 8009290:	3020      	adds	r0, #32
 8009292:	e7e3      	b.n	800925c <__d2b+0x60>
 8009294:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009298:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800929c:	f8c9 0000 	str.w	r0, [r9]
 80092a0:	6918      	ldr	r0, [r3, #16]
 80092a2:	f7ff fd2b 	bl	8008cfc <__hi0bits>
 80092a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092aa:	e7df      	b.n	800926c <__d2b+0x70>
 80092ac:	0800c023 	.word	0x0800c023
 80092b0:	0800c034 	.word	0x0800c034

080092b4 <_calloc_r>:
 80092b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092b6:	fba1 2402 	umull	r2, r4, r1, r2
 80092ba:	b94c      	cbnz	r4, 80092d0 <_calloc_r+0x1c>
 80092bc:	4611      	mov	r1, r2
 80092be:	9201      	str	r2, [sp, #4]
 80092c0:	f000 f87a 	bl	80093b8 <_malloc_r>
 80092c4:	9a01      	ldr	r2, [sp, #4]
 80092c6:	4605      	mov	r5, r0
 80092c8:	b930      	cbnz	r0, 80092d8 <_calloc_r+0x24>
 80092ca:	4628      	mov	r0, r5
 80092cc:	b003      	add	sp, #12
 80092ce:	bd30      	pop	{r4, r5, pc}
 80092d0:	220c      	movs	r2, #12
 80092d2:	6002      	str	r2, [r0, #0]
 80092d4:	2500      	movs	r5, #0
 80092d6:	e7f8      	b.n	80092ca <_calloc_r+0x16>
 80092d8:	4621      	mov	r1, r4
 80092da:	f7fe f93b 	bl	8007554 <memset>
 80092de:	e7f4      	b.n	80092ca <_calloc_r+0x16>

080092e0 <_free_r>:
 80092e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092e2:	2900      	cmp	r1, #0
 80092e4:	d044      	beq.n	8009370 <_free_r+0x90>
 80092e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092ea:	9001      	str	r0, [sp, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f1a1 0404 	sub.w	r4, r1, #4
 80092f2:	bfb8      	it	lt
 80092f4:	18e4      	addlt	r4, r4, r3
 80092f6:	f000 fa9b 	bl	8009830 <__malloc_lock>
 80092fa:	4a1e      	ldr	r2, [pc, #120]	; (8009374 <_free_r+0x94>)
 80092fc:	9801      	ldr	r0, [sp, #4]
 80092fe:	6813      	ldr	r3, [r2, #0]
 8009300:	b933      	cbnz	r3, 8009310 <_free_r+0x30>
 8009302:	6063      	str	r3, [r4, #4]
 8009304:	6014      	str	r4, [r2, #0]
 8009306:	b003      	add	sp, #12
 8009308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800930c:	f000 ba96 	b.w	800983c <__malloc_unlock>
 8009310:	42a3      	cmp	r3, r4
 8009312:	d908      	bls.n	8009326 <_free_r+0x46>
 8009314:	6825      	ldr	r5, [r4, #0]
 8009316:	1961      	adds	r1, r4, r5
 8009318:	428b      	cmp	r3, r1
 800931a:	bf01      	itttt	eq
 800931c:	6819      	ldreq	r1, [r3, #0]
 800931e:	685b      	ldreq	r3, [r3, #4]
 8009320:	1949      	addeq	r1, r1, r5
 8009322:	6021      	streq	r1, [r4, #0]
 8009324:	e7ed      	b.n	8009302 <_free_r+0x22>
 8009326:	461a      	mov	r2, r3
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	b10b      	cbz	r3, 8009330 <_free_r+0x50>
 800932c:	42a3      	cmp	r3, r4
 800932e:	d9fa      	bls.n	8009326 <_free_r+0x46>
 8009330:	6811      	ldr	r1, [r2, #0]
 8009332:	1855      	adds	r5, r2, r1
 8009334:	42a5      	cmp	r5, r4
 8009336:	d10b      	bne.n	8009350 <_free_r+0x70>
 8009338:	6824      	ldr	r4, [r4, #0]
 800933a:	4421      	add	r1, r4
 800933c:	1854      	adds	r4, r2, r1
 800933e:	42a3      	cmp	r3, r4
 8009340:	6011      	str	r1, [r2, #0]
 8009342:	d1e0      	bne.n	8009306 <_free_r+0x26>
 8009344:	681c      	ldr	r4, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	6053      	str	r3, [r2, #4]
 800934a:	4421      	add	r1, r4
 800934c:	6011      	str	r1, [r2, #0]
 800934e:	e7da      	b.n	8009306 <_free_r+0x26>
 8009350:	d902      	bls.n	8009358 <_free_r+0x78>
 8009352:	230c      	movs	r3, #12
 8009354:	6003      	str	r3, [r0, #0]
 8009356:	e7d6      	b.n	8009306 <_free_r+0x26>
 8009358:	6825      	ldr	r5, [r4, #0]
 800935a:	1961      	adds	r1, r4, r5
 800935c:	428b      	cmp	r3, r1
 800935e:	bf04      	itt	eq
 8009360:	6819      	ldreq	r1, [r3, #0]
 8009362:	685b      	ldreq	r3, [r3, #4]
 8009364:	6063      	str	r3, [r4, #4]
 8009366:	bf04      	itt	eq
 8009368:	1949      	addeq	r1, r1, r5
 800936a:	6021      	streq	r1, [r4, #0]
 800936c:	6054      	str	r4, [r2, #4]
 800936e:	e7ca      	b.n	8009306 <_free_r+0x26>
 8009370:	b003      	add	sp, #12
 8009372:	bd30      	pop	{r4, r5, pc}
 8009374:	200007a4 	.word	0x200007a4

08009378 <sbrk_aligned>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	4e0e      	ldr	r6, [pc, #56]	; (80093b4 <sbrk_aligned+0x3c>)
 800937c:	460c      	mov	r4, r1
 800937e:	6831      	ldr	r1, [r6, #0]
 8009380:	4605      	mov	r5, r0
 8009382:	b911      	cbnz	r1, 800938a <sbrk_aligned+0x12>
 8009384:	f000 f9e8 	bl	8009758 <_sbrk_r>
 8009388:	6030      	str	r0, [r6, #0]
 800938a:	4621      	mov	r1, r4
 800938c:	4628      	mov	r0, r5
 800938e:	f000 f9e3 	bl	8009758 <_sbrk_r>
 8009392:	1c43      	adds	r3, r0, #1
 8009394:	d00a      	beq.n	80093ac <sbrk_aligned+0x34>
 8009396:	1cc4      	adds	r4, r0, #3
 8009398:	f024 0403 	bic.w	r4, r4, #3
 800939c:	42a0      	cmp	r0, r4
 800939e:	d007      	beq.n	80093b0 <sbrk_aligned+0x38>
 80093a0:	1a21      	subs	r1, r4, r0
 80093a2:	4628      	mov	r0, r5
 80093a4:	f000 f9d8 	bl	8009758 <_sbrk_r>
 80093a8:	3001      	adds	r0, #1
 80093aa:	d101      	bne.n	80093b0 <sbrk_aligned+0x38>
 80093ac:	f04f 34ff 	mov.w	r4, #4294967295
 80093b0:	4620      	mov	r0, r4
 80093b2:	bd70      	pop	{r4, r5, r6, pc}
 80093b4:	200007a8 	.word	0x200007a8

080093b8 <_malloc_r>:
 80093b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093bc:	1ccd      	adds	r5, r1, #3
 80093be:	f025 0503 	bic.w	r5, r5, #3
 80093c2:	3508      	adds	r5, #8
 80093c4:	2d0c      	cmp	r5, #12
 80093c6:	bf38      	it	cc
 80093c8:	250c      	movcc	r5, #12
 80093ca:	2d00      	cmp	r5, #0
 80093cc:	4607      	mov	r7, r0
 80093ce:	db01      	blt.n	80093d4 <_malloc_r+0x1c>
 80093d0:	42a9      	cmp	r1, r5
 80093d2:	d905      	bls.n	80093e0 <_malloc_r+0x28>
 80093d4:	230c      	movs	r3, #12
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	2600      	movs	r6, #0
 80093da:	4630      	mov	r0, r6
 80093dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e0:	4e2e      	ldr	r6, [pc, #184]	; (800949c <_malloc_r+0xe4>)
 80093e2:	f000 fa25 	bl	8009830 <__malloc_lock>
 80093e6:	6833      	ldr	r3, [r6, #0]
 80093e8:	461c      	mov	r4, r3
 80093ea:	bb34      	cbnz	r4, 800943a <_malloc_r+0x82>
 80093ec:	4629      	mov	r1, r5
 80093ee:	4638      	mov	r0, r7
 80093f0:	f7ff ffc2 	bl	8009378 <sbrk_aligned>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	4604      	mov	r4, r0
 80093f8:	d14d      	bne.n	8009496 <_malloc_r+0xde>
 80093fa:	6834      	ldr	r4, [r6, #0]
 80093fc:	4626      	mov	r6, r4
 80093fe:	2e00      	cmp	r6, #0
 8009400:	d140      	bne.n	8009484 <_malloc_r+0xcc>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	4631      	mov	r1, r6
 8009406:	4638      	mov	r0, r7
 8009408:	eb04 0803 	add.w	r8, r4, r3
 800940c:	f000 f9a4 	bl	8009758 <_sbrk_r>
 8009410:	4580      	cmp	r8, r0
 8009412:	d13a      	bne.n	800948a <_malloc_r+0xd2>
 8009414:	6821      	ldr	r1, [r4, #0]
 8009416:	3503      	adds	r5, #3
 8009418:	1a6d      	subs	r5, r5, r1
 800941a:	f025 0503 	bic.w	r5, r5, #3
 800941e:	3508      	adds	r5, #8
 8009420:	2d0c      	cmp	r5, #12
 8009422:	bf38      	it	cc
 8009424:	250c      	movcc	r5, #12
 8009426:	4629      	mov	r1, r5
 8009428:	4638      	mov	r0, r7
 800942a:	f7ff ffa5 	bl	8009378 <sbrk_aligned>
 800942e:	3001      	adds	r0, #1
 8009430:	d02b      	beq.n	800948a <_malloc_r+0xd2>
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	442b      	add	r3, r5
 8009436:	6023      	str	r3, [r4, #0]
 8009438:	e00e      	b.n	8009458 <_malloc_r+0xa0>
 800943a:	6822      	ldr	r2, [r4, #0]
 800943c:	1b52      	subs	r2, r2, r5
 800943e:	d41e      	bmi.n	800947e <_malloc_r+0xc6>
 8009440:	2a0b      	cmp	r2, #11
 8009442:	d916      	bls.n	8009472 <_malloc_r+0xba>
 8009444:	1961      	adds	r1, r4, r5
 8009446:	42a3      	cmp	r3, r4
 8009448:	6025      	str	r5, [r4, #0]
 800944a:	bf18      	it	ne
 800944c:	6059      	strne	r1, [r3, #4]
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	bf08      	it	eq
 8009452:	6031      	streq	r1, [r6, #0]
 8009454:	5162      	str	r2, [r4, r5]
 8009456:	604b      	str	r3, [r1, #4]
 8009458:	4638      	mov	r0, r7
 800945a:	f104 060b 	add.w	r6, r4, #11
 800945e:	f000 f9ed 	bl	800983c <__malloc_unlock>
 8009462:	f026 0607 	bic.w	r6, r6, #7
 8009466:	1d23      	adds	r3, r4, #4
 8009468:	1af2      	subs	r2, r6, r3
 800946a:	d0b6      	beq.n	80093da <_malloc_r+0x22>
 800946c:	1b9b      	subs	r3, r3, r6
 800946e:	50a3      	str	r3, [r4, r2]
 8009470:	e7b3      	b.n	80093da <_malloc_r+0x22>
 8009472:	6862      	ldr	r2, [r4, #4]
 8009474:	42a3      	cmp	r3, r4
 8009476:	bf0c      	ite	eq
 8009478:	6032      	streq	r2, [r6, #0]
 800947a:	605a      	strne	r2, [r3, #4]
 800947c:	e7ec      	b.n	8009458 <_malloc_r+0xa0>
 800947e:	4623      	mov	r3, r4
 8009480:	6864      	ldr	r4, [r4, #4]
 8009482:	e7b2      	b.n	80093ea <_malloc_r+0x32>
 8009484:	4634      	mov	r4, r6
 8009486:	6876      	ldr	r6, [r6, #4]
 8009488:	e7b9      	b.n	80093fe <_malloc_r+0x46>
 800948a:	230c      	movs	r3, #12
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	4638      	mov	r0, r7
 8009490:	f000 f9d4 	bl	800983c <__malloc_unlock>
 8009494:	e7a1      	b.n	80093da <_malloc_r+0x22>
 8009496:	6025      	str	r5, [r4, #0]
 8009498:	e7de      	b.n	8009458 <_malloc_r+0xa0>
 800949a:	bf00      	nop
 800949c:	200007a4 	.word	0x200007a4

080094a0 <__ssputs_r>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	688e      	ldr	r6, [r1, #8]
 80094a6:	429e      	cmp	r6, r3
 80094a8:	4682      	mov	sl, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	4690      	mov	r8, r2
 80094ae:	461f      	mov	r7, r3
 80094b0:	d838      	bhi.n	8009524 <__ssputs_r+0x84>
 80094b2:	898a      	ldrh	r2, [r1, #12]
 80094b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094b8:	d032      	beq.n	8009520 <__ssputs_r+0x80>
 80094ba:	6825      	ldr	r5, [r4, #0]
 80094bc:	6909      	ldr	r1, [r1, #16]
 80094be:	eba5 0901 	sub.w	r9, r5, r1
 80094c2:	6965      	ldr	r5, [r4, #20]
 80094c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094cc:	3301      	adds	r3, #1
 80094ce:	444b      	add	r3, r9
 80094d0:	106d      	asrs	r5, r5, #1
 80094d2:	429d      	cmp	r5, r3
 80094d4:	bf38      	it	cc
 80094d6:	461d      	movcc	r5, r3
 80094d8:	0553      	lsls	r3, r2, #21
 80094da:	d531      	bpl.n	8009540 <__ssputs_r+0xa0>
 80094dc:	4629      	mov	r1, r5
 80094de:	f7ff ff6b 	bl	80093b8 <_malloc_r>
 80094e2:	4606      	mov	r6, r0
 80094e4:	b950      	cbnz	r0, 80094fc <__ssputs_r+0x5c>
 80094e6:	230c      	movs	r3, #12
 80094e8:	f8ca 3000 	str.w	r3, [sl]
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f2:	81a3      	strh	r3, [r4, #12]
 80094f4:	f04f 30ff 	mov.w	r0, #4294967295
 80094f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fc:	6921      	ldr	r1, [r4, #16]
 80094fe:	464a      	mov	r2, r9
 8009500:	f7fe f81a 	bl	8007538 <memcpy>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800950a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	6126      	str	r6, [r4, #16]
 8009512:	6165      	str	r5, [r4, #20]
 8009514:	444e      	add	r6, r9
 8009516:	eba5 0509 	sub.w	r5, r5, r9
 800951a:	6026      	str	r6, [r4, #0]
 800951c:	60a5      	str	r5, [r4, #8]
 800951e:	463e      	mov	r6, r7
 8009520:	42be      	cmp	r6, r7
 8009522:	d900      	bls.n	8009526 <__ssputs_r+0x86>
 8009524:	463e      	mov	r6, r7
 8009526:	6820      	ldr	r0, [r4, #0]
 8009528:	4632      	mov	r2, r6
 800952a:	4641      	mov	r1, r8
 800952c:	f000 f966 	bl	80097fc <memmove>
 8009530:	68a3      	ldr	r3, [r4, #8]
 8009532:	1b9b      	subs	r3, r3, r6
 8009534:	60a3      	str	r3, [r4, #8]
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	4433      	add	r3, r6
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	2000      	movs	r0, #0
 800953e:	e7db      	b.n	80094f8 <__ssputs_r+0x58>
 8009540:	462a      	mov	r2, r5
 8009542:	f000 f981 	bl	8009848 <_realloc_r>
 8009546:	4606      	mov	r6, r0
 8009548:	2800      	cmp	r0, #0
 800954a:	d1e1      	bne.n	8009510 <__ssputs_r+0x70>
 800954c:	6921      	ldr	r1, [r4, #16]
 800954e:	4650      	mov	r0, sl
 8009550:	f7ff fec6 	bl	80092e0 <_free_r>
 8009554:	e7c7      	b.n	80094e6 <__ssputs_r+0x46>
	...

08009558 <_svfiprintf_r>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	4698      	mov	r8, r3
 800955e:	898b      	ldrh	r3, [r1, #12]
 8009560:	061b      	lsls	r3, r3, #24
 8009562:	b09d      	sub	sp, #116	; 0x74
 8009564:	4607      	mov	r7, r0
 8009566:	460d      	mov	r5, r1
 8009568:	4614      	mov	r4, r2
 800956a:	d50e      	bpl.n	800958a <_svfiprintf_r+0x32>
 800956c:	690b      	ldr	r3, [r1, #16]
 800956e:	b963      	cbnz	r3, 800958a <_svfiprintf_r+0x32>
 8009570:	2140      	movs	r1, #64	; 0x40
 8009572:	f7ff ff21 	bl	80093b8 <_malloc_r>
 8009576:	6028      	str	r0, [r5, #0]
 8009578:	6128      	str	r0, [r5, #16]
 800957a:	b920      	cbnz	r0, 8009586 <_svfiprintf_r+0x2e>
 800957c:	230c      	movs	r3, #12
 800957e:	603b      	str	r3, [r7, #0]
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	e0d1      	b.n	800972a <_svfiprintf_r+0x1d2>
 8009586:	2340      	movs	r3, #64	; 0x40
 8009588:	616b      	str	r3, [r5, #20]
 800958a:	2300      	movs	r3, #0
 800958c:	9309      	str	r3, [sp, #36]	; 0x24
 800958e:	2320      	movs	r3, #32
 8009590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009594:	f8cd 800c 	str.w	r8, [sp, #12]
 8009598:	2330      	movs	r3, #48	; 0x30
 800959a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009744 <_svfiprintf_r+0x1ec>
 800959e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a2:	f04f 0901 	mov.w	r9, #1
 80095a6:	4623      	mov	r3, r4
 80095a8:	469a      	mov	sl, r3
 80095aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ae:	b10a      	cbz	r2, 80095b4 <_svfiprintf_r+0x5c>
 80095b0:	2a25      	cmp	r2, #37	; 0x25
 80095b2:	d1f9      	bne.n	80095a8 <_svfiprintf_r+0x50>
 80095b4:	ebba 0b04 	subs.w	fp, sl, r4
 80095b8:	d00b      	beq.n	80095d2 <_svfiprintf_r+0x7a>
 80095ba:	465b      	mov	r3, fp
 80095bc:	4622      	mov	r2, r4
 80095be:	4629      	mov	r1, r5
 80095c0:	4638      	mov	r0, r7
 80095c2:	f7ff ff6d 	bl	80094a0 <__ssputs_r>
 80095c6:	3001      	adds	r0, #1
 80095c8:	f000 80aa 	beq.w	8009720 <_svfiprintf_r+0x1c8>
 80095cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ce:	445a      	add	r2, fp
 80095d0:	9209      	str	r2, [sp, #36]	; 0x24
 80095d2:	f89a 3000 	ldrb.w	r3, [sl]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 80a2 	beq.w	8009720 <_svfiprintf_r+0x1c8>
 80095dc:	2300      	movs	r3, #0
 80095de:	f04f 32ff 	mov.w	r2, #4294967295
 80095e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095e6:	f10a 0a01 	add.w	sl, sl, #1
 80095ea:	9304      	str	r3, [sp, #16]
 80095ec:	9307      	str	r3, [sp, #28]
 80095ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095f2:	931a      	str	r3, [sp, #104]	; 0x68
 80095f4:	4654      	mov	r4, sl
 80095f6:	2205      	movs	r2, #5
 80095f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095fc:	4851      	ldr	r0, [pc, #324]	; (8009744 <_svfiprintf_r+0x1ec>)
 80095fe:	f7f6 fdef 	bl	80001e0 <memchr>
 8009602:	9a04      	ldr	r2, [sp, #16]
 8009604:	b9d8      	cbnz	r0, 800963e <_svfiprintf_r+0xe6>
 8009606:	06d0      	lsls	r0, r2, #27
 8009608:	bf44      	itt	mi
 800960a:	2320      	movmi	r3, #32
 800960c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009610:	0711      	lsls	r1, r2, #28
 8009612:	bf44      	itt	mi
 8009614:	232b      	movmi	r3, #43	; 0x2b
 8009616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961a:	f89a 3000 	ldrb.w	r3, [sl]
 800961e:	2b2a      	cmp	r3, #42	; 0x2a
 8009620:	d015      	beq.n	800964e <_svfiprintf_r+0xf6>
 8009622:	9a07      	ldr	r2, [sp, #28]
 8009624:	4654      	mov	r4, sl
 8009626:	2000      	movs	r0, #0
 8009628:	f04f 0c0a 	mov.w	ip, #10
 800962c:	4621      	mov	r1, r4
 800962e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009632:	3b30      	subs	r3, #48	; 0x30
 8009634:	2b09      	cmp	r3, #9
 8009636:	d94e      	bls.n	80096d6 <_svfiprintf_r+0x17e>
 8009638:	b1b0      	cbz	r0, 8009668 <_svfiprintf_r+0x110>
 800963a:	9207      	str	r2, [sp, #28]
 800963c:	e014      	b.n	8009668 <_svfiprintf_r+0x110>
 800963e:	eba0 0308 	sub.w	r3, r0, r8
 8009642:	fa09 f303 	lsl.w	r3, r9, r3
 8009646:	4313      	orrs	r3, r2
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	46a2      	mov	sl, r4
 800964c:	e7d2      	b.n	80095f4 <_svfiprintf_r+0x9c>
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	1d19      	adds	r1, r3, #4
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	9103      	str	r1, [sp, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	bfbb      	ittet	lt
 800965a:	425b      	neglt	r3, r3
 800965c:	f042 0202 	orrlt.w	r2, r2, #2
 8009660:	9307      	strge	r3, [sp, #28]
 8009662:	9307      	strlt	r3, [sp, #28]
 8009664:	bfb8      	it	lt
 8009666:	9204      	strlt	r2, [sp, #16]
 8009668:	7823      	ldrb	r3, [r4, #0]
 800966a:	2b2e      	cmp	r3, #46	; 0x2e
 800966c:	d10c      	bne.n	8009688 <_svfiprintf_r+0x130>
 800966e:	7863      	ldrb	r3, [r4, #1]
 8009670:	2b2a      	cmp	r3, #42	; 0x2a
 8009672:	d135      	bne.n	80096e0 <_svfiprintf_r+0x188>
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	9203      	str	r2, [sp, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	bfb8      	it	lt
 8009680:	f04f 33ff 	movlt.w	r3, #4294967295
 8009684:	3402      	adds	r4, #2
 8009686:	9305      	str	r3, [sp, #20]
 8009688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009754 <_svfiprintf_r+0x1fc>
 800968c:	7821      	ldrb	r1, [r4, #0]
 800968e:	2203      	movs	r2, #3
 8009690:	4650      	mov	r0, sl
 8009692:	f7f6 fda5 	bl	80001e0 <memchr>
 8009696:	b140      	cbz	r0, 80096aa <_svfiprintf_r+0x152>
 8009698:	2340      	movs	r3, #64	; 0x40
 800969a:	eba0 000a 	sub.w	r0, r0, sl
 800969e:	fa03 f000 	lsl.w	r0, r3, r0
 80096a2:	9b04      	ldr	r3, [sp, #16]
 80096a4:	4303      	orrs	r3, r0
 80096a6:	3401      	adds	r4, #1
 80096a8:	9304      	str	r3, [sp, #16]
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	4826      	ldr	r0, [pc, #152]	; (8009748 <_svfiprintf_r+0x1f0>)
 80096b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b4:	2206      	movs	r2, #6
 80096b6:	f7f6 fd93 	bl	80001e0 <memchr>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d038      	beq.n	8009730 <_svfiprintf_r+0x1d8>
 80096be:	4b23      	ldr	r3, [pc, #140]	; (800974c <_svfiprintf_r+0x1f4>)
 80096c0:	bb1b      	cbnz	r3, 800970a <_svfiprintf_r+0x1b2>
 80096c2:	9b03      	ldr	r3, [sp, #12]
 80096c4:	3307      	adds	r3, #7
 80096c6:	f023 0307 	bic.w	r3, r3, #7
 80096ca:	3308      	adds	r3, #8
 80096cc:	9303      	str	r3, [sp, #12]
 80096ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d0:	4433      	add	r3, r6
 80096d2:	9309      	str	r3, [sp, #36]	; 0x24
 80096d4:	e767      	b.n	80095a6 <_svfiprintf_r+0x4e>
 80096d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80096da:	460c      	mov	r4, r1
 80096dc:	2001      	movs	r0, #1
 80096de:	e7a5      	b.n	800962c <_svfiprintf_r+0xd4>
 80096e0:	2300      	movs	r3, #0
 80096e2:	3401      	adds	r4, #1
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	4619      	mov	r1, r3
 80096e8:	f04f 0c0a 	mov.w	ip, #10
 80096ec:	4620      	mov	r0, r4
 80096ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f2:	3a30      	subs	r2, #48	; 0x30
 80096f4:	2a09      	cmp	r2, #9
 80096f6:	d903      	bls.n	8009700 <_svfiprintf_r+0x1a8>
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0c5      	beq.n	8009688 <_svfiprintf_r+0x130>
 80096fc:	9105      	str	r1, [sp, #20]
 80096fe:	e7c3      	b.n	8009688 <_svfiprintf_r+0x130>
 8009700:	fb0c 2101 	mla	r1, ip, r1, r2
 8009704:	4604      	mov	r4, r0
 8009706:	2301      	movs	r3, #1
 8009708:	e7f0      	b.n	80096ec <_svfiprintf_r+0x194>
 800970a:	ab03      	add	r3, sp, #12
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	462a      	mov	r2, r5
 8009710:	4b0f      	ldr	r3, [pc, #60]	; (8009750 <_svfiprintf_r+0x1f8>)
 8009712:	a904      	add	r1, sp, #16
 8009714:	4638      	mov	r0, r7
 8009716:	f7fd ffc5 	bl	80076a4 <_printf_float>
 800971a:	1c42      	adds	r2, r0, #1
 800971c:	4606      	mov	r6, r0
 800971e:	d1d6      	bne.n	80096ce <_svfiprintf_r+0x176>
 8009720:	89ab      	ldrh	r3, [r5, #12]
 8009722:	065b      	lsls	r3, r3, #25
 8009724:	f53f af2c 	bmi.w	8009580 <_svfiprintf_r+0x28>
 8009728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800972a:	b01d      	add	sp, #116	; 0x74
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	ab03      	add	r3, sp, #12
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	462a      	mov	r2, r5
 8009736:	4b06      	ldr	r3, [pc, #24]	; (8009750 <_svfiprintf_r+0x1f8>)
 8009738:	a904      	add	r1, sp, #16
 800973a:	4638      	mov	r0, r7
 800973c:	f7fe fa56 	bl	8007bec <_printf_i>
 8009740:	e7eb      	b.n	800971a <_svfiprintf_r+0x1c2>
 8009742:	bf00      	nop
 8009744:	0800c18c 	.word	0x0800c18c
 8009748:	0800c196 	.word	0x0800c196
 800974c:	080076a5 	.word	0x080076a5
 8009750:	080094a1 	.word	0x080094a1
 8009754:	0800c192 	.word	0x0800c192

08009758 <_sbrk_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d06      	ldr	r5, [pc, #24]	; (8009774 <_sbrk_r+0x1c>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	f7f8 fe68 	bl	8002438 <_sbrk>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_sbrk_r+0x1a>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_sbrk_r+0x1a>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	200007ac 	.word	0x200007ac

08009778 <__assert_func>:
 8009778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800977a:	4614      	mov	r4, r2
 800977c:	461a      	mov	r2, r3
 800977e:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <__assert_func+0x2c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4605      	mov	r5, r0
 8009784:	68d8      	ldr	r0, [r3, #12]
 8009786:	b14c      	cbz	r4, 800979c <__assert_func+0x24>
 8009788:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <__assert_func+0x30>)
 800978a:	9100      	str	r1, [sp, #0]
 800978c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009790:	4906      	ldr	r1, [pc, #24]	; (80097ac <__assert_func+0x34>)
 8009792:	462b      	mov	r3, r5
 8009794:	f000 f80e 	bl	80097b4 <fiprintf>
 8009798:	f000 faac 	bl	8009cf4 <abort>
 800979c:	4b04      	ldr	r3, [pc, #16]	; (80097b0 <__assert_func+0x38>)
 800979e:	461c      	mov	r4, r3
 80097a0:	e7f3      	b.n	800978a <__assert_func+0x12>
 80097a2:	bf00      	nop
 80097a4:	2000001c 	.word	0x2000001c
 80097a8:	0800c19d 	.word	0x0800c19d
 80097ac:	0800c1aa 	.word	0x0800c1aa
 80097b0:	0800c1d8 	.word	0x0800c1d8

080097b4 <fiprintf>:
 80097b4:	b40e      	push	{r1, r2, r3}
 80097b6:	b503      	push	{r0, r1, lr}
 80097b8:	4601      	mov	r1, r0
 80097ba:	ab03      	add	r3, sp, #12
 80097bc:	4805      	ldr	r0, [pc, #20]	; (80097d4 <fiprintf+0x20>)
 80097be:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c2:	6800      	ldr	r0, [r0, #0]
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	f000 f897 	bl	80098f8 <_vfiprintf_r>
 80097ca:	b002      	add	sp, #8
 80097cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80097d0:	b003      	add	sp, #12
 80097d2:	4770      	bx	lr
 80097d4:	2000001c 	.word	0x2000001c

080097d8 <__ascii_mbtowc>:
 80097d8:	b082      	sub	sp, #8
 80097da:	b901      	cbnz	r1, 80097de <__ascii_mbtowc+0x6>
 80097dc:	a901      	add	r1, sp, #4
 80097de:	b142      	cbz	r2, 80097f2 <__ascii_mbtowc+0x1a>
 80097e0:	b14b      	cbz	r3, 80097f6 <__ascii_mbtowc+0x1e>
 80097e2:	7813      	ldrb	r3, [r2, #0]
 80097e4:	600b      	str	r3, [r1, #0]
 80097e6:	7812      	ldrb	r2, [r2, #0]
 80097e8:	1e10      	subs	r0, r2, #0
 80097ea:	bf18      	it	ne
 80097ec:	2001      	movne	r0, #1
 80097ee:	b002      	add	sp, #8
 80097f0:	4770      	bx	lr
 80097f2:	4610      	mov	r0, r2
 80097f4:	e7fb      	b.n	80097ee <__ascii_mbtowc+0x16>
 80097f6:	f06f 0001 	mvn.w	r0, #1
 80097fa:	e7f8      	b.n	80097ee <__ascii_mbtowc+0x16>

080097fc <memmove>:
 80097fc:	4288      	cmp	r0, r1
 80097fe:	b510      	push	{r4, lr}
 8009800:	eb01 0402 	add.w	r4, r1, r2
 8009804:	d902      	bls.n	800980c <memmove+0x10>
 8009806:	4284      	cmp	r4, r0
 8009808:	4623      	mov	r3, r4
 800980a:	d807      	bhi.n	800981c <memmove+0x20>
 800980c:	1e43      	subs	r3, r0, #1
 800980e:	42a1      	cmp	r1, r4
 8009810:	d008      	beq.n	8009824 <memmove+0x28>
 8009812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800981a:	e7f8      	b.n	800980e <memmove+0x12>
 800981c:	4402      	add	r2, r0
 800981e:	4601      	mov	r1, r0
 8009820:	428a      	cmp	r2, r1
 8009822:	d100      	bne.n	8009826 <memmove+0x2a>
 8009824:	bd10      	pop	{r4, pc}
 8009826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800982a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800982e:	e7f7      	b.n	8009820 <memmove+0x24>

08009830 <__malloc_lock>:
 8009830:	4801      	ldr	r0, [pc, #4]	; (8009838 <__malloc_lock+0x8>)
 8009832:	f000 bc1f 	b.w	800a074 <__retarget_lock_acquire_recursive>
 8009836:	bf00      	nop
 8009838:	200007b0 	.word	0x200007b0

0800983c <__malloc_unlock>:
 800983c:	4801      	ldr	r0, [pc, #4]	; (8009844 <__malloc_unlock+0x8>)
 800983e:	f000 bc1a 	b.w	800a076 <__retarget_lock_release_recursive>
 8009842:	bf00      	nop
 8009844:	200007b0 	.word	0x200007b0

08009848 <_realloc_r>:
 8009848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800984c:	4680      	mov	r8, r0
 800984e:	4614      	mov	r4, r2
 8009850:	460e      	mov	r6, r1
 8009852:	b921      	cbnz	r1, 800985e <_realloc_r+0x16>
 8009854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009858:	4611      	mov	r1, r2
 800985a:	f7ff bdad 	b.w	80093b8 <_malloc_r>
 800985e:	b92a      	cbnz	r2, 800986c <_realloc_r+0x24>
 8009860:	f7ff fd3e 	bl	80092e0 <_free_r>
 8009864:	4625      	mov	r5, r4
 8009866:	4628      	mov	r0, r5
 8009868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986c:	f000 fc6a 	bl	800a144 <_malloc_usable_size_r>
 8009870:	4284      	cmp	r4, r0
 8009872:	4607      	mov	r7, r0
 8009874:	d802      	bhi.n	800987c <_realloc_r+0x34>
 8009876:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800987a:	d812      	bhi.n	80098a2 <_realloc_r+0x5a>
 800987c:	4621      	mov	r1, r4
 800987e:	4640      	mov	r0, r8
 8009880:	f7ff fd9a 	bl	80093b8 <_malloc_r>
 8009884:	4605      	mov	r5, r0
 8009886:	2800      	cmp	r0, #0
 8009888:	d0ed      	beq.n	8009866 <_realloc_r+0x1e>
 800988a:	42bc      	cmp	r4, r7
 800988c:	4622      	mov	r2, r4
 800988e:	4631      	mov	r1, r6
 8009890:	bf28      	it	cs
 8009892:	463a      	movcs	r2, r7
 8009894:	f7fd fe50 	bl	8007538 <memcpy>
 8009898:	4631      	mov	r1, r6
 800989a:	4640      	mov	r0, r8
 800989c:	f7ff fd20 	bl	80092e0 <_free_r>
 80098a0:	e7e1      	b.n	8009866 <_realloc_r+0x1e>
 80098a2:	4635      	mov	r5, r6
 80098a4:	e7df      	b.n	8009866 <_realloc_r+0x1e>

080098a6 <__sfputc_r>:
 80098a6:	6893      	ldr	r3, [r2, #8]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	b410      	push	{r4}
 80098ae:	6093      	str	r3, [r2, #8]
 80098b0:	da08      	bge.n	80098c4 <__sfputc_r+0x1e>
 80098b2:	6994      	ldr	r4, [r2, #24]
 80098b4:	42a3      	cmp	r3, r4
 80098b6:	db01      	blt.n	80098bc <__sfputc_r+0x16>
 80098b8:	290a      	cmp	r1, #10
 80098ba:	d103      	bne.n	80098c4 <__sfputc_r+0x1e>
 80098bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098c0:	f000 b94a 	b.w	8009b58 <__swbuf_r>
 80098c4:	6813      	ldr	r3, [r2, #0]
 80098c6:	1c58      	adds	r0, r3, #1
 80098c8:	6010      	str	r0, [r2, #0]
 80098ca:	7019      	strb	r1, [r3, #0]
 80098cc:	4608      	mov	r0, r1
 80098ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <__sfputs_r>:
 80098d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d6:	4606      	mov	r6, r0
 80098d8:	460f      	mov	r7, r1
 80098da:	4614      	mov	r4, r2
 80098dc:	18d5      	adds	r5, r2, r3
 80098de:	42ac      	cmp	r4, r5
 80098e0:	d101      	bne.n	80098e6 <__sfputs_r+0x12>
 80098e2:	2000      	movs	r0, #0
 80098e4:	e007      	b.n	80098f6 <__sfputs_r+0x22>
 80098e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ea:	463a      	mov	r2, r7
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7ff ffda 	bl	80098a6 <__sfputc_r>
 80098f2:	1c43      	adds	r3, r0, #1
 80098f4:	d1f3      	bne.n	80098de <__sfputs_r+0xa>
 80098f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098f8 <_vfiprintf_r>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	460d      	mov	r5, r1
 80098fe:	b09d      	sub	sp, #116	; 0x74
 8009900:	4614      	mov	r4, r2
 8009902:	4698      	mov	r8, r3
 8009904:	4606      	mov	r6, r0
 8009906:	b118      	cbz	r0, 8009910 <_vfiprintf_r+0x18>
 8009908:	6983      	ldr	r3, [r0, #24]
 800990a:	b90b      	cbnz	r3, 8009910 <_vfiprintf_r+0x18>
 800990c:	f000 fb14 	bl	8009f38 <__sinit>
 8009910:	4b89      	ldr	r3, [pc, #548]	; (8009b38 <_vfiprintf_r+0x240>)
 8009912:	429d      	cmp	r5, r3
 8009914:	d11b      	bne.n	800994e <_vfiprintf_r+0x56>
 8009916:	6875      	ldr	r5, [r6, #4]
 8009918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800991a:	07d9      	lsls	r1, r3, #31
 800991c:	d405      	bmi.n	800992a <_vfiprintf_r+0x32>
 800991e:	89ab      	ldrh	r3, [r5, #12]
 8009920:	059a      	lsls	r2, r3, #22
 8009922:	d402      	bmi.n	800992a <_vfiprintf_r+0x32>
 8009924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009926:	f000 fba5 	bl	800a074 <__retarget_lock_acquire_recursive>
 800992a:	89ab      	ldrh	r3, [r5, #12]
 800992c:	071b      	lsls	r3, r3, #28
 800992e:	d501      	bpl.n	8009934 <_vfiprintf_r+0x3c>
 8009930:	692b      	ldr	r3, [r5, #16]
 8009932:	b9eb      	cbnz	r3, 8009970 <_vfiprintf_r+0x78>
 8009934:	4629      	mov	r1, r5
 8009936:	4630      	mov	r0, r6
 8009938:	f000 f96e 	bl	8009c18 <__swsetup_r>
 800993c:	b1c0      	cbz	r0, 8009970 <_vfiprintf_r+0x78>
 800993e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009940:	07dc      	lsls	r4, r3, #31
 8009942:	d50e      	bpl.n	8009962 <_vfiprintf_r+0x6a>
 8009944:	f04f 30ff 	mov.w	r0, #4294967295
 8009948:	b01d      	add	sp, #116	; 0x74
 800994a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994e:	4b7b      	ldr	r3, [pc, #492]	; (8009b3c <_vfiprintf_r+0x244>)
 8009950:	429d      	cmp	r5, r3
 8009952:	d101      	bne.n	8009958 <_vfiprintf_r+0x60>
 8009954:	68b5      	ldr	r5, [r6, #8]
 8009956:	e7df      	b.n	8009918 <_vfiprintf_r+0x20>
 8009958:	4b79      	ldr	r3, [pc, #484]	; (8009b40 <_vfiprintf_r+0x248>)
 800995a:	429d      	cmp	r5, r3
 800995c:	bf08      	it	eq
 800995e:	68f5      	ldreq	r5, [r6, #12]
 8009960:	e7da      	b.n	8009918 <_vfiprintf_r+0x20>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	0598      	lsls	r0, r3, #22
 8009966:	d4ed      	bmi.n	8009944 <_vfiprintf_r+0x4c>
 8009968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800996a:	f000 fb84 	bl	800a076 <__retarget_lock_release_recursive>
 800996e:	e7e9      	b.n	8009944 <_vfiprintf_r+0x4c>
 8009970:	2300      	movs	r3, #0
 8009972:	9309      	str	r3, [sp, #36]	; 0x24
 8009974:	2320      	movs	r3, #32
 8009976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800997a:	f8cd 800c 	str.w	r8, [sp, #12]
 800997e:	2330      	movs	r3, #48	; 0x30
 8009980:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b44 <_vfiprintf_r+0x24c>
 8009984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009988:	f04f 0901 	mov.w	r9, #1
 800998c:	4623      	mov	r3, r4
 800998e:	469a      	mov	sl, r3
 8009990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009994:	b10a      	cbz	r2, 800999a <_vfiprintf_r+0xa2>
 8009996:	2a25      	cmp	r2, #37	; 0x25
 8009998:	d1f9      	bne.n	800998e <_vfiprintf_r+0x96>
 800999a:	ebba 0b04 	subs.w	fp, sl, r4
 800999e:	d00b      	beq.n	80099b8 <_vfiprintf_r+0xc0>
 80099a0:	465b      	mov	r3, fp
 80099a2:	4622      	mov	r2, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	4630      	mov	r0, r6
 80099a8:	f7ff ff94 	bl	80098d4 <__sfputs_r>
 80099ac:	3001      	adds	r0, #1
 80099ae:	f000 80aa 	beq.w	8009b06 <_vfiprintf_r+0x20e>
 80099b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099b4:	445a      	add	r2, fp
 80099b6:	9209      	str	r2, [sp, #36]	; 0x24
 80099b8:	f89a 3000 	ldrb.w	r3, [sl]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 80a2 	beq.w	8009b06 <_vfiprintf_r+0x20e>
 80099c2:	2300      	movs	r3, #0
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295
 80099c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099cc:	f10a 0a01 	add.w	sl, sl, #1
 80099d0:	9304      	str	r3, [sp, #16]
 80099d2:	9307      	str	r3, [sp, #28]
 80099d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099d8:	931a      	str	r3, [sp, #104]	; 0x68
 80099da:	4654      	mov	r4, sl
 80099dc:	2205      	movs	r2, #5
 80099de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e2:	4858      	ldr	r0, [pc, #352]	; (8009b44 <_vfiprintf_r+0x24c>)
 80099e4:	f7f6 fbfc 	bl	80001e0 <memchr>
 80099e8:	9a04      	ldr	r2, [sp, #16]
 80099ea:	b9d8      	cbnz	r0, 8009a24 <_vfiprintf_r+0x12c>
 80099ec:	06d1      	lsls	r1, r2, #27
 80099ee:	bf44      	itt	mi
 80099f0:	2320      	movmi	r3, #32
 80099f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099f6:	0713      	lsls	r3, r2, #28
 80099f8:	bf44      	itt	mi
 80099fa:	232b      	movmi	r3, #43	; 0x2b
 80099fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a00:	f89a 3000 	ldrb.w	r3, [sl]
 8009a04:	2b2a      	cmp	r3, #42	; 0x2a
 8009a06:	d015      	beq.n	8009a34 <_vfiprintf_r+0x13c>
 8009a08:	9a07      	ldr	r2, [sp, #28]
 8009a0a:	4654      	mov	r4, sl
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	f04f 0c0a 	mov.w	ip, #10
 8009a12:	4621      	mov	r1, r4
 8009a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a18:	3b30      	subs	r3, #48	; 0x30
 8009a1a:	2b09      	cmp	r3, #9
 8009a1c:	d94e      	bls.n	8009abc <_vfiprintf_r+0x1c4>
 8009a1e:	b1b0      	cbz	r0, 8009a4e <_vfiprintf_r+0x156>
 8009a20:	9207      	str	r2, [sp, #28]
 8009a22:	e014      	b.n	8009a4e <_vfiprintf_r+0x156>
 8009a24:	eba0 0308 	sub.w	r3, r0, r8
 8009a28:	fa09 f303 	lsl.w	r3, r9, r3
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	9304      	str	r3, [sp, #16]
 8009a30:	46a2      	mov	sl, r4
 8009a32:	e7d2      	b.n	80099da <_vfiprintf_r+0xe2>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	1d19      	adds	r1, r3, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	9103      	str	r1, [sp, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	bfbb      	ittet	lt
 8009a40:	425b      	neglt	r3, r3
 8009a42:	f042 0202 	orrlt.w	r2, r2, #2
 8009a46:	9307      	strge	r3, [sp, #28]
 8009a48:	9307      	strlt	r3, [sp, #28]
 8009a4a:	bfb8      	it	lt
 8009a4c:	9204      	strlt	r2, [sp, #16]
 8009a4e:	7823      	ldrb	r3, [r4, #0]
 8009a50:	2b2e      	cmp	r3, #46	; 0x2e
 8009a52:	d10c      	bne.n	8009a6e <_vfiprintf_r+0x176>
 8009a54:	7863      	ldrb	r3, [r4, #1]
 8009a56:	2b2a      	cmp	r3, #42	; 0x2a
 8009a58:	d135      	bne.n	8009ac6 <_vfiprintf_r+0x1ce>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	1d1a      	adds	r2, r3, #4
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	9203      	str	r2, [sp, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bfb8      	it	lt
 8009a66:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a6a:	3402      	adds	r4, #2
 8009a6c:	9305      	str	r3, [sp, #20]
 8009a6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b54 <_vfiprintf_r+0x25c>
 8009a72:	7821      	ldrb	r1, [r4, #0]
 8009a74:	2203      	movs	r2, #3
 8009a76:	4650      	mov	r0, sl
 8009a78:	f7f6 fbb2 	bl	80001e0 <memchr>
 8009a7c:	b140      	cbz	r0, 8009a90 <_vfiprintf_r+0x198>
 8009a7e:	2340      	movs	r3, #64	; 0x40
 8009a80:	eba0 000a 	sub.w	r0, r0, sl
 8009a84:	fa03 f000 	lsl.w	r0, r3, r0
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	4303      	orrs	r3, r0
 8009a8c:	3401      	adds	r4, #1
 8009a8e:	9304      	str	r3, [sp, #16]
 8009a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a94:	482c      	ldr	r0, [pc, #176]	; (8009b48 <_vfiprintf_r+0x250>)
 8009a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a9a:	2206      	movs	r2, #6
 8009a9c:	f7f6 fba0 	bl	80001e0 <memchr>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d03f      	beq.n	8009b24 <_vfiprintf_r+0x22c>
 8009aa4:	4b29      	ldr	r3, [pc, #164]	; (8009b4c <_vfiprintf_r+0x254>)
 8009aa6:	bb1b      	cbnz	r3, 8009af0 <_vfiprintf_r+0x1f8>
 8009aa8:	9b03      	ldr	r3, [sp, #12]
 8009aaa:	3307      	adds	r3, #7
 8009aac:	f023 0307 	bic.w	r3, r3, #7
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	9303      	str	r3, [sp, #12]
 8009ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab6:	443b      	add	r3, r7
 8009ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aba:	e767      	b.n	800998c <_vfiprintf_r+0x94>
 8009abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	e7a5      	b.n	8009a12 <_vfiprintf_r+0x11a>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	3401      	adds	r4, #1
 8009aca:	9305      	str	r3, [sp, #20]
 8009acc:	4619      	mov	r1, r3
 8009ace:	f04f 0c0a 	mov.w	ip, #10
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ad8:	3a30      	subs	r2, #48	; 0x30
 8009ada:	2a09      	cmp	r2, #9
 8009adc:	d903      	bls.n	8009ae6 <_vfiprintf_r+0x1ee>
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0c5      	beq.n	8009a6e <_vfiprintf_r+0x176>
 8009ae2:	9105      	str	r1, [sp, #20]
 8009ae4:	e7c3      	b.n	8009a6e <_vfiprintf_r+0x176>
 8009ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aea:	4604      	mov	r4, r0
 8009aec:	2301      	movs	r3, #1
 8009aee:	e7f0      	b.n	8009ad2 <_vfiprintf_r+0x1da>
 8009af0:	ab03      	add	r3, sp, #12
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	462a      	mov	r2, r5
 8009af6:	4b16      	ldr	r3, [pc, #88]	; (8009b50 <_vfiprintf_r+0x258>)
 8009af8:	a904      	add	r1, sp, #16
 8009afa:	4630      	mov	r0, r6
 8009afc:	f7fd fdd2 	bl	80076a4 <_printf_float>
 8009b00:	4607      	mov	r7, r0
 8009b02:	1c78      	adds	r0, r7, #1
 8009b04:	d1d6      	bne.n	8009ab4 <_vfiprintf_r+0x1bc>
 8009b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b08:	07d9      	lsls	r1, r3, #31
 8009b0a:	d405      	bmi.n	8009b18 <_vfiprintf_r+0x220>
 8009b0c:	89ab      	ldrh	r3, [r5, #12]
 8009b0e:	059a      	lsls	r2, r3, #22
 8009b10:	d402      	bmi.n	8009b18 <_vfiprintf_r+0x220>
 8009b12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b14:	f000 faaf 	bl	800a076 <__retarget_lock_release_recursive>
 8009b18:	89ab      	ldrh	r3, [r5, #12]
 8009b1a:	065b      	lsls	r3, r3, #25
 8009b1c:	f53f af12 	bmi.w	8009944 <_vfiprintf_r+0x4c>
 8009b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b22:	e711      	b.n	8009948 <_vfiprintf_r+0x50>
 8009b24:	ab03      	add	r3, sp, #12
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	462a      	mov	r2, r5
 8009b2a:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <_vfiprintf_r+0x258>)
 8009b2c:	a904      	add	r1, sp, #16
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7fe f85c 	bl	8007bec <_printf_i>
 8009b34:	e7e4      	b.n	8009b00 <_vfiprintf_r+0x208>
 8009b36:	bf00      	nop
 8009b38:	0800c304 	.word	0x0800c304
 8009b3c:	0800c324 	.word	0x0800c324
 8009b40:	0800c2e4 	.word	0x0800c2e4
 8009b44:	0800c18c 	.word	0x0800c18c
 8009b48:	0800c196 	.word	0x0800c196
 8009b4c:	080076a5 	.word	0x080076a5
 8009b50:	080098d5 	.word	0x080098d5
 8009b54:	0800c192 	.word	0x0800c192

08009b58 <__swbuf_r>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	460e      	mov	r6, r1
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	4605      	mov	r5, r0
 8009b60:	b118      	cbz	r0, 8009b6a <__swbuf_r+0x12>
 8009b62:	6983      	ldr	r3, [r0, #24]
 8009b64:	b90b      	cbnz	r3, 8009b6a <__swbuf_r+0x12>
 8009b66:	f000 f9e7 	bl	8009f38 <__sinit>
 8009b6a:	4b21      	ldr	r3, [pc, #132]	; (8009bf0 <__swbuf_r+0x98>)
 8009b6c:	429c      	cmp	r4, r3
 8009b6e:	d12b      	bne.n	8009bc8 <__swbuf_r+0x70>
 8009b70:	686c      	ldr	r4, [r5, #4]
 8009b72:	69a3      	ldr	r3, [r4, #24]
 8009b74:	60a3      	str	r3, [r4, #8]
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	071a      	lsls	r2, r3, #28
 8009b7a:	d52f      	bpl.n	8009bdc <__swbuf_r+0x84>
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	b36b      	cbz	r3, 8009bdc <__swbuf_r+0x84>
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	6820      	ldr	r0, [r4, #0]
 8009b84:	1ac0      	subs	r0, r0, r3
 8009b86:	6963      	ldr	r3, [r4, #20]
 8009b88:	b2f6      	uxtb	r6, r6
 8009b8a:	4283      	cmp	r3, r0
 8009b8c:	4637      	mov	r7, r6
 8009b8e:	dc04      	bgt.n	8009b9a <__swbuf_r+0x42>
 8009b90:	4621      	mov	r1, r4
 8009b92:	4628      	mov	r0, r5
 8009b94:	f000 f93c 	bl	8009e10 <_fflush_r>
 8009b98:	bb30      	cbnz	r0, 8009be8 <__swbuf_r+0x90>
 8009b9a:	68a3      	ldr	r3, [r4, #8]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	60a3      	str	r3, [r4, #8]
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	6022      	str	r2, [r4, #0]
 8009ba6:	701e      	strb	r6, [r3, #0]
 8009ba8:	6963      	ldr	r3, [r4, #20]
 8009baa:	3001      	adds	r0, #1
 8009bac:	4283      	cmp	r3, r0
 8009bae:	d004      	beq.n	8009bba <__swbuf_r+0x62>
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	07db      	lsls	r3, r3, #31
 8009bb4:	d506      	bpl.n	8009bc4 <__swbuf_r+0x6c>
 8009bb6:	2e0a      	cmp	r6, #10
 8009bb8:	d104      	bne.n	8009bc4 <__swbuf_r+0x6c>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f000 f927 	bl	8009e10 <_fflush_r>
 8009bc2:	b988      	cbnz	r0, 8009be8 <__swbuf_r+0x90>
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc8:	4b0a      	ldr	r3, [pc, #40]	; (8009bf4 <__swbuf_r+0x9c>)
 8009bca:	429c      	cmp	r4, r3
 8009bcc:	d101      	bne.n	8009bd2 <__swbuf_r+0x7a>
 8009bce:	68ac      	ldr	r4, [r5, #8]
 8009bd0:	e7cf      	b.n	8009b72 <__swbuf_r+0x1a>
 8009bd2:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <__swbuf_r+0xa0>)
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	bf08      	it	eq
 8009bd8:	68ec      	ldreq	r4, [r5, #12]
 8009bda:	e7ca      	b.n	8009b72 <__swbuf_r+0x1a>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4628      	mov	r0, r5
 8009be0:	f000 f81a 	bl	8009c18 <__swsetup_r>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d0cb      	beq.n	8009b80 <__swbuf_r+0x28>
 8009be8:	f04f 37ff 	mov.w	r7, #4294967295
 8009bec:	e7ea      	b.n	8009bc4 <__swbuf_r+0x6c>
 8009bee:	bf00      	nop
 8009bf0:	0800c304 	.word	0x0800c304
 8009bf4:	0800c324 	.word	0x0800c324
 8009bf8:	0800c2e4 	.word	0x0800c2e4

08009bfc <__ascii_wctomb>:
 8009bfc:	b149      	cbz	r1, 8009c12 <__ascii_wctomb+0x16>
 8009bfe:	2aff      	cmp	r2, #255	; 0xff
 8009c00:	bf85      	ittet	hi
 8009c02:	238a      	movhi	r3, #138	; 0x8a
 8009c04:	6003      	strhi	r3, [r0, #0]
 8009c06:	700a      	strbls	r2, [r1, #0]
 8009c08:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c0c:	bf98      	it	ls
 8009c0e:	2001      	movls	r0, #1
 8009c10:	4770      	bx	lr
 8009c12:	4608      	mov	r0, r1
 8009c14:	4770      	bx	lr
	...

08009c18 <__swsetup_r>:
 8009c18:	4b32      	ldr	r3, [pc, #200]	; (8009ce4 <__swsetup_r+0xcc>)
 8009c1a:	b570      	push	{r4, r5, r6, lr}
 8009c1c:	681d      	ldr	r5, [r3, #0]
 8009c1e:	4606      	mov	r6, r0
 8009c20:	460c      	mov	r4, r1
 8009c22:	b125      	cbz	r5, 8009c2e <__swsetup_r+0x16>
 8009c24:	69ab      	ldr	r3, [r5, #24]
 8009c26:	b913      	cbnz	r3, 8009c2e <__swsetup_r+0x16>
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f000 f985 	bl	8009f38 <__sinit>
 8009c2e:	4b2e      	ldr	r3, [pc, #184]	; (8009ce8 <__swsetup_r+0xd0>)
 8009c30:	429c      	cmp	r4, r3
 8009c32:	d10f      	bne.n	8009c54 <__swsetup_r+0x3c>
 8009c34:	686c      	ldr	r4, [r5, #4]
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c3c:	0719      	lsls	r1, r3, #28
 8009c3e:	d42c      	bmi.n	8009c9a <__swsetup_r+0x82>
 8009c40:	06dd      	lsls	r5, r3, #27
 8009c42:	d411      	bmi.n	8009c68 <__swsetup_r+0x50>
 8009c44:	2309      	movs	r3, #9
 8009c46:	6033      	str	r3, [r6, #0]
 8009c48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c4c:	81a3      	strh	r3, [r4, #12]
 8009c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c52:	e03e      	b.n	8009cd2 <__swsetup_r+0xba>
 8009c54:	4b25      	ldr	r3, [pc, #148]	; (8009cec <__swsetup_r+0xd4>)
 8009c56:	429c      	cmp	r4, r3
 8009c58:	d101      	bne.n	8009c5e <__swsetup_r+0x46>
 8009c5a:	68ac      	ldr	r4, [r5, #8]
 8009c5c:	e7eb      	b.n	8009c36 <__swsetup_r+0x1e>
 8009c5e:	4b24      	ldr	r3, [pc, #144]	; (8009cf0 <__swsetup_r+0xd8>)
 8009c60:	429c      	cmp	r4, r3
 8009c62:	bf08      	it	eq
 8009c64:	68ec      	ldreq	r4, [r5, #12]
 8009c66:	e7e6      	b.n	8009c36 <__swsetup_r+0x1e>
 8009c68:	0758      	lsls	r0, r3, #29
 8009c6a:	d512      	bpl.n	8009c92 <__swsetup_r+0x7a>
 8009c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c6e:	b141      	cbz	r1, 8009c82 <__swsetup_r+0x6a>
 8009c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c74:	4299      	cmp	r1, r3
 8009c76:	d002      	beq.n	8009c7e <__swsetup_r+0x66>
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7ff fb31 	bl	80092e0 <_free_r>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6363      	str	r3, [r4, #52]	; 0x34
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	6063      	str	r3, [r4, #4]
 8009c8e:	6923      	ldr	r3, [r4, #16]
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	f043 0308 	orr.w	r3, r3, #8
 8009c98:	81a3      	strh	r3, [r4, #12]
 8009c9a:	6923      	ldr	r3, [r4, #16]
 8009c9c:	b94b      	cbnz	r3, 8009cb2 <__swsetup_r+0x9a>
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ca8:	d003      	beq.n	8009cb2 <__swsetup_r+0x9a>
 8009caa:	4621      	mov	r1, r4
 8009cac:	4630      	mov	r0, r6
 8009cae:	f000 fa09 	bl	800a0c4 <__smakebuf_r>
 8009cb2:	89a0      	ldrh	r0, [r4, #12]
 8009cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cb8:	f010 0301 	ands.w	r3, r0, #1
 8009cbc:	d00a      	beq.n	8009cd4 <__swsetup_r+0xbc>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60a3      	str	r3, [r4, #8]
 8009cc2:	6963      	ldr	r3, [r4, #20]
 8009cc4:	425b      	negs	r3, r3
 8009cc6:	61a3      	str	r3, [r4, #24]
 8009cc8:	6923      	ldr	r3, [r4, #16]
 8009cca:	b943      	cbnz	r3, 8009cde <__swsetup_r+0xc6>
 8009ccc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cd0:	d1ba      	bne.n	8009c48 <__swsetup_r+0x30>
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}
 8009cd4:	0781      	lsls	r1, r0, #30
 8009cd6:	bf58      	it	pl
 8009cd8:	6963      	ldrpl	r3, [r4, #20]
 8009cda:	60a3      	str	r3, [r4, #8]
 8009cdc:	e7f4      	b.n	8009cc8 <__swsetup_r+0xb0>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e7f7      	b.n	8009cd2 <__swsetup_r+0xba>
 8009ce2:	bf00      	nop
 8009ce4:	2000001c 	.word	0x2000001c
 8009ce8:	0800c304 	.word	0x0800c304
 8009cec:	0800c324 	.word	0x0800c324
 8009cf0:	0800c2e4 	.word	0x0800c2e4

08009cf4 <abort>:
 8009cf4:	b508      	push	{r3, lr}
 8009cf6:	2006      	movs	r0, #6
 8009cf8:	f000 fa54 	bl	800a1a4 <raise>
 8009cfc:	2001      	movs	r0, #1
 8009cfe:	f7f8 fb23 	bl	8002348 <_exit>
	...

08009d04 <__sflush_r>:
 8009d04:	898a      	ldrh	r2, [r1, #12]
 8009d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	0710      	lsls	r0, r2, #28
 8009d0e:	460c      	mov	r4, r1
 8009d10:	d458      	bmi.n	8009dc4 <__sflush_r+0xc0>
 8009d12:	684b      	ldr	r3, [r1, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dc05      	bgt.n	8009d24 <__sflush_r+0x20>
 8009d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	dc02      	bgt.n	8009d24 <__sflush_r+0x20>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d26:	2e00      	cmp	r6, #0
 8009d28:	d0f9      	beq.n	8009d1e <__sflush_r+0x1a>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d30:	682f      	ldr	r7, [r5, #0]
 8009d32:	602b      	str	r3, [r5, #0]
 8009d34:	d032      	beq.n	8009d9c <__sflush_r+0x98>
 8009d36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	075a      	lsls	r2, r3, #29
 8009d3c:	d505      	bpl.n	8009d4a <__sflush_r+0x46>
 8009d3e:	6863      	ldr	r3, [r4, #4]
 8009d40:	1ac0      	subs	r0, r0, r3
 8009d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d44:	b10b      	cbz	r3, 8009d4a <__sflush_r+0x46>
 8009d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d48:	1ac0      	subs	r0, r0, r3
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d50:	6a21      	ldr	r1, [r4, #32]
 8009d52:	4628      	mov	r0, r5
 8009d54:	47b0      	blx	r6
 8009d56:	1c43      	adds	r3, r0, #1
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	d106      	bne.n	8009d6a <__sflush_r+0x66>
 8009d5c:	6829      	ldr	r1, [r5, #0]
 8009d5e:	291d      	cmp	r1, #29
 8009d60:	d82c      	bhi.n	8009dbc <__sflush_r+0xb8>
 8009d62:	4a2a      	ldr	r2, [pc, #168]	; (8009e0c <__sflush_r+0x108>)
 8009d64:	40ca      	lsrs	r2, r1
 8009d66:	07d6      	lsls	r6, r2, #31
 8009d68:	d528      	bpl.n	8009dbc <__sflush_r+0xb8>
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	6062      	str	r2, [r4, #4]
 8009d6e:	04d9      	lsls	r1, r3, #19
 8009d70:	6922      	ldr	r2, [r4, #16]
 8009d72:	6022      	str	r2, [r4, #0]
 8009d74:	d504      	bpl.n	8009d80 <__sflush_r+0x7c>
 8009d76:	1c42      	adds	r2, r0, #1
 8009d78:	d101      	bne.n	8009d7e <__sflush_r+0x7a>
 8009d7a:	682b      	ldr	r3, [r5, #0]
 8009d7c:	b903      	cbnz	r3, 8009d80 <__sflush_r+0x7c>
 8009d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d82:	602f      	str	r7, [r5, #0]
 8009d84:	2900      	cmp	r1, #0
 8009d86:	d0ca      	beq.n	8009d1e <__sflush_r+0x1a>
 8009d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d8c:	4299      	cmp	r1, r3
 8009d8e:	d002      	beq.n	8009d96 <__sflush_r+0x92>
 8009d90:	4628      	mov	r0, r5
 8009d92:	f7ff faa5 	bl	80092e0 <_free_r>
 8009d96:	2000      	movs	r0, #0
 8009d98:	6360      	str	r0, [r4, #52]	; 0x34
 8009d9a:	e7c1      	b.n	8009d20 <__sflush_r+0x1c>
 8009d9c:	6a21      	ldr	r1, [r4, #32]
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b0      	blx	r6
 8009da4:	1c41      	adds	r1, r0, #1
 8009da6:	d1c7      	bne.n	8009d38 <__sflush_r+0x34>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d0c4      	beq.n	8009d38 <__sflush_r+0x34>
 8009dae:	2b1d      	cmp	r3, #29
 8009db0:	d001      	beq.n	8009db6 <__sflush_r+0xb2>
 8009db2:	2b16      	cmp	r3, #22
 8009db4:	d101      	bne.n	8009dba <__sflush_r+0xb6>
 8009db6:	602f      	str	r7, [r5, #0]
 8009db8:	e7b1      	b.n	8009d1e <__sflush_r+0x1a>
 8009dba:	89a3      	ldrh	r3, [r4, #12]
 8009dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dc0:	81a3      	strh	r3, [r4, #12]
 8009dc2:	e7ad      	b.n	8009d20 <__sflush_r+0x1c>
 8009dc4:	690f      	ldr	r7, [r1, #16]
 8009dc6:	2f00      	cmp	r7, #0
 8009dc8:	d0a9      	beq.n	8009d1e <__sflush_r+0x1a>
 8009dca:	0793      	lsls	r3, r2, #30
 8009dcc:	680e      	ldr	r6, [r1, #0]
 8009dce:	bf08      	it	eq
 8009dd0:	694b      	ldreq	r3, [r1, #20]
 8009dd2:	600f      	str	r7, [r1, #0]
 8009dd4:	bf18      	it	ne
 8009dd6:	2300      	movne	r3, #0
 8009dd8:	eba6 0807 	sub.w	r8, r6, r7
 8009ddc:	608b      	str	r3, [r1, #8]
 8009dde:	f1b8 0f00 	cmp.w	r8, #0
 8009de2:	dd9c      	ble.n	8009d1e <__sflush_r+0x1a>
 8009de4:	6a21      	ldr	r1, [r4, #32]
 8009de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009de8:	4643      	mov	r3, r8
 8009dea:	463a      	mov	r2, r7
 8009dec:	4628      	mov	r0, r5
 8009dee:	47b0      	blx	r6
 8009df0:	2800      	cmp	r0, #0
 8009df2:	dc06      	bgt.n	8009e02 <__sflush_r+0xfe>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009e00:	e78e      	b.n	8009d20 <__sflush_r+0x1c>
 8009e02:	4407      	add	r7, r0
 8009e04:	eba8 0800 	sub.w	r8, r8, r0
 8009e08:	e7e9      	b.n	8009dde <__sflush_r+0xda>
 8009e0a:	bf00      	nop
 8009e0c:	20400001 	.word	0x20400001

08009e10 <_fflush_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	690b      	ldr	r3, [r1, #16]
 8009e14:	4605      	mov	r5, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	b913      	cbnz	r3, 8009e20 <_fflush_r+0x10>
 8009e1a:	2500      	movs	r5, #0
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	b118      	cbz	r0, 8009e2a <_fflush_r+0x1a>
 8009e22:	6983      	ldr	r3, [r0, #24]
 8009e24:	b90b      	cbnz	r3, 8009e2a <_fflush_r+0x1a>
 8009e26:	f000 f887 	bl	8009f38 <__sinit>
 8009e2a:	4b14      	ldr	r3, [pc, #80]	; (8009e7c <_fflush_r+0x6c>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d11b      	bne.n	8009e68 <_fflush_r+0x58>
 8009e30:	686c      	ldr	r4, [r5, #4]
 8009e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0ef      	beq.n	8009e1a <_fflush_r+0xa>
 8009e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e3c:	07d0      	lsls	r0, r2, #31
 8009e3e:	d404      	bmi.n	8009e4a <_fflush_r+0x3a>
 8009e40:	0599      	lsls	r1, r3, #22
 8009e42:	d402      	bmi.n	8009e4a <_fflush_r+0x3a>
 8009e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e46:	f000 f915 	bl	800a074 <__retarget_lock_acquire_recursive>
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	f7ff ff59 	bl	8009d04 <__sflush_r>
 8009e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e54:	07da      	lsls	r2, r3, #31
 8009e56:	4605      	mov	r5, r0
 8009e58:	d4e0      	bmi.n	8009e1c <_fflush_r+0xc>
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	059b      	lsls	r3, r3, #22
 8009e5e:	d4dd      	bmi.n	8009e1c <_fflush_r+0xc>
 8009e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e62:	f000 f908 	bl	800a076 <__retarget_lock_release_recursive>
 8009e66:	e7d9      	b.n	8009e1c <_fflush_r+0xc>
 8009e68:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <_fflush_r+0x70>)
 8009e6a:	429c      	cmp	r4, r3
 8009e6c:	d101      	bne.n	8009e72 <_fflush_r+0x62>
 8009e6e:	68ac      	ldr	r4, [r5, #8]
 8009e70:	e7df      	b.n	8009e32 <_fflush_r+0x22>
 8009e72:	4b04      	ldr	r3, [pc, #16]	; (8009e84 <_fflush_r+0x74>)
 8009e74:	429c      	cmp	r4, r3
 8009e76:	bf08      	it	eq
 8009e78:	68ec      	ldreq	r4, [r5, #12]
 8009e7a:	e7da      	b.n	8009e32 <_fflush_r+0x22>
 8009e7c:	0800c304 	.word	0x0800c304
 8009e80:	0800c324 	.word	0x0800c324
 8009e84:	0800c2e4 	.word	0x0800c2e4

08009e88 <std>:
 8009e88:	2300      	movs	r3, #0
 8009e8a:	b510      	push	{r4, lr}
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e96:	6083      	str	r3, [r0, #8]
 8009e98:	8181      	strh	r1, [r0, #12]
 8009e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e9c:	81c2      	strh	r2, [r0, #14]
 8009e9e:	6183      	str	r3, [r0, #24]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	2208      	movs	r2, #8
 8009ea4:	305c      	adds	r0, #92	; 0x5c
 8009ea6:	f7fd fb55 	bl	8007554 <memset>
 8009eaa:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <std+0x38>)
 8009eac:	6263      	str	r3, [r4, #36]	; 0x24
 8009eae:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <std+0x3c>)
 8009eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <std+0x40>)
 8009eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009eb6:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <std+0x44>)
 8009eb8:	6224      	str	r4, [r4, #32]
 8009eba:	6323      	str	r3, [r4, #48]	; 0x30
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800a1dd 	.word	0x0800a1dd
 8009ec4:	0800a1ff 	.word	0x0800a1ff
 8009ec8:	0800a237 	.word	0x0800a237
 8009ecc:	0800a25b 	.word	0x0800a25b

08009ed0 <_cleanup_r>:
 8009ed0:	4901      	ldr	r1, [pc, #4]	; (8009ed8 <_cleanup_r+0x8>)
 8009ed2:	f000 b8af 	b.w	800a034 <_fwalk_reent>
 8009ed6:	bf00      	nop
 8009ed8:	08009e11 	.word	0x08009e11

08009edc <__sfmoreglue>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	2268      	movs	r2, #104	; 0x68
 8009ee0:	1e4d      	subs	r5, r1, #1
 8009ee2:	4355      	muls	r5, r2
 8009ee4:	460e      	mov	r6, r1
 8009ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eea:	f7ff fa65 	bl	80093b8 <_malloc_r>
 8009eee:	4604      	mov	r4, r0
 8009ef0:	b140      	cbz	r0, 8009f04 <__sfmoreglue+0x28>
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ef8:	300c      	adds	r0, #12
 8009efa:	60a0      	str	r0, [r4, #8]
 8009efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f00:	f7fd fb28 	bl	8007554 <memset>
 8009f04:	4620      	mov	r0, r4
 8009f06:	bd70      	pop	{r4, r5, r6, pc}

08009f08 <__sfp_lock_acquire>:
 8009f08:	4801      	ldr	r0, [pc, #4]	; (8009f10 <__sfp_lock_acquire+0x8>)
 8009f0a:	f000 b8b3 	b.w	800a074 <__retarget_lock_acquire_recursive>
 8009f0e:	bf00      	nop
 8009f10:	200007b1 	.word	0x200007b1

08009f14 <__sfp_lock_release>:
 8009f14:	4801      	ldr	r0, [pc, #4]	; (8009f1c <__sfp_lock_release+0x8>)
 8009f16:	f000 b8ae 	b.w	800a076 <__retarget_lock_release_recursive>
 8009f1a:	bf00      	nop
 8009f1c:	200007b1 	.word	0x200007b1

08009f20 <__sinit_lock_acquire>:
 8009f20:	4801      	ldr	r0, [pc, #4]	; (8009f28 <__sinit_lock_acquire+0x8>)
 8009f22:	f000 b8a7 	b.w	800a074 <__retarget_lock_acquire_recursive>
 8009f26:	bf00      	nop
 8009f28:	200007b2 	.word	0x200007b2

08009f2c <__sinit_lock_release>:
 8009f2c:	4801      	ldr	r0, [pc, #4]	; (8009f34 <__sinit_lock_release+0x8>)
 8009f2e:	f000 b8a2 	b.w	800a076 <__retarget_lock_release_recursive>
 8009f32:	bf00      	nop
 8009f34:	200007b2 	.word	0x200007b2

08009f38 <__sinit>:
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	f7ff fff0 	bl	8009f20 <__sinit_lock_acquire>
 8009f40:	69a3      	ldr	r3, [r4, #24]
 8009f42:	b11b      	cbz	r3, 8009f4c <__sinit+0x14>
 8009f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f48:	f7ff bff0 	b.w	8009f2c <__sinit_lock_release>
 8009f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f50:	6523      	str	r3, [r4, #80]	; 0x50
 8009f52:	4b13      	ldr	r3, [pc, #76]	; (8009fa0 <__sinit+0x68>)
 8009f54:	4a13      	ldr	r2, [pc, #76]	; (8009fa4 <__sinit+0x6c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f5a:	42a3      	cmp	r3, r4
 8009f5c:	bf04      	itt	eq
 8009f5e:	2301      	moveq	r3, #1
 8009f60:	61a3      	streq	r3, [r4, #24]
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 f820 	bl	8009fa8 <__sfp>
 8009f68:	6060      	str	r0, [r4, #4]
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 f81c 	bl	8009fa8 <__sfp>
 8009f70:	60a0      	str	r0, [r4, #8]
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 f818 	bl	8009fa8 <__sfp>
 8009f78:	2200      	movs	r2, #0
 8009f7a:	60e0      	str	r0, [r4, #12]
 8009f7c:	2104      	movs	r1, #4
 8009f7e:	6860      	ldr	r0, [r4, #4]
 8009f80:	f7ff ff82 	bl	8009e88 <std>
 8009f84:	68a0      	ldr	r0, [r4, #8]
 8009f86:	2201      	movs	r2, #1
 8009f88:	2109      	movs	r1, #9
 8009f8a:	f7ff ff7d 	bl	8009e88 <std>
 8009f8e:	68e0      	ldr	r0, [r4, #12]
 8009f90:	2202      	movs	r2, #2
 8009f92:	2112      	movs	r1, #18
 8009f94:	f7ff ff78 	bl	8009e88 <std>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	61a3      	str	r3, [r4, #24]
 8009f9c:	e7d2      	b.n	8009f44 <__sinit+0xc>
 8009f9e:	bf00      	nop
 8009fa0:	0800bf6c 	.word	0x0800bf6c
 8009fa4:	08009ed1 	.word	0x08009ed1

08009fa8 <__sfp>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	4607      	mov	r7, r0
 8009fac:	f7ff ffac 	bl	8009f08 <__sfp_lock_acquire>
 8009fb0:	4b1e      	ldr	r3, [pc, #120]	; (800a02c <__sfp+0x84>)
 8009fb2:	681e      	ldr	r6, [r3, #0]
 8009fb4:	69b3      	ldr	r3, [r6, #24]
 8009fb6:	b913      	cbnz	r3, 8009fbe <__sfp+0x16>
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7ff ffbd 	bl	8009f38 <__sinit>
 8009fbe:	3648      	adds	r6, #72	; 0x48
 8009fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	d503      	bpl.n	8009fd0 <__sfp+0x28>
 8009fc8:	6833      	ldr	r3, [r6, #0]
 8009fca:	b30b      	cbz	r3, 800a010 <__sfp+0x68>
 8009fcc:	6836      	ldr	r6, [r6, #0]
 8009fce:	e7f7      	b.n	8009fc0 <__sfp+0x18>
 8009fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fd4:	b9d5      	cbnz	r5, 800a00c <__sfp+0x64>
 8009fd6:	4b16      	ldr	r3, [pc, #88]	; (800a030 <__sfp+0x88>)
 8009fd8:	60e3      	str	r3, [r4, #12]
 8009fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fde:	6665      	str	r5, [r4, #100]	; 0x64
 8009fe0:	f000 f847 	bl	800a072 <__retarget_lock_init_recursive>
 8009fe4:	f7ff ff96 	bl	8009f14 <__sfp_lock_release>
 8009fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ff0:	6025      	str	r5, [r4, #0]
 8009ff2:	61a5      	str	r5, [r4, #24]
 8009ff4:	2208      	movs	r2, #8
 8009ff6:	4629      	mov	r1, r5
 8009ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ffc:	f7fd faaa 	bl	8007554 <memset>
 800a000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a008:	4620      	mov	r0, r4
 800a00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a00c:	3468      	adds	r4, #104	; 0x68
 800a00e:	e7d9      	b.n	8009fc4 <__sfp+0x1c>
 800a010:	2104      	movs	r1, #4
 800a012:	4638      	mov	r0, r7
 800a014:	f7ff ff62 	bl	8009edc <__sfmoreglue>
 800a018:	4604      	mov	r4, r0
 800a01a:	6030      	str	r0, [r6, #0]
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d1d5      	bne.n	8009fcc <__sfp+0x24>
 800a020:	f7ff ff78 	bl	8009f14 <__sfp_lock_release>
 800a024:	230c      	movs	r3, #12
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	e7ee      	b.n	800a008 <__sfp+0x60>
 800a02a:	bf00      	nop
 800a02c:	0800bf6c 	.word	0x0800bf6c
 800a030:	ffff0001 	.word	0xffff0001

0800a034 <_fwalk_reent>:
 800a034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a038:	4606      	mov	r6, r0
 800a03a:	4688      	mov	r8, r1
 800a03c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a040:	2700      	movs	r7, #0
 800a042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a046:	f1b9 0901 	subs.w	r9, r9, #1
 800a04a:	d505      	bpl.n	800a058 <_fwalk_reent+0x24>
 800a04c:	6824      	ldr	r4, [r4, #0]
 800a04e:	2c00      	cmp	r4, #0
 800a050:	d1f7      	bne.n	800a042 <_fwalk_reent+0xe>
 800a052:	4638      	mov	r0, r7
 800a054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a058:	89ab      	ldrh	r3, [r5, #12]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d907      	bls.n	800a06e <_fwalk_reent+0x3a>
 800a05e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a062:	3301      	adds	r3, #1
 800a064:	d003      	beq.n	800a06e <_fwalk_reent+0x3a>
 800a066:	4629      	mov	r1, r5
 800a068:	4630      	mov	r0, r6
 800a06a:	47c0      	blx	r8
 800a06c:	4307      	orrs	r7, r0
 800a06e:	3568      	adds	r5, #104	; 0x68
 800a070:	e7e9      	b.n	800a046 <_fwalk_reent+0x12>

0800a072 <__retarget_lock_init_recursive>:
 800a072:	4770      	bx	lr

0800a074 <__retarget_lock_acquire_recursive>:
 800a074:	4770      	bx	lr

0800a076 <__retarget_lock_release_recursive>:
 800a076:	4770      	bx	lr

0800a078 <__swhatbuf_r>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	460e      	mov	r6, r1
 800a07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a080:	2900      	cmp	r1, #0
 800a082:	b096      	sub	sp, #88	; 0x58
 800a084:	4614      	mov	r4, r2
 800a086:	461d      	mov	r5, r3
 800a088:	da08      	bge.n	800a09c <__swhatbuf_r+0x24>
 800a08a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	602a      	str	r2, [r5, #0]
 800a092:	061a      	lsls	r2, r3, #24
 800a094:	d410      	bmi.n	800a0b8 <__swhatbuf_r+0x40>
 800a096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a09a:	e00e      	b.n	800a0ba <__swhatbuf_r+0x42>
 800a09c:	466a      	mov	r2, sp
 800a09e:	f000 f903 	bl	800a2a8 <_fstat_r>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	dbf1      	blt.n	800a08a <__swhatbuf_r+0x12>
 800a0a6:	9a01      	ldr	r2, [sp, #4]
 800a0a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0b0:	425a      	negs	r2, r3
 800a0b2:	415a      	adcs	r2, r3
 800a0b4:	602a      	str	r2, [r5, #0]
 800a0b6:	e7ee      	b.n	800a096 <__swhatbuf_r+0x1e>
 800a0b8:	2340      	movs	r3, #64	; 0x40
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	b016      	add	sp, #88	; 0x58
 800a0c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0c4 <__smakebuf_r>:
 800a0c4:	898b      	ldrh	r3, [r1, #12]
 800a0c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0c8:	079d      	lsls	r5, r3, #30
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	d507      	bpl.n	800a0e0 <__smakebuf_r+0x1c>
 800a0d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	6123      	str	r3, [r4, #16]
 800a0d8:	2301      	movs	r3, #1
 800a0da:	6163      	str	r3, [r4, #20]
 800a0dc:	b002      	add	sp, #8
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	ab01      	add	r3, sp, #4
 800a0e2:	466a      	mov	r2, sp
 800a0e4:	f7ff ffc8 	bl	800a078 <__swhatbuf_r>
 800a0e8:	9900      	ldr	r1, [sp, #0]
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7ff f963 	bl	80093b8 <_malloc_r>
 800a0f2:	b948      	cbnz	r0, 800a108 <__smakebuf_r+0x44>
 800a0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f8:	059a      	lsls	r2, r3, #22
 800a0fa:	d4ef      	bmi.n	800a0dc <__smakebuf_r+0x18>
 800a0fc:	f023 0303 	bic.w	r3, r3, #3
 800a100:	f043 0302 	orr.w	r3, r3, #2
 800a104:	81a3      	strh	r3, [r4, #12]
 800a106:	e7e3      	b.n	800a0d0 <__smakebuf_r+0xc>
 800a108:	4b0d      	ldr	r3, [pc, #52]	; (800a140 <__smakebuf_r+0x7c>)
 800a10a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a10c:	89a3      	ldrh	r3, [r4, #12]
 800a10e:	6020      	str	r0, [r4, #0]
 800a110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a114:	81a3      	strh	r3, [r4, #12]
 800a116:	9b00      	ldr	r3, [sp, #0]
 800a118:	6163      	str	r3, [r4, #20]
 800a11a:	9b01      	ldr	r3, [sp, #4]
 800a11c:	6120      	str	r0, [r4, #16]
 800a11e:	b15b      	cbz	r3, 800a138 <__smakebuf_r+0x74>
 800a120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a124:	4630      	mov	r0, r6
 800a126:	f000 f8d1 	bl	800a2cc <_isatty_r>
 800a12a:	b128      	cbz	r0, 800a138 <__smakebuf_r+0x74>
 800a12c:	89a3      	ldrh	r3, [r4, #12]
 800a12e:	f023 0303 	bic.w	r3, r3, #3
 800a132:	f043 0301 	orr.w	r3, r3, #1
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	89a0      	ldrh	r0, [r4, #12]
 800a13a:	4305      	orrs	r5, r0
 800a13c:	81a5      	strh	r5, [r4, #12]
 800a13e:	e7cd      	b.n	800a0dc <__smakebuf_r+0x18>
 800a140:	08009ed1 	.word	0x08009ed1

0800a144 <_malloc_usable_size_r>:
 800a144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a148:	1f18      	subs	r0, r3, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bfbc      	itt	lt
 800a14e:	580b      	ldrlt	r3, [r1, r0]
 800a150:	18c0      	addlt	r0, r0, r3
 800a152:	4770      	bx	lr

0800a154 <_raise_r>:
 800a154:	291f      	cmp	r1, #31
 800a156:	b538      	push	{r3, r4, r5, lr}
 800a158:	4604      	mov	r4, r0
 800a15a:	460d      	mov	r5, r1
 800a15c:	d904      	bls.n	800a168 <_raise_r+0x14>
 800a15e:	2316      	movs	r3, #22
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	f04f 30ff 	mov.w	r0, #4294967295
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a16a:	b112      	cbz	r2, 800a172 <_raise_r+0x1e>
 800a16c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a170:	b94b      	cbnz	r3, 800a186 <_raise_r+0x32>
 800a172:	4620      	mov	r0, r4
 800a174:	f000 f830 	bl	800a1d8 <_getpid_r>
 800a178:	462a      	mov	r2, r5
 800a17a:	4601      	mov	r1, r0
 800a17c:	4620      	mov	r0, r4
 800a17e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a182:	f000 b817 	b.w	800a1b4 <_kill_r>
 800a186:	2b01      	cmp	r3, #1
 800a188:	d00a      	beq.n	800a1a0 <_raise_r+0x4c>
 800a18a:	1c59      	adds	r1, r3, #1
 800a18c:	d103      	bne.n	800a196 <_raise_r+0x42>
 800a18e:	2316      	movs	r3, #22
 800a190:	6003      	str	r3, [r0, #0]
 800a192:	2001      	movs	r0, #1
 800a194:	e7e7      	b.n	800a166 <_raise_r+0x12>
 800a196:	2400      	movs	r4, #0
 800a198:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a19c:	4628      	mov	r0, r5
 800a19e:	4798      	blx	r3
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	e7e0      	b.n	800a166 <_raise_r+0x12>

0800a1a4 <raise>:
 800a1a4:	4b02      	ldr	r3, [pc, #8]	; (800a1b0 <raise+0xc>)
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	f7ff bfd3 	b.w	800a154 <_raise_r>
 800a1ae:	bf00      	nop
 800a1b0:	2000001c 	.word	0x2000001c

0800a1b4 <_kill_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d07      	ldr	r5, [pc, #28]	; (800a1d4 <_kill_r+0x20>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	4611      	mov	r1, r2
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	f7f8 f8b1 	bl	8002328 <_kill>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d102      	bne.n	800a1d0 <_kill_r+0x1c>
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	b103      	cbz	r3, 800a1d0 <_kill_r+0x1c>
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	bd38      	pop	{r3, r4, r5, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200007ac 	.word	0x200007ac

0800a1d8 <_getpid_r>:
 800a1d8:	f7f8 b89e 	b.w	8002318 <_getpid>

0800a1dc <__sread>:
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	460c      	mov	r4, r1
 800a1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e4:	f000 f894 	bl	800a310 <_read_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	bfab      	itete	ge
 800a1ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a1f0:	181b      	addge	r3, r3, r0
 800a1f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1f6:	bfac      	ite	ge
 800a1f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1fa:	81a3      	strhlt	r3, [r4, #12]
 800a1fc:	bd10      	pop	{r4, pc}

0800a1fe <__swrite>:
 800a1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a202:	461f      	mov	r7, r3
 800a204:	898b      	ldrh	r3, [r1, #12]
 800a206:	05db      	lsls	r3, r3, #23
 800a208:	4605      	mov	r5, r0
 800a20a:	460c      	mov	r4, r1
 800a20c:	4616      	mov	r6, r2
 800a20e:	d505      	bpl.n	800a21c <__swrite+0x1e>
 800a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a214:	2302      	movs	r3, #2
 800a216:	2200      	movs	r2, #0
 800a218:	f000 f868 	bl	800a2ec <_lseek_r>
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a226:	81a3      	strh	r3, [r4, #12]
 800a228:	4632      	mov	r2, r6
 800a22a:	463b      	mov	r3, r7
 800a22c:	4628      	mov	r0, r5
 800a22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a232:	f000 b817 	b.w	800a264 <_write_r>

0800a236 <__sseek>:
 800a236:	b510      	push	{r4, lr}
 800a238:	460c      	mov	r4, r1
 800a23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23e:	f000 f855 	bl	800a2ec <_lseek_r>
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	bf15      	itete	ne
 800a248:	6560      	strne	r0, [r4, #84]	; 0x54
 800a24a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a24e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a252:	81a3      	strheq	r3, [r4, #12]
 800a254:	bf18      	it	ne
 800a256:	81a3      	strhne	r3, [r4, #12]
 800a258:	bd10      	pop	{r4, pc}

0800a25a <__sclose>:
 800a25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25e:	f000 b813 	b.w	800a288 <_close_r>
	...

0800a264 <_write_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4d07      	ldr	r5, [pc, #28]	; (800a284 <_write_r+0x20>)
 800a268:	4604      	mov	r4, r0
 800a26a:	4608      	mov	r0, r1
 800a26c:	4611      	mov	r1, r2
 800a26e:	2200      	movs	r2, #0
 800a270:	602a      	str	r2, [r5, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	f7f8 f88f 	bl	8002396 <_write>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d102      	bne.n	800a282 <_write_r+0x1e>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	b103      	cbz	r3, 800a282 <_write_r+0x1e>
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	200007ac 	.word	0x200007ac

0800a288 <_close_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4d06      	ldr	r5, [pc, #24]	; (800a2a4 <_close_r+0x1c>)
 800a28c:	2300      	movs	r3, #0
 800a28e:	4604      	mov	r4, r0
 800a290:	4608      	mov	r0, r1
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	f7f8 f89b 	bl	80023ce <_close>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_close_r+0x1a>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_close_r+0x1a>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	200007ac 	.word	0x200007ac

0800a2a8 <_fstat_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d07      	ldr	r5, [pc, #28]	; (800a2c8 <_fstat_r+0x20>)
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	f7f8 f896 	bl	80023e6 <_fstat>
 800a2ba:	1c43      	adds	r3, r0, #1
 800a2bc:	d102      	bne.n	800a2c4 <_fstat_r+0x1c>
 800a2be:	682b      	ldr	r3, [r5, #0]
 800a2c0:	b103      	cbz	r3, 800a2c4 <_fstat_r+0x1c>
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	bd38      	pop	{r3, r4, r5, pc}
 800a2c6:	bf00      	nop
 800a2c8:	200007ac 	.word	0x200007ac

0800a2cc <_isatty_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4d06      	ldr	r5, [pc, #24]	; (800a2e8 <_isatty_r+0x1c>)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	4608      	mov	r0, r1
 800a2d6:	602b      	str	r3, [r5, #0]
 800a2d8:	f7f8 f895 	bl	8002406 <_isatty>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	d102      	bne.n	800a2e6 <_isatty_r+0x1a>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	b103      	cbz	r3, 800a2e6 <_isatty_r+0x1a>
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	200007ac 	.word	0x200007ac

0800a2ec <_lseek_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d07      	ldr	r5, [pc, #28]	; (800a30c <_lseek_r+0x20>)
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	602a      	str	r2, [r5, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f7f8 f88e 	bl	800241c <_lseek>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_lseek_r+0x1e>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b103      	cbz	r3, 800a30a <_lseek_r+0x1e>
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	200007ac 	.word	0x200007ac

0800a310 <_read_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d07      	ldr	r5, [pc, #28]	; (800a330 <_read_r+0x20>)
 800a314:	4604      	mov	r4, r0
 800a316:	4608      	mov	r0, r1
 800a318:	4611      	mov	r1, r2
 800a31a:	2200      	movs	r2, #0
 800a31c:	602a      	str	r2, [r5, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7f8 f81c 	bl	800235c <_read>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_read_r+0x1e>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_read_r+0x1e>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	200007ac 	.word	0x200007ac

0800a334 <_init>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr

0800a340 <_fini>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr
