
obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cec4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000331c  0800d058  0800d058  0001d058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010374  08010374  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  08010374  08010374  00020374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801037c  0801037c  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801037c  0801037c  0002037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010380  08010380  00020380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08010384  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  2000035c  080106e0  0003035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  080106e0  00030b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc7c  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000426f  00000000  00000000  00050008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00054278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  00055cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027053  00000000  00000000  00057550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ded  00000000  00000000  0007e5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7742  00000000  00000000  0009f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186ad2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008118  00000000  00000000  00186b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000035c 	.word	0x2000035c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d03c 	.word	0x0800d03c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000360 	.word	0x20000360
 80001cc:	0800d03c 	.word	0x0800d03c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CAN1_Init>:
extern IWDG_HandleTypeDef hiwdg;
extern CAN_HandleTypeDef hcan1;
uint32_t tx_mailbox;

void MX_CAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_CAN1_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f6e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f9c:	f003 fd26 	bl	80049ec <HAL_CAN_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_CAN1_Init+0x5e>
	{
	  Error_Handler();
 8000fa6:	f001 fc6f 	bl	8002888 <Error_Handler>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000444 	.word	0x20000444
 8000fb4:	40006400 	.word	0x40006400

08000fb8 <canConfig>:

void canConfig(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8000fca:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000fce:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8000fd4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fd8:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <canConfig+0x64>)
 8000fec:	f003 fdf9 	bl	8004be2 <HAL_CAN_ConfigFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <canConfig+0x42>
	{
		Error_Handler();
 8000ff6:	f001 fc47 	bl	8002888 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <canConfig+0x64>)
 8000ffc:	f003 febb 	bl	8004d76 <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <canConfig+0x52>
	{
		Error_Handler();
 8001006:	f001 fc3f 	bl	8002888 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <canConfig+0x64>)
 800100e:	f004 f8d8 	bl	80051c2 <HAL_CAN_ActivateNotification>
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000444 	.word	0x20000444

08001020 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	f107 0214 	add.w	r2, r7, #20
 8001030:	2100      	movs	r1, #0
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001034:	f003 ffb3 	bl	8004f9e <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fbaf 	bl	80017a0 <OBD2_PID_Parse>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001048:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	OBD2_ShowOnDisplay(obd_comm.current_value);
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800104e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f000 ff99 	bl	8001f8c <OBD2_ShowOnDisplay>

	HAL_IWDG_Refresh(&hiwdg);
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800105c:	f005 fec0 	bl	8006de0 <HAL_IWDG_Refresh>
}
 8001060:	bf00      	nop
 8001062:	3730      	adds	r7, #48	; 0x30
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000444 	.word	0x20000444
 800106c:	200006c0 	.word	0x200006c0
 8001070:	200004c0 	.word	0x200004c0

08001074 <CAN_SEND_MESSAGE>:

void CAN_SEND_MESSAGE(uint8_t *tx_frame)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = DEVICE_CAN_ID;
 800107c:	f240 73df 	movw	r3, #2015	; 0x7df
 8001080:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 8001082:	2308      	movs	r3, #8
 8001084:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_frame, &tx_mailbox) != HAL_OK)
 800108e:	f107 0108 	add.w	r1, r7, #8
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <CAN_SEND_MESSAGE+0x3c>)
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <CAN_SEND_MESSAGE+0x40>)
 8001098:	f003 feb1 	bl	8004dfe <HAL_CAN_AddTxMessage>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <CAN_SEND_MESSAGE+0x32>
	{
		Error_Handler();
 80010a2:	f001 fbf1 	bl	8002888 <Error_Handler>
	}

}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000378 	.word	0x20000378
 80010b4:	20000444 	.word	0x20000444

080010b8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2210      	movs	r2, #16
 80010c6:	60da      	str	r2, [r3, #12]
//	__HAL_CAN_Receive_IT(hcan, CAN_RX_FIFO0);
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <KLine_Init>:
static void MX_GPIO_KLineUART_Init(void);
static void UART_PIN_State(uint8_t state);
static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght);
static void MX_USART1_UART_Init(uint16_t baud_rate);

obd_protocol KLine_Init(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 80010da:	f000 f90b 	bl	80012f4 <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 80010de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010e2:	f002 faa1 	bl	8003628 <HAL_Delay>
	UART_PIN_State(0); //0
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f91a 	bl	8001320 <UART_PIN_State>
	HAL_Delay(200);
 80010ec:	20c8      	movs	r0, #200	; 0xc8
 80010ee:	f002 fa9b 	bl	8003628 <HAL_Delay>
	UART_PIN_State(1);//11
 80010f2:	2001      	movs	r0, #1
 80010f4:	f000 f914 	bl	8001320 <UART_PIN_State>
	HAL_Delay(400);
 80010f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010fc:	f002 fa94 	bl	8003628 <HAL_Delay>
	UART_PIN_State(0);//00
 8001100:	2000      	movs	r0, #0
 8001102:	f000 f90d 	bl	8001320 <UART_PIN_State>
	HAL_Delay(400);
 8001106:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800110a:	f002 fa8d 	bl	8003628 <HAL_Delay>
	UART_PIN_State(1);//11
 800110e:	2001      	movs	r0, #1
 8001110:	f000 f906 	bl	8001320 <UART_PIN_State>
	HAL_Delay(400);
 8001114:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001118:	f002 fa86 	bl	8003628 <HAL_Delay>
	UART_PIN_State(0);//00
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f8ff 	bl	8001320 <UART_PIN_State>
	HAL_Delay(400);
 8001122:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001126:	f002 fa7f 	bl	8003628 <HAL_Delay>
	UART_PIN_State(1);//1
 800112a:	2001      	movs	r0, #1
 800112c:	f000 f8f8 	bl	8001320 <UART_PIN_State>

	MX_USART1_UART_Init(10400);
 8001130:	f642 00a0 	movw	r0, #10400	; 0x28a0
 8001134:	f000 fa06 	bl	8001544 <MX_USART1_UART_Init>

	HAL_UART_Receive(&huart1, uartBuf, 3, 500);
 8001138:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800113c:	2203      	movs	r2, #3
 800113e:	492b      	ldr	r1, [pc, #172]	; (80011ec <KLine_Init+0x118>)
 8001140:	482b      	ldr	r0, [pc, #172]	; (80011f0 <KLine_Init+0x11c>)
 8001142:	f007 fd8a 	bl	8008c5a <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 8001146:	4b29      	ldr	r3, [pc, #164]	; (80011ec <KLine_Init+0x118>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b55      	cmp	r3, #85	; 0x55
 800114c:	d001      	beq.n	8001152 <KLine_Init+0x7e>
	{
		return OBD_NONE;
 800114e:	2300      	movs	r3, #0
 8001150:	e047      	b.n	80011e2 <KLine_Init+0x10e>
	}
	else if(uartBuf[1] == uartBuf[2])
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <KLine_Init+0x118>)
 8001154:	785a      	ldrb	r2, [r3, #1]
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <KLine_Init+0x118>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	429a      	cmp	r2, r3
 800115c:	d122      	bne.n	80011a4 <KLine_Init+0xd0>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <KLine_Init+0x118>)
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	43db      	mvns	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 8001168:	2019      	movs	r0, #25
 800116a:	f002 fa5d 	bl	8003628 <HAL_Delay>
			HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 800116e:	1df9      	adds	r1, r7, #7
 8001170:	2332      	movs	r3, #50	; 0x32
 8001172:	2201      	movs	r2, #1
 8001174:	481e      	ldr	r0, [pc, #120]	; (80011f0 <KLine_Init+0x11c>)
 8001176:	f007 fcdc 	bl	8008b32 <HAL_UART_Transmit>
			HAL_Delay(25);
 800117a:	2019      	movs	r0, #25
 800117c:	f002 fa54 	bl	8003628 <HAL_Delay>
			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <KLine_Init+0x11c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	8b1b      	ldrh	r3, [r3, #24]
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <KLine_Init+0x11c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0208 	orr.w	r2, r2, #8
 8001190:	b292      	uxth	r2, r2
 8001192:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 8001194:	2364      	movs	r3, #100	; 0x64
 8001196:	2201      	movs	r2, #1
 8001198:	4916      	ldr	r1, [pc, #88]	; (80011f4 <KLine_Init+0x120>)
 800119a:	4815      	ldr	r0, [pc, #84]	; (80011f0 <KLine_Init+0x11c>)
 800119c:	f007 fd5d 	bl	8008c5a <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
			return OBD_PROTO_ISO9141;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e01e      	b.n	80011e2 <KLine_Init+0x10e>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <KLine_Init+0x118>)
 80011a6:	785b      	ldrb	r3, [r3, #1]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 80011ae:	2019      	movs	r0, #25
 80011b0:	f002 fa3a 	bl	8003628 <HAL_Delay>
		HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 80011b4:	1db9      	adds	r1, r7, #6
 80011b6:	2332      	movs	r3, #50	; 0x32
 80011b8:	2201      	movs	r2, #1
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <KLine_Init+0x11c>)
 80011bc:	f007 fcb9 	bl	8008b32 <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <KLine_Init+0x11c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	8b1b      	ldrh	r3, [r3, #24]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <KLine_Init+0x11c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0208 	orr.w	r2, r2, #8
 80011d0:	b292      	uxth	r2, r2
 80011d2:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	2201      	movs	r2, #1
 80011d8:	4906      	ldr	r1, [pc, #24]	; (80011f4 <KLine_Init+0x120>)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <KLine_Init+0x11c>)
 80011dc:	f007 fd3d 	bl	8008c5a <HAL_UART_Receive>
		return OBD_PROTO_KWP2000_SLOW;
 80011e0:	2302      	movs	r3, #2
	}
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000634 	.word	0x20000634
 80011f0:	20000568 	.word	0x20000568
 80011f4:	20000393 	.word	0x20000393

080011f8 <KWP2000_Fast_Init>:

obd_protocol KWP2000_Fast_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 80011fe:	4a37      	ldr	r2, [pc, #220]	; (80012dc <KWP2000_Fast_Init+0xe4>)
 8001200:	463b      	mov	r3, r7
 8001202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001206:	6018      	str	r0, [r3, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	7019      	strb	r1, [r3, #0]
//	uint8_t resp_msg[7]={0};
	uint8_t checksum = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
	obd_comm.msg_type = 1;
 8001210:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <KWP2000_Fast_Init+0xe8>)
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	HAL_UART_DeInit(&huart1);
 8001218:	4832      	ldr	r0, [pc, #200]	; (80012e4 <KWP2000_Fast_Init+0xec>)
 800121a:	f007 fc51 	bl	8008ac0 <HAL_UART_DeInit>
	HAL_Delay(3000);
 800121e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001222:	f002 fa01 	bl	8003628 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 8001226:	f000 f865 	bl	80012f4 <MX_GPIO_KLineUART_Init>
	UART_PIN_State(0);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f878 	bl	8001320 <UART_PIN_State>
	HAL_Delay(25);
 8001230:	2019      	movs	r0, #25
 8001232:	f002 f9f9 	bl	8003628 <HAL_Delay>
	UART_PIN_State(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 f872 	bl	8001320 <UART_PIN_State>
	HAL_Delay(25);
 800123c:	2019      	movs	r0, #25
 800123e:	f002 f9f3 	bl	8003628 <HAL_Delay>
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001242:	4828      	ldr	r0, [pc, #160]	; (80012e4 <KWP2000_Fast_Init+0xec>)
 8001244:	f007 fbee 	bl	8008a24 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <KWP2000_Fast_Init+0x5a>
	{
		Error_Handler();
 800124e:	f001 fb1b 	bl	8002888 <Error_Handler>
	}
//	MX_USART1_UART_Init(10400);
	HAL_UART_Transmit(&huart1, start_msg, 5, 10);
 8001252:	4639      	mov	r1, r7
 8001254:	230a      	movs	r3, #10
 8001256:	2205      	movs	r2, #5
 8001258:	4822      	ldr	r0, [pc, #136]	; (80012e4 <KWP2000_Fast_Init+0xec>)
 800125a:	f007 fc6a 	bl	8008b32 <HAL_UART_Transmit>
//	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
//	HAL_Delay(20);

	HAL_UART_Receive_DMA(&huart1, uartBuf, 8);
 800125e:	2208      	movs	r2, #8
 8001260:	4921      	ldr	r1, [pc, #132]	; (80012e8 <KWP2000_Fast_Init+0xf0>)
 8001262:	4820      	ldr	r0, [pc, #128]	; (80012e4 <KWP2000_Fast_Init+0xec>)
 8001264:	f007 fdca 	bl	8008dfc <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 8001268:	4820      	ldr	r0, [pc, #128]	; (80012ec <KWP2000_Fast_Init+0xf4>)
 800126a:	f006 ffc5 	bl	80081f8 <HAL_TIM_Base_Start_IT>

	while((obd_comm.msg_type != 0) && (obd_comm.msg_type != 3))
 800126e:	e000      	b.n	8001272 <KWP2000_Fast_Init+0x7a>
	{
		__NOP();
 8001270:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.msg_type != 3))
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <KWP2000_Fast_Init+0xe8>)
 8001274:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <KWP2000_Fast_Init+0x8e>
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <KWP2000_Fast_Init+0xe8>)
 800127e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001282:	2b03      	cmp	r3, #3
 8001284:	d1f4      	bne.n	8001270 <KWP2000_Fast_Init+0x78>
	}
	if(obd_comm.msg_type == 0)
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <KWP2000_Fast_Init+0xe8>)
 8001288:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800128c:	2b00      	cmp	r3, #0
 800128e:	d11f      	bne.n	80012d0 <KWP2000_Fast_Init+0xd8>
	{
		for(int i = 1; i < 7; i++)
 8001290:	2301      	movs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	e009      	b.n	80012aa <KWP2000_Fast_Init+0xb2>
		{
			checksum = checksum + uartBuf[i];
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <KWP2000_Fast_Init+0xf0>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4413      	add	r3, r2
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	4413      	add	r3, r2
 80012a2:	73fb      	strb	r3, [r7, #15]
		for(int i = 1; i < 7; i++)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3301      	adds	r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	2b06      	cmp	r3, #6
 80012ae:	ddf2      	ble.n	8001296 <KWP2000_Fast_Init+0x9e>
		}
		checksum = checksum % 256;
		if(checksum == uartBuf[7] && checksum != 0)
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <KWP2000_Fast_Init+0xf0>)
 80012b2:	79db      	ldrb	r3, [r3, #7]
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d108      	bne.n	80012cc <KWP2000_Fast_Init+0xd4>
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <KWP2000_Fast_Init+0xd4>
		{
			ecu_addr = uartBuf[3];
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <KWP2000_Fast_Init+0xf0>)
 80012c2:	78da      	ldrb	r2, [r3, #3]
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <KWP2000_Fast_Init+0xf8>)
 80012c6:	701a      	strb	r2, [r3, #0]
			return OBD_PROTO_KWP2000_FAST;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e002      	b.n	80012d2 <KWP2000_Fast_Init+0xda>
		}
		else
			return OBD_NONE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e000      	b.n	80012d2 <KWP2000_Fast_Init+0xda>
	}
	else
		return OBD_NONE;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	0800d058 	.word	0x0800d058
 80012e0:	200006c0 	.word	0x200006c0
 80012e4:	20000568 	.word	0x20000568
 80012e8:	20000634 	.word	0x20000634
 80012ec:	2000051c 	.word	0x2000051c
 80012f0:	20000393 	.word	0x20000393

080012f4 <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
 80012fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001314:	f004 fdec 	bl	8005ef0 <HAL_GPIO_Init>
}
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <UART_PIN_State>:

static void UART_PIN_State(uint8_t state)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10e      	bne.n	800134e <UART_PIN_State+0x2e>
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f005 f845 	bl	80063c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f005 f83e 	bl	80063c8 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}
 800134c:	e00d      	b.n	800136a <UART_PIN_State+0x4a>
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001358:	f005 f836 	bl	80063c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001366:	f005 f82f 	bl	80063c8 <HAL_GPIO_WritePin>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <KLine_SEND_MESSAGE>:

void KLine_SEND_MESSAGE(uint8_t *tx_frame)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 800137c:	2368      	movs	r3, #104	; 0x68
 800137e:	723b      	strb	r3, [r7, #8]
 8001380:	236a      	movs	r3, #106	; 0x6a
 8001382:	727b      	strb	r3, [r7, #9]
 8001384:	23f1      	movs	r3, #241	; 0xf1
 8001386:	72bb      	strb	r3, [r7, #10]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	72fb      	strb	r3, [r7, #11]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	785b      	ldrb	r3, [r3, #1]
 8001392:	733b      	strb	r3, [r7, #12]
 8001394:	2300      	movs	r3, #0
 8001396:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fe5a 	bl	8002058 <PID_Get_Lenght>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <KLine_SEND_MESSAGE+0xa8>)
 80013aa:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	e00a      	b.n	80013cc <KLine_SEND_MESSAGE+0x58>
	{
		checksum += kline_msg[i];
 80013b6:	f107 0208 	add.w	r2, r7, #8
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4413      	add	r3, r2
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	4413      	add	r3, r2
 80013c4:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	3301      	adds	r3, #1
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d9f1      	bls.n	80013b6 <KLine_SEND_MESSAGE+0x42>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, kline_msg, sizeof(kline_msg), 12);
 80013d6:	f107 0108 	add.w	r1, r7, #8
 80013da:	230c      	movs	r3, #12
 80013dc:	2206      	movs	r2, #6
 80013de:	4810      	ldr	r0, [pc, #64]	; (8001420 <KLine_SEND_MESSAGE+0xac>)
 80013e0:	f007 fba7 	bl	8008b32 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <KLine_SEND_MESSAGE+0xac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	8b1b      	ldrh	r3, [r3, #24]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <KLine_SEND_MESSAGE+0xac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0208 	orr.w	r2, r2, #8
 80013f4:	b292      	uxth	r2, r2
 80013f6:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 4);
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <KLine_SEND_MESSAGE+0xa8>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	3304      	adds	r3, #4
 8001400:	b29b      	uxth	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <KLine_SEND_MESSAGE+0xb0>)
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <KLine_SEND_MESSAGE+0xac>)
 8001408:	f007 fcf8 	bl	8008dfc <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 800140c:	203c      	movs	r0, #60	; 0x3c
 800140e:	f002 f90b 	bl	8003628 <HAL_Delay>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000394 	.word	0x20000394
 8001420:	20000568 	.word	0x20000568
 8001424:	2000037c 	.word	0x2000037c

08001428 <KWP2000_SEND_MESSAGE>:

void KWP2000_SEND_MESSAGE(uint8_t *tx_frame)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, 0x33, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001430:	23c2      	movs	r3, #194	; 0xc2
 8001432:	723b      	strb	r3, [r7, #8]
 8001434:	2333      	movs	r3, #51	; 0x33
 8001436:	727b      	strb	r3, [r7, #9]
 8001438:	23f1      	movs	r3, #241	; 0xf1
 800143a:	72bb      	strb	r3, [r7, #10]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	72fb      	strb	r3, [r7, #11]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	733b      	strb	r3, [r7, #12]
 8001448:	2300      	movs	r3, #0
 800144a:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fe00 	bl	8002058 <PID_Get_Lenght>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <KWP2000_SEND_MESSAGE+0xb4>)
 800145e:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]
	obd_comm.msg_type = 2;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <KWP2000_SEND_MESSAGE+0xb8>)
 8001466:	2202      	movs	r2, #2
 8001468:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	e00a      	b.n	8001488 <KWP2000_SEND_MESSAGE+0x60>
	{
		checksum += kwp_msg[i];
 8001472:	f107 0208 	add.w	r2, r7, #8
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4413      	add	r3, r2
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	4413      	add	r3, r2
 8001480:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	3301      	adds	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b04      	cmp	r3, #4
 800148c:	d9f1      	bls.n	8001472 <KWP2000_SEND_MESSAGE+0x4a>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	737b      	strb	r3, [r7, #13]

	HAL_Delay(20);
 8001492:	2014      	movs	r0, #20
 8001494:	f002 f8c8 	bl	8003628 <HAL_Delay>

	HAL_UART_Transmit(&huart1, kwp_msg, sizeof(kwp_msg), 12);
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	230c      	movs	r3, #12
 800149e:	2206      	movs	r2, #6
 80014a0:	4810      	ldr	r0, [pc, #64]	; (80014e4 <KWP2000_SEND_MESSAGE+0xbc>)
 80014a2:	f007 fb46 	bl	8008b32 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <KWP2000_SEND_MESSAGE+0xbc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	8b1b      	ldrh	r3, [r3, #24]
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <KWP2000_SEND_MESSAGE+0xbc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0208 	orr.w	r2, r2, #8
 80014b6:	b292      	uxth	r2, r2
 80014b8:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 5);
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <KWP2000_SEND_MESSAGE+0xb4>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3305      	adds	r3, #5
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <KWP2000_SEND_MESSAGE+0xc0>)
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <KWP2000_SEND_MESSAGE+0xbc>)
 80014ca:	f007 fc97 	bl	8008dfc <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80014ce:	203c      	movs	r0, #60	; 0x3c
 80014d0:	f002 f8aa 	bl	8003628 <HAL_Delay>
}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000394 	.word	0x20000394
 80014e0:	200006c0 	.word	0x200006c0
 80014e4:	20000568 	.word	0x20000568
 80014e8:	2000037c 	.word	0x2000037c

080014ec <Verify_Checksum>:

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	e009      	b.n	8001516 <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	4413      	add	r3, r2
 800150e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3301      	adds	r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	3b01      	subs	r3, #1
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	3b01      	subs	r3, #1
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	429a      	cmp	r2, r3
 800152e:	d101      	bne.n	8001534 <Verify_Checksum+0x48>
	{
		return 1;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <Verify_Checksum+0x4a>
	}
	return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(uint16_t baud_rate)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
  huart1.Instance = USART1;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_USART1_UART_Init+0x68>)
 8001550:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <MX_USART1_UART_Init+0x6c>)
 8001552:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud_rate;
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_USART1_UART_Init+0x68>)
 8001558:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_USART1_UART_Init+0x68>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_USART1_UART_Init+0x68>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART1_UART_Init+0x68>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_USART1_UART_Init+0x68>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART1_UART_Init+0x68>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART1_UART_Init+0x68>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART1_UART_Init+0x68>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART1_UART_Init+0x68>)
 8001586:	2201      	movs	r2, #1
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART1_UART_Init+0x68>)
 800158c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_USART1_UART_Init+0x68>)
 8001594:	f007 fa46 	bl	8008a24 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800159e:	f001 f973 	bl	8002888 <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000568 	.word	0x20000568
 80015b0:	40013800 	.word	0x40013800

080015b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	if(obd_comm.msg_type == 1)
 80015bc:	4b26      	ldr	r3, [pc, #152]	; (8001658 <HAL_UART_RxCpltCallback+0xa4>)
 80015be:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_UART_RxCpltCallback+0x22>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 80015c6:	4825      	ldr	r0, [pc, #148]	; (800165c <HAL_UART_RxCpltCallback+0xa8>)
 80015c8:	f006 fe6a 	bl	80082a0 <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_UART_RxCpltCallback+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			HAL_IWDG_Refresh(&hiwdg);
		}
	}


}
 80015d4:	e03c      	b.n	8001650 <HAL_UART_RxCpltCallback+0x9c>
	else if (obd_comm.msg_type == 2)
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_UART_RxCpltCallback+0xa4>)
 80015d8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d137      	bne.n	8001650 <HAL_UART_RxCpltCallback+0x9c>
		if(Verify_Checksum(kline_rx_buf, pid_length + 5))
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_UART_RxCpltCallback+0xac>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3305      	adds	r3, #5
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4619      	mov	r1, r3
 80015ea:	481e      	ldr	r0, [pc, #120]	; (8001664 <HAL_UART_RxCpltCallback+0xb0>)
 80015ec:	f7ff ff7e 	bl	80014ec <Verify_Checksum>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d02c      	beq.n	8001650 <HAL_UART_RxCpltCallback+0x9c>
			uint8_t j = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 80015fa:	2302      	movs	r3, #2
 80015fc:	73bb      	strb	r3, [r7, #14]
 80015fe:	e00b      	b.n	8001618 <HAL_UART_RxCpltCallback+0x64>
				rx_frame[j] = kline_rx_buf[i];
 8001600:	7bba      	ldrb	r2, [r7, #14]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4917      	ldr	r1, [pc, #92]	; (8001664 <HAL_UART_RxCpltCallback+0xb0>)
 8001606:	5c89      	ldrb	r1, [r1, r2]
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_UART_RxCpltCallback+0xb4>)
 800160a:	54d1      	strb	r1, [r2, r3]
				j++;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	3301      	adds	r3, #1
 8001616:	73bb      	strb	r3, [r7, #14]
 8001618:	7bba      	ldrb	r2, [r7, #14]
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_UART_RxCpltCallback+0xac>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3304      	adds	r3, #4
 8001620:	429a      	cmp	r2, r3
 8001622:	dded      	ble.n	8001600 <HAL_UART_RxCpltCallback+0x4c>
			obd_comm.msg_type = 0;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_UART_RxCpltCallback+0xa4>)
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 800162c:	480e      	ldr	r0, [pc, #56]	; (8001668 <HAL_UART_RxCpltCallback+0xb4>)
 800162e:	f000 f8b7 	bl	80017a0 <OBD2_PID_Parse>
 8001632:	eef0 7a40 	vmov.f32	s15, s0
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_UART_RxCpltCallback+0xa4>)
 8001638:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			OBD2_ShowOnDisplay(obd_comm.current_value);
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_UART_RxCpltCallback+0xa4>)
 800163e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	f000 fca1 	bl	8001f8c <OBD2_ShowOnDisplay>
			HAL_IWDG_Refresh(&hiwdg);
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <HAL_UART_RxCpltCallback+0xb8>)
 800164c:	f005 fbc8 	bl	8006de0 <HAL_IWDG_Refresh>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200006c0 	.word	0x200006c0
 800165c:	2000051c 	.word	0x2000051c
 8001660:	20000394 	.word	0x20000394
 8001664:	2000037c 	.word	0x2000037c
 8001668:	2000038c 	.word	0x2000038c
 800166c:	200004c0 	.word	0x200004c0

08001670 <OBD2_PID_Decode>:
//	strcat(txTest2, "\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t *)txTest2, sizeof(txTest2),10);
//}

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	int number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3303      	adds	r3, #3
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	061a      	lsls	r2, r3, #24
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3304      	adds	r3, #4
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3305      	adds	r3, #5
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4313      	orrs	r3, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	3206      	adds	r2, #6
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 80016a2:	231f      	movs	r3, #31
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	e030      	b.n	800170a <OBD2_PID_Decode+0x9a>
	{
		int digit = number >> i;
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa42 f303 	asr.w	r3, r2, r3
 80016b0:	60bb      	str	r3, [r7, #8]
		digit &= 1;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
		if(obd_comm.pid == 0x00)
 80016ba:	4b19      	ldr	r3, [pc, #100]	; (8001720 <OBD2_PID_Decode+0xb0>)
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d108      	bne.n	80016d4 <OBD2_PID_Decode+0x64>
		{
			obd_comm.available_pids_1[j] = digit;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	b2d9      	uxtb	r1, r3
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <OBD2_PID_Decode+0xb0>)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	4413      	add	r3, r2
 80016cc:	3303      	adds	r3, #3
 80016ce:	460a      	mov	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e014      	b.n	80016fe <OBD2_PID_Decode+0x8e>
		}
		else if(obd_comm.pid == 0x20)
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <OBD2_PID_Decode+0xb0>)
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	2b20      	cmp	r3, #32
 80016da:	d108      	bne.n	80016ee <OBD2_PID_Decode+0x7e>
		{
			obd_comm.available_pids_2[j] = digit;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	b2d9      	uxtb	r1, r3
 80016e0:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <OBD2_PID_Decode+0xb0>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	4413      	add	r3, r2
 80016e6:	3323      	adds	r3, #35	; 0x23
 80016e8:	460a      	mov	r2, r1
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e007      	b.n	80016fe <OBD2_PID_Decode+0x8e>
		}
		else
		{
			obd_comm.available_pids_3[j] = digit;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	b2d9      	uxtb	r1, r3
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <OBD2_PID_Decode+0xb0>)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4413      	add	r3, r2
 80016f8:	3343      	adds	r3, #67	; 0x43
 80016fa:	460a      	mov	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	3b01      	subs	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	dacb      	bge.n	80016a8 <OBD2_PID_Decode+0x38>
	}
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200006c0 	.word	0x200006c0

08001724 <OBD2_Request>:

void OBD2_Request(OBD obd)
{
 8001724:	b084      	sub	sp, #16
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	f107 0c18 	add.w	ip, r7, #24
 8001730:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(10);
 8001734:	200a      	movs	r0, #10
 8001736:	f001 ff77 	bl	8003628 <HAL_Delay>
	if(obd.used_protocol == OBD_PROTO_CAN)
 800173a:	7e3b      	ldrb	r3, [r7, #24]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d115      	bne.n	800176c <OBD2_Request+0x48>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001740:	2302      	movs	r3, #2
 8001742:	723b      	strb	r3, [r7, #8]
 8001744:	2301      	movs	r3, #1
 8001746:	727b      	strb	r3, [r7, #9]
 8001748:	7e7b      	ldrb	r3, [r7, #25]
 800174a:	72bb      	strb	r3, [r7, #10]
 800174c:	2300      	movs	r3, #0
 800174e:	72fb      	strb	r3, [r7, #11]
 8001750:	2300      	movs	r3, #0
 8001752:	733b      	strb	r3, [r7, #12]
 8001754:	2300      	movs	r3, #0
 8001756:	737b      	strb	r3, [r7, #13]
 8001758:	2300      	movs	r3, #0
 800175a:	73bb      	strb	r3, [r7, #14]
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
		CAN_SEND_MESSAGE(tx_data_CAN);
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fc85 	bl	8001074 <CAN_SEND_MESSAGE>
		else
		{
			KWP2000_SEND_MESSAGE(tx_data_ISO);
		}
	}
}
 800176a:	e00f      	b.n	800178c <OBD2_Request+0x68>
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 800176c:	2301      	movs	r3, #1
 800176e:	713b      	strb	r3, [r7, #4]
 8001770:	7e7b      	ldrb	r3, [r7, #25]
 8001772:	717b      	strb	r3, [r7, #5]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 8001774:	7e3b      	ldrb	r3, [r7, #24]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d104      	bne.n	8001784 <OBD2_Request+0x60>
			KLine_SEND_MESSAGE(tx_data_ISO);
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fdf9 	bl	8001374 <KLine_SEND_MESSAGE>
}
 8001782:	e003      	b.n	800178c <OBD2_Request+0x68>
			KWP2000_SEND_MESSAGE(tx_data_ISO);
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fe4e 	bl	8001428 <KWP2000_SEND_MESSAGE>
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001796:	b004      	add	sp, #16
 8001798:	4770      	bx	lr
 800179a:	0000      	movs	r0, r0
 800179c:	0000      	movs	r0, r0
	...

080017a0 <OBD2_PID_Parse>:

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	float value = 0;
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3302      	adds	r3, #2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2ba6      	cmp	r3, #166	; 0xa6
 80017b6:	f200 83b2 	bhi.w	8001f1e <OBD2_PID_Parse+0x77e>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <OBD2_PID_Parse+0x20>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	08001a5d 	.word	0x08001a5d
 80017c4:	08001f1f 	.word	0x08001f1f
 80017c8:	08001f1f 	.word	0x08001f1f
 80017cc:	08001f1f 	.word	0x08001f1f
 80017d0:	08001a6b 	.word	0x08001a6b
 80017d4:	08001a73 	.word	0x08001a73
 80017d8:	08001a89 	.word	0x08001a89
 80017dc:	08001a89 	.word	0x08001a89
 80017e0:	08001a89 	.word	0x08001a89
 80017e4:	08001a89 	.word	0x08001a89
 80017e8:	08001a8f 	.word	0x08001a8f
 80017ec:	08001aab 	.word	0x08001aab
 80017f0:	08001abf 	.word	0x08001abf
 80017f4:	08001ae5 	.word	0x08001ae5
 80017f8:	08001af9 	.word	0x08001af9
 80017fc:	08001b13 	.word	0x08001b13
 8001800:	08001b29 	.word	0x08001b29
 8001804:	08001b53 	.word	0x08001b53
 8001808:	08001f1f 	.word	0x08001f1f
 800180c:	08001f1f 	.word	0x08001f1f
 8001810:	08001b5b 	.word	0x08001b5b
 8001814:	08001b5b 	.word	0x08001b5b
 8001818:	08001b5b 	.word	0x08001b5b
 800181c:	08001b5b 	.word	0x08001b5b
 8001820:	08001b5b 	.word	0x08001b5b
 8001824:	08001b5b 	.word	0x08001b5b
 8001828:	08001b5b 	.word	0x08001b5b
 800182c:	08001b5b 	.word	0x08001b5b
 8001830:	08001f1f 	.word	0x08001f1f
 8001834:	08001f1f 	.word	0x08001f1f
 8001838:	08001f1f 	.word	0x08001f1f
 800183c:	08001b79 	.word	0x08001b79
 8001840:	08001b97 	.word	0x08001b97
 8001844:	08001b79 	.word	0x08001b79
 8001848:	08001ba5 	.word	0x08001ba5
 800184c:	08001bd5 	.word	0x08001bd5
 8001850:	08001bfb 	.word	0x08001bfb
 8001854:	08001bfb 	.word	0x08001bfb
 8001858:	08001bfb 	.word	0x08001bfb
 800185c:	08001bfb 	.word	0x08001bfb
 8001860:	08001bfb 	.word	0x08001bfb
 8001864:	08001bfb 	.word	0x08001bfb
 8001868:	08001bfb 	.word	0x08001bfb
 800186c:	08001bfb 	.word	0x08001bfb
 8001870:	08001c03 	.word	0x08001c03
 8001874:	08001c0b 	.word	0x08001c0b
 8001878:	08001c11 	.word	0x08001c11
 800187c:	08001c11 	.word	0x08001c11
 8001880:	08001c19 	.word	0x08001c19
 8001884:	08001c2d 	.word	0x08001c2d
 8001888:	08001c4b 	.word	0x08001c4b
 800188c:	08001c71 	.word	0x08001c71
 8001890:	08001c85 	.word	0x08001c85
 8001894:	08001c85 	.word	0x08001c85
 8001898:	08001c85 	.word	0x08001c85
 800189c:	08001c85 	.word	0x08001c85
 80018a0:	08001c85 	.word	0x08001c85
 80018a4:	08001c85 	.word	0x08001c85
 80018a8:	08001c85 	.word	0x08001c85
 80018ac:	08001c85 	.word	0x08001c85
 80018b0:	08001c8d 	.word	0x08001c8d
 80018b4:	08001c8d 	.word	0x08001c8d
 80018b8:	08001c8d 	.word	0x08001c8d
 80018bc:	08001c8d 	.word	0x08001c8d
 80018c0:	08001cb9 	.word	0x08001cb9
 80018c4:	08001f1f 	.word	0x08001f1f
 80018c8:	08001cc7 	.word	0x08001cc7
 80018cc:	08001cf1 	.word	0x08001cf1
 80018d0:	08001cf9 	.word	0x08001cf9
 80018d4:	08001d01 	.word	0x08001d01
 80018d8:	08001d09 	.word	0x08001d09
 80018dc:	08001d1f 	.word	0x08001d1f
 80018e0:	08001d1f 	.word	0x08001d1f
 80018e4:	08001d1f 	.word	0x08001d1f
 80018e8:	08001d1f 	.word	0x08001d1f
 80018ec:	08001d1f 	.word	0x08001d1f
 80018f0:	08001d1f 	.word	0x08001d1f
 80018f4:	08001d27 	.word	0x08001d27
 80018f8:	08001d27 	.word	0x08001d27
 80018fc:	08001d45 	.word	0x08001d45
 8001900:	08001f1f 	.word	0x08001f1f
 8001904:	08001f1f 	.word	0x08001f1f
 8001908:	08001d59 	.word	0x08001d59
 800190c:	08001d75 	.word	0x08001d75
 8001910:	08001da7 	.word	0x08001da7
 8001914:	08001dcb 	.word	0x08001dcb
 8001918:	08001dcb 	.word	0x08001dcb
 800191c:	08001dcb 	.word	0x08001dcb
 8001920:	08001dcb 	.word	0x08001dcb
 8001924:	08001dd1 	.word	0x08001dd1
 8001928:	08001def 	.word	0x08001def
 800192c:	08001def 	.word	0x08001def
 8001930:	08001df7 	.word	0x08001df7
 8001934:	08001e0d 	.word	0x08001e0d
 8001938:	08001e13 	.word	0x08001e13
 800193c:	08001f1f 	.word	0x08001f1f
 8001940:	08001f1f 	.word	0x08001f1f
 8001944:	08001e45 	.word	0x08001e45
 8001948:	08001e45 	.word	0x08001e45
 800194c:	08001e5b 	.word	0x08001e5b
 8001950:	08001e79 	.word	0x08001e79
 8001954:	08001f1f 	.word	0x08001f1f
 8001958:	08001e8f 	.word	0x08001e8f
 800195c:	08001e97 	.word	0x08001e97
 8001960:	08001e97 	.word	0x08001e97
 8001964:	08001f1f 	.word	0x08001f1f
 8001968:	08001f1f 	.word	0x08001f1f
 800196c:	08001f1f 	.word	0x08001f1f
 8001970:	08001f1f 	.word	0x08001f1f
 8001974:	08001f1f 	.word	0x08001f1f
 8001978:	08001f1f 	.word	0x08001f1f
 800197c:	08001f1f 	.word	0x08001f1f
 8001980:	08001f1f 	.word	0x08001f1f
 8001984:	08001f1f 	.word	0x08001f1f
 8001988:	08001f1f 	.word	0x08001f1f
 800198c:	08001f1f 	.word	0x08001f1f
 8001990:	08001f1f 	.word	0x08001f1f
 8001994:	08001f1f 	.word	0x08001f1f
 8001998:	08001f1f 	.word	0x08001f1f
 800199c:	08001f1f 	.word	0x08001f1f
 80019a0:	08001f1f 	.word	0x08001f1f
 80019a4:	08001f1f 	.word	0x08001f1f
 80019a8:	08001f1f 	.word	0x08001f1f
 80019ac:	08001f1f 	.word	0x08001f1f
 80019b0:	08001ead 	.word	0x08001ead
 80019b4:	08001f1f 	.word	0x08001f1f
 80019b8:	08001f1f 	.word	0x08001f1f
 80019bc:	08001f1f 	.word	0x08001f1f
 80019c0:	08001f1f 	.word	0x08001f1f
 80019c4:	08001f1f 	.word	0x08001f1f
 80019c8:	08001f1f 	.word	0x08001f1f
 80019cc:	08001f1f 	.word	0x08001f1f
 80019d0:	08001f1f 	.word	0x08001f1f
 80019d4:	08001f1f 	.word	0x08001f1f
 80019d8:	08001f1f 	.word	0x08001f1f
 80019dc:	08001f1f 	.word	0x08001f1f
 80019e0:	08001f1f 	.word	0x08001f1f
 80019e4:	08001f1f 	.word	0x08001f1f
 80019e8:	08001f1f 	.word	0x08001f1f
 80019ec:	08001f1f 	.word	0x08001f1f
 80019f0:	08001f1f 	.word	0x08001f1f
 80019f4:	08001f1f 	.word	0x08001f1f
 80019f8:	08001f1f 	.word	0x08001f1f
 80019fc:	08001f1f 	.word	0x08001f1f
 8001a00:	08001f1f 	.word	0x08001f1f
 8001a04:	08001f1f 	.word	0x08001f1f
 8001a08:	08001f1f 	.word	0x08001f1f
 8001a0c:	08001f1f 	.word	0x08001f1f
 8001a10:	08001f1f 	.word	0x08001f1f
 8001a14:	08001f1f 	.word	0x08001f1f
 8001a18:	08001f1f 	.word	0x08001f1f
 8001a1c:	08001f1f 	.word	0x08001f1f
 8001a20:	08001f1f 	.word	0x08001f1f
 8001a24:	08001f1f 	.word	0x08001f1f
 8001a28:	08001f1f 	.word	0x08001f1f
 8001a2c:	08001f1f 	.word	0x08001f1f
 8001a30:	08001f1f 	.word	0x08001f1f
 8001a34:	08001f1f 	.word	0x08001f1f
 8001a38:	08001f1f 	.word	0x08001f1f
 8001a3c:	08001f1f 	.word	0x08001f1f
 8001a40:	08001f1f 	.word	0x08001f1f
 8001a44:	08001f1f 	.word	0x08001f1f
 8001a48:	08001f1f 	.word	0x08001f1f
 8001a4c:	08001f1f 	.word	0x08001f1f
 8001a50:	08001f1f 	.word	0x08001f1f
 8001a54:	08001f1f 	.word	0x08001f1f
 8001a58:	08001ed9 	.word	0x08001ed9
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fe07 	bl	8001670 <OBD2_PID_Decode>
		value = 0;
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
		break;
 8001a68:	e259      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
		break;
 8001a70:	e255      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3303      	adds	r3, #3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3b28      	subs	r3, #40	; 0x28
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a82:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a86:	e24a      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001a88:	4bb7      	ldr	r3, [pc, #732]	; (8001d68 <OBD2_PID_Parse+0x5c8>)
 8001a8a:	60fb      	str	r3, [r7, #12]
		break;
 8001a8c:	e247      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3303      	adds	r3, #3
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aa8:	e239      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3303      	adds	r3, #3
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001abc:	e22f      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3303      	adds	r3, #3
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	3204      	adds	r2, #4
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da00      	bge.n	8001ad4 <OBD2_PID_Parse+0x334>
 8001ad2:	3303      	adds	r3, #3
 8001ad4:	109b      	asrs	r3, r3, #2
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ade:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ae2:	e21c      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3303      	adds	r3, #3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001af6:	e212      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3303      	adds	r3, #3
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	085b      	lsrs	r3, r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	3b40      	subs	r3, #64	; 0x40
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b10:	e205      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3303      	adds	r3, #3
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3b28      	subs	r3, #40	; 0x28
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b22:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b26:	e1fa      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3303      	adds	r3, #3
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	3204      	adds	r2, #4
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	4a8c      	ldr	r2, [pc, #560]	; (8001d6c <OBD2_PID_Parse+0x5cc>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1152      	asrs	r2, r2, #5
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b50:	e1e5      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
		break;
 8001b58:	e1e1      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3303      	adds	r3, #3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4a82      	ldr	r2, [pc, #520]	; (8001d6c <OBD2_PID_Parse+0x5cc>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	099b      	lsrs	r3, r3, #6
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b72:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b76:	e1d2      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3303      	adds	r3, #3
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	3204      	adds	r2, #4
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b90:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b94:	e1c3      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fd6a 	bl	8001670 <OBD2_PID_Decode>
		value = 0;
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
		break;
 8001ba2:	e1bc      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3303      	adds	r3, #3
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	3204      	adds	r2, #4
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcb5 	bl	8000524 <__aeabi_i2d>
 8001bba:	a369      	add	r3, pc, #420	; (adr r3, 8001d60 <OBD2_PID_Parse+0x5c0>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fd1a 	bl	80005f8 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe ffec 	bl	8000ba8 <__aeabi_d2f>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3303      	adds	r3, #3
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	3204      	adds	r2, #4
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001bf8:	e191      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
		break;
 8001c00:	e18d      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
		break;
 8001c08:	e189      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <OBD2_PID_Parse+0x5c8>)
 8001c0c:	60fb      	str	r3, [r7, #12]
		break;
 8001c0e:	e186      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
		break;
 8001c16:	e182      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3303      	adds	r3, #3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c26:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c2a:	e178      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3303      	adds	r3, #3
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	3204      	adds	r2, #4
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c48:	e169      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3303      	adds	r3, #3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	3204      	adds	r2, #4
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da00      	bge.n	8001c60 <OBD2_PID_Parse+0x4c0>
 8001c5e:	3303      	adds	r3, #3
 8001c60:	109b      	asrs	r3, r3, #2
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c6e:	e156      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3303      	adds	r3, #3
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c82:	e14c      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
		break;
 8001c8a:	e148      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3303      	adds	r3, #3
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	3204      	adds	r2, #4
 8001c98:	7812      	ldrb	r2, [r2, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	4a33      	ldr	r2, [pc, #204]	; (8001d6c <OBD2_PID_Parse+0x5cc>)
 8001c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca2:	1152      	asrs	r2, r2, #5
 8001ca4:	17db      	asrs	r3, r3, #31
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	3b28      	subs	r3, #40	; 0x28
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cb6:	e132      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fcd9 	bl	8001670 <OBD2_PID_Decode>
		value = 0;
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
		break;
 8001cc4:	e12b      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3303      	adds	r3, #3
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	3204      	adds	r2, #4
 8001cd2:	7812      	ldrb	r2, [r2, #0]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <OBD2_PID_Parse+0x5d0>)
 8001cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cdc:	1192      	asrs	r2, r2, #6
 8001cde:	17db      	asrs	r3, r3, #31
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cea:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cee:	e116      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
		break;
 8001cf6:	e112      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
		break;
 8001cfe:	e10e      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
		break;
 8001d06:	e10a      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3303      	adds	r3, #3
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3b28      	subs	r3, #40	; 0x28
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d18:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d1c:	e0ff      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
		break;
 8001d24:	e0fb      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3303      	adds	r3, #3
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	3204      	adds	r2, #4
 8001d32:	7812      	ldrb	r2, [r2, #0]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d42:	e0ec      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3303      	adds	r3, #3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d52:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d56:	e0e2      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
		break;
 8001d5e:	e0de      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
 8001d60:	10624dd3 	.word	0x10624dd3
 8001d64:	3fb43958 	.word	0x3fb43958
 8001d68:	c2c80000 	.word	0xc2c80000
 8001d6c:	51eb851f 	.word	0x51eb851f
 8001d70:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3303      	adds	r3, #3
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	3204      	adds	r2, #4
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbcd 	bl	8000524 <__aeabi_i2d>
 8001d8a:	a370      	add	r3, pc, #448	; (adr r3, 8001f4c <OBD2_PID_Parse+0x7ac>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fc32 	bl	80005f8 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe ff04 	bl	8000ba8 <__aeabi_d2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
		break;
 8001da4:	e0bb      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3303      	adds	r3, #3
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	3204      	adds	r2, #4
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001dba:	3b7f      	subs	r3, #127	; 0x7f
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001dc8:	e0a9      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001dca:	4b5d      	ldr	r3, [pc, #372]	; (8001f40 <OBD2_PID_Parse+0x7a0>)
 8001dcc:	60fb      	str	r3, [r7, #12]
		break;
 8001dce:	e0a6      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3303      	adds	r3, #3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	3204      	adds	r2, #4
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001dec:	e097      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
		break;
 8001df4:	e093      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3303      	adds	r3, #3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	3b28      	subs	r3, #40	; 0x28
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e06:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e0a:	e088      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001e0c:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <OBD2_PID_Parse+0x7a4>)
 8001e0e:	60fb      	str	r3, [r7, #12]
		break;
 8001e10:	e085      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3303      	adds	r3, #3
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	3204      	adds	r2, #4
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	a341      	add	r3, pc, #260	; (adr r3, 8001f30 <OBD2_PID_Parse+0x790>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fbe3 	bl	80005f8 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe feb5 	bl	8000ba8 <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	60fb      	str	r3, [r7, #12]
		break;
 8001e42:	e06c      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3303      	adds	r3, #3
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	3b7d      	subs	r3, #125	; 0x7d
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e54:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e58:	e061      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3303      	adds	r3, #3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	3204      	adds	r2, #4
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e76:	e052      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3303      	adds	r3, #3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	3b7d      	subs	r3, #125	; 0x7d
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e88:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e8c:	e047      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
		break;
 8001e94:	e043      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3303      	adds	r3, #3
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3b28      	subs	r3, #40	; 0x28
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001eaa:	e038      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3303      	adds	r3, #3
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	3204      	adds	r2, #4
 8001eb8:	7812      	ldrb	r2, [r2, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	4a22      	ldr	r2, [pc, #136]	; (8001f48 <OBD2_PID_Parse+0x7a8>)
 8001ebe:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec2:	1152      	asrs	r2, r2, #5
 8001ec4:	17db      	asrs	r3, r3, #31
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	3b28      	subs	r3, #40	; 0x28
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ed6:	e022      	b.n	8001f1e <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3303      	adds	r3, #3
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	061a      	lsls	r2, r3, #24
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3305      	adds	r3, #5
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	3206      	adds	r2, #6
 8001ef8:	7812      	ldrb	r2, [r2, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb11 	bl	8000524 <__aeabi_i2d>
 8001f02:	a30d      	add	r3, pc, #52	; (adr r3, 8001f38 <OBD2_PID_Parse+0x798>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fb76 	bl	80005f8 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fe48 	bl	8000ba8 <__aeabi_d2f>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60fb      	str	r3, [r7, #12]
		break;
 8001f1c:	bf00      	nop
	}
	return value;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	ee07 3a90 	vmov	s15, r3
}
 8001f24:	eeb0 0a67 	vmov.f32	s0, s15
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	9999999a 	.word	0x9999999a
 8001f34:	3fa99999 	.word	0x3fa99999
 8001f38:	9999999a 	.word	0x9999999a
 8001f3c:	3fb99999 	.word	0x3fb99999
 8001f40:	c2c80000 	.word	0xc2c80000
 8001f44:	c3520000 	.word	0xc3520000
 8001f48:	51eb851f 	.word	0x51eb851f
 8001f4c:	47ae147b 	.word	0x47ae147b
 8001f50:	3f747ae1 	.word	0x3f747ae1

08001f54 <OBD2_Init>:

obd_protocol OBD2_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
	obd_protocol used_protocol = KLine_Init();
 8001f5a:	f7ff f8bb 	bl	80010d4 <KLine_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	if(used_protocol == OBD_NONE)
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10c      	bne.n	8001f82 <OBD2_Init+0x2e>
	{
		used_protocol = KWP2000_Fast_Init();
 8001f68:	f7ff f946 	bl	80011f8 <KWP2000_Fast_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
		if(used_protocol == OBD_NONE)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <OBD2_Init+0x2e>
		{
			used_protocol = OBD_PROTO_CAN;
 8001f76:	2304      	movs	r3, #4
 8001f78:	71fb      	strb	r3, [r7, #7]
			//HAL_DMA_DeInit(&hdma_usart1_rx);
			MX_CAN1_Init();
 8001f7a:	f7fe ffe7 	bl	8000f4c <MX_CAN1_Init>
			canConfig();
 8001f7e:	f7ff f81b 	bl	8000fb8 <canConfig>
		}
	}
	return used_protocol;
 8001f82:	79fb      	ldrb	r3, [r7, #7]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <OBD2_ShowOnDisplay>:

void OBD2_ShowOnDisplay(float value)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b094      	sub	sp, #80	; 0x50
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	char str2[13];
	char str3[32];
	Get_Name(obd_comm.pid_index, str3);
 8001f96:	4b29      	ldr	r3, [pc, #164]	; (800203c <OBD2_ShowOnDisplay+0xb0>)
 8001f98:	789b      	ldrb	r3, [r3, #2]
 8001f9a:	f107 020c 	add.w	r2, r7, #12
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f879 	bl	8002098 <Get_Name>
	//char str3 = Get_Name(obd_comm.pid_index);
	snprintf(str, 10, "%f", value);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe face 	bl	8000548 <__aeabi_f2d>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001fb4:	e9cd 2300 	strd	r2, r3, [sp]
 8001fb8:	4a21      	ldr	r2, [pc, #132]	; (8002040 <OBD2_ShowOnDisplay+0xb4>)
 8001fba:	210a      	movs	r1, #10
 8001fbc:	f008 fd9a 	bl	800aaf4 <sniprintf>
	snprintf(str2, 13, "BAT %.2f V", obd_comm.voltage);
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <OBD2_ShowOnDisplay+0xb0>)
 8001fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fabf 	bl	8000548 <__aeabi_f2d>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001fd2:	e9cd 2300 	strd	r2, r3, [sp]
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <OBD2_ShowOnDisplay+0xb8>)
 8001fd8:	210d      	movs	r1, #13
 8001fda:	f008 fd8b 	bl	800aaf4 <sniprintf>
	ssd1306_SetCursor(0,0);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f001 fa57 	bl	8003494 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f001 f906 	bl	80031f8 <ssd1306_Fill>
	ssd1306_WriteString(pid_names[obd_comm.pid_index], Font_7x10, White);
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <OBD2_ShowOnDisplay+0xb0>)
 8001fee:	789b      	ldrb	r3, [r3, #2]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <OBD2_ShowOnDisplay+0xbc>)
 8001ff4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <OBD2_ShowOnDisplay+0xc0>)
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	ca06      	ldmia	r2, {r1, r2}
 8001ffe:	f001 fa23 	bl	8003448 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 12);
 8002002:	210c      	movs	r1, #12
 8002004:	2028      	movs	r0, #40	; 0x28
 8002006:	f001 fa45 	bl	8003494 <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, White);
 800200a:	4a11      	ldr	r2, [pc, #68]	; (8002050 <OBD2_ShowOnDisplay+0xc4>)
 800200c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002010:	2301      	movs	r3, #1
 8002012:	ca06      	ldmia	r2, {r1, r2}
 8002014:	f001 fa18 	bl	8003448 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 8002018:	2128      	movs	r1, #40	; 0x28
 800201a:	2000      	movs	r0, #0
 800201c:	f001 fa3a 	bl	8003494 <ssd1306_SetCursor>
	ssd1306_WriteString(str2, Font_11x18, White);
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <OBD2_ShowOnDisplay+0xc8>)
 8002022:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002026:	2301      	movs	r3, #1
 8002028:	ca06      	ldmia	r2, {r1, r2}
 800202a:	f001 fa0d 	bl	8003448 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800202e:	f001 f907 	bl	8003240 <ssd1306_UpdateScreen>
}
 8002032:	bf00      	nop
 8002034:	3748      	adds	r7, #72	; 0x48
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200006c0 	.word	0x200006c0
 8002040:	0800d060 	.word	0x0800d060
 8002044:	0800d064 	.word	0x0800d064
 8002048:	20000000 	.word	0x20000000
 800204c:	2000016c 	.word	0x2000016c
 8002050:	2000017c 	.word	0x2000017c
 8002054:	20000174 	.word	0x20000174

08002058 <PID_Get_Lenght>:
		[0x7C] = { 3 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 5 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
	return PID_LUT[pid][0];
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	4a03      	ldr	r2, [pc, #12]	; (8002074 <PID_Get_Lenght+0x1c>)
 8002066:	5cd3      	ldrb	r3, [r2, r3]
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	0800d640 	.word	0x0800d640

08002078 <Get_PID>:

uint8_t Get_PID(uint8_t index)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
	return PID_list[index];
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4a03      	ldr	r2, [pc, #12]	; (8002094 <Get_PID+0x1c>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	0800d5e4 	.word	0x0800d5e4

08002098 <Get_Name>:
void Get_Name(uint8_t index, char *name)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
	name = pid_names[index];
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <Get_Name+0x24>)
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	603b      	str	r3, [r7, #0]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000000 	.word	0x20000000

080020c0 <HAL_GPIO_EXTI_Callback>:
extern TIM_HandleTypeDef htim1;
extern OBD obd_comm;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MENU_BTN_Pin)
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d107      	bne.n	80020e0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 80020d0:	4806      	ldr	r0, [pc, #24]	; (80020ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80020d2:	f006 f891 	bl	80081f8 <HAL_TIM_Base_Start_IT>
		obd_comm.button_state = 0;
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x30>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	}
	else
	{
		__NOP();
	}
}
 80020de:	e000      	b.n	80020e2 <HAL_GPIO_EXTI_Callback+0x22>
		__NOP();
 80020e0:	bf00      	nop
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200004d0 	.word	0x200004d0
 80020f0:	200006c0 	.word	0x200006c0

080020f4 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim6;
extern OBD obd_comm;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d124      	bne.n	8002150 <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		if(HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin)== GPIO_PIN_SET)
 8002106:	2140      	movs	r1, #64	; 0x40
 8002108:	481e      	ldr	r0, [pc, #120]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800210a:	f004 f945 	bl	8006398 <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	2b01      	cmp	r3, #1
 8002112:	d11d      	bne.n	8002150 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			obd_comm.button_state = 1;
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			if(obd_comm.pid_index == 89)
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800211e:	789b      	ldrb	r3, [r3, #2]
 8002120:	2b59      	cmp	r3, #89	; 0x59
 8002122:	d103      	bne.n	800212c <HAL_TIM_PeriodElapsedCallback+0x38>
			{
				obd_comm.pid_index = 0;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002126:	2200      	movs	r2, #0
 8002128:	709a      	strb	r2, [r3, #2]
 800212a:	e005      	b.n	8002138 <HAL_TIM_PeriodElapsedCallback+0x44>
			}
			else
			{
				obd_comm.pid_index++;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800212e:	789b      	ldrb	r3, [r3, #2]
 8002130:	3301      	adds	r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002136:	709a      	strb	r2, [r3, #2]
			}
			obd_comm.pid = Get_PID(obd_comm.pid_index);
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800213a:	789b      	ldrb	r3, [r3, #2]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff9b 	bl	8002078 <Get_PID>
 8002142:	4603      	mov	r3, r0
 8002144:	461a      	mov	r2, r3
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002148:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim1);
 800214a:	4810      	ldr	r0, [pc, #64]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800214c:	f006 f8a8 	bl	80082a0 <HAL_TIM_Base_Stop_IT>
		}
	}
	if(htim->Instance == TIM6)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10d      	bne.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x82>
	{
		if(obd_comm.msg_type == 0)
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800215c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			__NOP();
 8002164:	bf00      	nop
 8002166:	e003      	b.n	8002170 <HAL_TIM_PeriodElapsedCallback+0x7c>
		}
		else
			obd_comm.msg_type = 3;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800216a:	2203      	movs	r2, #3
 800216c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		HAL_TIM_Base_Stop_IT(&htim6);
 8002170:	4808      	ldr	r0, [pc, #32]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002172:	f006 f895 	bl	80082a0 <HAL_TIM_Base_Stop_IT>
	}
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40012c00 	.word	0x40012c00
 8002184:	48000400 	.word	0x48000400
 8002188:	200006c0 	.word	0x200006c0
 800218c:	200004d0 	.word	0x200004d0
 8002190:	40001000 	.word	0x40001000
 8002194:	2000051c 	.word	0x2000051c

08002198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b09b      	sub	sp, #108	; 0x6c
 800219c:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE BEGIN 1 */
	uint32_t timer_adc = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a2:	f001 f9cd 	bl	8003540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a6:	f000 f8bb 	bl	8002320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021aa:	f000 fa7f 	bl	80026ac <MX_GPIO_Init>
  MX_DMA_Init();
 80021ae:	f000 fa57 	bl	8002660 <MX_DMA_Init>
  MX_I2C2_Init();
 80021b2:	f000 f96b 	bl	800248c <MX_I2C2_Init>
  MX_TIM1_Init();
 80021b6:	f000 f9c7 	bl	8002548 <MX_TIM1_Init>
  MX_ADC1_Init();
 80021ba:	f000 f903 	bl	80023c4 <MX_ADC1_Init>
  MX_TIM6_Init();
 80021be:	f000 fa17 	bl	80025f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 80021c2:	f000 ffaf 	bl	8003124 <ssd1306_Init>
  ssd1306_Fill(Black);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f001 f816 	bl	80031f8 <ssd1306_Fill>
  ssd1306_SetCursor(28, 0);
 80021cc:	2100      	movs	r1, #0
 80021ce:	201c      	movs	r0, #28
 80021d0:	f001 f960 	bl	8003494 <ssd1306_SetCursor>
  ssd1306_WriteString("Initialization", Font_7x10, White);
 80021d4:	4a4c      	ldr	r2, [pc, #304]	; (8002308 <main+0x170>)
 80021d6:	2301      	movs	r3, #1
 80021d8:	ca06      	ldmia	r2, {r1, r2}
 80021da:	484c      	ldr	r0, [pc, #304]	; (800230c <main+0x174>)
 80021dc:	f001 f934 	bl	8003448 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80021e0:	f001 f82e 	bl	8003240 <ssd1306_UpdateScreen>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80021e4:	217f      	movs	r1, #127	; 0x7f
 80021e6:	484a      	ldr	r0, [pc, #296]	; (8002310 <main+0x178>)
 80021e8:	f002 fba0 	bl	800492c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 64);
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	4949      	ldr	r1, [pc, #292]	; (8002314 <main+0x17c>)
 80021f0:	4847      	ldr	r0, [pc, #284]	; (8002310 <main+0x178>)
 80021f2:	f001 fd73 	bl	8003cdc <HAL_ADC_Start_DMA>

    while(obd_comm.voltage <= 12.75)
 80021f6:	e01a      	b.n	800222e <main+0x96>
    {
  	  if((HAL_GetTick() - timer_adc) >= ADC_SAMPLE_TIME)
 80021f8:	f001 fa0a 	bl	8003610 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002206:	d30a      	bcc.n	800221e <main+0x86>
  	  {
  		  obd_comm.voltage = ADC_Average(adc_buffer);
 8002208:	4842      	ldr	r0, [pc, #264]	; (8002314 <main+0x17c>)
 800220a:	f000 fad5 	bl	80027b8 <ADC_Average>
 800220e:	eef0 7a40 	vmov.f32	s15, s0
 8002212:	4b41      	ldr	r3, [pc, #260]	; (8002318 <main+0x180>)
 8002214:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
  		  timer_adc = HAL_GetTick();
 8002218:	f001 f9fa 	bl	8003610 <HAL_GetTick>
 800221c:	6078      	str	r0, [r7, #4]
  	  }
  	  if(ssd1306_GetDisplayOn())
 800221e:	f001 f983 	bl	8003528 <ssd1306_GetDisplayOn>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <main+0x96>
  	  {
  		 ssd1306_SetDisplayOn(0);
 8002228:	2000      	movs	r0, #0
 800222a:	f001 f95f 	bl	80034ec <ssd1306_SetDisplayOn>
    while(obd_comm.voltage <= 12.75)
 800222e:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <main+0x180>)
 8002230:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002234:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800231c <main+0x184>
 8002238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	d9da      	bls.n	80021f8 <main+0x60>
  	  }
    }

    ssd1306_SetDisplayOn(1);
 8002242:	2001      	movs	r0, #1
 8002244:	f001 f952 	bl	80034ec <ssd1306_SetDisplayOn>

    timer_adc = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]

  obd_comm.button_state = 1;
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <main+0x180>)
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

  obd_comm.used_protocol = OBD2_Init();
 8002254:	f7ff fe7e 	bl	8001f54 <OBD2_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <main+0x180>)
 800225e:	701a      	strb	r2, [r3, #0]

  obd_comm.pid = 0x05;
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <main+0x180>)
 8002262:	2205      	movs	r2, #5
 8002264:	705a      	strb	r2, [r3, #1]

  MX_IWDG_Init();
 8002266:	f000 f951 	bl	800250c <MX_IWDG_Init>

  OBD2_Request(obd_comm);
 800226a:	4c2b      	ldr	r4, [pc, #172]	; (8002318 <main+0x180>)
 800226c:	4668      	mov	r0, sp
 800226e:	f104 0310 	add.w	r3, r4, #16
 8002272:	2260      	movs	r2, #96	; 0x60
 8002274:	4619      	mov	r1, r3
 8002276:	f007 ffbd 	bl	800a1f4 <memcpy>
 800227a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800227e:	f7ff fa51 	bl	8001724 <OBD2_Request>

  OBD2_Request(obd_comm);
 8002282:	4c25      	ldr	r4, [pc, #148]	; (8002318 <main+0x180>)
 8002284:	4668      	mov	r0, sp
 8002286:	f104 0310 	add.w	r3, r4, #16
 800228a:	2260      	movs	r2, #96	; 0x60
 800228c:	4619      	mov	r1, r3
 800228e:	f007 ffb1 	bl	800a1f4 <memcpy>
 8002292:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002296:	f7ff fa45 	bl	8001724 <OBD2_Request>

  OBD2_Request(obd_comm);
 800229a:	4c1f      	ldr	r4, [pc, #124]	; (8002318 <main+0x180>)
 800229c:	4668      	mov	r0, sp
 800229e:	f104 0310 	add.w	r3, r4, #16
 80022a2:	2260      	movs	r2, #96	; 0x60
 80022a4:	4619      	mov	r1, r3
 80022a6:	f007 ffa5 	bl	800a1f4 <memcpy>
 80022aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022ae:	f7ff fa39 	bl	8001724 <OBD2_Request>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((HAL_GetTick() - timer_adc) >= ADC_SAMPLE_TIME)
 80022b2:	f001 f9ad 	bl	8003610 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022c0:	d30a      	bcc.n	80022d8 <main+0x140>
	  {
		  obd_comm.voltage = ADC_Average(adc_buffer);
 80022c2:	4814      	ldr	r0, [pc, #80]	; (8002314 <main+0x17c>)
 80022c4:	f000 fa78 	bl	80027b8 <ADC_Average>
 80022c8:	eef0 7a40 	vmov.f32	s15, s0
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <main+0x180>)
 80022ce:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		  timer_adc = HAL_GetTick();
 80022d2:	f001 f99d 	bl	8003610 <HAL_GetTick>
 80022d6:	6078      	str	r0, [r7, #4]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(obd_comm.voltage >= 12.75)
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <main+0x180>)
 80022da:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80022de:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800231c <main+0x184>
 80022e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ea:	db0b      	blt.n	8002304 <main+0x16c>
	  {
		  OBD2_Request(obd_comm);
 80022ec:	4c0a      	ldr	r4, [pc, #40]	; (8002318 <main+0x180>)
 80022ee:	4668      	mov	r0, sp
 80022f0:	f104 0310 	add.w	r3, r4, #16
 80022f4:	2260      	movs	r2, #96	; 0x60
 80022f6:	4619      	mov	r1, r3
 80022f8:	f007 ff7c 	bl	800a1f4 <memcpy>
 80022fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002300:	f7ff fa10 	bl	8001724 <OBD2_Request>
	  if((HAL_GetTick() - timer_adc) >= ADC_SAMPLE_TIME)
 8002304:	e7d5      	b.n	80022b2 <main+0x11a>
 8002306:	bf00      	nop
 8002308:	2000016c 	.word	0x2000016c
 800230c:	0800d5d4 	.word	0x0800d5d4
 8002310:	20000398 	.word	0x20000398
 8002314:	20000640 	.word	0x20000640
 8002318:	200006c0 	.word	0x200006c0
 800231c:	414c0000 	.word	0x414c0000

08002320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b096      	sub	sp, #88	; 0x58
 8002324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	2244      	movs	r2, #68	; 0x44
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f007 ff6e 	bl	800a210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002334:	463b      	mov	r3, r7
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002342:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002346:	f004 fd69 	bl	8006e1c <HAL_PWREx_ControlVoltageScaling>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002350:	f000 fa9a 	bl	8002888 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002354:	2309      	movs	r3, #9
 8002356:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800235e:	2301      	movs	r3, #1
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002362:	2302      	movs	r3, #2
 8002364:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002366:	2303      	movs	r3, #3
 8002368:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800236e:	230a      	movs	r3, #10
 8002370:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002372:	2307      	movs	r3, #7
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002376:	2302      	movs	r3, #2
 8002378:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800237a:	2302      	movs	r3, #2
 800237c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4618      	mov	r0, r3
 8002384:	f004 fda0 	bl	8006ec8 <HAL_RCC_OscConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800238e:	f000 fa7b 	bl	8002888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002392:	230f      	movs	r3, #15
 8002394:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002396:	2303      	movs	r3, #3
 8002398:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023a6:	463b      	mov	r3, r7
 80023a8:	2104      	movs	r1, #4
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 f9a0 	bl	80076f0 <HAL_RCC_ClockConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80023b6:	f000 fa67 	bl	8002888 <Error_Handler>
  }
}
 80023ba:	bf00      	nop
 80023bc:	3758      	adds	r7, #88	; 0x58
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ca:	463b      	mov	r3, r7
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
 80023d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <MX_ADC1_Init+0xbc>)
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <MX_ADC1_Init+0xc0>)
 80023de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <MX_ADC1_Init+0xbc>)
 80023e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80023e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <MX_ADC1_Init+0xbc>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <MX_ADC1_Init+0xbc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <MX_ADC1_Init+0xbc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <MX_ADC1_Init+0xbc>)
 80023fc:	2204      	movs	r2, #4
 80023fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <MX_ADC1_Init+0xbc>)
 8002402:	2200      	movs	r2, #0
 8002404:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <MX_ADC1_Init+0xbc>)
 8002408:	2201      	movs	r2, #1
 800240a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_ADC1_Init+0xbc>)
 800240e:	2201      	movs	r2, #1
 8002410:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <MX_ADC1_Init+0xbc>)
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <MX_ADC1_Init+0xbc>)
 800241c:	2200      	movs	r2, #0
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_ADC1_Init+0xbc>)
 8002422:	2200      	movs	r2, #0
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <MX_ADC1_Init+0xbc>)
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_ADC1_Init+0xbc>)
 8002430:	2200      	movs	r2, #0
 8002432:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_ADC1_Init+0xbc>)
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800243c:	4810      	ldr	r0, [pc, #64]	; (8002480 <MX_ADC1_Init+0xbc>)
 800243e:	f001 fb05 	bl	8003a4c <HAL_ADC_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002448:	f000 fa1e 	bl	8002888 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_ADC1_Init+0xc4>)
 800244e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002450:	2306      	movs	r3, #6
 8002452:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002454:	2307      	movs	r3, #7
 8002456:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002458:	237f      	movs	r3, #127	; 0x7f
 800245a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800245c:	2304      	movs	r3, #4
 800245e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002464:	463b      	mov	r3, r7
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_ADC1_Init+0xbc>)
 800246a:	f001 fcd9 	bl	8003e20 <HAL_ADC_ConfigChannel>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002474:	f000 fa08 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000398 	.word	0x20000398
 8002484:	50040000 	.word	0x50040000
 8002488:	3ac04000 	.word	0x3ac04000

0800248c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <MX_I2C2_Init+0x74>)
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <MX_I2C2_Init+0x78>)
 8002494:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <MX_I2C2_Init+0x74>)
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <MX_I2C2_Init+0x7c>)
 800249a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800249c:	4b18      	ldr	r3, [pc, #96]	; (8002500 <MX_I2C2_Init+0x74>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <MX_I2C2_Init+0x74>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <MX_I2C2_Init+0x74>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80024ae:	4b14      	ldr	r3, [pc, #80]	; (8002500 <MX_I2C2_Init+0x74>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <MX_I2C2_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_I2C2_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <MX_I2C2_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024c6:	480e      	ldr	r0, [pc, #56]	; (8002500 <MX_I2C2_Init+0x74>)
 80024c8:	f003 ffae 	bl	8006428 <HAL_I2C_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80024d2:	f000 f9d9 	bl	8002888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024d6:	2100      	movs	r1, #0
 80024d8:	4809      	ldr	r0, [pc, #36]	; (8002500 <MX_I2C2_Init+0x74>)
 80024da:	f004 fb9b 	bl	8006c14 <HAL_I2CEx_ConfigAnalogFilter>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80024e4:	f000 f9d0 	bl	8002888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024e8:	2100      	movs	r1, #0
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_I2C2_Init+0x74>)
 80024ec:	f004 fbdd 	bl	8006caa <HAL_I2CEx_ConfigDigitalFilter>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80024f6:	f000 f9c7 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000046c 	.word	0x2000046c
 8002504:	40005800 	.word	0x40005800
 8002508:	10909cec 	.word	0x10909cec

0800250c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <MX_IWDG_Init+0x34>)
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <MX_IWDG_Init+0x38>)
 8002514:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <MX_IWDG_Init+0x34>)
 8002518:	2204      	movs	r2, #4
 800251a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <MX_IWDG_Init+0x34>)
 800251e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002522:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <MX_IWDG_Init+0x34>)
 8002526:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800252a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800252c:	4804      	ldr	r0, [pc, #16]	; (8002540 <MX_IWDG_Init+0x34>)
 800252e:	f004 fc08 	bl	8006d42 <HAL_IWDG_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002538:	f000 f9a6 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200004c0 	.word	0x200004c0
 8002544:	40003000 	.word	0x40003000

08002548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <MX_TIM1_Init+0xa0>)
 8002568:	4a20      	ldr	r2, [pc, #128]	; (80025ec <MX_TIM1_Init+0xa4>)
 800256a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800;
 800256c:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <MX_TIM1_Init+0xa0>)
 800256e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002572:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <MX_TIM1_Init+0xa0>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <MX_TIM1_Init+0xa0>)
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <MX_TIM1_Init+0xa0>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <MX_TIM1_Init+0xa0>)
 800258a:	2200      	movs	r2, #0
 800258c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <MX_TIM1_Init+0xa0>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002594:	4814      	ldr	r0, [pc, #80]	; (80025e8 <MX_TIM1_Init+0xa0>)
 8002596:	f005 fdd7 	bl	8008148 <HAL_TIM_Base_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80025a0:	f000 f972 	bl	8002888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	4619      	mov	r1, r3
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <MX_TIM1_Init+0xa0>)
 80025b2:	f005 ffc3 	bl	800853c <HAL_TIM_ConfigClockSource>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80025bc:	f000 f964 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_TIM1_Init+0xa0>)
 80025d2:	f006 f9a3 	bl	800891c <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80025dc:	f000 f954 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200004d0 	.word	0x200004d0
 80025ec:	40012c00 	.word	0x40012c00

080025f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <MX_TIM6_Init+0x68>)
 8002602:	4a16      	ldr	r2, [pc, #88]	; (800265c <MX_TIM6_Init+0x6c>)
 8002604:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <MX_TIM6_Init+0x68>)
 8002608:	f242 7210 	movw	r2, #10000	; 0x2710
 800260c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <MX_TIM6_Init+0x68>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 8002614:	4b10      	ldr	r3, [pc, #64]	; (8002658 <MX_TIM6_Init+0x68>)
 8002616:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800261a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MX_TIM6_Init+0x68>)
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002622:	480d      	ldr	r0, [pc, #52]	; (8002658 <MX_TIM6_Init+0x68>)
 8002624:	f005 fd90 	bl	8008148 <HAL_TIM_Base_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800262e:	f000 f92b 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	4619      	mov	r1, r3
 800263e:	4806      	ldr	r0, [pc, #24]	; (8002658 <MX_TIM6_Init+0x68>)
 8002640:	f006 f96c 	bl	800891c <HAL_TIMEx_MasterConfigSynchronization>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800264a:	f000 f91d 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000051c 	.word	0x2000051c
 800265c:	40001000 	.word	0x40001000

08002660 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_DMA_Init+0x48>)
 8002668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266a:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <MX_DMA_Init+0x48>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6493      	str	r3, [r2, #72]	; 0x48
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <MX_DMA_Init+0x48>)
 8002674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	200b      	movs	r0, #11
 8002684:	f003 f8e7 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002688:	200b      	movs	r0, #11
 800268a:	f003 f900 	bl	800588e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	200f      	movs	r0, #15
 8002694:	f003 f8df 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002698:	200f      	movs	r0, #15
 800269a:	f003 f8f8 	bl	800588e <HAL_NVIC_EnableIRQ>

}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000

080026ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026c2:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <MX_GPIO_Init+0x100>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a39      	ldr	r2, [pc, #228]	; (80027ac <MX_GPIO_Init+0x100>)
 80026c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <MX_GPIO_Init+0x100>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026da:	4b34      	ldr	r3, [pc, #208]	; (80027ac <MX_GPIO_Init+0x100>)
 80026dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026de:	4a33      	ldr	r2, [pc, #204]	; (80027ac <MX_GPIO_Init+0x100>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e6:	4b31      	ldr	r3, [pc, #196]	; (80027ac <MX_GPIO_Init+0x100>)
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <MX_GPIO_Init+0x100>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <MX_GPIO_Init+0x100>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <MX_GPIO_Init+0x100>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	4b28      	ldr	r3, [pc, #160]	; (80027ac <MX_GPIO_Init+0x100>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	4a27      	ldr	r2, [pc, #156]	; (80027ac <MX_GPIO_Init+0x100>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002716:	4b25      	ldr	r3, [pc, #148]	; (80027ac <MX_GPIO_Init+0x100>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002728:	4821      	ldr	r0, [pc, #132]	; (80027b0 <MX_GPIO_Init+0x104>)
 800272a:	f003 fe4d 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 800272e:	2200      	movs	r2, #0
 8002730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002738:	f003 fe46 	bl	80063c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_S_Pin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 800273c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	2301      	movs	r3, #1
 8002744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002746:	2302      	movs	r3, #2
 8002748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4816      	ldr	r0, [pc, #88]	; (80027b0 <MX_GPIO_Init+0x104>)
 8002756:	f003 fbcb 	bl	8005ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LLine_Pin */
  GPIO_InitStruct.Pin = LLine_Pin;
 800275a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800275e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002760:	2301      	movs	r3, #1
 8002762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002768:	2300      	movs	r3, #0
 800276a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LLine_GPIO_Port, &GPIO_InitStruct);
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002776:	f003 fbbb 	bl	8005ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_BTN_Pin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin;
 800277a:	2340      	movs	r3, #64	; 0x40
 800277c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800277e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MENU_BTN_GPIO_Port, &GPIO_InitStruct);
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	4619      	mov	r1, r3
 800278e:	4809      	ldr	r0, [pc, #36]	; (80027b4 <MX_GPIO_Init+0x108>)
 8002790:	f003 fbae 	bl	8005ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	2017      	movs	r0, #23
 800279a:	f003 f85c 	bl	8005856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800279e:	2017      	movs	r0, #23
 80027a0:	f003 f875 	bl	800588e <HAL_NVIC_EnableIRQ>

}
 80027a4:	bf00      	nop
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	48000800 	.word	0x48000800
 80027b4:	48000400 	.word	0x48000400

080027b8 <ADC_Average>:

/* USER CODE BEGIN 4 */
static float ADC_Average(uint16_t *data)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	float result = 0;
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < sizeof(data); i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	e011      	b.n	80027f0 <ADC_Average+0x38>
	{
		result += data[i];
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027de:	ed97 7a03 	vldr	s14, [r7, #12]
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < sizeof(data); i++)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d9ea      	bls.n	80027cc <ADC_Average+0x14>
	}
	result = result / sizeof(data);
 80027f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80027fa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80027fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002802:	edc7 7a03 	vstr	s15, [r7, #12]
	result = result * (3.3 / 4095);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7fd fe9e 	bl	8000548 <__aeabi_f2d>
 800280c:	a31c      	add	r3, pc, #112	; (adr r3, 8002880 <ADC_Average+0xc8>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fd fef1 	bl	80005f8 <__aeabi_dmul>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f7fe f9c3 	bl	8000ba8 <__aeabi_d2f>
 8002822:	4603      	mov	r3, r0
 8002824:	60fb      	str	r3, [r7, #12]
	result = (result * (100 + 27)) / 27;
 8002826:	edd7 7a03 	vldr	s15, [r7, #12]
 800282a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002878 <ADC_Average+0xc0>
 800282e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002832:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 8002836:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800283a:	edc7 7a03 	vstr	s15, [r7, #12]
	result = roundf(result*100) / 100;
 800283e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002842:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800287c <ADC_Average+0xc4>
 8002846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800284a:	eeb0 0a67 	vmov.f32	s0, s15
 800284e:	f00a fbd1 	bl	800cff4 <roundf>
 8002852:	eeb0 7a40 	vmov.f32	s14, s0
 8002856:	eddf 6a09 	vldr	s13, [pc, #36]	; 800287c <ADC_Average+0xc4>
 800285a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800285e:	edc7 7a03 	vstr	s15, [r7, #12]
	return result;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	ee07 3a90 	vmov	s15, r3
}
 8002868:	eeb0 0a67 	vmov.f32	s0, s15
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	f3af 8000 	nop.w
 8002878:	42fe0000 	.word	0x42fe0000
 800287c:	42c80000 	.word	0x42c80000
 8002880:	e734d9b4 	.word	0xe734d9b4
 8002884:	3f4a680c 	.word	0x3f4a680c

08002888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800288c:	b672      	cpsid	i
}
 800288e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002890:	e7fe      	b.n	8002890 <Error_Handler+0x8>
	...

08002894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_MspInit+0x44>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_MspInit+0x44>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6613      	str	r3, [r2, #96]	; 0x60
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_MspInit+0x44>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_MspInit+0x44>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_MspInit+0x44>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	; 0x58
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_MspInit+0x44>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b0a0      	sub	sp, #128	; 0x80
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	225c      	movs	r2, #92	; 0x5c
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f007 fc87 	bl	800a210 <memset>
  if(hadc->Instance==ADC1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a3a      	ldr	r2, [pc, #232]	; (80029f0 <HAL_ADC_MspInit+0x114>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d16d      	bne.n	80029e8 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800290c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002910:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002912:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002916:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002918:	2303      	movs	r3, #3
 800291a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800291c:	2301      	movs	r3, #1
 800291e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002920:	2308      	movs	r3, #8
 8002922:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002924:	2307      	movs	r3, #7
 8002926:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002928:	2302      	movs	r3, #2
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800292c:	2302      	movs	r3, #2
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4618      	mov	r0, r3
 800293c:	f005 f8fa 	bl	8007b34 <HAL_RCCEx_PeriphCLKConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002946:	f7ff ff9f 	bl	8002888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800294a:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_ADC_MspInit+0x118>)
 800294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294e:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <HAL_ADC_MspInit+0x118>)
 8002950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002956:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_ADC_MspInit+0x118>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_ADC_MspInit+0x118>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	4a23      	ldr	r2, [pc, #140]	; (80029f4 <HAL_ADC_MspInit+0x118>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_ADC_MspInit+0x118>)
 8002970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 800297a:	2320      	movs	r3, #32
 800297c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800297e:	230b      	movs	r3, #11
 8002980:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 8002986:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800298a:	4619      	mov	r1, r3
 800298c:	481a      	ldr	r0, [pc, #104]	; (80029f8 <HAL_ADC_MspInit+0x11c>)
 800298e:	f003 faaf 	bl	8005ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <HAL_ADC_MspInit+0x120>)
 8002994:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <HAL_ADC_MspInit+0x124>)
 8002996:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_ADC_MspInit+0x120>)
 800299a:	2200      	movs	r2, #0
 800299c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029c2:	2220      	movs	r2, #32
 80029c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029cc:	480b      	ldr	r0, [pc, #44]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029ce:	f002 ff87 	bl	80058e0 <HAL_DMA_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80029d8:	f7ff ff56 	bl	8002888 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80029e2:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_ADC_MspInit+0x120>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	3780      	adds	r7, #128	; 0x80
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	50040000 	.word	0x50040000
 80029f4:	40021000 	.word	0x40021000
 80029f8:	48000800 	.word	0x48000800
 80029fc:	200003fc 	.word	0x200003fc
 8002a00:	40020008 	.word	0x40020008

08002a04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <HAL_CAN_MspInit+0xa0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d139      	bne.n	8002a9a <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_CAN_MspInit+0xa4>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <HAL_CAN_MspInit+0xa4>)
 8002a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a30:	6593      	str	r3, [r2, #88]	; 0x58
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_CAN_MspInit+0xa4>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <HAL_CAN_MspInit+0xa4>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <HAL_CAN_MspInit+0xa4>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_CAN_MspInit+0xa4>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8002a56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a68:	2309      	movs	r3, #9
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a76:	f003 fa3b 	bl	8005ef0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	2014      	movs	r0, #20
 8002a80:	f002 fee9 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a84:	2014      	movs	r0, #20
 8002a86:	f002 ff02 	bl	800588e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2015      	movs	r0, #21
 8002a90:	f002 fee1 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002a94:	2015      	movs	r0, #21
 8002a96:	f002 fefa 	bl	800588e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a9a:	bf00      	nop
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40006400 	.word	0x40006400
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b0a0      	sub	sp, #128	; 0x80
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	225c      	movs	r2, #92	; 0x5c
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f007 fb9f 	bl	800a210 <memset>
  if(hi2c->Instance==I2C2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_I2C_MspInit+0xa8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d136      	bne.n	8002b4a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ae4:	f107 0310 	add.w	r3, r7, #16
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f005 f823 	bl	8007b34 <HAL_RCCEx_PeriphCLKConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002af4:	f7ff fec8 	bl	8002888 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_I2C_MspInit+0xac>)
 8002afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_I2C_MspInit+0xac>)
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_I2C_MspInit+0xac>)
 8002b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002b10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b14:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b16:	2312      	movs	r3, #18
 8002b18:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b22:	2304      	movs	r3, #4
 8002b24:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	480b      	ldr	r0, [pc, #44]	; (8002b5c <HAL_I2C_MspInit+0xb0>)
 8002b2e:	f003 f9df 	bl	8005ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_I2C_MspInit+0xac>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <HAL_I2C_MspInit+0xac>)
 8002b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_I2C_MspInit+0xac>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b4a:	bf00      	nop
 8002b4c:	3780      	adds	r7, #128	; 0x80
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40005800 	.word	0x40005800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	48000400 	.word	0x48000400

08002b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <HAL_TIM_Base_MspInit+0xa8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d12c      	bne.n	8002bcc <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_TIM_Base_MspInit+0xac>)
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <HAL_TIM_Base_MspInit+0xac>)
 8002b78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b7e:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <HAL_TIM_Base_MspInit+0xac>)
 8002b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2018      	movs	r0, #24
 8002b90:	f002 fe61 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002b94:	2018      	movs	r0, #24
 8002b96:	f002 fe7a 	bl	800588e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2019      	movs	r0, #25
 8002ba0:	f002 fe59 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ba4:	2019      	movs	r0, #25
 8002ba6:	f002 fe72 	bl	800588e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	201a      	movs	r0, #26
 8002bb0:	f002 fe51 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002bb4:	201a      	movs	r0, #26
 8002bb6:	f002 fe6a 	bl	800588e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	201b      	movs	r0, #27
 8002bc0:	f002 fe49 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002bc4:	201b      	movs	r0, #27
 8002bc6:	f002 fe62 	bl	800588e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002bca:	e018      	b.n	8002bfe <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <HAL_TIM_Base_MspInit+0xb0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d113      	bne.n	8002bfe <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_TIM_Base_MspInit+0xac>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <HAL_TIM_Base_MspInit+0xac>)
 8002bdc:	f043 0310 	orr.w	r3, r3, #16
 8002be0:	6593      	str	r3, [r2, #88]	; 0x58
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_TIM_Base_MspInit+0xac>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 1);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	2036      	movs	r0, #54	; 0x36
 8002bf4:	f002 fe2f 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bf8:	2036      	movs	r0, #54	; 0x36
 8002bfa:	f002 fe48 	bl	800588e <HAL_NVIC_EnableIRQ>
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40001000 	.word	0x40001000

08002c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0a0      	sub	sp, #128	; 0x80
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c2c:	f107 0310 	add.w	r3, r7, #16
 8002c30:	225c      	movs	r2, #92	; 0x5c
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f007 faeb 	bl	800a210 <memset>
  if(huart->Instance==USART1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <HAL_UART_MspInit+0x10c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d169      	bne.n	8002d18 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 ff6f 	bl	8007b34 <HAL_RCCEx_PeriphCLKConfig>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c5c:	f7ff fe14 	bl	8002888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c60:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_UART_MspInit+0x110>)
 8002c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c64:	4a2f      	ldr	r2, [pc, #188]	; (8002d24 <HAL_UART_MspInit+0x110>)
 8002c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c6a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_UART_MspInit+0x110>)
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c78:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_UART_MspInit+0x110>)
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7c:	4a29      	ldr	r2, [pc, #164]	; (8002d24 <HAL_UART_MspInit+0x110>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_UART_MspInit+0x110>)
 8002c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = KLine_TX_Pin|KLine_RX_Pin;
 8002c90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c94:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002caa:	4619      	mov	r1, r3
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb0:	f003 f91e 	bl	8005ef0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002cb4:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_UART_MspInit+0x118>)
 8002cb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002ce6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cec:	480e      	ldr	r0, [pc, #56]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002cee:	f002 fdf7 	bl	80058e0 <HAL_DMA_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002cf8:	f7ff fdc6 	bl	8002888 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002d00:	671a      	str	r2, [r3, #112]	; 0x70
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_UART_MspInit+0x114>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	2025      	movs	r0, #37	; 0x25
 8002d0e:	f002 fda2 	bl	8005856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d12:	2025      	movs	r0, #37	; 0x25
 8002d14:	f002 fdbb 	bl	800588e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3780      	adds	r7, #128	; 0x80
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40021000 	.word	0x40021000
 8002d28:	200005ec 	.word	0x200005ec
 8002d2c:	40020058 	.word	0x40020058

08002d30 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <HAL_UART_MspDeInit+0x44>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d113      	bne.n	8002d6a <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_UART_MspDeInit+0x48>)
 8002d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d46:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <HAL_UART_MspDeInit+0x48>)
 8002d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4c:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, KLine_TX_Pin|KLine_RX_Pin);
 8002d4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d56:	f003 fa45 	bl	80061e4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fe76 	bl	8005a50 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002d64:	2025      	movs	r0, #37	; 0x25
 8002d66:	f002 fda0 	bl	80058aa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40021000 	.word	0x40021000

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <NMI_Handler+0x4>

08002d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <HardFault_Handler+0x4>

08002d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <MemManage_Handler+0x4>

08002d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d92:	e7fe      	b.n	8002d92 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc8:	f000 fc0e 	bl	80035e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <DMA1_Channel1_IRQHandler+0x10>)
 8002dd6:	f002 ffac 	bl	8005d32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200003fc 	.word	0x200003fc

08002de4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <DMA1_Channel5_IRQHandler+0x10>)
 8002dea:	f002 ffa2 	bl	8005d32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200005ec 	.word	0x200005ec

08002df8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <CAN1_RX0_IRQHandler+0x10>)
 8002dfe:	f002 fa06 	bl	800520e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000444 	.word	0x20000444

08002e0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <CAN1_RX1_IRQHandler+0x10>)
 8002e12:	f002 f9fc 	bl	800520e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000444 	.word	0x20000444

08002e20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_BTN_Pin);
 8002e24:	2040      	movs	r0, #64	; 0x40
 8002e26:	f003 fae7 	bl	80063f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002e36:	f005 fa62 	bl	80082fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200004d0 	.word	0x200004d0

08002e44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002e4a:	f005 fa58 	bl	80082fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200004d0 	.word	0x200004d0

08002e58 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002e5e:	f005 fa4e 	bl	80082fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200004d0 	.word	0x200004d0

08002e6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <TIM1_CC_IRQHandler+0x10>)
 8002e72:	f005 fa44 	bl	80082fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200004d0 	.word	0x200004d0

08002e80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <USART1_IRQHandler+0x10>)
 8002e86:	f006 f80f 	bl	8008ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000568 	.word	0x20000568

08002e94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <TIM6_DAC_IRQHandler+0x10>)
 8002e9a:	f005 fa30 	bl	80082fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	2000051c 	.word	0x2000051c

08002ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
	return 1;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_kill>:

int _kill(int pid, int sig)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ec2:	f007 f96d 	bl	800a1a0 <__errno>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2216      	movs	r2, #22
 8002eca:	601a      	str	r2, [r3, #0]
	return -1;
 8002ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <_exit>:

void _exit (int status)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ffe7 	bl	8002eb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eea:	e7fe      	b.n	8002eea <_exit+0x12>

08002eec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	e00a      	b.n	8002f14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002efe:	f3af 8000 	nop.w
 8002f02:	4601      	mov	r1, r0
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	60ba      	str	r2, [r7, #8]
 8002f0a:	b2ca      	uxtb	r2, r1
 8002f0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	3301      	adds	r3, #1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	dbf0      	blt.n	8002efe <_read+0x12>
	}

return len;
 8002f1c:	687b      	ldr	r3, [r7, #4]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e009      	b.n	8002f4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	60ba      	str	r2, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	dbf1      	blt.n	8002f38 <_write+0x12>
	}
	return len;
 8002f54:	687b      	ldr	r3, [r7, #4]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_close>:

int _close(int file)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	return -1;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f86:	605a      	str	r2, [r3, #4]
	return 0;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <_isatty>:

int _isatty(int file)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f9e:	2301      	movs	r3, #1
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
	return 0;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fd0:	4a14      	ldr	r2, [pc, #80]	; (8003024 <_sbrk+0x5c>)
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <_sbrk+0x60>)
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <_sbrk+0x64>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <_sbrk+0x64>)
 8002fe6:	4a12      	ldr	r2, [pc, #72]	; (8003030 <_sbrk+0x68>)
 8002fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <_sbrk+0x64>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d207      	bcs.n	8003008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ff8:	f007 f8d2 	bl	800a1a0 <__errno>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	220c      	movs	r2, #12
 8003000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	e009      	b.n	800301c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <_sbrk+0x64>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <_sbrk+0x64>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <_sbrk+0x64>)
 8003018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800301a:	68fb      	ldr	r3, [r7, #12]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20010000 	.word	0x20010000
 8003028:	00000400 	.word	0x00000400
 800302c:	20000730 	.word	0x20000730
 8003030:	20000b50 	.word	0x20000b50

08003034 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <SystemInit+0x28>)
 800303a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800303e:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <SystemInit+0x28>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <SystemInit+0x28>)
 8003048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800304c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <Reset_Handler>:
 8003060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003098 <LoopForever+0x2>
 8003064:	f7ff ffe6 	bl	8003034 <SystemInit>
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <LoopForever+0x6>)
 800306a:	490d      	ldr	r1, [pc, #52]	; (80030a0 <LoopForever+0xa>)
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <LoopForever+0xe>)
 800306e:	2300      	movs	r3, #0
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:
 8003072:	58d4      	ldr	r4, [r2, r3]
 8003074:	50c4      	str	r4, [r0, r3]
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:
 8003078:	18c4      	adds	r4, r0, r3
 800307a:	428c      	cmp	r4, r1
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <LoopForever+0x12>)
 8003080:	4c0a      	ldr	r4, [pc, #40]	; (80030ac <LoopForever+0x16>)
 8003082:	2300      	movs	r3, #0
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:
 800308a:	42a2      	cmp	r2, r4
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>
 800308e:	f007 f88d 	bl	800a1ac <__libc_init_array>
 8003092:	f7ff f881 	bl	8002198 <main>

08003096 <LoopForever>:
 8003096:	e7fe      	b.n	8003096 <LoopForever>
 8003098:	20010000 	.word	0x20010000
 800309c:	20000000 	.word	0x20000000
 80030a0:	2000035c 	.word	0x2000035c
 80030a4:	08010384 	.word	0x08010384
 80030a8:	2000035c 	.word	0x2000035c
 80030ac:	20000b50 	.word	0x20000b50

080030b0 <ADC1_IRQHandler>:
 80030b0:	e7fe      	b.n	80030b0 <ADC1_IRQHandler>

080030b2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af04      	add	r7, sp, #16
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	9302      	str	r3, [sp, #8]
 80030d0:	2301      	movs	r3, #1
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2301      	movs	r3, #1
 80030da:	2200      	movs	r2, #0
 80030dc:	2178      	movs	r1, #120	; 0x78
 80030de:	4803      	ldr	r0, [pc, #12]	; (80030ec <ssd1306_WriteCommand+0x2c>)
 80030e0:	f003 fa32 	bl	8006548 <HAL_I2C_Mem_Write>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	2000046c 	.word	0x2000046c

080030f0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003102:	9202      	str	r2, [sp, #8]
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2301      	movs	r3, #1
 800310c:	2240      	movs	r2, #64	; 0x40
 800310e:	2178      	movs	r1, #120	; 0x78
 8003110:	4803      	ldr	r0, [pc, #12]	; (8003120 <ssd1306_WriteData+0x30>)
 8003112:	f003 fa19 	bl	8006548 <HAL_I2C_Mem_Write>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	2000046c 	.word	0x2000046c

08003124 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003128:	f7ff ffc3 	bl	80030b2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800312c:	2064      	movs	r0, #100	; 0x64
 800312e:	f000 fa7b 	bl	8003628 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003132:	2000      	movs	r0, #0
 8003134:	f000 f9da 	bl	80034ec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003138:	2020      	movs	r0, #32
 800313a:	f7ff ffc1 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800313e:	2000      	movs	r0, #0
 8003140:	f7ff ffbe 	bl	80030c0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003144:	20b0      	movs	r0, #176	; 0xb0
 8003146:	f7ff ffbb 	bl	80030c0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800314a:	20c8      	movs	r0, #200	; 0xc8
 800314c:	f7ff ffb8 	bl	80030c0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003150:	2000      	movs	r0, #0
 8003152:	f7ff ffb5 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003156:	2010      	movs	r0, #16
 8003158:	f7ff ffb2 	bl	80030c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800315c:	2040      	movs	r0, #64	; 0x40
 800315e:	f7ff ffaf 	bl	80030c0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003162:	20ff      	movs	r0, #255	; 0xff
 8003164:	f000 f9ae 	bl	80034c4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003168:	20a1      	movs	r0, #161	; 0xa1
 800316a:	f7ff ffa9 	bl	80030c0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800316e:	20a6      	movs	r0, #166	; 0xa6
 8003170:	f7ff ffa6 	bl	80030c0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003174:	20a8      	movs	r0, #168	; 0xa8
 8003176:	f7ff ffa3 	bl	80030c0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800317a:	203f      	movs	r0, #63	; 0x3f
 800317c:	f7ff ffa0 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003180:	20a4      	movs	r0, #164	; 0xa4
 8003182:	f7ff ff9d 	bl	80030c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003186:	20d3      	movs	r0, #211	; 0xd3
 8003188:	f7ff ff9a 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800318c:	2000      	movs	r0, #0
 800318e:	f7ff ff97 	bl	80030c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003192:	20d5      	movs	r0, #213	; 0xd5
 8003194:	f7ff ff94 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003198:	20f0      	movs	r0, #240	; 0xf0
 800319a:	f7ff ff91 	bl	80030c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800319e:	20d9      	movs	r0, #217	; 0xd9
 80031a0:	f7ff ff8e 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80031a4:	2022      	movs	r0, #34	; 0x22
 80031a6:	f7ff ff8b 	bl	80030c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80031aa:	20da      	movs	r0, #218	; 0xda
 80031ac:	f7ff ff88 	bl	80030c0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80031b0:	2012      	movs	r0, #18
 80031b2:	f7ff ff85 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80031b6:	20db      	movs	r0, #219	; 0xdb
 80031b8:	f7ff ff82 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80031bc:	2020      	movs	r0, #32
 80031be:	f7ff ff7f 	bl	80030c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80031c2:	208d      	movs	r0, #141	; 0x8d
 80031c4:	f7ff ff7c 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80031c8:	2014      	movs	r0, #20
 80031ca:	f7ff ff79 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80031ce:	2001      	movs	r0, #1
 80031d0:	f000 f98c 	bl	80034ec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f000 f80f 	bl	80031f8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80031da:	f000 f831 	bl	8003240 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <ssd1306_Init+0xd0>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <ssd1306_Init+0xd0>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80031ea:	4b02      	ldr	r3, [pc, #8]	; (80031f4 <ssd1306_Init+0xd0>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	711a      	strb	r2, [r3, #4]
}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000b34 	.word	0x20000b34

080031f8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	e00d      	b.n	8003224 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <ssd1306_Fill+0x1a>
 800320e:	2100      	movs	r1, #0
 8003210:	e000      	b.n	8003214 <ssd1306_Fill+0x1c>
 8003212:	21ff      	movs	r1, #255	; 0xff
 8003214:	4a09      	ldr	r2, [pc, #36]	; (800323c <ssd1306_Fill+0x44>)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4413      	add	r3, r2
 800321a:	460a      	mov	r2, r1
 800321c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3301      	adds	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322a:	d3ed      	bcc.n	8003208 <ssd1306_Fill+0x10>
    }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000734 	.word	0x20000734

08003240 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003246:	2300      	movs	r3, #0
 8003248:	71fb      	strb	r3, [r7, #7]
 800324a:	e016      	b.n	800327a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	3b50      	subs	r3, #80	; 0x50
 8003250:	b2db      	uxtb	r3, r3
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff34 	bl	80030c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003258:	2000      	movs	r0, #0
 800325a:	f7ff ff31 	bl	80030c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800325e:	2010      	movs	r0, #16
 8003260:	f7ff ff2e 	bl	80030c0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	01db      	lsls	r3, r3, #7
 8003268:	4a08      	ldr	r2, [pc, #32]	; (800328c <ssd1306_UpdateScreen+0x4c>)
 800326a:	4413      	add	r3, r2
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff ff3e 	bl	80030f0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	3301      	adds	r3, #1
 8003278:	71fb      	strb	r3, [r7, #7]
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	2b07      	cmp	r3, #7
 800327e:	d9e5      	bls.n	800324c <ssd1306_UpdateScreen+0xc>
    }
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000734 	.word	0x20000734

08003290 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
 800329a:	460b      	mov	r3, r1
 800329c:	71bb      	strb	r3, [r7, #6]
 800329e:	4613      	mov	r3, r2
 80032a0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	db3d      	blt.n	8003326 <ssd1306_DrawPixel+0x96>
 80032aa:	79bb      	ldrb	r3, [r7, #6]
 80032ac:	2b3f      	cmp	r3, #63	; 0x3f
 80032ae:	d83a      	bhi.n	8003326 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80032b0:	797b      	ldrb	r3, [r7, #5]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d11a      	bne.n	80032ec <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80032b6:	79fa      	ldrb	r2, [r7, #7]
 80032b8:	79bb      	ldrb	r3, [r7, #6]
 80032ba:	08db      	lsrs	r3, r3, #3
 80032bc:	b2d8      	uxtb	r0, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	01db      	lsls	r3, r3, #7
 80032c2:	4413      	add	r3, r2
 80032c4:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <ssd1306_DrawPixel+0xa4>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	b25a      	sxtb	r2, r3
 80032ca:	79bb      	ldrb	r3, [r7, #6]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	2101      	movs	r1, #1
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	b25b      	sxtb	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b259      	sxtb	r1, r3
 80032dc:	79fa      	ldrb	r2, [r7, #7]
 80032de:	4603      	mov	r3, r0
 80032e0:	01db      	lsls	r3, r3, #7
 80032e2:	4413      	add	r3, r2
 80032e4:	b2c9      	uxtb	r1, r1
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <ssd1306_DrawPixel+0xa4>)
 80032e8:	54d1      	strb	r1, [r2, r3]
 80032ea:	e01d      	b.n	8003328 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80032ec:	79fa      	ldrb	r2, [r7, #7]
 80032ee:	79bb      	ldrb	r3, [r7, #6]
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	b2d8      	uxtb	r0, r3
 80032f4:	4603      	mov	r3, r0
 80032f6:	01db      	lsls	r3, r3, #7
 80032f8:	4413      	add	r3, r2
 80032fa:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <ssd1306_DrawPixel+0xa4>)
 80032fc:	5cd3      	ldrb	r3, [r2, r3]
 80032fe:	b25a      	sxtb	r2, r3
 8003300:	79bb      	ldrb	r3, [r7, #6]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f303 	lsl.w	r3, r1, r3
 800330c:	b25b      	sxtb	r3, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	b25b      	sxtb	r3, r3
 8003312:	4013      	ands	r3, r2
 8003314:	b259      	sxtb	r1, r3
 8003316:	79fa      	ldrb	r2, [r7, #7]
 8003318:	4603      	mov	r3, r0
 800331a:	01db      	lsls	r3, r3, #7
 800331c:	4413      	add	r3, r2
 800331e:	b2c9      	uxtb	r1, r1
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <ssd1306_DrawPixel+0xa4>)
 8003322:	54d1      	strb	r1, [r2, r3]
 8003324:	e000      	b.n	8003328 <ssd1306_DrawPixel+0x98>
        return;
 8003326:	bf00      	nop
    }
}
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000734 	.word	0x20000734

08003338 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	4604      	mov	r4, r0
 8003340:	1d38      	adds	r0, r7, #4
 8003342:	e880 0006 	stmia.w	r0, {r1, r2}
 8003346:	461a      	mov	r2, r3
 8003348:	4623      	mov	r3, r4
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	4613      	mov	r3, r2
 800334e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b1f      	cmp	r3, #31
 8003354:	d902      	bls.n	800335c <ssd1306_WriteChar+0x24>
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b7e      	cmp	r3, #126	; 0x7e
 800335a:	d901      	bls.n	8003360 <ssd1306_WriteChar+0x28>
        return 0;
 800335c:	2300      	movs	r3, #0
 800335e:	e06d      	b.n	800343c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003360:	4b38      	ldr	r3, [pc, #224]	; (8003444 <ssd1306_WriteChar+0x10c>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	793b      	ldrb	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	2b80      	cmp	r3, #128	; 0x80
 800336c:	dc06      	bgt.n	800337c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800336e:	4b35      	ldr	r3, [pc, #212]	; (8003444 <ssd1306_WriteChar+0x10c>)
 8003370:	885b      	ldrh	r3, [r3, #2]
 8003372:	461a      	mov	r2, r3
 8003374:	797b      	ldrb	r3, [r7, #5]
 8003376:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	dd01      	ble.n	8003380 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800337c:	2300      	movs	r3, #0
 800337e:	e05d      	b.n	800343c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	e04c      	b.n	8003420 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	3b20      	subs	r3, #32
 800338c:	7979      	ldrb	r1, [r7, #5]
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4619      	mov	r1, r3
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	440b      	add	r3, r1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e034      	b.n	8003410 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80033b6:	4b23      	ldr	r3, [pc, #140]	; (8003444 <ssd1306_WriteChar+0x10c>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	b2d8      	uxtb	r0, r3
 80033c4:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <ssd1306_WriteChar+0x10c>)
 80033c6:	885b      	ldrh	r3, [r3, #2]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	7bba      	ldrb	r2, [r7, #14]
 80033d4:	4619      	mov	r1, r3
 80033d6:	f7ff ff5b 	bl	8003290 <ssd1306_DrawPixel>
 80033da:	e016      	b.n	800340a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <ssd1306_WriteChar+0x10c>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	b2d8      	uxtb	r0, r3
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <ssd1306_WriteChar+0x10c>)
 80033ec:	885b      	ldrh	r3, [r3, #2]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	b2d9      	uxtb	r1, r3
 80033f8:	7bbb      	ldrb	r3, [r7, #14]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	f7ff ff43 	bl	8003290 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	3301      	adds	r3, #1
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	793b      	ldrb	r3, [r7, #4]
 8003412:	461a      	mov	r2, r3
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	4293      	cmp	r3, r2
 8003418:	d3c5      	bcc.n	80033a6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3301      	adds	r3, #1
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	797b      	ldrb	r3, [r7, #5]
 8003422:	461a      	mov	r2, r3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4293      	cmp	r3, r2
 8003428:	d3ad      	bcc.n	8003386 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <ssd1306_WriteChar+0x10c>)
 800342c:	881a      	ldrh	r2, [r3, #0]
 800342e:	793b      	ldrb	r3, [r7, #4]
 8003430:	b29b      	uxth	r3, r3
 8003432:	4413      	add	r3, r2
 8003434:	b29a      	uxth	r2, r3
 8003436:	4b03      	ldr	r3, [pc, #12]	; (8003444 <ssd1306_WriteChar+0x10c>)
 8003438:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3724      	adds	r7, #36	; 0x24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd90      	pop	{r4, r7, pc}
 8003444:	20000b34 	.word	0x20000b34

08003448 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	1d38      	adds	r0, r7, #4
 8003452:	e880 0006 	stmia.w	r0, {r1, r2}
 8003456:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003458:	e012      	b.n	8003480 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	7818      	ldrb	r0, [r3, #0]
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	1d3a      	adds	r2, r7, #4
 8003462:	ca06      	ldmia	r2, {r1, r2}
 8003464:	f7ff ff68 	bl	8003338 <ssd1306_WriteChar>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d002      	beq.n	800347a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	e008      	b.n	800348c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3301      	adds	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e8      	bne.n	800345a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	781b      	ldrb	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	460a      	mov	r2, r1
 800349e:	71fb      	strb	r3, [r7, #7]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <ssd1306_SetCursor+0x2c>)
 80034aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80034ac:	79bb      	ldrb	r3, [r7, #6]
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <ssd1306_SetCursor+0x2c>)
 80034b2:	805a      	strh	r2, [r3, #2]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000b34 	.word	0x20000b34

080034c4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80034ce:	2381      	movs	r3, #129	; 0x81
 80034d0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fdf3 	bl	80030c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fdef 	bl	80030c0 <ssd1306_WriteCommand>
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80034fc:	23af      	movs	r3, #175	; 0xaf
 80034fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <ssd1306_SetDisplayOn+0x38>)
 8003502:	2201      	movs	r2, #1
 8003504:	715a      	strb	r2, [r3, #5]
 8003506:	e004      	b.n	8003512 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003508:	23ae      	movs	r3, #174	; 0xae
 800350a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <ssd1306_SetDisplayOn+0x38>)
 800350e:	2200      	movs	r2, #0
 8003510:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fdd3 	bl	80030c0 <ssd1306_WriteCommand>
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000b34 	.word	0x20000b34

08003528 <ssd1306_GetDisplayOn>:

uint8_t ssd1306_GetDisplayOn() {
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
    return SSD1306.DisplayOn;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <ssd1306_GetDisplayOn+0x14>)
 800352e:	795b      	ldrb	r3, [r3, #5]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000b34 	.word	0x20000b34

08003540 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800354a:	2003      	movs	r0, #3
 800354c:	f002 f978 	bl	8005840 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003550:	2000      	movs	r0, #0
 8003552:	f000 f80d 	bl	8003570 <HAL_InitTick>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	71fb      	strb	r3, [r7, #7]
 8003560:	e001      	b.n	8003566 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003562:	f7ff f997 	bl	8002894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003566:	79fb      	ldrb	r3, [r7, #7]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <HAL_InitTick+0x6c>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d023      	beq.n	80035cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_InitTick+0x70>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b14      	ldr	r3, [pc, #80]	; (80035dc <HAL_InitTick+0x6c>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	4619      	mov	r1, r3
 800358e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003592:	fbb3 f3f1 	udiv	r3, r3, r1
 8003596:	fbb2 f3f3 	udiv	r3, r2, r3
 800359a:	4618      	mov	r0, r3
 800359c:	f002 f993 	bl	80058c6 <HAL_SYSTICK_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b0f      	cmp	r3, #15
 80035aa:	d809      	bhi.n	80035c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035ac:	2200      	movs	r2, #0
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f002 f94f 	bl	8005856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035b8:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <HAL_InitTick+0x74>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e007      	b.n	80035d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e004      	b.n	80035d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
 80035ca:	e001      	b.n	80035d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000188 	.word	0x20000188
 80035e0:	20000168 	.word	0x20000168
 80035e4:	20000184 	.word	0x20000184

080035e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_IncTick+0x20>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_IncTick+0x24>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <HAL_IncTick+0x24>)
 80035fa:	6013      	str	r3, [r2, #0]
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000188 	.word	0x20000188
 800360c:	20000b3c 	.word	0x20000b3c

08003610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return uwTick;
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_GetTick+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000b3c 	.word	0x20000b3c

08003628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7ff ffee 	bl	8003610 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d005      	beq.n	800364e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_Delay+0x44>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800364e:	bf00      	nop
 8003650:	f7ff ffde 	bl	8003610 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	429a      	cmp	r2, r3
 800365e:	d8f7      	bhi.n	8003650 <HAL_Delay+0x28>
  {
  }
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000188 	.word	0x20000188

08003670 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3360      	adds	r3, #96	; 0x60
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <LL_ADC_SetOffset+0x44>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	4313      	orrs	r3, r2
 8003708:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	03fff000 	.word	0x03fff000

08003720 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3360      	adds	r3, #96	; 0x60
 800372e:	461a      	mov	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3360      	adds	r3, #96	; 0x60
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	431a      	orrs	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3330      	adds	r3, #48	; 0x30
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	4413      	add	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	211f      	movs	r1, #31
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	401a      	ands	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	f003 011f 	and.w	r1, r3, #31
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	431a      	orrs	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3314      	adds	r3, #20
 8003810:	461a      	mov	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	0e5b      	lsrs	r3, r3, #25
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	4413      	add	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	0d1b      	lsrs	r3, r3, #20
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	2107      	movs	r1, #7
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	401a      	ands	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	0d1b      	lsrs	r3, r3, #20
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003870:	43db      	mvns	r3, r3
 8003872:	401a      	ands	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f003 0318 	and.w	r3, r3, #24
 800387a:	4908      	ldr	r1, [pc, #32]	; (800389c <LL_ADC_SetChannelSingleDiff+0x44>)
 800387c:	40d9      	lsrs	r1, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	400b      	ands	r3, r1
 8003882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003886:	431a      	orrs	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	0007ffff 	.word	0x0007ffff

080038a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80038b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6093      	str	r3, [r2, #8]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d8:	d101      	bne.n	80038de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003900:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003928:	d101      	bne.n	800392e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800394c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003950:	f043 0201 	orr.w	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003974:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003978:	f043 0202 	orr.w	r2, r3, #2
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <LL_ADC_IsEnabled+0x18>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <LL_ADC_IsEnabled+0x1a>
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d101      	bne.n	80039ca <LL_ADC_IsDisableOngoing+0x18>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <LL_ADC_IsDisableOngoing+0x1a>
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d101      	bne.n	8003a18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d101      	bne.n	8003a3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e12c      	b.n	8003cc0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fe ff31 	bl	80028dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff19 	bl	80038c4 <LL_ADC_IsDeepPowerDownEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff feff 	bl	80038a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff34 	bl	8003914 <LL_ADC_IsInternalRegulatorEnabled>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d115      	bne.n	8003ade <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff18 	bl	80038ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003abc:	4b82      	ldr	r3, [pc, #520]	; (8003cc8 <HAL_ADC_Init+0x27c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	4a82      	ldr	r2, [pc, #520]	; (8003ccc <HAL_ADC_Init+0x280>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	099b      	lsrs	r3, r3, #6
 8003aca:	3301      	adds	r3, #1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ad0:	e002      	b.n	8003ad8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f9      	bne.n	8003ad2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff ff16 	bl	8003914 <LL_ADC_IsInternalRegulatorEnabled>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10d      	bne.n	8003b0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	f043 0210 	orr.w	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	f043 0201 	orr.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff ff76 	bl	8003a00 <LL_ADC_REG_IsConversionOngoing>
 8003b14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f040 80c5 	bne.w	8003cae <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 80c1 	bne.w	8003cae <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b34:	f043 0202 	orr.w	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff ff23 	bl	800398c <LL_ADC_IsEnabled>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b4c:	4860      	ldr	r0, [pc, #384]	; (8003cd0 <HAL_ADC_Init+0x284>)
 8003b4e:	f7ff ff1d 	bl	800398c <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d105      	bne.n	8003b64 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	485d      	ldr	r0, [pc, #372]	; (8003cd4 <HAL_ADC_Init+0x288>)
 8003b60:	f7ff fd86 	bl	8003670 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	7e5b      	ldrb	r3, [r3, #25]
 8003b68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b6e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003b74:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003b7a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b82:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d106      	bne.n	8003ba0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	3b01      	subs	r3, #1
 8003b98:	045b      	lsls	r3, r3, #17
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d009      	beq.n	8003bbc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	4b45      	ldr	r3, [pc, #276]	; (8003cd8 <HAL_ADC_Init+0x28c>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	69b9      	ldr	r1, [r7, #24]
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff13 	bl	8003a00 <LL_ADC_REG_IsConversionOngoing>
 8003bda:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff ff20 	bl	8003a26 <LL_ADC_INJ_IsConversionOngoing>
 8003be6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d13d      	bne.n	8003c6a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d13a      	bne.n	8003c6a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bf8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c00:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c10:	f023 0302 	bic.w	r3, r3, #2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	69b9      	ldr	r1, [r7, #24]
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d118      	bne.n	8003c5a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c32:	f023 0304 	bic.w	r3, r3, #4
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c3e:	4311      	orrs	r1, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c44:	4311      	orrs	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	611a      	str	r2, [r3, #16]
 8003c58:	e007      	b.n	8003c6a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d10c      	bne.n	8003c8c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	f023 010f 	bic.w	r1, r3, #15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	1e5a      	subs	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
 8003c8a:	e007      	b.n	8003c9c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 020f 	bic.w	r2, r2, #15
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f023 0303 	bic.w	r3, r3, #3
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
 8003cac:	e007      	b.n	8003cbe <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f043 0210 	orr.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000168 	.word	0x20000168
 8003ccc:	053e2d63 	.word	0x053e2d63
 8003cd0:	50040000 	.word	0x50040000
 8003cd4:	50040300 	.word	0x50040300
 8003cd8:	fff0c007 	.word	0xfff0c007

08003cdc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fe87 	bl	8003a00 <LL_ADC_REG_IsConversionOngoing>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d167      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_Start_DMA+0x2a>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e063      	b.n	8003dce <HAL_ADC_Start_DMA+0xf2>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fc66 	bl	80045e0 <ADC_Enable>
 8003d14:	4603      	mov	r3, r0
 8003d16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d14f      	bne.n	8003dbe <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f023 0206 	bic.w	r2, r3, #6
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	659a      	str	r2, [r3, #88]	; 0x58
 8003d4a:	e002      	b.n	8003d52 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d56:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <HAL_ADC_Start_DMA+0xfc>)
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5e:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <HAL_ADC_Start_DMA+0x100>)
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_ADC_Start_DMA+0x104>)
 8003d68:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	221c      	movs	r2, #28
 8003d70:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0210 	orr.w	r2, r2, #16
 8003d88:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3340      	adds	r3, #64	; 0x40
 8003da4:	4619      	mov	r1, r3
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f001 fee3 	bl	8005b74 <HAL_DMA_Start_IT>
 8003dae:	4603      	mov	r3, r0
 8003db0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fe0e 	bl	80039d8 <LL_ADC_REG_StartConversion>
 8003dbc:	e006      	b.n	8003dcc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003dc6:	e001      	b.n	8003dcc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	080047ab 	.word	0x080047ab
 8003ddc:	08004883 	.word	0x08004883
 8003de0:	0800489f 	.word	0x0800489f

08003de4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b0b6      	sub	sp, #216	; 0xd8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x22>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e3b9      	b.n	80045b6 <HAL_ADC_ConfigChannel+0x796>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fdd6 	bl	8003a00 <LL_ADC_REG_IsConversionOngoing>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 839e 	bne.w	8004598 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b05      	cmp	r3, #5
 8003e62:	d824      	bhi.n	8003eae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	3b02      	subs	r3, #2
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d81b      	bhi.n	8003ea6 <HAL_ADC_ConfigChannel+0x86>
 8003e6e:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <HAL_ADC_ConfigChannel+0x54>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003e85 	.word	0x08003e85
 8003e78:	08003e8d 	.word	0x08003e8d
 8003e7c:	08003e95 	.word	0x08003e95
 8003e80:	08003e9d 	.word	0x08003e9d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	220c      	movs	r2, #12
 8003e88:	605a      	str	r2, [r3, #4]
          break;
 8003e8a:	e011      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2212      	movs	r2, #18
 8003e90:	605a      	str	r2, [r3, #4]
          break;
 8003e92:	e00d      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	2218      	movs	r2, #24
 8003e98:	605a      	str	r2, [r3, #4]
          break;
 8003e9a:	e009      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ea2:	605a      	str	r2, [r3, #4]
          break;
 8003ea4:	e004      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2206      	movs	r2, #6
 8003eaa:	605a      	str	r2, [r3, #4]
          break;
 8003eac:	e000      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003eae:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f7ff fc73 	bl	80037a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fd9a 	bl	8003a00 <LL_ADC_REG_IsConversionOngoing>
 8003ecc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fda6 	bl	8003a26 <LL_ADC_INJ_IsConversionOngoing>
 8003eda:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f040 81a6 	bne.w	8004234 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f040 81a1 	bne.w	8004234 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6819      	ldr	r1, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	461a      	mov	r2, r3
 8003f00:	f7ff fc7e 	bl	8003800 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	08db      	lsrs	r3, r3, #3
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00a      	beq.n	8003f3c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f36:	f7ff fbcf 	bl	80036d8 <LL_ADC_SetOffset>
 8003f3a:	e17b      	b.n	8004234 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fbec 	bl	8003720 <LL_ADC_GetOffsetChannel>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x148>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fbe1 	bl	8003720 <LL_ADC_GetOffsetChannel>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	0e9b      	lsrs	r3, r3, #26
 8003f62:	f003 021f 	and.w	r2, r3, #31
 8003f66:	e01e      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x186>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fbd6 	bl	8003720 <LL_ADC_GetOffsetChannel>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003f96:	2320      	movs	r3, #32
 8003f98:	e004      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003f9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x19e>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	0e9b      	lsrs	r3, r3, #26
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	e018      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x1d0>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003fda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	e004      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d106      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fba5 	bl	800374c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2101      	movs	r1, #1
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fb89 	bl	8003720 <LL_ADC_GetOffsetChannel>
 800400e:	4603      	mov	r3, r0
 8004010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_ADC_ConfigChannel+0x20e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fb7e 	bl	8003720 <LL_ADC_GetOffsetChannel>
 8004024:	4603      	mov	r3, r0
 8004026:	0e9b      	lsrs	r3, r3, #26
 8004028:	f003 021f 	and.w	r2, r3, #31
 800402c:	e01e      	b.n	800406c <HAL_ADC_ConfigChannel+0x24c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2101      	movs	r1, #1
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fb73 	bl	8003720 <LL_ADC_GetOffsetChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800404c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004054:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800405c:	2320      	movs	r3, #32
 800405e:	e004      	b.n	800406a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x264>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0e9b      	lsrs	r3, r3, #26
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	e018      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x296>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004098:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800409c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80040a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e004      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80040ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d106      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	2101      	movs	r1, #1
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fb42 	bl	800374c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fb26 	bl	8003720 <LL_ADC_GetOffsetChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x2d4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fb1b 	bl	8003720 <LL_ADC_GetOffsetChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	f003 021f 	and.w	r2, r3, #31
 80040f2:	e01e      	b.n	8004132 <HAL_ADC_ConfigChannel+0x312>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fb10 	bl	8003720 <LL_ADC_GetOffsetChannel>
 8004100:	4603      	mov	r3, r0
 8004102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800411a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004122:	2320      	movs	r3, #32
 8004124:	e004      	b.n	8004130 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004126:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <HAL_ADC_ConfigChannel+0x32a>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	0e9b      	lsrs	r3, r3, #26
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	e016      	b.n	8004178 <HAL_ADC_ConfigChannel+0x358>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800415c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800415e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004162:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800416a:	2320      	movs	r3, #32
 800416c:	e004      	b.n	8004178 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800416e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004178:	429a      	cmp	r2, r3
 800417a:	d106      	bne.n	800418a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	2102      	movs	r1, #2
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fae1 	bl	800374c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2103      	movs	r1, #3
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fac5 	bl	8003720 <LL_ADC_GetOffsetChannel>
 8004196:	4603      	mov	r3, r0
 8004198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x396>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2103      	movs	r1, #3
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff faba 	bl	8003720 <LL_ADC_GetOffsetChannel>
 80041ac:	4603      	mov	r3, r0
 80041ae:	0e9b      	lsrs	r3, r3, #26
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	e017      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x3c6>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2103      	movs	r1, #3
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff faaf 	bl	8003720 <LL_ADC_GetOffsetChannel>
 80041c2:	4603      	mov	r3, r0
 80041c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80041ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80041d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80041d8:	2320      	movs	r3, #32
 80041da:	e003      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80041dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x3de>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	0e9b      	lsrs	r3, r3, #26
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	e011      	b.n	8004222 <HAL_ADC_ConfigChannel+0x402>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800420c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800420e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004216:	2320      	movs	r3, #32
 8004218:	e003      	b.n	8004222 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800421a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421c:	fab3 f383 	clz	r3, r3
 8004220:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004222:	429a      	cmp	r2, r3
 8004224:	d106      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	2103      	movs	r1, #3
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fa8c 	bl	800374c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff fba7 	bl	800398c <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 813f 	bne.w	80044c4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	461a      	mov	r2, r3
 8004254:	f7ff fb00 	bl	8003858 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a8e      	ldr	r2, [pc, #568]	; (8004498 <HAL_ADC_ConfigChannel+0x678>)
 800425e:	4293      	cmp	r3, r2
 8004260:	f040 8130 	bne.w	80044c4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <HAL_ADC_ConfigChannel+0x46c>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	3301      	adds	r3, #1
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	2b09      	cmp	r3, #9
 8004282:	bf94      	ite	ls
 8004284:	2301      	movls	r3, #1
 8004286:	2300      	movhi	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	e019      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x4a0>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800429a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800429c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800429e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80042a4:	2320      	movs	r3, #32
 80042a6:	e003      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80042a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3301      	adds	r3, #1
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2b09      	cmp	r3, #9
 80042b8:	bf94      	ite	ls
 80042ba:	2301      	movls	r3, #1
 80042bc:	2300      	movhi	r3, #0
 80042be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d079      	beq.n	80043b8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x4c0>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	0e9b      	lsrs	r3, r3, #26
 80042d6:	3301      	adds	r3, #1
 80042d8:	069b      	lsls	r3, r3, #26
 80042da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042de:	e015      	b.n	800430c <HAL_ADC_ConfigChannel+0x4ec>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80042f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80042f8:	2320      	movs	r3, #32
 80042fa:	e003      	b.n	8004304 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	3301      	adds	r3, #1
 8004306:	069b      	lsls	r3, r3, #26
 8004308:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_ADC_ConfigChannel+0x50c>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	3301      	adds	r3, #1
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	2101      	movs	r1, #1
 8004326:	fa01 f303 	lsl.w	r3, r1, r3
 800432a:	e017      	b.n	800435c <HAL_ADC_ConfigChannel+0x53c>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004334:	fa93 f3a3 	rbit	r3, r3
 8004338:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800433a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800433e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004344:	2320      	movs	r3, #32
 8004346:	e003      	b.n	8004350 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	3301      	adds	r3, #1
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2101      	movs	r1, #1
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	ea42 0103 	orr.w	r1, r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x562>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	0e9b      	lsrs	r3, r3, #26
 8004372:	3301      	adds	r3, #1
 8004374:	f003 021f 	and.w	r2, r3, #31
 8004378:	4613      	mov	r3, r2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	051b      	lsls	r3, r3, #20
 8004380:	e018      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x594>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800439a:	2320      	movs	r3, #32
 800439c:	e003      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800439e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f003 021f 	and.w	r2, r3, #31
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b4:	430b      	orrs	r3, r1
 80043b6:	e080      	b.n	80044ba <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d107      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x5b4>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	3301      	adds	r3, #1
 80043cc:	069b      	lsls	r3, r3, #26
 80043ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043d2:	e015      	b.n	8004400 <HAL_ADC_ConfigChannel+0x5e0>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80043ec:	2320      	movs	r3, #32
 80043ee:	e003      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	fab3 f383 	clz	r3, r3
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	069b      	lsls	r3, r3, #26
 80043fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004408:	2b00      	cmp	r3, #0
 800440a:	d109      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x600>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	0e9b      	lsrs	r3, r3, #26
 8004412:	3301      	adds	r3, #1
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f303 	lsl.w	r3, r1, r3
 800441e:	e017      	b.n	8004450 <HAL_ADC_ConfigChannel+0x630>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	61fb      	str	r3, [r7, #28]
  return result;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004438:	2320      	movs	r3, #32
 800443a:	e003      	b.n	8004444 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2101      	movs	r1, #1
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	ea42 0103 	orr.w	r1, r2, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <HAL_ADC_ConfigChannel+0x65c>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	0e9b      	lsrs	r3, r3, #26
 8004466:	3301      	adds	r3, #1
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	4613      	mov	r3, r2
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	4413      	add	r3, r2
 8004472:	3b1e      	subs	r3, #30
 8004474:	051b      	lsls	r3, r3, #20
 8004476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800447a:	e01d      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x698>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	613b      	str	r3, [r7, #16]
  return result;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004494:	2320      	movs	r3, #32
 8004496:	e005      	b.n	80044a4 <HAL_ADC_ConfigChannel+0x684>
 8004498:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	fab3 f383 	clz	r3, r3
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	3301      	adds	r3, #1
 80044a6:	f003 021f 	and.w	r2, r3, #31
 80044aa:	4613      	mov	r3, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	4413      	add	r3, r2
 80044b0:	3b1e      	subs	r3, #30
 80044b2:	051b      	lsls	r3, r3, #20
 80044b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044b8:	430b      	orrs	r3, r1
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	6892      	ldr	r2, [r2, #8]
 80044be:	4619      	mov	r1, r3
 80044c0:	f7ff f99e 	bl	8003800 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4b3d      	ldr	r3, [pc, #244]	; (80045c0 <HAL_ADC_ConfigChannel+0x7a0>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d06c      	beq.n	80045aa <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d0:	483c      	ldr	r0, [pc, #240]	; (80045c4 <HAL_ADC_ConfigChannel+0x7a4>)
 80044d2:	f7ff f8f3 	bl	80036bc <LL_ADC_GetCommonPathInternalCh>
 80044d6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3a      	ldr	r2, [pc, #232]	; (80045c8 <HAL_ADC_ConfigChannel+0x7a8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d127      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d121      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a35      	ldr	r2, [pc, #212]	; (80045cc <HAL_ADC_ConfigChannel+0x7ac>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d157      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004502:	4619      	mov	r1, r3
 8004504:	482f      	ldr	r0, [pc, #188]	; (80045c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8004506:	f7ff f8c6 	bl	8003696 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800450a:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <HAL_ADC_ConfigChannel+0x7b0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	4a30      	ldr	r2, [pc, #192]	; (80045d4 <HAL_ADC_ConfigChannel+0x7b4>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004524:	e002      	b.n	800452c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b01      	subs	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f9      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004532:	e03a      	b.n	80045aa <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <HAL_ADC_ConfigChannel+0x7b8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d113      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x746>
 800453e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10d      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <HAL_ADC_ConfigChannel+0x7ac>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d12a      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455c:	4619      	mov	r1, r3
 800455e:	4819      	ldr	r0, [pc, #100]	; (80045c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8004560:	f7ff f899 	bl	8003696 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004564:	e021      	b.n	80045aa <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <HAL_ADC_ConfigChannel+0x7bc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d11c      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d116      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a12      	ldr	r2, [pc, #72]	; (80045cc <HAL_ADC_ConfigChannel+0x7ac>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d111      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800458a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800458e:	4619      	mov	r1, r3
 8004590:	480c      	ldr	r0, [pc, #48]	; (80045c4 <HAL_ADC_ConfigChannel+0x7a4>)
 8004592:	f7ff f880 	bl	8003696 <LL_ADC_SetCommonPathInternalCh>
 8004596:	e008      	b.n	80045aa <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	37d8      	adds	r7, #216	; 0xd8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	80080000 	.word	0x80080000
 80045c4:	50040300 	.word	0x50040300
 80045c8:	c7520000 	.word	0xc7520000
 80045cc:	50040000 	.word	0x50040000
 80045d0:	20000168 	.word	0x20000168
 80045d4:	053e2d63 	.word	0x053e2d63
 80045d8:	cb840000 	.word	0xcb840000
 80045dc:	80000001 	.word	0x80000001

080045e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff f9cb 	bl	800398c <LL_ADC_IsEnabled>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d169      	bne.n	80046d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <ADC_Enable+0xfc>)
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	f043 0210 	orr.w	r2, r3, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	f043 0201 	orr.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e055      	b.n	80046d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff f986 	bl	800393c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004630:	482b      	ldr	r0, [pc, #172]	; (80046e0 <ADC_Enable+0x100>)
 8004632:	f7ff f843 	bl	80036bc <LL_ADC_GetCommonPathInternalCh>
 8004636:	4603      	mov	r3, r0
 8004638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d013      	beq.n	8004668 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <ADC_Enable+0x104>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	099b      	lsrs	r3, r3, #6
 8004646:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <ADC_Enable+0x108>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800465a:	e002      	b.n	8004662 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	3b01      	subs	r3, #1
 8004660:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f9      	bne.n	800465c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004668:	f7fe ffd2 	bl	8003610 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800466e:	e028      	b.n	80046c2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff f989 	bl	800398c <LL_ADC_IsEnabled>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff f959 	bl	800393c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800468a:	f7fe ffc1 	bl	8003610 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d914      	bls.n	80046c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d00d      	beq.n	80046c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	f043 0210 	orr.w	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	f043 0201 	orr.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e007      	b.n	80046d2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d1cf      	bne.n	8004670 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	8000003f 	.word	0x8000003f
 80046e0:	50040300 	.word	0x50040300
 80046e4:	20000168 	.word	0x20000168
 80046e8:	053e2d63 	.word	0x053e2d63

080046ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff f95a 	bl	80039b2 <LL_ADC_IsDisableOngoing>
 80046fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff f941 	bl	800398c <LL_ADC_IsEnabled>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d047      	beq.n	80047a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d144      	bne.n	80047a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 030d 	and.w	r3, r3, #13
 8004720:	2b01      	cmp	r3, #1
 8004722:	d10c      	bne.n	800473e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff f91b 	bl	8003964 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2203      	movs	r2, #3
 8004734:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004736:	f7fe ff6b 	bl	8003610 <HAL_GetTick>
 800473a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800473c:	e029      	b.n	8004792 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	f043 0210 	orr.w	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	f043 0201 	orr.w	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e023      	b.n	80047a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800475a:	f7fe ff59 	bl	8003610 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d914      	bls.n	8004792 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f043 0210 	orr.w	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	f043 0201 	orr.w	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e007      	b.n	80047a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1dc      	bne.n	800475a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d14b      	bne.n	800485c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d021      	beq.n	8004822 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe ffcd 	bl	8003782 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d032      	beq.n	8004854 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d12b      	bne.n	8004854 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004800:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11f      	bne.n	8004854 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f043 0201 	orr.w	r2, r3, #1
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	655a      	str	r2, [r3, #84]	; 0x54
 8004820:	e018      	b.n	8004854 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d111      	bne.n	8004854 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fac5 	bl	8003de4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800485a:	e00e      	b.n	800487a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff facf 	bl	8003e0c <HAL_ADC_ErrorCallback>
}
 800486e:	e004      	b.n	800487a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	4798      	blx	r3
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff fab1 	bl	8003df8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	f043 0204 	orr.w	r2, r3, #4
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff faa1 	bl	8003e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048ca:	bf00      	nop
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <LL_ADC_StartCalibration>:
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80048e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_ADC_IsCalibrationOnGoing>:
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004918:	d101      	bne.n	800491e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_ADCEx_Calibration_Start+0x1c>
 8004944:	2302      	movs	r3, #2
 8004946:	e04d      	b.n	80049e4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fecb 	bl	80046ec <ADC_Disable>
 8004956:	4603      	mov	r3, r0
 8004958:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d136      	bne.n	80049ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004968:	f023 0302 	bic.w	r3, r3, #2
 800496c:	f043 0202 	orr.w	r2, r3, #2
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6839      	ldr	r1, [r7, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff ffa9 	bl	80048d2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004980:	e014      	b.n	80049ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	3301      	adds	r3, #1
 8004986:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800498e:	d30d      	bcc.n	80049ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004994:	f023 0312 	bic.w	r3, r3, #18
 8004998:	f043 0210 	orr.w	r2, r3, #16
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e01b      	b.n	80049e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff ffa7 	bl	8004904 <LL_ADC_IsCalibrationOnGoing>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e2      	bne.n	8004982 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	f043 0201 	orr.w	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
 80049cc:	e005      	b.n	80049da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f043 0210 	orr.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0ed      	b.n	8004bda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fd fffa 	bl	8002a04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a20:	f7fe fdf6 	bl	8003610 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a26:	e012      	b.n	8004a4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a28:	f7fe fdf2 	bl	8003610 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b0a      	cmp	r3, #10
 8004a34:	d90b      	bls.n	8004a4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2205      	movs	r2, #5
 8004a46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0c5      	b.n	8004bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0e5      	beq.n	8004a28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0202 	bic.w	r2, r2, #2
 8004a6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a6c:	f7fe fdd0 	bl	8003610 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a72:	e012      	b.n	8004a9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a74:	f7fe fdcc 	bl	8003610 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b0a      	cmp	r3, #10
 8004a80:	d90b      	bls.n	8004a9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2205      	movs	r2, #5
 8004a92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e09f      	b.n	8004bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e5      	bne.n	8004a74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7e1b      	ldrb	r3, [r3, #24]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d108      	bne.n	8004ac2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e007      	b.n	8004ad2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	7e5b      	ldrb	r3, [r3, #25]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d108      	bne.n	8004aec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e007      	b.n	8004afc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	7e9b      	ldrb	r3, [r3, #26]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d108      	bne.n	8004b16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0220 	orr.w	r2, r2, #32
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e007      	b.n	8004b26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0220 	bic.w	r2, r2, #32
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	7edb      	ldrb	r3, [r3, #27]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d108      	bne.n	8004b40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0210 	bic.w	r2, r2, #16
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e007      	b.n	8004b50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0210 	orr.w	r2, r2, #16
 8004b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	7f1b      	ldrb	r3, [r3, #28]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d108      	bne.n	8004b6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0208 	orr.w	r2, r2, #8
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e007      	b.n	8004b7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0208 	bic.w	r2, r2, #8
 8004b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7f5b      	ldrb	r3, [r3, #29]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d108      	bne.n	8004b94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0204 	orr.w	r2, r2, #4
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e007      	b.n	8004ba4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0204 	bic.w	r2, r2, #4
 8004ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	ea42 0103 	orr.w	r1, r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	1e5a      	subs	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b087      	sub	sp, #28
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d003      	beq.n	8004c08 <HAL_CAN_ConfigFilter+0x26>
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	f040 80aa 	bne.w	8004d5c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c0e:	f043 0201 	orr.w	r2, r3, #1
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2201      	movs	r2, #1
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	401a      	ands	r2, r3
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d123      	bne.n	8004c8a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	401a      	ands	r2, r3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	3248      	adds	r2, #72	; 0x48
 8004c6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c80:	6979      	ldr	r1, [r7, #20]
 8004c82:	3348      	adds	r3, #72	; 0x48
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	440b      	add	r3, r1
 8004c88:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d122      	bne.n	8004cd8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004cb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	3248      	adds	r2, #72	; 0x48
 8004cb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ccc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cce:	6979      	ldr	r1, [r7, #20]
 8004cd0:	3348      	adds	r3, #72	; 0x48
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	440b      	add	r3, r1
 8004cd6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	401a      	ands	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004cf2:	e007      	b.n	8004d04 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	401a      	ands	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004d1e:	e007      	b.n	8004d30 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d4e:	f023 0201 	bic.w	r2, r3, #1
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e006      	b.n	8004d6a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d12e      	bne.n	8004de8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0201 	bic.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004da2:	f7fe fc35 	bl	8003610 <HAL_GetTick>
 8004da6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004da8:	e012      	b.n	8004dd0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004daa:	f7fe fc31 	bl	8003610 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b0a      	cmp	r3, #10
 8004db6:	d90b      	bls.n	8004dd0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2205      	movs	r2, #5
 8004dc8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e012      	b.n	8004df6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e5      	bne.n	8004daa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e006      	b.n	8004df6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b089      	sub	sp, #36	; 0x24
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e12:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e1c:	7ffb      	ldrb	r3, [r7, #31]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d003      	beq.n	8004e2a <HAL_CAN_AddTxMessage+0x2c>
 8004e22:	7ffb      	ldrb	r3, [r7, #31]
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	f040 80ad 	bne.w	8004f84 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8095 	beq.w	8004f74 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	0e1b      	lsrs	r3, r3, #24
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e54:	2201      	movs	r2, #1
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	6809      	ldr	r1, [r1, #0]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	3318      	adds	r3, #24
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	440b      	add	r3, r1
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e00f      	b.n	8004ea2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004e96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	440b      	add	r3, r1
 8004ea0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	3318      	adds	r3, #24
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	7d1b      	ldrb	r3, [r3, #20]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d111      	bne.n	8004ee2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	3318      	adds	r3, #24
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	4413      	add	r3, r2
 8004eca:	3304      	adds	r3, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	6811      	ldr	r1, [r2, #0]
 8004ed2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	3318      	adds	r3, #24
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	440b      	add	r3, r1
 8004ede:	3304      	adds	r3, #4
 8004ee0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3307      	adds	r3, #7
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	061a      	lsls	r2, r3, #24
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3306      	adds	r3, #6
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3305      	adds	r3, #5
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	4313      	orrs	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	3204      	adds	r2, #4
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	4610      	mov	r0, r2
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	6811      	ldr	r1, [r2, #0]
 8004f0a:	ea43 0200 	orr.w	r2, r3, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	440b      	add	r3, r1
 8004f14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004f18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3303      	adds	r3, #3
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	061a      	lsls	r2, r3, #24
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3302      	adds	r3, #2
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	041b      	lsls	r3, r3, #16
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	4313      	orrs	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	7812      	ldrb	r2, [r2, #0]
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	6811      	ldr	r1, [r2, #0]
 8004f40:	ea43 0200 	orr.w	r2, r3, r0
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	440b      	add	r3, r1
 8004f4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	3318      	adds	r3, #24
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	4413      	add	r3, r2
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	6811      	ldr	r1, [r2, #0]
 8004f62:	f043 0201 	orr.w	r2, r3, #1
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3318      	adds	r3, #24
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	440b      	add	r3, r1
 8004f6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e00e      	b.n	8004f92 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e006      	b.n	8004f92 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	; 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b087      	sub	sp, #28
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fb2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d003      	beq.n	8004fc2 <HAL_CAN_GetRxMessage+0x24>
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	f040 80f3 	bne.w	80051a8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10e      	bne.n	8004fe6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d116      	bne.n	8005004 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0e7      	b.n	80051b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0d8      	b.n	80051b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	331b      	adds	r3, #27
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	4413      	add	r3, r2
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0204 	and.w	r2, r3, #4
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10c      	bne.n	800503c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	331b      	adds	r3, #27
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	4413      	add	r3, r2
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	0d5b      	lsrs	r3, r3, #21
 8005032:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e00b      	b.n	8005054 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	331b      	adds	r3, #27
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	4413      	add	r3, r2
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	08db      	lsrs	r3, r3, #3
 800504c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	331b      	adds	r3, #27
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4413      	add	r3, r2
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0202 	and.w	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	331b      	adds	r3, #27
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	4413      	add	r3, r2
 8005076:	3304      	adds	r3, #4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 020f 	and.w	r2, r3, #15
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	331b      	adds	r3, #27
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	4413      	add	r3, r2
 800508e:	3304      	adds	r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	0a1b      	lsrs	r3, r3, #8
 8005094:	b2da      	uxtb	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	331b      	adds	r3, #27
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	4413      	add	r3, r2
 80050a6:	3304      	adds	r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	0a1a      	lsrs	r2, r3, #8
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	3301      	adds	r3, #1
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	0c1a      	lsrs	r2, r3, #16
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	3302      	adds	r3, #2
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	4413      	add	r3, r2
 8005106:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0e1a      	lsrs	r2, r3, #24
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	3303      	adds	r3, #3
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	4413      	add	r3, r2
 8005120:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	3304      	adds	r3, #4
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	4413      	add	r3, r2
 8005138:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	0a1a      	lsrs	r2, r3, #8
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	3305      	adds	r3, #5
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	4413      	add	r3, r2
 8005152:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	0c1a      	lsrs	r2, r3, #16
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	3306      	adds	r3, #6
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	4413      	add	r3, r2
 800516c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	0e1a      	lsrs	r2, r3, #24
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	3307      	adds	r3, #7
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d108      	bne.n	8005194 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0220 	orr.w	r2, r2, #32
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e007      	b.n	80051a4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0220 	orr.w	r2, r2, #32
 80051a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e006      	b.n	80051b6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d002      	beq.n	80051e0 <HAL_CAN_ActivateNotification+0x1e>
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d109      	bne.n	80051f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6959      	ldr	r1, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e006      	b.n	8005202 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b08a      	sub	sp, #40	; 0x28
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d07c      	beq.n	800534e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d023      	beq.n	80052a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2201      	movs	r2, #1
 8005264:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f983 	bl	800557c <HAL_CAN_TxMailbox0CompleteCallback>
 8005276:	e016      	b.n	80052a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
 800528a:	e00c      	b.n	80052a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
 800529e:	e002      	b.n	80052a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f989 	bl	80055b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d024      	beq.n	80052fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f963 	bl	8005590 <HAL_CAN_TxMailbox1CompleteCallback>
 80052ca:	e016      	b.n	80052fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	e00c      	b.n	80052fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
 80052f2:	e002      	b.n	80052fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f969 	bl	80055cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d024      	beq.n	800534e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800530c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f943 	bl	80055a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800531e:	e016      	b.n	800534e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
 8005332:	e00c      	b.n	800534e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005344:	627b      	str	r3, [r7, #36]	; 0x24
 8005346:	e002      	b.n	800534e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f949 	bl	80055e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005368:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2210      	movs	r2, #16
 8005370:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2208      	movs	r2, #8
 800538c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f930 	bl	80055f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0303 	and.w	r3, r3, #3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fb fe37 	bl	8001020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00c      	beq.n	80053d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2210      	movs	r2, #16
 80053d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d006      	beq.n	80053f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2208      	movs	r2, #8
 80053f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f912 	bl	800561c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0303 	and.w	r3, r3, #3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f8f9 	bl	8005608 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	d006      	beq.n	8005438 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2210      	movs	r2, #16
 8005430:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8fc 	bl	8005630 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d006      	beq.n	800545a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2208      	movs	r2, #8
 8005452:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f8f5 	bl	8005644 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d07b      	beq.n	800555c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d072      	beq.n	8005554 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	f043 0302 	orr.w	r3, r3, #2
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	f043 0304 	orr.w	r3, r3, #4
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d043      	beq.n	8005554 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d03e      	beq.n	8005554 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054dc:	2b60      	cmp	r3, #96	; 0x60
 80054de:	d02b      	beq.n	8005538 <HAL_CAN_IRQHandler+0x32a>
 80054e0:	2b60      	cmp	r3, #96	; 0x60
 80054e2:	d82e      	bhi.n	8005542 <HAL_CAN_IRQHandler+0x334>
 80054e4:	2b50      	cmp	r3, #80	; 0x50
 80054e6:	d022      	beq.n	800552e <HAL_CAN_IRQHandler+0x320>
 80054e8:	2b50      	cmp	r3, #80	; 0x50
 80054ea:	d82a      	bhi.n	8005542 <HAL_CAN_IRQHandler+0x334>
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d019      	beq.n	8005524 <HAL_CAN_IRQHandler+0x316>
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d826      	bhi.n	8005542 <HAL_CAN_IRQHandler+0x334>
 80054f4:	2b30      	cmp	r3, #48	; 0x30
 80054f6:	d010      	beq.n	800551a <HAL_CAN_IRQHandler+0x30c>
 80054f8:	2b30      	cmp	r3, #48	; 0x30
 80054fa:	d822      	bhi.n	8005542 <HAL_CAN_IRQHandler+0x334>
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d002      	beq.n	8005506 <HAL_CAN_IRQHandler+0x2f8>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d005      	beq.n	8005510 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005504:	e01d      	b.n	8005542 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	f043 0308 	orr.w	r3, r3, #8
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800550e:	e019      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	f043 0310 	orr.w	r3, r3, #16
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005518:	e014      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	f043 0320 	orr.w	r3, r3, #32
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005522:	e00f      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800552c:	e00a      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005536:	e005      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005540:	e000      	b.n	8005544 <HAL_CAN_IRQHandler+0x336>
            break;
 8005542:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005552:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2204      	movs	r2, #4
 800555a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fb fda2 	bl	80010b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005574:	bf00      	nop
 8005576:	3728      	adds	r7, #40	; 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005668:	4b0c      	ldr	r3, [pc, #48]	; (800569c <__NVIC_SetPriorityGrouping+0x44>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005674:	4013      	ands	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800568a:	4a04      	ldr	r2, [pc, #16]	; (800569c <__NVIC_SetPriorityGrouping+0x44>)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	60d3      	str	r3, [r2, #12]
}
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	e000ed00 	.word	0xe000ed00

080056a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <__NVIC_GetPriorityGrouping+0x18>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	0a1b      	lsrs	r3, r3, #8
 80056aa:	f003 0307 	and.w	r3, r3, #7
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	e000ed00 	.word	0xe000ed00

080056bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	db0b      	blt.n	80056e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	f003 021f 	and.w	r2, r3, #31
 80056d4:	4907      	ldr	r1, [pc, #28]	; (80056f4 <__NVIC_EnableIRQ+0x38>)
 80056d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	2001      	movs	r0, #1
 80056de:	fa00 f202 	lsl.w	r2, r0, r2
 80056e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	e000e100 	.word	0xe000e100

080056f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005706:	2b00      	cmp	r3, #0
 8005708:	db12      	blt.n	8005730 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	f003 021f 	and.w	r2, r3, #31
 8005710:	490a      	ldr	r1, [pc, #40]	; (800573c <__NVIC_DisableIRQ+0x44>)
 8005712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	2001      	movs	r0, #1
 800571a:	fa00 f202 	lsl.w	r2, r0, r2
 800571e:	3320      	adds	r3, #32
 8005720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005724:	f3bf 8f4f 	dsb	sy
}
 8005728:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800572a:	f3bf 8f6f 	isb	sy
}
 800572e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	e000e100 	.word	0xe000e100

08005740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	6039      	str	r1, [r7, #0]
 800574a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800574c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005750:	2b00      	cmp	r3, #0
 8005752:	db0a      	blt.n	800576a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	490c      	ldr	r1, [pc, #48]	; (800578c <__NVIC_SetPriority+0x4c>)
 800575a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575e:	0112      	lsls	r2, r2, #4
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	440b      	add	r3, r1
 8005764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005768:	e00a      	b.n	8005780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	4908      	ldr	r1, [pc, #32]	; (8005790 <__NVIC_SetPriority+0x50>)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	3b04      	subs	r3, #4
 8005778:	0112      	lsls	r2, r2, #4
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	440b      	add	r3, r1
 800577e:	761a      	strb	r2, [r3, #24]
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	e000e100 	.word	0xe000e100
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005794:	b480      	push	{r7}
 8005796:	b089      	sub	sp, #36	; 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f1c3 0307 	rsb	r3, r3, #7
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	bf28      	it	cs
 80057b2:	2304      	movcs	r3, #4
 80057b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d902      	bls.n	80057c4 <NVIC_EncodePriority+0x30>
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3b03      	subs	r3, #3
 80057c2:	e000      	b.n	80057c6 <NVIC_EncodePriority+0x32>
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	43da      	mvns	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	401a      	ands	r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057dc:	f04f 31ff 	mov.w	r1, #4294967295
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	fa01 f303 	lsl.w	r3, r1, r3
 80057e6:	43d9      	mvns	r1, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ec:	4313      	orrs	r3, r2
         );
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3724      	adds	r7, #36	; 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3b01      	subs	r3, #1
 8005808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800580c:	d301      	bcc.n	8005812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800580e:	2301      	movs	r3, #1
 8005810:	e00f      	b.n	8005832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005812:	4a0a      	ldr	r2, [pc, #40]	; (800583c <SysTick_Config+0x40>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3b01      	subs	r3, #1
 8005818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800581a:	210f      	movs	r1, #15
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	f7ff ff8e 	bl	8005740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <SysTick_Config+0x40>)
 8005826:	2200      	movs	r2, #0
 8005828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800582a:	4b04      	ldr	r3, [pc, #16]	; (800583c <SysTick_Config+0x40>)
 800582c:	2207      	movs	r2, #7
 800582e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	e000e010 	.word	0xe000e010

08005840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ff05 	bl	8005658 <__NVIC_SetPriorityGrouping>
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b086      	sub	sp, #24
 800585a:	af00      	add	r7, sp, #0
 800585c:	4603      	mov	r3, r0
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005868:	f7ff ff1a 	bl	80056a0 <__NVIC_GetPriorityGrouping>
 800586c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f7ff ff8e 	bl	8005794 <NVIC_EncodePriority>
 8005878:	4602      	mov	r2, r0
 800587a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff ff5d 	bl	8005740 <__NVIC_SetPriority>
}
 8005886:	bf00      	nop
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	4603      	mov	r3, r0
 8005896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff ff0d 	bl	80056bc <__NVIC_EnableIRQ>
}
 80058a2:	bf00      	nop
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	4603      	mov	r3, r0
 80058b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80058b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff ff1d 	bl	80056f8 <__NVIC_DisableIRQ>
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff ff94 	bl	80057fc <SysTick_Config>
 80058d4:	4603      	mov	r3, r0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e098      	b.n	8005a24 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b4d      	ldr	r3, [pc, #308]	; (8005a30 <HAL_DMA_Init+0x150>)
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d80f      	bhi.n	800591e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	4b4b      	ldr	r3, [pc, #300]	; (8005a34 <HAL_DMA_Init+0x154>)
 8005906:	4413      	add	r3, r2
 8005908:	4a4b      	ldr	r2, [pc, #300]	; (8005a38 <HAL_DMA_Init+0x158>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	009a      	lsls	r2, r3, #2
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a48      	ldr	r2, [pc, #288]	; (8005a3c <HAL_DMA_Init+0x15c>)
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
 800591c:	e00e      	b.n	800593c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	4b46      	ldr	r3, [pc, #280]	; (8005a40 <HAL_DMA_Init+0x160>)
 8005926:	4413      	add	r3, r2
 8005928:	4a43      	ldr	r2, [pc, #268]	; (8005a38 <HAL_DMA_Init+0x158>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	009a      	lsls	r2, r3, #2
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a42      	ldr	r2, [pc, #264]	; (8005a44 <HAL_DMA_Init+0x164>)
 800593a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800596c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005996:	d039      	beq.n	8005a0c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <HAL_DMA_Init+0x15c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d11a      	bne.n	80059d8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80059a2:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <HAL_DMA_Init+0x168>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	f003 031c 	and.w	r3, r3, #28
 80059ae:	210f      	movs	r1, #15
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	43db      	mvns	r3, r3
 80059b6:	4924      	ldr	r1, [pc, #144]	; (8005a48 <HAL_DMA_Init+0x168>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059bc:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <HAL_DMA_Init+0x168>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6859      	ldr	r1, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c8:	f003 031c 	and.w	r3, r3, #28
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	491d      	ldr	r1, [pc, #116]	; (8005a48 <HAL_DMA_Init+0x168>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]
 80059d6:	e019      	b.n	8005a0c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80059d8:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <HAL_DMA_Init+0x16c>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e0:	f003 031c 	and.w	r3, r3, #28
 80059e4:	210f      	movs	r1, #15
 80059e6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ea:	43db      	mvns	r3, r3
 80059ec:	4917      	ldr	r1, [pc, #92]	; (8005a4c <HAL_DMA_Init+0x16c>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059f2:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <HAL_DMA_Init+0x16c>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fe:	f003 031c 	and.w	r3, r3, #28
 8005a02:	fa01 f303 	lsl.w	r3, r1, r3
 8005a06:	4911      	ldr	r1, [pc, #68]	; (8005a4c <HAL_DMA_Init+0x16c>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40020407 	.word	0x40020407
 8005a34:	bffdfff8 	.word	0xbffdfff8
 8005a38:	cccccccd 	.word	0xcccccccd
 8005a3c:	40020000 	.word	0x40020000
 8005a40:	bffdfbf8 	.word	0xbffdfbf8
 8005a44:	40020400 	.word	0x40020400
 8005a48:	400200a8 	.word	0x400200a8
 8005a4c:	400204a8 	.word	0x400204a8

08005a50 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e072      	b.n	8005b48 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	4b36      	ldr	r3, [pc, #216]	; (8005b54 <HAL_DMA_DeInit+0x104>)
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d80f      	bhi.n	8005a9e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	4b34      	ldr	r3, [pc, #208]	; (8005b58 <HAL_DMA_DeInit+0x108>)
 8005a86:	4413      	add	r3, r2
 8005a88:	4a34      	ldr	r2, [pc, #208]	; (8005b5c <HAL_DMA_DeInit+0x10c>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	091b      	lsrs	r3, r3, #4
 8005a90:	009a      	lsls	r2, r3, #2
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a31      	ldr	r2, [pc, #196]	; (8005b60 <HAL_DMA_DeInit+0x110>)
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8005a9c:	e00e      	b.n	8005abc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <HAL_DMA_DeInit+0x114>)
 8005aa6:	4413      	add	r3, r2
 8005aa8:	4a2c      	ldr	r2, [pc, #176]	; (8005b5c <HAL_DMA_DeInit+0x10c>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	009a      	lsls	r2, r3, #2
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2b      	ldr	r2, [pc, #172]	; (8005b68 <HAL_DMA_DeInit+0x118>)
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	f003 021c 	and.w	r2, r3, #28
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ad6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	4a20      	ldr	r2, [pc, #128]	; (8005b60 <HAL_DMA_DeInit+0x110>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d10d      	bne.n	8005afe <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ae2:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <HAL_DMA_DeInit+0x11c>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aea:	f003 031c 	and.w	r3, r3, #28
 8005aee:	210f      	movs	r1, #15
 8005af0:	fa01 f303 	lsl.w	r3, r1, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	491d      	ldr	r1, [pc, #116]	; (8005b6c <HAL_DMA_DeInit+0x11c>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	600b      	str	r3, [r1, #0]
 8005afc:	e00c      	b.n	8005b18 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <HAL_DMA_DeInit+0x120>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b06:	f003 031c 	and.w	r3, r3, #28
 8005b0a:	210f      	movs	r1, #15
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	4917      	ldr	r1, [pc, #92]	; (8005b70 <HAL_DMA_DeInit+0x120>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	40020407 	.word	0x40020407
 8005b58:	bffdfff8 	.word	0xbffdfff8
 8005b5c:	cccccccd 	.word	0xcccccccd
 8005b60:	40020000 	.word	0x40020000
 8005b64:	bffdfbf8 	.word	0xbffdfbf8
 8005b68:	40020400 	.word	0x40020400
 8005b6c:	400200a8 	.word	0x400200a8
 8005b70:	400204a8 	.word	0x400204a8

08005b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_DMA_Start_IT+0x20>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e04b      	b.n	8005c2c <HAL_DMA_Start_IT+0xb8>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d13a      	bne.n	8005c1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f95f 	bl	8005e90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 020e 	orr.w	r2, r2, #14
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e00f      	b.n	8005c0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0204 	bic.w	r2, r2, #4
 8005bfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 020a 	orr.w	r2, r2, #10
 8005c0a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e005      	b.n	8005c2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c26:	2302      	movs	r3, #2
 8005c28:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d008      	beq.n	8005c5e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2204      	movs	r2, #4
 8005c50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e022      	b.n	8005ca4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 020e 	bic.w	r2, r2, #14
 8005c6c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0201 	bic.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	f003 021c 	and.w	r2, r3, #28
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c90:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d005      	beq.n	8005cd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	73fb      	strb	r3, [r7, #15]
 8005cd2:	e029      	b.n	8005d28 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 020e 	bic.w	r2, r2, #14
 8005ce2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	f003 021c 	and.w	r2, r3, #28
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	2101      	movs	r1, #1
 8005d02:	fa01 f202 	lsl.w	r2, r1, r2
 8005d06:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	4798      	blx	r3
    }
  }
  return status;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	f003 031c 	and.w	r3, r3, #28
 8005d52:	2204      	movs	r2, #4
 8005d54:	409a      	lsls	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d026      	beq.n	8005dac <HAL_DMA_IRQHandler+0x7a>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d021      	beq.n	8005dac <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d107      	bne.n	8005d86 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0204 	bic.w	r2, r2, #4
 8005d84:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8a:	f003 021c 	and.w	r2, r3, #28
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	2104      	movs	r1, #4
 8005d94:	fa01 f202 	lsl.w	r2, r1, r2
 8005d98:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d071      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005daa:	e06c      	b.n	8005e86 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	f003 031c 	and.w	r3, r3, #28
 8005db4:	2202      	movs	r2, #2
 8005db6:	409a      	lsls	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d02e      	beq.n	8005e1e <HAL_DMA_IRQHandler+0xec>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d029      	beq.n	8005e1e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10b      	bne.n	8005df0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 020a 	bic.w	r2, r2, #10
 8005de6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	f003 021c 	and.w	r2, r3, #28
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	2102      	movs	r1, #2
 8005dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005e02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d038      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e1c:	e033      	b.n	8005e86 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e22:	f003 031c 	and.w	r3, r3, #28
 8005e26:	2208      	movs	r2, #8
 8005e28:	409a      	lsls	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d02a      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x156>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d025      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 020e 	bic.w	r2, r2, #14
 8005e4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e50:	f003 021c 	and.w	r2, r3, #28
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	2101      	movs	r1, #1
 8005e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
}
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	f003 021c 	and.w	r2, r3, #28
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	2101      	movs	r1, #1
 8005eac:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d108      	bne.n	8005ed4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ed2:	e007      	b.n	8005ee4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005efe:	e154      	b.n	80061aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	2101      	movs	r1, #1
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8146 	beq.w	80061a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d005      	beq.n	8005f30 <HAL_GPIO_Init+0x40>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d130      	bne.n	8005f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4013      	ands	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f66:	2201      	movs	r2, #1
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4013      	ands	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 0201 	and.w	r2, r3, #1
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d017      	beq.n	8005fce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	2203      	movs	r2, #3
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d123      	bne.n	8006022 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	08da      	lsrs	r2, r3, #3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3208      	adds	r2, #8
 8005fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	220f      	movs	r2, #15
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	08da      	lsrs	r2, r3, #3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3208      	adds	r2, #8
 800601c:	6939      	ldr	r1, [r7, #16]
 800601e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	2203      	movs	r2, #3
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43db      	mvns	r3, r3
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4013      	ands	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 0203 	and.w	r2, r3, #3
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80a0 	beq.w	80061a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006064:	4b58      	ldr	r3, [pc, #352]	; (80061c8 <HAL_GPIO_Init+0x2d8>)
 8006066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006068:	4a57      	ldr	r2, [pc, #348]	; (80061c8 <HAL_GPIO_Init+0x2d8>)
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	6613      	str	r3, [r2, #96]	; 0x60
 8006070:	4b55      	ldr	r3, [pc, #340]	; (80061c8 <HAL_GPIO_Init+0x2d8>)
 8006072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800607c:	4a53      	ldr	r2, [pc, #332]	; (80061cc <HAL_GPIO_Init+0x2dc>)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	089b      	lsrs	r3, r3, #2
 8006082:	3302      	adds	r3, #2
 8006084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	220f      	movs	r2, #15
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4013      	ands	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80060a6:	d019      	beq.n	80060dc <HAL_GPIO_Init+0x1ec>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a49      	ldr	r2, [pc, #292]	; (80061d0 <HAL_GPIO_Init+0x2e0>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d013      	beq.n	80060d8 <HAL_GPIO_Init+0x1e8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a48      	ldr	r2, [pc, #288]	; (80061d4 <HAL_GPIO_Init+0x2e4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00d      	beq.n	80060d4 <HAL_GPIO_Init+0x1e4>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a47      	ldr	r2, [pc, #284]	; (80061d8 <HAL_GPIO_Init+0x2e8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d007      	beq.n	80060d0 <HAL_GPIO_Init+0x1e0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a46      	ldr	r2, [pc, #280]	; (80061dc <HAL_GPIO_Init+0x2ec>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d101      	bne.n	80060cc <HAL_GPIO_Init+0x1dc>
 80060c8:	2304      	movs	r3, #4
 80060ca:	e008      	b.n	80060de <HAL_GPIO_Init+0x1ee>
 80060cc:	2307      	movs	r3, #7
 80060ce:	e006      	b.n	80060de <HAL_GPIO_Init+0x1ee>
 80060d0:	2303      	movs	r3, #3
 80060d2:	e004      	b.n	80060de <HAL_GPIO_Init+0x1ee>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e002      	b.n	80060de <HAL_GPIO_Init+0x1ee>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <HAL_GPIO_Init+0x1ee>
 80060dc:	2300      	movs	r3, #0
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	f002 0203 	and.w	r2, r2, #3
 80060e4:	0092      	lsls	r2, r2, #2
 80060e6:	4093      	lsls	r3, r2
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060ee:	4937      	ldr	r1, [pc, #220]	; (80061cc <HAL_GPIO_Init+0x2dc>)
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	089b      	lsrs	r3, r3, #2
 80060f4:	3302      	adds	r3, #2
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060fc:	4b38      	ldr	r3, [pc, #224]	; (80061e0 <HAL_GPIO_Init+0x2f0>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	43db      	mvns	r3, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006120:	4a2f      	ldr	r2, [pc, #188]	; (80061e0 <HAL_GPIO_Init+0x2f0>)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006126:	4b2e      	ldr	r3, [pc, #184]	; (80061e0 <HAL_GPIO_Init+0x2f0>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	43db      	mvns	r3, r3
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4013      	ands	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800614a:	4a25      	ldr	r2, [pc, #148]	; (80061e0 <HAL_GPIO_Init+0x2f0>)
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006150:	4b23      	ldr	r3, [pc, #140]	; (80061e0 <HAL_GPIO_Init+0x2f0>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	43db      	mvns	r3, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006174:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <HAL_GPIO_Init+0x2f0>)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800617a:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <HAL_GPIO_Init+0x2f0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	43db      	mvns	r3, r3
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4013      	ands	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800619e:	4a10      	ldr	r2, [pc, #64]	; (80061e0 <HAL_GPIO_Init+0x2f0>)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	3301      	adds	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f47f aea3 	bne.w	8005f00 <HAL_GPIO_Init+0x10>
  }
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40021000 	.word	0x40021000
 80061cc:	40010000 	.word	0x40010000
 80061d0:	48000400 	.word	0x48000400
 80061d4:	48000800 	.word	0x48000800
 80061d8:	48000c00 	.word	0x48000c00
 80061dc:	48001000 	.word	0x48001000
 80061e0:	40010400 	.word	0x40010400

080061e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80061f2:	e0b7      	b.n	8006364 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80061f4:	2201      	movs	r2, #1
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	4013      	ands	r3, r2
 8006200:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 80aa 	beq.w	800635e <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800620a:	4a5d      	ldr	r2, [pc, #372]	; (8006380 <HAL_GPIO_DeInit+0x19c>)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	3302      	adds	r3, #2
 8006212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006216:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	220f      	movs	r2, #15
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4013      	ands	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006232:	d019      	beq.n	8006268 <HAL_GPIO_DeInit+0x84>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a53      	ldr	r2, [pc, #332]	; (8006384 <HAL_GPIO_DeInit+0x1a0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d013      	beq.n	8006264 <HAL_GPIO_DeInit+0x80>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a52      	ldr	r2, [pc, #328]	; (8006388 <HAL_GPIO_DeInit+0x1a4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00d      	beq.n	8006260 <HAL_GPIO_DeInit+0x7c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a51      	ldr	r2, [pc, #324]	; (800638c <HAL_GPIO_DeInit+0x1a8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <HAL_GPIO_DeInit+0x78>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a50      	ldr	r2, [pc, #320]	; (8006390 <HAL_GPIO_DeInit+0x1ac>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d101      	bne.n	8006258 <HAL_GPIO_DeInit+0x74>
 8006254:	2304      	movs	r3, #4
 8006256:	e008      	b.n	800626a <HAL_GPIO_DeInit+0x86>
 8006258:	2307      	movs	r3, #7
 800625a:	e006      	b.n	800626a <HAL_GPIO_DeInit+0x86>
 800625c:	2303      	movs	r3, #3
 800625e:	e004      	b.n	800626a <HAL_GPIO_DeInit+0x86>
 8006260:	2302      	movs	r3, #2
 8006262:	e002      	b.n	800626a <HAL_GPIO_DeInit+0x86>
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_GPIO_DeInit+0x86>
 8006268:	2300      	movs	r3, #0
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	f002 0203 	and.w	r2, r2, #3
 8006270:	0092      	lsls	r2, r2, #2
 8006272:	4093      	lsls	r3, r2
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	429a      	cmp	r2, r3
 8006278:	d132      	bne.n	80062e0 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800627a:	4b46      	ldr	r3, [pc, #280]	; (8006394 <HAL_GPIO_DeInit+0x1b0>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	43db      	mvns	r3, r3
 8006282:	4944      	ldr	r1, [pc, #272]	; (8006394 <HAL_GPIO_DeInit+0x1b0>)
 8006284:	4013      	ands	r3, r2
 8006286:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006288:	4b42      	ldr	r3, [pc, #264]	; (8006394 <HAL_GPIO_DeInit+0x1b0>)
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	43db      	mvns	r3, r3
 8006290:	4940      	ldr	r1, [pc, #256]	; (8006394 <HAL_GPIO_DeInit+0x1b0>)
 8006292:	4013      	ands	r3, r2
 8006294:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006296:	4b3f      	ldr	r3, [pc, #252]	; (8006394 <HAL_GPIO_DeInit+0x1b0>)
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	43db      	mvns	r3, r3
 800629e:	493d      	ldr	r1, [pc, #244]	; (8006394 <HAL_GPIO_DeInit+0x1b0>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80062a4:	4b3b      	ldr	r3, [pc, #236]	; (8006394 <HAL_GPIO_DeInit+0x1b0>)
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	4939      	ldr	r1, [pc, #228]	; (8006394 <HAL_GPIO_DeInit+0x1b0>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	220f      	movs	r2, #15
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80062c2:	4a2f      	ldr	r2, [pc, #188]	; (8006380 <HAL_GPIO_DeInit+0x19c>)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	3302      	adds	r3, #2
 80062ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	43da      	mvns	r2, r3
 80062d2:	482b      	ldr	r0, [pc, #172]	; (8006380 <HAL_GPIO_DeInit+0x19c>)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	089b      	lsrs	r3, r3, #2
 80062d8:	400a      	ands	r2, r1
 80062da:	3302      	adds	r3, #2
 80062dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	2103      	movs	r1, #3
 80062ea:	fa01 f303 	lsl.w	r3, r1, r3
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	08da      	lsrs	r2, r3, #3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3208      	adds	r2, #8
 80062fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	220f      	movs	r2, #15
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	43db      	mvns	r3, r3
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	08d2      	lsrs	r2, r2, #3
 8006314:	4019      	ands	r1, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3208      	adds	r2, #8
 800631a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	2103      	movs	r1, #3
 8006328:	fa01 f303 	lsl.w	r3, r1, r3
 800632c:	43db      	mvns	r3, r3
 800632e:	401a      	ands	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	2101      	movs	r1, #1
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	fa01 f303 	lsl.w	r3, r1, r3
 8006340:	43db      	mvns	r3, r3
 8006342:	401a      	ands	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	2103      	movs	r1, #3
 8006352:	fa01 f303 	lsl.w	r3, r1, r3
 8006356:	43db      	mvns	r3, r3
 8006358:	401a      	ands	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	3301      	adds	r3, #1
 8006362:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	fa22 f303 	lsr.w	r3, r2, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	f47f af41 	bne.w	80061f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8006372:	bf00      	nop
 8006374:	bf00      	nop
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	40010000 	.word	0x40010000
 8006384:	48000400 	.word	0x48000400
 8006388:	48000800 	.word	0x48000800
 800638c:	48000c00 	.word	0x48000c00
 8006390:	48001000 	.word	0x48001000
 8006394:	40010400 	.word	0x40010400

08006398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	887b      	ldrh	r3, [r7, #2]
 80063aa:	4013      	ands	r3, r2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
 80063b4:	e001      	b.n	80063ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063b6:	2300      	movs	r3, #0
 80063b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	807b      	strh	r3, [r7, #2]
 80063d4:	4613      	mov	r3, r2
 80063d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063d8:	787b      	ldrb	r3, [r7, #1]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80063de:	887a      	ldrh	r2, [r7, #2]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80063e4:	e002      	b.n	80063ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80063e6:	887a      	ldrh	r2, [r7, #2]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d006      	beq.n	800641c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800640e:	4a05      	ldr	r2, [pc, #20]	; (8006424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006414:	88fb      	ldrh	r3, [r7, #6]
 8006416:	4618      	mov	r0, r3
 8006418:	f7fb fe52 	bl	80020c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40010400 	.word	0x40010400

08006428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e081      	b.n	800653e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fc fb2c 	bl	8002aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	; 0x24
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006478:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006488:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d107      	bne.n	80064a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800649e:	609a      	str	r2, [r3, #8]
 80064a0:	e006      	b.n	80064b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d104      	bne.n	80064c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69d9      	ldr	r1, [r3, #28]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1a      	ldr	r2, [r3, #32]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af02      	add	r7, sp, #8
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	461a      	mov	r2, r3
 8006556:	4603      	mov	r3, r0
 8006558:	817b      	strh	r3, [r7, #10]
 800655a:	460b      	mov	r3, r1
 800655c:	813b      	strh	r3, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b20      	cmp	r3, #32
 800656c:	f040 80f9 	bne.w	8006762 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <HAL_I2C_Mem_Write+0x34>
 8006576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006582:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e0ed      	b.n	8006764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_I2C_Mem_Write+0x4e>
 8006592:	2302      	movs	r3, #2
 8006594:	e0e6      	b.n	8006764 <HAL_I2C_Mem_Write+0x21c>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800659e:	f7fd f837 	bl	8003610 <HAL_GetTick>
 80065a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	2319      	movs	r3, #25
 80065aa:	2201      	movs	r2, #1
 80065ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f955 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e0d1      	b.n	8006764 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2221      	movs	r2, #33	; 0x21
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2240      	movs	r2, #64	; 0x40
 80065cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065e8:	88f8      	ldrh	r0, [r7, #6]
 80065ea:	893a      	ldrh	r2, [r7, #8]
 80065ec:	8979      	ldrh	r1, [r7, #10]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	4603      	mov	r3, r0
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f8b9 	bl	8006770 <I2C_RequestMemoryWrite>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e0a9      	b.n	8006764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006614:	b29b      	uxth	r3, r3
 8006616:	2bff      	cmp	r3, #255	; 0xff
 8006618:	d90e      	bls.n	8006638 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	22ff      	movs	r2, #255	; 0xff
 800661e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006624:	b2da      	uxtb	r2, r3
 8006626:	8979      	ldrh	r1, [r7, #10]
 8006628:	2300      	movs	r3, #0
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fabd 	bl	8006bb0 <I2C_TransferConfig>
 8006636:	e00f      	b.n	8006658 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006646:	b2da      	uxtb	r2, r3
 8006648:	8979      	ldrh	r1, [r7, #10]
 800664a:	2300      	movs	r3, #0
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 faac 	bl	8006bb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f93f 	bl	80068e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e07b      	b.n	8006764 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	781a      	ldrb	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d034      	beq.n	8006710 <HAL_I2C_Mem_Write+0x1c8>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d130      	bne.n	8006710 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	2200      	movs	r2, #0
 80066b6:	2180      	movs	r1, #128	; 0x80
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f8d1 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e04d      	b.n	8006764 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2bff      	cmp	r3, #255	; 0xff
 80066d0:	d90e      	bls.n	80066f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	22ff      	movs	r2, #255	; 0xff
 80066d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	8979      	ldrh	r1, [r7, #10]
 80066e0:	2300      	movs	r3, #0
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fa61 	bl	8006bb0 <I2C_TransferConfig>
 80066ee:	e00f      	b.n	8006710 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	8979      	ldrh	r1, [r7, #10]
 8006702:	2300      	movs	r3, #0
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 fa50 	bl	8006bb0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d19e      	bne.n	8006658 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f91e 	bl	8006960 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e01a      	b.n	8006764 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2220      	movs	r2, #32
 8006734:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6859      	ldr	r1, [r3, #4]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <HAL_I2C_Mem_Write+0x224>)
 8006742:	400b      	ands	r3, r1
 8006744:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e000      	b.n	8006764 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006762:	2302      	movs	r3, #2
  }
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	fe00e800 	.word	0xfe00e800

08006770 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	4608      	mov	r0, r1
 800677a:	4611      	mov	r1, r2
 800677c:	461a      	mov	r2, r3
 800677e:	4603      	mov	r3, r0
 8006780:	817b      	strh	r3, [r7, #10]
 8006782:	460b      	mov	r3, r1
 8006784:	813b      	strh	r3, [r7, #8]
 8006786:	4613      	mov	r3, r2
 8006788:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800678a:	88fb      	ldrh	r3, [r7, #6]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	8979      	ldrh	r1, [r7, #10]
 8006790:	4b20      	ldr	r3, [pc, #128]	; (8006814 <I2C_RequestMemoryWrite+0xa4>)
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fa09 	bl	8006bb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f89c 	bl	80068e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e02c      	b.n	800680c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d105      	bne.n	80067c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067b8:	893b      	ldrh	r3, [r7, #8]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28
 80067c2:	e015      	b.n	80067f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80067c4:	893b      	ldrh	r3, [r7, #8]
 80067c6:	0a1b      	lsrs	r3, r3, #8
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	69b9      	ldr	r1, [r7, #24]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 f882 	bl	80068e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e012      	b.n	800680c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067e6:	893b      	ldrh	r3, [r7, #8]
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2200      	movs	r2, #0
 80067f8:	2180      	movs	r1, #128	; 0x80
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 f830 	bl	8006860 <I2C_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	80002000 	.word	0x80002000

08006818 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d103      	bne.n	8006836 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2200      	movs	r2, #0
 8006834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b01      	cmp	r3, #1
 8006842:	d007      	beq.n	8006854 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	619a      	str	r2, [r3, #24]
  }
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006870:	e022      	b.n	80068b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006878:	d01e      	beq.n	80068b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800687a:	f7fc fec9 	bl	8003610 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d302      	bcc.n	8006890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d113      	bne.n	80068b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e00f      	b.n	80068d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4013      	ands	r3, r2
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	bf0c      	ite	eq
 80068c8:	2301      	moveq	r3, #1
 80068ca:	2300      	movne	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d0cd      	beq.n	8006872 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068ec:	e02c      	b.n	8006948 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 f870 	bl	80069d8 <I2C_IsErrorOccurred>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e02a      	b.n	8006958 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006908:	d01e      	beq.n	8006948 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690a:	f7fc fe81 	bl	8003610 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d113      	bne.n	8006948 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006924:	f043 0220 	orr.w	r2, r3, #32
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e007      	b.n	8006958 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	d1cb      	bne.n	80068ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800696c:	e028      	b.n	80069c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f830 	bl	80069d8 <I2C_IsErrorOccurred>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e026      	b.n	80069d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006982:	f7fc fe45 	bl	8003610 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d302      	bcc.n	8006998 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d113      	bne.n	80069c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699c:	f043 0220 	orr.w	r2, r3, #32
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e007      	b.n	80069d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d1cf      	bne.n	800696e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08a      	sub	sp, #40	; 0x28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d075      	beq.n	8006af0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2210      	movs	r2, #16
 8006a0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a0c:	e056      	b.n	8006abc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d052      	beq.n	8006abc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a16:	f7fc fdfb 	bl	8003610 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d302      	bcc.n	8006a2c <I2C_IsErrorOccurred+0x54>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d147      	bne.n	8006abc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4e:	d12e      	bne.n	8006aae <I2C_IsErrorOccurred+0xd6>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a56:	d02a      	beq.n	8006aae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006a58:	7cfb      	ldrb	r3, [r7, #19]
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d027      	beq.n	8006aae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a6e:	f7fc fdcf 	bl	8003610 <HAL_GetTick>
 8006a72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a74:	e01b      	b.n	8006aae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a76:	f7fc fdcb 	bl	8003610 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b19      	cmp	r3, #25
 8006a82:	d914      	bls.n	8006aae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a88:	f043 0220 	orr.w	r2, r3, #32
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d1dc      	bne.n	8006a76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d003      	beq.n	8006ad2 <I2C_IsErrorOccurred+0xfa>
 8006aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d09d      	beq.n	8006a0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	f043 0304 	orr.w	r3, r3, #4
 8006ae8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00b      	beq.n	8006b1a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	f043 0308 	orr.w	r3, r3, #8
 8006b2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f043 0302 	orr.w	r3, r3, #2
 8006b4c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01c      	beq.n	8006ba0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fe56 	bl	8006818 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6859      	ldr	r1, [r3, #4]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <I2C_IsErrorOccurred+0x1d4>)
 8006b78:	400b      	ands	r3, r1
 8006b7a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3728      	adds	r7, #40	; 0x28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	fe00e800 	.word	0xfe00e800

08006bb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	817b      	strh	r3, [r7, #10]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bc2:	897b      	ldrh	r3, [r7, #10]
 8006bc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bc8:	7a7b      	ldrb	r3, [r7, #9]
 8006bca:	041b      	lsls	r3, r3, #16
 8006bcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	0d5b      	lsrs	r3, r3, #21
 8006bea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006bee:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <I2C_TransferConfig+0x60>)
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	ea02 0103 	and.w	r1, r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	03ff63ff 	.word	0x03ff63ff

08006c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d138      	bne.n	8006c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e032      	b.n	8006c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2224      	movs	r2, #36	; 0x24
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6819      	ldr	r1, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e000      	b.n	8006c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d139      	bne.n	8006d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e033      	b.n	8006d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2224      	movs	r2, #36	; 0x24
 8006cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	e000      	b.n	8006d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
  }
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e041      	b.n	8006dd8 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006d5c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f245 5255 	movw	r2, #21845	; 0x5555
 8006d66:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6852      	ldr	r2, [r2, #4]
 8006d70:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	6892      	ldr	r2, [r2, #8]
 8006d7a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006d7c:	f7fc fc48 	bl	8003610 <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d82:	e00f      	b.n	8006da4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006d84:	f7fc fc44 	bl	8003610 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b31      	cmp	r3, #49	; 0x31
 8006d90:	d908      	bls.n	8006da4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e019      	b.n	8006dd8 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e8      	bne.n	8006d84 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d005      	beq.n	8006dcc <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	68d2      	ldr	r2, [r2, #12]
 8006dc8:	611a      	str	r2, [r3, #16]
 8006dca:	e004      	b.n	8006dd6 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006df0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <HAL_PWREx_GetVoltageRange+0x18>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40007000 	.word	0x40007000

08006e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e2a:	d130      	bne.n	8006e8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e2c:	4b23      	ldr	r3, [pc, #140]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e38:	d038      	beq.n	8006eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e3a:	4b20      	ldr	r3, [pc, #128]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e42:	4a1e      	ldr	r2, [pc, #120]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2232      	movs	r2, #50	; 0x32
 8006e50:	fb02 f303 	mul.w	r3, r2, r3
 8006e54:	4a1b      	ldr	r2, [pc, #108]	; (8006ec4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	0c9b      	lsrs	r3, r3, #18
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e60:	e002      	b.n	8006e68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e68:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e74:	d102      	bne.n	8006e7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1f2      	bne.n	8006e62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e7c:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e88:	d110      	bne.n	8006eac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e00f      	b.n	8006eae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9a:	d007      	beq.n	8006eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e9c:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ea4:	4a05      	ldr	r2, [pc, #20]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006eaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40007000 	.word	0x40007000
 8006ec0:	20000168 	.word	0x20000168
 8006ec4:	431bde83 	.word	0x431bde83

08006ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d102      	bne.n	8006edc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f000 bc02 	b.w	80076e0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006edc:	4b96      	ldr	r3, [pc, #600]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 030c 	and.w	r3, r3, #12
 8006ee4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ee6:	4b94      	ldr	r3, [pc, #592]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80e4 	beq.w	80070c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d007      	beq.n	8006f14 <HAL_RCC_OscConfig+0x4c>
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	2b0c      	cmp	r3, #12
 8006f08:	f040 808b 	bne.w	8007022 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	f040 8087 	bne.w	8007022 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f14:	4b88      	ldr	r3, [pc, #544]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <HAL_RCC_OscConfig+0x64>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e3d9      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1a      	ldr	r2, [r3, #32]
 8006f30:	4b81      	ldr	r3, [pc, #516]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <HAL_RCC_OscConfig+0x7e>
 8006f3c:	4b7e      	ldr	r3, [pc, #504]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f44:	e005      	b.n	8006f52 <HAL_RCC_OscConfig+0x8a>
 8006f46:	4b7c      	ldr	r3, [pc, #496]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f4c:	091b      	lsrs	r3, r3, #4
 8006f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d223      	bcs.n	8006f9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fd8a 	bl	8007a74 <RCC_SetFlashLatencyFromMSIRange>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e3ba      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f6a:	4b73      	ldr	r3, [pc, #460]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a72      	ldr	r2, [pc, #456]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f70:	f043 0308 	orr.w	r3, r3, #8
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	4b70      	ldr	r3, [pc, #448]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	496d      	ldr	r1, [pc, #436]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f88:	4b6b      	ldr	r3, [pc, #428]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	4968      	ldr	r1, [pc, #416]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	604b      	str	r3, [r1, #4]
 8006f9c:	e025      	b.n	8006fea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f9e:	4b66      	ldr	r3, [pc, #408]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a65      	ldr	r2, [pc, #404]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006fa4:	f043 0308 	orr.w	r3, r3, #8
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	4b63      	ldr	r3, [pc, #396]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	4960      	ldr	r1, [pc, #384]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fbc:	4b5e      	ldr	r3, [pc, #376]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	495b      	ldr	r1, [pc, #364]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d109      	bne.n	8006fea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fd4a 	bl	8007a74 <RCC_SetFlashLatencyFromMSIRange>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e37a      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fea:	f000 fc81 	bl	80078f0 <HAL_RCC_GetSysClockFreq>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	4b51      	ldr	r3, [pc, #324]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	091b      	lsrs	r3, r3, #4
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	4950      	ldr	r1, [pc, #320]	; (800713c <HAL_RCC_OscConfig+0x274>)
 8006ffc:	5ccb      	ldrb	r3, [r1, r3]
 8006ffe:	f003 031f 	and.w	r3, r3, #31
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	4a4e      	ldr	r2, [pc, #312]	; (8007140 <HAL_RCC_OscConfig+0x278>)
 8007008:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800700a:	4b4e      	ldr	r3, [pc, #312]	; (8007144 <HAL_RCC_OscConfig+0x27c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f7fc faae 	bl	8003570 <HAL_InitTick>
 8007014:	4603      	mov	r3, r0
 8007016:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d052      	beq.n	80070c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	e35e      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d032      	beq.n	8007090 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800702a:	4b43      	ldr	r3, [pc, #268]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a42      	ldr	r2, [pc, #264]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007030:	f043 0301 	orr.w	r3, r3, #1
 8007034:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007036:	f7fc faeb 	bl	8003610 <HAL_GetTick>
 800703a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800703c:	e008      	b.n	8007050 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800703e:	f7fc fae7 	bl	8003610 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e347      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007050:	4b39      	ldr	r3, [pc, #228]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800705c:	4b36      	ldr	r3, [pc, #216]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a35      	ldr	r2, [pc, #212]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007062:	f043 0308 	orr.w	r3, r3, #8
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	4b33      	ldr	r3, [pc, #204]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	4930      	ldr	r1, [pc, #192]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007076:	4313      	orrs	r3, r2
 8007078:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800707a:	4b2f      	ldr	r3, [pc, #188]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	492b      	ldr	r1, [pc, #172]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800708a:	4313      	orrs	r3, r2
 800708c:	604b      	str	r3, [r1, #4]
 800708e:	e01a      	b.n	80070c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007090:	4b29      	ldr	r3, [pc, #164]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a28      	ldr	r2, [pc, #160]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800709c:	f7fc fab8 	bl	8003610 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070a4:	f7fc fab4 	bl	8003610 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e314      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80070b6:	4b20      	ldr	r3, [pc, #128]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x1dc>
 80070c2:	e000      	b.n	80070c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80070c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d073      	beq.n	80071ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d005      	beq.n	80070e4 <HAL_RCC_OscConfig+0x21c>
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b0c      	cmp	r3, #12
 80070dc:	d10e      	bne.n	80070fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d10b      	bne.n	80070fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e4:	4b14      	ldr	r3, [pc, #80]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d063      	beq.n	80071b8 <HAL_RCC_OscConfig+0x2f0>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d15f      	bne.n	80071b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e2f1      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007104:	d106      	bne.n	8007114 <HAL_RCC_OscConfig+0x24c>
 8007106:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800710c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	e025      	b.n	8007160 <HAL_RCC_OscConfig+0x298>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800711c:	d114      	bne.n	8007148 <HAL_RCC_OscConfig+0x280>
 800711e:	4b06      	ldr	r3, [pc, #24]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a05      	ldr	r2, [pc, #20]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	4b03      	ldr	r3, [pc, #12]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a02      	ldr	r2, [pc, #8]	; (8007138 <HAL_RCC_OscConfig+0x270>)
 8007130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	e013      	b.n	8007160 <HAL_RCC_OscConfig+0x298>
 8007138:	40021000 	.word	0x40021000
 800713c:	0800d740 	.word	0x0800d740
 8007140:	20000168 	.word	0x20000168
 8007144:	20000184 	.word	0x20000184
 8007148:	4ba0      	ldr	r3, [pc, #640]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a9f      	ldr	r2, [pc, #636]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 800714e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	4b9d      	ldr	r3, [pc, #628]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a9c      	ldr	r2, [pc, #624]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 800715a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800715e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d013      	beq.n	8007190 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007168:	f7fc fa52 	bl	8003610 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800716e:	e008      	b.n	8007182 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007170:	f7fc fa4e 	bl	8003610 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b64      	cmp	r3, #100	; 0x64
 800717c:	d901      	bls.n	8007182 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e2ae      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007182:	4b92      	ldr	r3, [pc, #584]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0f0      	beq.n	8007170 <HAL_RCC_OscConfig+0x2a8>
 800718e:	e014      	b.n	80071ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fc fa3e 	bl	8003610 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007198:	f7fc fa3a 	bl	8003610 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	; 0x64
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e29a      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80071aa:	4b88      	ldr	r3, [pc, #544]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <HAL_RCC_OscConfig+0x2d0>
 80071b6:	e000      	b.n	80071ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d060      	beq.n	8007288 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d005      	beq.n	80071d8 <HAL_RCC_OscConfig+0x310>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b0c      	cmp	r3, #12
 80071d0:	d119      	bne.n	8007206 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d116      	bne.n	8007206 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071d8:	4b7c      	ldr	r3, [pc, #496]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <HAL_RCC_OscConfig+0x328>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e277      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f0:	4b76      	ldr	r3, [pc, #472]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	061b      	lsls	r3, r3, #24
 80071fe:	4973      	ldr	r1, [pc, #460]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007200:	4313      	orrs	r3, r2
 8007202:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007204:	e040      	b.n	8007288 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d023      	beq.n	8007256 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800720e:	4b6f      	ldr	r3, [pc, #444]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a6e      	ldr	r2, [pc, #440]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721a:	f7fc f9f9 	bl	8003610 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007222:	f7fc f9f5 	bl	8003610 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e255      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007234:	4b65      	ldr	r3, [pc, #404]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007240:	4b62      	ldr	r3, [pc, #392]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	495f      	ldr	r1, [pc, #380]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007250:	4313      	orrs	r3, r2
 8007252:	604b      	str	r3, [r1, #4]
 8007254:	e018      	b.n	8007288 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007256:	4b5d      	ldr	r3, [pc, #372]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a5c      	ldr	r2, [pc, #368]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 800725c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007262:	f7fc f9d5 	bl	8003610 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007268:	e008      	b.n	800727c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800726a:	f7fc f9d1 	bl	8003610 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e231      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800727c:	4b53      	ldr	r3, [pc, #332]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f0      	bne.n	800726a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d03c      	beq.n	800730e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01c      	beq.n	80072d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800729c:	4b4b      	ldr	r3, [pc, #300]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 800729e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072a2:	4a4a      	ldr	r2, [pc, #296]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80072a4:	f043 0301 	orr.w	r3, r3, #1
 80072a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ac:	f7fc f9b0 	bl	8003610 <HAL_GetTick>
 80072b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072b4:	f7fc f9ac 	bl	8003610 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e20c      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072c6:	4b41      	ldr	r3, [pc, #260]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80072c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d0ef      	beq.n	80072b4 <HAL_RCC_OscConfig+0x3ec>
 80072d4:	e01b      	b.n	800730e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072d6:	4b3d      	ldr	r3, [pc, #244]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80072d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072dc:	4a3b      	ldr	r2, [pc, #236]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80072de:	f023 0301 	bic.w	r3, r3, #1
 80072e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e6:	f7fc f993 	bl	8003610 <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ee:	f7fc f98f 	bl	8003610 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e1ef      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007300:	4b32      	ldr	r3, [pc, #200]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1ef      	bne.n	80072ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0304 	and.w	r3, r3, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 80a6 	beq.w	8007468 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800731c:	2300      	movs	r3, #0
 800731e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007320:	4b2a      	ldr	r3, [pc, #168]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800732c:	4b27      	ldr	r3, [pc, #156]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 800732e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007330:	4a26      	ldr	r2, [pc, #152]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007336:	6593      	str	r3, [r2, #88]	; 0x58
 8007338:	4b24      	ldr	r3, [pc, #144]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 800733a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007340:	60bb      	str	r3, [r7, #8]
 8007342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007344:	2301      	movs	r3, #1
 8007346:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007348:	4b21      	ldr	r3, [pc, #132]	; (80073d0 <HAL_RCC_OscConfig+0x508>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	d118      	bne.n	8007386 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007354:	4b1e      	ldr	r3, [pc, #120]	; (80073d0 <HAL_RCC_OscConfig+0x508>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1d      	ldr	r2, [pc, #116]	; (80073d0 <HAL_RCC_OscConfig+0x508>)
 800735a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800735e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007360:	f7fc f956 	bl	8003610 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007368:	f7fc f952 	bl	8003610 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e1b2      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800737a:	4b15      	ldr	r3, [pc, #84]	; (80073d0 <HAL_RCC_OscConfig+0x508>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007382:	2b00      	cmp	r3, #0
 8007384:	d0f0      	beq.n	8007368 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d108      	bne.n	80073a0 <HAL_RCC_OscConfig+0x4d8>
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007394:	4a0d      	ldr	r2, [pc, #52]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 8007396:	f043 0301 	orr.w	r3, r3, #1
 800739a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800739e:	e029      	b.n	80073f4 <HAL_RCC_OscConfig+0x52c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b05      	cmp	r3, #5
 80073a6:	d115      	bne.n	80073d4 <HAL_RCC_OscConfig+0x50c>
 80073a8:	4b08      	ldr	r3, [pc, #32]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80073aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ae:	4a07      	ldr	r2, [pc, #28]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80073b0:	f043 0304 	orr.w	r3, r3, #4
 80073b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073b8:	4b04      	ldr	r3, [pc, #16]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073be:	4a03      	ldr	r2, [pc, #12]	; (80073cc <HAL_RCC_OscConfig+0x504>)
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073c8:	e014      	b.n	80073f4 <HAL_RCC_OscConfig+0x52c>
 80073ca:	bf00      	nop
 80073cc:	40021000 	.word	0x40021000
 80073d0:	40007000 	.word	0x40007000
 80073d4:	4b9a      	ldr	r3, [pc, #616]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	4a99      	ldr	r2, [pc, #612]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80073dc:	f023 0301 	bic.w	r3, r3, #1
 80073e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80073e4:	4b96      	ldr	r3, [pc, #600]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ea:	4a95      	ldr	r2, [pc, #596]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80073ec:	f023 0304 	bic.w	r3, r3, #4
 80073f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d016      	beq.n	800742a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fc:	f7fc f908 	bl	8003610 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007402:	e00a      	b.n	800741a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007404:	f7fc f904 	bl	8003610 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e162      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800741a:	4b89      	ldr	r3, [pc, #548]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 800741c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0ed      	beq.n	8007404 <HAL_RCC_OscConfig+0x53c>
 8007428:	e015      	b.n	8007456 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742a:	f7fc f8f1 	bl	8003610 <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007430:	e00a      	b.n	8007448 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007432:	f7fc f8ed 	bl	8003610 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007440:	4293      	cmp	r3, r2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e14b      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007448:	4b7d      	ldr	r3, [pc, #500]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1ed      	bne.n	8007432 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007456:	7ffb      	ldrb	r3, [r7, #31]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d105      	bne.n	8007468 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800745c:	4b78      	ldr	r3, [pc, #480]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 800745e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007460:	4a77      	ldr	r2, [pc, #476]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 8007462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007466:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0320 	and.w	r3, r3, #32
 8007470:	2b00      	cmp	r3, #0
 8007472:	d03c      	beq.n	80074ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01c      	beq.n	80074b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800747c:	4b70      	ldr	r3, [pc, #448]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 800747e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007482:	4a6f      	ldr	r2, [pc, #444]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748c:	f7fc f8c0 	bl	8003610 <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007494:	f7fc f8bc 	bl	8003610 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e11c      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074a6:	4b66      	ldr	r3, [pc, #408]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80074a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0ef      	beq.n	8007494 <HAL_RCC_OscConfig+0x5cc>
 80074b4:	e01b      	b.n	80074ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074b6:	4b62      	ldr	r3, [pc, #392]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80074b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074bc:	4a60      	ldr	r2, [pc, #384]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80074be:	f023 0301 	bic.w	r3, r3, #1
 80074c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c6:	f7fc f8a3 	bl	8003610 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074ce:	f7fc f89f 	bl	8003610 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e0ff      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80074e0:	4b57      	ldr	r3, [pc, #348]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80074e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1ef      	bne.n	80074ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80f3 	beq.w	80076de <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	f040 80c9 	bne.w	8007694 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007502:	4b4f      	ldr	r3, [pc, #316]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f003 0203 	and.w	r2, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	429a      	cmp	r2, r3
 8007514:	d12c      	bne.n	8007570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007520:	3b01      	subs	r3, #1
 8007522:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007524:	429a      	cmp	r2, r3
 8007526:	d123      	bne.n	8007570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007534:	429a      	cmp	r2, r3
 8007536:	d11b      	bne.n	8007570 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007544:	429a      	cmp	r2, r3
 8007546:	d113      	bne.n	8007570 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	3b01      	subs	r3, #1
 8007556:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007558:	429a      	cmp	r2, r3
 800755a:	d109      	bne.n	8007570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	3b01      	subs	r3, #1
 800756a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800756c:	429a      	cmp	r2, r3
 800756e:	d06b      	beq.n	8007648 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	2b0c      	cmp	r3, #12
 8007574:	d062      	beq.n	800763c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007576:	4b32      	ldr	r3, [pc, #200]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e0ac      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007586:	4b2e      	ldr	r3, [pc, #184]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a2d      	ldr	r2, [pc, #180]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 800758c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007590:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007592:	f7fc f83d 	bl	8003610 <HAL_GetTick>
 8007596:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007598:	e008      	b.n	80075ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800759a:	f7fc f839 	bl	8003610 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e099      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075ac:	4b24      	ldr	r3, [pc, #144]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1f0      	bne.n	800759a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075b8:	4b21      	ldr	r3, [pc, #132]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	4b21      	ldr	r3, [pc, #132]	; (8007644 <HAL_RCC_OscConfig+0x77c>)
 80075be:	4013      	ands	r3, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80075c8:	3a01      	subs	r2, #1
 80075ca:	0112      	lsls	r2, r2, #4
 80075cc:	4311      	orrs	r1, r2
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80075d2:	0212      	lsls	r2, r2, #8
 80075d4:	4311      	orrs	r1, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80075da:	0852      	lsrs	r2, r2, #1
 80075dc:	3a01      	subs	r2, #1
 80075de:	0552      	lsls	r2, r2, #21
 80075e0:	4311      	orrs	r1, r2
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80075e6:	0852      	lsrs	r2, r2, #1
 80075e8:	3a01      	subs	r2, #1
 80075ea:	0652      	lsls	r2, r2, #25
 80075ec:	4311      	orrs	r1, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075f2:	06d2      	lsls	r2, r2, #27
 80075f4:	430a      	orrs	r2, r1
 80075f6:	4912      	ldr	r1, [pc, #72]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80075fc:	4b10      	ldr	r3, [pc, #64]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 8007602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007606:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007608:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4a0c      	ldr	r2, [pc, #48]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 800760e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007612:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007614:	f7fb fffc 	bl	8003610 <HAL_GetTick>
 8007618:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800761a:	e008      	b.n	800762e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800761c:	f7fb fff8 	bl	8003610 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d901      	bls.n	800762e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e058      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800762e:	4b04      	ldr	r3, [pc, #16]	; (8007640 <HAL_RCC_OscConfig+0x778>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0f0      	beq.n	800761c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800763a:	e050      	b.n	80076de <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e04f      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
 8007640:	40021000 	.word	0x40021000
 8007644:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007648:	4b27      	ldr	r3, [pc, #156]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d144      	bne.n	80076de <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007654:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a23      	ldr	r2, [pc, #140]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 800765a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800765e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007660:	4b21      	ldr	r3, [pc, #132]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4a20      	ldr	r2, [pc, #128]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 8007666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800766a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800766c:	f7fb ffd0 	bl	8003610 <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007672:	e008      	b.n	8007686 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007674:	f7fb ffcc 	bl	8003610 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e02c      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007686:	4b18      	ldr	r3, [pc, #96]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0f0      	beq.n	8007674 <HAL_RCC_OscConfig+0x7ac>
 8007692:	e024      	b.n	80076de <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	2b0c      	cmp	r3, #12
 8007698:	d01f      	beq.n	80076da <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800769a:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a12      	ldr	r2, [pc, #72]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 80076a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a6:	f7fb ffb3 	bl	8003610 <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076ac:	e008      	b.n	80076c0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ae:	f7fb ffaf 	bl	8003610 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e00f      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076c0:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1f0      	bne.n	80076ae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	4905      	ldr	r1, [pc, #20]	; (80076e8 <HAL_RCC_OscConfig+0x820>)
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <HAL_RCC_OscConfig+0x824>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	60cb      	str	r3, [r1, #12]
 80076d8:	e001      	b.n	80076de <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3720      	adds	r7, #32
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40021000 	.word	0x40021000
 80076ec:	feeefffc 	.word	0xfeeefffc

080076f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e0e7      	b.n	80078d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007704:	4b75      	ldr	r3, [pc, #468]	; (80078dc <HAL_RCC_ClockConfig+0x1ec>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d910      	bls.n	8007734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007712:	4b72      	ldr	r3, [pc, #456]	; (80078dc <HAL_RCC_ClockConfig+0x1ec>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f023 0207 	bic.w	r2, r3, #7
 800771a:	4970      	ldr	r1, [pc, #448]	; (80078dc <HAL_RCC_ClockConfig+0x1ec>)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	4313      	orrs	r3, r2
 8007720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007722:	4b6e      	ldr	r3, [pc, #440]	; (80078dc <HAL_RCC_ClockConfig+0x1ec>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d001      	beq.n	8007734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e0cf      	b.n	80078d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d010      	beq.n	8007762 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	4b66      	ldr	r3, [pc, #408]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800774c:	429a      	cmp	r2, r3
 800774e:	d908      	bls.n	8007762 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007750:	4b63      	ldr	r3, [pc, #396]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	4960      	ldr	r1, [pc, #384]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 800775e:	4313      	orrs	r3, r2
 8007760:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d04c      	beq.n	8007808 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b03      	cmp	r3, #3
 8007774:	d107      	bne.n	8007786 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007776:	4b5a      	ldr	r3, [pc, #360]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d121      	bne.n	80077c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e0a6      	b.n	80078d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d107      	bne.n	800779e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800778e:	4b54      	ldr	r3, [pc, #336]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d115      	bne.n	80077c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e09a      	b.n	80078d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d107      	bne.n	80077b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077a6:	4b4e      	ldr	r3, [pc, #312]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d109      	bne.n	80077c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e08e      	b.n	80078d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80077b6:	4b4a      	ldr	r3, [pc, #296]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e086      	b.n	80078d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077c6:	4b46      	ldr	r3, [pc, #280]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f023 0203 	bic.w	r2, r3, #3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	4943      	ldr	r1, [pc, #268]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d8:	f7fb ff1a 	bl	8003610 <HAL_GetTick>
 80077dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077de:	e00a      	b.n	80077f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077e0:	f7fb ff16 	bl	8003610 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e06e      	b.n	80078d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077f6:	4b3a      	ldr	r3, [pc, #232]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 020c 	and.w	r2, r3, #12
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	429a      	cmp	r2, r3
 8007806:	d1eb      	bne.n	80077e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d010      	beq.n	8007836 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	4b31      	ldr	r3, [pc, #196]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007820:	429a      	cmp	r2, r3
 8007822:	d208      	bcs.n	8007836 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007824:	4b2e      	ldr	r3, [pc, #184]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	492b      	ldr	r1, [pc, #172]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007832:	4313      	orrs	r3, r2
 8007834:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007836:	4b29      	ldr	r3, [pc, #164]	; (80078dc <HAL_RCC_ClockConfig+0x1ec>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d210      	bcs.n	8007866 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007844:	4b25      	ldr	r3, [pc, #148]	; (80078dc <HAL_RCC_ClockConfig+0x1ec>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f023 0207 	bic.w	r2, r3, #7
 800784c:	4923      	ldr	r1, [pc, #140]	; (80078dc <HAL_RCC_ClockConfig+0x1ec>)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	4313      	orrs	r3, r2
 8007852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007854:	4b21      	ldr	r3, [pc, #132]	; (80078dc <HAL_RCC_ClockConfig+0x1ec>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d001      	beq.n	8007866 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e036      	b.n	80078d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d008      	beq.n	8007884 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007872:	4b1b      	ldr	r3, [pc, #108]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	4918      	ldr	r1, [pc, #96]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007880:	4313      	orrs	r3, r2
 8007882:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b00      	cmp	r3, #0
 800788e:	d009      	beq.n	80078a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007890:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	00db      	lsls	r3, r3, #3
 800789e:	4910      	ldr	r1, [pc, #64]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078a4:	f000 f824 	bl	80078f0 <HAL_RCC_GetSysClockFreq>
 80078a8:	4602      	mov	r2, r0
 80078aa:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <HAL_RCC_ClockConfig+0x1f0>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	091b      	lsrs	r3, r3, #4
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	490b      	ldr	r1, [pc, #44]	; (80078e4 <HAL_RCC_ClockConfig+0x1f4>)
 80078b6:	5ccb      	ldrb	r3, [r1, r3]
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
 80078c0:	4a09      	ldr	r2, [pc, #36]	; (80078e8 <HAL_RCC_ClockConfig+0x1f8>)
 80078c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80078c4:	4b09      	ldr	r3, [pc, #36]	; (80078ec <HAL_RCC_ClockConfig+0x1fc>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fb fe51 	bl	8003570 <HAL_InitTick>
 80078ce:	4603      	mov	r3, r0
 80078d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80078d2:	7afb      	ldrb	r3, [r7, #11]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40022000 	.word	0x40022000
 80078e0:	40021000 	.word	0x40021000
 80078e4:	0800d740 	.word	0x0800d740
 80078e8:	20000168 	.word	0x20000168
 80078ec:	20000184 	.word	0x20000184

080078f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b089      	sub	sp, #36	; 0x24
 80078f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	61fb      	str	r3, [r7, #28]
 80078fa:	2300      	movs	r3, #0
 80078fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078fe:	4b3e      	ldr	r3, [pc, #248]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 030c 	and.w	r3, r3, #12
 8007906:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007908:	4b3b      	ldr	r3, [pc, #236]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_RCC_GetSysClockFreq+0x34>
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	2b0c      	cmp	r3, #12
 800791c:	d121      	bne.n	8007962 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d11e      	bne.n	8007962 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007924:	4b34      	ldr	r3, [pc, #208]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d107      	bne.n	8007940 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007930:	4b31      	ldr	r3, [pc, #196]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007936:	0a1b      	lsrs	r3, r3, #8
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	61fb      	str	r3, [r7, #28]
 800793e:	e005      	b.n	800794c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007940:	4b2d      	ldr	r3, [pc, #180]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	f003 030f 	and.w	r3, r3, #15
 800794a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800794c:	4a2b      	ldr	r2, [pc, #172]	; (80079fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007954:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10d      	bne.n	8007978 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007960:	e00a      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b04      	cmp	r3, #4
 8007966:	d102      	bne.n	800796e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007968:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <HAL_RCC_GetSysClockFreq+0x110>)
 800796a:	61bb      	str	r3, [r7, #24]
 800796c:	e004      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b08      	cmp	r3, #8
 8007972:	d101      	bne.n	8007978 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007974:	4b22      	ldr	r3, [pc, #136]	; (8007a00 <HAL_RCC_GetSysClockFreq+0x110>)
 8007976:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b0c      	cmp	r3, #12
 800797c:	d134      	bne.n	80079e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800797e:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d003      	beq.n	8007996 <HAL_RCC_GetSysClockFreq+0xa6>
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b03      	cmp	r3, #3
 8007992:	d003      	beq.n	800799c <HAL_RCC_GetSysClockFreq+0xac>
 8007994:	e005      	b.n	80079a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007996:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <HAL_RCC_GetSysClockFreq+0x110>)
 8007998:	617b      	str	r3, [r7, #20]
      break;
 800799a:	e005      	b.n	80079a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800799c:	4b18      	ldr	r3, [pc, #96]	; (8007a00 <HAL_RCC_GetSysClockFreq+0x110>)
 800799e:	617b      	str	r3, [r7, #20]
      break;
 80079a0:	e002      	b.n	80079a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	617b      	str	r3, [r7, #20]
      break;
 80079a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079a8:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	091b      	lsrs	r3, r3, #4
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	3301      	adds	r3, #1
 80079b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80079b6:	4b10      	ldr	r3, [pc, #64]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	fb03 f202 	mul.w	r2, r3, r2
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80079ce:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	0e5b      	lsrs	r3, r3, #25
 80079d4:	f003 0303 	and.w	r3, r3, #3
 80079d8:	3301      	adds	r3, #1
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80079e8:	69bb      	ldr	r3, [r7, #24]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3724      	adds	r7, #36	; 0x24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40021000 	.word	0x40021000
 80079fc:	0800d758 	.word	0x0800d758
 8007a00:	00f42400 	.word	0x00f42400

08007a04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a08:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	20000168 	.word	0x20000168

08007a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a20:	f7ff fff0 	bl	8007a04 <HAL_RCC_GetHCLKFreq>
 8007a24:	4602      	mov	r2, r0
 8007a26:	4b06      	ldr	r3, [pc, #24]	; (8007a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	0a1b      	lsrs	r3, r3, #8
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	4904      	ldr	r1, [pc, #16]	; (8007a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a32:	5ccb      	ldrb	r3, [r1, r3]
 8007a34:	f003 031f 	and.w	r3, r3, #31
 8007a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40021000 	.word	0x40021000
 8007a44:	0800d750 	.word	0x0800d750

08007a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a4c:	f7ff ffda 	bl	8007a04 <HAL_RCC_GetHCLKFreq>
 8007a50:	4602      	mov	r2, r0
 8007a52:	4b06      	ldr	r3, [pc, #24]	; (8007a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	0adb      	lsrs	r3, r3, #11
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	4904      	ldr	r1, [pc, #16]	; (8007a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a5e:	5ccb      	ldrb	r3, [r1, r3]
 8007a60:	f003 031f 	and.w	r3, r3, #31
 8007a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40021000 	.word	0x40021000
 8007a70:	0800d750 	.word	0x0800d750

08007a74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a80:	4b2a      	ldr	r3, [pc, #168]	; (8007b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a8c:	f7ff f9b8 	bl	8006e00 <HAL_PWREx_GetVoltageRange>
 8007a90:	6178      	str	r0, [r7, #20]
 8007a92:	e014      	b.n	8007abe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a94:	4b25      	ldr	r3, [pc, #148]	; (8007b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a98:	4a24      	ldr	r2, [pc, #144]	; (8007b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8007aa0:	4b22      	ldr	r3, [pc, #136]	; (8007b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007aac:	f7ff f9a8 	bl	8006e00 <HAL_PWREx_GetVoltageRange>
 8007ab0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007ab2:	4b1e      	ldr	r3, [pc, #120]	; (8007b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab6:	4a1d      	ldr	r2, [pc, #116]	; (8007b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007abc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac4:	d10b      	bne.n	8007ade <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b80      	cmp	r3, #128	; 0x80
 8007aca:	d919      	bls.n	8007b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2ba0      	cmp	r3, #160	; 0xa0
 8007ad0:	d902      	bls.n	8007ad8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007ad2:	2302      	movs	r3, #2
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	e013      	b.n	8007b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ad8:	2301      	movs	r3, #1
 8007ada:	613b      	str	r3, [r7, #16]
 8007adc:	e010      	b.n	8007b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d902      	bls.n	8007aea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	613b      	str	r3, [r7, #16]
 8007ae8:	e00a      	b.n	8007b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b80      	cmp	r3, #128	; 0x80
 8007aee:	d102      	bne.n	8007af6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007af0:	2302      	movs	r3, #2
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	e004      	b.n	8007b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b70      	cmp	r3, #112	; 0x70
 8007afa:	d101      	bne.n	8007b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007afc:	2301      	movs	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f023 0207 	bic.w	r2, r3, #7
 8007b08:	4909      	ldr	r1, [pc, #36]	; (8007b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007b10:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d001      	beq.n	8007b22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e000      	b.n	8007b24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	40022000 	.word	0x40022000

08007b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b40:	2300      	movs	r3, #0
 8007b42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d031      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b58:	d01a      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007b5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b5e:	d814      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b68:	d10f      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007b6a:	4b5d      	ldr	r3, [pc, #372]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	4a5c      	ldr	r2, [pc, #368]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b76:	e00c      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 f9f0 	bl	8007f64 <RCCEx_PLLSAI1_Config>
 8007b84:	4603      	mov	r3, r0
 8007b86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b88:	e003      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8007b8e:	e000      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b92:	7cfb      	ldrb	r3, [r7, #19]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10b      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b98:	4b51      	ldr	r3, [pc, #324]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba6:	494e      	ldr	r1, [pc, #312]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007bae:	e001      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb0:	7cfb      	ldrb	r3, [r7, #19]
 8007bb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 809e 	beq.w	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007bc6:	4b46      	ldr	r3, [pc, #280]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e000      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00d      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bdc:	4b40      	ldr	r3, [pc, #256]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be0:	4a3f      	ldr	r2, [pc, #252]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be6:	6593      	str	r3, [r2, #88]	; 0x58
 8007be8:	4b3d      	ldr	r3, [pc, #244]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bf8:	4b3a      	ldr	r3, [pc, #232]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a39      	ldr	r2, [pc, #228]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c04:	f7fb fd04 	bl	8003610 <HAL_GetTick>
 8007c08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c0a:	e009      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c0c:	f7fb fd00 	bl	8003610 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d902      	bls.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	74fb      	strb	r3, [r7, #19]
        break;
 8007c1e:	e005      	b.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c20:	4b30      	ldr	r3, [pc, #192]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d0ef      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007c2c:	7cfb      	ldrb	r3, [r7, #19]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d15a      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c32:	4b2b      	ldr	r3, [pc, #172]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01e      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d019      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c4e:	4b24      	ldr	r3, [pc, #144]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c5a:	4b21      	ldr	r3, [pc, #132]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	4a1f      	ldr	r2, [pc, #124]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c70:	4a1b      	ldr	r2, [pc, #108]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c7a:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d016      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8c:	f7fb fcc0 	bl	8003610 <HAL_GetTick>
 8007c90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c92:	e00b      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c94:	f7fb fcbc 	bl	8003610 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d902      	bls.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	74fb      	strb	r3, [r7, #19]
            break;
 8007caa:	e006      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cac:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0ec      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007cba:	7cfb      	ldrb	r3, [r7, #19]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10b      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cc0:	4b07      	ldr	r3, [pc, #28]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cce:	4904      	ldr	r1, [pc, #16]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007cd6:	e009      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007cd8:	7cfb      	ldrb	r3, [r7, #19]
 8007cda:	74bb      	strb	r3, [r7, #18]
 8007cdc:	e006      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007cde:	bf00      	nop
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce8:	7cfb      	ldrb	r3, [r7, #19]
 8007cea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cec:	7c7b      	ldrb	r3, [r7, #17]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d105      	bne.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cf2:	4b9b      	ldr	r3, [pc, #620]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf6:	4a9a      	ldr	r2, [pc, #616]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d0a:	4b95      	ldr	r3, [pc, #596]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d10:	f023 0203 	bic.w	r2, r3, #3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	4991      	ldr	r1, [pc, #580]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00a      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d2c:	4b8c      	ldr	r3, [pc, #560]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d32:	f023 020c 	bic.w	r2, r3, #12
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	4989      	ldr	r1, [pc, #548]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0304 	and.w	r3, r3, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d4e:	4b84      	ldr	r3, [pc, #528]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5c:	4980      	ldr	r1, [pc, #512]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d70:	4b7b      	ldr	r3, [pc, #492]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7e:	4978      	ldr	r1, [pc, #480]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d92:	4b73      	ldr	r3, [pc, #460]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da0:	496f      	ldr	r1, [pc, #444]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007db4:	4b6a      	ldr	r3, [pc, #424]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	4967      	ldr	r1, [pc, #412]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007dd6:	4b62      	ldr	r3, [pc, #392]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ddc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de4:	495e      	ldr	r1, [pc, #376]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007de6:	4313      	orrs	r3, r2
 8007de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007df8:	4b59      	ldr	r3, [pc, #356]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e06:	4956      	ldr	r1, [pc, #344]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e1a:	4b51      	ldr	r3, [pc, #324]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	494d      	ldr	r1, [pc, #308]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d028      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e3c:	4b48      	ldr	r3, [pc, #288]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4a:	4945      	ldr	r1, [pc, #276]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e5a:	d106      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e5c:	4b40      	ldr	r3, [pc, #256]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	4a3f      	ldr	r2, [pc, #252]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e66:	60d3      	str	r3, [r2, #12]
 8007e68:	e011      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e72:	d10c      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3304      	adds	r3, #4
 8007e78:	2101      	movs	r1, #1
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f872 	bl	8007f64 <RCCEx_PLLSAI1_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e84:	7cfb      	ldrb	r3, [r7, #19]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007e8a:	7cfb      	ldrb	r3, [r7, #19]
 8007e8c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d028      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e9a:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea8:	492d      	ldr	r1, [pc, #180]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eb8:	d106      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007eba:	4b29      	ldr	r3, [pc, #164]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	4a28      	ldr	r2, [pc, #160]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ec4:	60d3      	str	r3, [r2, #12]
 8007ec6:	e011      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ed0:	d10c      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 f843 	bl	8007f64 <RCCEx_PLLSAI1_Config>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ee2:	7cfb      	ldrb	r3, [r7, #19]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007ee8:	7cfb      	ldrb	r3, [r7, #19]
 8007eea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01c      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ef8:	4b19      	ldr	r3, [pc, #100]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f06:	4916      	ldr	r1, [pc, #88]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f16:	d10c      	bne.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	2102      	movs	r1, #2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f820 	bl	8007f64 <RCCEx_PLLSAI1_Config>
 8007f24:	4603      	mov	r3, r0
 8007f26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007f28:	7cfb      	ldrb	r3, [r7, #19]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007f2e:	7cfb      	ldrb	r3, [r7, #19]
 8007f30:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f3e:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4c:	4904      	ldr	r1, [pc, #16]	; (8007f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f54:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	40021000 	.word	0x40021000

08007f64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f72:	4b74      	ldr	r3, [pc, #464]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d018      	beq.n	8007fb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f7e:	4b71      	ldr	r3, [pc, #452]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f003 0203 	and.w	r2, r3, #3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d10d      	bne.n	8007faa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
       ||
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007f96:	4b6b      	ldr	r3, [pc, #428]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	091b      	lsrs	r3, r3, #4
 8007f9c:	f003 0307 	and.w	r3, r3, #7
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d047      	beq.n	800803a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	73fb      	strb	r3, [r7, #15]
 8007fae:	e044      	b.n	800803a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d018      	beq.n	8007fea <RCCEx_PLLSAI1_Config+0x86>
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d825      	bhi.n	8008008 <RCCEx_PLLSAI1_Config+0xa4>
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d002      	beq.n	8007fc6 <RCCEx_PLLSAI1_Config+0x62>
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d009      	beq.n	8007fd8 <RCCEx_PLLSAI1_Config+0x74>
 8007fc4:	e020      	b.n	8008008 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007fc6:	4b5f      	ldr	r3, [pc, #380]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d11d      	bne.n	800800e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fd6:	e01a      	b.n	800800e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007fd8:	4b5a      	ldr	r3, [pc, #360]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d116      	bne.n	8008012 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fe8:	e013      	b.n	8008012 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007fea:	4b56      	ldr	r3, [pc, #344]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10f      	bne.n	8008016 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ff6:	4b53      	ldr	r3, [pc, #332]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008006:	e006      	b.n	8008016 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	73fb      	strb	r3, [r7, #15]
      break;
 800800c:	e004      	b.n	8008018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800800e:	bf00      	nop
 8008010:	e002      	b.n	8008018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008012:	bf00      	nop
 8008014:	e000      	b.n	8008018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008016:	bf00      	nop
    }

    if(status == HAL_OK)
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10d      	bne.n	800803a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800801e:	4b49      	ldr	r3, [pc, #292]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6819      	ldr	r1, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	3b01      	subs	r3, #1
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	430b      	orrs	r3, r1
 8008034:	4943      	ldr	r1, [pc, #268]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008036:	4313      	orrs	r3, r2
 8008038:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d17c      	bne.n	800813a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008040:	4b40      	ldr	r3, [pc, #256]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a3f      	ldr	r2, [pc, #252]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008046:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800804a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800804c:	f7fb fae0 	bl	8003610 <HAL_GetTick>
 8008050:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008052:	e009      	b.n	8008068 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008054:	f7fb fadc 	bl	8003610 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d902      	bls.n	8008068 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	73fb      	strb	r3, [r7, #15]
        break;
 8008066:	e005      	b.n	8008074 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008068:	4b36      	ldr	r3, [pc, #216]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1ef      	bne.n	8008054 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d15f      	bne.n	800813a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d110      	bne.n	80080a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008080:	4b30      	ldr	r3, [pc, #192]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6892      	ldr	r2, [r2, #8]
 8008090:	0211      	lsls	r1, r2, #8
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	68d2      	ldr	r2, [r2, #12]
 8008096:	06d2      	lsls	r2, r2, #27
 8008098:	430a      	orrs	r2, r1
 800809a:	492a      	ldr	r1, [pc, #168]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 800809c:	4313      	orrs	r3, r2
 800809e:	610b      	str	r3, [r1, #16]
 80080a0:	e027      	b.n	80080f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d112      	bne.n	80080ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080a8:	4b26      	ldr	r3, [pc, #152]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80080b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6892      	ldr	r2, [r2, #8]
 80080b8:	0211      	lsls	r1, r2, #8
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	6912      	ldr	r2, [r2, #16]
 80080be:	0852      	lsrs	r2, r2, #1
 80080c0:	3a01      	subs	r2, #1
 80080c2:	0552      	lsls	r2, r2, #21
 80080c4:	430a      	orrs	r2, r1
 80080c6:	491f      	ldr	r1, [pc, #124]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	610b      	str	r3, [r1, #16]
 80080cc:	e011      	b.n	80080f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080ce:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80080d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6892      	ldr	r2, [r2, #8]
 80080de:	0211      	lsls	r1, r2, #8
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6952      	ldr	r2, [r2, #20]
 80080e4:	0852      	lsrs	r2, r2, #1
 80080e6:	3a01      	subs	r2, #1
 80080e8:	0652      	lsls	r2, r2, #25
 80080ea:	430a      	orrs	r2, r1
 80080ec:	4915      	ldr	r1, [pc, #84]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80080f2:	4b14      	ldr	r3, [pc, #80]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a13      	ldr	r2, [pc, #76]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080fe:	f7fb fa87 	bl	8003610 <HAL_GetTick>
 8008102:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008104:	e009      	b.n	800811a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008106:	f7fb fa83 	bl	8003610 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	d902      	bls.n	800811a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	73fb      	strb	r3, [r7, #15]
          break;
 8008118:	e005      	b.n	8008126 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800811a:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0ef      	beq.n	8008106 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	4903      	ldr	r1, [pc, #12]	; (8008144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008136:	4313      	orrs	r3, r2
 8008138:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	40021000 	.word	0x40021000

08008148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e049      	b.n	80081ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fa fcf6 	bl	8002b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3304      	adds	r3, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f000 faca 	bl	8008720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b01      	cmp	r3, #1
 800820a:	d001      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e03b      	b.n	8008288 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a19      	ldr	r2, [pc, #100]	; (8008294 <HAL_TIM_Base_Start_IT+0x9c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d009      	beq.n	8008246 <HAL_TIM_Base_Start_IT+0x4e>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823a:	d004      	beq.n	8008246 <HAL_TIM_Base_Start_IT+0x4e>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a15      	ldr	r2, [pc, #84]	; (8008298 <HAL_TIM_Base_Start_IT+0xa0>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d115      	bne.n	8008272 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	4b13      	ldr	r3, [pc, #76]	; (800829c <HAL_TIM_Base_Start_IT+0xa4>)
 800824e:	4013      	ands	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2b06      	cmp	r3, #6
 8008256:	d015      	beq.n	8008284 <HAL_TIM_Base_Start_IT+0x8c>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825e:	d011      	beq.n	8008284 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f042 0201 	orr.w	r2, r2, #1
 800826e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008270:	e008      	b.n	8008284 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0201 	orr.w	r2, r2, #1
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	e000      	b.n	8008286 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008284:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	40012c00 	.word	0x40012c00
 8008298:	40014000 	.word	0x40014000
 800829c:	00010007 	.word	0x00010007

080082a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0201 	bic.w	r2, r2, #1
 80082b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6a1a      	ldr	r2, [r3, #32]
 80082be:	f241 1311 	movw	r3, #4369	; 0x1111
 80082c2:	4013      	ands	r3, r2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10f      	bne.n	80082e8 <HAL_TIM_Base_Stop_IT+0x48>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6a1a      	ldr	r2, [r3, #32]
 80082ce:	f240 4344 	movw	r3, #1092	; 0x444
 80082d2:	4013      	ands	r3, r2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d107      	bne.n	80082e8 <HAL_TIM_Base_Stop_IT+0x48>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b02      	cmp	r3, #2
 8008312:	d122      	bne.n	800835a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b02      	cmp	r3, #2
 8008320:	d11b      	bne.n	800835a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f06f 0202 	mvn.w	r2, #2
 800832a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f9ce 	bl	80086e2 <HAL_TIM_IC_CaptureCallback>
 8008346:	e005      	b.n	8008354 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f9c0 	bl	80086ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f9d1 	bl	80086f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b04      	cmp	r3, #4
 8008366:	d122      	bne.n	80083ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b04      	cmp	r3, #4
 8008374:	d11b      	bne.n	80083ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f06f 0204 	mvn.w	r2, #4
 800837e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f9a4 	bl	80086e2 <HAL_TIM_IC_CaptureCallback>
 800839a:	e005      	b.n	80083a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f996 	bl	80086ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9a7 	bl	80086f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d122      	bne.n	8008402 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d11b      	bne.n	8008402 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f06f 0208 	mvn.w	r2, #8
 80083d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2204      	movs	r2, #4
 80083d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	f003 0303 	and.w	r3, r3, #3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f97a 	bl	80086e2 <HAL_TIM_IC_CaptureCallback>
 80083ee:	e005      	b.n	80083fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f96c 	bl	80086ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f97d 	bl	80086f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b10      	cmp	r3, #16
 800840e:	d122      	bne.n	8008456 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f003 0310 	and.w	r3, r3, #16
 800841a:	2b10      	cmp	r3, #16
 800841c:	d11b      	bne.n	8008456 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f06f 0210 	mvn.w	r2, #16
 8008426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2208      	movs	r2, #8
 800842c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f950 	bl	80086e2 <HAL_TIM_IC_CaptureCallback>
 8008442:	e005      	b.n	8008450 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f942 	bl	80086ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f953 	bl	80086f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b01      	cmp	r3, #1
 8008462:	d10e      	bne.n	8008482 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b01      	cmp	r3, #1
 8008470:	d107      	bne.n	8008482 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f06f 0201 	mvn.w	r2, #1
 800847a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7f9 fe39 	bl	80020f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	d10e      	bne.n	80084ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849a:	2b80      	cmp	r3, #128	; 0x80
 800849c:	d107      	bne.n	80084ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 faa7 	bl	80089fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084bc:	d10e      	bne.n	80084dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c8:	2b80      	cmp	r3, #128	; 0x80
 80084ca:	d107      	bne.n	80084dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80084d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fa9a 	bl	8008a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e6:	2b40      	cmp	r3, #64	; 0x40
 80084e8:	d10e      	bne.n	8008508 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f4:	2b40      	cmp	r3, #64	; 0x40
 80084f6:	d107      	bne.n	8008508 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f901 	bl	800870a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b20      	cmp	r3, #32
 8008514:	d10e      	bne.n	8008534 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b20      	cmp	r3, #32
 8008522:	d107      	bne.n	8008534 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0220 	mvn.w	r2, #32
 800852c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa5a 	bl	80089e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008534:	bf00      	nop
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_TIM_ConfigClockSource+0x1c>
 8008554:	2302      	movs	r3, #2
 8008556:	e0b6      	b.n	80086c6 <HAL_TIM_ConfigClockSource+0x18a>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008576:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800857a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008594:	d03e      	beq.n	8008614 <HAL_TIM_ConfigClockSource+0xd8>
 8008596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800859a:	f200 8087 	bhi.w	80086ac <HAL_TIM_ConfigClockSource+0x170>
 800859e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085a2:	f000 8086 	beq.w	80086b2 <HAL_TIM_ConfigClockSource+0x176>
 80085a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085aa:	d87f      	bhi.n	80086ac <HAL_TIM_ConfigClockSource+0x170>
 80085ac:	2b70      	cmp	r3, #112	; 0x70
 80085ae:	d01a      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0xaa>
 80085b0:	2b70      	cmp	r3, #112	; 0x70
 80085b2:	d87b      	bhi.n	80086ac <HAL_TIM_ConfigClockSource+0x170>
 80085b4:	2b60      	cmp	r3, #96	; 0x60
 80085b6:	d050      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x11e>
 80085b8:	2b60      	cmp	r3, #96	; 0x60
 80085ba:	d877      	bhi.n	80086ac <HAL_TIM_ConfigClockSource+0x170>
 80085bc:	2b50      	cmp	r3, #80	; 0x50
 80085be:	d03c      	beq.n	800863a <HAL_TIM_ConfigClockSource+0xfe>
 80085c0:	2b50      	cmp	r3, #80	; 0x50
 80085c2:	d873      	bhi.n	80086ac <HAL_TIM_ConfigClockSource+0x170>
 80085c4:	2b40      	cmp	r3, #64	; 0x40
 80085c6:	d058      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x13e>
 80085c8:	2b40      	cmp	r3, #64	; 0x40
 80085ca:	d86f      	bhi.n	80086ac <HAL_TIM_ConfigClockSource+0x170>
 80085cc:	2b30      	cmp	r3, #48	; 0x30
 80085ce:	d064      	beq.n	800869a <HAL_TIM_ConfigClockSource+0x15e>
 80085d0:	2b30      	cmp	r3, #48	; 0x30
 80085d2:	d86b      	bhi.n	80086ac <HAL_TIM_ConfigClockSource+0x170>
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d060      	beq.n	800869a <HAL_TIM_ConfigClockSource+0x15e>
 80085d8:	2b20      	cmp	r3, #32
 80085da:	d867      	bhi.n	80086ac <HAL_TIM_ConfigClockSource+0x170>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d05c      	beq.n	800869a <HAL_TIM_ConfigClockSource+0x15e>
 80085e0:	2b10      	cmp	r3, #16
 80085e2:	d05a      	beq.n	800869a <HAL_TIM_ConfigClockSource+0x15e>
 80085e4:	e062      	b.n	80086ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	6899      	ldr	r1, [r3, #8]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	f000 f971 	bl	80088dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	609a      	str	r2, [r3, #8]
      break;
 8008612:	e04f      	b.n	80086b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	6899      	ldr	r1, [r3, #8]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f000 f95a 	bl	80088dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008636:	609a      	str	r2, [r3, #8]
      break;
 8008638:	e03c      	b.n	80086b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	6859      	ldr	r1, [r3, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	461a      	mov	r2, r3
 8008648:	f000 f8ce 	bl	80087e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2150      	movs	r1, #80	; 0x50
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f927 	bl	80088a6 <TIM_ITRx_SetConfig>
      break;
 8008658:	e02c      	b.n	80086b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	6859      	ldr	r1, [r3, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	461a      	mov	r2, r3
 8008668:	f000 f8ed 	bl	8008846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2160      	movs	r1, #96	; 0x60
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f917 	bl	80088a6 <TIM_ITRx_SetConfig>
      break;
 8008678:	e01c      	b.n	80086b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	6859      	ldr	r1, [r3, #4]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	461a      	mov	r2, r3
 8008688:	f000 f8ae 	bl	80087e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2140      	movs	r1, #64	; 0x40
 8008692:	4618      	mov	r0, r3
 8008694:	f000 f907 	bl	80088a6 <TIM_ITRx_SetConfig>
      break;
 8008698:	e00c      	b.n	80086b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4619      	mov	r1, r3
 80086a4:	4610      	mov	r0, r2
 80086a6:	f000 f8fe 	bl	80088a6 <TIM_ITRx_SetConfig>
      break;
 80086aa:	e003      	b.n	80086b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	73fb      	strb	r3, [r7, #15]
      break;
 80086b0:	e000      	b.n	80086b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80086b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
	...

08008720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a2a      	ldr	r2, [pc, #168]	; (80087dc <TIM_Base_SetConfig+0xbc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d003      	beq.n	8008740 <TIM_Base_SetConfig+0x20>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873e:	d108      	bne.n	8008752 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4313      	orrs	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a21      	ldr	r2, [pc, #132]	; (80087dc <TIM_Base_SetConfig+0xbc>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00b      	beq.n	8008772 <TIM_Base_SetConfig+0x52>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008760:	d007      	beq.n	8008772 <TIM_Base_SetConfig+0x52>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a1e      	ldr	r2, [pc, #120]	; (80087e0 <TIM_Base_SetConfig+0xc0>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_Base_SetConfig+0x52>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a1d      	ldr	r2, [pc, #116]	; (80087e4 <TIM_Base_SetConfig+0xc4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d108      	bne.n	8008784 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a0c      	ldr	r2, [pc, #48]	; (80087dc <TIM_Base_SetConfig+0xbc>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d007      	beq.n	80087c0 <TIM_Base_SetConfig+0xa0>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a0b      	ldr	r2, [pc, #44]	; (80087e0 <TIM_Base_SetConfig+0xc0>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d003      	beq.n	80087c0 <TIM_Base_SetConfig+0xa0>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a0a      	ldr	r2, [pc, #40]	; (80087e4 <TIM_Base_SetConfig+0xc4>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d103      	bne.n	80087c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	691a      	ldr	r2, [r3, #16]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	615a      	str	r2, [r3, #20]
}
 80087ce:	bf00      	nop
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	40012c00 	.word	0x40012c00
 80087e0:	40014000 	.word	0x40014000
 80087e4:	40014400 	.word	0x40014400

080087e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	f023 0201 	bic.w	r2, r3, #1
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f023 030a 	bic.w	r3, r3, #10
 8008824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008846:	b480      	push	{r7}
 8008848:	b087      	sub	sp, #28
 800884a:	af00      	add	r7, sp, #0
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	f023 0210 	bic.w	r2, r3, #16
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	031b      	lsls	r3, r3, #12
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	621a      	str	r2, [r3, #32]
}
 800889a:	bf00      	nop
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b085      	sub	sp, #20
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	f043 0307 	orr.w	r3, r3, #7
 80088c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	609a      	str	r2, [r3, #8]
}
 80088d0:	bf00      	nop
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	021a      	lsls	r2, r3, #8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	431a      	orrs	r2, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4313      	orrs	r3, r2
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	609a      	str	r2, [r3, #8]
}
 8008910:	bf00      	nop
 8008912:	371c      	adds	r7, #28
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008930:	2302      	movs	r3, #2
 8008932:	e04f      	b.n	80089d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a21      	ldr	r2, [pc, #132]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d108      	bne.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008964:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a14      	ldr	r2, [pc, #80]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d009      	beq.n	80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800899c:	d004      	beq.n	80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a10      	ldr	r2, [pc, #64]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d10c      	bne.n	80089c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	40012c00 	.word	0x40012c00
 80089e4:	40014000 	.word	0x40014000

080089e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e040      	b.n	8008ab8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7fa f8e4 	bl	8002c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2224      	movs	r2, #36	; 0x24
 8008a50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0201 	bic.w	r2, r2, #1
 8008a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fd2c 	bl	80094c0 <UART_SetConfig>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d101      	bne.n	8008a72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e022      	b.n	8008ab8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 ff7a 	bl	8009974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689a      	ldr	r2, [r3, #8]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0201 	orr.w	r2, r2, #1
 8008aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f801 	bl	8009ab8 <UART_CheckIdleState>
 8008ab6:	4603      	mov	r3, r0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e02b      	b.n	8008b2a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2224      	movs	r2, #36	; 0x24
 8008ad6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0201 	bic.w	r2, r2, #1
 8008ae6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2200      	movs	r2, #0
 8008af6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2200      	movs	r2, #0
 8008afe:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fa f915 	bl	8002d30 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b08a      	sub	sp, #40	; 0x28
 8008b36:	af02      	add	r7, sp, #8
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	603b      	str	r3, [r7, #0]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	f040 8082 	bne.w	8008c50 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_UART_Transmit+0x26>
 8008b52:	88fb      	ldrh	r3, [r7, #6]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e07a      	b.n	8008c52 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d101      	bne.n	8008b6a <HAL_UART_Transmit+0x38>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e073      	b.n	8008c52 <HAL_UART_Transmit+0x120>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2221      	movs	r2, #33	; 0x21
 8008b7e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b80:	f7fa fd46 	bl	8003610 <HAL_GetTick>
 8008b84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	88fa      	ldrh	r2, [r7, #6]
 8008b8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	88fa      	ldrh	r2, [r7, #6]
 8008b92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9e:	d108      	bne.n	8008bb2 <HAL_UART_Transmit+0x80>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	61bb      	str	r3, [r7, #24]
 8008bb0:	e003      	b.n	8008bba <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008bc2:	e02d      	b.n	8008c20 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2180      	movs	r1, #128	; 0x80
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 ffbb 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e039      	b.n	8008c52 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10b      	bne.n	8008bfc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	881a      	ldrh	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bf0:	b292      	uxth	r2, r2
 8008bf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	e008      	b.n	8008c0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	b292      	uxth	r2, r2
 8008c06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1cb      	bne.n	8008bc4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2200      	movs	r2, #0
 8008c34:	2140      	movs	r1, #64	; 0x40
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 ff87 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e005      	b.n	8008c52 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e000      	b.n	8008c52 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008c50:	2302      	movs	r3, #2
  }
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b08a      	sub	sp, #40	; 0x28
 8008c5e:	af02      	add	r7, sp, #8
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	603b      	str	r3, [r7, #0]
 8008c66:	4613      	mov	r3, r2
 8008c68:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c6e:	2b20      	cmp	r3, #32
 8008c70:	f040 80bf 	bne.w	8008df2 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_UART_Receive+0x26>
 8008c7a:	88fb      	ldrh	r3, [r7, #6]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e0b7      	b.n	8008df4 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d101      	bne.n	8008c92 <HAL_UART_Receive+0x38>
 8008c8e:	2302      	movs	r3, #2
 8008c90:	e0b0      	b.n	8008df4 <HAL_UART_Receive+0x19a>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2222      	movs	r2, #34	; 0x22
 8008ca6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cae:	f7fa fcaf 	bl	8003610 <HAL_GetTick>
 8008cb2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	88fa      	ldrh	r2, [r7, #6]
 8008cb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	88fa      	ldrh	r2, [r7, #6]
 8008cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ccc:	d10e      	bne.n	8008cec <HAL_UART_Receive+0x92>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d105      	bne.n	8008ce2 <HAL_UART_Receive+0x88>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ce0:	e02d      	b.n	8008d3e <HAL_UART_Receive+0xe4>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	22ff      	movs	r2, #255	; 0xff
 8008ce6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cea:	e028      	b.n	8008d3e <HAL_UART_Receive+0xe4>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10d      	bne.n	8008d10 <HAL_UART_Receive+0xb6>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d104      	bne.n	8008d06 <HAL_UART_Receive+0xac>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	22ff      	movs	r2, #255	; 0xff
 8008d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d04:	e01b      	b.n	8008d3e <HAL_UART_Receive+0xe4>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	227f      	movs	r2, #127	; 0x7f
 8008d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d0e:	e016      	b.n	8008d3e <HAL_UART_Receive+0xe4>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d18:	d10d      	bne.n	8008d36 <HAL_UART_Receive+0xdc>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d104      	bne.n	8008d2c <HAL_UART_Receive+0xd2>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	227f      	movs	r2, #127	; 0x7f
 8008d26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d2a:	e008      	b.n	8008d3e <HAL_UART_Receive+0xe4>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	223f      	movs	r2, #63	; 0x3f
 8008d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d34:	e003      	b.n	8008d3e <HAL_UART_Receive+0xe4>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d44:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d4e:	d108      	bne.n	8008d62 <HAL_UART_Receive+0x108>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d104      	bne.n	8008d62 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	61bb      	str	r3, [r7, #24]
 8008d60:	e003      	b.n	8008d6a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008d72:	e033      	b.n	8008ddc <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2120      	movs	r1, #32
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 fee3 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e032      	b.n	8008df4 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10c      	bne.n	8008dae <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	8a7b      	ldrh	r3, [r7, #18]
 8008d9e:	4013      	ands	r3, r2
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	3302      	adds	r3, #2
 8008daa:	61bb      	str	r3, [r7, #24]
 8008dac:	e00d      	b.n	8008dca <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	8a7b      	ldrh	r3, [r7, #18]
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1c5      	bne.n	8008d74 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	e000      	b.n	8008df4 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008df2:	2302      	movs	r3, #2
  }
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3720      	adds	r7, #32
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	; 0x28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d142      	bne.n	8008e98 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <HAL_UART_Receive_DMA+0x22>
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e03b      	b.n	8008e9a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d101      	bne.n	8008e30 <HAL_UART_Receive_DMA+0x34>
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	e034      	b.n	8008e9a <HAL_UART_Receive_DMA+0x9e>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a18      	ldr	r2, [pc, #96]	; (8008ea4 <HAL_UART_Receive_DMA+0xa8>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d01f      	beq.n	8008e88 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d018      	beq.n	8008e88 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	613b      	str	r3, [r7, #16]
   return(result);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	623b      	str	r3, [r7, #32]
 8008e76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	69f9      	ldr	r1, [r7, #28]
 8008e7a:	6a3a      	ldr	r2, [r7, #32]
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e6      	bne.n	8008e56 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e88:	88fb      	ldrh	r3, [r7, #6]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 ff20 	bl	8009cd4 <UART_Start_Receive_DMA>
 8008e94:	4603      	mov	r3, r0
 8008e96:	e000      	b.n	8008e9a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008e98:	2302      	movs	r3, #2
  }
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3728      	adds	r7, #40	; 0x28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	40008000 	.word	0x40008000

08008ea8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b0ba      	sub	sp, #232	; 0xe8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ece:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008ed2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d115      	bne.n	8008f10 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee8:	f003 0320 	and.w	r3, r3, #32
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00f      	beq.n	8008f10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ef4:	f003 0320 	and.w	r3, r3, #32
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d009      	beq.n	8008f10 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 82a6 	beq.w	8009452 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	4798      	blx	r3
      }
      return;
 8008f0e:	e2a0      	b.n	8009452 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8117 	beq.w	8009148 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d106      	bne.n	8008f34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008f26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008f2a:	4b85      	ldr	r3, [pc, #532]	; (8009140 <HAL_UART_IRQHandler+0x298>)
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 810a 	beq.w	8009148 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d011      	beq.n	8008f64 <HAL_UART_IRQHandler+0xbc>
 8008f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00b      	beq.n	8008f64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2201      	movs	r2, #1
 8008f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f5a:	f043 0201 	orr.w	r2, r3, #1
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d011      	beq.n	8008f94 <HAL_UART_IRQHandler+0xec>
 8008f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00b      	beq.n	8008f94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2202      	movs	r2, #2
 8008f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f8a:	f043 0204 	orr.w	r2, r3, #4
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d011      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x11c>
 8008fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fba:	f043 0202 	orr.w	r2, r3, #2
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d017      	beq.n	8009000 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d105      	bne.n	8008fe8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fe0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00b      	beq.n	8009000 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2208      	movs	r2, #8
 8008fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff6:	f043 0208 	orr.w	r2, r3, #8
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009008:	2b00      	cmp	r3, #0
 800900a:	d012      	beq.n	8009032 <HAL_UART_IRQHandler+0x18a>
 800900c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00c      	beq.n	8009032 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009028:	f043 0220 	orr.w	r2, r3, #32
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 820c 	beq.w	8009456 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800903e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00d      	beq.n	8009066 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800904a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	2b00      	cmp	r3, #0
 8009054:	d007      	beq.n	8009066 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800906c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907a:	2b40      	cmp	r3, #64	; 0x40
 800907c:	d005      	beq.n	800908a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800907e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009082:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009086:	2b00      	cmp	r3, #0
 8009088:	d04f      	beq.n	800912a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 feee 	bl	8009e6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	2b40      	cmp	r3, #64	; 0x40
 800909c:	d141      	bne.n	8009122 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3308      	adds	r3, #8
 80090c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1d9      	bne.n	800909e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d013      	beq.n	800911a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	4a13      	ldr	r2, [pc, #76]	; (8009144 <HAL_UART_IRQHandler+0x29c>)
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fc fdd6 	bl	8005cb0 <HAL_DMA_Abort_IT>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d017      	beq.n	800913a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009114:	4610      	mov	r0, r2
 8009116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009118:	e00f      	b.n	800913a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9ba 	bl	8009494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009120:	e00b      	b.n	800913a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f9b6 	bl	8009494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009128:	e007      	b.n	800913a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f9b2 	bl	8009494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009138:	e18d      	b.n	8009456 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800913a:	bf00      	nop
    return;
 800913c:	e18b      	b.n	8009456 <HAL_UART_IRQHandler+0x5ae>
 800913e:	bf00      	nop
 8009140:	04000120 	.word	0x04000120
 8009144:	0800a10b 	.word	0x0800a10b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800914c:	2b01      	cmp	r3, #1
 800914e:	f040 8146 	bne.w	80093de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009156:	f003 0310 	and.w	r3, r3, #16
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 813f 	beq.w	80093de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 8138 	beq.w	80093de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2210      	movs	r2, #16
 8009174:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009180:	2b40      	cmp	r3, #64	; 0x40
 8009182:	f040 80b4 	bne.w	80092ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009192:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 815f 	beq.w	800945a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80091a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091a6:	429a      	cmp	r2, r3
 80091a8:	f080 8157 	bcs.w	800945a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 0320 	and.w	r3, r3, #32
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f040 8085 	bne.w	80092d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009202:	e841 2300 	strex	r3, r2, [r1]
 8009206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800920a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1da      	bne.n	80091c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3308      	adds	r3, #8
 8009218:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009224:	f023 0301 	bic.w	r3, r3, #1
 8009228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3308      	adds	r3, #8
 8009232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009236:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800923a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800923e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e1      	bne.n	8009212 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3308      	adds	r3, #8
 8009254:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800925e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3308      	adds	r3, #8
 800926e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e3      	bne.n	800924e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a2:	f023 0310 	bic.w	r3, r3, #16
 80092a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80092b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e4      	bne.n	8009292 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fc fcb1 	bl	8005c34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092de:	b29b      	uxth	r3, r3
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f8de 	bl	80094a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092ec:	e0b5      	b.n	800945a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009308:	b29b      	uxth	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 80a7 	beq.w	800945e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8009310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 80a2 	beq.w	800945e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800932e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800933c:	647b      	str	r3, [r7, #68]	; 0x44
 800933e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800934a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e4      	bne.n	800931a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3308      	adds	r3, #8
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	623b      	str	r3, [r7, #32]
   return(result);
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	f023 0301 	bic.w	r3, r3, #1
 8009366:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009374:	633a      	str	r2, [r7, #48]	; 0x30
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800937a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800937c:	e841 2300 	strex	r3, r2, [r1]
 8009380:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1e3      	bne.n	8009350 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2220      	movs	r2, #32
 800938c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093bc:	61fb      	str	r3, [r7, #28]
 80093be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	69b9      	ldr	r1, [r7, #24]
 80093c2:	69fa      	ldr	r2, [r7, #28]
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	617b      	str	r3, [r7, #20]
   return(result);
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e4      	bne.n	800939a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f866 	bl	80094a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093dc:	e03f      	b.n	800945e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00e      	beq.n	8009408 <HAL_UART_IRQHandler+0x560>
 80093ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d008      	beq.n	8009408 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80093fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fec2 	bl	800a18a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009406:	e02d      	b.n	8009464 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00e      	beq.n	8009432 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941c:	2b00      	cmp	r3, #0
 800941e:	d008      	beq.n	8009432 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01c      	beq.n	8009462 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	4798      	blx	r3
    }
    return;
 8009430:	e017      	b.n	8009462 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943a:	2b00      	cmp	r3, #0
 800943c:	d012      	beq.n	8009464 <HAL_UART_IRQHandler+0x5bc>
 800943e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00c      	beq.n	8009464 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fe73 	bl	800a136 <UART_EndTransmit_IT>
    return;
 8009450:	e008      	b.n	8009464 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009452:	bf00      	nop
 8009454:	e006      	b.n	8009464 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009456:	bf00      	nop
 8009458:	e004      	b.n	8009464 <HAL_UART_IRQHandler+0x5bc>
      return;
 800945a:	bf00      	nop
 800945c:	e002      	b.n	8009464 <HAL_UART_IRQHandler+0x5bc>
      return;
 800945e:	bf00      	nop
 8009460:	e000      	b.n	8009464 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009462:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009464:	37e8      	adds	r7, #232	; 0xe8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop

0800946c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094c4:	b08a      	sub	sp, #40	; 0x28
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	431a      	orrs	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	431a      	orrs	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	4b9e      	ldr	r3, [pc, #632]	; (8009768 <UART_SetConfig+0x2a8>)
 80094f0:	4013      	ands	r3, r2
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094f8:	430b      	orrs	r3, r1
 80094fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	68da      	ldr	r2, [r3, #12]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a93      	ldr	r2, [pc, #588]	; (800976c <UART_SetConfig+0x2ac>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d004      	beq.n	800952c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009528:	4313      	orrs	r3, r2
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800953c:	430a      	orrs	r2, r1
 800953e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a8a      	ldr	r2, [pc, #552]	; (8009770 <UART_SetConfig+0x2b0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d126      	bne.n	8009598 <UART_SetConfig+0xd8>
 800954a:	4b8a      	ldr	r3, [pc, #552]	; (8009774 <UART_SetConfig+0x2b4>)
 800954c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009550:	f003 0303 	and.w	r3, r3, #3
 8009554:	2b03      	cmp	r3, #3
 8009556:	d81b      	bhi.n	8009590 <UART_SetConfig+0xd0>
 8009558:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <UART_SetConfig+0xa0>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009571 	.word	0x08009571
 8009564:	08009581 	.word	0x08009581
 8009568:	08009579 	.word	0x08009579
 800956c:	08009589 	.word	0x08009589
 8009570:	2301      	movs	r3, #1
 8009572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009576:	e0ab      	b.n	80096d0 <UART_SetConfig+0x210>
 8009578:	2302      	movs	r3, #2
 800957a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800957e:	e0a7      	b.n	80096d0 <UART_SetConfig+0x210>
 8009580:	2304      	movs	r3, #4
 8009582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009586:	e0a3      	b.n	80096d0 <UART_SetConfig+0x210>
 8009588:	2308      	movs	r3, #8
 800958a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800958e:	e09f      	b.n	80096d0 <UART_SetConfig+0x210>
 8009590:	2310      	movs	r3, #16
 8009592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009596:	e09b      	b.n	80096d0 <UART_SetConfig+0x210>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a76      	ldr	r2, [pc, #472]	; (8009778 <UART_SetConfig+0x2b8>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d138      	bne.n	8009614 <UART_SetConfig+0x154>
 80095a2:	4b74      	ldr	r3, [pc, #464]	; (8009774 <UART_SetConfig+0x2b4>)
 80095a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a8:	f003 030c 	and.w	r3, r3, #12
 80095ac:	2b0c      	cmp	r3, #12
 80095ae:	d82d      	bhi.n	800960c <UART_SetConfig+0x14c>
 80095b0:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <UART_SetConfig+0xf8>)
 80095b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b6:	bf00      	nop
 80095b8:	080095ed 	.word	0x080095ed
 80095bc:	0800960d 	.word	0x0800960d
 80095c0:	0800960d 	.word	0x0800960d
 80095c4:	0800960d 	.word	0x0800960d
 80095c8:	080095fd 	.word	0x080095fd
 80095cc:	0800960d 	.word	0x0800960d
 80095d0:	0800960d 	.word	0x0800960d
 80095d4:	0800960d 	.word	0x0800960d
 80095d8:	080095f5 	.word	0x080095f5
 80095dc:	0800960d 	.word	0x0800960d
 80095e0:	0800960d 	.word	0x0800960d
 80095e4:	0800960d 	.word	0x0800960d
 80095e8:	08009605 	.word	0x08009605
 80095ec:	2300      	movs	r3, #0
 80095ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095f2:	e06d      	b.n	80096d0 <UART_SetConfig+0x210>
 80095f4:	2302      	movs	r3, #2
 80095f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095fa:	e069      	b.n	80096d0 <UART_SetConfig+0x210>
 80095fc:	2304      	movs	r3, #4
 80095fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009602:	e065      	b.n	80096d0 <UART_SetConfig+0x210>
 8009604:	2308      	movs	r3, #8
 8009606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800960a:	e061      	b.n	80096d0 <UART_SetConfig+0x210>
 800960c:	2310      	movs	r3, #16
 800960e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009612:	e05d      	b.n	80096d0 <UART_SetConfig+0x210>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a58      	ldr	r2, [pc, #352]	; (800977c <UART_SetConfig+0x2bc>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d125      	bne.n	800966a <UART_SetConfig+0x1aa>
 800961e:	4b55      	ldr	r3, [pc, #340]	; (8009774 <UART_SetConfig+0x2b4>)
 8009620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009624:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009628:	2b30      	cmp	r3, #48	; 0x30
 800962a:	d016      	beq.n	800965a <UART_SetConfig+0x19a>
 800962c:	2b30      	cmp	r3, #48	; 0x30
 800962e:	d818      	bhi.n	8009662 <UART_SetConfig+0x1a2>
 8009630:	2b20      	cmp	r3, #32
 8009632:	d00a      	beq.n	800964a <UART_SetConfig+0x18a>
 8009634:	2b20      	cmp	r3, #32
 8009636:	d814      	bhi.n	8009662 <UART_SetConfig+0x1a2>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <UART_SetConfig+0x182>
 800963c:	2b10      	cmp	r3, #16
 800963e:	d008      	beq.n	8009652 <UART_SetConfig+0x192>
 8009640:	e00f      	b.n	8009662 <UART_SetConfig+0x1a2>
 8009642:	2300      	movs	r3, #0
 8009644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009648:	e042      	b.n	80096d0 <UART_SetConfig+0x210>
 800964a:	2302      	movs	r3, #2
 800964c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009650:	e03e      	b.n	80096d0 <UART_SetConfig+0x210>
 8009652:	2304      	movs	r3, #4
 8009654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009658:	e03a      	b.n	80096d0 <UART_SetConfig+0x210>
 800965a:	2308      	movs	r3, #8
 800965c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009660:	e036      	b.n	80096d0 <UART_SetConfig+0x210>
 8009662:	2310      	movs	r3, #16
 8009664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009668:	e032      	b.n	80096d0 <UART_SetConfig+0x210>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a3f      	ldr	r2, [pc, #252]	; (800976c <UART_SetConfig+0x2ac>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d12a      	bne.n	80096ca <UART_SetConfig+0x20a>
 8009674:	4b3f      	ldr	r3, [pc, #252]	; (8009774 <UART_SetConfig+0x2b4>)
 8009676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800967e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009682:	d01a      	beq.n	80096ba <UART_SetConfig+0x1fa>
 8009684:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009688:	d81b      	bhi.n	80096c2 <UART_SetConfig+0x202>
 800968a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800968e:	d00c      	beq.n	80096aa <UART_SetConfig+0x1ea>
 8009690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009694:	d815      	bhi.n	80096c2 <UART_SetConfig+0x202>
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <UART_SetConfig+0x1e2>
 800969a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800969e:	d008      	beq.n	80096b2 <UART_SetConfig+0x1f2>
 80096a0:	e00f      	b.n	80096c2 <UART_SetConfig+0x202>
 80096a2:	2300      	movs	r3, #0
 80096a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096a8:	e012      	b.n	80096d0 <UART_SetConfig+0x210>
 80096aa:	2302      	movs	r3, #2
 80096ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096b0:	e00e      	b.n	80096d0 <UART_SetConfig+0x210>
 80096b2:	2304      	movs	r3, #4
 80096b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096b8:	e00a      	b.n	80096d0 <UART_SetConfig+0x210>
 80096ba:	2308      	movs	r3, #8
 80096bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096c0:	e006      	b.n	80096d0 <UART_SetConfig+0x210>
 80096c2:	2310      	movs	r3, #16
 80096c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096c8:	e002      	b.n	80096d0 <UART_SetConfig+0x210>
 80096ca:	2310      	movs	r3, #16
 80096cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a25      	ldr	r2, [pc, #148]	; (800976c <UART_SetConfig+0x2ac>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	f040 808a 	bne.w	80097f0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096e0:	2b08      	cmp	r3, #8
 80096e2:	d824      	bhi.n	800972e <UART_SetConfig+0x26e>
 80096e4:	a201      	add	r2, pc, #4	; (adr r2, 80096ec <UART_SetConfig+0x22c>)
 80096e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ea:	bf00      	nop
 80096ec:	08009711 	.word	0x08009711
 80096f0:	0800972f 	.word	0x0800972f
 80096f4:	08009719 	.word	0x08009719
 80096f8:	0800972f 	.word	0x0800972f
 80096fc:	0800971f 	.word	0x0800971f
 8009700:	0800972f 	.word	0x0800972f
 8009704:	0800972f 	.word	0x0800972f
 8009708:	0800972f 	.word	0x0800972f
 800970c:	08009727 	.word	0x08009727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009710:	f7fe f984 	bl	8007a1c <HAL_RCC_GetPCLK1Freq>
 8009714:	61f8      	str	r0, [r7, #28]
        break;
 8009716:	e010      	b.n	800973a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009718:	4b19      	ldr	r3, [pc, #100]	; (8009780 <UART_SetConfig+0x2c0>)
 800971a:	61fb      	str	r3, [r7, #28]
        break;
 800971c:	e00d      	b.n	800973a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800971e:	f7fe f8e7 	bl	80078f0 <HAL_RCC_GetSysClockFreq>
 8009722:	61f8      	str	r0, [r7, #28]
        break;
 8009724:	e009      	b.n	800973a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800972a:	61fb      	str	r3, [r7, #28]
        break;
 800972c:	e005      	b.n	800973a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 8109 	beq.w	8009954 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	4413      	add	r3, r2
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	429a      	cmp	r2, r3
 8009750:	d305      	bcc.n	800975e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009758:	69fa      	ldr	r2, [r7, #28]
 800975a:	429a      	cmp	r2, r3
 800975c:	d912      	bls.n	8009784 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009764:	e0f6      	b.n	8009954 <UART_SetConfig+0x494>
 8009766:	bf00      	nop
 8009768:	efff69f3 	.word	0xefff69f3
 800976c:	40008000 	.word	0x40008000
 8009770:	40013800 	.word	0x40013800
 8009774:	40021000 	.word	0x40021000
 8009778:	40004400 	.word	0x40004400
 800977c:	40004800 	.word	0x40004800
 8009780:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	2200      	movs	r2, #0
 8009788:	461c      	mov	r4, r3
 800978a:	4615      	mov	r5, r2
 800978c:	f04f 0200 	mov.w	r2, #0
 8009790:	f04f 0300 	mov.w	r3, #0
 8009794:	022b      	lsls	r3, r5, #8
 8009796:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800979a:	0222      	lsls	r2, r4, #8
 800979c:	68f9      	ldr	r1, [r7, #12]
 800979e:	6849      	ldr	r1, [r1, #4]
 80097a0:	0849      	lsrs	r1, r1, #1
 80097a2:	2000      	movs	r0, #0
 80097a4:	4688      	mov	r8, r1
 80097a6:	4681      	mov	r9, r0
 80097a8:	eb12 0a08 	adds.w	sl, r2, r8
 80097ac:	eb43 0b09 	adc.w	fp, r3, r9
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	603b      	str	r3, [r7, #0]
 80097b8:	607a      	str	r2, [r7, #4]
 80097ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097be:	4650      	mov	r0, sl
 80097c0:	4659      	mov	r1, fp
 80097c2:	f7f7 fa41 	bl	8000c48 <__aeabi_uldivmod>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4613      	mov	r3, r2
 80097cc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097d4:	d308      	bcc.n	80097e8 <UART_SetConfig+0x328>
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097dc:	d204      	bcs.n	80097e8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	e0b5      	b.n	8009954 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80097ee:	e0b1      	b.n	8009954 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f8:	d15d      	bne.n	80098b6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80097fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097fe:	2b08      	cmp	r3, #8
 8009800:	d827      	bhi.n	8009852 <UART_SetConfig+0x392>
 8009802:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <UART_SetConfig+0x348>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	0800982d 	.word	0x0800982d
 800980c:	08009835 	.word	0x08009835
 8009810:	0800983d 	.word	0x0800983d
 8009814:	08009853 	.word	0x08009853
 8009818:	08009843 	.word	0x08009843
 800981c:	08009853 	.word	0x08009853
 8009820:	08009853 	.word	0x08009853
 8009824:	08009853 	.word	0x08009853
 8009828:	0800984b 	.word	0x0800984b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800982c:	f7fe f8f6 	bl	8007a1c <HAL_RCC_GetPCLK1Freq>
 8009830:	61f8      	str	r0, [r7, #28]
        break;
 8009832:	e014      	b.n	800985e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009834:	f7fe f908 	bl	8007a48 <HAL_RCC_GetPCLK2Freq>
 8009838:	61f8      	str	r0, [r7, #28]
        break;
 800983a:	e010      	b.n	800985e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800983c:	4b4c      	ldr	r3, [pc, #304]	; (8009970 <UART_SetConfig+0x4b0>)
 800983e:	61fb      	str	r3, [r7, #28]
        break;
 8009840:	e00d      	b.n	800985e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009842:	f7fe f855 	bl	80078f0 <HAL_RCC_GetSysClockFreq>
 8009846:	61f8      	str	r0, [r7, #28]
        break;
 8009848:	e009      	b.n	800985e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800984a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800984e:	61fb      	str	r3, [r7, #28]
        break;
 8009850:	e005      	b.n	800985e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009852:	2300      	movs	r3, #0
 8009854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800985c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d077      	beq.n	8009954 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	005a      	lsls	r2, r3, #1
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	085b      	lsrs	r3, r3, #1
 800986e:	441a      	add	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	fbb2 f3f3 	udiv	r3, r2, r3
 8009878:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	2b0f      	cmp	r3, #15
 800987e:	d916      	bls.n	80098ae <UART_SetConfig+0x3ee>
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009886:	d212      	bcs.n	80098ae <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	b29b      	uxth	r3, r3
 800988c:	f023 030f 	bic.w	r3, r3, #15
 8009890:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	085b      	lsrs	r3, r3, #1
 8009896:	b29b      	uxth	r3, r3
 8009898:	f003 0307 	and.w	r3, r3, #7
 800989c:	b29a      	uxth	r2, r3
 800989e:	8afb      	ldrh	r3, [r7, #22]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	8afa      	ldrh	r2, [r7, #22]
 80098aa:	60da      	str	r2, [r3, #12]
 80098ac:	e052      	b.n	8009954 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80098b4:	e04e      	b.n	8009954 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098ba:	2b08      	cmp	r3, #8
 80098bc:	d827      	bhi.n	800990e <UART_SetConfig+0x44e>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0x404>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	0800990f 	.word	0x0800990f
 80098d4:	080098ff 	.word	0x080098ff
 80098d8:	0800990f 	.word	0x0800990f
 80098dc:	0800990f 	.word	0x0800990f
 80098e0:	0800990f 	.word	0x0800990f
 80098e4:	08009907 	.word	0x08009907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098e8:	f7fe f898 	bl	8007a1c <HAL_RCC_GetPCLK1Freq>
 80098ec:	61f8      	str	r0, [r7, #28]
        break;
 80098ee:	e014      	b.n	800991a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098f0:	f7fe f8aa 	bl	8007a48 <HAL_RCC_GetPCLK2Freq>
 80098f4:	61f8      	str	r0, [r7, #28]
        break;
 80098f6:	e010      	b.n	800991a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098f8:	4b1d      	ldr	r3, [pc, #116]	; (8009970 <UART_SetConfig+0x4b0>)
 80098fa:	61fb      	str	r3, [r7, #28]
        break;
 80098fc:	e00d      	b.n	800991a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098fe:	f7fd fff7 	bl	80078f0 <HAL_RCC_GetSysClockFreq>
 8009902:	61f8      	str	r0, [r7, #28]
        break;
 8009904:	e009      	b.n	800991a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800990a:	61fb      	str	r3, [r7, #28]
        break;
 800990c:	e005      	b.n	800991a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009918:	bf00      	nop
    }

    if (pclk != 0U)
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d019      	beq.n	8009954 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	085a      	lsrs	r2, r3, #1
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	441a      	add	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009932:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	2b0f      	cmp	r3, #15
 8009938:	d909      	bls.n	800994e <UART_SetConfig+0x48e>
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009940:	d205      	bcs.n	800994e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	b29a      	uxth	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	60da      	str	r2, [r3, #12]
 800994c:	e002      	b.n	8009954 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009960:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009964:	4618      	mov	r0, r3
 8009966:	3728      	adds	r7, #40	; 0x28
 8009968:	46bd      	mov	sp, r7
 800996a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800996e:	bf00      	nop
 8009970:	00f42400 	.word	0x00f42400

08009974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00a      	beq.n	800999e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00a      	beq.n	80099e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	f003 0308 	and.w	r3, r3, #8
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00a      	beq.n	8009a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	f003 0310 	and.w	r3, r3, #16
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00a      	beq.n	8009a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	f003 0320 	and.w	r3, r3, #32
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00a      	beq.n	8009a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01a      	beq.n	8009a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a72:	d10a      	bne.n	8009a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00a      	beq.n	8009aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	605a      	str	r2, [r3, #4]
  }
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ac8:	f7f9 fda2 	bl	8003610 <HAL_GetTick>
 8009acc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0308 	and.w	r3, r3, #8
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	d10e      	bne.n	8009afa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f82d 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e023      	b.n	8009b42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d10e      	bne.n	8009b26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f817 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d001      	beq.n	8009b26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e00d      	b.n	8009b42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2220      	movs	r2, #32
 8009b30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b09c      	sub	sp, #112	; 0x70
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	603b      	str	r3, [r7, #0]
 8009b56:	4613      	mov	r3, r2
 8009b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b5a:	e0a5      	b.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b62:	f000 80a1 	beq.w	8009ca8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b66:	f7f9 fd53 	bl	8003610 <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d302      	bcc.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x32>
 8009b76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d13e      	bne.n	8009bfa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b90:	667b      	str	r3, [r7, #100]	; 0x64
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ba0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e6      	bne.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	f023 0301 	bic.w	r3, r3, #1
 8009bc4:	663b      	str	r3, [r7, #96]	; 0x60
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009bce:	64ba      	str	r2, [r7, #72]	; 0x48
 8009bd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e5      	bne.n	8009bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2220      	movs	r2, #32
 8009be6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2220      	movs	r2, #32
 8009bec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e067      	b.n	8009cca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d04f      	beq.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c16:	d147      	bne.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	e853 3f00 	ldrex	r3, [r3]
 8009c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c40:	637b      	str	r3, [r7, #52]	; 0x34
 8009c42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c48:	e841 2300 	strex	r3, r2, [r1]
 8009c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1e6      	bne.n	8009c22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3308      	adds	r3, #8
 8009c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	e853 3f00 	ldrex	r3, [r3]
 8009c62:	613b      	str	r3, [r7, #16]
   return(result);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f023 0301 	bic.w	r3, r3, #1
 8009c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3308      	adds	r3, #8
 8009c72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c74:	623a      	str	r2, [r7, #32]
 8009c76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c78:	69f9      	ldr	r1, [r7, #28]
 8009c7a:	6a3a      	ldr	r2, [r7, #32]
 8009c7c:	e841 2300 	strex	r3, r2, [r1]
 8009c80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1e5      	bne.n	8009c54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2220      	movs	r2, #32
 8009c92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e010      	b.n	8009cca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	69da      	ldr	r2, [r3, #28]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	bf0c      	ite	eq
 8009cb8:	2301      	moveq	r3, #1
 8009cba:	2300      	movne	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	f43f af4a 	beq.w	8009b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3770      	adds	r7, #112	; 0x70
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b096      	sub	sp, #88	; 0x58
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	88fa      	ldrh	r2, [r7, #6]
 8009cec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2222      	movs	r2, #34	; 0x22
 8009cfc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d02b      	beq.n	8009d5e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0a:	4a42      	ldr	r2, [pc, #264]	; (8009e14 <UART_Start_Receive_DMA+0x140>)
 8009d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d12:	4a41      	ldr	r2, [pc, #260]	; (8009e18 <UART_Start_Receive_DMA+0x144>)
 8009d14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1a:	4a40      	ldr	r2, [pc, #256]	; (8009e1c <UART_Start_Receive_DMA+0x148>)
 8009d1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d22:	2200      	movs	r2, #0
 8009d24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3324      	adds	r3, #36	; 0x24
 8009d30:	4619      	mov	r1, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d36:	461a      	mov	r2, r3
 8009d38:	88fb      	ldrh	r3, [r7, #6]
 8009d3a:	f7fb ff1b 	bl	8005b74 <HAL_DMA_Start_IT>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00c      	beq.n	8009d5e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2210      	movs	r2, #16
 8009d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2220      	movs	r2, #32
 8009d58:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e055      	b.n	8009e0a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d018      	beq.n	8009da0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d82:	657b      	str	r3, [r7, #84]	; 0x54
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	461a      	mov	r2, r3
 8009d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d8e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d94:	e841 2300 	strex	r3, r2, [r1]
 8009d98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1e6      	bne.n	8009d6e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3308      	adds	r3, #8
 8009da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	e853 3f00 	ldrex	r3, [r3]
 8009dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	f043 0301 	orr.w	r3, r3, #1
 8009db6:	653b      	str	r3, [r7, #80]	; 0x50
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dc0:	637a      	str	r2, [r7, #52]	; 0x34
 8009dc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dc8:	e841 2300 	strex	r3, r2, [r1]
 8009dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e5      	bne.n	8009da0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3308      	adds	r3, #8
 8009dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	613b      	str	r3, [r7, #16]
   return(result);
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3308      	adds	r3, #8
 8009df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009df4:	623a      	str	r2, [r7, #32]
 8009df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df8:	69f9      	ldr	r1, [r7, #28]
 8009dfa:	6a3a      	ldr	r2, [r7, #32]
 8009dfc:	e841 2300 	strex	r3, r2, [r1]
 8009e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e5      	bne.n	8009dd4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3758      	adds	r7, #88	; 0x58
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	08009f33 	.word	0x08009f33
 8009e18:	0800a057 	.word	0x0800a057
 8009e1c:	0800a08f 	.word	0x0800a08f

08009e20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b089      	sub	sp, #36	; 0x24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e3c:	61fb      	str	r3, [r7, #28]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	61bb      	str	r3, [r7, #24]
 8009e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6979      	ldr	r1, [r7, #20]
 8009e4c:	69ba      	ldr	r2, [r7, #24]
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	613b      	str	r3, [r7, #16]
   return(result);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e6      	bne.n	8009e28 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009e60:	bf00      	nop
 8009e62:	3724      	adds	r7, #36	; 0x24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b095      	sub	sp, #84	; 0x54
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e92:	643b      	str	r3, [r7, #64]	; 0x40
 8009e94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e6      	bne.n	8009e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3308      	adds	r3, #8
 8009eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	e853 3f00 	ldrex	r3, [r3]
 8009eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	f023 0301 	bic.w	r3, r3, #1
 8009ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3308      	adds	r3, #8
 8009ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1e5      	bne.n	8009ea6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d118      	bne.n	8009f14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f023 0310 	bic.w	r3, r3, #16
 8009ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f00:	61bb      	str	r3, [r7, #24]
 8009f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6979      	ldr	r1, [r7, #20]
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e6      	bne.n	8009ee2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2220      	movs	r2, #32
 8009f18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009f26:	bf00      	nop
 8009f28:	3754      	adds	r7, #84	; 0x54
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b09c      	sub	sp, #112	; 0x70
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0320 	and.w	r3, r3, #32
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d170      	bne.n	800a030 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8009f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f50:	2200      	movs	r2, #0
 8009f52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f74:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f7c:	e841 2300 	strex	r3, r2, [r1]
 8009f80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1e6      	bne.n	8009f56 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f92:	e853 3f00 	ldrex	r3, [r3]
 8009f96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9a:	f023 0301 	bic.w	r3, r3, #1
 8009f9e:	667b      	str	r3, [r7, #100]	; 0x64
 8009fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3308      	adds	r3, #8
 8009fa6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009fa8:	647a      	str	r2, [r7, #68]	; 0x44
 8009faa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fb0:	e841 2300 	strex	r3, r2, [r1]
 8009fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e5      	bne.n	8009f88 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	623b      	str	r3, [r7, #32]
   return(result);
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8009fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3308      	adds	r3, #8
 8009fda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fdc:	633a      	str	r2, [r7, #48]	; 0x30
 8009fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e5      	bne.n	8009fbc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d118      	bne.n	800a030 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0310 	bic.w	r3, r3, #16
 800a012:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a01c:	61fb      	str	r3, [r7, #28]
 800a01e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	69b9      	ldr	r1, [r7, #24]
 800a022:	69fa      	ldr	r2, [r7, #28]
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	617b      	str	r3, [r7, #20]
   return(result);
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e6      	bne.n	8009ffe <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a034:	2b01      	cmp	r3, #1
 800a036:	d107      	bne.n	800a048 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a03a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a03e:	4619      	mov	r1, r3
 800a040:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a042:	f7ff fa31 	bl	80094a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a046:	e002      	b.n	800a04e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a048:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a04a:	f7f7 fab3 	bl	80015b4 <HAL_UART_RxCpltCallback>
}
 800a04e:	bf00      	nop
 800a050:	3770      	adds	r7, #112	; 0x70
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a062:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d109      	bne.n	800a080 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a072:	085b      	lsrs	r3, r3, #1
 800a074:	b29b      	uxth	r3, r3
 800a076:	4619      	mov	r1, r3
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f7ff fa15 	bl	80094a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a07e:	e002      	b.n	800a086 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7ff f9fd 	bl	8009480 <HAL_UART_RxHalfCpltCallback>
}
 800a086:	bf00      	nop
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b086      	sub	sp, #24
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b2:	2b80      	cmp	r3, #128	; 0x80
 800a0b4:	d109      	bne.n	800a0ca <UART_DMAError+0x3c>
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2b21      	cmp	r3, #33	; 0x21
 800a0ba:	d106      	bne.n	800a0ca <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a0c4:	6978      	ldr	r0, [r7, #20]
 800a0c6:	f7ff feab 	bl	8009e20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d4:	2b40      	cmp	r3, #64	; 0x40
 800a0d6:	d109      	bne.n	800a0ec <UART_DMAError+0x5e>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b22      	cmp	r3, #34	; 0x22
 800a0dc:	d106      	bne.n	800a0ec <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a0e6:	6978      	ldr	r0, [r7, #20]
 800a0e8:	f7ff fec0 	bl	8009e6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0f2:	f043 0210 	orr.w	r2, r3, #16
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0fc:	6978      	ldr	r0, [r7, #20]
 800a0fe:	f7ff f9c9 	bl	8009494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a102:	bf00      	nop
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a116:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f7ff f9b3 	bl	8009494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a12e:	bf00      	nop
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b088      	sub	sp, #32
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	e853 3f00 	ldrex	r3, [r3]
 800a14a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a152:	61fb      	str	r3, [r7, #28]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	461a      	mov	r2, r3
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	61bb      	str	r3, [r7, #24]
 800a15e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a160:	6979      	ldr	r1, [r7, #20]
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	e841 2300 	strex	r3, r2, [r1]
 800a168:	613b      	str	r3, [r7, #16]
   return(result);
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e6      	bne.n	800a13e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff f975 	bl	800946c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a182:	bf00      	nop
 800a184:	3720      	adds	r7, #32
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b083      	sub	sp, #12
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a192:	bf00      	nop
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <__errno>:
 800a1a0:	4b01      	ldr	r3, [pc, #4]	; (800a1a8 <__errno+0x8>)
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	2000018c 	.word	0x2000018c

0800a1ac <__libc_init_array>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	4d0d      	ldr	r5, [pc, #52]	; (800a1e4 <__libc_init_array+0x38>)
 800a1b0:	4c0d      	ldr	r4, [pc, #52]	; (800a1e8 <__libc_init_array+0x3c>)
 800a1b2:	1b64      	subs	r4, r4, r5
 800a1b4:	10a4      	asrs	r4, r4, #2
 800a1b6:	2600      	movs	r6, #0
 800a1b8:	42a6      	cmp	r6, r4
 800a1ba:	d109      	bne.n	800a1d0 <__libc_init_array+0x24>
 800a1bc:	4d0b      	ldr	r5, [pc, #44]	; (800a1ec <__libc_init_array+0x40>)
 800a1be:	4c0c      	ldr	r4, [pc, #48]	; (800a1f0 <__libc_init_array+0x44>)
 800a1c0:	f002 ff3c 	bl	800d03c <_init>
 800a1c4:	1b64      	subs	r4, r4, r5
 800a1c6:	10a4      	asrs	r4, r4, #2
 800a1c8:	2600      	movs	r6, #0
 800a1ca:	42a6      	cmp	r6, r4
 800a1cc:	d105      	bne.n	800a1da <__libc_init_array+0x2e>
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}
 800a1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1d4:	4798      	blx	r3
 800a1d6:	3601      	adds	r6, #1
 800a1d8:	e7ee      	b.n	800a1b8 <__libc_init_array+0xc>
 800a1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1de:	4798      	blx	r3
 800a1e0:	3601      	adds	r6, #1
 800a1e2:	e7f2      	b.n	800a1ca <__libc_init_array+0x1e>
 800a1e4:	0801037c 	.word	0x0801037c
 800a1e8:	0801037c 	.word	0x0801037c
 800a1ec:	0801037c 	.word	0x0801037c
 800a1f0:	08010380 	.word	0x08010380

0800a1f4 <memcpy>:
 800a1f4:	440a      	add	r2, r1
 800a1f6:	4291      	cmp	r1, r2
 800a1f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1fc:	d100      	bne.n	800a200 <memcpy+0xc>
 800a1fe:	4770      	bx	lr
 800a200:	b510      	push	{r4, lr}
 800a202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a20a:	4291      	cmp	r1, r2
 800a20c:	d1f9      	bne.n	800a202 <memcpy+0xe>
 800a20e:	bd10      	pop	{r4, pc}

0800a210 <memset>:
 800a210:	4402      	add	r2, r0
 800a212:	4603      	mov	r3, r0
 800a214:	4293      	cmp	r3, r2
 800a216:	d100      	bne.n	800a21a <memset+0xa>
 800a218:	4770      	bx	lr
 800a21a:	f803 1b01 	strb.w	r1, [r3], #1
 800a21e:	e7f9      	b.n	800a214 <memset+0x4>

0800a220 <__cvt>:
 800a220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	ec55 4b10 	vmov	r4, r5, d0
 800a228:	2d00      	cmp	r5, #0
 800a22a:	460e      	mov	r6, r1
 800a22c:	4619      	mov	r1, r3
 800a22e:	462b      	mov	r3, r5
 800a230:	bfbb      	ittet	lt
 800a232:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a236:	461d      	movlt	r5, r3
 800a238:	2300      	movge	r3, #0
 800a23a:	232d      	movlt	r3, #45	; 0x2d
 800a23c:	700b      	strb	r3, [r1, #0]
 800a23e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a240:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a244:	4691      	mov	r9, r2
 800a246:	f023 0820 	bic.w	r8, r3, #32
 800a24a:	bfbc      	itt	lt
 800a24c:	4622      	movlt	r2, r4
 800a24e:	4614      	movlt	r4, r2
 800a250:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a254:	d005      	beq.n	800a262 <__cvt+0x42>
 800a256:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a25a:	d100      	bne.n	800a25e <__cvt+0x3e>
 800a25c:	3601      	adds	r6, #1
 800a25e:	2102      	movs	r1, #2
 800a260:	e000      	b.n	800a264 <__cvt+0x44>
 800a262:	2103      	movs	r1, #3
 800a264:	ab03      	add	r3, sp, #12
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	ab02      	add	r3, sp, #8
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	ec45 4b10 	vmov	d0, r4, r5
 800a270:	4653      	mov	r3, sl
 800a272:	4632      	mov	r2, r6
 800a274:	f000 fd00 	bl	800ac78 <_dtoa_r>
 800a278:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a27c:	4607      	mov	r7, r0
 800a27e:	d102      	bne.n	800a286 <__cvt+0x66>
 800a280:	f019 0f01 	tst.w	r9, #1
 800a284:	d022      	beq.n	800a2cc <__cvt+0xac>
 800a286:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a28a:	eb07 0906 	add.w	r9, r7, r6
 800a28e:	d110      	bne.n	800a2b2 <__cvt+0x92>
 800a290:	783b      	ldrb	r3, [r7, #0]
 800a292:	2b30      	cmp	r3, #48	; 0x30
 800a294:	d10a      	bne.n	800a2ac <__cvt+0x8c>
 800a296:	2200      	movs	r2, #0
 800a298:	2300      	movs	r3, #0
 800a29a:	4620      	mov	r0, r4
 800a29c:	4629      	mov	r1, r5
 800a29e:	f7f6 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2a2:	b918      	cbnz	r0, 800a2ac <__cvt+0x8c>
 800a2a4:	f1c6 0601 	rsb	r6, r6, #1
 800a2a8:	f8ca 6000 	str.w	r6, [sl]
 800a2ac:	f8da 3000 	ldr.w	r3, [sl]
 800a2b0:	4499      	add	r9, r3
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f6 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2be:	b108      	cbz	r0, 800a2c4 <__cvt+0xa4>
 800a2c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2c4:	2230      	movs	r2, #48	; 0x30
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	454b      	cmp	r3, r9
 800a2ca:	d307      	bcc.n	800a2dc <__cvt+0xbc>
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2d0:	1bdb      	subs	r3, r3, r7
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	b004      	add	sp, #16
 800a2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2dc:	1c59      	adds	r1, r3, #1
 800a2de:	9103      	str	r1, [sp, #12]
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	e7f0      	b.n	800a2c6 <__cvt+0xa6>

0800a2e4 <__exponent>:
 800a2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2900      	cmp	r1, #0
 800a2ea:	bfb8      	it	lt
 800a2ec:	4249      	neglt	r1, r1
 800a2ee:	f803 2b02 	strb.w	r2, [r3], #2
 800a2f2:	bfb4      	ite	lt
 800a2f4:	222d      	movlt	r2, #45	; 0x2d
 800a2f6:	222b      	movge	r2, #43	; 0x2b
 800a2f8:	2909      	cmp	r1, #9
 800a2fa:	7042      	strb	r2, [r0, #1]
 800a2fc:	dd2a      	ble.n	800a354 <__exponent+0x70>
 800a2fe:	f10d 0407 	add.w	r4, sp, #7
 800a302:	46a4      	mov	ip, r4
 800a304:	270a      	movs	r7, #10
 800a306:	46a6      	mov	lr, r4
 800a308:	460a      	mov	r2, r1
 800a30a:	fb91 f6f7 	sdiv	r6, r1, r7
 800a30e:	fb07 1516 	mls	r5, r7, r6, r1
 800a312:	3530      	adds	r5, #48	; 0x30
 800a314:	2a63      	cmp	r2, #99	; 0x63
 800a316:	f104 34ff 	add.w	r4, r4, #4294967295
 800a31a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a31e:	4631      	mov	r1, r6
 800a320:	dcf1      	bgt.n	800a306 <__exponent+0x22>
 800a322:	3130      	adds	r1, #48	; 0x30
 800a324:	f1ae 0502 	sub.w	r5, lr, #2
 800a328:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a32c:	1c44      	adds	r4, r0, #1
 800a32e:	4629      	mov	r1, r5
 800a330:	4561      	cmp	r1, ip
 800a332:	d30a      	bcc.n	800a34a <__exponent+0x66>
 800a334:	f10d 0209 	add.w	r2, sp, #9
 800a338:	eba2 020e 	sub.w	r2, r2, lr
 800a33c:	4565      	cmp	r5, ip
 800a33e:	bf88      	it	hi
 800a340:	2200      	movhi	r2, #0
 800a342:	4413      	add	r3, r2
 800a344:	1a18      	subs	r0, r3, r0
 800a346:	b003      	add	sp, #12
 800a348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a34e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a352:	e7ed      	b.n	800a330 <__exponent+0x4c>
 800a354:	2330      	movs	r3, #48	; 0x30
 800a356:	3130      	adds	r1, #48	; 0x30
 800a358:	7083      	strb	r3, [r0, #2]
 800a35a:	70c1      	strb	r1, [r0, #3]
 800a35c:	1d03      	adds	r3, r0, #4
 800a35e:	e7f1      	b.n	800a344 <__exponent+0x60>

0800a360 <_printf_float>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	ed2d 8b02 	vpush	{d8}
 800a368:	b08d      	sub	sp, #52	; 0x34
 800a36a:	460c      	mov	r4, r1
 800a36c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a370:	4616      	mov	r6, r2
 800a372:	461f      	mov	r7, r3
 800a374:	4605      	mov	r5, r0
 800a376:	f001 fa6d 	bl	800b854 <_localeconv_r>
 800a37a:	f8d0 a000 	ldr.w	sl, [r0]
 800a37e:	4650      	mov	r0, sl
 800a380:	f7f5 ff26 	bl	80001d0 <strlen>
 800a384:	2300      	movs	r3, #0
 800a386:	930a      	str	r3, [sp, #40]	; 0x28
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	9305      	str	r3, [sp, #20]
 800a38c:	f8d8 3000 	ldr.w	r3, [r8]
 800a390:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a394:	3307      	adds	r3, #7
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	f103 0208 	add.w	r2, r3, #8
 800a39e:	f8c8 2000 	str.w	r2, [r8]
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a3aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a3ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3b2:	9307      	str	r3, [sp, #28]
 800a3b4:	f8cd 8018 	str.w	r8, [sp, #24]
 800a3b8:	ee08 0a10 	vmov	s16, r0
 800a3bc:	4b9f      	ldr	r3, [pc, #636]	; (800a63c <_printf_float+0x2dc>)
 800a3be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3c6:	f7f6 fbb1 	bl	8000b2c <__aeabi_dcmpun>
 800a3ca:	bb88      	cbnz	r0, 800a430 <_printf_float+0xd0>
 800a3cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3d0:	4b9a      	ldr	r3, [pc, #616]	; (800a63c <_printf_float+0x2dc>)
 800a3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d6:	f7f6 fb8b 	bl	8000af0 <__aeabi_dcmple>
 800a3da:	bb48      	cbnz	r0, 800a430 <_printf_float+0xd0>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2300      	movs	r3, #0
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f6 fb7a 	bl	8000adc <__aeabi_dcmplt>
 800a3e8:	b110      	cbz	r0, 800a3f0 <_printf_float+0x90>
 800a3ea:	232d      	movs	r3, #45	; 0x2d
 800a3ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3f0:	4b93      	ldr	r3, [pc, #588]	; (800a640 <_printf_float+0x2e0>)
 800a3f2:	4894      	ldr	r0, [pc, #592]	; (800a644 <_printf_float+0x2e4>)
 800a3f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3f8:	bf94      	ite	ls
 800a3fa:	4698      	movls	r8, r3
 800a3fc:	4680      	movhi	r8, r0
 800a3fe:	2303      	movs	r3, #3
 800a400:	6123      	str	r3, [r4, #16]
 800a402:	9b05      	ldr	r3, [sp, #20]
 800a404:	f023 0204 	bic.w	r2, r3, #4
 800a408:	6022      	str	r2, [r4, #0]
 800a40a:	f04f 0900 	mov.w	r9, #0
 800a40e:	9700      	str	r7, [sp, #0]
 800a410:	4633      	mov	r3, r6
 800a412:	aa0b      	add	r2, sp, #44	; 0x2c
 800a414:	4621      	mov	r1, r4
 800a416:	4628      	mov	r0, r5
 800a418:	f000 f9d8 	bl	800a7cc <_printf_common>
 800a41c:	3001      	adds	r0, #1
 800a41e:	f040 8090 	bne.w	800a542 <_printf_float+0x1e2>
 800a422:	f04f 30ff 	mov.w	r0, #4294967295
 800a426:	b00d      	add	sp, #52	; 0x34
 800a428:	ecbd 8b02 	vpop	{d8}
 800a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a430:	4642      	mov	r2, r8
 800a432:	464b      	mov	r3, r9
 800a434:	4640      	mov	r0, r8
 800a436:	4649      	mov	r1, r9
 800a438:	f7f6 fb78 	bl	8000b2c <__aeabi_dcmpun>
 800a43c:	b140      	cbz	r0, 800a450 <_printf_float+0xf0>
 800a43e:	464b      	mov	r3, r9
 800a440:	2b00      	cmp	r3, #0
 800a442:	bfbc      	itt	lt
 800a444:	232d      	movlt	r3, #45	; 0x2d
 800a446:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a44a:	487f      	ldr	r0, [pc, #508]	; (800a648 <_printf_float+0x2e8>)
 800a44c:	4b7f      	ldr	r3, [pc, #508]	; (800a64c <_printf_float+0x2ec>)
 800a44e:	e7d1      	b.n	800a3f4 <_printf_float+0x94>
 800a450:	6863      	ldr	r3, [r4, #4]
 800a452:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a456:	9206      	str	r2, [sp, #24]
 800a458:	1c5a      	adds	r2, r3, #1
 800a45a:	d13f      	bne.n	800a4dc <_printf_float+0x17c>
 800a45c:	2306      	movs	r3, #6
 800a45e:	6063      	str	r3, [r4, #4]
 800a460:	9b05      	ldr	r3, [sp, #20]
 800a462:	6861      	ldr	r1, [r4, #4]
 800a464:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a468:	2300      	movs	r3, #0
 800a46a:	9303      	str	r3, [sp, #12]
 800a46c:	ab0a      	add	r3, sp, #40	; 0x28
 800a46e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a472:	ab09      	add	r3, sp, #36	; 0x24
 800a474:	ec49 8b10 	vmov	d0, r8, r9
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	6022      	str	r2, [r4, #0]
 800a47c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a480:	4628      	mov	r0, r5
 800a482:	f7ff fecd 	bl	800a220 <__cvt>
 800a486:	9b06      	ldr	r3, [sp, #24]
 800a488:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a48a:	2b47      	cmp	r3, #71	; 0x47
 800a48c:	4680      	mov	r8, r0
 800a48e:	d108      	bne.n	800a4a2 <_printf_float+0x142>
 800a490:	1cc8      	adds	r0, r1, #3
 800a492:	db02      	blt.n	800a49a <_printf_float+0x13a>
 800a494:	6863      	ldr	r3, [r4, #4]
 800a496:	4299      	cmp	r1, r3
 800a498:	dd41      	ble.n	800a51e <_printf_float+0x1be>
 800a49a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a49e:	fa5f fb8b 	uxtb.w	fp, fp
 800a4a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4a6:	d820      	bhi.n	800a4ea <_printf_float+0x18a>
 800a4a8:	3901      	subs	r1, #1
 800a4aa:	465a      	mov	r2, fp
 800a4ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a4b0:	9109      	str	r1, [sp, #36]	; 0x24
 800a4b2:	f7ff ff17 	bl	800a2e4 <__exponent>
 800a4b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4b8:	1813      	adds	r3, r2, r0
 800a4ba:	2a01      	cmp	r2, #1
 800a4bc:	4681      	mov	r9, r0
 800a4be:	6123      	str	r3, [r4, #16]
 800a4c0:	dc02      	bgt.n	800a4c8 <_printf_float+0x168>
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	07d2      	lsls	r2, r2, #31
 800a4c6:	d501      	bpl.n	800a4cc <_printf_float+0x16c>
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	6123      	str	r3, [r4, #16]
 800a4cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d09c      	beq.n	800a40e <_printf_float+0xae>
 800a4d4:	232d      	movs	r3, #45	; 0x2d
 800a4d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4da:	e798      	b.n	800a40e <_printf_float+0xae>
 800a4dc:	9a06      	ldr	r2, [sp, #24]
 800a4de:	2a47      	cmp	r2, #71	; 0x47
 800a4e0:	d1be      	bne.n	800a460 <_printf_float+0x100>
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1bc      	bne.n	800a460 <_printf_float+0x100>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e7b9      	b.n	800a45e <_printf_float+0xfe>
 800a4ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4ee:	d118      	bne.n	800a522 <_printf_float+0x1c2>
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	6863      	ldr	r3, [r4, #4]
 800a4f4:	dd0b      	ble.n	800a50e <_printf_float+0x1ae>
 800a4f6:	6121      	str	r1, [r4, #16]
 800a4f8:	b913      	cbnz	r3, 800a500 <_printf_float+0x1a0>
 800a4fa:	6822      	ldr	r2, [r4, #0]
 800a4fc:	07d0      	lsls	r0, r2, #31
 800a4fe:	d502      	bpl.n	800a506 <_printf_float+0x1a6>
 800a500:	3301      	adds	r3, #1
 800a502:	440b      	add	r3, r1
 800a504:	6123      	str	r3, [r4, #16]
 800a506:	65a1      	str	r1, [r4, #88]	; 0x58
 800a508:	f04f 0900 	mov.w	r9, #0
 800a50c:	e7de      	b.n	800a4cc <_printf_float+0x16c>
 800a50e:	b913      	cbnz	r3, 800a516 <_printf_float+0x1b6>
 800a510:	6822      	ldr	r2, [r4, #0]
 800a512:	07d2      	lsls	r2, r2, #31
 800a514:	d501      	bpl.n	800a51a <_printf_float+0x1ba>
 800a516:	3302      	adds	r3, #2
 800a518:	e7f4      	b.n	800a504 <_printf_float+0x1a4>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e7f2      	b.n	800a504 <_printf_float+0x1a4>
 800a51e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a524:	4299      	cmp	r1, r3
 800a526:	db05      	blt.n	800a534 <_printf_float+0x1d4>
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	6121      	str	r1, [r4, #16]
 800a52c:	07d8      	lsls	r0, r3, #31
 800a52e:	d5ea      	bpl.n	800a506 <_printf_float+0x1a6>
 800a530:	1c4b      	adds	r3, r1, #1
 800a532:	e7e7      	b.n	800a504 <_printf_float+0x1a4>
 800a534:	2900      	cmp	r1, #0
 800a536:	bfd4      	ite	le
 800a538:	f1c1 0202 	rsble	r2, r1, #2
 800a53c:	2201      	movgt	r2, #1
 800a53e:	4413      	add	r3, r2
 800a540:	e7e0      	b.n	800a504 <_printf_float+0x1a4>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	055a      	lsls	r2, r3, #21
 800a546:	d407      	bmi.n	800a558 <_printf_float+0x1f8>
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	4642      	mov	r2, r8
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	d12c      	bne.n	800a5b0 <_printf_float+0x250>
 800a556:	e764      	b.n	800a422 <_printf_float+0xc2>
 800a558:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a55c:	f240 80e0 	bls.w	800a720 <_printf_float+0x3c0>
 800a560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a564:	2200      	movs	r2, #0
 800a566:	2300      	movs	r3, #0
 800a568:	f7f6 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d034      	beq.n	800a5da <_printf_float+0x27a>
 800a570:	4a37      	ldr	r2, [pc, #220]	; (800a650 <_printf_float+0x2f0>)
 800a572:	2301      	movs	r3, #1
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f af51 	beq.w	800a422 <_printf_float+0xc2>
 800a580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a584:	429a      	cmp	r2, r3
 800a586:	db02      	blt.n	800a58e <_printf_float+0x22e>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	07d8      	lsls	r0, r3, #31
 800a58c:	d510      	bpl.n	800a5b0 <_printf_float+0x250>
 800a58e:	ee18 3a10 	vmov	r3, s16
 800a592:	4652      	mov	r2, sl
 800a594:	4631      	mov	r1, r6
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f af41 	beq.w	800a422 <_printf_float+0xc2>
 800a5a0:	f04f 0800 	mov.w	r8, #0
 800a5a4:	f104 091a 	add.w	r9, r4, #26
 800a5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	4543      	cmp	r3, r8
 800a5ae:	dc09      	bgt.n	800a5c4 <_printf_float+0x264>
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	079b      	lsls	r3, r3, #30
 800a5b4:	f100 8105 	bmi.w	800a7c2 <_printf_float+0x462>
 800a5b8:	68e0      	ldr	r0, [r4, #12]
 800a5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5bc:	4298      	cmp	r0, r3
 800a5be:	bfb8      	it	lt
 800a5c0:	4618      	movlt	r0, r3
 800a5c2:	e730      	b.n	800a426 <_printf_float+0xc6>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	464a      	mov	r2, r9
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	47b8      	blx	r7
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	f43f af27 	beq.w	800a422 <_printf_float+0xc2>
 800a5d4:	f108 0801 	add.w	r8, r8, #1
 800a5d8:	e7e6      	b.n	800a5a8 <_printf_float+0x248>
 800a5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dc39      	bgt.n	800a654 <_printf_float+0x2f4>
 800a5e0:	4a1b      	ldr	r2, [pc, #108]	; (800a650 <_printf_float+0x2f0>)
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	47b8      	blx	r7
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	f43f af19 	beq.w	800a422 <_printf_float+0xc2>
 800a5f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	d102      	bne.n	800a5fe <_printf_float+0x29e>
 800a5f8:	6823      	ldr	r3, [r4, #0]
 800a5fa:	07d9      	lsls	r1, r3, #31
 800a5fc:	d5d8      	bpl.n	800a5b0 <_printf_float+0x250>
 800a5fe:	ee18 3a10 	vmov	r3, s16
 800a602:	4652      	mov	r2, sl
 800a604:	4631      	mov	r1, r6
 800a606:	4628      	mov	r0, r5
 800a608:	47b8      	blx	r7
 800a60a:	3001      	adds	r0, #1
 800a60c:	f43f af09 	beq.w	800a422 <_printf_float+0xc2>
 800a610:	f04f 0900 	mov.w	r9, #0
 800a614:	f104 0a1a 	add.w	sl, r4, #26
 800a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61a:	425b      	negs	r3, r3
 800a61c:	454b      	cmp	r3, r9
 800a61e:	dc01      	bgt.n	800a624 <_printf_float+0x2c4>
 800a620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a622:	e792      	b.n	800a54a <_printf_float+0x1ea>
 800a624:	2301      	movs	r3, #1
 800a626:	4652      	mov	r2, sl
 800a628:	4631      	mov	r1, r6
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b8      	blx	r7
 800a62e:	3001      	adds	r0, #1
 800a630:	f43f aef7 	beq.w	800a422 <_printf_float+0xc2>
 800a634:	f109 0901 	add.w	r9, r9, #1
 800a638:	e7ee      	b.n	800a618 <_printf_float+0x2b8>
 800a63a:	bf00      	nop
 800a63c:	7fefffff 	.word	0x7fefffff
 800a640:	0800ffa0 	.word	0x0800ffa0
 800a644:	0800ffa4 	.word	0x0800ffa4
 800a648:	0800ffac 	.word	0x0800ffac
 800a64c:	0800ffa8 	.word	0x0800ffa8
 800a650:	0800ffb0 	.word	0x0800ffb0
 800a654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a658:	429a      	cmp	r2, r3
 800a65a:	bfa8      	it	ge
 800a65c:	461a      	movge	r2, r3
 800a65e:	2a00      	cmp	r2, #0
 800a660:	4691      	mov	r9, r2
 800a662:	dc37      	bgt.n	800a6d4 <_printf_float+0x374>
 800a664:	f04f 0b00 	mov.w	fp, #0
 800a668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a66c:	f104 021a 	add.w	r2, r4, #26
 800a670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a672:	9305      	str	r3, [sp, #20]
 800a674:	eba3 0309 	sub.w	r3, r3, r9
 800a678:	455b      	cmp	r3, fp
 800a67a:	dc33      	bgt.n	800a6e4 <_printf_float+0x384>
 800a67c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a680:	429a      	cmp	r2, r3
 800a682:	db3b      	blt.n	800a6fc <_printf_float+0x39c>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	07da      	lsls	r2, r3, #31
 800a688:	d438      	bmi.n	800a6fc <_printf_float+0x39c>
 800a68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a68c:	9a05      	ldr	r2, [sp, #20]
 800a68e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a690:	1a9a      	subs	r2, r3, r2
 800a692:	eba3 0901 	sub.w	r9, r3, r1
 800a696:	4591      	cmp	r9, r2
 800a698:	bfa8      	it	ge
 800a69a:	4691      	movge	r9, r2
 800a69c:	f1b9 0f00 	cmp.w	r9, #0
 800a6a0:	dc35      	bgt.n	800a70e <_printf_float+0x3ae>
 800a6a2:	f04f 0800 	mov.w	r8, #0
 800a6a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6aa:	f104 0a1a 	add.w	sl, r4, #26
 800a6ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6b2:	1a9b      	subs	r3, r3, r2
 800a6b4:	eba3 0309 	sub.w	r3, r3, r9
 800a6b8:	4543      	cmp	r3, r8
 800a6ba:	f77f af79 	ble.w	800a5b0 <_printf_float+0x250>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	4652      	mov	r2, sl
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	47b8      	blx	r7
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	f43f aeaa 	beq.w	800a422 <_printf_float+0xc2>
 800a6ce:	f108 0801 	add.w	r8, r8, #1
 800a6d2:	e7ec      	b.n	800a6ae <_printf_float+0x34e>
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	4642      	mov	r2, r8
 800a6da:	4628      	mov	r0, r5
 800a6dc:	47b8      	blx	r7
 800a6de:	3001      	adds	r0, #1
 800a6e0:	d1c0      	bne.n	800a664 <_printf_float+0x304>
 800a6e2:	e69e      	b.n	800a422 <_printf_float+0xc2>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	9205      	str	r2, [sp, #20]
 800a6ec:	47b8      	blx	r7
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	f43f ae97 	beq.w	800a422 <_printf_float+0xc2>
 800a6f4:	9a05      	ldr	r2, [sp, #20]
 800a6f6:	f10b 0b01 	add.w	fp, fp, #1
 800a6fa:	e7b9      	b.n	800a670 <_printf_float+0x310>
 800a6fc:	ee18 3a10 	vmov	r3, s16
 800a700:	4652      	mov	r2, sl
 800a702:	4631      	mov	r1, r6
 800a704:	4628      	mov	r0, r5
 800a706:	47b8      	blx	r7
 800a708:	3001      	adds	r0, #1
 800a70a:	d1be      	bne.n	800a68a <_printf_float+0x32a>
 800a70c:	e689      	b.n	800a422 <_printf_float+0xc2>
 800a70e:	9a05      	ldr	r2, [sp, #20]
 800a710:	464b      	mov	r3, r9
 800a712:	4442      	add	r2, r8
 800a714:	4631      	mov	r1, r6
 800a716:	4628      	mov	r0, r5
 800a718:	47b8      	blx	r7
 800a71a:	3001      	adds	r0, #1
 800a71c:	d1c1      	bne.n	800a6a2 <_printf_float+0x342>
 800a71e:	e680      	b.n	800a422 <_printf_float+0xc2>
 800a720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a722:	2a01      	cmp	r2, #1
 800a724:	dc01      	bgt.n	800a72a <_printf_float+0x3ca>
 800a726:	07db      	lsls	r3, r3, #31
 800a728:	d538      	bpl.n	800a79c <_printf_float+0x43c>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4642      	mov	r2, r8
 800a72e:	4631      	mov	r1, r6
 800a730:	4628      	mov	r0, r5
 800a732:	47b8      	blx	r7
 800a734:	3001      	adds	r0, #1
 800a736:	f43f ae74 	beq.w	800a422 <_printf_float+0xc2>
 800a73a:	ee18 3a10 	vmov	r3, s16
 800a73e:	4652      	mov	r2, sl
 800a740:	4631      	mov	r1, r6
 800a742:	4628      	mov	r0, r5
 800a744:	47b8      	blx	r7
 800a746:	3001      	adds	r0, #1
 800a748:	f43f ae6b 	beq.w	800a422 <_printf_float+0xc2>
 800a74c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a750:	2200      	movs	r2, #0
 800a752:	2300      	movs	r3, #0
 800a754:	f7f6 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a758:	b9d8      	cbnz	r0, 800a792 <_printf_float+0x432>
 800a75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a75c:	f108 0201 	add.w	r2, r8, #1
 800a760:	3b01      	subs	r3, #1
 800a762:	4631      	mov	r1, r6
 800a764:	4628      	mov	r0, r5
 800a766:	47b8      	blx	r7
 800a768:	3001      	adds	r0, #1
 800a76a:	d10e      	bne.n	800a78a <_printf_float+0x42a>
 800a76c:	e659      	b.n	800a422 <_printf_float+0xc2>
 800a76e:	2301      	movs	r3, #1
 800a770:	4652      	mov	r2, sl
 800a772:	4631      	mov	r1, r6
 800a774:	4628      	mov	r0, r5
 800a776:	47b8      	blx	r7
 800a778:	3001      	adds	r0, #1
 800a77a:	f43f ae52 	beq.w	800a422 <_printf_float+0xc2>
 800a77e:	f108 0801 	add.w	r8, r8, #1
 800a782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a784:	3b01      	subs	r3, #1
 800a786:	4543      	cmp	r3, r8
 800a788:	dcf1      	bgt.n	800a76e <_printf_float+0x40e>
 800a78a:	464b      	mov	r3, r9
 800a78c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a790:	e6dc      	b.n	800a54c <_printf_float+0x1ec>
 800a792:	f04f 0800 	mov.w	r8, #0
 800a796:	f104 0a1a 	add.w	sl, r4, #26
 800a79a:	e7f2      	b.n	800a782 <_printf_float+0x422>
 800a79c:	2301      	movs	r3, #1
 800a79e:	4642      	mov	r2, r8
 800a7a0:	e7df      	b.n	800a762 <_printf_float+0x402>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	464a      	mov	r2, r9
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	47b8      	blx	r7
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	f43f ae38 	beq.w	800a422 <_printf_float+0xc2>
 800a7b2:	f108 0801 	add.w	r8, r8, #1
 800a7b6:	68e3      	ldr	r3, [r4, #12]
 800a7b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7ba:	1a5b      	subs	r3, r3, r1
 800a7bc:	4543      	cmp	r3, r8
 800a7be:	dcf0      	bgt.n	800a7a2 <_printf_float+0x442>
 800a7c0:	e6fa      	b.n	800a5b8 <_printf_float+0x258>
 800a7c2:	f04f 0800 	mov.w	r8, #0
 800a7c6:	f104 0919 	add.w	r9, r4, #25
 800a7ca:	e7f4      	b.n	800a7b6 <_printf_float+0x456>

0800a7cc <_printf_common>:
 800a7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d0:	4616      	mov	r6, r2
 800a7d2:	4699      	mov	r9, r3
 800a7d4:	688a      	ldr	r2, [r1, #8]
 800a7d6:	690b      	ldr	r3, [r1, #16]
 800a7d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	bfb8      	it	lt
 800a7e0:	4613      	movlt	r3, r2
 800a7e2:	6033      	str	r3, [r6, #0]
 800a7e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	b10a      	cbz	r2, 800a7f2 <_printf_common+0x26>
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	6033      	str	r3, [r6, #0]
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	0699      	lsls	r1, r3, #26
 800a7f6:	bf42      	ittt	mi
 800a7f8:	6833      	ldrmi	r3, [r6, #0]
 800a7fa:	3302      	addmi	r3, #2
 800a7fc:	6033      	strmi	r3, [r6, #0]
 800a7fe:	6825      	ldr	r5, [r4, #0]
 800a800:	f015 0506 	ands.w	r5, r5, #6
 800a804:	d106      	bne.n	800a814 <_printf_common+0x48>
 800a806:	f104 0a19 	add.w	sl, r4, #25
 800a80a:	68e3      	ldr	r3, [r4, #12]
 800a80c:	6832      	ldr	r2, [r6, #0]
 800a80e:	1a9b      	subs	r3, r3, r2
 800a810:	42ab      	cmp	r3, r5
 800a812:	dc26      	bgt.n	800a862 <_printf_common+0x96>
 800a814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a818:	1e13      	subs	r3, r2, #0
 800a81a:	6822      	ldr	r2, [r4, #0]
 800a81c:	bf18      	it	ne
 800a81e:	2301      	movne	r3, #1
 800a820:	0692      	lsls	r2, r2, #26
 800a822:	d42b      	bmi.n	800a87c <_printf_common+0xb0>
 800a824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a828:	4649      	mov	r1, r9
 800a82a:	4638      	mov	r0, r7
 800a82c:	47c0      	blx	r8
 800a82e:	3001      	adds	r0, #1
 800a830:	d01e      	beq.n	800a870 <_printf_common+0xa4>
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	68e5      	ldr	r5, [r4, #12]
 800a836:	6832      	ldr	r2, [r6, #0]
 800a838:	f003 0306 	and.w	r3, r3, #6
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	bf08      	it	eq
 800a840:	1aad      	subeq	r5, r5, r2
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	6922      	ldr	r2, [r4, #16]
 800a846:	bf0c      	ite	eq
 800a848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a84c:	2500      	movne	r5, #0
 800a84e:	4293      	cmp	r3, r2
 800a850:	bfc4      	itt	gt
 800a852:	1a9b      	subgt	r3, r3, r2
 800a854:	18ed      	addgt	r5, r5, r3
 800a856:	2600      	movs	r6, #0
 800a858:	341a      	adds	r4, #26
 800a85a:	42b5      	cmp	r5, r6
 800a85c:	d11a      	bne.n	800a894 <_printf_common+0xc8>
 800a85e:	2000      	movs	r0, #0
 800a860:	e008      	b.n	800a874 <_printf_common+0xa8>
 800a862:	2301      	movs	r3, #1
 800a864:	4652      	mov	r2, sl
 800a866:	4649      	mov	r1, r9
 800a868:	4638      	mov	r0, r7
 800a86a:	47c0      	blx	r8
 800a86c:	3001      	adds	r0, #1
 800a86e:	d103      	bne.n	800a878 <_printf_common+0xac>
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a878:	3501      	adds	r5, #1
 800a87a:	e7c6      	b.n	800a80a <_printf_common+0x3e>
 800a87c:	18e1      	adds	r1, r4, r3
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	2030      	movs	r0, #48	; 0x30
 800a882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a886:	4422      	add	r2, r4
 800a888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a88c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a890:	3302      	adds	r3, #2
 800a892:	e7c7      	b.n	800a824 <_printf_common+0x58>
 800a894:	2301      	movs	r3, #1
 800a896:	4622      	mov	r2, r4
 800a898:	4649      	mov	r1, r9
 800a89a:	4638      	mov	r0, r7
 800a89c:	47c0      	blx	r8
 800a89e:	3001      	adds	r0, #1
 800a8a0:	d0e6      	beq.n	800a870 <_printf_common+0xa4>
 800a8a2:	3601      	adds	r6, #1
 800a8a4:	e7d9      	b.n	800a85a <_printf_common+0x8e>
	...

0800a8a8 <_printf_i>:
 800a8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ac:	7e0f      	ldrb	r7, [r1, #24]
 800a8ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8b0:	2f78      	cmp	r7, #120	; 0x78
 800a8b2:	4691      	mov	r9, r2
 800a8b4:	4680      	mov	r8, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	469a      	mov	sl, r3
 800a8ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a8be:	d807      	bhi.n	800a8d0 <_printf_i+0x28>
 800a8c0:	2f62      	cmp	r7, #98	; 0x62
 800a8c2:	d80a      	bhi.n	800a8da <_printf_i+0x32>
 800a8c4:	2f00      	cmp	r7, #0
 800a8c6:	f000 80d8 	beq.w	800aa7a <_printf_i+0x1d2>
 800a8ca:	2f58      	cmp	r7, #88	; 0x58
 800a8cc:	f000 80a3 	beq.w	800aa16 <_printf_i+0x16e>
 800a8d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8d8:	e03a      	b.n	800a950 <_printf_i+0xa8>
 800a8da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8de:	2b15      	cmp	r3, #21
 800a8e0:	d8f6      	bhi.n	800a8d0 <_printf_i+0x28>
 800a8e2:	a101      	add	r1, pc, #4	; (adr r1, 800a8e8 <_printf_i+0x40>)
 800a8e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8e8:	0800a941 	.word	0x0800a941
 800a8ec:	0800a955 	.word	0x0800a955
 800a8f0:	0800a8d1 	.word	0x0800a8d1
 800a8f4:	0800a8d1 	.word	0x0800a8d1
 800a8f8:	0800a8d1 	.word	0x0800a8d1
 800a8fc:	0800a8d1 	.word	0x0800a8d1
 800a900:	0800a955 	.word	0x0800a955
 800a904:	0800a8d1 	.word	0x0800a8d1
 800a908:	0800a8d1 	.word	0x0800a8d1
 800a90c:	0800a8d1 	.word	0x0800a8d1
 800a910:	0800a8d1 	.word	0x0800a8d1
 800a914:	0800aa61 	.word	0x0800aa61
 800a918:	0800a985 	.word	0x0800a985
 800a91c:	0800aa43 	.word	0x0800aa43
 800a920:	0800a8d1 	.word	0x0800a8d1
 800a924:	0800a8d1 	.word	0x0800a8d1
 800a928:	0800aa83 	.word	0x0800aa83
 800a92c:	0800a8d1 	.word	0x0800a8d1
 800a930:	0800a985 	.word	0x0800a985
 800a934:	0800a8d1 	.word	0x0800a8d1
 800a938:	0800a8d1 	.word	0x0800a8d1
 800a93c:	0800aa4b 	.word	0x0800aa4b
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	1d1a      	adds	r2, r3, #4
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	602a      	str	r2, [r5, #0]
 800a948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a94c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a950:	2301      	movs	r3, #1
 800a952:	e0a3      	b.n	800aa9c <_printf_i+0x1f4>
 800a954:	6820      	ldr	r0, [r4, #0]
 800a956:	6829      	ldr	r1, [r5, #0]
 800a958:	0606      	lsls	r6, r0, #24
 800a95a:	f101 0304 	add.w	r3, r1, #4
 800a95e:	d50a      	bpl.n	800a976 <_printf_i+0xce>
 800a960:	680e      	ldr	r6, [r1, #0]
 800a962:	602b      	str	r3, [r5, #0]
 800a964:	2e00      	cmp	r6, #0
 800a966:	da03      	bge.n	800a970 <_printf_i+0xc8>
 800a968:	232d      	movs	r3, #45	; 0x2d
 800a96a:	4276      	negs	r6, r6
 800a96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a970:	485e      	ldr	r0, [pc, #376]	; (800aaec <_printf_i+0x244>)
 800a972:	230a      	movs	r3, #10
 800a974:	e019      	b.n	800a9aa <_printf_i+0x102>
 800a976:	680e      	ldr	r6, [r1, #0]
 800a978:	602b      	str	r3, [r5, #0]
 800a97a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a97e:	bf18      	it	ne
 800a980:	b236      	sxthne	r6, r6
 800a982:	e7ef      	b.n	800a964 <_printf_i+0xbc>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	6820      	ldr	r0, [r4, #0]
 800a988:	1d19      	adds	r1, r3, #4
 800a98a:	6029      	str	r1, [r5, #0]
 800a98c:	0601      	lsls	r1, r0, #24
 800a98e:	d501      	bpl.n	800a994 <_printf_i+0xec>
 800a990:	681e      	ldr	r6, [r3, #0]
 800a992:	e002      	b.n	800a99a <_printf_i+0xf2>
 800a994:	0646      	lsls	r6, r0, #25
 800a996:	d5fb      	bpl.n	800a990 <_printf_i+0xe8>
 800a998:	881e      	ldrh	r6, [r3, #0]
 800a99a:	4854      	ldr	r0, [pc, #336]	; (800aaec <_printf_i+0x244>)
 800a99c:	2f6f      	cmp	r7, #111	; 0x6f
 800a99e:	bf0c      	ite	eq
 800a9a0:	2308      	moveq	r3, #8
 800a9a2:	230a      	movne	r3, #10
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9aa:	6865      	ldr	r5, [r4, #4]
 800a9ac:	60a5      	str	r5, [r4, #8]
 800a9ae:	2d00      	cmp	r5, #0
 800a9b0:	bfa2      	ittt	ge
 800a9b2:	6821      	ldrge	r1, [r4, #0]
 800a9b4:	f021 0104 	bicge.w	r1, r1, #4
 800a9b8:	6021      	strge	r1, [r4, #0]
 800a9ba:	b90e      	cbnz	r6, 800a9c0 <_printf_i+0x118>
 800a9bc:	2d00      	cmp	r5, #0
 800a9be:	d04d      	beq.n	800aa5c <_printf_i+0x1b4>
 800a9c0:	4615      	mov	r5, r2
 800a9c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9c6:	fb03 6711 	mls	r7, r3, r1, r6
 800a9ca:	5dc7      	ldrb	r7, [r0, r7]
 800a9cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9d0:	4637      	mov	r7, r6
 800a9d2:	42bb      	cmp	r3, r7
 800a9d4:	460e      	mov	r6, r1
 800a9d6:	d9f4      	bls.n	800a9c2 <_printf_i+0x11a>
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d10b      	bne.n	800a9f4 <_printf_i+0x14c>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	07de      	lsls	r6, r3, #31
 800a9e0:	d508      	bpl.n	800a9f4 <_printf_i+0x14c>
 800a9e2:	6923      	ldr	r3, [r4, #16]
 800a9e4:	6861      	ldr	r1, [r4, #4]
 800a9e6:	4299      	cmp	r1, r3
 800a9e8:	bfde      	ittt	le
 800a9ea:	2330      	movle	r3, #48	; 0x30
 800a9ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9f4:	1b52      	subs	r2, r2, r5
 800a9f6:	6122      	str	r2, [r4, #16]
 800a9f8:	f8cd a000 	str.w	sl, [sp]
 800a9fc:	464b      	mov	r3, r9
 800a9fe:	aa03      	add	r2, sp, #12
 800aa00:	4621      	mov	r1, r4
 800aa02:	4640      	mov	r0, r8
 800aa04:	f7ff fee2 	bl	800a7cc <_printf_common>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d14c      	bne.n	800aaa6 <_printf_i+0x1fe>
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	b004      	add	sp, #16
 800aa12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa16:	4835      	ldr	r0, [pc, #212]	; (800aaec <_printf_i+0x244>)
 800aa18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa1c:	6829      	ldr	r1, [r5, #0]
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa24:	6029      	str	r1, [r5, #0]
 800aa26:	061d      	lsls	r5, r3, #24
 800aa28:	d514      	bpl.n	800aa54 <_printf_i+0x1ac>
 800aa2a:	07df      	lsls	r7, r3, #31
 800aa2c:	bf44      	itt	mi
 800aa2e:	f043 0320 	orrmi.w	r3, r3, #32
 800aa32:	6023      	strmi	r3, [r4, #0]
 800aa34:	b91e      	cbnz	r6, 800aa3e <_printf_i+0x196>
 800aa36:	6823      	ldr	r3, [r4, #0]
 800aa38:	f023 0320 	bic.w	r3, r3, #32
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	2310      	movs	r3, #16
 800aa40:	e7b0      	b.n	800a9a4 <_printf_i+0xfc>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	f043 0320 	orr.w	r3, r3, #32
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	2378      	movs	r3, #120	; 0x78
 800aa4c:	4828      	ldr	r0, [pc, #160]	; (800aaf0 <_printf_i+0x248>)
 800aa4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa52:	e7e3      	b.n	800aa1c <_printf_i+0x174>
 800aa54:	0659      	lsls	r1, r3, #25
 800aa56:	bf48      	it	mi
 800aa58:	b2b6      	uxthmi	r6, r6
 800aa5a:	e7e6      	b.n	800aa2a <_printf_i+0x182>
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	e7bb      	b.n	800a9d8 <_printf_i+0x130>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	6826      	ldr	r6, [r4, #0]
 800aa64:	6961      	ldr	r1, [r4, #20]
 800aa66:	1d18      	adds	r0, r3, #4
 800aa68:	6028      	str	r0, [r5, #0]
 800aa6a:	0635      	lsls	r5, r6, #24
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	d501      	bpl.n	800aa74 <_printf_i+0x1cc>
 800aa70:	6019      	str	r1, [r3, #0]
 800aa72:	e002      	b.n	800aa7a <_printf_i+0x1d2>
 800aa74:	0670      	lsls	r0, r6, #25
 800aa76:	d5fb      	bpl.n	800aa70 <_printf_i+0x1c8>
 800aa78:	8019      	strh	r1, [r3, #0]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6123      	str	r3, [r4, #16]
 800aa7e:	4615      	mov	r5, r2
 800aa80:	e7ba      	b.n	800a9f8 <_printf_i+0x150>
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	1d1a      	adds	r2, r3, #4
 800aa86:	602a      	str	r2, [r5, #0]
 800aa88:	681d      	ldr	r5, [r3, #0]
 800aa8a:	6862      	ldr	r2, [r4, #4]
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f7f5 fba6 	bl	80001e0 <memchr>
 800aa94:	b108      	cbz	r0, 800aa9a <_printf_i+0x1f2>
 800aa96:	1b40      	subs	r0, r0, r5
 800aa98:	6060      	str	r0, [r4, #4]
 800aa9a:	6863      	ldr	r3, [r4, #4]
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa4:	e7a8      	b.n	800a9f8 <_printf_i+0x150>
 800aaa6:	6923      	ldr	r3, [r4, #16]
 800aaa8:	462a      	mov	r2, r5
 800aaaa:	4649      	mov	r1, r9
 800aaac:	4640      	mov	r0, r8
 800aaae:	47d0      	blx	sl
 800aab0:	3001      	adds	r0, #1
 800aab2:	d0ab      	beq.n	800aa0c <_printf_i+0x164>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	079b      	lsls	r3, r3, #30
 800aab8:	d413      	bmi.n	800aae2 <_printf_i+0x23a>
 800aaba:	68e0      	ldr	r0, [r4, #12]
 800aabc:	9b03      	ldr	r3, [sp, #12]
 800aabe:	4298      	cmp	r0, r3
 800aac0:	bfb8      	it	lt
 800aac2:	4618      	movlt	r0, r3
 800aac4:	e7a4      	b.n	800aa10 <_printf_i+0x168>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4632      	mov	r2, r6
 800aaca:	4649      	mov	r1, r9
 800aacc:	4640      	mov	r0, r8
 800aace:	47d0      	blx	sl
 800aad0:	3001      	adds	r0, #1
 800aad2:	d09b      	beq.n	800aa0c <_printf_i+0x164>
 800aad4:	3501      	adds	r5, #1
 800aad6:	68e3      	ldr	r3, [r4, #12]
 800aad8:	9903      	ldr	r1, [sp, #12]
 800aada:	1a5b      	subs	r3, r3, r1
 800aadc:	42ab      	cmp	r3, r5
 800aade:	dcf2      	bgt.n	800aac6 <_printf_i+0x21e>
 800aae0:	e7eb      	b.n	800aaba <_printf_i+0x212>
 800aae2:	2500      	movs	r5, #0
 800aae4:	f104 0619 	add.w	r6, r4, #25
 800aae8:	e7f5      	b.n	800aad6 <_printf_i+0x22e>
 800aaea:	bf00      	nop
 800aaec:	0800ffb2 	.word	0x0800ffb2
 800aaf0:	0800ffc3 	.word	0x0800ffc3

0800aaf4 <sniprintf>:
 800aaf4:	b40c      	push	{r2, r3}
 800aaf6:	b530      	push	{r4, r5, lr}
 800aaf8:	4b17      	ldr	r3, [pc, #92]	; (800ab58 <sniprintf+0x64>)
 800aafa:	1e0c      	subs	r4, r1, #0
 800aafc:	681d      	ldr	r5, [r3, #0]
 800aafe:	b09d      	sub	sp, #116	; 0x74
 800ab00:	da08      	bge.n	800ab14 <sniprintf+0x20>
 800ab02:	238b      	movs	r3, #139	; 0x8b
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0a:	b01d      	add	sp, #116	; 0x74
 800ab0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab10:	b002      	add	sp, #8
 800ab12:	4770      	bx	lr
 800ab14:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab18:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab1c:	bf14      	ite	ne
 800ab1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab22:	4623      	moveq	r3, r4
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	9307      	str	r3, [sp, #28]
 800ab28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab2c:	9002      	str	r0, [sp, #8]
 800ab2e:	9006      	str	r0, [sp, #24]
 800ab30:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab36:	ab21      	add	r3, sp, #132	; 0x84
 800ab38:	a902      	add	r1, sp, #8
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	9301      	str	r3, [sp, #4]
 800ab3e:	f001 fb6b 	bl	800c218 <_svfiprintf_r>
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	bfbc      	itt	lt
 800ab46:	238b      	movlt	r3, #139	; 0x8b
 800ab48:	602b      	strlt	r3, [r5, #0]
 800ab4a:	2c00      	cmp	r4, #0
 800ab4c:	d0dd      	beq.n	800ab0a <sniprintf+0x16>
 800ab4e:	9b02      	ldr	r3, [sp, #8]
 800ab50:	2200      	movs	r2, #0
 800ab52:	701a      	strb	r2, [r3, #0]
 800ab54:	e7d9      	b.n	800ab0a <sniprintf+0x16>
 800ab56:	bf00      	nop
 800ab58:	2000018c 	.word	0x2000018c

0800ab5c <quorem>:
 800ab5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	6903      	ldr	r3, [r0, #16]
 800ab62:	690c      	ldr	r4, [r1, #16]
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	4607      	mov	r7, r0
 800ab68:	f2c0 8081 	blt.w	800ac6e <quorem+0x112>
 800ab6c:	3c01      	subs	r4, #1
 800ab6e:	f101 0814 	add.w	r8, r1, #20
 800ab72:	f100 0514 	add.w	r5, r0, #20
 800ab76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab84:	3301      	adds	r3, #1
 800ab86:	429a      	cmp	r2, r3
 800ab88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab90:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab94:	d331      	bcc.n	800abfa <quorem+0x9e>
 800ab96:	f04f 0e00 	mov.w	lr, #0
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	46ac      	mov	ip, r5
 800ab9e:	46f2      	mov	sl, lr
 800aba0:	f850 2b04 	ldr.w	r2, [r0], #4
 800aba4:	b293      	uxth	r3, r2
 800aba6:	fb06 e303 	mla	r3, r6, r3, lr
 800abaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800abae:	b29b      	uxth	r3, r3
 800abb0:	ebaa 0303 	sub.w	r3, sl, r3
 800abb4:	f8dc a000 	ldr.w	sl, [ip]
 800abb8:	0c12      	lsrs	r2, r2, #16
 800abba:	fa13 f38a 	uxtah	r3, r3, sl
 800abbe:	fb06 e202 	mla	r2, r6, r2, lr
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abca:	b292      	uxth	r2, r2
 800abcc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abd4:	f8bd 3000 	ldrh.w	r3, [sp]
 800abd8:	4581      	cmp	r9, r0
 800abda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abde:	f84c 3b04 	str.w	r3, [ip], #4
 800abe2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abe6:	d2db      	bcs.n	800aba0 <quorem+0x44>
 800abe8:	f855 300b 	ldr.w	r3, [r5, fp]
 800abec:	b92b      	cbnz	r3, 800abfa <quorem+0x9e>
 800abee:	9b01      	ldr	r3, [sp, #4]
 800abf0:	3b04      	subs	r3, #4
 800abf2:	429d      	cmp	r5, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	d32e      	bcc.n	800ac56 <quorem+0xfa>
 800abf8:	613c      	str	r4, [r7, #16]
 800abfa:	4638      	mov	r0, r7
 800abfc:	f001 f8b8 	bl	800bd70 <__mcmp>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	db24      	blt.n	800ac4e <quorem+0xf2>
 800ac04:	3601      	adds	r6, #1
 800ac06:	4628      	mov	r0, r5
 800ac08:	f04f 0c00 	mov.w	ip, #0
 800ac0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac10:	f8d0 e000 	ldr.w	lr, [r0]
 800ac14:	b293      	uxth	r3, r2
 800ac16:	ebac 0303 	sub.w	r3, ip, r3
 800ac1a:	0c12      	lsrs	r2, r2, #16
 800ac1c:	fa13 f38e 	uxtah	r3, r3, lr
 800ac20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac2e:	45c1      	cmp	r9, r8
 800ac30:	f840 3b04 	str.w	r3, [r0], #4
 800ac34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac38:	d2e8      	bcs.n	800ac0c <quorem+0xb0>
 800ac3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac42:	b922      	cbnz	r2, 800ac4e <quorem+0xf2>
 800ac44:	3b04      	subs	r3, #4
 800ac46:	429d      	cmp	r5, r3
 800ac48:	461a      	mov	r2, r3
 800ac4a:	d30a      	bcc.n	800ac62 <quorem+0x106>
 800ac4c:	613c      	str	r4, [r7, #16]
 800ac4e:	4630      	mov	r0, r6
 800ac50:	b003      	add	sp, #12
 800ac52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac56:	6812      	ldr	r2, [r2, #0]
 800ac58:	3b04      	subs	r3, #4
 800ac5a:	2a00      	cmp	r2, #0
 800ac5c:	d1cc      	bne.n	800abf8 <quorem+0x9c>
 800ac5e:	3c01      	subs	r4, #1
 800ac60:	e7c7      	b.n	800abf2 <quorem+0x96>
 800ac62:	6812      	ldr	r2, [r2, #0]
 800ac64:	3b04      	subs	r3, #4
 800ac66:	2a00      	cmp	r2, #0
 800ac68:	d1f0      	bne.n	800ac4c <quorem+0xf0>
 800ac6a:	3c01      	subs	r4, #1
 800ac6c:	e7eb      	b.n	800ac46 <quorem+0xea>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e7ee      	b.n	800ac50 <quorem+0xf4>
 800ac72:	0000      	movs	r0, r0
 800ac74:	0000      	movs	r0, r0
	...

0800ac78 <_dtoa_r>:
 800ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	ed2d 8b04 	vpush	{d8-d9}
 800ac80:	ec57 6b10 	vmov	r6, r7, d0
 800ac84:	b093      	sub	sp, #76	; 0x4c
 800ac86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac8c:	9106      	str	r1, [sp, #24]
 800ac8e:	ee10 aa10 	vmov	sl, s0
 800ac92:	4604      	mov	r4, r0
 800ac94:	9209      	str	r2, [sp, #36]	; 0x24
 800ac96:	930c      	str	r3, [sp, #48]	; 0x30
 800ac98:	46bb      	mov	fp, r7
 800ac9a:	b975      	cbnz	r5, 800acba <_dtoa_r+0x42>
 800ac9c:	2010      	movs	r0, #16
 800ac9e:	f000 fddd 	bl	800b85c <malloc>
 800aca2:	4602      	mov	r2, r0
 800aca4:	6260      	str	r0, [r4, #36]	; 0x24
 800aca6:	b920      	cbnz	r0, 800acb2 <_dtoa_r+0x3a>
 800aca8:	4ba7      	ldr	r3, [pc, #668]	; (800af48 <_dtoa_r+0x2d0>)
 800acaa:	21ea      	movs	r1, #234	; 0xea
 800acac:	48a7      	ldr	r0, [pc, #668]	; (800af4c <_dtoa_r+0x2d4>)
 800acae:	f001 fbc3 	bl	800c438 <__assert_func>
 800acb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acb6:	6005      	str	r5, [r0, #0]
 800acb8:	60c5      	str	r5, [r0, #12]
 800acba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acbc:	6819      	ldr	r1, [r3, #0]
 800acbe:	b151      	cbz	r1, 800acd6 <_dtoa_r+0x5e>
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	604a      	str	r2, [r1, #4]
 800acc4:	2301      	movs	r3, #1
 800acc6:	4093      	lsls	r3, r2
 800acc8:	608b      	str	r3, [r1, #8]
 800acca:	4620      	mov	r0, r4
 800accc:	f000 fe0e 	bl	800b8ec <_Bfree>
 800acd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
 800acd6:	1e3b      	subs	r3, r7, #0
 800acd8:	bfaa      	itet	ge
 800acda:	2300      	movge	r3, #0
 800acdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ace0:	f8c8 3000 	strge.w	r3, [r8]
 800ace4:	4b9a      	ldr	r3, [pc, #616]	; (800af50 <_dtoa_r+0x2d8>)
 800ace6:	bfbc      	itt	lt
 800ace8:	2201      	movlt	r2, #1
 800acea:	f8c8 2000 	strlt.w	r2, [r8]
 800acee:	ea33 030b 	bics.w	r3, r3, fp
 800acf2:	d11b      	bne.n	800ad2c <_dtoa_r+0xb4>
 800acf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acf6:	f242 730f 	movw	r3, #9999	; 0x270f
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad00:	4333      	orrs	r3, r6
 800ad02:	f000 8592 	beq.w	800b82a <_dtoa_r+0xbb2>
 800ad06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad08:	b963      	cbnz	r3, 800ad24 <_dtoa_r+0xac>
 800ad0a:	4b92      	ldr	r3, [pc, #584]	; (800af54 <_dtoa_r+0x2dc>)
 800ad0c:	e022      	b.n	800ad54 <_dtoa_r+0xdc>
 800ad0e:	4b92      	ldr	r3, [pc, #584]	; (800af58 <_dtoa_r+0x2e0>)
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	3308      	adds	r3, #8
 800ad14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad16:	6013      	str	r3, [r2, #0]
 800ad18:	9801      	ldr	r0, [sp, #4]
 800ad1a:	b013      	add	sp, #76	; 0x4c
 800ad1c:	ecbd 8b04 	vpop	{d8-d9}
 800ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	4b8b      	ldr	r3, [pc, #556]	; (800af54 <_dtoa_r+0x2dc>)
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	3303      	adds	r3, #3
 800ad2a:	e7f3      	b.n	800ad14 <_dtoa_r+0x9c>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	4650      	mov	r0, sl
 800ad32:	4659      	mov	r1, fp
 800ad34:	f7f5 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad38:	ec4b ab19 	vmov	d9, sl, fp
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	b158      	cbz	r0, 800ad58 <_dtoa_r+0xe0>
 800ad40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad42:	2301      	movs	r3, #1
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 856b 	beq.w	800b824 <_dtoa_r+0xbac>
 800ad4e:	4883      	ldr	r0, [pc, #524]	; (800af5c <_dtoa_r+0x2e4>)
 800ad50:	6018      	str	r0, [r3, #0]
 800ad52:	1e43      	subs	r3, r0, #1
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	e7df      	b.n	800ad18 <_dtoa_r+0xa0>
 800ad58:	ec4b ab10 	vmov	d0, sl, fp
 800ad5c:	aa10      	add	r2, sp, #64	; 0x40
 800ad5e:	a911      	add	r1, sp, #68	; 0x44
 800ad60:	4620      	mov	r0, r4
 800ad62:	f001 f8ab 	bl	800bebc <__d2b>
 800ad66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ad6a:	ee08 0a10 	vmov	s16, r0
 800ad6e:	2d00      	cmp	r5, #0
 800ad70:	f000 8084 	beq.w	800ae7c <_dtoa_r+0x204>
 800ad74:	ee19 3a90 	vmov	r3, s19
 800ad78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad80:	4656      	mov	r6, sl
 800ad82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ad8e:	4b74      	ldr	r3, [pc, #464]	; (800af60 <_dtoa_r+0x2e8>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	4630      	mov	r0, r6
 800ad94:	4639      	mov	r1, r7
 800ad96:	f7f5 fa77 	bl	8000288 <__aeabi_dsub>
 800ad9a:	a365      	add	r3, pc, #404	; (adr r3, 800af30 <_dtoa_r+0x2b8>)
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	f7f5 fc2a 	bl	80005f8 <__aeabi_dmul>
 800ada4:	a364      	add	r3, pc, #400	; (adr r3, 800af38 <_dtoa_r+0x2c0>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7f5 fa6f 	bl	800028c <__adddf3>
 800adae:	4606      	mov	r6, r0
 800adb0:	4628      	mov	r0, r5
 800adb2:	460f      	mov	r7, r1
 800adb4:	f7f5 fbb6 	bl	8000524 <__aeabi_i2d>
 800adb8:	a361      	add	r3, pc, #388	; (adr r3, 800af40 <_dtoa_r+0x2c8>)
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	f7f5 fc1b 	bl	80005f8 <__aeabi_dmul>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4630      	mov	r0, r6
 800adc8:	4639      	mov	r1, r7
 800adca:	f7f5 fa5f 	bl	800028c <__adddf3>
 800adce:	4606      	mov	r6, r0
 800add0:	460f      	mov	r7, r1
 800add2:	f7f5 fec1 	bl	8000b58 <__aeabi_d2iz>
 800add6:	2200      	movs	r2, #0
 800add8:	9000      	str	r0, [sp, #0]
 800adda:	2300      	movs	r3, #0
 800addc:	4630      	mov	r0, r6
 800adde:	4639      	mov	r1, r7
 800ade0:	f7f5 fe7c 	bl	8000adc <__aeabi_dcmplt>
 800ade4:	b150      	cbz	r0, 800adfc <_dtoa_r+0x184>
 800ade6:	9800      	ldr	r0, [sp, #0]
 800ade8:	f7f5 fb9c 	bl	8000524 <__aeabi_i2d>
 800adec:	4632      	mov	r2, r6
 800adee:	463b      	mov	r3, r7
 800adf0:	f7f5 fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800adf4:	b910      	cbnz	r0, 800adfc <_dtoa_r+0x184>
 800adf6:	9b00      	ldr	r3, [sp, #0]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	9b00      	ldr	r3, [sp, #0]
 800adfe:	2b16      	cmp	r3, #22
 800ae00:	d85a      	bhi.n	800aeb8 <_dtoa_r+0x240>
 800ae02:	9a00      	ldr	r2, [sp, #0]
 800ae04:	4b57      	ldr	r3, [pc, #348]	; (800af64 <_dtoa_r+0x2ec>)
 800ae06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	ec51 0b19 	vmov	r0, r1, d9
 800ae12:	f7f5 fe63 	bl	8000adc <__aeabi_dcmplt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d050      	beq.n	800aebc <_dtoa_r+0x244>
 800ae1a:	9b00      	ldr	r3, [sp, #0]
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	2300      	movs	r3, #0
 800ae22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae26:	1b5d      	subs	r5, r3, r5
 800ae28:	1e6b      	subs	r3, r5, #1
 800ae2a:	9305      	str	r3, [sp, #20]
 800ae2c:	bf45      	ittet	mi
 800ae2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ae32:	9304      	strmi	r3, [sp, #16]
 800ae34:	2300      	movpl	r3, #0
 800ae36:	2300      	movmi	r3, #0
 800ae38:	bf4c      	ite	mi
 800ae3a:	9305      	strmi	r3, [sp, #20]
 800ae3c:	9304      	strpl	r3, [sp, #16]
 800ae3e:	9b00      	ldr	r3, [sp, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	db3d      	blt.n	800aec0 <_dtoa_r+0x248>
 800ae44:	9b05      	ldr	r3, [sp, #20]
 800ae46:	9a00      	ldr	r2, [sp, #0]
 800ae48:	920a      	str	r2, [sp, #40]	; 0x28
 800ae4a:	4413      	add	r3, r2
 800ae4c:	9305      	str	r3, [sp, #20]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9307      	str	r3, [sp, #28]
 800ae52:	9b06      	ldr	r3, [sp, #24]
 800ae54:	2b09      	cmp	r3, #9
 800ae56:	f200 8089 	bhi.w	800af6c <_dtoa_r+0x2f4>
 800ae5a:	2b05      	cmp	r3, #5
 800ae5c:	bfc4      	itt	gt
 800ae5e:	3b04      	subgt	r3, #4
 800ae60:	9306      	strgt	r3, [sp, #24]
 800ae62:	9b06      	ldr	r3, [sp, #24]
 800ae64:	f1a3 0302 	sub.w	r3, r3, #2
 800ae68:	bfcc      	ite	gt
 800ae6a:	2500      	movgt	r5, #0
 800ae6c:	2501      	movle	r5, #1
 800ae6e:	2b03      	cmp	r3, #3
 800ae70:	f200 8087 	bhi.w	800af82 <_dtoa_r+0x30a>
 800ae74:	e8df f003 	tbb	[pc, r3]
 800ae78:	59383a2d 	.word	0x59383a2d
 800ae7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae80:	441d      	add	r5, r3
 800ae82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae86:	2b20      	cmp	r3, #32
 800ae88:	bfc1      	itttt	gt
 800ae8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ae92:	fa0b f303 	lslgt.w	r3, fp, r3
 800ae96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae9a:	bfda      	itte	le
 800ae9c:	f1c3 0320 	rsble	r3, r3, #32
 800aea0:	fa06 f003 	lslle.w	r0, r6, r3
 800aea4:	4318      	orrgt	r0, r3
 800aea6:	f7f5 fb2d 	bl	8000504 <__aeabi_ui2d>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4606      	mov	r6, r0
 800aeae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aeb2:	3d01      	subs	r5, #1
 800aeb4:	930e      	str	r3, [sp, #56]	; 0x38
 800aeb6:	e76a      	b.n	800ad8e <_dtoa_r+0x116>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e7b2      	b.n	800ae22 <_dtoa_r+0x1aa>
 800aebc:	900b      	str	r0, [sp, #44]	; 0x2c
 800aebe:	e7b1      	b.n	800ae24 <_dtoa_r+0x1ac>
 800aec0:	9b04      	ldr	r3, [sp, #16]
 800aec2:	9a00      	ldr	r2, [sp, #0]
 800aec4:	1a9b      	subs	r3, r3, r2
 800aec6:	9304      	str	r3, [sp, #16]
 800aec8:	4253      	negs	r3, r2
 800aeca:	9307      	str	r3, [sp, #28]
 800aecc:	2300      	movs	r3, #0
 800aece:	930a      	str	r3, [sp, #40]	; 0x28
 800aed0:	e7bf      	b.n	800ae52 <_dtoa_r+0x1da>
 800aed2:	2300      	movs	r3, #0
 800aed4:	9308      	str	r3, [sp, #32]
 800aed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	dc55      	bgt.n	800af88 <_dtoa_r+0x310>
 800aedc:	2301      	movs	r3, #1
 800aede:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aee2:	461a      	mov	r2, r3
 800aee4:	9209      	str	r2, [sp, #36]	; 0x24
 800aee6:	e00c      	b.n	800af02 <_dtoa_r+0x28a>
 800aee8:	2301      	movs	r3, #1
 800aeea:	e7f3      	b.n	800aed4 <_dtoa_r+0x25c>
 800aeec:	2300      	movs	r3, #0
 800aeee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef0:	9308      	str	r3, [sp, #32]
 800aef2:	9b00      	ldr	r3, [sp, #0]
 800aef4:	4413      	add	r3, r2
 800aef6:	9302      	str	r3, [sp, #8]
 800aef8:	3301      	adds	r3, #1
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	9303      	str	r3, [sp, #12]
 800aefe:	bfb8      	it	lt
 800af00:	2301      	movlt	r3, #1
 800af02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af04:	2200      	movs	r2, #0
 800af06:	6042      	str	r2, [r0, #4]
 800af08:	2204      	movs	r2, #4
 800af0a:	f102 0614 	add.w	r6, r2, #20
 800af0e:	429e      	cmp	r6, r3
 800af10:	6841      	ldr	r1, [r0, #4]
 800af12:	d93d      	bls.n	800af90 <_dtoa_r+0x318>
 800af14:	4620      	mov	r0, r4
 800af16:	f000 fca9 	bl	800b86c <_Balloc>
 800af1a:	9001      	str	r0, [sp, #4]
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d13b      	bne.n	800af98 <_dtoa_r+0x320>
 800af20:	4b11      	ldr	r3, [pc, #68]	; (800af68 <_dtoa_r+0x2f0>)
 800af22:	4602      	mov	r2, r0
 800af24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af28:	e6c0      	b.n	800acac <_dtoa_r+0x34>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e7df      	b.n	800aeee <_dtoa_r+0x276>
 800af2e:	bf00      	nop
 800af30:	636f4361 	.word	0x636f4361
 800af34:	3fd287a7 	.word	0x3fd287a7
 800af38:	8b60c8b3 	.word	0x8b60c8b3
 800af3c:	3fc68a28 	.word	0x3fc68a28
 800af40:	509f79fb 	.word	0x509f79fb
 800af44:	3fd34413 	.word	0x3fd34413
 800af48:	0800ffe1 	.word	0x0800ffe1
 800af4c:	0800fff8 	.word	0x0800fff8
 800af50:	7ff00000 	.word	0x7ff00000
 800af54:	0800ffdd 	.word	0x0800ffdd
 800af58:	0800ffd4 	.word	0x0800ffd4
 800af5c:	0800ffb1 	.word	0x0800ffb1
 800af60:	3ff80000 	.word	0x3ff80000
 800af64:	080100e8 	.word	0x080100e8
 800af68:	08010053 	.word	0x08010053
 800af6c:	2501      	movs	r5, #1
 800af6e:	2300      	movs	r3, #0
 800af70:	9306      	str	r3, [sp, #24]
 800af72:	9508      	str	r5, [sp, #32]
 800af74:	f04f 33ff 	mov.w	r3, #4294967295
 800af78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af7c:	2200      	movs	r2, #0
 800af7e:	2312      	movs	r3, #18
 800af80:	e7b0      	b.n	800aee4 <_dtoa_r+0x26c>
 800af82:	2301      	movs	r3, #1
 800af84:	9308      	str	r3, [sp, #32]
 800af86:	e7f5      	b.n	800af74 <_dtoa_r+0x2fc>
 800af88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af8e:	e7b8      	b.n	800af02 <_dtoa_r+0x28a>
 800af90:	3101      	adds	r1, #1
 800af92:	6041      	str	r1, [r0, #4]
 800af94:	0052      	lsls	r2, r2, #1
 800af96:	e7b8      	b.n	800af0a <_dtoa_r+0x292>
 800af98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af9a:	9a01      	ldr	r2, [sp, #4]
 800af9c:	601a      	str	r2, [r3, #0]
 800af9e:	9b03      	ldr	r3, [sp, #12]
 800afa0:	2b0e      	cmp	r3, #14
 800afa2:	f200 809d 	bhi.w	800b0e0 <_dtoa_r+0x468>
 800afa6:	2d00      	cmp	r5, #0
 800afa8:	f000 809a 	beq.w	800b0e0 <_dtoa_r+0x468>
 800afac:	9b00      	ldr	r3, [sp, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dd32      	ble.n	800b018 <_dtoa_r+0x3a0>
 800afb2:	4ab7      	ldr	r2, [pc, #732]	; (800b290 <_dtoa_r+0x618>)
 800afb4:	f003 030f 	and.w	r3, r3, #15
 800afb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afc0:	9b00      	ldr	r3, [sp, #0]
 800afc2:	05d8      	lsls	r0, r3, #23
 800afc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800afc8:	d516      	bpl.n	800aff8 <_dtoa_r+0x380>
 800afca:	4bb2      	ldr	r3, [pc, #712]	; (800b294 <_dtoa_r+0x61c>)
 800afcc:	ec51 0b19 	vmov	r0, r1, d9
 800afd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afd4:	f7f5 fc3a 	bl	800084c <__aeabi_ddiv>
 800afd8:	f007 070f 	and.w	r7, r7, #15
 800afdc:	4682      	mov	sl, r0
 800afde:	468b      	mov	fp, r1
 800afe0:	2503      	movs	r5, #3
 800afe2:	4eac      	ldr	r6, [pc, #688]	; (800b294 <_dtoa_r+0x61c>)
 800afe4:	b957      	cbnz	r7, 800affc <_dtoa_r+0x384>
 800afe6:	4642      	mov	r2, r8
 800afe8:	464b      	mov	r3, r9
 800afea:	4650      	mov	r0, sl
 800afec:	4659      	mov	r1, fp
 800afee:	f7f5 fc2d 	bl	800084c <__aeabi_ddiv>
 800aff2:	4682      	mov	sl, r0
 800aff4:	468b      	mov	fp, r1
 800aff6:	e028      	b.n	800b04a <_dtoa_r+0x3d2>
 800aff8:	2502      	movs	r5, #2
 800affa:	e7f2      	b.n	800afe2 <_dtoa_r+0x36a>
 800affc:	07f9      	lsls	r1, r7, #31
 800affe:	d508      	bpl.n	800b012 <_dtoa_r+0x39a>
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b008:	f7f5 faf6 	bl	80005f8 <__aeabi_dmul>
 800b00c:	3501      	adds	r5, #1
 800b00e:	4680      	mov	r8, r0
 800b010:	4689      	mov	r9, r1
 800b012:	107f      	asrs	r7, r7, #1
 800b014:	3608      	adds	r6, #8
 800b016:	e7e5      	b.n	800afe4 <_dtoa_r+0x36c>
 800b018:	f000 809b 	beq.w	800b152 <_dtoa_r+0x4da>
 800b01c:	9b00      	ldr	r3, [sp, #0]
 800b01e:	4f9d      	ldr	r7, [pc, #628]	; (800b294 <_dtoa_r+0x61c>)
 800b020:	425e      	negs	r6, r3
 800b022:	4b9b      	ldr	r3, [pc, #620]	; (800b290 <_dtoa_r+0x618>)
 800b024:	f006 020f 	and.w	r2, r6, #15
 800b028:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	ec51 0b19 	vmov	r0, r1, d9
 800b034:	f7f5 fae0 	bl	80005f8 <__aeabi_dmul>
 800b038:	1136      	asrs	r6, r6, #4
 800b03a:	4682      	mov	sl, r0
 800b03c:	468b      	mov	fp, r1
 800b03e:	2300      	movs	r3, #0
 800b040:	2502      	movs	r5, #2
 800b042:	2e00      	cmp	r6, #0
 800b044:	d17a      	bne.n	800b13c <_dtoa_r+0x4c4>
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1d3      	bne.n	800aff2 <_dtoa_r+0x37a>
 800b04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f000 8082 	beq.w	800b156 <_dtoa_r+0x4de>
 800b052:	4b91      	ldr	r3, [pc, #580]	; (800b298 <_dtoa_r+0x620>)
 800b054:	2200      	movs	r2, #0
 800b056:	4650      	mov	r0, sl
 800b058:	4659      	mov	r1, fp
 800b05a:	f7f5 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800b05e:	2800      	cmp	r0, #0
 800b060:	d079      	beq.n	800b156 <_dtoa_r+0x4de>
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d076      	beq.n	800b156 <_dtoa_r+0x4de>
 800b068:	9b02      	ldr	r3, [sp, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	dd36      	ble.n	800b0dc <_dtoa_r+0x464>
 800b06e:	9b00      	ldr	r3, [sp, #0]
 800b070:	4650      	mov	r0, sl
 800b072:	4659      	mov	r1, fp
 800b074:	1e5f      	subs	r7, r3, #1
 800b076:	2200      	movs	r2, #0
 800b078:	4b88      	ldr	r3, [pc, #544]	; (800b29c <_dtoa_r+0x624>)
 800b07a:	f7f5 fabd 	bl	80005f8 <__aeabi_dmul>
 800b07e:	9e02      	ldr	r6, [sp, #8]
 800b080:	4682      	mov	sl, r0
 800b082:	468b      	mov	fp, r1
 800b084:	3501      	adds	r5, #1
 800b086:	4628      	mov	r0, r5
 800b088:	f7f5 fa4c 	bl	8000524 <__aeabi_i2d>
 800b08c:	4652      	mov	r2, sl
 800b08e:	465b      	mov	r3, fp
 800b090:	f7f5 fab2 	bl	80005f8 <__aeabi_dmul>
 800b094:	4b82      	ldr	r3, [pc, #520]	; (800b2a0 <_dtoa_r+0x628>)
 800b096:	2200      	movs	r2, #0
 800b098:	f7f5 f8f8 	bl	800028c <__adddf3>
 800b09c:	46d0      	mov	r8, sl
 800b09e:	46d9      	mov	r9, fp
 800b0a0:	4682      	mov	sl, r0
 800b0a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b0a6:	2e00      	cmp	r6, #0
 800b0a8:	d158      	bne.n	800b15c <_dtoa_r+0x4e4>
 800b0aa:	4b7e      	ldr	r3, [pc, #504]	; (800b2a4 <_dtoa_r+0x62c>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	f7f5 f8e9 	bl	8000288 <__aeabi_dsub>
 800b0b6:	4652      	mov	r2, sl
 800b0b8:	465b      	mov	r3, fp
 800b0ba:	4680      	mov	r8, r0
 800b0bc:	4689      	mov	r9, r1
 800b0be:	f7f5 fd2b 	bl	8000b18 <__aeabi_dcmpgt>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f040 8295 	bne.w	800b5f2 <_dtoa_r+0x97a>
 800b0c8:	4652      	mov	r2, sl
 800b0ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b0ce:	4640      	mov	r0, r8
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	f7f5 fd03 	bl	8000adc <__aeabi_dcmplt>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f040 8289 	bne.w	800b5ee <_dtoa_r+0x976>
 800b0dc:	ec5b ab19 	vmov	sl, fp, d9
 800b0e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f2c0 8148 	blt.w	800b378 <_dtoa_r+0x700>
 800b0e8:	9a00      	ldr	r2, [sp, #0]
 800b0ea:	2a0e      	cmp	r2, #14
 800b0ec:	f300 8144 	bgt.w	800b378 <_dtoa_r+0x700>
 800b0f0:	4b67      	ldr	r3, [pc, #412]	; (800b290 <_dtoa_r+0x618>)
 800b0f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f280 80d5 	bge.w	800b2ac <_dtoa_r+0x634>
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	2b00      	cmp	r3, #0
 800b106:	f300 80d1 	bgt.w	800b2ac <_dtoa_r+0x634>
 800b10a:	f040 826f 	bne.w	800b5ec <_dtoa_r+0x974>
 800b10e:	4b65      	ldr	r3, [pc, #404]	; (800b2a4 <_dtoa_r+0x62c>)
 800b110:	2200      	movs	r2, #0
 800b112:	4640      	mov	r0, r8
 800b114:	4649      	mov	r1, r9
 800b116:	f7f5 fa6f 	bl	80005f8 <__aeabi_dmul>
 800b11a:	4652      	mov	r2, sl
 800b11c:	465b      	mov	r3, fp
 800b11e:	f7f5 fcf1 	bl	8000b04 <__aeabi_dcmpge>
 800b122:	9e03      	ldr	r6, [sp, #12]
 800b124:	4637      	mov	r7, r6
 800b126:	2800      	cmp	r0, #0
 800b128:	f040 8245 	bne.w	800b5b6 <_dtoa_r+0x93e>
 800b12c:	9d01      	ldr	r5, [sp, #4]
 800b12e:	2331      	movs	r3, #49	; 0x31
 800b130:	f805 3b01 	strb.w	r3, [r5], #1
 800b134:	9b00      	ldr	r3, [sp, #0]
 800b136:	3301      	adds	r3, #1
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	e240      	b.n	800b5be <_dtoa_r+0x946>
 800b13c:	07f2      	lsls	r2, r6, #31
 800b13e:	d505      	bpl.n	800b14c <_dtoa_r+0x4d4>
 800b140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b144:	f7f5 fa58 	bl	80005f8 <__aeabi_dmul>
 800b148:	3501      	adds	r5, #1
 800b14a:	2301      	movs	r3, #1
 800b14c:	1076      	asrs	r6, r6, #1
 800b14e:	3708      	adds	r7, #8
 800b150:	e777      	b.n	800b042 <_dtoa_r+0x3ca>
 800b152:	2502      	movs	r5, #2
 800b154:	e779      	b.n	800b04a <_dtoa_r+0x3d2>
 800b156:	9f00      	ldr	r7, [sp, #0]
 800b158:	9e03      	ldr	r6, [sp, #12]
 800b15a:	e794      	b.n	800b086 <_dtoa_r+0x40e>
 800b15c:	9901      	ldr	r1, [sp, #4]
 800b15e:	4b4c      	ldr	r3, [pc, #304]	; (800b290 <_dtoa_r+0x618>)
 800b160:	4431      	add	r1, r6
 800b162:	910d      	str	r1, [sp, #52]	; 0x34
 800b164:	9908      	ldr	r1, [sp, #32]
 800b166:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b16a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b16e:	2900      	cmp	r1, #0
 800b170:	d043      	beq.n	800b1fa <_dtoa_r+0x582>
 800b172:	494d      	ldr	r1, [pc, #308]	; (800b2a8 <_dtoa_r+0x630>)
 800b174:	2000      	movs	r0, #0
 800b176:	f7f5 fb69 	bl	800084c <__aeabi_ddiv>
 800b17a:	4652      	mov	r2, sl
 800b17c:	465b      	mov	r3, fp
 800b17e:	f7f5 f883 	bl	8000288 <__aeabi_dsub>
 800b182:	9d01      	ldr	r5, [sp, #4]
 800b184:	4682      	mov	sl, r0
 800b186:	468b      	mov	fp, r1
 800b188:	4649      	mov	r1, r9
 800b18a:	4640      	mov	r0, r8
 800b18c:	f7f5 fce4 	bl	8000b58 <__aeabi_d2iz>
 800b190:	4606      	mov	r6, r0
 800b192:	f7f5 f9c7 	bl	8000524 <__aeabi_i2d>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	f7f5 f873 	bl	8000288 <__aeabi_dsub>
 800b1a2:	3630      	adds	r6, #48	; 0x30
 800b1a4:	f805 6b01 	strb.w	r6, [r5], #1
 800b1a8:	4652      	mov	r2, sl
 800b1aa:	465b      	mov	r3, fp
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4689      	mov	r9, r1
 800b1b0:	f7f5 fc94 	bl	8000adc <__aeabi_dcmplt>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d163      	bne.n	800b280 <_dtoa_r+0x608>
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	4936      	ldr	r1, [pc, #216]	; (800b298 <_dtoa_r+0x620>)
 800b1be:	2000      	movs	r0, #0
 800b1c0:	f7f5 f862 	bl	8000288 <__aeabi_dsub>
 800b1c4:	4652      	mov	r2, sl
 800b1c6:	465b      	mov	r3, fp
 800b1c8:	f7f5 fc88 	bl	8000adc <__aeabi_dcmplt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f040 80b5 	bne.w	800b33c <_dtoa_r+0x6c4>
 800b1d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1d4:	429d      	cmp	r5, r3
 800b1d6:	d081      	beq.n	800b0dc <_dtoa_r+0x464>
 800b1d8:	4b30      	ldr	r3, [pc, #192]	; (800b29c <_dtoa_r+0x624>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	4650      	mov	r0, sl
 800b1de:	4659      	mov	r1, fp
 800b1e0:	f7f5 fa0a 	bl	80005f8 <__aeabi_dmul>
 800b1e4:	4b2d      	ldr	r3, [pc, #180]	; (800b29c <_dtoa_r+0x624>)
 800b1e6:	4682      	mov	sl, r0
 800b1e8:	468b      	mov	fp, r1
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f7f5 fa02 	bl	80005f8 <__aeabi_dmul>
 800b1f4:	4680      	mov	r8, r0
 800b1f6:	4689      	mov	r9, r1
 800b1f8:	e7c6      	b.n	800b188 <_dtoa_r+0x510>
 800b1fa:	4650      	mov	r0, sl
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	f7f5 f9fb 	bl	80005f8 <__aeabi_dmul>
 800b202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b204:	9d01      	ldr	r5, [sp, #4]
 800b206:	930f      	str	r3, [sp, #60]	; 0x3c
 800b208:	4682      	mov	sl, r0
 800b20a:	468b      	mov	fp, r1
 800b20c:	4649      	mov	r1, r9
 800b20e:	4640      	mov	r0, r8
 800b210:	f7f5 fca2 	bl	8000b58 <__aeabi_d2iz>
 800b214:	4606      	mov	r6, r0
 800b216:	f7f5 f985 	bl	8000524 <__aeabi_i2d>
 800b21a:	3630      	adds	r6, #48	; 0x30
 800b21c:	4602      	mov	r2, r0
 800b21e:	460b      	mov	r3, r1
 800b220:	4640      	mov	r0, r8
 800b222:	4649      	mov	r1, r9
 800b224:	f7f5 f830 	bl	8000288 <__aeabi_dsub>
 800b228:	f805 6b01 	strb.w	r6, [r5], #1
 800b22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b22e:	429d      	cmp	r5, r3
 800b230:	4680      	mov	r8, r0
 800b232:	4689      	mov	r9, r1
 800b234:	f04f 0200 	mov.w	r2, #0
 800b238:	d124      	bne.n	800b284 <_dtoa_r+0x60c>
 800b23a:	4b1b      	ldr	r3, [pc, #108]	; (800b2a8 <_dtoa_r+0x630>)
 800b23c:	4650      	mov	r0, sl
 800b23e:	4659      	mov	r1, fp
 800b240:	f7f5 f824 	bl	800028c <__adddf3>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4640      	mov	r0, r8
 800b24a:	4649      	mov	r1, r9
 800b24c:	f7f5 fc64 	bl	8000b18 <__aeabi_dcmpgt>
 800b250:	2800      	cmp	r0, #0
 800b252:	d173      	bne.n	800b33c <_dtoa_r+0x6c4>
 800b254:	4652      	mov	r2, sl
 800b256:	465b      	mov	r3, fp
 800b258:	4913      	ldr	r1, [pc, #76]	; (800b2a8 <_dtoa_r+0x630>)
 800b25a:	2000      	movs	r0, #0
 800b25c:	f7f5 f814 	bl	8000288 <__aeabi_dsub>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	4640      	mov	r0, r8
 800b266:	4649      	mov	r1, r9
 800b268:	f7f5 fc38 	bl	8000adc <__aeabi_dcmplt>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	f43f af35 	beq.w	800b0dc <_dtoa_r+0x464>
 800b272:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b274:	1e6b      	subs	r3, r5, #1
 800b276:	930f      	str	r3, [sp, #60]	; 0x3c
 800b278:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b27c:	2b30      	cmp	r3, #48	; 0x30
 800b27e:	d0f8      	beq.n	800b272 <_dtoa_r+0x5fa>
 800b280:	9700      	str	r7, [sp, #0]
 800b282:	e049      	b.n	800b318 <_dtoa_r+0x6a0>
 800b284:	4b05      	ldr	r3, [pc, #20]	; (800b29c <_dtoa_r+0x624>)
 800b286:	f7f5 f9b7 	bl	80005f8 <__aeabi_dmul>
 800b28a:	4680      	mov	r8, r0
 800b28c:	4689      	mov	r9, r1
 800b28e:	e7bd      	b.n	800b20c <_dtoa_r+0x594>
 800b290:	080100e8 	.word	0x080100e8
 800b294:	080100c0 	.word	0x080100c0
 800b298:	3ff00000 	.word	0x3ff00000
 800b29c:	40240000 	.word	0x40240000
 800b2a0:	401c0000 	.word	0x401c0000
 800b2a4:	40140000 	.word	0x40140000
 800b2a8:	3fe00000 	.word	0x3fe00000
 800b2ac:	9d01      	ldr	r5, [sp, #4]
 800b2ae:	4656      	mov	r6, sl
 800b2b0:	465f      	mov	r7, fp
 800b2b2:	4642      	mov	r2, r8
 800b2b4:	464b      	mov	r3, r9
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	f7f5 fac7 	bl	800084c <__aeabi_ddiv>
 800b2be:	f7f5 fc4b 	bl	8000b58 <__aeabi_d2iz>
 800b2c2:	4682      	mov	sl, r0
 800b2c4:	f7f5 f92e 	bl	8000524 <__aeabi_i2d>
 800b2c8:	4642      	mov	r2, r8
 800b2ca:	464b      	mov	r3, r9
 800b2cc:	f7f5 f994 	bl	80005f8 <__aeabi_dmul>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	4639      	mov	r1, r7
 800b2d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b2dc:	f7f4 ffd4 	bl	8000288 <__aeabi_dsub>
 800b2e0:	f805 6b01 	strb.w	r6, [r5], #1
 800b2e4:	9e01      	ldr	r6, [sp, #4]
 800b2e6:	9f03      	ldr	r7, [sp, #12]
 800b2e8:	1bae      	subs	r6, r5, r6
 800b2ea:	42b7      	cmp	r7, r6
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	d135      	bne.n	800b35e <_dtoa_r+0x6e6>
 800b2f2:	f7f4 ffcb 	bl	800028c <__adddf3>
 800b2f6:	4642      	mov	r2, r8
 800b2f8:	464b      	mov	r3, r9
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	460f      	mov	r7, r1
 800b2fe:	f7f5 fc0b 	bl	8000b18 <__aeabi_dcmpgt>
 800b302:	b9d0      	cbnz	r0, 800b33a <_dtoa_r+0x6c2>
 800b304:	4642      	mov	r2, r8
 800b306:	464b      	mov	r3, r9
 800b308:	4630      	mov	r0, r6
 800b30a:	4639      	mov	r1, r7
 800b30c:	f7f5 fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b310:	b110      	cbz	r0, 800b318 <_dtoa_r+0x6a0>
 800b312:	f01a 0f01 	tst.w	sl, #1
 800b316:	d110      	bne.n	800b33a <_dtoa_r+0x6c2>
 800b318:	4620      	mov	r0, r4
 800b31a:	ee18 1a10 	vmov	r1, s16
 800b31e:	f000 fae5 	bl	800b8ec <_Bfree>
 800b322:	2300      	movs	r3, #0
 800b324:	9800      	ldr	r0, [sp, #0]
 800b326:	702b      	strb	r3, [r5, #0]
 800b328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b32a:	3001      	adds	r0, #1
 800b32c:	6018      	str	r0, [r3, #0]
 800b32e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b330:	2b00      	cmp	r3, #0
 800b332:	f43f acf1 	beq.w	800ad18 <_dtoa_r+0xa0>
 800b336:	601d      	str	r5, [r3, #0]
 800b338:	e4ee      	b.n	800ad18 <_dtoa_r+0xa0>
 800b33a:	9f00      	ldr	r7, [sp, #0]
 800b33c:	462b      	mov	r3, r5
 800b33e:	461d      	mov	r5, r3
 800b340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b344:	2a39      	cmp	r2, #57	; 0x39
 800b346:	d106      	bne.n	800b356 <_dtoa_r+0x6de>
 800b348:	9a01      	ldr	r2, [sp, #4]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d1f7      	bne.n	800b33e <_dtoa_r+0x6c6>
 800b34e:	9901      	ldr	r1, [sp, #4]
 800b350:	2230      	movs	r2, #48	; 0x30
 800b352:	3701      	adds	r7, #1
 800b354:	700a      	strb	r2, [r1, #0]
 800b356:	781a      	ldrb	r2, [r3, #0]
 800b358:	3201      	adds	r2, #1
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	e790      	b.n	800b280 <_dtoa_r+0x608>
 800b35e:	4ba6      	ldr	r3, [pc, #664]	; (800b5f8 <_dtoa_r+0x980>)
 800b360:	2200      	movs	r2, #0
 800b362:	f7f5 f949 	bl	80005f8 <__aeabi_dmul>
 800b366:	2200      	movs	r2, #0
 800b368:	2300      	movs	r3, #0
 800b36a:	4606      	mov	r6, r0
 800b36c:	460f      	mov	r7, r1
 800b36e:	f7f5 fbab 	bl	8000ac8 <__aeabi_dcmpeq>
 800b372:	2800      	cmp	r0, #0
 800b374:	d09d      	beq.n	800b2b2 <_dtoa_r+0x63a>
 800b376:	e7cf      	b.n	800b318 <_dtoa_r+0x6a0>
 800b378:	9a08      	ldr	r2, [sp, #32]
 800b37a:	2a00      	cmp	r2, #0
 800b37c:	f000 80d7 	beq.w	800b52e <_dtoa_r+0x8b6>
 800b380:	9a06      	ldr	r2, [sp, #24]
 800b382:	2a01      	cmp	r2, #1
 800b384:	f300 80ba 	bgt.w	800b4fc <_dtoa_r+0x884>
 800b388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b38a:	2a00      	cmp	r2, #0
 800b38c:	f000 80b2 	beq.w	800b4f4 <_dtoa_r+0x87c>
 800b390:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b394:	9e07      	ldr	r6, [sp, #28]
 800b396:	9d04      	ldr	r5, [sp, #16]
 800b398:	9a04      	ldr	r2, [sp, #16]
 800b39a:	441a      	add	r2, r3
 800b39c:	9204      	str	r2, [sp, #16]
 800b39e:	9a05      	ldr	r2, [sp, #20]
 800b3a0:	2101      	movs	r1, #1
 800b3a2:	441a      	add	r2, r3
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	9205      	str	r2, [sp, #20]
 800b3a8:	f000 fb58 	bl	800ba5c <__i2b>
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	2d00      	cmp	r5, #0
 800b3b0:	dd0c      	ble.n	800b3cc <_dtoa_r+0x754>
 800b3b2:	9b05      	ldr	r3, [sp, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dd09      	ble.n	800b3cc <_dtoa_r+0x754>
 800b3b8:	42ab      	cmp	r3, r5
 800b3ba:	9a04      	ldr	r2, [sp, #16]
 800b3bc:	bfa8      	it	ge
 800b3be:	462b      	movge	r3, r5
 800b3c0:	1ad2      	subs	r2, r2, r3
 800b3c2:	9204      	str	r2, [sp, #16]
 800b3c4:	9a05      	ldr	r2, [sp, #20]
 800b3c6:	1aed      	subs	r5, r5, r3
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	9305      	str	r3, [sp, #20]
 800b3cc:	9b07      	ldr	r3, [sp, #28]
 800b3ce:	b31b      	cbz	r3, 800b418 <_dtoa_r+0x7a0>
 800b3d0:	9b08      	ldr	r3, [sp, #32]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 80af 	beq.w	800b536 <_dtoa_r+0x8be>
 800b3d8:	2e00      	cmp	r6, #0
 800b3da:	dd13      	ble.n	800b404 <_dtoa_r+0x78c>
 800b3dc:	4639      	mov	r1, r7
 800b3de:	4632      	mov	r2, r6
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f000 fbfb 	bl	800bbdc <__pow5mult>
 800b3e6:	ee18 2a10 	vmov	r2, s16
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f000 fb4a 	bl	800ba88 <__multiply>
 800b3f4:	ee18 1a10 	vmov	r1, s16
 800b3f8:	4680      	mov	r8, r0
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fa76 	bl	800b8ec <_Bfree>
 800b400:	ee08 8a10 	vmov	s16, r8
 800b404:	9b07      	ldr	r3, [sp, #28]
 800b406:	1b9a      	subs	r2, r3, r6
 800b408:	d006      	beq.n	800b418 <_dtoa_r+0x7a0>
 800b40a:	ee18 1a10 	vmov	r1, s16
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 fbe4 	bl	800bbdc <__pow5mult>
 800b414:	ee08 0a10 	vmov	s16, r0
 800b418:	2101      	movs	r1, #1
 800b41a:	4620      	mov	r0, r4
 800b41c:	f000 fb1e 	bl	800ba5c <__i2b>
 800b420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b422:	2b00      	cmp	r3, #0
 800b424:	4606      	mov	r6, r0
 800b426:	f340 8088 	ble.w	800b53a <_dtoa_r+0x8c2>
 800b42a:	461a      	mov	r2, r3
 800b42c:	4601      	mov	r1, r0
 800b42e:	4620      	mov	r0, r4
 800b430:	f000 fbd4 	bl	800bbdc <__pow5mult>
 800b434:	9b06      	ldr	r3, [sp, #24]
 800b436:	2b01      	cmp	r3, #1
 800b438:	4606      	mov	r6, r0
 800b43a:	f340 8081 	ble.w	800b540 <_dtoa_r+0x8c8>
 800b43e:	f04f 0800 	mov.w	r8, #0
 800b442:	6933      	ldr	r3, [r6, #16]
 800b444:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b448:	6918      	ldr	r0, [r3, #16]
 800b44a:	f000 fab7 	bl	800b9bc <__hi0bits>
 800b44e:	f1c0 0020 	rsb	r0, r0, #32
 800b452:	9b05      	ldr	r3, [sp, #20]
 800b454:	4418      	add	r0, r3
 800b456:	f010 001f 	ands.w	r0, r0, #31
 800b45a:	f000 8092 	beq.w	800b582 <_dtoa_r+0x90a>
 800b45e:	f1c0 0320 	rsb	r3, r0, #32
 800b462:	2b04      	cmp	r3, #4
 800b464:	f340 808a 	ble.w	800b57c <_dtoa_r+0x904>
 800b468:	f1c0 001c 	rsb	r0, r0, #28
 800b46c:	9b04      	ldr	r3, [sp, #16]
 800b46e:	4403      	add	r3, r0
 800b470:	9304      	str	r3, [sp, #16]
 800b472:	9b05      	ldr	r3, [sp, #20]
 800b474:	4403      	add	r3, r0
 800b476:	4405      	add	r5, r0
 800b478:	9305      	str	r3, [sp, #20]
 800b47a:	9b04      	ldr	r3, [sp, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dd07      	ble.n	800b490 <_dtoa_r+0x818>
 800b480:	ee18 1a10 	vmov	r1, s16
 800b484:	461a      	mov	r2, r3
 800b486:	4620      	mov	r0, r4
 800b488:	f000 fc02 	bl	800bc90 <__lshift>
 800b48c:	ee08 0a10 	vmov	s16, r0
 800b490:	9b05      	ldr	r3, [sp, #20]
 800b492:	2b00      	cmp	r3, #0
 800b494:	dd05      	ble.n	800b4a2 <_dtoa_r+0x82a>
 800b496:	4631      	mov	r1, r6
 800b498:	461a      	mov	r2, r3
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 fbf8 	bl	800bc90 <__lshift>
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d06e      	beq.n	800b586 <_dtoa_r+0x90e>
 800b4a8:	ee18 0a10 	vmov	r0, s16
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	f000 fc5f 	bl	800bd70 <__mcmp>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	da67      	bge.n	800b586 <_dtoa_r+0x90e>
 800b4b6:	9b00      	ldr	r3, [sp, #0]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	ee18 1a10 	vmov	r1, s16
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	220a      	movs	r2, #10
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f000 fa33 	bl	800b930 <__multadd>
 800b4ca:	9b08      	ldr	r3, [sp, #32]
 800b4cc:	ee08 0a10 	vmov	s16, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 81b1 	beq.w	800b838 <_dtoa_r+0xbc0>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4639      	mov	r1, r7
 800b4da:	220a      	movs	r2, #10
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f000 fa27 	bl	800b930 <__multadd>
 800b4e2:	9b02      	ldr	r3, [sp, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	f300 808e 	bgt.w	800b608 <_dtoa_r+0x990>
 800b4ec:	9b06      	ldr	r3, [sp, #24]
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	dc51      	bgt.n	800b596 <_dtoa_r+0x91e>
 800b4f2:	e089      	b.n	800b608 <_dtoa_r+0x990>
 800b4f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4fa:	e74b      	b.n	800b394 <_dtoa_r+0x71c>
 800b4fc:	9b03      	ldr	r3, [sp, #12]
 800b4fe:	1e5e      	subs	r6, r3, #1
 800b500:	9b07      	ldr	r3, [sp, #28]
 800b502:	42b3      	cmp	r3, r6
 800b504:	bfbf      	itttt	lt
 800b506:	9b07      	ldrlt	r3, [sp, #28]
 800b508:	9607      	strlt	r6, [sp, #28]
 800b50a:	1af2      	sublt	r2, r6, r3
 800b50c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b50e:	bfb6      	itet	lt
 800b510:	189b      	addlt	r3, r3, r2
 800b512:	1b9e      	subge	r6, r3, r6
 800b514:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b516:	9b03      	ldr	r3, [sp, #12]
 800b518:	bfb8      	it	lt
 800b51a:	2600      	movlt	r6, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfb7      	itett	lt
 800b520:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b524:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b528:	1a9d      	sublt	r5, r3, r2
 800b52a:	2300      	movlt	r3, #0
 800b52c:	e734      	b.n	800b398 <_dtoa_r+0x720>
 800b52e:	9e07      	ldr	r6, [sp, #28]
 800b530:	9d04      	ldr	r5, [sp, #16]
 800b532:	9f08      	ldr	r7, [sp, #32]
 800b534:	e73b      	b.n	800b3ae <_dtoa_r+0x736>
 800b536:	9a07      	ldr	r2, [sp, #28]
 800b538:	e767      	b.n	800b40a <_dtoa_r+0x792>
 800b53a:	9b06      	ldr	r3, [sp, #24]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	dc18      	bgt.n	800b572 <_dtoa_r+0x8fa>
 800b540:	f1ba 0f00 	cmp.w	sl, #0
 800b544:	d115      	bne.n	800b572 <_dtoa_r+0x8fa>
 800b546:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b54a:	b993      	cbnz	r3, 800b572 <_dtoa_r+0x8fa>
 800b54c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b550:	0d1b      	lsrs	r3, r3, #20
 800b552:	051b      	lsls	r3, r3, #20
 800b554:	b183      	cbz	r3, 800b578 <_dtoa_r+0x900>
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	3301      	adds	r3, #1
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	9b05      	ldr	r3, [sp, #20]
 800b55e:	3301      	adds	r3, #1
 800b560:	9305      	str	r3, [sp, #20]
 800b562:	f04f 0801 	mov.w	r8, #1
 800b566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f47f af6a 	bne.w	800b442 <_dtoa_r+0x7ca>
 800b56e:	2001      	movs	r0, #1
 800b570:	e76f      	b.n	800b452 <_dtoa_r+0x7da>
 800b572:	f04f 0800 	mov.w	r8, #0
 800b576:	e7f6      	b.n	800b566 <_dtoa_r+0x8ee>
 800b578:	4698      	mov	r8, r3
 800b57a:	e7f4      	b.n	800b566 <_dtoa_r+0x8ee>
 800b57c:	f43f af7d 	beq.w	800b47a <_dtoa_r+0x802>
 800b580:	4618      	mov	r0, r3
 800b582:	301c      	adds	r0, #28
 800b584:	e772      	b.n	800b46c <_dtoa_r+0x7f4>
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dc37      	bgt.n	800b5fc <_dtoa_r+0x984>
 800b58c:	9b06      	ldr	r3, [sp, #24]
 800b58e:	2b02      	cmp	r3, #2
 800b590:	dd34      	ble.n	800b5fc <_dtoa_r+0x984>
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	9302      	str	r3, [sp, #8]
 800b596:	9b02      	ldr	r3, [sp, #8]
 800b598:	b96b      	cbnz	r3, 800b5b6 <_dtoa_r+0x93e>
 800b59a:	4631      	mov	r1, r6
 800b59c:	2205      	movs	r2, #5
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 f9c6 	bl	800b930 <__multadd>
 800b5a4:	4601      	mov	r1, r0
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	ee18 0a10 	vmov	r0, s16
 800b5ac:	f000 fbe0 	bl	800bd70 <__mcmp>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f73f adbb 	bgt.w	800b12c <_dtoa_r+0x4b4>
 800b5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b8:	9d01      	ldr	r5, [sp, #4]
 800b5ba:	43db      	mvns	r3, r3
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	f04f 0800 	mov.w	r8, #0
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f000 f991 	bl	800b8ec <_Bfree>
 800b5ca:	2f00      	cmp	r7, #0
 800b5cc:	f43f aea4 	beq.w	800b318 <_dtoa_r+0x6a0>
 800b5d0:	f1b8 0f00 	cmp.w	r8, #0
 800b5d4:	d005      	beq.n	800b5e2 <_dtoa_r+0x96a>
 800b5d6:	45b8      	cmp	r8, r7
 800b5d8:	d003      	beq.n	800b5e2 <_dtoa_r+0x96a>
 800b5da:	4641      	mov	r1, r8
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 f985 	bl	800b8ec <_Bfree>
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f000 f981 	bl	800b8ec <_Bfree>
 800b5ea:	e695      	b.n	800b318 <_dtoa_r+0x6a0>
 800b5ec:	2600      	movs	r6, #0
 800b5ee:	4637      	mov	r7, r6
 800b5f0:	e7e1      	b.n	800b5b6 <_dtoa_r+0x93e>
 800b5f2:	9700      	str	r7, [sp, #0]
 800b5f4:	4637      	mov	r7, r6
 800b5f6:	e599      	b.n	800b12c <_dtoa_r+0x4b4>
 800b5f8:	40240000 	.word	0x40240000
 800b5fc:	9b08      	ldr	r3, [sp, #32]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 80ca 	beq.w	800b798 <_dtoa_r+0xb20>
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	9302      	str	r3, [sp, #8]
 800b608:	2d00      	cmp	r5, #0
 800b60a:	dd05      	ble.n	800b618 <_dtoa_r+0x9a0>
 800b60c:	4639      	mov	r1, r7
 800b60e:	462a      	mov	r2, r5
 800b610:	4620      	mov	r0, r4
 800b612:	f000 fb3d 	bl	800bc90 <__lshift>
 800b616:	4607      	mov	r7, r0
 800b618:	f1b8 0f00 	cmp.w	r8, #0
 800b61c:	d05b      	beq.n	800b6d6 <_dtoa_r+0xa5e>
 800b61e:	6879      	ldr	r1, [r7, #4]
 800b620:	4620      	mov	r0, r4
 800b622:	f000 f923 	bl	800b86c <_Balloc>
 800b626:	4605      	mov	r5, r0
 800b628:	b928      	cbnz	r0, 800b636 <_dtoa_r+0x9be>
 800b62a:	4b87      	ldr	r3, [pc, #540]	; (800b848 <_dtoa_r+0xbd0>)
 800b62c:	4602      	mov	r2, r0
 800b62e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b632:	f7ff bb3b 	b.w	800acac <_dtoa_r+0x34>
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	3202      	adds	r2, #2
 800b63a:	0092      	lsls	r2, r2, #2
 800b63c:	f107 010c 	add.w	r1, r7, #12
 800b640:	300c      	adds	r0, #12
 800b642:	f7fe fdd7 	bl	800a1f4 <memcpy>
 800b646:	2201      	movs	r2, #1
 800b648:	4629      	mov	r1, r5
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 fb20 	bl	800bc90 <__lshift>
 800b650:	9b01      	ldr	r3, [sp, #4]
 800b652:	f103 0901 	add.w	r9, r3, #1
 800b656:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b65a:	4413      	add	r3, r2
 800b65c:	9305      	str	r3, [sp, #20]
 800b65e:	f00a 0301 	and.w	r3, sl, #1
 800b662:	46b8      	mov	r8, r7
 800b664:	9304      	str	r3, [sp, #16]
 800b666:	4607      	mov	r7, r0
 800b668:	4631      	mov	r1, r6
 800b66a:	ee18 0a10 	vmov	r0, s16
 800b66e:	f7ff fa75 	bl	800ab5c <quorem>
 800b672:	4641      	mov	r1, r8
 800b674:	9002      	str	r0, [sp, #8]
 800b676:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b67a:	ee18 0a10 	vmov	r0, s16
 800b67e:	f000 fb77 	bl	800bd70 <__mcmp>
 800b682:	463a      	mov	r2, r7
 800b684:	9003      	str	r0, [sp, #12]
 800b686:	4631      	mov	r1, r6
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 fb8d 	bl	800bda8 <__mdiff>
 800b68e:	68c2      	ldr	r2, [r0, #12]
 800b690:	f109 3bff 	add.w	fp, r9, #4294967295
 800b694:	4605      	mov	r5, r0
 800b696:	bb02      	cbnz	r2, 800b6da <_dtoa_r+0xa62>
 800b698:	4601      	mov	r1, r0
 800b69a:	ee18 0a10 	vmov	r0, s16
 800b69e:	f000 fb67 	bl	800bd70 <__mcmp>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	9207      	str	r2, [sp, #28]
 800b6aa:	f000 f91f 	bl	800b8ec <_Bfree>
 800b6ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b6b2:	ea43 0102 	orr.w	r1, r3, r2
 800b6b6:	9b04      	ldr	r3, [sp, #16]
 800b6b8:	430b      	orrs	r3, r1
 800b6ba:	464d      	mov	r5, r9
 800b6bc:	d10f      	bne.n	800b6de <_dtoa_r+0xa66>
 800b6be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6c2:	d02a      	beq.n	800b71a <_dtoa_r+0xaa2>
 800b6c4:	9b03      	ldr	r3, [sp, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	dd02      	ble.n	800b6d0 <_dtoa_r+0xa58>
 800b6ca:	9b02      	ldr	r3, [sp, #8]
 800b6cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b6d0:	f88b a000 	strb.w	sl, [fp]
 800b6d4:	e775      	b.n	800b5c2 <_dtoa_r+0x94a>
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	e7ba      	b.n	800b650 <_dtoa_r+0x9d8>
 800b6da:	2201      	movs	r2, #1
 800b6dc:	e7e2      	b.n	800b6a4 <_dtoa_r+0xa2c>
 800b6de:	9b03      	ldr	r3, [sp, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	db04      	blt.n	800b6ee <_dtoa_r+0xa76>
 800b6e4:	9906      	ldr	r1, [sp, #24]
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	9904      	ldr	r1, [sp, #16]
 800b6ea:	430b      	orrs	r3, r1
 800b6ec:	d122      	bne.n	800b734 <_dtoa_r+0xabc>
 800b6ee:	2a00      	cmp	r2, #0
 800b6f0:	ddee      	ble.n	800b6d0 <_dtoa_r+0xa58>
 800b6f2:	ee18 1a10 	vmov	r1, s16
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f000 fac9 	bl	800bc90 <__lshift>
 800b6fe:	4631      	mov	r1, r6
 800b700:	ee08 0a10 	vmov	s16, r0
 800b704:	f000 fb34 	bl	800bd70 <__mcmp>
 800b708:	2800      	cmp	r0, #0
 800b70a:	dc03      	bgt.n	800b714 <_dtoa_r+0xa9c>
 800b70c:	d1e0      	bne.n	800b6d0 <_dtoa_r+0xa58>
 800b70e:	f01a 0f01 	tst.w	sl, #1
 800b712:	d0dd      	beq.n	800b6d0 <_dtoa_r+0xa58>
 800b714:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b718:	d1d7      	bne.n	800b6ca <_dtoa_r+0xa52>
 800b71a:	2339      	movs	r3, #57	; 0x39
 800b71c:	f88b 3000 	strb.w	r3, [fp]
 800b720:	462b      	mov	r3, r5
 800b722:	461d      	mov	r5, r3
 800b724:	3b01      	subs	r3, #1
 800b726:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b72a:	2a39      	cmp	r2, #57	; 0x39
 800b72c:	d071      	beq.n	800b812 <_dtoa_r+0xb9a>
 800b72e:	3201      	adds	r2, #1
 800b730:	701a      	strb	r2, [r3, #0]
 800b732:	e746      	b.n	800b5c2 <_dtoa_r+0x94a>
 800b734:	2a00      	cmp	r2, #0
 800b736:	dd07      	ble.n	800b748 <_dtoa_r+0xad0>
 800b738:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b73c:	d0ed      	beq.n	800b71a <_dtoa_r+0xaa2>
 800b73e:	f10a 0301 	add.w	r3, sl, #1
 800b742:	f88b 3000 	strb.w	r3, [fp]
 800b746:	e73c      	b.n	800b5c2 <_dtoa_r+0x94a>
 800b748:	9b05      	ldr	r3, [sp, #20]
 800b74a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b74e:	4599      	cmp	r9, r3
 800b750:	d047      	beq.n	800b7e2 <_dtoa_r+0xb6a>
 800b752:	ee18 1a10 	vmov	r1, s16
 800b756:	2300      	movs	r3, #0
 800b758:	220a      	movs	r2, #10
 800b75a:	4620      	mov	r0, r4
 800b75c:	f000 f8e8 	bl	800b930 <__multadd>
 800b760:	45b8      	cmp	r8, r7
 800b762:	ee08 0a10 	vmov	s16, r0
 800b766:	f04f 0300 	mov.w	r3, #0
 800b76a:	f04f 020a 	mov.w	r2, #10
 800b76e:	4641      	mov	r1, r8
 800b770:	4620      	mov	r0, r4
 800b772:	d106      	bne.n	800b782 <_dtoa_r+0xb0a>
 800b774:	f000 f8dc 	bl	800b930 <__multadd>
 800b778:	4680      	mov	r8, r0
 800b77a:	4607      	mov	r7, r0
 800b77c:	f109 0901 	add.w	r9, r9, #1
 800b780:	e772      	b.n	800b668 <_dtoa_r+0x9f0>
 800b782:	f000 f8d5 	bl	800b930 <__multadd>
 800b786:	4639      	mov	r1, r7
 800b788:	4680      	mov	r8, r0
 800b78a:	2300      	movs	r3, #0
 800b78c:	220a      	movs	r2, #10
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 f8ce 	bl	800b930 <__multadd>
 800b794:	4607      	mov	r7, r0
 800b796:	e7f1      	b.n	800b77c <_dtoa_r+0xb04>
 800b798:	9b03      	ldr	r3, [sp, #12]
 800b79a:	9302      	str	r3, [sp, #8]
 800b79c:	9d01      	ldr	r5, [sp, #4]
 800b79e:	ee18 0a10 	vmov	r0, s16
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	f7ff f9da 	bl	800ab5c <quorem>
 800b7a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7ac:	9b01      	ldr	r3, [sp, #4]
 800b7ae:	f805 ab01 	strb.w	sl, [r5], #1
 800b7b2:	1aea      	subs	r2, r5, r3
 800b7b4:	9b02      	ldr	r3, [sp, #8]
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	dd09      	ble.n	800b7ce <_dtoa_r+0xb56>
 800b7ba:	ee18 1a10 	vmov	r1, s16
 800b7be:	2300      	movs	r3, #0
 800b7c0:	220a      	movs	r2, #10
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 f8b4 	bl	800b930 <__multadd>
 800b7c8:	ee08 0a10 	vmov	s16, r0
 800b7cc:	e7e7      	b.n	800b79e <_dtoa_r+0xb26>
 800b7ce:	9b02      	ldr	r3, [sp, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	bfc8      	it	gt
 800b7d4:	461d      	movgt	r5, r3
 800b7d6:	9b01      	ldr	r3, [sp, #4]
 800b7d8:	bfd8      	it	le
 800b7da:	2501      	movle	r5, #1
 800b7dc:	441d      	add	r5, r3
 800b7de:	f04f 0800 	mov.w	r8, #0
 800b7e2:	ee18 1a10 	vmov	r1, s16
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f000 fa51 	bl	800bc90 <__lshift>
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	ee08 0a10 	vmov	s16, r0
 800b7f4:	f000 fabc 	bl	800bd70 <__mcmp>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	dc91      	bgt.n	800b720 <_dtoa_r+0xaa8>
 800b7fc:	d102      	bne.n	800b804 <_dtoa_r+0xb8c>
 800b7fe:	f01a 0f01 	tst.w	sl, #1
 800b802:	d18d      	bne.n	800b720 <_dtoa_r+0xaa8>
 800b804:	462b      	mov	r3, r5
 800b806:	461d      	mov	r5, r3
 800b808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b80c:	2a30      	cmp	r2, #48	; 0x30
 800b80e:	d0fa      	beq.n	800b806 <_dtoa_r+0xb8e>
 800b810:	e6d7      	b.n	800b5c2 <_dtoa_r+0x94a>
 800b812:	9a01      	ldr	r2, [sp, #4]
 800b814:	429a      	cmp	r2, r3
 800b816:	d184      	bne.n	800b722 <_dtoa_r+0xaaa>
 800b818:	9b00      	ldr	r3, [sp, #0]
 800b81a:	3301      	adds	r3, #1
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	2331      	movs	r3, #49	; 0x31
 800b820:	7013      	strb	r3, [r2, #0]
 800b822:	e6ce      	b.n	800b5c2 <_dtoa_r+0x94a>
 800b824:	4b09      	ldr	r3, [pc, #36]	; (800b84c <_dtoa_r+0xbd4>)
 800b826:	f7ff ba95 	b.w	800ad54 <_dtoa_r+0xdc>
 800b82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f47f aa6e 	bne.w	800ad0e <_dtoa_r+0x96>
 800b832:	4b07      	ldr	r3, [pc, #28]	; (800b850 <_dtoa_r+0xbd8>)
 800b834:	f7ff ba8e 	b.w	800ad54 <_dtoa_r+0xdc>
 800b838:	9b02      	ldr	r3, [sp, #8]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dcae      	bgt.n	800b79c <_dtoa_r+0xb24>
 800b83e:	9b06      	ldr	r3, [sp, #24]
 800b840:	2b02      	cmp	r3, #2
 800b842:	f73f aea8 	bgt.w	800b596 <_dtoa_r+0x91e>
 800b846:	e7a9      	b.n	800b79c <_dtoa_r+0xb24>
 800b848:	08010053 	.word	0x08010053
 800b84c:	0800ffb0 	.word	0x0800ffb0
 800b850:	0800ffd4 	.word	0x0800ffd4

0800b854 <_localeconv_r>:
 800b854:	4800      	ldr	r0, [pc, #0]	; (800b858 <_localeconv_r+0x4>)
 800b856:	4770      	bx	lr
 800b858:	200002e0 	.word	0x200002e0

0800b85c <malloc>:
 800b85c:	4b02      	ldr	r3, [pc, #8]	; (800b868 <malloc+0xc>)
 800b85e:	4601      	mov	r1, r0
 800b860:	6818      	ldr	r0, [r3, #0]
 800b862:	f000 bc09 	b.w	800c078 <_malloc_r>
 800b866:	bf00      	nop
 800b868:	2000018c 	.word	0x2000018c

0800b86c <_Balloc>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	b976      	cbnz	r6, 800b894 <_Balloc+0x28>
 800b876:	2010      	movs	r0, #16
 800b878:	f7ff fff0 	bl	800b85c <malloc>
 800b87c:	4602      	mov	r2, r0
 800b87e:	6260      	str	r0, [r4, #36]	; 0x24
 800b880:	b920      	cbnz	r0, 800b88c <_Balloc+0x20>
 800b882:	4b18      	ldr	r3, [pc, #96]	; (800b8e4 <_Balloc+0x78>)
 800b884:	4818      	ldr	r0, [pc, #96]	; (800b8e8 <_Balloc+0x7c>)
 800b886:	2166      	movs	r1, #102	; 0x66
 800b888:	f000 fdd6 	bl	800c438 <__assert_func>
 800b88c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b890:	6006      	str	r6, [r0, #0]
 800b892:	60c6      	str	r6, [r0, #12]
 800b894:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b896:	68f3      	ldr	r3, [r6, #12]
 800b898:	b183      	cbz	r3, 800b8bc <_Balloc+0x50>
 800b89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8a2:	b9b8      	cbnz	r0, 800b8d4 <_Balloc+0x68>
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b8aa:	1d72      	adds	r2, r6, #5
 800b8ac:	0092      	lsls	r2, r2, #2
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fb60 	bl	800bf74 <_calloc_r>
 800b8b4:	b160      	cbz	r0, 800b8d0 <_Balloc+0x64>
 800b8b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8ba:	e00e      	b.n	800b8da <_Balloc+0x6e>
 800b8bc:	2221      	movs	r2, #33	; 0x21
 800b8be:	2104      	movs	r1, #4
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f000 fb57 	bl	800bf74 <_calloc_r>
 800b8c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8c8:	60f0      	str	r0, [r6, #12]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e4      	bne.n	800b89a <_Balloc+0x2e>
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}
 800b8d4:	6802      	ldr	r2, [r0, #0]
 800b8d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8e0:	e7f7      	b.n	800b8d2 <_Balloc+0x66>
 800b8e2:	bf00      	nop
 800b8e4:	0800ffe1 	.word	0x0800ffe1
 800b8e8:	08010064 	.word	0x08010064

0800b8ec <_Bfree>:
 800b8ec:	b570      	push	{r4, r5, r6, lr}
 800b8ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	b976      	cbnz	r6, 800b914 <_Bfree+0x28>
 800b8f6:	2010      	movs	r0, #16
 800b8f8:	f7ff ffb0 	bl	800b85c <malloc>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	6268      	str	r0, [r5, #36]	; 0x24
 800b900:	b920      	cbnz	r0, 800b90c <_Bfree+0x20>
 800b902:	4b09      	ldr	r3, [pc, #36]	; (800b928 <_Bfree+0x3c>)
 800b904:	4809      	ldr	r0, [pc, #36]	; (800b92c <_Bfree+0x40>)
 800b906:	218a      	movs	r1, #138	; 0x8a
 800b908:	f000 fd96 	bl	800c438 <__assert_func>
 800b90c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b910:	6006      	str	r6, [r0, #0]
 800b912:	60c6      	str	r6, [r0, #12]
 800b914:	b13c      	cbz	r4, 800b926 <_Bfree+0x3a>
 800b916:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b918:	6862      	ldr	r2, [r4, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b920:	6021      	str	r1, [r4, #0]
 800b922:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b926:	bd70      	pop	{r4, r5, r6, pc}
 800b928:	0800ffe1 	.word	0x0800ffe1
 800b92c:	08010064 	.word	0x08010064

0800b930 <__multadd>:
 800b930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b934:	690d      	ldr	r5, [r1, #16]
 800b936:	4607      	mov	r7, r0
 800b938:	460c      	mov	r4, r1
 800b93a:	461e      	mov	r6, r3
 800b93c:	f101 0c14 	add.w	ip, r1, #20
 800b940:	2000      	movs	r0, #0
 800b942:	f8dc 3000 	ldr.w	r3, [ip]
 800b946:	b299      	uxth	r1, r3
 800b948:	fb02 6101 	mla	r1, r2, r1, r6
 800b94c:	0c1e      	lsrs	r6, r3, #16
 800b94e:	0c0b      	lsrs	r3, r1, #16
 800b950:	fb02 3306 	mla	r3, r2, r6, r3
 800b954:	b289      	uxth	r1, r1
 800b956:	3001      	adds	r0, #1
 800b958:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b95c:	4285      	cmp	r5, r0
 800b95e:	f84c 1b04 	str.w	r1, [ip], #4
 800b962:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b966:	dcec      	bgt.n	800b942 <__multadd+0x12>
 800b968:	b30e      	cbz	r6, 800b9ae <__multadd+0x7e>
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	42ab      	cmp	r3, r5
 800b96e:	dc19      	bgt.n	800b9a4 <__multadd+0x74>
 800b970:	6861      	ldr	r1, [r4, #4]
 800b972:	4638      	mov	r0, r7
 800b974:	3101      	adds	r1, #1
 800b976:	f7ff ff79 	bl	800b86c <_Balloc>
 800b97a:	4680      	mov	r8, r0
 800b97c:	b928      	cbnz	r0, 800b98a <__multadd+0x5a>
 800b97e:	4602      	mov	r2, r0
 800b980:	4b0c      	ldr	r3, [pc, #48]	; (800b9b4 <__multadd+0x84>)
 800b982:	480d      	ldr	r0, [pc, #52]	; (800b9b8 <__multadd+0x88>)
 800b984:	21b5      	movs	r1, #181	; 0xb5
 800b986:	f000 fd57 	bl	800c438 <__assert_func>
 800b98a:	6922      	ldr	r2, [r4, #16]
 800b98c:	3202      	adds	r2, #2
 800b98e:	f104 010c 	add.w	r1, r4, #12
 800b992:	0092      	lsls	r2, r2, #2
 800b994:	300c      	adds	r0, #12
 800b996:	f7fe fc2d 	bl	800a1f4 <memcpy>
 800b99a:	4621      	mov	r1, r4
 800b99c:	4638      	mov	r0, r7
 800b99e:	f7ff ffa5 	bl	800b8ec <_Bfree>
 800b9a2:	4644      	mov	r4, r8
 800b9a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9a8:	3501      	adds	r5, #1
 800b9aa:	615e      	str	r6, [r3, #20]
 800b9ac:	6125      	str	r5, [r4, #16]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b4:	08010053 	.word	0x08010053
 800b9b8:	08010064 	.word	0x08010064

0800b9bc <__hi0bits>:
 800b9bc:	0c03      	lsrs	r3, r0, #16
 800b9be:	041b      	lsls	r3, r3, #16
 800b9c0:	b9d3      	cbnz	r3, 800b9f8 <__hi0bits+0x3c>
 800b9c2:	0400      	lsls	r0, r0, #16
 800b9c4:	2310      	movs	r3, #16
 800b9c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9ca:	bf04      	itt	eq
 800b9cc:	0200      	lsleq	r0, r0, #8
 800b9ce:	3308      	addeq	r3, #8
 800b9d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9d4:	bf04      	itt	eq
 800b9d6:	0100      	lsleq	r0, r0, #4
 800b9d8:	3304      	addeq	r3, #4
 800b9da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b9de:	bf04      	itt	eq
 800b9e0:	0080      	lsleq	r0, r0, #2
 800b9e2:	3302      	addeq	r3, #2
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	db05      	blt.n	800b9f4 <__hi0bits+0x38>
 800b9e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9ec:	f103 0301 	add.w	r3, r3, #1
 800b9f0:	bf08      	it	eq
 800b9f2:	2320      	moveq	r3, #32
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	4770      	bx	lr
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	e7e4      	b.n	800b9c6 <__hi0bits+0xa>

0800b9fc <__lo0bits>:
 800b9fc:	6803      	ldr	r3, [r0, #0]
 800b9fe:	f013 0207 	ands.w	r2, r3, #7
 800ba02:	4601      	mov	r1, r0
 800ba04:	d00b      	beq.n	800ba1e <__lo0bits+0x22>
 800ba06:	07da      	lsls	r2, r3, #31
 800ba08:	d423      	bmi.n	800ba52 <__lo0bits+0x56>
 800ba0a:	0798      	lsls	r0, r3, #30
 800ba0c:	bf49      	itett	mi
 800ba0e:	085b      	lsrmi	r3, r3, #1
 800ba10:	089b      	lsrpl	r3, r3, #2
 800ba12:	2001      	movmi	r0, #1
 800ba14:	600b      	strmi	r3, [r1, #0]
 800ba16:	bf5c      	itt	pl
 800ba18:	600b      	strpl	r3, [r1, #0]
 800ba1a:	2002      	movpl	r0, #2
 800ba1c:	4770      	bx	lr
 800ba1e:	b298      	uxth	r0, r3
 800ba20:	b9a8      	cbnz	r0, 800ba4e <__lo0bits+0x52>
 800ba22:	0c1b      	lsrs	r3, r3, #16
 800ba24:	2010      	movs	r0, #16
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	b90a      	cbnz	r2, 800ba2e <__lo0bits+0x32>
 800ba2a:	3008      	adds	r0, #8
 800ba2c:	0a1b      	lsrs	r3, r3, #8
 800ba2e:	071a      	lsls	r2, r3, #28
 800ba30:	bf04      	itt	eq
 800ba32:	091b      	lsreq	r3, r3, #4
 800ba34:	3004      	addeq	r0, #4
 800ba36:	079a      	lsls	r2, r3, #30
 800ba38:	bf04      	itt	eq
 800ba3a:	089b      	lsreq	r3, r3, #2
 800ba3c:	3002      	addeq	r0, #2
 800ba3e:	07da      	lsls	r2, r3, #31
 800ba40:	d403      	bmi.n	800ba4a <__lo0bits+0x4e>
 800ba42:	085b      	lsrs	r3, r3, #1
 800ba44:	f100 0001 	add.w	r0, r0, #1
 800ba48:	d005      	beq.n	800ba56 <__lo0bits+0x5a>
 800ba4a:	600b      	str	r3, [r1, #0]
 800ba4c:	4770      	bx	lr
 800ba4e:	4610      	mov	r0, r2
 800ba50:	e7e9      	b.n	800ba26 <__lo0bits+0x2a>
 800ba52:	2000      	movs	r0, #0
 800ba54:	4770      	bx	lr
 800ba56:	2020      	movs	r0, #32
 800ba58:	4770      	bx	lr
	...

0800ba5c <__i2b>:
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	460c      	mov	r4, r1
 800ba60:	2101      	movs	r1, #1
 800ba62:	f7ff ff03 	bl	800b86c <_Balloc>
 800ba66:	4602      	mov	r2, r0
 800ba68:	b928      	cbnz	r0, 800ba76 <__i2b+0x1a>
 800ba6a:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <__i2b+0x24>)
 800ba6c:	4805      	ldr	r0, [pc, #20]	; (800ba84 <__i2b+0x28>)
 800ba6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba72:	f000 fce1 	bl	800c438 <__assert_func>
 800ba76:	2301      	movs	r3, #1
 800ba78:	6144      	str	r4, [r0, #20]
 800ba7a:	6103      	str	r3, [r0, #16]
 800ba7c:	bd10      	pop	{r4, pc}
 800ba7e:	bf00      	nop
 800ba80:	08010053 	.word	0x08010053
 800ba84:	08010064 	.word	0x08010064

0800ba88 <__multiply>:
 800ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8c:	4691      	mov	r9, r2
 800ba8e:	690a      	ldr	r2, [r1, #16]
 800ba90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	bfb8      	it	lt
 800ba98:	460b      	movlt	r3, r1
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	bfbc      	itt	lt
 800ba9e:	464c      	movlt	r4, r9
 800baa0:	4699      	movlt	r9, r3
 800baa2:	6927      	ldr	r7, [r4, #16]
 800baa4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800baa8:	68a3      	ldr	r3, [r4, #8]
 800baaa:	6861      	ldr	r1, [r4, #4]
 800baac:	eb07 060a 	add.w	r6, r7, sl
 800bab0:	42b3      	cmp	r3, r6
 800bab2:	b085      	sub	sp, #20
 800bab4:	bfb8      	it	lt
 800bab6:	3101      	addlt	r1, #1
 800bab8:	f7ff fed8 	bl	800b86c <_Balloc>
 800babc:	b930      	cbnz	r0, 800bacc <__multiply+0x44>
 800babe:	4602      	mov	r2, r0
 800bac0:	4b44      	ldr	r3, [pc, #272]	; (800bbd4 <__multiply+0x14c>)
 800bac2:	4845      	ldr	r0, [pc, #276]	; (800bbd8 <__multiply+0x150>)
 800bac4:	f240 115d 	movw	r1, #349	; 0x15d
 800bac8:	f000 fcb6 	bl	800c438 <__assert_func>
 800bacc:	f100 0514 	add.w	r5, r0, #20
 800bad0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bad4:	462b      	mov	r3, r5
 800bad6:	2200      	movs	r2, #0
 800bad8:	4543      	cmp	r3, r8
 800bada:	d321      	bcc.n	800bb20 <__multiply+0x98>
 800badc:	f104 0314 	add.w	r3, r4, #20
 800bae0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bae4:	f109 0314 	add.w	r3, r9, #20
 800bae8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800baec:	9202      	str	r2, [sp, #8]
 800baee:	1b3a      	subs	r2, r7, r4
 800baf0:	3a15      	subs	r2, #21
 800baf2:	f022 0203 	bic.w	r2, r2, #3
 800baf6:	3204      	adds	r2, #4
 800baf8:	f104 0115 	add.w	r1, r4, #21
 800bafc:	428f      	cmp	r7, r1
 800bafe:	bf38      	it	cc
 800bb00:	2204      	movcc	r2, #4
 800bb02:	9201      	str	r2, [sp, #4]
 800bb04:	9a02      	ldr	r2, [sp, #8]
 800bb06:	9303      	str	r3, [sp, #12]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d80c      	bhi.n	800bb26 <__multiply+0x9e>
 800bb0c:	2e00      	cmp	r6, #0
 800bb0e:	dd03      	ble.n	800bb18 <__multiply+0x90>
 800bb10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d05a      	beq.n	800bbce <__multiply+0x146>
 800bb18:	6106      	str	r6, [r0, #16]
 800bb1a:	b005      	add	sp, #20
 800bb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb20:	f843 2b04 	str.w	r2, [r3], #4
 800bb24:	e7d8      	b.n	800bad8 <__multiply+0x50>
 800bb26:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb2a:	f1ba 0f00 	cmp.w	sl, #0
 800bb2e:	d024      	beq.n	800bb7a <__multiply+0xf2>
 800bb30:	f104 0e14 	add.w	lr, r4, #20
 800bb34:	46a9      	mov	r9, r5
 800bb36:	f04f 0c00 	mov.w	ip, #0
 800bb3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb3e:	f8d9 1000 	ldr.w	r1, [r9]
 800bb42:	fa1f fb82 	uxth.w	fp, r2
 800bb46:	b289      	uxth	r1, r1
 800bb48:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb50:	f8d9 2000 	ldr.w	r2, [r9]
 800bb54:	4461      	add	r1, ip
 800bb56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb5a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb62:	b289      	uxth	r1, r1
 800bb64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb68:	4577      	cmp	r7, lr
 800bb6a:	f849 1b04 	str.w	r1, [r9], #4
 800bb6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb72:	d8e2      	bhi.n	800bb3a <__multiply+0xb2>
 800bb74:	9a01      	ldr	r2, [sp, #4]
 800bb76:	f845 c002 	str.w	ip, [r5, r2]
 800bb7a:	9a03      	ldr	r2, [sp, #12]
 800bb7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb80:	3304      	adds	r3, #4
 800bb82:	f1b9 0f00 	cmp.w	r9, #0
 800bb86:	d020      	beq.n	800bbca <__multiply+0x142>
 800bb88:	6829      	ldr	r1, [r5, #0]
 800bb8a:	f104 0c14 	add.w	ip, r4, #20
 800bb8e:	46ae      	mov	lr, r5
 800bb90:	f04f 0a00 	mov.w	sl, #0
 800bb94:	f8bc b000 	ldrh.w	fp, [ip]
 800bb98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb9c:	fb09 220b 	mla	r2, r9, fp, r2
 800bba0:	4492      	add	sl, r2
 800bba2:	b289      	uxth	r1, r1
 800bba4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bba8:	f84e 1b04 	str.w	r1, [lr], #4
 800bbac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bbb0:	f8be 1000 	ldrh.w	r1, [lr]
 800bbb4:	0c12      	lsrs	r2, r2, #16
 800bbb6:	fb09 1102 	mla	r1, r9, r2, r1
 800bbba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bbbe:	4567      	cmp	r7, ip
 800bbc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbc4:	d8e6      	bhi.n	800bb94 <__multiply+0x10c>
 800bbc6:	9a01      	ldr	r2, [sp, #4]
 800bbc8:	50a9      	str	r1, [r5, r2]
 800bbca:	3504      	adds	r5, #4
 800bbcc:	e79a      	b.n	800bb04 <__multiply+0x7c>
 800bbce:	3e01      	subs	r6, #1
 800bbd0:	e79c      	b.n	800bb0c <__multiply+0x84>
 800bbd2:	bf00      	nop
 800bbd4:	08010053 	.word	0x08010053
 800bbd8:	08010064 	.word	0x08010064

0800bbdc <__pow5mult>:
 800bbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe0:	4615      	mov	r5, r2
 800bbe2:	f012 0203 	ands.w	r2, r2, #3
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	460f      	mov	r7, r1
 800bbea:	d007      	beq.n	800bbfc <__pow5mult+0x20>
 800bbec:	4c25      	ldr	r4, [pc, #148]	; (800bc84 <__pow5mult+0xa8>)
 800bbee:	3a01      	subs	r2, #1
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbf6:	f7ff fe9b 	bl	800b930 <__multadd>
 800bbfa:	4607      	mov	r7, r0
 800bbfc:	10ad      	asrs	r5, r5, #2
 800bbfe:	d03d      	beq.n	800bc7c <__pow5mult+0xa0>
 800bc00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc02:	b97c      	cbnz	r4, 800bc24 <__pow5mult+0x48>
 800bc04:	2010      	movs	r0, #16
 800bc06:	f7ff fe29 	bl	800b85c <malloc>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	6270      	str	r0, [r6, #36]	; 0x24
 800bc0e:	b928      	cbnz	r0, 800bc1c <__pow5mult+0x40>
 800bc10:	4b1d      	ldr	r3, [pc, #116]	; (800bc88 <__pow5mult+0xac>)
 800bc12:	481e      	ldr	r0, [pc, #120]	; (800bc8c <__pow5mult+0xb0>)
 800bc14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc18:	f000 fc0e 	bl	800c438 <__assert_func>
 800bc1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc20:	6004      	str	r4, [r0, #0]
 800bc22:	60c4      	str	r4, [r0, #12]
 800bc24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc2c:	b94c      	cbnz	r4, 800bc42 <__pow5mult+0x66>
 800bc2e:	f240 2171 	movw	r1, #625	; 0x271
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7ff ff12 	bl	800ba5c <__i2b>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc3e:	4604      	mov	r4, r0
 800bc40:	6003      	str	r3, [r0, #0]
 800bc42:	f04f 0900 	mov.w	r9, #0
 800bc46:	07eb      	lsls	r3, r5, #31
 800bc48:	d50a      	bpl.n	800bc60 <__pow5mult+0x84>
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	4630      	mov	r0, r6
 800bc50:	f7ff ff1a 	bl	800ba88 <__multiply>
 800bc54:	4639      	mov	r1, r7
 800bc56:	4680      	mov	r8, r0
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f7ff fe47 	bl	800b8ec <_Bfree>
 800bc5e:	4647      	mov	r7, r8
 800bc60:	106d      	asrs	r5, r5, #1
 800bc62:	d00b      	beq.n	800bc7c <__pow5mult+0xa0>
 800bc64:	6820      	ldr	r0, [r4, #0]
 800bc66:	b938      	cbnz	r0, 800bc78 <__pow5mult+0x9c>
 800bc68:	4622      	mov	r2, r4
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7ff ff0b 	bl	800ba88 <__multiply>
 800bc72:	6020      	str	r0, [r4, #0]
 800bc74:	f8c0 9000 	str.w	r9, [r0]
 800bc78:	4604      	mov	r4, r0
 800bc7a:	e7e4      	b.n	800bc46 <__pow5mult+0x6a>
 800bc7c:	4638      	mov	r0, r7
 800bc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc82:	bf00      	nop
 800bc84:	080101b0 	.word	0x080101b0
 800bc88:	0800ffe1 	.word	0x0800ffe1
 800bc8c:	08010064 	.word	0x08010064

0800bc90 <__lshift>:
 800bc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc94:	460c      	mov	r4, r1
 800bc96:	6849      	ldr	r1, [r1, #4]
 800bc98:	6923      	ldr	r3, [r4, #16]
 800bc9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc9e:	68a3      	ldr	r3, [r4, #8]
 800bca0:	4607      	mov	r7, r0
 800bca2:	4691      	mov	r9, r2
 800bca4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bca8:	f108 0601 	add.w	r6, r8, #1
 800bcac:	42b3      	cmp	r3, r6
 800bcae:	db0b      	blt.n	800bcc8 <__lshift+0x38>
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	f7ff fddb 	bl	800b86c <_Balloc>
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	b948      	cbnz	r0, 800bcce <__lshift+0x3e>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	4b2a      	ldr	r3, [pc, #168]	; (800bd68 <__lshift+0xd8>)
 800bcbe:	482b      	ldr	r0, [pc, #172]	; (800bd6c <__lshift+0xdc>)
 800bcc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bcc4:	f000 fbb8 	bl	800c438 <__assert_func>
 800bcc8:	3101      	adds	r1, #1
 800bcca:	005b      	lsls	r3, r3, #1
 800bccc:	e7ee      	b.n	800bcac <__lshift+0x1c>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f100 0114 	add.w	r1, r0, #20
 800bcd4:	f100 0210 	add.w	r2, r0, #16
 800bcd8:	4618      	mov	r0, r3
 800bcda:	4553      	cmp	r3, sl
 800bcdc:	db37      	blt.n	800bd4e <__lshift+0xbe>
 800bcde:	6920      	ldr	r0, [r4, #16]
 800bce0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bce4:	f104 0314 	add.w	r3, r4, #20
 800bce8:	f019 091f 	ands.w	r9, r9, #31
 800bcec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bcf4:	d02f      	beq.n	800bd56 <__lshift+0xc6>
 800bcf6:	f1c9 0e20 	rsb	lr, r9, #32
 800bcfa:	468a      	mov	sl, r1
 800bcfc:	f04f 0c00 	mov.w	ip, #0
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	fa02 f209 	lsl.w	r2, r2, r9
 800bd06:	ea42 020c 	orr.w	r2, r2, ip
 800bd0a:	f84a 2b04 	str.w	r2, [sl], #4
 800bd0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd12:	4298      	cmp	r0, r3
 800bd14:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bd18:	d8f2      	bhi.n	800bd00 <__lshift+0x70>
 800bd1a:	1b03      	subs	r3, r0, r4
 800bd1c:	3b15      	subs	r3, #21
 800bd1e:	f023 0303 	bic.w	r3, r3, #3
 800bd22:	3304      	adds	r3, #4
 800bd24:	f104 0215 	add.w	r2, r4, #21
 800bd28:	4290      	cmp	r0, r2
 800bd2a:	bf38      	it	cc
 800bd2c:	2304      	movcc	r3, #4
 800bd2e:	f841 c003 	str.w	ip, [r1, r3]
 800bd32:	f1bc 0f00 	cmp.w	ip, #0
 800bd36:	d001      	beq.n	800bd3c <__lshift+0xac>
 800bd38:	f108 0602 	add.w	r6, r8, #2
 800bd3c:	3e01      	subs	r6, #1
 800bd3e:	4638      	mov	r0, r7
 800bd40:	612e      	str	r6, [r5, #16]
 800bd42:	4621      	mov	r1, r4
 800bd44:	f7ff fdd2 	bl	800b8ec <_Bfree>
 800bd48:	4628      	mov	r0, r5
 800bd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd52:	3301      	adds	r3, #1
 800bd54:	e7c1      	b.n	800bcda <__lshift+0x4a>
 800bd56:	3904      	subs	r1, #4
 800bd58:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd60:	4298      	cmp	r0, r3
 800bd62:	d8f9      	bhi.n	800bd58 <__lshift+0xc8>
 800bd64:	e7ea      	b.n	800bd3c <__lshift+0xac>
 800bd66:	bf00      	nop
 800bd68:	08010053 	.word	0x08010053
 800bd6c:	08010064 	.word	0x08010064

0800bd70 <__mcmp>:
 800bd70:	b530      	push	{r4, r5, lr}
 800bd72:	6902      	ldr	r2, [r0, #16]
 800bd74:	690c      	ldr	r4, [r1, #16]
 800bd76:	1b12      	subs	r2, r2, r4
 800bd78:	d10e      	bne.n	800bd98 <__mcmp+0x28>
 800bd7a:	f100 0314 	add.w	r3, r0, #20
 800bd7e:	3114      	adds	r1, #20
 800bd80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd90:	42a5      	cmp	r5, r4
 800bd92:	d003      	beq.n	800bd9c <__mcmp+0x2c>
 800bd94:	d305      	bcc.n	800bda2 <__mcmp+0x32>
 800bd96:	2201      	movs	r2, #1
 800bd98:	4610      	mov	r0, r2
 800bd9a:	bd30      	pop	{r4, r5, pc}
 800bd9c:	4283      	cmp	r3, r0
 800bd9e:	d3f3      	bcc.n	800bd88 <__mcmp+0x18>
 800bda0:	e7fa      	b.n	800bd98 <__mcmp+0x28>
 800bda2:	f04f 32ff 	mov.w	r2, #4294967295
 800bda6:	e7f7      	b.n	800bd98 <__mcmp+0x28>

0800bda8 <__mdiff>:
 800bda8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdac:	460c      	mov	r4, r1
 800bdae:	4606      	mov	r6, r0
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	4690      	mov	r8, r2
 800bdb6:	f7ff ffdb 	bl	800bd70 <__mcmp>
 800bdba:	1e05      	subs	r5, r0, #0
 800bdbc:	d110      	bne.n	800bde0 <__mdiff+0x38>
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f7ff fd53 	bl	800b86c <_Balloc>
 800bdc6:	b930      	cbnz	r0, 800bdd6 <__mdiff+0x2e>
 800bdc8:	4b3a      	ldr	r3, [pc, #232]	; (800beb4 <__mdiff+0x10c>)
 800bdca:	4602      	mov	r2, r0
 800bdcc:	f240 2132 	movw	r1, #562	; 0x232
 800bdd0:	4839      	ldr	r0, [pc, #228]	; (800beb8 <__mdiff+0x110>)
 800bdd2:	f000 fb31 	bl	800c438 <__assert_func>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde0:	bfa4      	itt	ge
 800bde2:	4643      	movge	r3, r8
 800bde4:	46a0      	movge	r8, r4
 800bde6:	4630      	mov	r0, r6
 800bde8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bdec:	bfa6      	itte	ge
 800bdee:	461c      	movge	r4, r3
 800bdf0:	2500      	movge	r5, #0
 800bdf2:	2501      	movlt	r5, #1
 800bdf4:	f7ff fd3a 	bl	800b86c <_Balloc>
 800bdf8:	b920      	cbnz	r0, 800be04 <__mdiff+0x5c>
 800bdfa:	4b2e      	ldr	r3, [pc, #184]	; (800beb4 <__mdiff+0x10c>)
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be02:	e7e5      	b.n	800bdd0 <__mdiff+0x28>
 800be04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be08:	6926      	ldr	r6, [r4, #16]
 800be0a:	60c5      	str	r5, [r0, #12]
 800be0c:	f104 0914 	add.w	r9, r4, #20
 800be10:	f108 0514 	add.w	r5, r8, #20
 800be14:	f100 0e14 	add.w	lr, r0, #20
 800be18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800be1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be20:	f108 0210 	add.w	r2, r8, #16
 800be24:	46f2      	mov	sl, lr
 800be26:	2100      	movs	r1, #0
 800be28:	f859 3b04 	ldr.w	r3, [r9], #4
 800be2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be30:	fa1f f883 	uxth.w	r8, r3
 800be34:	fa11 f18b 	uxtah	r1, r1, fp
 800be38:	0c1b      	lsrs	r3, r3, #16
 800be3a:	eba1 0808 	sub.w	r8, r1, r8
 800be3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be46:	fa1f f888 	uxth.w	r8, r8
 800be4a:	1419      	asrs	r1, r3, #16
 800be4c:	454e      	cmp	r6, r9
 800be4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be52:	f84a 3b04 	str.w	r3, [sl], #4
 800be56:	d8e7      	bhi.n	800be28 <__mdiff+0x80>
 800be58:	1b33      	subs	r3, r6, r4
 800be5a:	3b15      	subs	r3, #21
 800be5c:	f023 0303 	bic.w	r3, r3, #3
 800be60:	3304      	adds	r3, #4
 800be62:	3415      	adds	r4, #21
 800be64:	42a6      	cmp	r6, r4
 800be66:	bf38      	it	cc
 800be68:	2304      	movcc	r3, #4
 800be6a:	441d      	add	r5, r3
 800be6c:	4473      	add	r3, lr
 800be6e:	469e      	mov	lr, r3
 800be70:	462e      	mov	r6, r5
 800be72:	4566      	cmp	r6, ip
 800be74:	d30e      	bcc.n	800be94 <__mdiff+0xec>
 800be76:	f10c 0203 	add.w	r2, ip, #3
 800be7a:	1b52      	subs	r2, r2, r5
 800be7c:	f022 0203 	bic.w	r2, r2, #3
 800be80:	3d03      	subs	r5, #3
 800be82:	45ac      	cmp	ip, r5
 800be84:	bf38      	it	cc
 800be86:	2200      	movcc	r2, #0
 800be88:	441a      	add	r2, r3
 800be8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be8e:	b17b      	cbz	r3, 800beb0 <__mdiff+0x108>
 800be90:	6107      	str	r7, [r0, #16]
 800be92:	e7a3      	b.n	800bddc <__mdiff+0x34>
 800be94:	f856 8b04 	ldr.w	r8, [r6], #4
 800be98:	fa11 f288 	uxtah	r2, r1, r8
 800be9c:	1414      	asrs	r4, r2, #16
 800be9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bea2:	b292      	uxth	r2, r2
 800bea4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bea8:	f84e 2b04 	str.w	r2, [lr], #4
 800beac:	1421      	asrs	r1, r4, #16
 800beae:	e7e0      	b.n	800be72 <__mdiff+0xca>
 800beb0:	3f01      	subs	r7, #1
 800beb2:	e7ea      	b.n	800be8a <__mdiff+0xe2>
 800beb4:	08010053 	.word	0x08010053
 800beb8:	08010064 	.word	0x08010064

0800bebc <__d2b>:
 800bebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bec0:	4689      	mov	r9, r1
 800bec2:	2101      	movs	r1, #1
 800bec4:	ec57 6b10 	vmov	r6, r7, d0
 800bec8:	4690      	mov	r8, r2
 800beca:	f7ff fccf 	bl	800b86c <_Balloc>
 800bece:	4604      	mov	r4, r0
 800bed0:	b930      	cbnz	r0, 800bee0 <__d2b+0x24>
 800bed2:	4602      	mov	r2, r0
 800bed4:	4b25      	ldr	r3, [pc, #148]	; (800bf6c <__d2b+0xb0>)
 800bed6:	4826      	ldr	r0, [pc, #152]	; (800bf70 <__d2b+0xb4>)
 800bed8:	f240 310a 	movw	r1, #778	; 0x30a
 800bedc:	f000 faac 	bl	800c438 <__assert_func>
 800bee0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bee4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bee8:	bb35      	cbnz	r5, 800bf38 <__d2b+0x7c>
 800beea:	2e00      	cmp	r6, #0
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	d028      	beq.n	800bf42 <__d2b+0x86>
 800bef0:	4668      	mov	r0, sp
 800bef2:	9600      	str	r6, [sp, #0]
 800bef4:	f7ff fd82 	bl	800b9fc <__lo0bits>
 800bef8:	9900      	ldr	r1, [sp, #0]
 800befa:	b300      	cbz	r0, 800bf3e <__d2b+0x82>
 800befc:	9a01      	ldr	r2, [sp, #4]
 800befe:	f1c0 0320 	rsb	r3, r0, #32
 800bf02:	fa02 f303 	lsl.w	r3, r2, r3
 800bf06:	430b      	orrs	r3, r1
 800bf08:	40c2      	lsrs	r2, r0
 800bf0a:	6163      	str	r3, [r4, #20]
 800bf0c:	9201      	str	r2, [sp, #4]
 800bf0e:	9b01      	ldr	r3, [sp, #4]
 800bf10:	61a3      	str	r3, [r4, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	bf14      	ite	ne
 800bf16:	2202      	movne	r2, #2
 800bf18:	2201      	moveq	r2, #1
 800bf1a:	6122      	str	r2, [r4, #16]
 800bf1c:	b1d5      	cbz	r5, 800bf54 <__d2b+0x98>
 800bf1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf22:	4405      	add	r5, r0
 800bf24:	f8c9 5000 	str.w	r5, [r9]
 800bf28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf2c:	f8c8 0000 	str.w	r0, [r8]
 800bf30:	4620      	mov	r0, r4
 800bf32:	b003      	add	sp, #12
 800bf34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf3c:	e7d5      	b.n	800beea <__d2b+0x2e>
 800bf3e:	6161      	str	r1, [r4, #20]
 800bf40:	e7e5      	b.n	800bf0e <__d2b+0x52>
 800bf42:	a801      	add	r0, sp, #4
 800bf44:	f7ff fd5a 	bl	800b9fc <__lo0bits>
 800bf48:	9b01      	ldr	r3, [sp, #4]
 800bf4a:	6163      	str	r3, [r4, #20]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	6122      	str	r2, [r4, #16]
 800bf50:	3020      	adds	r0, #32
 800bf52:	e7e3      	b.n	800bf1c <__d2b+0x60>
 800bf54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf5c:	f8c9 0000 	str.w	r0, [r9]
 800bf60:	6918      	ldr	r0, [r3, #16]
 800bf62:	f7ff fd2b 	bl	800b9bc <__hi0bits>
 800bf66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf6a:	e7df      	b.n	800bf2c <__d2b+0x70>
 800bf6c:	08010053 	.word	0x08010053
 800bf70:	08010064 	.word	0x08010064

0800bf74 <_calloc_r>:
 800bf74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf76:	fba1 2402 	umull	r2, r4, r1, r2
 800bf7a:	b94c      	cbnz	r4, 800bf90 <_calloc_r+0x1c>
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	9201      	str	r2, [sp, #4]
 800bf80:	f000 f87a 	bl	800c078 <_malloc_r>
 800bf84:	9a01      	ldr	r2, [sp, #4]
 800bf86:	4605      	mov	r5, r0
 800bf88:	b930      	cbnz	r0, 800bf98 <_calloc_r+0x24>
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	b003      	add	sp, #12
 800bf8e:	bd30      	pop	{r4, r5, pc}
 800bf90:	220c      	movs	r2, #12
 800bf92:	6002      	str	r2, [r0, #0]
 800bf94:	2500      	movs	r5, #0
 800bf96:	e7f8      	b.n	800bf8a <_calloc_r+0x16>
 800bf98:	4621      	mov	r1, r4
 800bf9a:	f7fe f939 	bl	800a210 <memset>
 800bf9e:	e7f4      	b.n	800bf8a <_calloc_r+0x16>

0800bfa0 <_free_r>:
 800bfa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	d044      	beq.n	800c030 <_free_r+0x90>
 800bfa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfaa:	9001      	str	r0, [sp, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f1a1 0404 	sub.w	r4, r1, #4
 800bfb2:	bfb8      	it	lt
 800bfb4:	18e4      	addlt	r4, r4, r3
 800bfb6:	f000 fa9b 	bl	800c4f0 <__malloc_lock>
 800bfba:	4a1e      	ldr	r2, [pc, #120]	; (800c034 <_free_r+0x94>)
 800bfbc:	9801      	ldr	r0, [sp, #4]
 800bfbe:	6813      	ldr	r3, [r2, #0]
 800bfc0:	b933      	cbnz	r3, 800bfd0 <_free_r+0x30>
 800bfc2:	6063      	str	r3, [r4, #4]
 800bfc4:	6014      	str	r4, [r2, #0]
 800bfc6:	b003      	add	sp, #12
 800bfc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfcc:	f000 ba96 	b.w	800c4fc <__malloc_unlock>
 800bfd0:	42a3      	cmp	r3, r4
 800bfd2:	d908      	bls.n	800bfe6 <_free_r+0x46>
 800bfd4:	6825      	ldr	r5, [r4, #0]
 800bfd6:	1961      	adds	r1, r4, r5
 800bfd8:	428b      	cmp	r3, r1
 800bfda:	bf01      	itttt	eq
 800bfdc:	6819      	ldreq	r1, [r3, #0]
 800bfde:	685b      	ldreq	r3, [r3, #4]
 800bfe0:	1949      	addeq	r1, r1, r5
 800bfe2:	6021      	streq	r1, [r4, #0]
 800bfe4:	e7ed      	b.n	800bfc2 <_free_r+0x22>
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	b10b      	cbz	r3, 800bff0 <_free_r+0x50>
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	d9fa      	bls.n	800bfe6 <_free_r+0x46>
 800bff0:	6811      	ldr	r1, [r2, #0]
 800bff2:	1855      	adds	r5, r2, r1
 800bff4:	42a5      	cmp	r5, r4
 800bff6:	d10b      	bne.n	800c010 <_free_r+0x70>
 800bff8:	6824      	ldr	r4, [r4, #0]
 800bffa:	4421      	add	r1, r4
 800bffc:	1854      	adds	r4, r2, r1
 800bffe:	42a3      	cmp	r3, r4
 800c000:	6011      	str	r1, [r2, #0]
 800c002:	d1e0      	bne.n	800bfc6 <_free_r+0x26>
 800c004:	681c      	ldr	r4, [r3, #0]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	6053      	str	r3, [r2, #4]
 800c00a:	4421      	add	r1, r4
 800c00c:	6011      	str	r1, [r2, #0]
 800c00e:	e7da      	b.n	800bfc6 <_free_r+0x26>
 800c010:	d902      	bls.n	800c018 <_free_r+0x78>
 800c012:	230c      	movs	r3, #12
 800c014:	6003      	str	r3, [r0, #0]
 800c016:	e7d6      	b.n	800bfc6 <_free_r+0x26>
 800c018:	6825      	ldr	r5, [r4, #0]
 800c01a:	1961      	adds	r1, r4, r5
 800c01c:	428b      	cmp	r3, r1
 800c01e:	bf04      	itt	eq
 800c020:	6819      	ldreq	r1, [r3, #0]
 800c022:	685b      	ldreq	r3, [r3, #4]
 800c024:	6063      	str	r3, [r4, #4]
 800c026:	bf04      	itt	eq
 800c028:	1949      	addeq	r1, r1, r5
 800c02a:	6021      	streq	r1, [r4, #0]
 800c02c:	6054      	str	r4, [r2, #4]
 800c02e:	e7ca      	b.n	800bfc6 <_free_r+0x26>
 800c030:	b003      	add	sp, #12
 800c032:	bd30      	pop	{r4, r5, pc}
 800c034:	20000b40 	.word	0x20000b40

0800c038 <sbrk_aligned>:
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	4e0e      	ldr	r6, [pc, #56]	; (800c074 <sbrk_aligned+0x3c>)
 800c03c:	460c      	mov	r4, r1
 800c03e:	6831      	ldr	r1, [r6, #0]
 800c040:	4605      	mov	r5, r0
 800c042:	b911      	cbnz	r1, 800c04a <sbrk_aligned+0x12>
 800c044:	f000 f9e8 	bl	800c418 <_sbrk_r>
 800c048:	6030      	str	r0, [r6, #0]
 800c04a:	4621      	mov	r1, r4
 800c04c:	4628      	mov	r0, r5
 800c04e:	f000 f9e3 	bl	800c418 <_sbrk_r>
 800c052:	1c43      	adds	r3, r0, #1
 800c054:	d00a      	beq.n	800c06c <sbrk_aligned+0x34>
 800c056:	1cc4      	adds	r4, r0, #3
 800c058:	f024 0403 	bic.w	r4, r4, #3
 800c05c:	42a0      	cmp	r0, r4
 800c05e:	d007      	beq.n	800c070 <sbrk_aligned+0x38>
 800c060:	1a21      	subs	r1, r4, r0
 800c062:	4628      	mov	r0, r5
 800c064:	f000 f9d8 	bl	800c418 <_sbrk_r>
 800c068:	3001      	adds	r0, #1
 800c06a:	d101      	bne.n	800c070 <sbrk_aligned+0x38>
 800c06c:	f04f 34ff 	mov.w	r4, #4294967295
 800c070:	4620      	mov	r0, r4
 800c072:	bd70      	pop	{r4, r5, r6, pc}
 800c074:	20000b44 	.word	0x20000b44

0800c078 <_malloc_r>:
 800c078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07c:	1ccd      	adds	r5, r1, #3
 800c07e:	f025 0503 	bic.w	r5, r5, #3
 800c082:	3508      	adds	r5, #8
 800c084:	2d0c      	cmp	r5, #12
 800c086:	bf38      	it	cc
 800c088:	250c      	movcc	r5, #12
 800c08a:	2d00      	cmp	r5, #0
 800c08c:	4607      	mov	r7, r0
 800c08e:	db01      	blt.n	800c094 <_malloc_r+0x1c>
 800c090:	42a9      	cmp	r1, r5
 800c092:	d905      	bls.n	800c0a0 <_malloc_r+0x28>
 800c094:	230c      	movs	r3, #12
 800c096:	603b      	str	r3, [r7, #0]
 800c098:	2600      	movs	r6, #0
 800c09a:	4630      	mov	r0, r6
 800c09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0a0:	4e2e      	ldr	r6, [pc, #184]	; (800c15c <_malloc_r+0xe4>)
 800c0a2:	f000 fa25 	bl	800c4f0 <__malloc_lock>
 800c0a6:	6833      	ldr	r3, [r6, #0]
 800c0a8:	461c      	mov	r4, r3
 800c0aa:	bb34      	cbnz	r4, 800c0fa <_malloc_r+0x82>
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	f7ff ffc2 	bl	800c038 <sbrk_aligned>
 800c0b4:	1c43      	adds	r3, r0, #1
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	d14d      	bne.n	800c156 <_malloc_r+0xde>
 800c0ba:	6834      	ldr	r4, [r6, #0]
 800c0bc:	4626      	mov	r6, r4
 800c0be:	2e00      	cmp	r6, #0
 800c0c0:	d140      	bne.n	800c144 <_malloc_r+0xcc>
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	eb04 0803 	add.w	r8, r4, r3
 800c0cc:	f000 f9a4 	bl	800c418 <_sbrk_r>
 800c0d0:	4580      	cmp	r8, r0
 800c0d2:	d13a      	bne.n	800c14a <_malloc_r+0xd2>
 800c0d4:	6821      	ldr	r1, [r4, #0]
 800c0d6:	3503      	adds	r5, #3
 800c0d8:	1a6d      	subs	r5, r5, r1
 800c0da:	f025 0503 	bic.w	r5, r5, #3
 800c0de:	3508      	adds	r5, #8
 800c0e0:	2d0c      	cmp	r5, #12
 800c0e2:	bf38      	it	cc
 800c0e4:	250c      	movcc	r5, #12
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	f7ff ffa5 	bl	800c038 <sbrk_aligned>
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	d02b      	beq.n	800c14a <_malloc_r+0xd2>
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	442b      	add	r3, r5
 800c0f6:	6023      	str	r3, [r4, #0]
 800c0f8:	e00e      	b.n	800c118 <_malloc_r+0xa0>
 800c0fa:	6822      	ldr	r2, [r4, #0]
 800c0fc:	1b52      	subs	r2, r2, r5
 800c0fe:	d41e      	bmi.n	800c13e <_malloc_r+0xc6>
 800c100:	2a0b      	cmp	r2, #11
 800c102:	d916      	bls.n	800c132 <_malloc_r+0xba>
 800c104:	1961      	adds	r1, r4, r5
 800c106:	42a3      	cmp	r3, r4
 800c108:	6025      	str	r5, [r4, #0]
 800c10a:	bf18      	it	ne
 800c10c:	6059      	strne	r1, [r3, #4]
 800c10e:	6863      	ldr	r3, [r4, #4]
 800c110:	bf08      	it	eq
 800c112:	6031      	streq	r1, [r6, #0]
 800c114:	5162      	str	r2, [r4, r5]
 800c116:	604b      	str	r3, [r1, #4]
 800c118:	4638      	mov	r0, r7
 800c11a:	f104 060b 	add.w	r6, r4, #11
 800c11e:	f000 f9ed 	bl	800c4fc <__malloc_unlock>
 800c122:	f026 0607 	bic.w	r6, r6, #7
 800c126:	1d23      	adds	r3, r4, #4
 800c128:	1af2      	subs	r2, r6, r3
 800c12a:	d0b6      	beq.n	800c09a <_malloc_r+0x22>
 800c12c:	1b9b      	subs	r3, r3, r6
 800c12e:	50a3      	str	r3, [r4, r2]
 800c130:	e7b3      	b.n	800c09a <_malloc_r+0x22>
 800c132:	6862      	ldr	r2, [r4, #4]
 800c134:	42a3      	cmp	r3, r4
 800c136:	bf0c      	ite	eq
 800c138:	6032      	streq	r2, [r6, #0]
 800c13a:	605a      	strne	r2, [r3, #4]
 800c13c:	e7ec      	b.n	800c118 <_malloc_r+0xa0>
 800c13e:	4623      	mov	r3, r4
 800c140:	6864      	ldr	r4, [r4, #4]
 800c142:	e7b2      	b.n	800c0aa <_malloc_r+0x32>
 800c144:	4634      	mov	r4, r6
 800c146:	6876      	ldr	r6, [r6, #4]
 800c148:	e7b9      	b.n	800c0be <_malloc_r+0x46>
 800c14a:	230c      	movs	r3, #12
 800c14c:	603b      	str	r3, [r7, #0]
 800c14e:	4638      	mov	r0, r7
 800c150:	f000 f9d4 	bl	800c4fc <__malloc_unlock>
 800c154:	e7a1      	b.n	800c09a <_malloc_r+0x22>
 800c156:	6025      	str	r5, [r4, #0]
 800c158:	e7de      	b.n	800c118 <_malloc_r+0xa0>
 800c15a:	bf00      	nop
 800c15c:	20000b40 	.word	0x20000b40

0800c160 <__ssputs_r>:
 800c160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c164:	688e      	ldr	r6, [r1, #8]
 800c166:	429e      	cmp	r6, r3
 800c168:	4682      	mov	sl, r0
 800c16a:	460c      	mov	r4, r1
 800c16c:	4690      	mov	r8, r2
 800c16e:	461f      	mov	r7, r3
 800c170:	d838      	bhi.n	800c1e4 <__ssputs_r+0x84>
 800c172:	898a      	ldrh	r2, [r1, #12]
 800c174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c178:	d032      	beq.n	800c1e0 <__ssputs_r+0x80>
 800c17a:	6825      	ldr	r5, [r4, #0]
 800c17c:	6909      	ldr	r1, [r1, #16]
 800c17e:	eba5 0901 	sub.w	r9, r5, r1
 800c182:	6965      	ldr	r5, [r4, #20]
 800c184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c18c:	3301      	adds	r3, #1
 800c18e:	444b      	add	r3, r9
 800c190:	106d      	asrs	r5, r5, #1
 800c192:	429d      	cmp	r5, r3
 800c194:	bf38      	it	cc
 800c196:	461d      	movcc	r5, r3
 800c198:	0553      	lsls	r3, r2, #21
 800c19a:	d531      	bpl.n	800c200 <__ssputs_r+0xa0>
 800c19c:	4629      	mov	r1, r5
 800c19e:	f7ff ff6b 	bl	800c078 <_malloc_r>
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	b950      	cbnz	r0, 800c1bc <__ssputs_r+0x5c>
 800c1a6:	230c      	movs	r3, #12
 800c1a8:	f8ca 3000 	str.w	r3, [sl]
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1b2:	81a3      	strh	r3, [r4, #12]
 800c1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1bc:	6921      	ldr	r1, [r4, #16]
 800c1be:	464a      	mov	r2, r9
 800c1c0:	f7fe f818 	bl	800a1f4 <memcpy>
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	6126      	str	r6, [r4, #16]
 800c1d2:	6165      	str	r5, [r4, #20]
 800c1d4:	444e      	add	r6, r9
 800c1d6:	eba5 0509 	sub.w	r5, r5, r9
 800c1da:	6026      	str	r6, [r4, #0]
 800c1dc:	60a5      	str	r5, [r4, #8]
 800c1de:	463e      	mov	r6, r7
 800c1e0:	42be      	cmp	r6, r7
 800c1e2:	d900      	bls.n	800c1e6 <__ssputs_r+0x86>
 800c1e4:	463e      	mov	r6, r7
 800c1e6:	6820      	ldr	r0, [r4, #0]
 800c1e8:	4632      	mov	r2, r6
 800c1ea:	4641      	mov	r1, r8
 800c1ec:	f000 f966 	bl	800c4bc <memmove>
 800c1f0:	68a3      	ldr	r3, [r4, #8]
 800c1f2:	1b9b      	subs	r3, r3, r6
 800c1f4:	60a3      	str	r3, [r4, #8]
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	4433      	add	r3, r6
 800c1fa:	6023      	str	r3, [r4, #0]
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	e7db      	b.n	800c1b8 <__ssputs_r+0x58>
 800c200:	462a      	mov	r2, r5
 800c202:	f000 f981 	bl	800c508 <_realloc_r>
 800c206:	4606      	mov	r6, r0
 800c208:	2800      	cmp	r0, #0
 800c20a:	d1e1      	bne.n	800c1d0 <__ssputs_r+0x70>
 800c20c:	6921      	ldr	r1, [r4, #16]
 800c20e:	4650      	mov	r0, sl
 800c210:	f7ff fec6 	bl	800bfa0 <_free_r>
 800c214:	e7c7      	b.n	800c1a6 <__ssputs_r+0x46>
	...

0800c218 <_svfiprintf_r>:
 800c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21c:	4698      	mov	r8, r3
 800c21e:	898b      	ldrh	r3, [r1, #12]
 800c220:	061b      	lsls	r3, r3, #24
 800c222:	b09d      	sub	sp, #116	; 0x74
 800c224:	4607      	mov	r7, r0
 800c226:	460d      	mov	r5, r1
 800c228:	4614      	mov	r4, r2
 800c22a:	d50e      	bpl.n	800c24a <_svfiprintf_r+0x32>
 800c22c:	690b      	ldr	r3, [r1, #16]
 800c22e:	b963      	cbnz	r3, 800c24a <_svfiprintf_r+0x32>
 800c230:	2140      	movs	r1, #64	; 0x40
 800c232:	f7ff ff21 	bl	800c078 <_malloc_r>
 800c236:	6028      	str	r0, [r5, #0]
 800c238:	6128      	str	r0, [r5, #16]
 800c23a:	b920      	cbnz	r0, 800c246 <_svfiprintf_r+0x2e>
 800c23c:	230c      	movs	r3, #12
 800c23e:	603b      	str	r3, [r7, #0]
 800c240:	f04f 30ff 	mov.w	r0, #4294967295
 800c244:	e0d1      	b.n	800c3ea <_svfiprintf_r+0x1d2>
 800c246:	2340      	movs	r3, #64	; 0x40
 800c248:	616b      	str	r3, [r5, #20]
 800c24a:	2300      	movs	r3, #0
 800c24c:	9309      	str	r3, [sp, #36]	; 0x24
 800c24e:	2320      	movs	r3, #32
 800c250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c254:	f8cd 800c 	str.w	r8, [sp, #12]
 800c258:	2330      	movs	r3, #48	; 0x30
 800c25a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c404 <_svfiprintf_r+0x1ec>
 800c25e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c262:	f04f 0901 	mov.w	r9, #1
 800c266:	4623      	mov	r3, r4
 800c268:	469a      	mov	sl, r3
 800c26a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c26e:	b10a      	cbz	r2, 800c274 <_svfiprintf_r+0x5c>
 800c270:	2a25      	cmp	r2, #37	; 0x25
 800c272:	d1f9      	bne.n	800c268 <_svfiprintf_r+0x50>
 800c274:	ebba 0b04 	subs.w	fp, sl, r4
 800c278:	d00b      	beq.n	800c292 <_svfiprintf_r+0x7a>
 800c27a:	465b      	mov	r3, fp
 800c27c:	4622      	mov	r2, r4
 800c27e:	4629      	mov	r1, r5
 800c280:	4638      	mov	r0, r7
 800c282:	f7ff ff6d 	bl	800c160 <__ssputs_r>
 800c286:	3001      	adds	r0, #1
 800c288:	f000 80aa 	beq.w	800c3e0 <_svfiprintf_r+0x1c8>
 800c28c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c28e:	445a      	add	r2, fp
 800c290:	9209      	str	r2, [sp, #36]	; 0x24
 800c292:	f89a 3000 	ldrb.w	r3, [sl]
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 80a2 	beq.w	800c3e0 <_svfiprintf_r+0x1c8>
 800c29c:	2300      	movs	r3, #0
 800c29e:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2a6:	f10a 0a01 	add.w	sl, sl, #1
 800c2aa:	9304      	str	r3, [sp, #16]
 800c2ac:	9307      	str	r3, [sp, #28]
 800c2ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c2b4:	4654      	mov	r4, sl
 800c2b6:	2205      	movs	r2, #5
 800c2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2bc:	4851      	ldr	r0, [pc, #324]	; (800c404 <_svfiprintf_r+0x1ec>)
 800c2be:	f7f3 ff8f 	bl	80001e0 <memchr>
 800c2c2:	9a04      	ldr	r2, [sp, #16]
 800c2c4:	b9d8      	cbnz	r0, 800c2fe <_svfiprintf_r+0xe6>
 800c2c6:	06d0      	lsls	r0, r2, #27
 800c2c8:	bf44      	itt	mi
 800c2ca:	2320      	movmi	r3, #32
 800c2cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2d0:	0711      	lsls	r1, r2, #28
 800c2d2:	bf44      	itt	mi
 800c2d4:	232b      	movmi	r3, #43	; 0x2b
 800c2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2da:	f89a 3000 	ldrb.w	r3, [sl]
 800c2de:	2b2a      	cmp	r3, #42	; 0x2a
 800c2e0:	d015      	beq.n	800c30e <_svfiprintf_r+0xf6>
 800c2e2:	9a07      	ldr	r2, [sp, #28]
 800c2e4:	4654      	mov	r4, sl
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	f04f 0c0a 	mov.w	ip, #10
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2f2:	3b30      	subs	r3, #48	; 0x30
 800c2f4:	2b09      	cmp	r3, #9
 800c2f6:	d94e      	bls.n	800c396 <_svfiprintf_r+0x17e>
 800c2f8:	b1b0      	cbz	r0, 800c328 <_svfiprintf_r+0x110>
 800c2fa:	9207      	str	r2, [sp, #28]
 800c2fc:	e014      	b.n	800c328 <_svfiprintf_r+0x110>
 800c2fe:	eba0 0308 	sub.w	r3, r0, r8
 800c302:	fa09 f303 	lsl.w	r3, r9, r3
 800c306:	4313      	orrs	r3, r2
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	46a2      	mov	sl, r4
 800c30c:	e7d2      	b.n	800c2b4 <_svfiprintf_r+0x9c>
 800c30e:	9b03      	ldr	r3, [sp, #12]
 800c310:	1d19      	adds	r1, r3, #4
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	9103      	str	r1, [sp, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	bfbb      	ittet	lt
 800c31a:	425b      	neglt	r3, r3
 800c31c:	f042 0202 	orrlt.w	r2, r2, #2
 800c320:	9307      	strge	r3, [sp, #28]
 800c322:	9307      	strlt	r3, [sp, #28]
 800c324:	bfb8      	it	lt
 800c326:	9204      	strlt	r2, [sp, #16]
 800c328:	7823      	ldrb	r3, [r4, #0]
 800c32a:	2b2e      	cmp	r3, #46	; 0x2e
 800c32c:	d10c      	bne.n	800c348 <_svfiprintf_r+0x130>
 800c32e:	7863      	ldrb	r3, [r4, #1]
 800c330:	2b2a      	cmp	r3, #42	; 0x2a
 800c332:	d135      	bne.n	800c3a0 <_svfiprintf_r+0x188>
 800c334:	9b03      	ldr	r3, [sp, #12]
 800c336:	1d1a      	adds	r2, r3, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	9203      	str	r2, [sp, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	bfb8      	it	lt
 800c340:	f04f 33ff 	movlt.w	r3, #4294967295
 800c344:	3402      	adds	r4, #2
 800c346:	9305      	str	r3, [sp, #20]
 800c348:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c414 <_svfiprintf_r+0x1fc>
 800c34c:	7821      	ldrb	r1, [r4, #0]
 800c34e:	2203      	movs	r2, #3
 800c350:	4650      	mov	r0, sl
 800c352:	f7f3 ff45 	bl	80001e0 <memchr>
 800c356:	b140      	cbz	r0, 800c36a <_svfiprintf_r+0x152>
 800c358:	2340      	movs	r3, #64	; 0x40
 800c35a:	eba0 000a 	sub.w	r0, r0, sl
 800c35e:	fa03 f000 	lsl.w	r0, r3, r0
 800c362:	9b04      	ldr	r3, [sp, #16]
 800c364:	4303      	orrs	r3, r0
 800c366:	3401      	adds	r4, #1
 800c368:	9304      	str	r3, [sp, #16]
 800c36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c36e:	4826      	ldr	r0, [pc, #152]	; (800c408 <_svfiprintf_r+0x1f0>)
 800c370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c374:	2206      	movs	r2, #6
 800c376:	f7f3 ff33 	bl	80001e0 <memchr>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	d038      	beq.n	800c3f0 <_svfiprintf_r+0x1d8>
 800c37e:	4b23      	ldr	r3, [pc, #140]	; (800c40c <_svfiprintf_r+0x1f4>)
 800c380:	bb1b      	cbnz	r3, 800c3ca <_svfiprintf_r+0x1b2>
 800c382:	9b03      	ldr	r3, [sp, #12]
 800c384:	3307      	adds	r3, #7
 800c386:	f023 0307 	bic.w	r3, r3, #7
 800c38a:	3308      	adds	r3, #8
 800c38c:	9303      	str	r3, [sp, #12]
 800c38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c390:	4433      	add	r3, r6
 800c392:	9309      	str	r3, [sp, #36]	; 0x24
 800c394:	e767      	b.n	800c266 <_svfiprintf_r+0x4e>
 800c396:	fb0c 3202 	mla	r2, ip, r2, r3
 800c39a:	460c      	mov	r4, r1
 800c39c:	2001      	movs	r0, #1
 800c39e:	e7a5      	b.n	800c2ec <_svfiprintf_r+0xd4>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	3401      	adds	r4, #1
 800c3a4:	9305      	str	r3, [sp, #20]
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	f04f 0c0a 	mov.w	ip, #10
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3b2:	3a30      	subs	r2, #48	; 0x30
 800c3b4:	2a09      	cmp	r2, #9
 800c3b6:	d903      	bls.n	800c3c0 <_svfiprintf_r+0x1a8>
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d0c5      	beq.n	800c348 <_svfiprintf_r+0x130>
 800c3bc:	9105      	str	r1, [sp, #20]
 800c3be:	e7c3      	b.n	800c348 <_svfiprintf_r+0x130>
 800c3c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e7f0      	b.n	800c3ac <_svfiprintf_r+0x194>
 800c3ca:	ab03      	add	r3, sp, #12
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	462a      	mov	r2, r5
 800c3d0:	4b0f      	ldr	r3, [pc, #60]	; (800c410 <_svfiprintf_r+0x1f8>)
 800c3d2:	a904      	add	r1, sp, #16
 800c3d4:	4638      	mov	r0, r7
 800c3d6:	f7fd ffc3 	bl	800a360 <_printf_float>
 800c3da:	1c42      	adds	r2, r0, #1
 800c3dc:	4606      	mov	r6, r0
 800c3de:	d1d6      	bne.n	800c38e <_svfiprintf_r+0x176>
 800c3e0:	89ab      	ldrh	r3, [r5, #12]
 800c3e2:	065b      	lsls	r3, r3, #25
 800c3e4:	f53f af2c 	bmi.w	800c240 <_svfiprintf_r+0x28>
 800c3e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3ea:	b01d      	add	sp, #116	; 0x74
 800c3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f0:	ab03      	add	r3, sp, #12
 800c3f2:	9300      	str	r3, [sp, #0]
 800c3f4:	462a      	mov	r2, r5
 800c3f6:	4b06      	ldr	r3, [pc, #24]	; (800c410 <_svfiprintf_r+0x1f8>)
 800c3f8:	a904      	add	r1, sp, #16
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	f7fe fa54 	bl	800a8a8 <_printf_i>
 800c400:	e7eb      	b.n	800c3da <_svfiprintf_r+0x1c2>
 800c402:	bf00      	nop
 800c404:	080101bc 	.word	0x080101bc
 800c408:	080101c6 	.word	0x080101c6
 800c40c:	0800a361 	.word	0x0800a361
 800c410:	0800c161 	.word	0x0800c161
 800c414:	080101c2 	.word	0x080101c2

0800c418 <_sbrk_r>:
 800c418:	b538      	push	{r3, r4, r5, lr}
 800c41a:	4d06      	ldr	r5, [pc, #24]	; (800c434 <_sbrk_r+0x1c>)
 800c41c:	2300      	movs	r3, #0
 800c41e:	4604      	mov	r4, r0
 800c420:	4608      	mov	r0, r1
 800c422:	602b      	str	r3, [r5, #0]
 800c424:	f7f6 fdd0 	bl	8002fc8 <_sbrk>
 800c428:	1c43      	adds	r3, r0, #1
 800c42a:	d102      	bne.n	800c432 <_sbrk_r+0x1a>
 800c42c:	682b      	ldr	r3, [r5, #0]
 800c42e:	b103      	cbz	r3, 800c432 <_sbrk_r+0x1a>
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	20000b48 	.word	0x20000b48

0800c438 <__assert_func>:
 800c438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c43a:	4614      	mov	r4, r2
 800c43c:	461a      	mov	r2, r3
 800c43e:	4b09      	ldr	r3, [pc, #36]	; (800c464 <__assert_func+0x2c>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4605      	mov	r5, r0
 800c444:	68d8      	ldr	r0, [r3, #12]
 800c446:	b14c      	cbz	r4, 800c45c <__assert_func+0x24>
 800c448:	4b07      	ldr	r3, [pc, #28]	; (800c468 <__assert_func+0x30>)
 800c44a:	9100      	str	r1, [sp, #0]
 800c44c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c450:	4906      	ldr	r1, [pc, #24]	; (800c46c <__assert_func+0x34>)
 800c452:	462b      	mov	r3, r5
 800c454:	f000 f80e 	bl	800c474 <fiprintf>
 800c458:	f000 faac 	bl	800c9b4 <abort>
 800c45c:	4b04      	ldr	r3, [pc, #16]	; (800c470 <__assert_func+0x38>)
 800c45e:	461c      	mov	r4, r3
 800c460:	e7f3      	b.n	800c44a <__assert_func+0x12>
 800c462:	bf00      	nop
 800c464:	2000018c 	.word	0x2000018c
 800c468:	080101cd 	.word	0x080101cd
 800c46c:	080101da 	.word	0x080101da
 800c470:	08010208 	.word	0x08010208

0800c474 <fiprintf>:
 800c474:	b40e      	push	{r1, r2, r3}
 800c476:	b503      	push	{r0, r1, lr}
 800c478:	4601      	mov	r1, r0
 800c47a:	ab03      	add	r3, sp, #12
 800c47c:	4805      	ldr	r0, [pc, #20]	; (800c494 <fiprintf+0x20>)
 800c47e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c482:	6800      	ldr	r0, [r0, #0]
 800c484:	9301      	str	r3, [sp, #4]
 800c486:	f000 f897 	bl	800c5b8 <_vfiprintf_r>
 800c48a:	b002      	add	sp, #8
 800c48c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c490:	b003      	add	sp, #12
 800c492:	4770      	bx	lr
 800c494:	2000018c 	.word	0x2000018c

0800c498 <__ascii_mbtowc>:
 800c498:	b082      	sub	sp, #8
 800c49a:	b901      	cbnz	r1, 800c49e <__ascii_mbtowc+0x6>
 800c49c:	a901      	add	r1, sp, #4
 800c49e:	b142      	cbz	r2, 800c4b2 <__ascii_mbtowc+0x1a>
 800c4a0:	b14b      	cbz	r3, 800c4b6 <__ascii_mbtowc+0x1e>
 800c4a2:	7813      	ldrb	r3, [r2, #0]
 800c4a4:	600b      	str	r3, [r1, #0]
 800c4a6:	7812      	ldrb	r2, [r2, #0]
 800c4a8:	1e10      	subs	r0, r2, #0
 800c4aa:	bf18      	it	ne
 800c4ac:	2001      	movne	r0, #1
 800c4ae:	b002      	add	sp, #8
 800c4b0:	4770      	bx	lr
 800c4b2:	4610      	mov	r0, r2
 800c4b4:	e7fb      	b.n	800c4ae <__ascii_mbtowc+0x16>
 800c4b6:	f06f 0001 	mvn.w	r0, #1
 800c4ba:	e7f8      	b.n	800c4ae <__ascii_mbtowc+0x16>

0800c4bc <memmove>:
 800c4bc:	4288      	cmp	r0, r1
 800c4be:	b510      	push	{r4, lr}
 800c4c0:	eb01 0402 	add.w	r4, r1, r2
 800c4c4:	d902      	bls.n	800c4cc <memmove+0x10>
 800c4c6:	4284      	cmp	r4, r0
 800c4c8:	4623      	mov	r3, r4
 800c4ca:	d807      	bhi.n	800c4dc <memmove+0x20>
 800c4cc:	1e43      	subs	r3, r0, #1
 800c4ce:	42a1      	cmp	r1, r4
 800c4d0:	d008      	beq.n	800c4e4 <memmove+0x28>
 800c4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4da:	e7f8      	b.n	800c4ce <memmove+0x12>
 800c4dc:	4402      	add	r2, r0
 800c4de:	4601      	mov	r1, r0
 800c4e0:	428a      	cmp	r2, r1
 800c4e2:	d100      	bne.n	800c4e6 <memmove+0x2a>
 800c4e4:	bd10      	pop	{r4, pc}
 800c4e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4ee:	e7f7      	b.n	800c4e0 <memmove+0x24>

0800c4f0 <__malloc_lock>:
 800c4f0:	4801      	ldr	r0, [pc, #4]	; (800c4f8 <__malloc_lock+0x8>)
 800c4f2:	f000 bc1f 	b.w	800cd34 <__retarget_lock_acquire_recursive>
 800c4f6:	bf00      	nop
 800c4f8:	20000b4c 	.word	0x20000b4c

0800c4fc <__malloc_unlock>:
 800c4fc:	4801      	ldr	r0, [pc, #4]	; (800c504 <__malloc_unlock+0x8>)
 800c4fe:	f000 bc1a 	b.w	800cd36 <__retarget_lock_release_recursive>
 800c502:	bf00      	nop
 800c504:	20000b4c 	.word	0x20000b4c

0800c508 <_realloc_r>:
 800c508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c50c:	4680      	mov	r8, r0
 800c50e:	4614      	mov	r4, r2
 800c510:	460e      	mov	r6, r1
 800c512:	b921      	cbnz	r1, 800c51e <_realloc_r+0x16>
 800c514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c518:	4611      	mov	r1, r2
 800c51a:	f7ff bdad 	b.w	800c078 <_malloc_r>
 800c51e:	b92a      	cbnz	r2, 800c52c <_realloc_r+0x24>
 800c520:	f7ff fd3e 	bl	800bfa0 <_free_r>
 800c524:	4625      	mov	r5, r4
 800c526:	4628      	mov	r0, r5
 800c528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c52c:	f000 fc6a 	bl	800ce04 <_malloc_usable_size_r>
 800c530:	4284      	cmp	r4, r0
 800c532:	4607      	mov	r7, r0
 800c534:	d802      	bhi.n	800c53c <_realloc_r+0x34>
 800c536:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c53a:	d812      	bhi.n	800c562 <_realloc_r+0x5a>
 800c53c:	4621      	mov	r1, r4
 800c53e:	4640      	mov	r0, r8
 800c540:	f7ff fd9a 	bl	800c078 <_malloc_r>
 800c544:	4605      	mov	r5, r0
 800c546:	2800      	cmp	r0, #0
 800c548:	d0ed      	beq.n	800c526 <_realloc_r+0x1e>
 800c54a:	42bc      	cmp	r4, r7
 800c54c:	4622      	mov	r2, r4
 800c54e:	4631      	mov	r1, r6
 800c550:	bf28      	it	cs
 800c552:	463a      	movcs	r2, r7
 800c554:	f7fd fe4e 	bl	800a1f4 <memcpy>
 800c558:	4631      	mov	r1, r6
 800c55a:	4640      	mov	r0, r8
 800c55c:	f7ff fd20 	bl	800bfa0 <_free_r>
 800c560:	e7e1      	b.n	800c526 <_realloc_r+0x1e>
 800c562:	4635      	mov	r5, r6
 800c564:	e7df      	b.n	800c526 <_realloc_r+0x1e>

0800c566 <__sfputc_r>:
 800c566:	6893      	ldr	r3, [r2, #8]
 800c568:	3b01      	subs	r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	b410      	push	{r4}
 800c56e:	6093      	str	r3, [r2, #8]
 800c570:	da08      	bge.n	800c584 <__sfputc_r+0x1e>
 800c572:	6994      	ldr	r4, [r2, #24]
 800c574:	42a3      	cmp	r3, r4
 800c576:	db01      	blt.n	800c57c <__sfputc_r+0x16>
 800c578:	290a      	cmp	r1, #10
 800c57a:	d103      	bne.n	800c584 <__sfputc_r+0x1e>
 800c57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c580:	f000 b94a 	b.w	800c818 <__swbuf_r>
 800c584:	6813      	ldr	r3, [r2, #0]
 800c586:	1c58      	adds	r0, r3, #1
 800c588:	6010      	str	r0, [r2, #0]
 800c58a:	7019      	strb	r1, [r3, #0]
 800c58c:	4608      	mov	r0, r1
 800c58e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <__sfputs_r>:
 800c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c596:	4606      	mov	r6, r0
 800c598:	460f      	mov	r7, r1
 800c59a:	4614      	mov	r4, r2
 800c59c:	18d5      	adds	r5, r2, r3
 800c59e:	42ac      	cmp	r4, r5
 800c5a0:	d101      	bne.n	800c5a6 <__sfputs_r+0x12>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e007      	b.n	800c5b6 <__sfputs_r+0x22>
 800c5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5aa:	463a      	mov	r2, r7
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f7ff ffda 	bl	800c566 <__sfputc_r>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	d1f3      	bne.n	800c59e <__sfputs_r+0xa>
 800c5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5b8 <_vfiprintf_r>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	460d      	mov	r5, r1
 800c5be:	b09d      	sub	sp, #116	; 0x74
 800c5c0:	4614      	mov	r4, r2
 800c5c2:	4698      	mov	r8, r3
 800c5c4:	4606      	mov	r6, r0
 800c5c6:	b118      	cbz	r0, 800c5d0 <_vfiprintf_r+0x18>
 800c5c8:	6983      	ldr	r3, [r0, #24]
 800c5ca:	b90b      	cbnz	r3, 800c5d0 <_vfiprintf_r+0x18>
 800c5cc:	f000 fb14 	bl	800cbf8 <__sinit>
 800c5d0:	4b89      	ldr	r3, [pc, #548]	; (800c7f8 <_vfiprintf_r+0x240>)
 800c5d2:	429d      	cmp	r5, r3
 800c5d4:	d11b      	bne.n	800c60e <_vfiprintf_r+0x56>
 800c5d6:	6875      	ldr	r5, [r6, #4]
 800c5d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5da:	07d9      	lsls	r1, r3, #31
 800c5dc:	d405      	bmi.n	800c5ea <_vfiprintf_r+0x32>
 800c5de:	89ab      	ldrh	r3, [r5, #12]
 800c5e0:	059a      	lsls	r2, r3, #22
 800c5e2:	d402      	bmi.n	800c5ea <_vfiprintf_r+0x32>
 800c5e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5e6:	f000 fba5 	bl	800cd34 <__retarget_lock_acquire_recursive>
 800c5ea:	89ab      	ldrh	r3, [r5, #12]
 800c5ec:	071b      	lsls	r3, r3, #28
 800c5ee:	d501      	bpl.n	800c5f4 <_vfiprintf_r+0x3c>
 800c5f0:	692b      	ldr	r3, [r5, #16]
 800c5f2:	b9eb      	cbnz	r3, 800c630 <_vfiprintf_r+0x78>
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	f000 f96e 	bl	800c8d8 <__swsetup_r>
 800c5fc:	b1c0      	cbz	r0, 800c630 <_vfiprintf_r+0x78>
 800c5fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c600:	07dc      	lsls	r4, r3, #31
 800c602:	d50e      	bpl.n	800c622 <_vfiprintf_r+0x6a>
 800c604:	f04f 30ff 	mov.w	r0, #4294967295
 800c608:	b01d      	add	sp, #116	; 0x74
 800c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60e:	4b7b      	ldr	r3, [pc, #492]	; (800c7fc <_vfiprintf_r+0x244>)
 800c610:	429d      	cmp	r5, r3
 800c612:	d101      	bne.n	800c618 <_vfiprintf_r+0x60>
 800c614:	68b5      	ldr	r5, [r6, #8]
 800c616:	e7df      	b.n	800c5d8 <_vfiprintf_r+0x20>
 800c618:	4b79      	ldr	r3, [pc, #484]	; (800c800 <_vfiprintf_r+0x248>)
 800c61a:	429d      	cmp	r5, r3
 800c61c:	bf08      	it	eq
 800c61e:	68f5      	ldreq	r5, [r6, #12]
 800c620:	e7da      	b.n	800c5d8 <_vfiprintf_r+0x20>
 800c622:	89ab      	ldrh	r3, [r5, #12]
 800c624:	0598      	lsls	r0, r3, #22
 800c626:	d4ed      	bmi.n	800c604 <_vfiprintf_r+0x4c>
 800c628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c62a:	f000 fb84 	bl	800cd36 <__retarget_lock_release_recursive>
 800c62e:	e7e9      	b.n	800c604 <_vfiprintf_r+0x4c>
 800c630:	2300      	movs	r3, #0
 800c632:	9309      	str	r3, [sp, #36]	; 0x24
 800c634:	2320      	movs	r3, #32
 800c636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c63a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c63e:	2330      	movs	r3, #48	; 0x30
 800c640:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c804 <_vfiprintf_r+0x24c>
 800c644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c648:	f04f 0901 	mov.w	r9, #1
 800c64c:	4623      	mov	r3, r4
 800c64e:	469a      	mov	sl, r3
 800c650:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c654:	b10a      	cbz	r2, 800c65a <_vfiprintf_r+0xa2>
 800c656:	2a25      	cmp	r2, #37	; 0x25
 800c658:	d1f9      	bne.n	800c64e <_vfiprintf_r+0x96>
 800c65a:	ebba 0b04 	subs.w	fp, sl, r4
 800c65e:	d00b      	beq.n	800c678 <_vfiprintf_r+0xc0>
 800c660:	465b      	mov	r3, fp
 800c662:	4622      	mov	r2, r4
 800c664:	4629      	mov	r1, r5
 800c666:	4630      	mov	r0, r6
 800c668:	f7ff ff94 	bl	800c594 <__sfputs_r>
 800c66c:	3001      	adds	r0, #1
 800c66e:	f000 80aa 	beq.w	800c7c6 <_vfiprintf_r+0x20e>
 800c672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c674:	445a      	add	r2, fp
 800c676:	9209      	str	r2, [sp, #36]	; 0x24
 800c678:	f89a 3000 	ldrb.w	r3, [sl]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f000 80a2 	beq.w	800c7c6 <_vfiprintf_r+0x20e>
 800c682:	2300      	movs	r3, #0
 800c684:	f04f 32ff 	mov.w	r2, #4294967295
 800c688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c68c:	f10a 0a01 	add.w	sl, sl, #1
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	9307      	str	r3, [sp, #28]
 800c694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c698:	931a      	str	r3, [sp, #104]	; 0x68
 800c69a:	4654      	mov	r4, sl
 800c69c:	2205      	movs	r2, #5
 800c69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a2:	4858      	ldr	r0, [pc, #352]	; (800c804 <_vfiprintf_r+0x24c>)
 800c6a4:	f7f3 fd9c 	bl	80001e0 <memchr>
 800c6a8:	9a04      	ldr	r2, [sp, #16]
 800c6aa:	b9d8      	cbnz	r0, 800c6e4 <_vfiprintf_r+0x12c>
 800c6ac:	06d1      	lsls	r1, r2, #27
 800c6ae:	bf44      	itt	mi
 800c6b0:	2320      	movmi	r3, #32
 800c6b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6b6:	0713      	lsls	r3, r2, #28
 800c6b8:	bf44      	itt	mi
 800c6ba:	232b      	movmi	r3, #43	; 0x2b
 800c6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6c6:	d015      	beq.n	800c6f4 <_vfiprintf_r+0x13c>
 800c6c8:	9a07      	ldr	r2, [sp, #28]
 800c6ca:	4654      	mov	r4, sl
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	f04f 0c0a 	mov.w	ip, #10
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6d8:	3b30      	subs	r3, #48	; 0x30
 800c6da:	2b09      	cmp	r3, #9
 800c6dc:	d94e      	bls.n	800c77c <_vfiprintf_r+0x1c4>
 800c6de:	b1b0      	cbz	r0, 800c70e <_vfiprintf_r+0x156>
 800c6e0:	9207      	str	r2, [sp, #28]
 800c6e2:	e014      	b.n	800c70e <_vfiprintf_r+0x156>
 800c6e4:	eba0 0308 	sub.w	r3, r0, r8
 800c6e8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	9304      	str	r3, [sp, #16]
 800c6f0:	46a2      	mov	sl, r4
 800c6f2:	e7d2      	b.n	800c69a <_vfiprintf_r+0xe2>
 800c6f4:	9b03      	ldr	r3, [sp, #12]
 800c6f6:	1d19      	adds	r1, r3, #4
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	9103      	str	r1, [sp, #12]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	bfbb      	ittet	lt
 800c700:	425b      	neglt	r3, r3
 800c702:	f042 0202 	orrlt.w	r2, r2, #2
 800c706:	9307      	strge	r3, [sp, #28]
 800c708:	9307      	strlt	r3, [sp, #28]
 800c70a:	bfb8      	it	lt
 800c70c:	9204      	strlt	r2, [sp, #16]
 800c70e:	7823      	ldrb	r3, [r4, #0]
 800c710:	2b2e      	cmp	r3, #46	; 0x2e
 800c712:	d10c      	bne.n	800c72e <_vfiprintf_r+0x176>
 800c714:	7863      	ldrb	r3, [r4, #1]
 800c716:	2b2a      	cmp	r3, #42	; 0x2a
 800c718:	d135      	bne.n	800c786 <_vfiprintf_r+0x1ce>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	1d1a      	adds	r2, r3, #4
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	9203      	str	r2, [sp, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	bfb8      	it	lt
 800c726:	f04f 33ff 	movlt.w	r3, #4294967295
 800c72a:	3402      	adds	r4, #2
 800c72c:	9305      	str	r3, [sp, #20]
 800c72e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c814 <_vfiprintf_r+0x25c>
 800c732:	7821      	ldrb	r1, [r4, #0]
 800c734:	2203      	movs	r2, #3
 800c736:	4650      	mov	r0, sl
 800c738:	f7f3 fd52 	bl	80001e0 <memchr>
 800c73c:	b140      	cbz	r0, 800c750 <_vfiprintf_r+0x198>
 800c73e:	2340      	movs	r3, #64	; 0x40
 800c740:	eba0 000a 	sub.w	r0, r0, sl
 800c744:	fa03 f000 	lsl.w	r0, r3, r0
 800c748:	9b04      	ldr	r3, [sp, #16]
 800c74a:	4303      	orrs	r3, r0
 800c74c:	3401      	adds	r4, #1
 800c74e:	9304      	str	r3, [sp, #16]
 800c750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c754:	482c      	ldr	r0, [pc, #176]	; (800c808 <_vfiprintf_r+0x250>)
 800c756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c75a:	2206      	movs	r2, #6
 800c75c:	f7f3 fd40 	bl	80001e0 <memchr>
 800c760:	2800      	cmp	r0, #0
 800c762:	d03f      	beq.n	800c7e4 <_vfiprintf_r+0x22c>
 800c764:	4b29      	ldr	r3, [pc, #164]	; (800c80c <_vfiprintf_r+0x254>)
 800c766:	bb1b      	cbnz	r3, 800c7b0 <_vfiprintf_r+0x1f8>
 800c768:	9b03      	ldr	r3, [sp, #12]
 800c76a:	3307      	adds	r3, #7
 800c76c:	f023 0307 	bic.w	r3, r3, #7
 800c770:	3308      	adds	r3, #8
 800c772:	9303      	str	r3, [sp, #12]
 800c774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c776:	443b      	add	r3, r7
 800c778:	9309      	str	r3, [sp, #36]	; 0x24
 800c77a:	e767      	b.n	800c64c <_vfiprintf_r+0x94>
 800c77c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c780:	460c      	mov	r4, r1
 800c782:	2001      	movs	r0, #1
 800c784:	e7a5      	b.n	800c6d2 <_vfiprintf_r+0x11a>
 800c786:	2300      	movs	r3, #0
 800c788:	3401      	adds	r4, #1
 800c78a:	9305      	str	r3, [sp, #20]
 800c78c:	4619      	mov	r1, r3
 800c78e:	f04f 0c0a 	mov.w	ip, #10
 800c792:	4620      	mov	r0, r4
 800c794:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c798:	3a30      	subs	r2, #48	; 0x30
 800c79a:	2a09      	cmp	r2, #9
 800c79c:	d903      	bls.n	800c7a6 <_vfiprintf_r+0x1ee>
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d0c5      	beq.n	800c72e <_vfiprintf_r+0x176>
 800c7a2:	9105      	str	r1, [sp, #20]
 800c7a4:	e7c3      	b.n	800c72e <_vfiprintf_r+0x176>
 800c7a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e7f0      	b.n	800c792 <_vfiprintf_r+0x1da>
 800c7b0:	ab03      	add	r3, sp, #12
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	462a      	mov	r2, r5
 800c7b6:	4b16      	ldr	r3, [pc, #88]	; (800c810 <_vfiprintf_r+0x258>)
 800c7b8:	a904      	add	r1, sp, #16
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f7fd fdd0 	bl	800a360 <_printf_float>
 800c7c0:	4607      	mov	r7, r0
 800c7c2:	1c78      	adds	r0, r7, #1
 800c7c4:	d1d6      	bne.n	800c774 <_vfiprintf_r+0x1bc>
 800c7c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7c8:	07d9      	lsls	r1, r3, #31
 800c7ca:	d405      	bmi.n	800c7d8 <_vfiprintf_r+0x220>
 800c7cc:	89ab      	ldrh	r3, [r5, #12]
 800c7ce:	059a      	lsls	r2, r3, #22
 800c7d0:	d402      	bmi.n	800c7d8 <_vfiprintf_r+0x220>
 800c7d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7d4:	f000 faaf 	bl	800cd36 <__retarget_lock_release_recursive>
 800c7d8:	89ab      	ldrh	r3, [r5, #12]
 800c7da:	065b      	lsls	r3, r3, #25
 800c7dc:	f53f af12 	bmi.w	800c604 <_vfiprintf_r+0x4c>
 800c7e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7e2:	e711      	b.n	800c608 <_vfiprintf_r+0x50>
 800c7e4:	ab03      	add	r3, sp, #12
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	462a      	mov	r2, r5
 800c7ea:	4b09      	ldr	r3, [pc, #36]	; (800c810 <_vfiprintf_r+0x258>)
 800c7ec:	a904      	add	r1, sp, #16
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7fe f85a 	bl	800a8a8 <_printf_i>
 800c7f4:	e7e4      	b.n	800c7c0 <_vfiprintf_r+0x208>
 800c7f6:	bf00      	nop
 800c7f8:	08010334 	.word	0x08010334
 800c7fc:	08010354 	.word	0x08010354
 800c800:	08010314 	.word	0x08010314
 800c804:	080101bc 	.word	0x080101bc
 800c808:	080101c6 	.word	0x080101c6
 800c80c:	0800a361 	.word	0x0800a361
 800c810:	0800c595 	.word	0x0800c595
 800c814:	080101c2 	.word	0x080101c2

0800c818 <__swbuf_r>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	460e      	mov	r6, r1
 800c81c:	4614      	mov	r4, r2
 800c81e:	4605      	mov	r5, r0
 800c820:	b118      	cbz	r0, 800c82a <__swbuf_r+0x12>
 800c822:	6983      	ldr	r3, [r0, #24]
 800c824:	b90b      	cbnz	r3, 800c82a <__swbuf_r+0x12>
 800c826:	f000 f9e7 	bl	800cbf8 <__sinit>
 800c82a:	4b21      	ldr	r3, [pc, #132]	; (800c8b0 <__swbuf_r+0x98>)
 800c82c:	429c      	cmp	r4, r3
 800c82e:	d12b      	bne.n	800c888 <__swbuf_r+0x70>
 800c830:	686c      	ldr	r4, [r5, #4]
 800c832:	69a3      	ldr	r3, [r4, #24]
 800c834:	60a3      	str	r3, [r4, #8]
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	071a      	lsls	r2, r3, #28
 800c83a:	d52f      	bpl.n	800c89c <__swbuf_r+0x84>
 800c83c:	6923      	ldr	r3, [r4, #16]
 800c83e:	b36b      	cbz	r3, 800c89c <__swbuf_r+0x84>
 800c840:	6923      	ldr	r3, [r4, #16]
 800c842:	6820      	ldr	r0, [r4, #0]
 800c844:	1ac0      	subs	r0, r0, r3
 800c846:	6963      	ldr	r3, [r4, #20]
 800c848:	b2f6      	uxtb	r6, r6
 800c84a:	4283      	cmp	r3, r0
 800c84c:	4637      	mov	r7, r6
 800c84e:	dc04      	bgt.n	800c85a <__swbuf_r+0x42>
 800c850:	4621      	mov	r1, r4
 800c852:	4628      	mov	r0, r5
 800c854:	f000 f93c 	bl	800cad0 <_fflush_r>
 800c858:	bb30      	cbnz	r0, 800c8a8 <__swbuf_r+0x90>
 800c85a:	68a3      	ldr	r3, [r4, #8]
 800c85c:	3b01      	subs	r3, #1
 800c85e:	60a3      	str	r3, [r4, #8]
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	1c5a      	adds	r2, r3, #1
 800c864:	6022      	str	r2, [r4, #0]
 800c866:	701e      	strb	r6, [r3, #0]
 800c868:	6963      	ldr	r3, [r4, #20]
 800c86a:	3001      	adds	r0, #1
 800c86c:	4283      	cmp	r3, r0
 800c86e:	d004      	beq.n	800c87a <__swbuf_r+0x62>
 800c870:	89a3      	ldrh	r3, [r4, #12]
 800c872:	07db      	lsls	r3, r3, #31
 800c874:	d506      	bpl.n	800c884 <__swbuf_r+0x6c>
 800c876:	2e0a      	cmp	r6, #10
 800c878:	d104      	bne.n	800c884 <__swbuf_r+0x6c>
 800c87a:	4621      	mov	r1, r4
 800c87c:	4628      	mov	r0, r5
 800c87e:	f000 f927 	bl	800cad0 <_fflush_r>
 800c882:	b988      	cbnz	r0, 800c8a8 <__swbuf_r+0x90>
 800c884:	4638      	mov	r0, r7
 800c886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c888:	4b0a      	ldr	r3, [pc, #40]	; (800c8b4 <__swbuf_r+0x9c>)
 800c88a:	429c      	cmp	r4, r3
 800c88c:	d101      	bne.n	800c892 <__swbuf_r+0x7a>
 800c88e:	68ac      	ldr	r4, [r5, #8]
 800c890:	e7cf      	b.n	800c832 <__swbuf_r+0x1a>
 800c892:	4b09      	ldr	r3, [pc, #36]	; (800c8b8 <__swbuf_r+0xa0>)
 800c894:	429c      	cmp	r4, r3
 800c896:	bf08      	it	eq
 800c898:	68ec      	ldreq	r4, [r5, #12]
 800c89a:	e7ca      	b.n	800c832 <__swbuf_r+0x1a>
 800c89c:	4621      	mov	r1, r4
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f000 f81a 	bl	800c8d8 <__swsetup_r>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d0cb      	beq.n	800c840 <__swbuf_r+0x28>
 800c8a8:	f04f 37ff 	mov.w	r7, #4294967295
 800c8ac:	e7ea      	b.n	800c884 <__swbuf_r+0x6c>
 800c8ae:	bf00      	nop
 800c8b0:	08010334 	.word	0x08010334
 800c8b4:	08010354 	.word	0x08010354
 800c8b8:	08010314 	.word	0x08010314

0800c8bc <__ascii_wctomb>:
 800c8bc:	b149      	cbz	r1, 800c8d2 <__ascii_wctomb+0x16>
 800c8be:	2aff      	cmp	r2, #255	; 0xff
 800c8c0:	bf85      	ittet	hi
 800c8c2:	238a      	movhi	r3, #138	; 0x8a
 800c8c4:	6003      	strhi	r3, [r0, #0]
 800c8c6:	700a      	strbls	r2, [r1, #0]
 800c8c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c8cc:	bf98      	it	ls
 800c8ce:	2001      	movls	r0, #1
 800c8d0:	4770      	bx	lr
 800c8d2:	4608      	mov	r0, r1
 800c8d4:	4770      	bx	lr
	...

0800c8d8 <__swsetup_r>:
 800c8d8:	4b32      	ldr	r3, [pc, #200]	; (800c9a4 <__swsetup_r+0xcc>)
 800c8da:	b570      	push	{r4, r5, r6, lr}
 800c8dc:	681d      	ldr	r5, [r3, #0]
 800c8de:	4606      	mov	r6, r0
 800c8e0:	460c      	mov	r4, r1
 800c8e2:	b125      	cbz	r5, 800c8ee <__swsetup_r+0x16>
 800c8e4:	69ab      	ldr	r3, [r5, #24]
 800c8e6:	b913      	cbnz	r3, 800c8ee <__swsetup_r+0x16>
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	f000 f985 	bl	800cbf8 <__sinit>
 800c8ee:	4b2e      	ldr	r3, [pc, #184]	; (800c9a8 <__swsetup_r+0xd0>)
 800c8f0:	429c      	cmp	r4, r3
 800c8f2:	d10f      	bne.n	800c914 <__swsetup_r+0x3c>
 800c8f4:	686c      	ldr	r4, [r5, #4]
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8fc:	0719      	lsls	r1, r3, #28
 800c8fe:	d42c      	bmi.n	800c95a <__swsetup_r+0x82>
 800c900:	06dd      	lsls	r5, r3, #27
 800c902:	d411      	bmi.n	800c928 <__swsetup_r+0x50>
 800c904:	2309      	movs	r3, #9
 800c906:	6033      	str	r3, [r6, #0]
 800c908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c90c:	81a3      	strh	r3, [r4, #12]
 800c90e:	f04f 30ff 	mov.w	r0, #4294967295
 800c912:	e03e      	b.n	800c992 <__swsetup_r+0xba>
 800c914:	4b25      	ldr	r3, [pc, #148]	; (800c9ac <__swsetup_r+0xd4>)
 800c916:	429c      	cmp	r4, r3
 800c918:	d101      	bne.n	800c91e <__swsetup_r+0x46>
 800c91a:	68ac      	ldr	r4, [r5, #8]
 800c91c:	e7eb      	b.n	800c8f6 <__swsetup_r+0x1e>
 800c91e:	4b24      	ldr	r3, [pc, #144]	; (800c9b0 <__swsetup_r+0xd8>)
 800c920:	429c      	cmp	r4, r3
 800c922:	bf08      	it	eq
 800c924:	68ec      	ldreq	r4, [r5, #12]
 800c926:	e7e6      	b.n	800c8f6 <__swsetup_r+0x1e>
 800c928:	0758      	lsls	r0, r3, #29
 800c92a:	d512      	bpl.n	800c952 <__swsetup_r+0x7a>
 800c92c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c92e:	b141      	cbz	r1, 800c942 <__swsetup_r+0x6a>
 800c930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c934:	4299      	cmp	r1, r3
 800c936:	d002      	beq.n	800c93e <__swsetup_r+0x66>
 800c938:	4630      	mov	r0, r6
 800c93a:	f7ff fb31 	bl	800bfa0 <_free_r>
 800c93e:	2300      	movs	r3, #0
 800c940:	6363      	str	r3, [r4, #52]	; 0x34
 800c942:	89a3      	ldrh	r3, [r4, #12]
 800c944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c948:	81a3      	strh	r3, [r4, #12]
 800c94a:	2300      	movs	r3, #0
 800c94c:	6063      	str	r3, [r4, #4]
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	6023      	str	r3, [r4, #0]
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	f043 0308 	orr.w	r3, r3, #8
 800c958:	81a3      	strh	r3, [r4, #12]
 800c95a:	6923      	ldr	r3, [r4, #16]
 800c95c:	b94b      	cbnz	r3, 800c972 <__swsetup_r+0x9a>
 800c95e:	89a3      	ldrh	r3, [r4, #12]
 800c960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c968:	d003      	beq.n	800c972 <__swsetup_r+0x9a>
 800c96a:	4621      	mov	r1, r4
 800c96c:	4630      	mov	r0, r6
 800c96e:	f000 fa09 	bl	800cd84 <__smakebuf_r>
 800c972:	89a0      	ldrh	r0, [r4, #12]
 800c974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c978:	f010 0301 	ands.w	r3, r0, #1
 800c97c:	d00a      	beq.n	800c994 <__swsetup_r+0xbc>
 800c97e:	2300      	movs	r3, #0
 800c980:	60a3      	str	r3, [r4, #8]
 800c982:	6963      	ldr	r3, [r4, #20]
 800c984:	425b      	negs	r3, r3
 800c986:	61a3      	str	r3, [r4, #24]
 800c988:	6923      	ldr	r3, [r4, #16]
 800c98a:	b943      	cbnz	r3, 800c99e <__swsetup_r+0xc6>
 800c98c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c990:	d1ba      	bne.n	800c908 <__swsetup_r+0x30>
 800c992:	bd70      	pop	{r4, r5, r6, pc}
 800c994:	0781      	lsls	r1, r0, #30
 800c996:	bf58      	it	pl
 800c998:	6963      	ldrpl	r3, [r4, #20]
 800c99a:	60a3      	str	r3, [r4, #8]
 800c99c:	e7f4      	b.n	800c988 <__swsetup_r+0xb0>
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e7f7      	b.n	800c992 <__swsetup_r+0xba>
 800c9a2:	bf00      	nop
 800c9a4:	2000018c 	.word	0x2000018c
 800c9a8:	08010334 	.word	0x08010334
 800c9ac:	08010354 	.word	0x08010354
 800c9b0:	08010314 	.word	0x08010314

0800c9b4 <abort>:
 800c9b4:	b508      	push	{r3, lr}
 800c9b6:	2006      	movs	r0, #6
 800c9b8:	f000 fa54 	bl	800ce64 <raise>
 800c9bc:	2001      	movs	r0, #1
 800c9be:	f7f6 fa8b 	bl	8002ed8 <_exit>
	...

0800c9c4 <__sflush_r>:
 800c9c4:	898a      	ldrh	r2, [r1, #12]
 800c9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	0710      	lsls	r0, r2, #28
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	d458      	bmi.n	800ca84 <__sflush_r+0xc0>
 800c9d2:	684b      	ldr	r3, [r1, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	dc05      	bgt.n	800c9e4 <__sflush_r+0x20>
 800c9d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	dc02      	bgt.n	800c9e4 <__sflush_r+0x20>
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9e6:	2e00      	cmp	r6, #0
 800c9e8:	d0f9      	beq.n	800c9de <__sflush_r+0x1a>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9f0:	682f      	ldr	r7, [r5, #0]
 800c9f2:	602b      	str	r3, [r5, #0]
 800c9f4:	d032      	beq.n	800ca5c <__sflush_r+0x98>
 800c9f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	075a      	lsls	r2, r3, #29
 800c9fc:	d505      	bpl.n	800ca0a <__sflush_r+0x46>
 800c9fe:	6863      	ldr	r3, [r4, #4]
 800ca00:	1ac0      	subs	r0, r0, r3
 800ca02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca04:	b10b      	cbz	r3, 800ca0a <__sflush_r+0x46>
 800ca06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca08:	1ac0      	subs	r0, r0, r3
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca10:	6a21      	ldr	r1, [r4, #32]
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b0      	blx	r6
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	89a3      	ldrh	r3, [r4, #12]
 800ca1a:	d106      	bne.n	800ca2a <__sflush_r+0x66>
 800ca1c:	6829      	ldr	r1, [r5, #0]
 800ca1e:	291d      	cmp	r1, #29
 800ca20:	d82c      	bhi.n	800ca7c <__sflush_r+0xb8>
 800ca22:	4a2a      	ldr	r2, [pc, #168]	; (800cacc <__sflush_r+0x108>)
 800ca24:	40ca      	lsrs	r2, r1
 800ca26:	07d6      	lsls	r6, r2, #31
 800ca28:	d528      	bpl.n	800ca7c <__sflush_r+0xb8>
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	6062      	str	r2, [r4, #4]
 800ca2e:	04d9      	lsls	r1, r3, #19
 800ca30:	6922      	ldr	r2, [r4, #16]
 800ca32:	6022      	str	r2, [r4, #0]
 800ca34:	d504      	bpl.n	800ca40 <__sflush_r+0x7c>
 800ca36:	1c42      	adds	r2, r0, #1
 800ca38:	d101      	bne.n	800ca3e <__sflush_r+0x7a>
 800ca3a:	682b      	ldr	r3, [r5, #0]
 800ca3c:	b903      	cbnz	r3, 800ca40 <__sflush_r+0x7c>
 800ca3e:	6560      	str	r0, [r4, #84]	; 0x54
 800ca40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca42:	602f      	str	r7, [r5, #0]
 800ca44:	2900      	cmp	r1, #0
 800ca46:	d0ca      	beq.n	800c9de <__sflush_r+0x1a>
 800ca48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca4c:	4299      	cmp	r1, r3
 800ca4e:	d002      	beq.n	800ca56 <__sflush_r+0x92>
 800ca50:	4628      	mov	r0, r5
 800ca52:	f7ff faa5 	bl	800bfa0 <_free_r>
 800ca56:	2000      	movs	r0, #0
 800ca58:	6360      	str	r0, [r4, #52]	; 0x34
 800ca5a:	e7c1      	b.n	800c9e0 <__sflush_r+0x1c>
 800ca5c:	6a21      	ldr	r1, [r4, #32]
 800ca5e:	2301      	movs	r3, #1
 800ca60:	4628      	mov	r0, r5
 800ca62:	47b0      	blx	r6
 800ca64:	1c41      	adds	r1, r0, #1
 800ca66:	d1c7      	bne.n	800c9f8 <__sflush_r+0x34>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0c4      	beq.n	800c9f8 <__sflush_r+0x34>
 800ca6e:	2b1d      	cmp	r3, #29
 800ca70:	d001      	beq.n	800ca76 <__sflush_r+0xb2>
 800ca72:	2b16      	cmp	r3, #22
 800ca74:	d101      	bne.n	800ca7a <__sflush_r+0xb6>
 800ca76:	602f      	str	r7, [r5, #0]
 800ca78:	e7b1      	b.n	800c9de <__sflush_r+0x1a>
 800ca7a:	89a3      	ldrh	r3, [r4, #12]
 800ca7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	e7ad      	b.n	800c9e0 <__sflush_r+0x1c>
 800ca84:	690f      	ldr	r7, [r1, #16]
 800ca86:	2f00      	cmp	r7, #0
 800ca88:	d0a9      	beq.n	800c9de <__sflush_r+0x1a>
 800ca8a:	0793      	lsls	r3, r2, #30
 800ca8c:	680e      	ldr	r6, [r1, #0]
 800ca8e:	bf08      	it	eq
 800ca90:	694b      	ldreq	r3, [r1, #20]
 800ca92:	600f      	str	r7, [r1, #0]
 800ca94:	bf18      	it	ne
 800ca96:	2300      	movne	r3, #0
 800ca98:	eba6 0807 	sub.w	r8, r6, r7
 800ca9c:	608b      	str	r3, [r1, #8]
 800ca9e:	f1b8 0f00 	cmp.w	r8, #0
 800caa2:	dd9c      	ble.n	800c9de <__sflush_r+0x1a>
 800caa4:	6a21      	ldr	r1, [r4, #32]
 800caa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800caa8:	4643      	mov	r3, r8
 800caaa:	463a      	mov	r2, r7
 800caac:	4628      	mov	r0, r5
 800caae:	47b0      	blx	r6
 800cab0:	2800      	cmp	r0, #0
 800cab2:	dc06      	bgt.n	800cac2 <__sflush_r+0xfe>
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295
 800cac0:	e78e      	b.n	800c9e0 <__sflush_r+0x1c>
 800cac2:	4407      	add	r7, r0
 800cac4:	eba8 0800 	sub.w	r8, r8, r0
 800cac8:	e7e9      	b.n	800ca9e <__sflush_r+0xda>
 800caca:	bf00      	nop
 800cacc:	20400001 	.word	0x20400001

0800cad0 <_fflush_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	690b      	ldr	r3, [r1, #16]
 800cad4:	4605      	mov	r5, r0
 800cad6:	460c      	mov	r4, r1
 800cad8:	b913      	cbnz	r3, 800cae0 <_fflush_r+0x10>
 800cada:	2500      	movs	r5, #0
 800cadc:	4628      	mov	r0, r5
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	b118      	cbz	r0, 800caea <_fflush_r+0x1a>
 800cae2:	6983      	ldr	r3, [r0, #24]
 800cae4:	b90b      	cbnz	r3, 800caea <_fflush_r+0x1a>
 800cae6:	f000 f887 	bl	800cbf8 <__sinit>
 800caea:	4b14      	ldr	r3, [pc, #80]	; (800cb3c <_fflush_r+0x6c>)
 800caec:	429c      	cmp	r4, r3
 800caee:	d11b      	bne.n	800cb28 <_fflush_r+0x58>
 800caf0:	686c      	ldr	r4, [r5, #4]
 800caf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d0ef      	beq.n	800cada <_fflush_r+0xa>
 800cafa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cafc:	07d0      	lsls	r0, r2, #31
 800cafe:	d404      	bmi.n	800cb0a <_fflush_r+0x3a>
 800cb00:	0599      	lsls	r1, r3, #22
 800cb02:	d402      	bmi.n	800cb0a <_fflush_r+0x3a>
 800cb04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb06:	f000 f915 	bl	800cd34 <__retarget_lock_acquire_recursive>
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	f7ff ff59 	bl	800c9c4 <__sflush_r>
 800cb12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb14:	07da      	lsls	r2, r3, #31
 800cb16:	4605      	mov	r5, r0
 800cb18:	d4e0      	bmi.n	800cadc <_fflush_r+0xc>
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	059b      	lsls	r3, r3, #22
 800cb1e:	d4dd      	bmi.n	800cadc <_fflush_r+0xc>
 800cb20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb22:	f000 f908 	bl	800cd36 <__retarget_lock_release_recursive>
 800cb26:	e7d9      	b.n	800cadc <_fflush_r+0xc>
 800cb28:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <_fflush_r+0x70>)
 800cb2a:	429c      	cmp	r4, r3
 800cb2c:	d101      	bne.n	800cb32 <_fflush_r+0x62>
 800cb2e:	68ac      	ldr	r4, [r5, #8]
 800cb30:	e7df      	b.n	800caf2 <_fflush_r+0x22>
 800cb32:	4b04      	ldr	r3, [pc, #16]	; (800cb44 <_fflush_r+0x74>)
 800cb34:	429c      	cmp	r4, r3
 800cb36:	bf08      	it	eq
 800cb38:	68ec      	ldreq	r4, [r5, #12]
 800cb3a:	e7da      	b.n	800caf2 <_fflush_r+0x22>
 800cb3c:	08010334 	.word	0x08010334
 800cb40:	08010354 	.word	0x08010354
 800cb44:	08010314 	.word	0x08010314

0800cb48 <std>:
 800cb48:	2300      	movs	r3, #0
 800cb4a:	b510      	push	{r4, lr}
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb56:	6083      	str	r3, [r0, #8]
 800cb58:	8181      	strh	r1, [r0, #12]
 800cb5a:	6643      	str	r3, [r0, #100]	; 0x64
 800cb5c:	81c2      	strh	r2, [r0, #14]
 800cb5e:	6183      	str	r3, [r0, #24]
 800cb60:	4619      	mov	r1, r3
 800cb62:	2208      	movs	r2, #8
 800cb64:	305c      	adds	r0, #92	; 0x5c
 800cb66:	f7fd fb53 	bl	800a210 <memset>
 800cb6a:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <std+0x38>)
 800cb6c:	6263      	str	r3, [r4, #36]	; 0x24
 800cb6e:	4b05      	ldr	r3, [pc, #20]	; (800cb84 <std+0x3c>)
 800cb70:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb72:	4b05      	ldr	r3, [pc, #20]	; (800cb88 <std+0x40>)
 800cb74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb76:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <std+0x44>)
 800cb78:	6224      	str	r4, [r4, #32]
 800cb7a:	6323      	str	r3, [r4, #48]	; 0x30
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	bf00      	nop
 800cb80:	0800ce9d 	.word	0x0800ce9d
 800cb84:	0800cebf 	.word	0x0800cebf
 800cb88:	0800cef7 	.word	0x0800cef7
 800cb8c:	0800cf1b 	.word	0x0800cf1b

0800cb90 <_cleanup_r>:
 800cb90:	4901      	ldr	r1, [pc, #4]	; (800cb98 <_cleanup_r+0x8>)
 800cb92:	f000 b8af 	b.w	800ccf4 <_fwalk_reent>
 800cb96:	bf00      	nop
 800cb98:	0800cad1 	.word	0x0800cad1

0800cb9c <__sfmoreglue>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	2268      	movs	r2, #104	; 0x68
 800cba0:	1e4d      	subs	r5, r1, #1
 800cba2:	4355      	muls	r5, r2
 800cba4:	460e      	mov	r6, r1
 800cba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbaa:	f7ff fa65 	bl	800c078 <_malloc_r>
 800cbae:	4604      	mov	r4, r0
 800cbb0:	b140      	cbz	r0, 800cbc4 <__sfmoreglue+0x28>
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	e9c0 1600 	strd	r1, r6, [r0]
 800cbb8:	300c      	adds	r0, #12
 800cbba:	60a0      	str	r0, [r4, #8]
 800cbbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbc0:	f7fd fb26 	bl	800a210 <memset>
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}

0800cbc8 <__sfp_lock_acquire>:
 800cbc8:	4801      	ldr	r0, [pc, #4]	; (800cbd0 <__sfp_lock_acquire+0x8>)
 800cbca:	f000 b8b3 	b.w	800cd34 <__retarget_lock_acquire_recursive>
 800cbce:	bf00      	nop
 800cbd0:	20000b4d 	.word	0x20000b4d

0800cbd4 <__sfp_lock_release>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	; (800cbdc <__sfp_lock_release+0x8>)
 800cbd6:	f000 b8ae 	b.w	800cd36 <__retarget_lock_release_recursive>
 800cbda:	bf00      	nop
 800cbdc:	20000b4d 	.word	0x20000b4d

0800cbe0 <__sinit_lock_acquire>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	; (800cbe8 <__sinit_lock_acquire+0x8>)
 800cbe2:	f000 b8a7 	b.w	800cd34 <__retarget_lock_acquire_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	20000b4e 	.word	0x20000b4e

0800cbec <__sinit_lock_release>:
 800cbec:	4801      	ldr	r0, [pc, #4]	; (800cbf4 <__sinit_lock_release+0x8>)
 800cbee:	f000 b8a2 	b.w	800cd36 <__retarget_lock_release_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	20000b4e 	.word	0x20000b4e

0800cbf8 <__sinit>:
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	f7ff fff0 	bl	800cbe0 <__sinit_lock_acquire>
 800cc00:	69a3      	ldr	r3, [r4, #24]
 800cc02:	b11b      	cbz	r3, 800cc0c <__sinit+0x14>
 800cc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc08:	f7ff bff0 	b.w	800cbec <__sinit_lock_release>
 800cc0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc10:	6523      	str	r3, [r4, #80]	; 0x50
 800cc12:	4b13      	ldr	r3, [pc, #76]	; (800cc60 <__sinit+0x68>)
 800cc14:	4a13      	ldr	r2, [pc, #76]	; (800cc64 <__sinit+0x6c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc1a:	42a3      	cmp	r3, r4
 800cc1c:	bf04      	itt	eq
 800cc1e:	2301      	moveq	r3, #1
 800cc20:	61a3      	streq	r3, [r4, #24]
 800cc22:	4620      	mov	r0, r4
 800cc24:	f000 f820 	bl	800cc68 <__sfp>
 800cc28:	6060      	str	r0, [r4, #4]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 f81c 	bl	800cc68 <__sfp>
 800cc30:	60a0      	str	r0, [r4, #8]
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 f818 	bl	800cc68 <__sfp>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	60e0      	str	r0, [r4, #12]
 800cc3c:	2104      	movs	r1, #4
 800cc3e:	6860      	ldr	r0, [r4, #4]
 800cc40:	f7ff ff82 	bl	800cb48 <std>
 800cc44:	68a0      	ldr	r0, [r4, #8]
 800cc46:	2201      	movs	r2, #1
 800cc48:	2109      	movs	r1, #9
 800cc4a:	f7ff ff7d 	bl	800cb48 <std>
 800cc4e:	68e0      	ldr	r0, [r4, #12]
 800cc50:	2202      	movs	r2, #2
 800cc52:	2112      	movs	r1, #18
 800cc54:	f7ff ff78 	bl	800cb48 <std>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	61a3      	str	r3, [r4, #24]
 800cc5c:	e7d2      	b.n	800cc04 <__sinit+0xc>
 800cc5e:	bf00      	nop
 800cc60:	0800ff9c 	.word	0x0800ff9c
 800cc64:	0800cb91 	.word	0x0800cb91

0800cc68 <__sfp>:
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	4607      	mov	r7, r0
 800cc6c:	f7ff ffac 	bl	800cbc8 <__sfp_lock_acquire>
 800cc70:	4b1e      	ldr	r3, [pc, #120]	; (800ccec <__sfp+0x84>)
 800cc72:	681e      	ldr	r6, [r3, #0]
 800cc74:	69b3      	ldr	r3, [r6, #24]
 800cc76:	b913      	cbnz	r3, 800cc7e <__sfp+0x16>
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f7ff ffbd 	bl	800cbf8 <__sinit>
 800cc7e:	3648      	adds	r6, #72	; 0x48
 800cc80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	d503      	bpl.n	800cc90 <__sfp+0x28>
 800cc88:	6833      	ldr	r3, [r6, #0]
 800cc8a:	b30b      	cbz	r3, 800ccd0 <__sfp+0x68>
 800cc8c:	6836      	ldr	r6, [r6, #0]
 800cc8e:	e7f7      	b.n	800cc80 <__sfp+0x18>
 800cc90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc94:	b9d5      	cbnz	r5, 800cccc <__sfp+0x64>
 800cc96:	4b16      	ldr	r3, [pc, #88]	; (800ccf0 <__sfp+0x88>)
 800cc98:	60e3      	str	r3, [r4, #12]
 800cc9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc9e:	6665      	str	r5, [r4, #100]	; 0x64
 800cca0:	f000 f847 	bl	800cd32 <__retarget_lock_init_recursive>
 800cca4:	f7ff ff96 	bl	800cbd4 <__sfp_lock_release>
 800cca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ccac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ccb0:	6025      	str	r5, [r4, #0]
 800ccb2:	61a5      	str	r5, [r4, #24]
 800ccb4:	2208      	movs	r2, #8
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ccbc:	f7fd faa8 	bl	800a210 <memset>
 800ccc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccc8:	4620      	mov	r0, r4
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cccc:	3468      	adds	r4, #104	; 0x68
 800ccce:	e7d9      	b.n	800cc84 <__sfp+0x1c>
 800ccd0:	2104      	movs	r1, #4
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	f7ff ff62 	bl	800cb9c <__sfmoreglue>
 800ccd8:	4604      	mov	r4, r0
 800ccda:	6030      	str	r0, [r6, #0]
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d1d5      	bne.n	800cc8c <__sfp+0x24>
 800cce0:	f7ff ff78 	bl	800cbd4 <__sfp_lock_release>
 800cce4:	230c      	movs	r3, #12
 800cce6:	603b      	str	r3, [r7, #0]
 800cce8:	e7ee      	b.n	800ccc8 <__sfp+0x60>
 800ccea:	bf00      	nop
 800ccec:	0800ff9c 	.word	0x0800ff9c
 800ccf0:	ffff0001 	.word	0xffff0001

0800ccf4 <_fwalk_reent>:
 800ccf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	4688      	mov	r8, r1
 800ccfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd00:	2700      	movs	r7, #0
 800cd02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd06:	f1b9 0901 	subs.w	r9, r9, #1
 800cd0a:	d505      	bpl.n	800cd18 <_fwalk_reent+0x24>
 800cd0c:	6824      	ldr	r4, [r4, #0]
 800cd0e:	2c00      	cmp	r4, #0
 800cd10:	d1f7      	bne.n	800cd02 <_fwalk_reent+0xe>
 800cd12:	4638      	mov	r0, r7
 800cd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd18:	89ab      	ldrh	r3, [r5, #12]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d907      	bls.n	800cd2e <_fwalk_reent+0x3a>
 800cd1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd22:	3301      	adds	r3, #1
 800cd24:	d003      	beq.n	800cd2e <_fwalk_reent+0x3a>
 800cd26:	4629      	mov	r1, r5
 800cd28:	4630      	mov	r0, r6
 800cd2a:	47c0      	blx	r8
 800cd2c:	4307      	orrs	r7, r0
 800cd2e:	3568      	adds	r5, #104	; 0x68
 800cd30:	e7e9      	b.n	800cd06 <_fwalk_reent+0x12>

0800cd32 <__retarget_lock_init_recursive>:
 800cd32:	4770      	bx	lr

0800cd34 <__retarget_lock_acquire_recursive>:
 800cd34:	4770      	bx	lr

0800cd36 <__retarget_lock_release_recursive>:
 800cd36:	4770      	bx	lr

0800cd38 <__swhatbuf_r>:
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	460e      	mov	r6, r1
 800cd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd40:	2900      	cmp	r1, #0
 800cd42:	b096      	sub	sp, #88	; 0x58
 800cd44:	4614      	mov	r4, r2
 800cd46:	461d      	mov	r5, r3
 800cd48:	da08      	bge.n	800cd5c <__swhatbuf_r+0x24>
 800cd4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	602a      	str	r2, [r5, #0]
 800cd52:	061a      	lsls	r2, r3, #24
 800cd54:	d410      	bmi.n	800cd78 <__swhatbuf_r+0x40>
 800cd56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd5a:	e00e      	b.n	800cd7a <__swhatbuf_r+0x42>
 800cd5c:	466a      	mov	r2, sp
 800cd5e:	f000 f903 	bl	800cf68 <_fstat_r>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	dbf1      	blt.n	800cd4a <__swhatbuf_r+0x12>
 800cd66:	9a01      	ldr	r2, [sp, #4]
 800cd68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd70:	425a      	negs	r2, r3
 800cd72:	415a      	adcs	r2, r3
 800cd74:	602a      	str	r2, [r5, #0]
 800cd76:	e7ee      	b.n	800cd56 <__swhatbuf_r+0x1e>
 800cd78:	2340      	movs	r3, #64	; 0x40
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	b016      	add	sp, #88	; 0x58
 800cd80:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd84 <__smakebuf_r>:
 800cd84:	898b      	ldrh	r3, [r1, #12]
 800cd86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd88:	079d      	lsls	r5, r3, #30
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	d507      	bpl.n	800cda0 <__smakebuf_r+0x1c>
 800cd90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	6123      	str	r3, [r4, #16]
 800cd98:	2301      	movs	r3, #1
 800cd9a:	6163      	str	r3, [r4, #20]
 800cd9c:	b002      	add	sp, #8
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}
 800cda0:	ab01      	add	r3, sp, #4
 800cda2:	466a      	mov	r2, sp
 800cda4:	f7ff ffc8 	bl	800cd38 <__swhatbuf_r>
 800cda8:	9900      	ldr	r1, [sp, #0]
 800cdaa:	4605      	mov	r5, r0
 800cdac:	4630      	mov	r0, r6
 800cdae:	f7ff f963 	bl	800c078 <_malloc_r>
 800cdb2:	b948      	cbnz	r0, 800cdc8 <__smakebuf_r+0x44>
 800cdb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb8:	059a      	lsls	r2, r3, #22
 800cdba:	d4ef      	bmi.n	800cd9c <__smakebuf_r+0x18>
 800cdbc:	f023 0303 	bic.w	r3, r3, #3
 800cdc0:	f043 0302 	orr.w	r3, r3, #2
 800cdc4:	81a3      	strh	r3, [r4, #12]
 800cdc6:	e7e3      	b.n	800cd90 <__smakebuf_r+0xc>
 800cdc8:	4b0d      	ldr	r3, [pc, #52]	; (800ce00 <__smakebuf_r+0x7c>)
 800cdca:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdcc:	89a3      	ldrh	r3, [r4, #12]
 800cdce:	6020      	str	r0, [r4, #0]
 800cdd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd4:	81a3      	strh	r3, [r4, #12]
 800cdd6:	9b00      	ldr	r3, [sp, #0]
 800cdd8:	6163      	str	r3, [r4, #20]
 800cdda:	9b01      	ldr	r3, [sp, #4]
 800cddc:	6120      	str	r0, [r4, #16]
 800cdde:	b15b      	cbz	r3, 800cdf8 <__smakebuf_r+0x74>
 800cde0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cde4:	4630      	mov	r0, r6
 800cde6:	f000 f8d1 	bl	800cf8c <_isatty_r>
 800cdea:	b128      	cbz	r0, 800cdf8 <__smakebuf_r+0x74>
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	f023 0303 	bic.w	r3, r3, #3
 800cdf2:	f043 0301 	orr.w	r3, r3, #1
 800cdf6:	81a3      	strh	r3, [r4, #12]
 800cdf8:	89a0      	ldrh	r0, [r4, #12]
 800cdfa:	4305      	orrs	r5, r0
 800cdfc:	81a5      	strh	r5, [r4, #12]
 800cdfe:	e7cd      	b.n	800cd9c <__smakebuf_r+0x18>
 800ce00:	0800cb91 	.word	0x0800cb91

0800ce04 <_malloc_usable_size_r>:
 800ce04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce08:	1f18      	subs	r0, r3, #4
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	bfbc      	itt	lt
 800ce0e:	580b      	ldrlt	r3, [r1, r0]
 800ce10:	18c0      	addlt	r0, r0, r3
 800ce12:	4770      	bx	lr

0800ce14 <_raise_r>:
 800ce14:	291f      	cmp	r1, #31
 800ce16:	b538      	push	{r3, r4, r5, lr}
 800ce18:	4604      	mov	r4, r0
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	d904      	bls.n	800ce28 <_raise_r+0x14>
 800ce1e:	2316      	movs	r3, #22
 800ce20:	6003      	str	r3, [r0, #0]
 800ce22:	f04f 30ff 	mov.w	r0, #4294967295
 800ce26:	bd38      	pop	{r3, r4, r5, pc}
 800ce28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce2a:	b112      	cbz	r2, 800ce32 <_raise_r+0x1e>
 800ce2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce30:	b94b      	cbnz	r3, 800ce46 <_raise_r+0x32>
 800ce32:	4620      	mov	r0, r4
 800ce34:	f000 f830 	bl	800ce98 <_getpid_r>
 800ce38:	462a      	mov	r2, r5
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce42:	f000 b817 	b.w	800ce74 <_kill_r>
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d00a      	beq.n	800ce60 <_raise_r+0x4c>
 800ce4a:	1c59      	adds	r1, r3, #1
 800ce4c:	d103      	bne.n	800ce56 <_raise_r+0x42>
 800ce4e:	2316      	movs	r3, #22
 800ce50:	6003      	str	r3, [r0, #0]
 800ce52:	2001      	movs	r0, #1
 800ce54:	e7e7      	b.n	800ce26 <_raise_r+0x12>
 800ce56:	2400      	movs	r4, #0
 800ce58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	4798      	blx	r3
 800ce60:	2000      	movs	r0, #0
 800ce62:	e7e0      	b.n	800ce26 <_raise_r+0x12>

0800ce64 <raise>:
 800ce64:	4b02      	ldr	r3, [pc, #8]	; (800ce70 <raise+0xc>)
 800ce66:	4601      	mov	r1, r0
 800ce68:	6818      	ldr	r0, [r3, #0]
 800ce6a:	f7ff bfd3 	b.w	800ce14 <_raise_r>
 800ce6e:	bf00      	nop
 800ce70:	2000018c 	.word	0x2000018c

0800ce74 <_kill_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d07      	ldr	r5, [pc, #28]	; (800ce94 <_kill_r+0x20>)
 800ce78:	2300      	movs	r3, #0
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	4608      	mov	r0, r1
 800ce7e:	4611      	mov	r1, r2
 800ce80:	602b      	str	r3, [r5, #0]
 800ce82:	f7f6 f819 	bl	8002eb8 <_kill>
 800ce86:	1c43      	adds	r3, r0, #1
 800ce88:	d102      	bne.n	800ce90 <_kill_r+0x1c>
 800ce8a:	682b      	ldr	r3, [r5, #0]
 800ce8c:	b103      	cbz	r3, 800ce90 <_kill_r+0x1c>
 800ce8e:	6023      	str	r3, [r4, #0]
 800ce90:	bd38      	pop	{r3, r4, r5, pc}
 800ce92:	bf00      	nop
 800ce94:	20000b48 	.word	0x20000b48

0800ce98 <_getpid_r>:
 800ce98:	f7f6 b806 	b.w	8002ea8 <_getpid>

0800ce9c <__sread>:
 800ce9c:	b510      	push	{r4, lr}
 800ce9e:	460c      	mov	r4, r1
 800cea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea4:	f000 f894 	bl	800cfd0 <_read_r>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	bfab      	itete	ge
 800ceac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceae:	89a3      	ldrhlt	r3, [r4, #12]
 800ceb0:	181b      	addge	r3, r3, r0
 800ceb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ceb6:	bfac      	ite	ge
 800ceb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ceba:	81a3      	strhlt	r3, [r4, #12]
 800cebc:	bd10      	pop	{r4, pc}

0800cebe <__swrite>:
 800cebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec2:	461f      	mov	r7, r3
 800cec4:	898b      	ldrh	r3, [r1, #12]
 800cec6:	05db      	lsls	r3, r3, #23
 800cec8:	4605      	mov	r5, r0
 800ceca:	460c      	mov	r4, r1
 800cecc:	4616      	mov	r6, r2
 800cece:	d505      	bpl.n	800cedc <__swrite+0x1e>
 800ced0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced4:	2302      	movs	r3, #2
 800ced6:	2200      	movs	r2, #0
 800ced8:	f000 f868 	bl	800cfac <_lseek_r>
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cee6:	81a3      	strh	r3, [r4, #12]
 800cee8:	4632      	mov	r2, r6
 800ceea:	463b      	mov	r3, r7
 800ceec:	4628      	mov	r0, r5
 800ceee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cef2:	f000 b817 	b.w	800cf24 <_write_r>

0800cef6 <__sseek>:
 800cef6:	b510      	push	{r4, lr}
 800cef8:	460c      	mov	r4, r1
 800cefa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefe:	f000 f855 	bl	800cfac <_lseek_r>
 800cf02:	1c43      	adds	r3, r0, #1
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	bf15      	itete	ne
 800cf08:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf12:	81a3      	strheq	r3, [r4, #12]
 800cf14:	bf18      	it	ne
 800cf16:	81a3      	strhne	r3, [r4, #12]
 800cf18:	bd10      	pop	{r4, pc}

0800cf1a <__sclose>:
 800cf1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf1e:	f000 b813 	b.w	800cf48 <_close_r>
	...

0800cf24 <_write_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	4d07      	ldr	r5, [pc, #28]	; (800cf44 <_write_r+0x20>)
 800cf28:	4604      	mov	r4, r0
 800cf2a:	4608      	mov	r0, r1
 800cf2c:	4611      	mov	r1, r2
 800cf2e:	2200      	movs	r2, #0
 800cf30:	602a      	str	r2, [r5, #0]
 800cf32:	461a      	mov	r2, r3
 800cf34:	f7f5 fff7 	bl	8002f26 <_write>
 800cf38:	1c43      	adds	r3, r0, #1
 800cf3a:	d102      	bne.n	800cf42 <_write_r+0x1e>
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	b103      	cbz	r3, 800cf42 <_write_r+0x1e>
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	20000b48 	.word	0x20000b48

0800cf48 <_close_r>:
 800cf48:	b538      	push	{r3, r4, r5, lr}
 800cf4a:	4d06      	ldr	r5, [pc, #24]	; (800cf64 <_close_r+0x1c>)
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4604      	mov	r4, r0
 800cf50:	4608      	mov	r0, r1
 800cf52:	602b      	str	r3, [r5, #0]
 800cf54:	f7f6 f803 	bl	8002f5e <_close>
 800cf58:	1c43      	adds	r3, r0, #1
 800cf5a:	d102      	bne.n	800cf62 <_close_r+0x1a>
 800cf5c:	682b      	ldr	r3, [r5, #0]
 800cf5e:	b103      	cbz	r3, 800cf62 <_close_r+0x1a>
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	bd38      	pop	{r3, r4, r5, pc}
 800cf64:	20000b48 	.word	0x20000b48

0800cf68 <_fstat_r>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	4d07      	ldr	r5, [pc, #28]	; (800cf88 <_fstat_r+0x20>)
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	4604      	mov	r4, r0
 800cf70:	4608      	mov	r0, r1
 800cf72:	4611      	mov	r1, r2
 800cf74:	602b      	str	r3, [r5, #0]
 800cf76:	f7f5 fffe 	bl	8002f76 <_fstat>
 800cf7a:	1c43      	adds	r3, r0, #1
 800cf7c:	d102      	bne.n	800cf84 <_fstat_r+0x1c>
 800cf7e:	682b      	ldr	r3, [r5, #0]
 800cf80:	b103      	cbz	r3, 800cf84 <_fstat_r+0x1c>
 800cf82:	6023      	str	r3, [r4, #0]
 800cf84:	bd38      	pop	{r3, r4, r5, pc}
 800cf86:	bf00      	nop
 800cf88:	20000b48 	.word	0x20000b48

0800cf8c <_isatty_r>:
 800cf8c:	b538      	push	{r3, r4, r5, lr}
 800cf8e:	4d06      	ldr	r5, [pc, #24]	; (800cfa8 <_isatty_r+0x1c>)
 800cf90:	2300      	movs	r3, #0
 800cf92:	4604      	mov	r4, r0
 800cf94:	4608      	mov	r0, r1
 800cf96:	602b      	str	r3, [r5, #0]
 800cf98:	f7f5 fffd 	bl	8002f96 <_isatty>
 800cf9c:	1c43      	adds	r3, r0, #1
 800cf9e:	d102      	bne.n	800cfa6 <_isatty_r+0x1a>
 800cfa0:	682b      	ldr	r3, [r5, #0]
 800cfa2:	b103      	cbz	r3, 800cfa6 <_isatty_r+0x1a>
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	bd38      	pop	{r3, r4, r5, pc}
 800cfa8:	20000b48 	.word	0x20000b48

0800cfac <_lseek_r>:
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	4d07      	ldr	r5, [pc, #28]	; (800cfcc <_lseek_r+0x20>)
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	4608      	mov	r0, r1
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	602a      	str	r2, [r5, #0]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f7f5 fff6 	bl	8002fac <_lseek>
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	d102      	bne.n	800cfca <_lseek_r+0x1e>
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	b103      	cbz	r3, 800cfca <_lseek_r+0x1e>
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	bd38      	pop	{r3, r4, r5, pc}
 800cfcc:	20000b48 	.word	0x20000b48

0800cfd0 <_read_r>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4d07      	ldr	r5, [pc, #28]	; (800cff0 <_read_r+0x20>)
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	4608      	mov	r0, r1
 800cfd8:	4611      	mov	r1, r2
 800cfda:	2200      	movs	r2, #0
 800cfdc:	602a      	str	r2, [r5, #0]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	f7f5 ff84 	bl	8002eec <_read>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d102      	bne.n	800cfee <_read_r+0x1e>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	b103      	cbz	r3, 800cfee <_read_r+0x1e>
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	bd38      	pop	{r3, r4, r5, pc}
 800cff0:	20000b48 	.word	0x20000b48

0800cff4 <roundf>:
 800cff4:	ee10 0a10 	vmov	r0, s0
 800cff8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800cffc:	3a7f      	subs	r2, #127	; 0x7f
 800cffe:	2a16      	cmp	r2, #22
 800d000:	dc15      	bgt.n	800d02e <roundf+0x3a>
 800d002:	2a00      	cmp	r2, #0
 800d004:	da08      	bge.n	800d018 <roundf+0x24>
 800d006:	3201      	adds	r2, #1
 800d008:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d00c:	d101      	bne.n	800d012 <roundf+0x1e>
 800d00e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d012:	ee00 3a10 	vmov	s0, r3
 800d016:	4770      	bx	lr
 800d018:	4907      	ldr	r1, [pc, #28]	; (800d038 <roundf+0x44>)
 800d01a:	4111      	asrs	r1, r2
 800d01c:	4208      	tst	r0, r1
 800d01e:	d0fa      	beq.n	800d016 <roundf+0x22>
 800d020:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d024:	4113      	asrs	r3, r2
 800d026:	4403      	add	r3, r0
 800d028:	ea23 0301 	bic.w	r3, r3, r1
 800d02c:	e7f1      	b.n	800d012 <roundf+0x1e>
 800d02e:	2a80      	cmp	r2, #128	; 0x80
 800d030:	d1f1      	bne.n	800d016 <roundf+0x22>
 800d032:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d036:	4770      	bx	lr
 800d038:	007fffff 	.word	0x007fffff

0800d03c <_init>:
 800d03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03e:	bf00      	nop
 800d040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d042:	bc08      	pop	{r3}
 800d044:	469e      	mov	lr, r3
 800d046:	4770      	bx	lr

0800d048 <_fini>:
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	bf00      	nop
 800d04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04e:	bc08      	pop	{r3}
 800d050:	469e      	mov	lr, r3
 800d052:	4770      	bx	lr
