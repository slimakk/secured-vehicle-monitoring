
obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004adc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004c6c  08004c6c  00014c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d4c  08004d4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d4c  08004d4c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d4c  08004d4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08004dc4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004dc4  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb1a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ec  00000000  00000000  0002bbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002dca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002e788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023060  00000000  00000000  0002f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb18  00000000  00000000  000521c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d501b  00000000  00000000  0005dcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132cf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000334c  00000000  00000000  00132d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c54 	.word	0x08004c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004c54 	.word	0x08004c54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;

uint32_t txMailbox;

void MX_CAN1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <MX_CAN1_Init+0x64>)
 8000276:	4a18      	ldr	r2, [pc, #96]	; (80002d8 <MX_CAN1_Init+0x68>)
 8000278:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 800027a:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <MX_CAN1_Init+0x64>)
 800027c:	2210      	movs	r2, #16
 800027e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000280:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <MX_CAN1_Init+0x64>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <MX_CAN1_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_CAN1_Init+0x64>)
 800028e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000292:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MX_CAN1_Init+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_CAN1_Init+0x64>)
 800029c:	2200      	movs	r2, #0
 800029e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_CAN1_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <MX_CAN1_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_CAN1_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <MX_CAN1_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_CAN1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_CAN1_Init+0x64>)
 80002c0:	f001 fb12 	bl	80018e8 <HAL_CAN_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_CAN1_Init+0x5e>
	{
	  Error_Handler();
 80002ca:	f000 f9ff 	bl	80006cc <Error_Handler>
	}
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	2000008c 	.word	0x2000008c
 80002d8:	40006400 	.word	0x40006400

080002dc <canConfig>:

void canConfig(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	; 0x28
 80002e0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canFilter;
	canFilter.FilterBank = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61bb      	str	r3, [r7, #24]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80002ea:	2301      	movs	r3, #1
 80002ec:	61fb      	str	r3, [r7, #28]
	canFilter.FilterIdHigh = 0x7E8 << 5;
 80002ee:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 80002f2:	603b      	str	r3, [r7, #0]
	canFilter.FilterIdLow = 0x0000;
 80002f4:	2300      	movs	r3, #0
 80002f6:	607b      	str	r3, [r7, #4]
	canFilter.FilterMaskIdHigh = 0x7F8 << 5;
 80002f8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80002fc:	60bb      	str	r3, [r7, #8]
	canFilter.FilterMaskIdLow = 0x0000;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
	canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000302:	2300      	movs	r3, #0
 8000304:	613b      	str	r3, [r7, #16]
	canFilter.FilterActivation = ENABLE;
 8000306:	2301      	movs	r3, #1
 8000308:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK)
 800030a:	463b      	mov	r3, r7
 800030c:	4619      	mov	r1, r3
 800030e:	480a      	ldr	r0, [pc, #40]	; (8000338 <canConfig+0x5c>)
 8000310:	f001 fbe5 	bl	8001ade <HAL_CAN_ConfigFilter>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <canConfig+0x42>
	{
		Error_Handler();
 800031a:	f000 f9d7 	bl	80006cc <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800031e:	4806      	ldr	r0, [pc, #24]	; (8000338 <canConfig+0x5c>)
 8000320:	f001 fca7 	bl	8001c72 <HAL_CAN_Start>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <canConfig+0x52>
	{
		Error_Handler();
 800032a:	f000 f9cf 	bl	80006cc <Error_Handler>
	}
}
 800032e:	bf00      	nop
 8000330:	3728      	adds	r7, #40	; 0x28
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000008c 	.word	0x2000008c

0800033c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b08c      	sub	sp, #48	; 0x30
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData);
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	f107 0214 	add.w	r2, r7, #20
 800034c:	2100      	movs	r1, #0
 800034e:	4806      	ldr	r0, [pc, #24]	; (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000350:	f001 fcd3 	bl	8001cfa <HAL_CAN_GetRxMessage>

	OBD2_PrintResponse(rxData);
 8000354:	f107 030c 	add.w	r3, r7, #12
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f807 	bl	800036c <OBD2_PrintResponse>
}
 800035e:	bf00      	nop
 8000360:	3730      	adds	r7, #48	; 0x30
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000008c 	.word	0x2000008c

0800036c <OBD2_PrintResponse>:
 *      Author: miros
 */
#include "OBD.h"

void OBD2_PrintResponse(uint8_t* rxFrame)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < RX_DATA_LENGTH; i++)
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	e00a      	b.n	8000390 <OBD2_PrintResponse+0x24>
	{
		printf("%2x", rxFrame[i]);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	4413      	add	r3, r2
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	4619      	mov	r1, r3
 8000384:	4807      	ldr	r0, [pc, #28]	; (80003a4 <OBD2_PrintResponse+0x38>)
 8000386:	f003 fc61 	bl	8003c4c <iprintf>
	for(int i = 0; i < RX_DATA_LENGTH; i++)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3301      	adds	r3, #1
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	2b07      	cmp	r3, #7
 8000394:	ddf1      	ble.n	800037a <OBD2_PrintResponse+0xe>
	}
	printf("\r\n");
 8000396:	4804      	ldr	r0, [pc, #16]	; (80003a8 <OBD2_PrintResponse+0x3c>)
 8000398:	f003 fcde 	bl	8003d58 <puts>
}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	08004c6c 	.word	0x08004c6c
 80003a8:	08004c70 	.word	0x08004c70

080003ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d013      	beq.n	80003ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80003c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80003cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d00b      	beq.n	80003ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80003d4:	e000      	b.n	80003d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80003d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80003d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f9      	beq.n	80003d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80003e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80003ec:	687b      	ldr	r3, [r7, #4]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <_write>:




int _write(int file, char *ptr, int len)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	60f8      	str	r0, [r7, #12]
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e009      	b.n	8000424 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	60ba      	str	r2, [r7, #8]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ffc7 	bl	80003ac <ITM_SendChar>
	for(i = 0; i < len; i++)
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	3301      	adds	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	429a      	cmp	r2, r3
 800042a:	dbf1      	blt.n	8000410 <_write+0x16>
	}
	return len;
 800042c:	687b      	ldr	r3, [r7, #4]
}
 800042e:	4618      	mov	r0, r3
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043c:	f000 fb2b 	bl	8000a96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000440:	f000 f810 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000444:	f000 f8c4 	bl	80005d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000448:	f000 f85e 	bl	8000508 <MX_ADC1_Init>
  MX_CAN1_Init();
 800044c:	f7ff ff10 	bl	8000270 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  canConfig();
 8000450:	f7ff ff44 	bl	80002dc <canConfig>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000454:	2102      	movs	r1, #2
 8000456:	4802      	ldr	r0, [pc, #8]	; (8000460 <main+0x28>)
 8000458:	f001 fd61 	bl	8001f1e <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800045c:	e7fe      	b.n	800045c <main+0x24>
 800045e:	bf00      	nop
 8000460:	2000008c 	.word	0x2000008c

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b096      	sub	sp, #88	; 0x58
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	2244      	movs	r2, #68	; 0x44
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f003 fbe2 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	463b      	mov	r3, r7
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000486:	f44f 7000 	mov.w	r0, #512	; 0x200
 800048a:	f002 fa4f 	bl	800292c <HAL_PWREx_ControlVoltageScaling>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000494:	f000 f91a 	bl	80006cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000498:	2302      	movs	r3, #2
 800049a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a2:	2310      	movs	r3, #16
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a6:	2302      	movs	r3, #2
 80004a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004aa:	2302      	movs	r3, #2
 80004ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80004b2:	230a      	movs	r3, #10
 80004b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80004b6:	2307      	movs	r3, #7
 80004b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004be:	2302      	movs	r3, #2
 80004c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fa86 	bl	80029d8 <HAL_RCC_OscConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004d2:	f000 f8fb 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	230f      	movs	r3, #15
 80004d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004da:	2303      	movs	r3, #3
 80004dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004ea:	463b      	mov	r3, r7
 80004ec:	2104      	movs	r1, #4
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fe86 	bl	8003200 <HAL_RCC_ClockConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004fa:	f000 f8e7 	bl	80006cc <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3758      	adds	r7, #88	; 0x58
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
 800051c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000520:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <MX_ADC1_Init+0xc0>)
 8000522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800052a:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <MX_ADC1_Init+0xbc>)
 800052c:	2210      	movs	r2, #16
 800052e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000530:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000536:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <MX_ADC1_Init+0xbc>)
 800053e:	2204      	movs	r2, #4
 8000540:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000542:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000544:	2200      	movs	r2, #0
 8000546:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <MX_ADC1_Init+0xbc>)
 800054a:	2200      	movs	r2, #0
 800054c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000550:	2201      	movs	r2, #1
 8000552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000556:	2200      	movs	r2, #0
 8000558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <MX_ADC1_Init+0xbc>)
 800055e:	2200      	movs	r2, #0
 8000560:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000564:	2200      	movs	r2, #0
 8000566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_ADC1_Init+0xbc>)
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000572:	2200      	movs	r2, #0
 8000574:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057e:	4811      	ldr	r0, [pc, #68]	; (80005c4 <MX_ADC1_Init+0xbc>)
 8000580:	f000 fc8a 	bl	8000e98 <HAL_ADC_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800058a:	f000 f89f 	bl	80006cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_ADC1_Init+0xc4>)
 8000590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000592:	2306      	movs	r3, #6
 8000594:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800059a:	237f      	movs	r3, #127	; 0x7f
 800059c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800059e:	2304      	movs	r3, #4
 80005a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <MX_ADC1_Init+0xbc>)
 80005ac:	f000 fdbc 	bl	8001128 <HAL_ADC_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 f889 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000b4 	.word	0x200000b4
 80005c8:	50040000 	.word	0x50040000
 80005cc:	3ac04000 	.word	0x3ac04000

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	4b36      	ldr	r3, [pc, #216]	; (80006c0 <MX_GPIO_Init+0xf0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a35      	ldr	r2, [pc, #212]	; (80006c0 <MX_GPIO_Init+0xf0>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <MX_GPIO_Init+0xf0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <MX_GPIO_Init+0xf0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a2f      	ldr	r2, [pc, #188]	; (80006c0 <MX_GPIO_Init+0xf0>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <MX_GPIO_Init+0xf0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <MX_GPIO_Init+0xf0>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a29      	ldr	r2, [pc, #164]	; (80006c0 <MX_GPIO_Init+0xf0>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <MX_GPIO_Init+0xf0>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <MX_GPIO_Init+0xf0>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <MX_GPIO_Init+0xf0>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_GPIO_Init+0xf0>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	481d      	ldr	r0, [pc, #116]	; (80006c4 <MX_GPIO_Init+0xf4>)
 800064e:	f002 f947 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065c:	f002 f940 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_S_Pin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8000660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	4812      	ldr	r0, [pc, #72]	; (80006c4 <MX_GPIO_Init+0xf4>)
 800067a:	f001 ffb7 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LLine_Pin */
  GPIO_InitStruct.Pin = LLine_Pin;
 800067e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LLine_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f001 ffa7 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BTN_Pin */
  GPIO_InitStruct.Pin = LCD_BTN_Pin;
 800069e:	2320      	movs	r3, #32
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_BTN_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_GPIO_Init+0xf8>)
 80006b2:	f001 ff9b 	bl	80025ec <HAL_GPIO_Init>

}
 80006b6:	bf00      	nop
 80006b8:	3728      	adds	r7, #40	; 0x28
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000800 	.word	0x48000800
 80006c8:	48000400 	.word	0x48000400

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x44>)
 80006e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_MspInit+0x44>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6613      	str	r3, [r2, #96]	; 0x60
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_MspInit+0x44>)
 80006ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_MspInit+0x44>)
 80006f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_MspInit+0x44>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6593      	str	r3, [r2, #88]	; 0x58
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_MspInit+0x44>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b0a0      	sub	sp, #128	; 0x80
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	225c      	movs	r2, #92	; 0x5c
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fa7b 	bl	8003c3c <memset>
  if(hadc->Instance==ADC1)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <HAL_ADC_MspInit+0xc0>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d142      	bne.n	80007d6 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000750:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000754:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000756:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800075a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000764:	2308      	movs	r3, #8
 8000766:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000768:	2307      	movs	r3, #7
 800076a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4618      	mov	r0, r3
 8000780:	f002 ff28 	bl	80035d4 <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800078a:	f7ff ff9f 	bl	80006cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 8000794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_ADC_MspInit+0xc4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 80007be:	2320      	movs	r3, #32
 80007c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007c2:	230b      	movs	r3, #11
 80007c4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_ADC_MspInit+0xc8>)
 80007d2:	f001 ff0b 	bl	80025ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007d6:	bf00      	nop
 80007d8:	3780      	adds	r7, #128	; 0x80
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	50040000 	.word	0x50040000
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000800 	.word	0x48000800

080007ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a20      	ldr	r2, [pc, #128]	; (800088c <HAL_CAN_MspInit+0xa0>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d139      	bne.n	8000882 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <HAL_CAN_MspInit+0xa4>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <HAL_CAN_MspInit+0xa4>)
 8000814:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000818:	6593      	str	r3, [r2, #88]	; 0x58
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <HAL_CAN_MspInit+0xa4>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_CAN_MspInit+0xa4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <HAL_CAN_MspInit+0xa4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_CAN_MspInit+0xa4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 800083e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000850:	2309      	movs	r3, #9
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f001 fec5 	bl	80025ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2014      	movs	r0, #20
 8000868:	f001 fe89 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800086c:	2014      	movs	r0, #20
 800086e:	f001 fea2 	bl	80025b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2015      	movs	r0, #21
 8000878:	f001 fe81 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800087c:	2015      	movs	r0, #21
 800087e:	f001 fe9a 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40006400 	.word	0x40006400
 8000890:	40021000 	.word	0x40021000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 f92e 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <CAN1_RX0_IRQHandler+0x10>)
 80008ee:	f001 fb3c 	bl	8001f6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000008c 	.word	0x2000008c

080008fc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <CAN1_RX1_IRQHandler+0x10>)
 8000902:	f001 fb32 	bl	8001f6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000008c 	.word	0x2000008c

08000910 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e00a      	b.n	8000938 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000922:	f3af 8000 	nop.w
 8000926:	4601      	mov	r1, r0
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf0      	blt.n	8000922 <_read+0x12>
	}

return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_close>:
	}
	return len;
}

int _close(int file)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	return -1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000972:	605a      	str	r2, [r3, #4]
	return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_isatty>:

int _isatty(int file)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
	return 1;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
	return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f003 f900 	bl	8003be8 <__errno>
 80009e8:	4603      	mov	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20010000 	.word	0x20010000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	20000118 	.word	0x20000118
 8000a1c:	20000130 	.word	0x20000130

08000a20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a48:	f7ff ffea 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	; (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f003 f8bf 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a76:	f7ff fcdf 	bl	8000438 <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a88:	08004d54 	.word	0x08004d54
  ldr r2, =_sbss
 8000a8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a90:	20000130 	.word	0x20000130

08000a94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_IRQHandler>

08000a96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f001 fd61 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f80e 	bl	8000ac8 <HAL_InitTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d002      	beq.n	8000ab8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	e001      	b.n	8000abc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab8:	f7ff fe0e 	bl	80006d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_InitTick+0x6c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d023      	beq.n	8000b24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_InitTick+0x70>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_InitTick+0x6c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fd6d 	bl	80025d2 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10f      	bne.n	8000b1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d809      	bhi.n	8000b18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f001 fd37 	bl	800257e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_InitTick+0x74>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e007      	b.n	8000b28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	e004      	b.n	8000b28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73fb      	strb	r3, [r7, #15]
 8000b22:	e001      	b.n	8000b28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008
 8000b64:	2000011c 	.word	0x2000011c

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	2000011c 	.word	0x2000011c

08000b80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	431a      	orrs	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	609a      	str	r2, [r3, #8]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3360      	adds	r3, #96	; 0x60
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <LL_ADC_SetOffset+0x44>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	4313      	orrs	r3, r2
 8000c18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c20:	bf00      	nop
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	03fff000 	.word	0x03fff000

08000c30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3360      	adds	r3, #96	; 0x60
 8000c3e:	461a      	mov	r2, r3
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3360      	adds	r3, #96	; 0x60
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c86:	bf00      	nop
 8000c88:	371c      	adds	r7, #28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b087      	sub	sp, #28
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	3330      	adds	r3, #48	; 0x30
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	4413      	add	r3, r2
 8000cb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	f003 031f 	and.w	r3, r3, #31
 8000cbc:	211f      	movs	r1, #31
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	0e9b      	lsrs	r3, r3, #26
 8000cca:	f003 011f 	and.w	r1, r3, #31
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	f003 031f 	and.w	r3, r3, #31
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cde:	bf00      	nop
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b087      	sub	sp, #28
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3314      	adds	r3, #20
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	0e5b      	lsrs	r3, r3, #25
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	4413      	add	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	0d1b      	lsrs	r3, r3, #20
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	2107      	movs	r1, #7
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	401a      	ands	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	0d1b      	lsrs	r3, r3, #20
 8000d24:	f003 031f 	and.w	r3, r3, #31
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d34:	bf00      	nop
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0318 	and.w	r3, r3, #24
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d64:	40d9      	lsrs	r1, r3
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	400b      	ands	r3, r1
 8000d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	0007ffff 	.word	0x0007ffff

08000d88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6093      	str	r3, [r2, #8]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dc0:	d101      	bne.n	8000dc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000de8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e10:	d101      	bne.n	8000e16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d101      	bne.n	8000e3c <LL_ADC_IsEnabled+0x18>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e000      	b.n	8000e3e <LL_ADC_IsEnabled+0x1a>
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d101      	bne.n	8000e62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d101      	bne.n	8000e88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e12c      	b.n	800110c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d109      	bne.n	8000ed4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fc2d 	bl	8000720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff67 	bl	8000dac <LL_ADC_IsDeepPowerDownEnabled>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff4d 	bl	8000d88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff82 	bl	8000dfc <LL_ADC_IsInternalRegulatorEnabled>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d115      	bne.n	8000f2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff66 	bl	8000dd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f08:	4b82      	ldr	r3, [pc, #520]	; (8001114 <HAL_ADC_Init+0x27c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	099b      	lsrs	r3, r3, #6
 8000f0e:	4a82      	ldr	r2, [pc, #520]	; (8001118 <HAL_ADC_Init+0x280>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	099b      	lsrs	r3, r3, #6
 8000f16:	3301      	adds	r3, #1
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f1c:	e002      	b.n	8000f24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f9      	bne.n	8000f1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff64 	bl	8000dfc <LL_ADC_IsInternalRegulatorEnabled>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10d      	bne.n	8000f56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3e:	f043 0210 	orr.w	r2, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff75 	bl	8000e4a <LL_ADC_REG_IsConversionOngoing>
 8000f60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 80c5 	bne.w	80010fa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f040 80c1 	bne.w	80010fa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f80:	f043 0202 	orr.w	r2, r3, #2
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff49 	bl	8000e24 <LL_ADC_IsEnabled>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10b      	bne.n	8000fb0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f98:	4860      	ldr	r0, [pc, #384]	; (800111c <HAL_ADC_Init+0x284>)
 8000f9a:	f7ff ff43 	bl	8000e24 <LL_ADC_IsEnabled>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	485d      	ldr	r0, [pc, #372]	; (8001120 <HAL_ADC_Init+0x288>)
 8000fac:	f7ff fde8 	bl	8000b80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7e5b      	ldrb	r3, [r3, #25]
 8000fb4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000fc0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000fc6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d106      	bne.n	8000fec <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	045b      	lsls	r3, r3, #17
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d009      	beq.n	8001008 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001000:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	4b45      	ldr	r3, [pc, #276]	; (8001124 <HAL_ADC_Init+0x28c>)
 8001010:	4013      	ands	r3, r2
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	430b      	orrs	r3, r1
 800101a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff12 	bl	8000e4a <LL_ADC_REG_IsConversionOngoing>
 8001026:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff1f 	bl	8000e70 <LL_ADC_INJ_IsConversionOngoing>
 8001032:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d13d      	bne.n	80010b6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d13a      	bne.n	80010b6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001044:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800104c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800105c:	f023 0302 	bic.w	r3, r3, #2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	69b9      	ldr	r1, [r7, #24]
 8001066:	430b      	orrs	r3, r1
 8001068:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001070:	2b01      	cmp	r3, #1
 8001072:	d118      	bne.n	80010a6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800107e:	f023 0304 	bic.w	r3, r3, #4
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800108a:	4311      	orrs	r1, r2
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001090:	4311      	orrs	r1, r2
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001096:	430a      	orrs	r2, r1
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	e007      	b.n	80010b6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d10c      	bne.n	80010d8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f023 010f 	bic.w	r1, r3, #15
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	631a      	str	r2, [r3, #48]	; 0x30
 80010d6:	e007      	b.n	80010e8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 020f 	bic.w	r2, r2, #15
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	f023 0303 	bic.w	r3, r3, #3
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	655a      	str	r2, [r3, #84]	; 0x54
 80010f8:	e007      	b.n	800110a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fe:	f043 0210 	orr.w	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800110a:	7ffb      	ldrb	r3, [r7, #31]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	053e2d63 	.word	0x053e2d63
 800111c:	50040000 	.word	0x50040000
 8001120:	50040300 	.word	0x50040300
 8001124:	fff0c007 	.word	0xfff0c007

08001128 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0b6      	sub	sp, #216	; 0xd8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001142:	2b01      	cmp	r3, #1
 8001144:	d101      	bne.n	800114a <HAL_ADC_ConfigChannel+0x22>
 8001146:	2302      	movs	r3, #2
 8001148:	e3b9      	b.n	80018be <HAL_ADC_ConfigChannel+0x796>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fe77 	bl	8000e4a <LL_ADC_REG_IsConversionOngoing>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 839e 	bne.w	80018a0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d824      	bhi.n	80011b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	3b02      	subs	r3, #2
 8001172:	2b03      	cmp	r3, #3
 8001174:	d81b      	bhi.n	80011ae <HAL_ADC_ConfigChannel+0x86>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <HAL_ADC_ConfigChannel+0x54>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	0800118d 	.word	0x0800118d
 8001180:	08001195 	.word	0x08001195
 8001184:	0800119d 	.word	0x0800119d
 8001188:	080011a5 	.word	0x080011a5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	220c      	movs	r2, #12
 8001190:	605a      	str	r2, [r3, #4]
          break;
 8001192:	e011      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2212      	movs	r2, #18
 8001198:	605a      	str	r2, [r3, #4]
          break;
 800119a:	e00d      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2218      	movs	r2, #24
 80011a0:	605a      	str	r2, [r3, #4]
          break;
 80011a2:	e009      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011aa:	605a      	str	r2, [r3, #4]
          break;
 80011ac:	e004      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2206      	movs	r2, #6
 80011b2:	605a      	str	r2, [r3, #4]
          break;
 80011b4:	e000      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80011b6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	f7ff fd64 	bl	8000c92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fe3b 	bl	8000e4a <LL_ADC_REG_IsConversionOngoing>
 80011d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe47 	bl	8000e70 <LL_ADC_INJ_IsConversionOngoing>
 80011e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 81a6 	bne.w	800153c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f040 81a1 	bne.w	800153c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	461a      	mov	r2, r3
 8001208:	f7ff fd6f 	bl	8000cea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	08db      	lsrs	r3, r3, #3
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d00a      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	6919      	ldr	r1, [r3, #16]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800123e:	f7ff fcd3 	bl	8000be8 <LL_ADC_SetOffset>
 8001242:	e17b      	b.n	800153c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fcf0 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10a      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x148>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fce5 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	0e9b      	lsrs	r3, r3, #26
 800126a:	f003 021f 	and.w	r2, r3, #31
 800126e:	e01e      	b.n	80012ae <HAL_ADC_ConfigChannel+0x186>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcda 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800128e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001292:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001296:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800129e:	2320      	movs	r3, #32
 80012a0:	e004      	b.n	80012ac <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80012a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x19e>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	0e9b      	lsrs	r3, r3, #26
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	e018      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80012da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80012e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80012ea:	2320      	movs	r3, #32
 80012ec:	e004      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80012ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d106      	bne.n	800130a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fca9 	bl	8000c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2101      	movs	r1, #1
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fc8d 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10a      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x20e>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fc82 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	0e9b      	lsrs	r3, r3, #26
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	e01e      	b.n	8001374 <HAL_ADC_ConfigChannel+0x24c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2101      	movs	r1, #1
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fc77 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001348:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001354:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800135c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001364:	2320      	movs	r3, #32
 8001366:	e004      	b.n	8001372 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <HAL_ADC_ConfigChannel+0x264>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0e9b      	lsrs	r3, r3, #26
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	e018      	b.n	80013be <HAL_ADC_ConfigChannel+0x296>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80013a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80013a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80013b0:	2320      	movs	r3, #32
 80013b2:	e004      	b.n	80013be <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80013b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013be:	429a      	cmp	r2, r3
 80013c0:	d106      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fc46 	bl	8000c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2102      	movs	r1, #2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fc2a 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10a      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x2d4>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2102      	movs	r1, #2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fc1f 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	0e9b      	lsrs	r3, r3, #26
 80013f6:	f003 021f 	and.w	r2, r3, #31
 80013fa:	e01e      	b.n	800143a <HAL_ADC_ConfigChannel+0x312>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2102      	movs	r1, #2
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fc14 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800141a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800141e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800142a:	2320      	movs	r3, #32
 800142c:	e004      	b.n	8001438 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800142e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001432:	fab3 f383 	clz	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x32a>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0e9b      	lsrs	r3, r3, #26
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	e016      	b.n	8001480 <HAL_ADC_ConfigChannel+0x358>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001464:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800146a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001472:	2320      	movs	r3, #32
 8001474:	e004      	b.n	8001480 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001480:	429a      	cmp	r2, r3
 8001482:	d106      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2200      	movs	r2, #0
 800148a:	2102      	movs	r1, #2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fbe5 	bl	8000c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2103      	movs	r1, #3
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fbc9 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 800149e:	4603      	mov	r3, r0
 80014a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10a      	bne.n	80014be <HAL_ADC_ConfigChannel+0x396>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2103      	movs	r1, #3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fbbe 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	0e9b      	lsrs	r3, r3, #26
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	e017      	b.n	80014ee <HAL_ADC_ConfigChannel+0x3c6>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2103      	movs	r1, #3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fbb3 	bl	8000c30 <LL_ADC_GetOffsetChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80014d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014d8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80014da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80014e0:	2320      	movs	r3, #32
 80014e2:	e003      	b.n	80014ec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80014e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x3de>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0e9b      	lsrs	r3, r3, #26
 8001500:	f003 031f 	and.w	r3, r3, #31
 8001504:	e011      	b.n	800152a <HAL_ADC_ConfigChannel+0x402>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001516:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800151e:	2320      	movs	r3, #32
 8001520:	e003      	b.n	800152a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800152a:	429a      	cmp	r2, r3
 800152c:	d106      	bne.n	800153c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	2103      	movs	r1, #3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fb90 	bl	8000c5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fc6f 	bl	8000e24 <LL_ADC_IsEnabled>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	f040 813f 	bne.w	80017cc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	461a      	mov	r2, r3
 800155c:	f7ff fbf0 	bl	8000d40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4a8e      	ldr	r2, [pc, #568]	; (80017a0 <HAL_ADC_ConfigChannel+0x678>)
 8001566:	4293      	cmp	r3, r2
 8001568:	f040 8130 	bne.w	80017cc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10b      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x46c>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0e9b      	lsrs	r3, r3, #26
 8001582:	3301      	adds	r3, #1
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	2b09      	cmp	r3, #9
 800158a:	bf94      	ite	ls
 800158c:	2301      	movls	r3, #1
 800158e:	2300      	movhi	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	e019      	b.n	80015c8 <HAL_ADC_ConfigChannel+0x4a0>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80015a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80015a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80015ac:	2320      	movs	r3, #32
 80015ae:	e003      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80015b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	2b09      	cmp	r3, #9
 80015c0:	bf94      	ite	ls
 80015c2:	2301      	movls	r3, #1
 80015c4:	2300      	movhi	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d079      	beq.n	80016c0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x4c0>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0e9b      	lsrs	r3, r3, #26
 80015de:	3301      	adds	r3, #1
 80015e0:	069b      	lsls	r3, r3, #26
 80015e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015e6:	e015      	b.n	8001614 <HAL_ADC_ConfigChannel+0x4ec>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80015f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80015fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001600:	2320      	movs	r3, #32
 8001602:	e003      	b.n	800160c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	3301      	adds	r3, #1
 800160e:	069b      	lsls	r3, r3, #26
 8001610:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x50c>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0e9b      	lsrs	r3, r3, #26
 8001626:	3301      	adds	r3, #1
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	e017      	b.n	8001664 <HAL_ADC_ConfigChannel+0x53c>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001644:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800164c:	2320      	movs	r3, #32
 800164e:	e003      	b.n	8001658 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	2101      	movs	r1, #1
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	ea42 0103 	orr.w	r1, r2, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <HAL_ADC_ConfigChannel+0x562>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0e9b      	lsrs	r3, r3, #26
 800167a:	3301      	adds	r3, #1
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	051b      	lsls	r3, r3, #20
 8001688:	e018      	b.n	80016bc <HAL_ADC_ConfigChannel+0x594>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800169c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80016a2:	2320      	movs	r3, #32
 80016a4:	e003      	b.n	80016ae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80016a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016bc:	430b      	orrs	r3, r1
 80016be:	e080      	b.n	80017c2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x5b4>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0e9b      	lsrs	r3, r3, #26
 80016d2:	3301      	adds	r3, #1
 80016d4:	069b      	lsls	r3, r3, #26
 80016d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016da:	e015      	b.n	8001708 <HAL_ADC_ConfigChannel+0x5e0>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80016ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80016ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80016f4:	2320      	movs	r3, #32
 80016f6:	e003      	b.n	8001700 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80016f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	069b      	lsls	r3, r3, #26
 8001704:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x600>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0e9b      	lsrs	r3, r3, #26
 800171a:	3301      	adds	r3, #1
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	e017      	b.n	8001758 <HAL_ADC_ConfigChannel+0x630>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	61fb      	str	r3, [r7, #28]
  return result;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001740:	2320      	movs	r3, #32
 8001742:	e003      	b.n	800174c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	ea42 0103 	orr.w	r1, r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10d      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x65c>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0e9b      	lsrs	r3, r3, #26
 800176e:	3301      	adds	r3, #1
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	3b1e      	subs	r3, #30
 800177c:	051b      	lsls	r3, r3, #20
 800177e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001782:	e01d      	b.n	80017c0 <HAL_ADC_ConfigChannel+0x698>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	613b      	str	r3, [r7, #16]
  return result;
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d103      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800179c:	2320      	movs	r3, #32
 800179e:	e005      	b.n	80017ac <HAL_ADC_ConfigChannel+0x684>
 80017a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	f003 021f 	and.w	r2, r3, #31
 80017b2:	4613      	mov	r3, r2
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	3b1e      	subs	r3, #30
 80017ba:	051b      	lsls	r3, r3, #20
 80017bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017c0:	430b      	orrs	r3, r1
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	6892      	ldr	r2, [r2, #8]
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff fa8f 	bl	8000cea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_ADC_ConfigChannel+0x7a0>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d06c      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017d8:	483c      	ldr	r0, [pc, #240]	; (80018cc <HAL_ADC_ConfigChannel+0x7a4>)
 80017da:	f7ff f9f7 	bl	8000bcc <LL_ADC_GetCommonPathInternalCh>
 80017de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a3a      	ldr	r2, [pc, #232]	; (80018d0 <HAL_ADC_ConfigChannel+0x7a8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d127      	bne.n	800183c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d121      	bne.n	800183c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a35      	ldr	r2, [pc, #212]	; (80018d4 <HAL_ADC_ConfigChannel+0x7ac>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d157      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001802:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001806:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800180a:	4619      	mov	r1, r3
 800180c:	482f      	ldr	r0, [pc, #188]	; (80018cc <HAL_ADC_ConfigChannel+0x7a4>)
 800180e:	f7ff f9ca 	bl	8000ba6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001812:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_ADC_ConfigChannel+0x7b0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	4a30      	ldr	r2, [pc, #192]	; (80018dc <HAL_ADC_ConfigChannel+0x7b4>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	099b      	lsrs	r3, r3, #6
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800182c:	e002      	b.n	8001834 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3b01      	subs	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f9      	bne.n	800182e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800183a:	e03a      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <HAL_ADC_ConfigChannel+0x7b8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d113      	bne.n	800186e <HAL_ADC_ConfigChannel+0x746>
 8001846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800184a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10d      	bne.n	800186e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <HAL_ADC_ConfigChannel+0x7ac>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d12a      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800185c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001864:	4619      	mov	r1, r3
 8001866:	4819      	ldr	r0, [pc, #100]	; (80018cc <HAL_ADC_ConfigChannel+0x7a4>)
 8001868:	f7ff f99d 	bl	8000ba6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800186c:	e021      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d11c      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800187c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d116      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <HAL_ADC_ConfigChannel+0x7ac>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d111      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800188e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001892:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <HAL_ADC_ConfigChannel+0x7a4>)
 800189a:	f7ff f984 	bl	8000ba6 <LL_ADC_SetCommonPathInternalCh>
 800189e:	e008      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	f043 0220 	orr.w	r2, r3, #32
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80018ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	37d8      	adds	r7, #216	; 0xd8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	80080000 	.word	0x80080000
 80018cc:	50040300 	.word	0x50040300
 80018d0:	c7520000 	.word	0xc7520000
 80018d4:	50040000 	.word	0x50040000
 80018d8:	20000000 	.word	0x20000000
 80018dc:	053e2d63 	.word	0x053e2d63
 80018e0:	cb840000 	.word	0xcb840000
 80018e4:	80000001 	.word	0x80000001

080018e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0ed      	b.n	8001ad6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe ff70 	bl	80007ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800191c:	f7ff f924 	bl	8000b68 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001922:	e012      	b.n	800194a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001924:	f7ff f920 	bl	8000b68 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b0a      	cmp	r3, #10
 8001930:	d90b      	bls.n	800194a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2205      	movs	r2, #5
 8001942:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0c5      	b.n	8001ad6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0e5      	beq.n	8001924 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0202 	bic.w	r2, r2, #2
 8001966:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001968:	f7ff f8fe 	bl	8000b68 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800196e:	e012      	b.n	8001996 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001970:	f7ff f8fa 	bl	8000b68 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b0a      	cmp	r3, #10
 800197c:	d90b      	bls.n	8001996 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2205      	movs	r2, #5
 800198e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e09f      	b.n	8001ad6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e5      	bne.n	8001970 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7e1b      	ldrb	r3, [r3, #24]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d108      	bne.n	80019be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e007      	b.n	80019ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7e5b      	ldrb	r3, [r3, #25]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d108      	bne.n	80019e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e007      	b.n	80019f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7e9b      	ldrb	r3, [r3, #26]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0220 	orr.w	r2, r2, #32
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e007      	b.n	8001a22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0220 	bic.w	r2, r2, #32
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7edb      	ldrb	r3, [r3, #27]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d108      	bne.n	8001a3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0210 	bic.w	r2, r2, #16
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e007      	b.n	8001a4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0210 	orr.w	r2, r2, #16
 8001a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7f1b      	ldrb	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d108      	bne.n	8001a66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0208 	orr.w	r2, r2, #8
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e007      	b.n	8001a76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0208 	bic.w	r2, r2, #8
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7f5b      	ldrb	r3, [r3, #29]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0204 	orr.w	r2, r2, #4
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e007      	b.n	8001aa0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0204 	bic.w	r2, r2, #4
 8001a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	ea42 0103 	orr.w	r1, r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	1e5a      	subs	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b087      	sub	sp, #28
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001af6:	7cfb      	ldrb	r3, [r7, #19]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d003      	beq.n	8001b04 <HAL_CAN_ConfigFilter+0x26>
 8001afc:	7cfb      	ldrb	r3, [r7, #19]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	f040 80aa 	bne.w	8001c58 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b0a:	f043 0201 	orr.w	r2, r3, #1
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d123      	bne.n	8001b86 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	401a      	ands	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3248      	adds	r2, #72	; 0x48
 8001b66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b7c:	6979      	ldr	r1, [r7, #20]
 8001b7e:	3348      	adds	r3, #72	; 0x48
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d122      	bne.n	8001bd4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3248      	adds	r2, #72	; 0x48
 8001bb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bc8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bca:	6979      	ldr	r1, [r7, #20]
 8001bcc:	3348      	adds	r3, #72	; 0x48
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bee:	e007      	b.n	8001c00 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c1a:	e007      	b.n	8001c2c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c4a:	f023 0201 	bic.w	r2, r3, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e006      	b.n	8001c66 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
  }
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d12e      	bne.n	8001ce4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c9e:	f7fe ff63 	bl	8000b68 <HAL_GetTick>
 8001ca2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ca4:	e012      	b.n	8001ccc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ca6:	f7fe ff5f 	bl	8000b68 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b0a      	cmp	r3, #10
 8001cb2:	d90b      	bls.n	8001ccc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2205      	movs	r2, #5
 8001cc4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e012      	b.n	8001cf2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1e5      	bne.n	8001ca6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e006      	b.n	8001cf2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
  }
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d003      	beq.n	8001d1e <HAL_CAN_GetRxMessage+0x24>
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	f040 80f3 	bne.w	8001f04 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10e      	bne.n	8001d42 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0e7      	b.n	8001f12 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d107      	bne.n	8001d60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0d8      	b.n	8001f12 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	331b      	adds	r3, #27
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0204 	and.w	r2, r3, #4
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	331b      	adds	r3, #27
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0d5b      	lsrs	r3, r3, #21
 8001d8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	331b      	adds	r3, #27
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	4413      	add	r3, r2
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	331b      	adds	r3, #27
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	4413      	add	r3, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0202 	and.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	331b      	adds	r3, #27
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 020f 	and.w	r2, r3, #15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	331b      	adds	r3, #27
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	4413      	add	r3, r2
 8001dea:	3304      	adds	r3, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	331b      	adds	r3, #27
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	4413      	add	r3, r2
 8001e02:	3304      	adds	r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0a1a      	lsrs	r2, r3, #8
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0c1a      	lsrs	r2, r3, #16
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3302      	adds	r3, #2
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e1a      	lsrs	r2, r3, #24
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	011b      	lsls	r3, r3, #4
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3304      	adds	r3, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0a1a      	lsrs	r2, r3, #8
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	3305      	adds	r3, #5
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0c1a      	lsrs	r2, r3, #16
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	3306      	adds	r3, #6
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0e1a      	lsrs	r2, r3, #24
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	3307      	adds	r3, #7
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d108      	bne.n	8001ef0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0220 	orr.w	r2, r2, #32
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	e007      	b.n	8001f00 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e006      	b.n	8001f12 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
  }
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d002      	beq.n	8001f3c <HAL_CAN_ActivateNotification+0x1e>
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d109      	bne.n	8001f50 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6959      	ldr	r1, [r3, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e006      	b.n	8001f5e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b08a      	sub	sp, #40	; 0x28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d07c      	beq.n	80020aa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d023      	beq.n	8002002 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f983 	bl	80022d8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fd2:	e016      	b.n	8002002 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe6:	e00c      	b.n	8002002 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffa:	e002      	b.n	8002002 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f989 	bl	8002314 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d024      	beq.n	8002056 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002014:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f963 	bl	80022ec <HAL_CAN_TxMailbox1CompleteCallback>
 8002026:	e016      	b.n	8002056 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	e00c      	b.n	8002056 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	e002      	b.n	8002056 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f969 	bl	8002328 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d024      	beq.n	80020aa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002068:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f943 	bl	8002300 <HAL_CAN_TxMailbox2CompleteCallback>
 800207a:	e016      	b.n	80020aa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	e00c      	b.n	80020aa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	e002      	b.n	80020aa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f949 	bl	800233c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00c      	beq.n	80020ce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2210      	movs	r2, #16
 80020cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00b      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2208      	movs	r2, #8
 80020e8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f930 	bl	8002350 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe f917 	bl	800033c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002128:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2210      	movs	r2, #16
 8002130:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00b      	beq.n	8002154 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f912 	bl	8002378 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f8f9 	bl	8002364 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2210      	movs	r2, #16
 800218c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f8fc 	bl	800238c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00b      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2208      	movs	r2, #8
 80021ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f8f5 	bl	80023a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d07b      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d072      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002224:	2b00      	cmp	r3, #0
 8002226:	d043      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d03e      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002238:	2b60      	cmp	r3, #96	; 0x60
 800223a:	d02b      	beq.n	8002294 <HAL_CAN_IRQHandler+0x32a>
 800223c:	2b60      	cmp	r3, #96	; 0x60
 800223e:	d82e      	bhi.n	800229e <HAL_CAN_IRQHandler+0x334>
 8002240:	2b50      	cmp	r3, #80	; 0x50
 8002242:	d022      	beq.n	800228a <HAL_CAN_IRQHandler+0x320>
 8002244:	2b50      	cmp	r3, #80	; 0x50
 8002246:	d82a      	bhi.n	800229e <HAL_CAN_IRQHandler+0x334>
 8002248:	2b40      	cmp	r3, #64	; 0x40
 800224a:	d019      	beq.n	8002280 <HAL_CAN_IRQHandler+0x316>
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d826      	bhi.n	800229e <HAL_CAN_IRQHandler+0x334>
 8002250:	2b30      	cmp	r3, #48	; 0x30
 8002252:	d010      	beq.n	8002276 <HAL_CAN_IRQHandler+0x30c>
 8002254:	2b30      	cmp	r3, #48	; 0x30
 8002256:	d822      	bhi.n	800229e <HAL_CAN_IRQHandler+0x334>
 8002258:	2b10      	cmp	r3, #16
 800225a:	d002      	beq.n	8002262 <HAL_CAN_IRQHandler+0x2f8>
 800225c:	2b20      	cmp	r3, #32
 800225e:	d005      	beq.n	800226c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002260:	e01d      	b.n	800229e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800226a:	e019      	b.n	80022a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f043 0310 	orr.w	r3, r3, #16
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002274:	e014      	b.n	80022a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f043 0320 	orr.w	r3, r3, #32
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800227e:	e00f      	b.n	80022a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002288:	e00a      	b.n	80022a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002292:	e005      	b.n	80022a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800229c:	e000      	b.n	80022a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800229e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2204      	movs	r2, #4
 80022b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d008      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f872 	bl	80023b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <__NVIC_SetPriorityGrouping>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fa:	4a04      	ldr	r2, [pc, #16]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60d3      	str	r3, [r2, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_GetPriorityGrouping>:
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_EnableIRQ>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0b      	blt.n	8002456 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4907      	ldr	r1, [pc, #28]	; (8002464 <__NVIC_EnableIRQ+0x38>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	; (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <SysTick_Config>:
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002534:	d301      	bcc.n	800253a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002536:	2301      	movs	r3, #1
 8002538:	e00f      	b.n	800255a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <SysTick_Config+0x40>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002542:	210f      	movs	r1, #15
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f7ff ff8e 	bl	8002468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <SysTick_Config+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002552:	4b04      	ldr	r3, [pc, #16]	; (8002564 <SysTick_Config+0x40>)
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000e010 	.word	0xe000e010

08002568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff29 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002590:	f7ff ff3e 	bl	8002410 <__NVIC_GetPriorityGrouping>
 8002594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7ff ff8e 	bl	80024bc <NVIC_EncodePriority>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff5d 	bl	8002468 <__NVIC_SetPriority>
}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff31 	bl	800242c <__NVIC_EnableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ffa2 	bl	8002524 <SysTick_Config>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fa:	e154      	b.n	80028a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	4013      	ands	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8146 	beq.w	80028a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d005      	beq.n	800262c <HAL_GPIO_Init+0x40>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d130      	bne.n	800268e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002662:	2201      	movs	r2, #1
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 0201 	and.w	r2, r3, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b03      	cmp	r3, #3
 8002698:	d017      	beq.n	80026ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2203      	movs	r2, #3
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d123      	bne.n	800271e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	08da      	lsrs	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3208      	adds	r2, #8
 80026de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	220f      	movs	r2, #15
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	08da      	lsrs	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3208      	adds	r2, #8
 8002718:	6939      	ldr	r1, [r7, #16]
 800271a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0203 	and.w	r2, r3, #3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80a0 	beq.w	80028a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002760:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_GPIO_Init+0x2d8>)
 8002762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002764:	4a57      	ldr	r2, [pc, #348]	; (80028c4 <HAL_GPIO_Init+0x2d8>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6613      	str	r3, [r2, #96]	; 0x60
 800276c:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <HAL_GPIO_Init+0x2d8>)
 800276e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002778:	4a53      	ldr	r2, [pc, #332]	; (80028c8 <HAL_GPIO_Init+0x2dc>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027a2:	d019      	beq.n	80027d8 <HAL_GPIO_Init+0x1ec>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a49      	ldr	r2, [pc, #292]	; (80028cc <HAL_GPIO_Init+0x2e0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_GPIO_Init+0x1e8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <HAL_GPIO_Init+0x2e4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00d      	beq.n	80027d0 <HAL_GPIO_Init+0x1e4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_GPIO_Init+0x2e8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d007      	beq.n	80027cc <HAL_GPIO_Init+0x1e0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a46      	ldr	r2, [pc, #280]	; (80028d8 <HAL_GPIO_Init+0x2ec>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d101      	bne.n	80027c8 <HAL_GPIO_Init+0x1dc>
 80027c4:	2304      	movs	r3, #4
 80027c6:	e008      	b.n	80027da <HAL_GPIO_Init+0x1ee>
 80027c8:	2307      	movs	r3, #7
 80027ca:	e006      	b.n	80027da <HAL_GPIO_Init+0x1ee>
 80027cc:	2303      	movs	r3, #3
 80027ce:	e004      	b.n	80027da <HAL_GPIO_Init+0x1ee>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e002      	b.n	80027da <HAL_GPIO_Init+0x1ee>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <HAL_GPIO_Init+0x1ee>
 80027d8:	2300      	movs	r3, #0
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	f002 0203 	and.w	r2, r2, #3
 80027e0:	0092      	lsls	r2, r2, #2
 80027e2:	4093      	lsls	r3, r2
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027ea:	4937      	ldr	r1, [pc, #220]	; (80028c8 <HAL_GPIO_Init+0x2dc>)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3302      	adds	r3, #2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f8:	4b38      	ldr	r3, [pc, #224]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800281c:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002822:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002846:	4a25      	ldr	r2, [pc, #148]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800284c:	4b23      	ldr	r3, [pc, #140]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43db      	mvns	r3, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002870:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800289a:	4a10      	ldr	r2, [pc, #64]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f47f aea3 	bne.w	80025fc <HAL_GPIO_Init+0x10>
  }
}
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010000 	.word	0x40010000
 80028cc:	48000400 	.word	0x48000400
 80028d0:	48000800 	.word	0x48000800
 80028d4:	48000c00 	.word	0x48000c00
 80028d8:	48001000 	.word	0x48001000
 80028dc:	40010400 	.word	0x40010400

080028e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
 80028ec:	4613      	mov	r3, r2
 80028ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <HAL_PWREx_GetVoltageRange+0x18>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40007000 	.word	0x40007000

0800292c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293a:	d130      	bne.n	800299e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002948:	d038      	beq.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2232      	movs	r2, #50	; 0x32
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0c9b      	lsrs	r3, r3, #18
 800296c:	3301      	adds	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002970:	e002      	b.n	8002978 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b01      	subs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002984:	d102      	bne.n	800298c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f2      	bne.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800298c:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002998:	d110      	bne.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e00f      	b.n	80029be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029aa:	d007      	beq.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b4:	4a05      	ldr	r2, [pc, #20]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40007000 	.word	0x40007000
 80029d0:	20000000 	.word	0x20000000
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d102      	bne.n	80029ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f000 bc02 	b.w	80031f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ec:	4b96      	ldr	r3, [pc, #600]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f6:	4b94      	ldr	r3, [pc, #592]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80e4 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <HAL_RCC_OscConfig+0x4c>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	f040 808b 	bne.w	8002b32 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	f040 8087 	bne.w	8002b32 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a24:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_OscConfig+0x64>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e3d9      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	4b81      	ldr	r3, [pc, #516]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_RCC_OscConfig+0x7e>
 8002a4c:	4b7e      	ldr	r3, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a54:	e005      	b.n	8002a62 <HAL_RCC_OscConfig+0x8a>
 8002a56:	4b7c      	ldr	r3, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d223      	bcs.n	8002aae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fd52 	bl	8003514 <RCC_SetFlashLatencyFromMSIRange>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e3ba      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a7a:	4b73      	ldr	r3, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a72      	ldr	r2, [pc, #456]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b70      	ldr	r3, [pc, #448]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	496d      	ldr	r1, [pc, #436]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a98:	4b6b      	ldr	r3, [pc, #428]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	4968      	ldr	r1, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]
 8002aac:	e025      	b.n	8002afa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aae:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	f043 0308 	orr.w	r3, r3, #8
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4960      	ldr	r1, [pc, #384]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002acc:	4b5e      	ldr	r3, [pc, #376]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	495b      	ldr	r1, [pc, #364]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fd12 	bl	8003514 <RCC_SetFlashLatencyFromMSIRange>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e37a      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002afa:	f000 fc81 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4950      	ldr	r1, [pc, #320]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	fa22 f303 	lsr.w	r3, r2, r3
 8002b16:	4a4e      	ldr	r2, [pc, #312]	; (8002c50 <HAL_RCC_OscConfig+0x278>)
 8002b18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b1a:	4b4e      	ldr	r3, [pc, #312]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd ffd2 	bl	8000ac8 <HAL_InitTick>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d052      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	e35e      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d032      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b3a:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b46:	f7fe f80f 	bl	8000b68 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4e:	f7fe f80b 	bl	8000b68 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e347      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b60:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a35      	ldr	r2, [pc, #212]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4930      	ldr	r1, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	492b      	ldr	r1, [pc, #172]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
 8002b9e:	e01a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bac:	f7fd ffdc 	bl	8000b68 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb4:	f7fd ffd8 	bl	8000b68 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e314      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1dc>
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d073      	beq.n	8002cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x21c>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d10e      	bne.n	8002c0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d10b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf4:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d063      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d15f      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e2f1      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x24c>
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e025      	b.n	8002c70 <HAL_RCC_OscConfig+0x298>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c2c:	d114      	bne.n	8002c58 <HAL_RCC_OscConfig+0x280>
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a02      	ldr	r2, [pc, #8]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e013      	b.n	8002c70 <HAL_RCC_OscConfig+0x298>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08004c74 	.word	0x08004c74
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004
 8002c58:	4ba0      	ldr	r3, [pc, #640]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a9f      	ldr	r2, [pc, #636]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b9d      	ldr	r3, [pc, #628]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a9c      	ldr	r2, [pc, #624]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d013      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fd ff76 	bl	8000b68 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7fd ff72 	bl	8000b68 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e2ae      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	4b92      	ldr	r3, [pc, #584]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x2a8>
 8002c9e:	e014      	b.n	8002cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fd ff62 	bl	8000b68 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fd ff5e 	bl	8000b68 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	; 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e29a      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cba:	4b88      	ldr	r3, [pc, #544]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2d0>
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d060      	beq.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x310>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d119      	bne.n	8002d16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d116      	bne.n	8002d16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce8:	4b7c      	ldr	r3, [pc, #496]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x328>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e277      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d00:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	061b      	lsls	r3, r3, #24
 8002d0e:	4973      	ldr	r1, [pc, #460]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d14:	e040      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d023      	beq.n	8002d66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1e:	4b6f      	ldr	r3, [pc, #444]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6e      	ldr	r2, [pc, #440]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fd ff1d 	bl	8000b68 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d32:	f7fd ff19 	bl	8000b68 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e255      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d44:	4b65      	ldr	r3, [pc, #404]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b62      	ldr	r3, [pc, #392]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	061b      	lsls	r3, r3, #24
 8002d5e:	495f      	ldr	r1, [pc, #380]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	604b      	str	r3, [r1, #4]
 8002d64:	e018      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d66:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a5c      	ldr	r2, [pc, #368]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fd fef9 	bl	8000b68 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7fd fef5 	bl	8000b68 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e231      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d03c      	beq.n	8002e1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dac:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db2:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fd fed4 	bl	8000b68 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fd fed0 	bl	8000b68 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e20c      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ef      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x3ec>
 8002de4:	e01b      	b.n	8002e1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dec:	4a3b      	ldr	r2, [pc, #236]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fd feb7 	bl	8000b68 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fd feb3 	bl	8000b68 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1ef      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e10:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ef      	bne.n	8002dfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80a6 	beq.w	8002f78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e30:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10d      	bne.n	8002e58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	4b27      	ldr	r3, [pc, #156]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	4a26      	ldr	r2, [pc, #152]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6593      	str	r3, [r2, #88]	; 0x58
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e54:	2301      	movs	r3, #1
 8002e56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e58:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_RCC_OscConfig+0x508>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d118      	bne.n	8002e96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <HAL_RCC_OscConfig+0x508>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_RCC_OscConfig+0x508>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e70:	f7fd fe7a 	bl	8000b68 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e78:	f7fd fe76 	bl	8000b68 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1b2      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_RCC_OscConfig+0x508>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4d8>
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eae:	e029      	b.n	8002f04 <HAL_RCC_OscConfig+0x52c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d115      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x50c>
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	4a03      	ldr	r2, [pc, #12]	; (8002edc <HAL_RCC_OscConfig+0x504>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x52c>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	4b9a      	ldr	r3, [pc, #616]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	4a99      	ldr	r2, [pc, #612]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef4:	4b96      	ldr	r3, [pc, #600]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	4a95      	ldr	r2, [pc, #596]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d016      	beq.n	8002f3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fd fe2c 	bl	8000b68 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fd fe28 	bl	8000b68 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e162      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2a:	4b89      	ldr	r3, [pc, #548]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ed      	beq.n	8002f14 <HAL_RCC_OscConfig+0x53c>
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fd fe15 	bl	8000b68 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fd fe11 	bl	8000b68 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e14b      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f58:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ed      	bne.n	8002f42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6c:	4b78      	ldr	r3, [pc, #480]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	4a77      	ldr	r2, [pc, #476]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d03c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f8c:	4b70      	ldr	r3, [pc, #448]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f92:	4a6f      	ldr	r2, [pc, #444]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fd fde4 	bl	8000b68 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa4:	f7fd fde0 	bl	8000b68 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e11c      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb6:	4b66      	ldr	r3, [pc, #408]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ef      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x5cc>
 8002fc4:	e01b      	b.n	8002ffe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fc6:	4b62      	ldr	r3, [pc, #392]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fcc:	4a60      	ldr	r2, [pc, #384]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002fce:	f023 0301 	bic.w	r3, r3, #1
 8002fd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7fd fdc7 	bl	8000b68 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fde:	f7fd fdc3 	bl	8000b68 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e0ff      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff0:	4b57      	ldr	r3, [pc, #348]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8002ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1ef      	bne.n	8002fde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80f3 	beq.w	80031ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	2b02      	cmp	r3, #2
 800300e:	f040 80c9 	bne.w	80031a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003012:	4b4f      	ldr	r3, [pc, #316]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f003 0203 	and.w	r2, r3, #3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	429a      	cmp	r2, r3
 8003024:	d12c      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	3b01      	subs	r3, #1
 8003032:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d123      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d11b      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d113      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	3b01      	subs	r3, #1
 8003066:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d109      	bne.n	8003080 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	3b01      	subs	r3, #1
 800307a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d06b      	beq.n	8003158 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d062      	beq.n	800314c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003086:	4b32      	ldr	r3, [pc, #200]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0ac      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003096:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2d      	ldr	r2, [pc, #180]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 800309c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030a2:	f7fd fd61 	bl	8000b68 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fd fd5d 	bl	8000b68 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e099      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030bc:	4b24      	ldr	r3, [pc, #144]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x77c>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030d8:	3a01      	subs	r2, #1
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	4311      	orrs	r1, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e2:	0212      	lsls	r2, r2, #8
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ea:	0852      	lsrs	r2, r2, #1
 80030ec:	3a01      	subs	r2, #1
 80030ee:	0552      	lsls	r2, r2, #21
 80030f0:	4311      	orrs	r1, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030f6:	0852      	lsrs	r2, r2, #1
 80030f8:	3a01      	subs	r2, #1
 80030fa:	0652      	lsls	r2, r2, #25
 80030fc:	4311      	orrs	r1, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003102:	06d2      	lsls	r2, r2, #27
 8003104:	430a      	orrs	r2, r1
 8003106:	4912      	ldr	r1, [pc, #72]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003108:	4313      	orrs	r3, r2
 800310a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 800311e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003122:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003124:	f7fd fd20 	bl	8000b68 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312c:	f7fd fd1c 	bl	8000b68 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e058      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <HAL_RCC_OscConfig+0x778>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800314a:	e050      	b.n	80031ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e04f      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
 8003150:	40021000 	.word	0x40021000
 8003154:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d144      	bne.n	80031ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003170:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800317c:	f7fd fcf4 	bl	8000b68 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fd fcf0 	bl	8000b68 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e02c      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x7ac>
 80031a2:	e024      	b.n	80031ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d01f      	beq.n	80031ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fd fcd7 	bl	8000b68 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031be:	f7fd fcd3 	bl	8000b68 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e00f      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4905      	ldr	r1, [pc, #20]	; (80031f8 <HAL_RCC_OscConfig+0x820>)
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_OscConfig+0x824>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	60cb      	str	r3, [r1, #12]
 80031e8:	e001      	b.n	80031ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	feeefffc 	.word	0xfeeefffc

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0e7      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b75      	ldr	r3, [pc, #468]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d910      	bls.n	8003244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b72      	ldr	r3, [pc, #456]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4970      	ldr	r1, [pc, #448]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b6e      	ldr	r3, [pc, #440]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0cf      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	4b66      	ldr	r3, [pc, #408]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800325c:	429a      	cmp	r2, r3
 800325e:	d908      	bls.n	8003272 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b63      	ldr	r3, [pc, #396]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4960      	ldr	r1, [pc, #384]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d04c      	beq.n	8003318 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003286:	4b5a      	ldr	r3, [pc, #360]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d121      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0a6      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329e:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d115      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e09a      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e08e      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e086      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4943      	ldr	r1, [pc, #268]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e8:	f7fd fc3e 	bl	8000b68 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fd fc3a 	bl	8000b68 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e06e      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d010      	beq.n	8003346 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003330:	429a      	cmp	r2, r3
 8003332:	d208      	bcs.n	8003346 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003334:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	492b      	ldr	r1, [pc, #172]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003346:	4b29      	ldr	r3, [pc, #164]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d210      	bcs.n	8003376 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 0207 	bic.w	r2, r3, #7
 800335c:	4923      	ldr	r1, [pc, #140]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003364:	4b21      	ldr	r3, [pc, #132]	; (80033ec <HAL_RCC_ClockConfig+0x1ec>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d001      	beq.n	8003376 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e036      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003382:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	4918      	ldr	r1, [pc, #96]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 8003390:	4313      	orrs	r3, r2
 8003392:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4910      	ldr	r1, [pc, #64]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033b4:	f000 f824 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <HAL_RCC_ClockConfig+0x1f0>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	490b      	ldr	r1, [pc, #44]	; (80033f4 <HAL_RCC_ClockConfig+0x1f4>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_RCC_ClockConfig+0x1f8>)
 80033d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_ClockConfig+0x1fc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd fb75 	bl	8000ac8 <HAL_InitTick>
 80033de:	4603      	mov	r3, r0
 80033e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80033e2:	7afb      	ldrb	r3, [r7, #11]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40022000 	.word	0x40022000
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08004c74 	.word	0x08004c74
 80033f8:	20000000 	.word	0x20000000
 80033fc:	20000004 	.word	0x20000004

08003400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800340e:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x34>
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d121      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d11e      	bne.n	8003472 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003434:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e005      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800345c:	4a2b      	ldr	r2, [pc, #172]	; (800350c <HAL_RCC_GetSysClockFreq+0x10c>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003464:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d102      	bne.n	800347e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003478:	4b25      	ldr	r3, [pc, #148]	; (8003510 <HAL_RCC_GetSysClockFreq+0x110>)
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	e004      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d101      	bne.n	8003488 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_RCC_GetSysClockFreq+0x110>)
 8003486:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d134      	bne.n	80034f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800348e:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d003      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0xac>
 80034a4:	e005      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_GetSysClockFreq+0x110>)
 80034a8:	617b      	str	r3, [r7, #20]
      break;
 80034aa:	e005      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034ac:	4b18      	ldr	r3, [pc, #96]	; (8003510 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ae:	617b      	str	r3, [r7, #20]
      break;
 80034b0:	e002      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	617b      	str	r3, [r7, #20]
      break;
 80034b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	3301      	adds	r3, #1
 80034c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	fb03 f202 	mul.w	r2, r3, r2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	0e5b      	lsrs	r3, r3, #25
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	3301      	adds	r3, #1
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034f8:	69bb      	ldr	r3, [r7, #24]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	08004c84 	.word	0x08004c84
 8003510:	00f42400 	.word	0x00f42400

08003514 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003520:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800352c:	f7ff f9f0 	bl	8002910 <HAL_PWREx_GetVoltageRange>
 8003530:	6178      	str	r0, [r7, #20]
 8003532:	e014      	b.n	800355e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	4a24      	ldr	r2, [pc, #144]	; (80035cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	6593      	str	r3, [r2, #88]	; 0x58
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800354c:	f7ff f9e0 	bl	8002910 <HAL_PWREx_GetVoltageRange>
 8003550:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003564:	d10b      	bne.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d919      	bls.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2ba0      	cmp	r3, #160	; 0xa0
 8003570:	d902      	bls.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003572:	2302      	movs	r3, #2
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	e013      	b.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003578:	2301      	movs	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	e010      	b.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d902      	bls.n	800358a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003584:	2303      	movs	r3, #3
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	e00a      	b.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d102      	bne.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003590:	2302      	movs	r3, #2
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e004      	b.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b70      	cmp	r3, #112	; 0x70
 800359a:	d101      	bne.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800359c:	2301      	movs	r3, #1
 800359e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 0207 	bic.w	r2, r3, #7
 80035a8:	4909      	ldr	r1, [pc, #36]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035b0:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40022000 	.word	0x40022000

080035d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035dc:	2300      	movs	r3, #0
 80035de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035e0:	2300      	movs	r3, #0
 80035e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d031      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035f8:	d01a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80035fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035fe:	d814      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003608:	d10f      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800360a:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	4a5c      	ldr	r2, [pc, #368]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003616:	e00c      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f9f0 	bl	8003a04 <RCCEx_PLLSAI1_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003628:	e003      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	74fb      	strb	r3, [r7, #19]
      break;
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003638:	4b51      	ldr	r3, [pc, #324]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	494e      	ldr	r1, [pc, #312]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800364e:	e001      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 809e 	beq.w	800379e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003662:	2300      	movs	r3, #0
 8003664:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003666:	4b46      	ldr	r3, [pc, #280]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003676:	2300      	movs	r3, #0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00d      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	4b40      	ldr	r3, [pc, #256]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	4a3f      	ldr	r2, [pc, #252]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003686:	6593      	str	r3, [r2, #88]	; 0x58
 8003688:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003694:	2301      	movs	r3, #1
 8003696:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003698:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a39      	ldr	r2, [pc, #228]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800369e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036a4:	f7fd fa60 	bl	8000b68 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036aa:	e009      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ac:	f7fd fa5c 	bl	8000b68 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d902      	bls.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	74fb      	strb	r3, [r7, #19]
        break;
 80036be:	e005      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036c0:	4b30      	ldr	r3, [pc, #192]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ef      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d15a      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036d2:	4b2b      	ldr	r3, [pc, #172]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01e      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d019      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036ee:	4b24      	ldr	r3, [pc, #144]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036fa:	4b21      	ldr	r3, [pc, #132]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800371a:	4a19      	ldr	r2, [pc, #100]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d016      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fd fa1c 	bl	8000b68 <HAL_GetTick>
 8003730:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003732:	e00b      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fd fa18 	bl	8000b68 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d902      	bls.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	74fb      	strb	r3, [r7, #19]
            break;
 800374a:	e006      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0ec      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4904      	ldr	r1, [pc, #16]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003776:	e009      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
 800377c:	e006      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800378c:	7c7b      	ldrb	r3, [r7, #17]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d105      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003792:	4b9b      	ldr	r3, [pc, #620]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003796:	4a9a      	ldr	r2, [pc, #616]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037aa:	4b95      	ldr	r3, [pc, #596]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f023 0203 	bic.w	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	4991      	ldr	r1, [pc, #580]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037cc:	4b8c      	ldr	r3, [pc, #560]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 020c 	bic.w	r2, r3, #12
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	4989      	ldr	r1, [pc, #548]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037ee:	4b84      	ldr	r3, [pc, #528]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	4980      	ldr	r1, [pc, #512]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003810:	4b7b      	ldr	r3, [pc, #492]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	4978      	ldr	r1, [pc, #480]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003832:	4b73      	ldr	r3, [pc, #460]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	496f      	ldr	r1, [pc, #444]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003854:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	4967      	ldr	r1, [pc, #412]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003876:	4b62      	ldr	r3, [pc, #392]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	495e      	ldr	r1, [pc, #376]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003898:	4b59      	ldr	r3, [pc, #356]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	4956      	ldr	r1, [pc, #344]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ba:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	494d      	ldr	r1, [pc, #308]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d028      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038dc:	4b48      	ldr	r3, [pc, #288]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ea:	4945      	ldr	r1, [pc, #276]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038fa:	d106      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038fc:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4a3f      	ldr	r2, [pc, #252]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003906:	60d3      	str	r3, [r2, #12]
 8003908:	e011      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003912:	d10c      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3304      	adds	r3, #4
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f872 	bl	8003a04 <RCCEx_PLLSAI1_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d028      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800393a:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	492d      	ldr	r1, [pc, #180]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003958:	d106      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800395a:	4b29      	ldr	r3, [pc, #164]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4a28      	ldr	r2, [pc, #160]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003964:	60d3      	str	r3, [r2, #12]
 8003966:	e011      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003970:	d10c      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	2101      	movs	r1, #1
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f843 	bl	8003a04 <RCCEx_PLLSAI1_Config>
 800397e:	4603      	mov	r3, r0
 8003980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01c      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a6:	4916      	ldr	r1, [pc, #88]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b6:	d10c      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	2102      	movs	r1, #2
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f820 	bl	8003a04 <RCCEx_PLLSAI1_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80039ce:	7cfb      	ldrb	r3, [r7, #19]
 80039d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	4904      	ldr	r1, [pc, #16]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000

08003a04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a12:	4b74      	ldr	r3, [pc, #464]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d018      	beq.n	8003a50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a1e:	4b71      	ldr	r3, [pc, #452]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0203 	and.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d10d      	bne.n	8003a4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
       ||
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a36:	4b6b      	ldr	r3, [pc, #428]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
       ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d047      	beq.n	8003ada <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
 8003a4e:	e044      	b.n	8003ada <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d018      	beq.n	8003a8a <RCCEx_PLLSAI1_Config+0x86>
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d825      	bhi.n	8003aa8 <RCCEx_PLLSAI1_Config+0xa4>
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d002      	beq.n	8003a66 <RCCEx_PLLSAI1_Config+0x62>
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d009      	beq.n	8003a78 <RCCEx_PLLSAI1_Config+0x74>
 8003a64:	e020      	b.n	8003aa8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a66:	4b5f      	ldr	r3, [pc, #380]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d11d      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a76:	e01a      	b.n	8003aae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a78:	4b5a      	ldr	r3, [pc, #360]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d116      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a88:	e013      	b.n	8003ab2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a8a:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a96:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aa6:	e006      	b.n	8003ab6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003aac:	e004      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10d      	bne.n	8003ada <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003abe:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	4943      	ldr	r1, [pc, #268]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d17c      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ae0:	4b40      	ldr	r3, [pc, #256]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3f      	ldr	r2, [pc, #252]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aec:	f7fd f83c 	bl	8000b68 <HAL_GetTick>
 8003af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003af2:	e009      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003af4:	f7fd f838 	bl	8000b68 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d902      	bls.n	8003b08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	73fb      	strb	r3, [r7, #15]
        break;
 8003b06:	e005      	b.n	8003b14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1ef      	bne.n	8003af4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d15f      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d110      	bne.n	8003b42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b20:	4b30      	ldr	r3, [pc, #192]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6892      	ldr	r2, [r2, #8]
 8003b30:	0211      	lsls	r1, r2, #8
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68d2      	ldr	r2, [r2, #12]
 8003b36:	06d2      	lsls	r2, r2, #27
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	492a      	ldr	r1, [pc, #168]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	610b      	str	r3, [r1, #16]
 8003b40:	e027      	b.n	8003b92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d112      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b48:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6892      	ldr	r2, [r2, #8]
 8003b58:	0211      	lsls	r1, r2, #8
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6912      	ldr	r2, [r2, #16]
 8003b5e:	0852      	lsrs	r2, r2, #1
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0552      	lsls	r2, r2, #21
 8003b64:	430a      	orrs	r2, r1
 8003b66:	491f      	ldr	r1, [pc, #124]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	610b      	str	r3, [r1, #16]
 8003b6c:	e011      	b.n	8003b92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b6e:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6892      	ldr	r2, [r2, #8]
 8003b7e:	0211      	lsls	r1, r2, #8
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6952      	ldr	r2, [r2, #20]
 8003b84:	0852      	lsrs	r2, r2, #1
 8003b86:	3a01      	subs	r2, #1
 8003b88:	0652      	lsls	r2, r2, #25
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	4915      	ldr	r1, [pc, #84]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fc ffe3 	bl	8000b68 <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ba4:	e009      	b.n	8003bba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ba6:	f7fc ffdf 	bl	8000b68 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d902      	bls.n	8003bba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb8:	e005      	b.n	8003bc6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ef      	beq.n	8003ba6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	4903      	ldr	r1, [pc, #12]	; (8003be4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000

08003be8 <__errno>:
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <__errno+0x8>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	2000000c 	.word	0x2000000c

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4d0d      	ldr	r5, [pc, #52]	; (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1b64      	subs	r4, r4, r5
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2600      	movs	r6, #0
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4d0b      	ldr	r5, [pc, #44]	; (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	; (8003c38 <__libc_init_array+0x44>)
 8003c08:	f001 f824 	bl	8004c54 <_init>
 8003c0c:	1b64      	subs	r4, r4, r5
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2600      	movs	r6, #0
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08004d4c 	.word	0x08004d4c
 8003c30:	08004d4c 	.word	0x08004d4c
 8003c34:	08004d4c 	.word	0x08004d4c
 8003c38:	08004d50 	.word	0x08004d50

08003c3c <memset>:
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <iprintf>:
 8003c4c:	b40f      	push	{r0, r1, r2, r3}
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <iprintf+0x2c>)
 8003c50:	b513      	push	{r0, r1, r4, lr}
 8003c52:	681c      	ldr	r4, [r3, #0]
 8003c54:	b124      	cbz	r4, 8003c60 <iprintf+0x14>
 8003c56:	69a3      	ldr	r3, [r4, #24]
 8003c58:	b913      	cbnz	r3, 8003c60 <iprintf+0x14>
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 fa5e 	bl	800411c <__sinit>
 8003c60:	ab05      	add	r3, sp, #20
 8003c62:	9a04      	ldr	r2, [sp, #16]
 8003c64:	68a1      	ldr	r1, [r4, #8]
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f000 fc67 	bl	800453c <_vfiprintf_r>
 8003c6e:	b002      	add	sp, #8
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	b004      	add	sp, #16
 8003c76:	4770      	bx	lr
 8003c78:	2000000c 	.word	0x2000000c

08003c7c <_puts_r>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	460e      	mov	r6, r1
 8003c80:	4605      	mov	r5, r0
 8003c82:	b118      	cbz	r0, 8003c8c <_puts_r+0x10>
 8003c84:	6983      	ldr	r3, [r0, #24]
 8003c86:	b90b      	cbnz	r3, 8003c8c <_puts_r+0x10>
 8003c88:	f000 fa48 	bl	800411c <__sinit>
 8003c8c:	69ab      	ldr	r3, [r5, #24]
 8003c8e:	68ac      	ldr	r4, [r5, #8]
 8003c90:	b913      	cbnz	r3, 8003c98 <_puts_r+0x1c>
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 fa42 	bl	800411c <__sinit>
 8003c98:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <_puts_r+0xd0>)
 8003c9a:	429c      	cmp	r4, r3
 8003c9c:	d120      	bne.n	8003ce0 <_puts_r+0x64>
 8003c9e:	686c      	ldr	r4, [r5, #4]
 8003ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ca2:	07db      	lsls	r3, r3, #31
 8003ca4:	d405      	bmi.n	8003cb2 <_puts_r+0x36>
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	0598      	lsls	r0, r3, #22
 8003caa:	d402      	bmi.n	8003cb2 <_puts_r+0x36>
 8003cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cae:	f000 fad3 	bl	8004258 <__retarget_lock_acquire_recursive>
 8003cb2:	89a3      	ldrh	r3, [r4, #12]
 8003cb4:	0719      	lsls	r1, r3, #28
 8003cb6:	d51d      	bpl.n	8003cf4 <_puts_r+0x78>
 8003cb8:	6923      	ldr	r3, [r4, #16]
 8003cba:	b1db      	cbz	r3, 8003cf4 <_puts_r+0x78>
 8003cbc:	3e01      	subs	r6, #1
 8003cbe:	68a3      	ldr	r3, [r4, #8]
 8003cc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	60a3      	str	r3, [r4, #8]
 8003cc8:	bb39      	cbnz	r1, 8003d1a <_puts_r+0x9e>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da38      	bge.n	8003d40 <_puts_r+0xc4>
 8003cce:	4622      	mov	r2, r4
 8003cd0:	210a      	movs	r1, #10
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f000 f848 	bl	8003d68 <__swbuf_r>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d011      	beq.n	8003d00 <_puts_r+0x84>
 8003cdc:	250a      	movs	r5, #10
 8003cde:	e011      	b.n	8003d04 <_puts_r+0x88>
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <_puts_r+0xd4>)
 8003ce2:	429c      	cmp	r4, r3
 8003ce4:	d101      	bne.n	8003cea <_puts_r+0x6e>
 8003ce6:	68ac      	ldr	r4, [r5, #8]
 8003ce8:	e7da      	b.n	8003ca0 <_puts_r+0x24>
 8003cea:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <_puts_r+0xd8>)
 8003cec:	429c      	cmp	r4, r3
 8003cee:	bf08      	it	eq
 8003cf0:	68ec      	ldreq	r4, [r5, #12]
 8003cf2:	e7d5      	b.n	8003ca0 <_puts_r+0x24>
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f000 f888 	bl	8003e0c <__swsetup_r>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d0dd      	beq.n	8003cbc <_puts_r+0x40>
 8003d00:	f04f 35ff 	mov.w	r5, #4294967295
 8003d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d06:	07da      	lsls	r2, r3, #31
 8003d08:	d405      	bmi.n	8003d16 <_puts_r+0x9a>
 8003d0a:	89a3      	ldrh	r3, [r4, #12]
 8003d0c:	059b      	lsls	r3, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_puts_r+0x9a>
 8003d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d12:	f000 faa2 	bl	800425a <__retarget_lock_release_recursive>
 8003d16:	4628      	mov	r0, r5
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	da04      	bge.n	8003d28 <_puts_r+0xac>
 8003d1e:	69a2      	ldr	r2, [r4, #24]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	dc06      	bgt.n	8003d32 <_puts_r+0xb6>
 8003d24:	290a      	cmp	r1, #10
 8003d26:	d004      	beq.n	8003d32 <_puts_r+0xb6>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	6022      	str	r2, [r4, #0]
 8003d2e:	7019      	strb	r1, [r3, #0]
 8003d30:	e7c5      	b.n	8003cbe <_puts_r+0x42>
 8003d32:	4622      	mov	r2, r4
 8003d34:	4628      	mov	r0, r5
 8003d36:	f000 f817 	bl	8003d68 <__swbuf_r>
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	d1bf      	bne.n	8003cbe <_puts_r+0x42>
 8003d3e:	e7df      	b.n	8003d00 <_puts_r+0x84>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	250a      	movs	r5, #10
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	6022      	str	r2, [r4, #0]
 8003d48:	701d      	strb	r5, [r3, #0]
 8003d4a:	e7db      	b.n	8003d04 <_puts_r+0x88>
 8003d4c:	08004cd8 	.word	0x08004cd8
 8003d50:	08004cf8 	.word	0x08004cf8
 8003d54:	08004cb8 	.word	0x08004cb8

08003d58 <puts>:
 8003d58:	4b02      	ldr	r3, [pc, #8]	; (8003d64 <puts+0xc>)
 8003d5a:	4601      	mov	r1, r0
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	f7ff bf8d 	b.w	8003c7c <_puts_r>
 8003d62:	bf00      	nop
 8003d64:	2000000c 	.word	0x2000000c

08003d68 <__swbuf_r>:
 8003d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6a:	460e      	mov	r6, r1
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	4605      	mov	r5, r0
 8003d70:	b118      	cbz	r0, 8003d7a <__swbuf_r+0x12>
 8003d72:	6983      	ldr	r3, [r0, #24]
 8003d74:	b90b      	cbnz	r3, 8003d7a <__swbuf_r+0x12>
 8003d76:	f000 f9d1 	bl	800411c <__sinit>
 8003d7a:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <__swbuf_r+0x98>)
 8003d7c:	429c      	cmp	r4, r3
 8003d7e:	d12b      	bne.n	8003dd8 <__swbuf_r+0x70>
 8003d80:	686c      	ldr	r4, [r5, #4]
 8003d82:	69a3      	ldr	r3, [r4, #24]
 8003d84:	60a3      	str	r3, [r4, #8]
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	071a      	lsls	r2, r3, #28
 8003d8a:	d52f      	bpl.n	8003dec <__swbuf_r+0x84>
 8003d8c:	6923      	ldr	r3, [r4, #16]
 8003d8e:	b36b      	cbz	r3, 8003dec <__swbuf_r+0x84>
 8003d90:	6923      	ldr	r3, [r4, #16]
 8003d92:	6820      	ldr	r0, [r4, #0]
 8003d94:	1ac0      	subs	r0, r0, r3
 8003d96:	6963      	ldr	r3, [r4, #20]
 8003d98:	b2f6      	uxtb	r6, r6
 8003d9a:	4283      	cmp	r3, r0
 8003d9c:	4637      	mov	r7, r6
 8003d9e:	dc04      	bgt.n	8003daa <__swbuf_r+0x42>
 8003da0:	4621      	mov	r1, r4
 8003da2:	4628      	mov	r0, r5
 8003da4:	f000 f926 	bl	8003ff4 <_fflush_r>
 8003da8:	bb30      	cbnz	r0, 8003df8 <__swbuf_r+0x90>
 8003daa:	68a3      	ldr	r3, [r4, #8]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	60a3      	str	r3, [r4, #8]
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	6022      	str	r2, [r4, #0]
 8003db6:	701e      	strb	r6, [r3, #0]
 8003db8:	6963      	ldr	r3, [r4, #20]
 8003dba:	3001      	adds	r0, #1
 8003dbc:	4283      	cmp	r3, r0
 8003dbe:	d004      	beq.n	8003dca <__swbuf_r+0x62>
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	07db      	lsls	r3, r3, #31
 8003dc4:	d506      	bpl.n	8003dd4 <__swbuf_r+0x6c>
 8003dc6:	2e0a      	cmp	r6, #10
 8003dc8:	d104      	bne.n	8003dd4 <__swbuf_r+0x6c>
 8003dca:	4621      	mov	r1, r4
 8003dcc:	4628      	mov	r0, r5
 8003dce:	f000 f911 	bl	8003ff4 <_fflush_r>
 8003dd2:	b988      	cbnz	r0, 8003df8 <__swbuf_r+0x90>
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <__swbuf_r+0x9c>)
 8003dda:	429c      	cmp	r4, r3
 8003ddc:	d101      	bne.n	8003de2 <__swbuf_r+0x7a>
 8003dde:	68ac      	ldr	r4, [r5, #8]
 8003de0:	e7cf      	b.n	8003d82 <__swbuf_r+0x1a>
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <__swbuf_r+0xa0>)
 8003de4:	429c      	cmp	r4, r3
 8003de6:	bf08      	it	eq
 8003de8:	68ec      	ldreq	r4, [r5, #12]
 8003dea:	e7ca      	b.n	8003d82 <__swbuf_r+0x1a>
 8003dec:	4621      	mov	r1, r4
 8003dee:	4628      	mov	r0, r5
 8003df0:	f000 f80c 	bl	8003e0c <__swsetup_r>
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d0cb      	beq.n	8003d90 <__swbuf_r+0x28>
 8003df8:	f04f 37ff 	mov.w	r7, #4294967295
 8003dfc:	e7ea      	b.n	8003dd4 <__swbuf_r+0x6c>
 8003dfe:	bf00      	nop
 8003e00:	08004cd8 	.word	0x08004cd8
 8003e04:	08004cf8 	.word	0x08004cf8
 8003e08:	08004cb8 	.word	0x08004cb8

08003e0c <__swsetup_r>:
 8003e0c:	4b32      	ldr	r3, [pc, #200]	; (8003ed8 <__swsetup_r+0xcc>)
 8003e0e:	b570      	push	{r4, r5, r6, lr}
 8003e10:	681d      	ldr	r5, [r3, #0]
 8003e12:	4606      	mov	r6, r0
 8003e14:	460c      	mov	r4, r1
 8003e16:	b125      	cbz	r5, 8003e22 <__swsetup_r+0x16>
 8003e18:	69ab      	ldr	r3, [r5, #24]
 8003e1a:	b913      	cbnz	r3, 8003e22 <__swsetup_r+0x16>
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f000 f97d 	bl	800411c <__sinit>
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <__swsetup_r+0xd0>)
 8003e24:	429c      	cmp	r4, r3
 8003e26:	d10f      	bne.n	8003e48 <__swsetup_r+0x3c>
 8003e28:	686c      	ldr	r4, [r5, #4]
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e30:	0719      	lsls	r1, r3, #28
 8003e32:	d42c      	bmi.n	8003e8e <__swsetup_r+0x82>
 8003e34:	06dd      	lsls	r5, r3, #27
 8003e36:	d411      	bmi.n	8003e5c <__swsetup_r+0x50>
 8003e38:	2309      	movs	r3, #9
 8003e3a:	6033      	str	r3, [r6, #0]
 8003e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	f04f 30ff 	mov.w	r0, #4294967295
 8003e46:	e03e      	b.n	8003ec6 <__swsetup_r+0xba>
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <__swsetup_r+0xd4>)
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	d101      	bne.n	8003e52 <__swsetup_r+0x46>
 8003e4e:	68ac      	ldr	r4, [r5, #8]
 8003e50:	e7eb      	b.n	8003e2a <__swsetup_r+0x1e>
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <__swsetup_r+0xd8>)
 8003e54:	429c      	cmp	r4, r3
 8003e56:	bf08      	it	eq
 8003e58:	68ec      	ldreq	r4, [r5, #12]
 8003e5a:	e7e6      	b.n	8003e2a <__swsetup_r+0x1e>
 8003e5c:	0758      	lsls	r0, r3, #29
 8003e5e:	d512      	bpl.n	8003e86 <__swsetup_r+0x7a>
 8003e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e62:	b141      	cbz	r1, 8003e76 <__swsetup_r+0x6a>
 8003e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e68:	4299      	cmp	r1, r3
 8003e6a:	d002      	beq.n	8003e72 <__swsetup_r+0x66>
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f000 fa5b 	bl	8004328 <_free_r>
 8003e72:	2300      	movs	r3, #0
 8003e74:	6363      	str	r3, [r4, #52]	; 0x34
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6063      	str	r3, [r4, #4]
 8003e82:	6923      	ldr	r3, [r4, #16]
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	f043 0308 	orr.w	r3, r3, #8
 8003e8c:	81a3      	strh	r3, [r4, #12]
 8003e8e:	6923      	ldr	r3, [r4, #16]
 8003e90:	b94b      	cbnz	r3, 8003ea6 <__swsetup_r+0x9a>
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9c:	d003      	beq.n	8003ea6 <__swsetup_r+0x9a>
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f000 fa01 	bl	80042a8 <__smakebuf_r>
 8003ea6:	89a0      	ldrh	r0, [r4, #12]
 8003ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003eac:	f010 0301 	ands.w	r3, r0, #1
 8003eb0:	d00a      	beq.n	8003ec8 <__swsetup_r+0xbc>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60a3      	str	r3, [r4, #8]
 8003eb6:	6963      	ldr	r3, [r4, #20]
 8003eb8:	425b      	negs	r3, r3
 8003eba:	61a3      	str	r3, [r4, #24]
 8003ebc:	6923      	ldr	r3, [r4, #16]
 8003ebe:	b943      	cbnz	r3, 8003ed2 <__swsetup_r+0xc6>
 8003ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ec4:	d1ba      	bne.n	8003e3c <__swsetup_r+0x30>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	0781      	lsls	r1, r0, #30
 8003eca:	bf58      	it	pl
 8003ecc:	6963      	ldrpl	r3, [r4, #20]
 8003ece:	60a3      	str	r3, [r4, #8]
 8003ed0:	e7f4      	b.n	8003ebc <__swsetup_r+0xb0>
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	e7f7      	b.n	8003ec6 <__swsetup_r+0xba>
 8003ed6:	bf00      	nop
 8003ed8:	2000000c 	.word	0x2000000c
 8003edc:	08004cd8 	.word	0x08004cd8
 8003ee0:	08004cf8 	.word	0x08004cf8
 8003ee4:	08004cb8 	.word	0x08004cb8

08003ee8 <__sflush_r>:
 8003ee8:	898a      	ldrh	r2, [r1, #12]
 8003eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eee:	4605      	mov	r5, r0
 8003ef0:	0710      	lsls	r0, r2, #28
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	d458      	bmi.n	8003fa8 <__sflush_r+0xc0>
 8003ef6:	684b      	ldr	r3, [r1, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dc05      	bgt.n	8003f08 <__sflush_r+0x20>
 8003efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	dc02      	bgt.n	8003f08 <__sflush_r+0x20>
 8003f02:	2000      	movs	r0, #0
 8003f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f0a:	2e00      	cmp	r6, #0
 8003f0c:	d0f9      	beq.n	8003f02 <__sflush_r+0x1a>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f14:	682f      	ldr	r7, [r5, #0]
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	d032      	beq.n	8003f80 <__sflush_r+0x98>
 8003f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	075a      	lsls	r2, r3, #29
 8003f20:	d505      	bpl.n	8003f2e <__sflush_r+0x46>
 8003f22:	6863      	ldr	r3, [r4, #4]
 8003f24:	1ac0      	subs	r0, r0, r3
 8003f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f28:	b10b      	cbz	r3, 8003f2e <__sflush_r+0x46>
 8003f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f2c:	1ac0      	subs	r0, r0, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	4602      	mov	r2, r0
 8003f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f34:	6a21      	ldr	r1, [r4, #32]
 8003f36:	4628      	mov	r0, r5
 8003f38:	47b0      	blx	r6
 8003f3a:	1c43      	adds	r3, r0, #1
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	d106      	bne.n	8003f4e <__sflush_r+0x66>
 8003f40:	6829      	ldr	r1, [r5, #0]
 8003f42:	291d      	cmp	r1, #29
 8003f44:	d82c      	bhi.n	8003fa0 <__sflush_r+0xb8>
 8003f46:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <__sflush_r+0x108>)
 8003f48:	40ca      	lsrs	r2, r1
 8003f4a:	07d6      	lsls	r6, r2, #31
 8003f4c:	d528      	bpl.n	8003fa0 <__sflush_r+0xb8>
 8003f4e:	2200      	movs	r2, #0
 8003f50:	6062      	str	r2, [r4, #4]
 8003f52:	04d9      	lsls	r1, r3, #19
 8003f54:	6922      	ldr	r2, [r4, #16]
 8003f56:	6022      	str	r2, [r4, #0]
 8003f58:	d504      	bpl.n	8003f64 <__sflush_r+0x7c>
 8003f5a:	1c42      	adds	r2, r0, #1
 8003f5c:	d101      	bne.n	8003f62 <__sflush_r+0x7a>
 8003f5e:	682b      	ldr	r3, [r5, #0]
 8003f60:	b903      	cbnz	r3, 8003f64 <__sflush_r+0x7c>
 8003f62:	6560      	str	r0, [r4, #84]	; 0x54
 8003f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f66:	602f      	str	r7, [r5, #0]
 8003f68:	2900      	cmp	r1, #0
 8003f6a:	d0ca      	beq.n	8003f02 <__sflush_r+0x1a>
 8003f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f70:	4299      	cmp	r1, r3
 8003f72:	d002      	beq.n	8003f7a <__sflush_r+0x92>
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 f9d7 	bl	8004328 <_free_r>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8003f7e:	e7c1      	b.n	8003f04 <__sflush_r+0x1c>
 8003f80:	6a21      	ldr	r1, [r4, #32]
 8003f82:	2301      	movs	r3, #1
 8003f84:	4628      	mov	r0, r5
 8003f86:	47b0      	blx	r6
 8003f88:	1c41      	adds	r1, r0, #1
 8003f8a:	d1c7      	bne.n	8003f1c <__sflush_r+0x34>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0c4      	beq.n	8003f1c <__sflush_r+0x34>
 8003f92:	2b1d      	cmp	r3, #29
 8003f94:	d001      	beq.n	8003f9a <__sflush_r+0xb2>
 8003f96:	2b16      	cmp	r3, #22
 8003f98:	d101      	bne.n	8003f9e <__sflush_r+0xb6>
 8003f9a:	602f      	str	r7, [r5, #0]
 8003f9c:	e7b1      	b.n	8003f02 <__sflush_r+0x1a>
 8003f9e:	89a3      	ldrh	r3, [r4, #12]
 8003fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	e7ad      	b.n	8003f04 <__sflush_r+0x1c>
 8003fa8:	690f      	ldr	r7, [r1, #16]
 8003faa:	2f00      	cmp	r7, #0
 8003fac:	d0a9      	beq.n	8003f02 <__sflush_r+0x1a>
 8003fae:	0793      	lsls	r3, r2, #30
 8003fb0:	680e      	ldr	r6, [r1, #0]
 8003fb2:	bf08      	it	eq
 8003fb4:	694b      	ldreq	r3, [r1, #20]
 8003fb6:	600f      	str	r7, [r1, #0]
 8003fb8:	bf18      	it	ne
 8003fba:	2300      	movne	r3, #0
 8003fbc:	eba6 0807 	sub.w	r8, r6, r7
 8003fc0:	608b      	str	r3, [r1, #8]
 8003fc2:	f1b8 0f00 	cmp.w	r8, #0
 8003fc6:	dd9c      	ble.n	8003f02 <__sflush_r+0x1a>
 8003fc8:	6a21      	ldr	r1, [r4, #32]
 8003fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fcc:	4643      	mov	r3, r8
 8003fce:	463a      	mov	r2, r7
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	47b0      	blx	r6
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	dc06      	bgt.n	8003fe6 <__sflush_r+0xfe>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fde:	81a3      	strh	r3, [r4, #12]
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	e78e      	b.n	8003f04 <__sflush_r+0x1c>
 8003fe6:	4407      	add	r7, r0
 8003fe8:	eba8 0800 	sub.w	r8, r8, r0
 8003fec:	e7e9      	b.n	8003fc2 <__sflush_r+0xda>
 8003fee:	bf00      	nop
 8003ff0:	20400001 	.word	0x20400001

08003ff4 <_fflush_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	690b      	ldr	r3, [r1, #16]
 8003ff8:	4605      	mov	r5, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	b913      	cbnz	r3, 8004004 <_fflush_r+0x10>
 8003ffe:	2500      	movs	r5, #0
 8004000:	4628      	mov	r0, r5
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	b118      	cbz	r0, 800400e <_fflush_r+0x1a>
 8004006:	6983      	ldr	r3, [r0, #24]
 8004008:	b90b      	cbnz	r3, 800400e <_fflush_r+0x1a>
 800400a:	f000 f887 	bl	800411c <__sinit>
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <_fflush_r+0x6c>)
 8004010:	429c      	cmp	r4, r3
 8004012:	d11b      	bne.n	800404c <_fflush_r+0x58>
 8004014:	686c      	ldr	r4, [r5, #4]
 8004016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ef      	beq.n	8003ffe <_fflush_r+0xa>
 800401e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004020:	07d0      	lsls	r0, r2, #31
 8004022:	d404      	bmi.n	800402e <_fflush_r+0x3a>
 8004024:	0599      	lsls	r1, r3, #22
 8004026:	d402      	bmi.n	800402e <_fflush_r+0x3a>
 8004028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402a:	f000 f915 	bl	8004258 <__retarget_lock_acquire_recursive>
 800402e:	4628      	mov	r0, r5
 8004030:	4621      	mov	r1, r4
 8004032:	f7ff ff59 	bl	8003ee8 <__sflush_r>
 8004036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004038:	07da      	lsls	r2, r3, #31
 800403a:	4605      	mov	r5, r0
 800403c:	d4e0      	bmi.n	8004000 <_fflush_r+0xc>
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	059b      	lsls	r3, r3, #22
 8004042:	d4dd      	bmi.n	8004000 <_fflush_r+0xc>
 8004044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004046:	f000 f908 	bl	800425a <__retarget_lock_release_recursive>
 800404a:	e7d9      	b.n	8004000 <_fflush_r+0xc>
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <_fflush_r+0x70>)
 800404e:	429c      	cmp	r4, r3
 8004050:	d101      	bne.n	8004056 <_fflush_r+0x62>
 8004052:	68ac      	ldr	r4, [r5, #8]
 8004054:	e7df      	b.n	8004016 <_fflush_r+0x22>
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <_fflush_r+0x74>)
 8004058:	429c      	cmp	r4, r3
 800405a:	bf08      	it	eq
 800405c:	68ec      	ldreq	r4, [r5, #12]
 800405e:	e7da      	b.n	8004016 <_fflush_r+0x22>
 8004060:	08004cd8 	.word	0x08004cd8
 8004064:	08004cf8 	.word	0x08004cf8
 8004068:	08004cb8 	.word	0x08004cb8

0800406c <std>:
 800406c:	2300      	movs	r3, #0
 800406e:	b510      	push	{r4, lr}
 8004070:	4604      	mov	r4, r0
 8004072:	e9c0 3300 	strd	r3, r3, [r0]
 8004076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800407a:	6083      	str	r3, [r0, #8]
 800407c:	8181      	strh	r1, [r0, #12]
 800407e:	6643      	str	r3, [r0, #100]	; 0x64
 8004080:	81c2      	strh	r2, [r0, #14]
 8004082:	6183      	str	r3, [r0, #24]
 8004084:	4619      	mov	r1, r3
 8004086:	2208      	movs	r2, #8
 8004088:	305c      	adds	r0, #92	; 0x5c
 800408a:	f7ff fdd7 	bl	8003c3c <memset>
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <std+0x38>)
 8004090:	6263      	str	r3, [r4, #36]	; 0x24
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <std+0x3c>)
 8004094:	62a3      	str	r3, [r4, #40]	; 0x28
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <std+0x40>)
 8004098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <std+0x44>)
 800409c:	6224      	str	r4, [r4, #32]
 800409e:	6323      	str	r3, [r4, #48]	; 0x30
 80040a0:	bd10      	pop	{r4, pc}
 80040a2:	bf00      	nop
 80040a4:	08004ae5 	.word	0x08004ae5
 80040a8:	08004b07 	.word	0x08004b07
 80040ac:	08004b3f 	.word	0x08004b3f
 80040b0:	08004b63 	.word	0x08004b63

080040b4 <_cleanup_r>:
 80040b4:	4901      	ldr	r1, [pc, #4]	; (80040bc <_cleanup_r+0x8>)
 80040b6:	f000 b8af 	b.w	8004218 <_fwalk_reent>
 80040ba:	bf00      	nop
 80040bc:	08003ff5 	.word	0x08003ff5

080040c0 <__sfmoreglue>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	2268      	movs	r2, #104	; 0x68
 80040c4:	1e4d      	subs	r5, r1, #1
 80040c6:	4355      	muls	r5, r2
 80040c8:	460e      	mov	r6, r1
 80040ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040ce:	f000 f997 	bl	8004400 <_malloc_r>
 80040d2:	4604      	mov	r4, r0
 80040d4:	b140      	cbz	r0, 80040e8 <__sfmoreglue+0x28>
 80040d6:	2100      	movs	r1, #0
 80040d8:	e9c0 1600 	strd	r1, r6, [r0]
 80040dc:	300c      	adds	r0, #12
 80040de:	60a0      	str	r0, [r4, #8]
 80040e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040e4:	f7ff fdaa 	bl	8003c3c <memset>
 80040e8:	4620      	mov	r0, r4
 80040ea:	bd70      	pop	{r4, r5, r6, pc}

080040ec <__sfp_lock_acquire>:
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <__sfp_lock_acquire+0x8>)
 80040ee:	f000 b8b3 	b.w	8004258 <__retarget_lock_acquire_recursive>
 80040f2:	bf00      	nop
 80040f4:	20000121 	.word	0x20000121

080040f8 <__sfp_lock_release>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__sfp_lock_release+0x8>)
 80040fa:	f000 b8ae 	b.w	800425a <__retarget_lock_release_recursive>
 80040fe:	bf00      	nop
 8004100:	20000121 	.word	0x20000121

08004104 <__sinit_lock_acquire>:
 8004104:	4801      	ldr	r0, [pc, #4]	; (800410c <__sinit_lock_acquire+0x8>)
 8004106:	f000 b8a7 	b.w	8004258 <__retarget_lock_acquire_recursive>
 800410a:	bf00      	nop
 800410c:	20000122 	.word	0x20000122

08004110 <__sinit_lock_release>:
 8004110:	4801      	ldr	r0, [pc, #4]	; (8004118 <__sinit_lock_release+0x8>)
 8004112:	f000 b8a2 	b.w	800425a <__retarget_lock_release_recursive>
 8004116:	bf00      	nop
 8004118:	20000122 	.word	0x20000122

0800411c <__sinit>:
 800411c:	b510      	push	{r4, lr}
 800411e:	4604      	mov	r4, r0
 8004120:	f7ff fff0 	bl	8004104 <__sinit_lock_acquire>
 8004124:	69a3      	ldr	r3, [r4, #24]
 8004126:	b11b      	cbz	r3, 8004130 <__sinit+0x14>
 8004128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800412c:	f7ff bff0 	b.w	8004110 <__sinit_lock_release>
 8004130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004134:	6523      	str	r3, [r4, #80]	; 0x50
 8004136:	4b13      	ldr	r3, [pc, #76]	; (8004184 <__sinit+0x68>)
 8004138:	4a13      	ldr	r2, [pc, #76]	; (8004188 <__sinit+0x6c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	62a2      	str	r2, [r4, #40]	; 0x28
 800413e:	42a3      	cmp	r3, r4
 8004140:	bf04      	itt	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	61a3      	streq	r3, [r4, #24]
 8004146:	4620      	mov	r0, r4
 8004148:	f000 f820 	bl	800418c <__sfp>
 800414c:	6060      	str	r0, [r4, #4]
 800414e:	4620      	mov	r0, r4
 8004150:	f000 f81c 	bl	800418c <__sfp>
 8004154:	60a0      	str	r0, [r4, #8]
 8004156:	4620      	mov	r0, r4
 8004158:	f000 f818 	bl	800418c <__sfp>
 800415c:	2200      	movs	r2, #0
 800415e:	60e0      	str	r0, [r4, #12]
 8004160:	2104      	movs	r1, #4
 8004162:	6860      	ldr	r0, [r4, #4]
 8004164:	f7ff ff82 	bl	800406c <std>
 8004168:	68a0      	ldr	r0, [r4, #8]
 800416a:	2201      	movs	r2, #1
 800416c:	2109      	movs	r1, #9
 800416e:	f7ff ff7d 	bl	800406c <std>
 8004172:	68e0      	ldr	r0, [r4, #12]
 8004174:	2202      	movs	r2, #2
 8004176:	2112      	movs	r1, #18
 8004178:	f7ff ff78 	bl	800406c <std>
 800417c:	2301      	movs	r3, #1
 800417e:	61a3      	str	r3, [r4, #24]
 8004180:	e7d2      	b.n	8004128 <__sinit+0xc>
 8004182:	bf00      	nop
 8004184:	08004cb4 	.word	0x08004cb4
 8004188:	080040b5 	.word	0x080040b5

0800418c <__sfp>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	4607      	mov	r7, r0
 8004190:	f7ff ffac 	bl	80040ec <__sfp_lock_acquire>
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <__sfp+0x84>)
 8004196:	681e      	ldr	r6, [r3, #0]
 8004198:	69b3      	ldr	r3, [r6, #24]
 800419a:	b913      	cbnz	r3, 80041a2 <__sfp+0x16>
 800419c:	4630      	mov	r0, r6
 800419e:	f7ff ffbd 	bl	800411c <__sinit>
 80041a2:	3648      	adds	r6, #72	; 0x48
 80041a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	d503      	bpl.n	80041b4 <__sfp+0x28>
 80041ac:	6833      	ldr	r3, [r6, #0]
 80041ae:	b30b      	cbz	r3, 80041f4 <__sfp+0x68>
 80041b0:	6836      	ldr	r6, [r6, #0]
 80041b2:	e7f7      	b.n	80041a4 <__sfp+0x18>
 80041b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041b8:	b9d5      	cbnz	r5, 80041f0 <__sfp+0x64>
 80041ba:	4b16      	ldr	r3, [pc, #88]	; (8004214 <__sfp+0x88>)
 80041bc:	60e3      	str	r3, [r4, #12]
 80041be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041c2:	6665      	str	r5, [r4, #100]	; 0x64
 80041c4:	f000 f847 	bl	8004256 <__retarget_lock_init_recursive>
 80041c8:	f7ff ff96 	bl	80040f8 <__sfp_lock_release>
 80041cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041d4:	6025      	str	r5, [r4, #0]
 80041d6:	61a5      	str	r5, [r4, #24]
 80041d8:	2208      	movs	r2, #8
 80041da:	4629      	mov	r1, r5
 80041dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041e0:	f7ff fd2c 	bl	8003c3c <memset>
 80041e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041ec:	4620      	mov	r0, r4
 80041ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f0:	3468      	adds	r4, #104	; 0x68
 80041f2:	e7d9      	b.n	80041a8 <__sfp+0x1c>
 80041f4:	2104      	movs	r1, #4
 80041f6:	4638      	mov	r0, r7
 80041f8:	f7ff ff62 	bl	80040c0 <__sfmoreglue>
 80041fc:	4604      	mov	r4, r0
 80041fe:	6030      	str	r0, [r6, #0]
 8004200:	2800      	cmp	r0, #0
 8004202:	d1d5      	bne.n	80041b0 <__sfp+0x24>
 8004204:	f7ff ff78 	bl	80040f8 <__sfp_lock_release>
 8004208:	230c      	movs	r3, #12
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	e7ee      	b.n	80041ec <__sfp+0x60>
 800420e:	bf00      	nop
 8004210:	08004cb4 	.word	0x08004cb4
 8004214:	ffff0001 	.word	0xffff0001

08004218 <_fwalk_reent>:
 8004218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800421c:	4606      	mov	r6, r0
 800421e:	4688      	mov	r8, r1
 8004220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004224:	2700      	movs	r7, #0
 8004226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800422a:	f1b9 0901 	subs.w	r9, r9, #1
 800422e:	d505      	bpl.n	800423c <_fwalk_reent+0x24>
 8004230:	6824      	ldr	r4, [r4, #0]
 8004232:	2c00      	cmp	r4, #0
 8004234:	d1f7      	bne.n	8004226 <_fwalk_reent+0xe>
 8004236:	4638      	mov	r0, r7
 8004238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800423c:	89ab      	ldrh	r3, [r5, #12]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d907      	bls.n	8004252 <_fwalk_reent+0x3a>
 8004242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004246:	3301      	adds	r3, #1
 8004248:	d003      	beq.n	8004252 <_fwalk_reent+0x3a>
 800424a:	4629      	mov	r1, r5
 800424c:	4630      	mov	r0, r6
 800424e:	47c0      	blx	r8
 8004250:	4307      	orrs	r7, r0
 8004252:	3568      	adds	r5, #104	; 0x68
 8004254:	e7e9      	b.n	800422a <_fwalk_reent+0x12>

08004256 <__retarget_lock_init_recursive>:
 8004256:	4770      	bx	lr

08004258 <__retarget_lock_acquire_recursive>:
 8004258:	4770      	bx	lr

0800425a <__retarget_lock_release_recursive>:
 800425a:	4770      	bx	lr

0800425c <__swhatbuf_r>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	460e      	mov	r6, r1
 8004260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004264:	2900      	cmp	r1, #0
 8004266:	b096      	sub	sp, #88	; 0x58
 8004268:	4614      	mov	r4, r2
 800426a:	461d      	mov	r5, r3
 800426c:	da08      	bge.n	8004280 <__swhatbuf_r+0x24>
 800426e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	602a      	str	r2, [r5, #0]
 8004276:	061a      	lsls	r2, r3, #24
 8004278:	d410      	bmi.n	800429c <__swhatbuf_r+0x40>
 800427a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800427e:	e00e      	b.n	800429e <__swhatbuf_r+0x42>
 8004280:	466a      	mov	r2, sp
 8004282:	f000 fc95 	bl	8004bb0 <_fstat_r>
 8004286:	2800      	cmp	r0, #0
 8004288:	dbf1      	blt.n	800426e <__swhatbuf_r+0x12>
 800428a:	9a01      	ldr	r2, [sp, #4]
 800428c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004294:	425a      	negs	r2, r3
 8004296:	415a      	adcs	r2, r3
 8004298:	602a      	str	r2, [r5, #0]
 800429a:	e7ee      	b.n	800427a <__swhatbuf_r+0x1e>
 800429c:	2340      	movs	r3, #64	; 0x40
 800429e:	2000      	movs	r0, #0
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	b016      	add	sp, #88	; 0x58
 80042a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080042a8 <__smakebuf_r>:
 80042a8:	898b      	ldrh	r3, [r1, #12]
 80042aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042ac:	079d      	lsls	r5, r3, #30
 80042ae:	4606      	mov	r6, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	d507      	bpl.n	80042c4 <__smakebuf_r+0x1c>
 80042b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	6123      	str	r3, [r4, #16]
 80042bc:	2301      	movs	r3, #1
 80042be:	6163      	str	r3, [r4, #20]
 80042c0:	b002      	add	sp, #8
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	ab01      	add	r3, sp, #4
 80042c6:	466a      	mov	r2, sp
 80042c8:	f7ff ffc8 	bl	800425c <__swhatbuf_r>
 80042cc:	9900      	ldr	r1, [sp, #0]
 80042ce:	4605      	mov	r5, r0
 80042d0:	4630      	mov	r0, r6
 80042d2:	f000 f895 	bl	8004400 <_malloc_r>
 80042d6:	b948      	cbnz	r0, 80042ec <__smakebuf_r+0x44>
 80042d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042dc:	059a      	lsls	r2, r3, #22
 80042de:	d4ef      	bmi.n	80042c0 <__smakebuf_r+0x18>
 80042e0:	f023 0303 	bic.w	r3, r3, #3
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	e7e3      	b.n	80042b4 <__smakebuf_r+0xc>
 80042ec:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <__smakebuf_r+0x7c>)
 80042ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	6020      	str	r0, [r4, #0]
 80042f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	9b00      	ldr	r3, [sp, #0]
 80042fc:	6163      	str	r3, [r4, #20]
 80042fe:	9b01      	ldr	r3, [sp, #4]
 8004300:	6120      	str	r0, [r4, #16]
 8004302:	b15b      	cbz	r3, 800431c <__smakebuf_r+0x74>
 8004304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004308:	4630      	mov	r0, r6
 800430a:	f000 fc63 	bl	8004bd4 <_isatty_r>
 800430e:	b128      	cbz	r0, 800431c <__smakebuf_r+0x74>
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f023 0303 	bic.w	r3, r3, #3
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	81a3      	strh	r3, [r4, #12]
 800431c:	89a0      	ldrh	r0, [r4, #12]
 800431e:	4305      	orrs	r5, r0
 8004320:	81a5      	strh	r5, [r4, #12]
 8004322:	e7cd      	b.n	80042c0 <__smakebuf_r+0x18>
 8004324:	080040b5 	.word	0x080040b5

08004328 <_free_r>:
 8004328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800432a:	2900      	cmp	r1, #0
 800432c:	d044      	beq.n	80043b8 <_free_r+0x90>
 800432e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004332:	9001      	str	r0, [sp, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	f1a1 0404 	sub.w	r4, r1, #4
 800433a:	bfb8      	it	lt
 800433c:	18e4      	addlt	r4, r4, r3
 800433e:	f000 fc6b 	bl	8004c18 <__malloc_lock>
 8004342:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <_free_r+0x94>)
 8004344:	9801      	ldr	r0, [sp, #4]
 8004346:	6813      	ldr	r3, [r2, #0]
 8004348:	b933      	cbnz	r3, 8004358 <_free_r+0x30>
 800434a:	6063      	str	r3, [r4, #4]
 800434c:	6014      	str	r4, [r2, #0]
 800434e:	b003      	add	sp, #12
 8004350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004354:	f000 bc66 	b.w	8004c24 <__malloc_unlock>
 8004358:	42a3      	cmp	r3, r4
 800435a:	d908      	bls.n	800436e <_free_r+0x46>
 800435c:	6825      	ldr	r5, [r4, #0]
 800435e:	1961      	adds	r1, r4, r5
 8004360:	428b      	cmp	r3, r1
 8004362:	bf01      	itttt	eq
 8004364:	6819      	ldreq	r1, [r3, #0]
 8004366:	685b      	ldreq	r3, [r3, #4]
 8004368:	1949      	addeq	r1, r1, r5
 800436a:	6021      	streq	r1, [r4, #0]
 800436c:	e7ed      	b.n	800434a <_free_r+0x22>
 800436e:	461a      	mov	r2, r3
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	b10b      	cbz	r3, 8004378 <_free_r+0x50>
 8004374:	42a3      	cmp	r3, r4
 8004376:	d9fa      	bls.n	800436e <_free_r+0x46>
 8004378:	6811      	ldr	r1, [r2, #0]
 800437a:	1855      	adds	r5, r2, r1
 800437c:	42a5      	cmp	r5, r4
 800437e:	d10b      	bne.n	8004398 <_free_r+0x70>
 8004380:	6824      	ldr	r4, [r4, #0]
 8004382:	4421      	add	r1, r4
 8004384:	1854      	adds	r4, r2, r1
 8004386:	42a3      	cmp	r3, r4
 8004388:	6011      	str	r1, [r2, #0]
 800438a:	d1e0      	bne.n	800434e <_free_r+0x26>
 800438c:	681c      	ldr	r4, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	6053      	str	r3, [r2, #4]
 8004392:	4421      	add	r1, r4
 8004394:	6011      	str	r1, [r2, #0]
 8004396:	e7da      	b.n	800434e <_free_r+0x26>
 8004398:	d902      	bls.n	80043a0 <_free_r+0x78>
 800439a:	230c      	movs	r3, #12
 800439c:	6003      	str	r3, [r0, #0]
 800439e:	e7d6      	b.n	800434e <_free_r+0x26>
 80043a0:	6825      	ldr	r5, [r4, #0]
 80043a2:	1961      	adds	r1, r4, r5
 80043a4:	428b      	cmp	r3, r1
 80043a6:	bf04      	itt	eq
 80043a8:	6819      	ldreq	r1, [r3, #0]
 80043aa:	685b      	ldreq	r3, [r3, #4]
 80043ac:	6063      	str	r3, [r4, #4]
 80043ae:	bf04      	itt	eq
 80043b0:	1949      	addeq	r1, r1, r5
 80043b2:	6021      	streq	r1, [r4, #0]
 80043b4:	6054      	str	r4, [r2, #4]
 80043b6:	e7ca      	b.n	800434e <_free_r+0x26>
 80043b8:	b003      	add	sp, #12
 80043ba:	bd30      	pop	{r4, r5, pc}
 80043bc:	20000124 	.word	0x20000124

080043c0 <sbrk_aligned>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	4e0e      	ldr	r6, [pc, #56]	; (80043fc <sbrk_aligned+0x3c>)
 80043c4:	460c      	mov	r4, r1
 80043c6:	6831      	ldr	r1, [r6, #0]
 80043c8:	4605      	mov	r5, r0
 80043ca:	b911      	cbnz	r1, 80043d2 <sbrk_aligned+0x12>
 80043cc:	f000 fb7a 	bl	8004ac4 <_sbrk_r>
 80043d0:	6030      	str	r0, [r6, #0]
 80043d2:	4621      	mov	r1, r4
 80043d4:	4628      	mov	r0, r5
 80043d6:	f000 fb75 	bl	8004ac4 <_sbrk_r>
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	d00a      	beq.n	80043f4 <sbrk_aligned+0x34>
 80043de:	1cc4      	adds	r4, r0, #3
 80043e0:	f024 0403 	bic.w	r4, r4, #3
 80043e4:	42a0      	cmp	r0, r4
 80043e6:	d007      	beq.n	80043f8 <sbrk_aligned+0x38>
 80043e8:	1a21      	subs	r1, r4, r0
 80043ea:	4628      	mov	r0, r5
 80043ec:	f000 fb6a 	bl	8004ac4 <_sbrk_r>
 80043f0:	3001      	adds	r0, #1
 80043f2:	d101      	bne.n	80043f8 <sbrk_aligned+0x38>
 80043f4:	f04f 34ff 	mov.w	r4, #4294967295
 80043f8:	4620      	mov	r0, r4
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	20000128 	.word	0x20000128

08004400 <_malloc_r>:
 8004400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004404:	1ccd      	adds	r5, r1, #3
 8004406:	f025 0503 	bic.w	r5, r5, #3
 800440a:	3508      	adds	r5, #8
 800440c:	2d0c      	cmp	r5, #12
 800440e:	bf38      	it	cc
 8004410:	250c      	movcc	r5, #12
 8004412:	2d00      	cmp	r5, #0
 8004414:	4607      	mov	r7, r0
 8004416:	db01      	blt.n	800441c <_malloc_r+0x1c>
 8004418:	42a9      	cmp	r1, r5
 800441a:	d905      	bls.n	8004428 <_malloc_r+0x28>
 800441c:	230c      	movs	r3, #12
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	2600      	movs	r6, #0
 8004422:	4630      	mov	r0, r6
 8004424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004428:	4e2e      	ldr	r6, [pc, #184]	; (80044e4 <_malloc_r+0xe4>)
 800442a:	f000 fbf5 	bl	8004c18 <__malloc_lock>
 800442e:	6833      	ldr	r3, [r6, #0]
 8004430:	461c      	mov	r4, r3
 8004432:	bb34      	cbnz	r4, 8004482 <_malloc_r+0x82>
 8004434:	4629      	mov	r1, r5
 8004436:	4638      	mov	r0, r7
 8004438:	f7ff ffc2 	bl	80043c0 <sbrk_aligned>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	4604      	mov	r4, r0
 8004440:	d14d      	bne.n	80044de <_malloc_r+0xde>
 8004442:	6834      	ldr	r4, [r6, #0]
 8004444:	4626      	mov	r6, r4
 8004446:	2e00      	cmp	r6, #0
 8004448:	d140      	bne.n	80044cc <_malloc_r+0xcc>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	4631      	mov	r1, r6
 800444e:	4638      	mov	r0, r7
 8004450:	eb04 0803 	add.w	r8, r4, r3
 8004454:	f000 fb36 	bl	8004ac4 <_sbrk_r>
 8004458:	4580      	cmp	r8, r0
 800445a:	d13a      	bne.n	80044d2 <_malloc_r+0xd2>
 800445c:	6821      	ldr	r1, [r4, #0]
 800445e:	3503      	adds	r5, #3
 8004460:	1a6d      	subs	r5, r5, r1
 8004462:	f025 0503 	bic.w	r5, r5, #3
 8004466:	3508      	adds	r5, #8
 8004468:	2d0c      	cmp	r5, #12
 800446a:	bf38      	it	cc
 800446c:	250c      	movcc	r5, #12
 800446e:	4629      	mov	r1, r5
 8004470:	4638      	mov	r0, r7
 8004472:	f7ff ffa5 	bl	80043c0 <sbrk_aligned>
 8004476:	3001      	adds	r0, #1
 8004478:	d02b      	beq.n	80044d2 <_malloc_r+0xd2>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	442b      	add	r3, r5
 800447e:	6023      	str	r3, [r4, #0]
 8004480:	e00e      	b.n	80044a0 <_malloc_r+0xa0>
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	1b52      	subs	r2, r2, r5
 8004486:	d41e      	bmi.n	80044c6 <_malloc_r+0xc6>
 8004488:	2a0b      	cmp	r2, #11
 800448a:	d916      	bls.n	80044ba <_malloc_r+0xba>
 800448c:	1961      	adds	r1, r4, r5
 800448e:	42a3      	cmp	r3, r4
 8004490:	6025      	str	r5, [r4, #0]
 8004492:	bf18      	it	ne
 8004494:	6059      	strne	r1, [r3, #4]
 8004496:	6863      	ldr	r3, [r4, #4]
 8004498:	bf08      	it	eq
 800449a:	6031      	streq	r1, [r6, #0]
 800449c:	5162      	str	r2, [r4, r5]
 800449e:	604b      	str	r3, [r1, #4]
 80044a0:	4638      	mov	r0, r7
 80044a2:	f104 060b 	add.w	r6, r4, #11
 80044a6:	f000 fbbd 	bl	8004c24 <__malloc_unlock>
 80044aa:	f026 0607 	bic.w	r6, r6, #7
 80044ae:	1d23      	adds	r3, r4, #4
 80044b0:	1af2      	subs	r2, r6, r3
 80044b2:	d0b6      	beq.n	8004422 <_malloc_r+0x22>
 80044b4:	1b9b      	subs	r3, r3, r6
 80044b6:	50a3      	str	r3, [r4, r2]
 80044b8:	e7b3      	b.n	8004422 <_malloc_r+0x22>
 80044ba:	6862      	ldr	r2, [r4, #4]
 80044bc:	42a3      	cmp	r3, r4
 80044be:	bf0c      	ite	eq
 80044c0:	6032      	streq	r2, [r6, #0]
 80044c2:	605a      	strne	r2, [r3, #4]
 80044c4:	e7ec      	b.n	80044a0 <_malloc_r+0xa0>
 80044c6:	4623      	mov	r3, r4
 80044c8:	6864      	ldr	r4, [r4, #4]
 80044ca:	e7b2      	b.n	8004432 <_malloc_r+0x32>
 80044cc:	4634      	mov	r4, r6
 80044ce:	6876      	ldr	r6, [r6, #4]
 80044d0:	e7b9      	b.n	8004446 <_malloc_r+0x46>
 80044d2:	230c      	movs	r3, #12
 80044d4:	603b      	str	r3, [r7, #0]
 80044d6:	4638      	mov	r0, r7
 80044d8:	f000 fba4 	bl	8004c24 <__malloc_unlock>
 80044dc:	e7a1      	b.n	8004422 <_malloc_r+0x22>
 80044de:	6025      	str	r5, [r4, #0]
 80044e0:	e7de      	b.n	80044a0 <_malloc_r+0xa0>
 80044e2:	bf00      	nop
 80044e4:	20000124 	.word	0x20000124

080044e8 <__sfputc_r>:
 80044e8:	6893      	ldr	r3, [r2, #8]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	b410      	push	{r4}
 80044f0:	6093      	str	r3, [r2, #8]
 80044f2:	da08      	bge.n	8004506 <__sfputc_r+0x1e>
 80044f4:	6994      	ldr	r4, [r2, #24]
 80044f6:	42a3      	cmp	r3, r4
 80044f8:	db01      	blt.n	80044fe <__sfputc_r+0x16>
 80044fa:	290a      	cmp	r1, #10
 80044fc:	d103      	bne.n	8004506 <__sfputc_r+0x1e>
 80044fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004502:	f7ff bc31 	b.w	8003d68 <__swbuf_r>
 8004506:	6813      	ldr	r3, [r2, #0]
 8004508:	1c58      	adds	r0, r3, #1
 800450a:	6010      	str	r0, [r2, #0]
 800450c:	7019      	strb	r1, [r3, #0]
 800450e:	4608      	mov	r0, r1
 8004510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004514:	4770      	bx	lr

08004516 <__sfputs_r>:
 8004516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004518:	4606      	mov	r6, r0
 800451a:	460f      	mov	r7, r1
 800451c:	4614      	mov	r4, r2
 800451e:	18d5      	adds	r5, r2, r3
 8004520:	42ac      	cmp	r4, r5
 8004522:	d101      	bne.n	8004528 <__sfputs_r+0x12>
 8004524:	2000      	movs	r0, #0
 8004526:	e007      	b.n	8004538 <__sfputs_r+0x22>
 8004528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800452c:	463a      	mov	r2, r7
 800452e:	4630      	mov	r0, r6
 8004530:	f7ff ffda 	bl	80044e8 <__sfputc_r>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d1f3      	bne.n	8004520 <__sfputs_r+0xa>
 8004538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800453c <_vfiprintf_r>:
 800453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	460d      	mov	r5, r1
 8004542:	b09d      	sub	sp, #116	; 0x74
 8004544:	4614      	mov	r4, r2
 8004546:	4698      	mov	r8, r3
 8004548:	4606      	mov	r6, r0
 800454a:	b118      	cbz	r0, 8004554 <_vfiprintf_r+0x18>
 800454c:	6983      	ldr	r3, [r0, #24]
 800454e:	b90b      	cbnz	r3, 8004554 <_vfiprintf_r+0x18>
 8004550:	f7ff fde4 	bl	800411c <__sinit>
 8004554:	4b89      	ldr	r3, [pc, #548]	; (800477c <_vfiprintf_r+0x240>)
 8004556:	429d      	cmp	r5, r3
 8004558:	d11b      	bne.n	8004592 <_vfiprintf_r+0x56>
 800455a:	6875      	ldr	r5, [r6, #4]
 800455c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800455e:	07d9      	lsls	r1, r3, #31
 8004560:	d405      	bmi.n	800456e <_vfiprintf_r+0x32>
 8004562:	89ab      	ldrh	r3, [r5, #12]
 8004564:	059a      	lsls	r2, r3, #22
 8004566:	d402      	bmi.n	800456e <_vfiprintf_r+0x32>
 8004568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800456a:	f7ff fe75 	bl	8004258 <__retarget_lock_acquire_recursive>
 800456e:	89ab      	ldrh	r3, [r5, #12]
 8004570:	071b      	lsls	r3, r3, #28
 8004572:	d501      	bpl.n	8004578 <_vfiprintf_r+0x3c>
 8004574:	692b      	ldr	r3, [r5, #16]
 8004576:	b9eb      	cbnz	r3, 80045b4 <_vfiprintf_r+0x78>
 8004578:	4629      	mov	r1, r5
 800457a:	4630      	mov	r0, r6
 800457c:	f7ff fc46 	bl	8003e0c <__swsetup_r>
 8004580:	b1c0      	cbz	r0, 80045b4 <_vfiprintf_r+0x78>
 8004582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004584:	07dc      	lsls	r4, r3, #31
 8004586:	d50e      	bpl.n	80045a6 <_vfiprintf_r+0x6a>
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	b01d      	add	sp, #116	; 0x74
 800458e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004592:	4b7b      	ldr	r3, [pc, #492]	; (8004780 <_vfiprintf_r+0x244>)
 8004594:	429d      	cmp	r5, r3
 8004596:	d101      	bne.n	800459c <_vfiprintf_r+0x60>
 8004598:	68b5      	ldr	r5, [r6, #8]
 800459a:	e7df      	b.n	800455c <_vfiprintf_r+0x20>
 800459c:	4b79      	ldr	r3, [pc, #484]	; (8004784 <_vfiprintf_r+0x248>)
 800459e:	429d      	cmp	r5, r3
 80045a0:	bf08      	it	eq
 80045a2:	68f5      	ldreq	r5, [r6, #12]
 80045a4:	e7da      	b.n	800455c <_vfiprintf_r+0x20>
 80045a6:	89ab      	ldrh	r3, [r5, #12]
 80045a8:	0598      	lsls	r0, r3, #22
 80045aa:	d4ed      	bmi.n	8004588 <_vfiprintf_r+0x4c>
 80045ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045ae:	f7ff fe54 	bl	800425a <__retarget_lock_release_recursive>
 80045b2:	e7e9      	b.n	8004588 <_vfiprintf_r+0x4c>
 80045b4:	2300      	movs	r3, #0
 80045b6:	9309      	str	r3, [sp, #36]	; 0x24
 80045b8:	2320      	movs	r3, #32
 80045ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045be:	f8cd 800c 	str.w	r8, [sp, #12]
 80045c2:	2330      	movs	r3, #48	; 0x30
 80045c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004788 <_vfiprintf_r+0x24c>
 80045c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045cc:	f04f 0901 	mov.w	r9, #1
 80045d0:	4623      	mov	r3, r4
 80045d2:	469a      	mov	sl, r3
 80045d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045d8:	b10a      	cbz	r2, 80045de <_vfiprintf_r+0xa2>
 80045da:	2a25      	cmp	r2, #37	; 0x25
 80045dc:	d1f9      	bne.n	80045d2 <_vfiprintf_r+0x96>
 80045de:	ebba 0b04 	subs.w	fp, sl, r4
 80045e2:	d00b      	beq.n	80045fc <_vfiprintf_r+0xc0>
 80045e4:	465b      	mov	r3, fp
 80045e6:	4622      	mov	r2, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	4630      	mov	r0, r6
 80045ec:	f7ff ff93 	bl	8004516 <__sfputs_r>
 80045f0:	3001      	adds	r0, #1
 80045f2:	f000 80aa 	beq.w	800474a <_vfiprintf_r+0x20e>
 80045f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045f8:	445a      	add	r2, fp
 80045fa:	9209      	str	r2, [sp, #36]	; 0x24
 80045fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80a2 	beq.w	800474a <_vfiprintf_r+0x20e>
 8004606:	2300      	movs	r3, #0
 8004608:	f04f 32ff 	mov.w	r2, #4294967295
 800460c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004610:	f10a 0a01 	add.w	sl, sl, #1
 8004614:	9304      	str	r3, [sp, #16]
 8004616:	9307      	str	r3, [sp, #28]
 8004618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800461c:	931a      	str	r3, [sp, #104]	; 0x68
 800461e:	4654      	mov	r4, sl
 8004620:	2205      	movs	r2, #5
 8004622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004626:	4858      	ldr	r0, [pc, #352]	; (8004788 <_vfiprintf_r+0x24c>)
 8004628:	f7fb fdd2 	bl	80001d0 <memchr>
 800462c:	9a04      	ldr	r2, [sp, #16]
 800462e:	b9d8      	cbnz	r0, 8004668 <_vfiprintf_r+0x12c>
 8004630:	06d1      	lsls	r1, r2, #27
 8004632:	bf44      	itt	mi
 8004634:	2320      	movmi	r3, #32
 8004636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800463a:	0713      	lsls	r3, r2, #28
 800463c:	bf44      	itt	mi
 800463e:	232b      	movmi	r3, #43	; 0x2b
 8004640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004644:	f89a 3000 	ldrb.w	r3, [sl]
 8004648:	2b2a      	cmp	r3, #42	; 0x2a
 800464a:	d015      	beq.n	8004678 <_vfiprintf_r+0x13c>
 800464c:	9a07      	ldr	r2, [sp, #28]
 800464e:	4654      	mov	r4, sl
 8004650:	2000      	movs	r0, #0
 8004652:	f04f 0c0a 	mov.w	ip, #10
 8004656:	4621      	mov	r1, r4
 8004658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800465c:	3b30      	subs	r3, #48	; 0x30
 800465e:	2b09      	cmp	r3, #9
 8004660:	d94e      	bls.n	8004700 <_vfiprintf_r+0x1c4>
 8004662:	b1b0      	cbz	r0, 8004692 <_vfiprintf_r+0x156>
 8004664:	9207      	str	r2, [sp, #28]
 8004666:	e014      	b.n	8004692 <_vfiprintf_r+0x156>
 8004668:	eba0 0308 	sub.w	r3, r0, r8
 800466c:	fa09 f303 	lsl.w	r3, r9, r3
 8004670:	4313      	orrs	r3, r2
 8004672:	9304      	str	r3, [sp, #16]
 8004674:	46a2      	mov	sl, r4
 8004676:	e7d2      	b.n	800461e <_vfiprintf_r+0xe2>
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	1d19      	adds	r1, r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	9103      	str	r1, [sp, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	bfbb      	ittet	lt
 8004684:	425b      	neglt	r3, r3
 8004686:	f042 0202 	orrlt.w	r2, r2, #2
 800468a:	9307      	strge	r3, [sp, #28]
 800468c:	9307      	strlt	r3, [sp, #28]
 800468e:	bfb8      	it	lt
 8004690:	9204      	strlt	r2, [sp, #16]
 8004692:	7823      	ldrb	r3, [r4, #0]
 8004694:	2b2e      	cmp	r3, #46	; 0x2e
 8004696:	d10c      	bne.n	80046b2 <_vfiprintf_r+0x176>
 8004698:	7863      	ldrb	r3, [r4, #1]
 800469a:	2b2a      	cmp	r3, #42	; 0x2a
 800469c:	d135      	bne.n	800470a <_vfiprintf_r+0x1ce>
 800469e:	9b03      	ldr	r3, [sp, #12]
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	9203      	str	r2, [sp, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bfb8      	it	lt
 80046aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80046ae:	3402      	adds	r4, #2
 80046b0:	9305      	str	r3, [sp, #20]
 80046b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004798 <_vfiprintf_r+0x25c>
 80046b6:	7821      	ldrb	r1, [r4, #0]
 80046b8:	2203      	movs	r2, #3
 80046ba:	4650      	mov	r0, sl
 80046bc:	f7fb fd88 	bl	80001d0 <memchr>
 80046c0:	b140      	cbz	r0, 80046d4 <_vfiprintf_r+0x198>
 80046c2:	2340      	movs	r3, #64	; 0x40
 80046c4:	eba0 000a 	sub.w	r0, r0, sl
 80046c8:	fa03 f000 	lsl.w	r0, r3, r0
 80046cc:	9b04      	ldr	r3, [sp, #16]
 80046ce:	4303      	orrs	r3, r0
 80046d0:	3401      	adds	r4, #1
 80046d2:	9304      	str	r3, [sp, #16]
 80046d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d8:	482c      	ldr	r0, [pc, #176]	; (800478c <_vfiprintf_r+0x250>)
 80046da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046de:	2206      	movs	r2, #6
 80046e0:	f7fb fd76 	bl	80001d0 <memchr>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d03f      	beq.n	8004768 <_vfiprintf_r+0x22c>
 80046e8:	4b29      	ldr	r3, [pc, #164]	; (8004790 <_vfiprintf_r+0x254>)
 80046ea:	bb1b      	cbnz	r3, 8004734 <_vfiprintf_r+0x1f8>
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	3307      	adds	r3, #7
 80046f0:	f023 0307 	bic.w	r3, r3, #7
 80046f4:	3308      	adds	r3, #8
 80046f6:	9303      	str	r3, [sp, #12]
 80046f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046fa:	443b      	add	r3, r7
 80046fc:	9309      	str	r3, [sp, #36]	; 0x24
 80046fe:	e767      	b.n	80045d0 <_vfiprintf_r+0x94>
 8004700:	fb0c 3202 	mla	r2, ip, r2, r3
 8004704:	460c      	mov	r4, r1
 8004706:	2001      	movs	r0, #1
 8004708:	e7a5      	b.n	8004656 <_vfiprintf_r+0x11a>
 800470a:	2300      	movs	r3, #0
 800470c:	3401      	adds	r4, #1
 800470e:	9305      	str	r3, [sp, #20]
 8004710:	4619      	mov	r1, r3
 8004712:	f04f 0c0a 	mov.w	ip, #10
 8004716:	4620      	mov	r0, r4
 8004718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800471c:	3a30      	subs	r2, #48	; 0x30
 800471e:	2a09      	cmp	r2, #9
 8004720:	d903      	bls.n	800472a <_vfiprintf_r+0x1ee>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0c5      	beq.n	80046b2 <_vfiprintf_r+0x176>
 8004726:	9105      	str	r1, [sp, #20]
 8004728:	e7c3      	b.n	80046b2 <_vfiprintf_r+0x176>
 800472a:	fb0c 2101 	mla	r1, ip, r1, r2
 800472e:	4604      	mov	r4, r0
 8004730:	2301      	movs	r3, #1
 8004732:	e7f0      	b.n	8004716 <_vfiprintf_r+0x1da>
 8004734:	ab03      	add	r3, sp, #12
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	462a      	mov	r2, r5
 800473a:	4b16      	ldr	r3, [pc, #88]	; (8004794 <_vfiprintf_r+0x258>)
 800473c:	a904      	add	r1, sp, #16
 800473e:	4630      	mov	r0, r6
 8004740:	f3af 8000 	nop.w
 8004744:	4607      	mov	r7, r0
 8004746:	1c78      	adds	r0, r7, #1
 8004748:	d1d6      	bne.n	80046f8 <_vfiprintf_r+0x1bc>
 800474a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800474c:	07d9      	lsls	r1, r3, #31
 800474e:	d405      	bmi.n	800475c <_vfiprintf_r+0x220>
 8004750:	89ab      	ldrh	r3, [r5, #12]
 8004752:	059a      	lsls	r2, r3, #22
 8004754:	d402      	bmi.n	800475c <_vfiprintf_r+0x220>
 8004756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004758:	f7ff fd7f 	bl	800425a <__retarget_lock_release_recursive>
 800475c:	89ab      	ldrh	r3, [r5, #12]
 800475e:	065b      	lsls	r3, r3, #25
 8004760:	f53f af12 	bmi.w	8004588 <_vfiprintf_r+0x4c>
 8004764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004766:	e711      	b.n	800458c <_vfiprintf_r+0x50>
 8004768:	ab03      	add	r3, sp, #12
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	462a      	mov	r2, r5
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <_vfiprintf_r+0x258>)
 8004770:	a904      	add	r1, sp, #16
 8004772:	4630      	mov	r0, r6
 8004774:	f000 f880 	bl	8004878 <_printf_i>
 8004778:	e7e4      	b.n	8004744 <_vfiprintf_r+0x208>
 800477a:	bf00      	nop
 800477c:	08004cd8 	.word	0x08004cd8
 8004780:	08004cf8 	.word	0x08004cf8
 8004784:	08004cb8 	.word	0x08004cb8
 8004788:	08004d18 	.word	0x08004d18
 800478c:	08004d22 	.word	0x08004d22
 8004790:	00000000 	.word	0x00000000
 8004794:	08004517 	.word	0x08004517
 8004798:	08004d1e 	.word	0x08004d1e

0800479c <_printf_common>:
 800479c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a0:	4616      	mov	r6, r2
 80047a2:	4699      	mov	r9, r3
 80047a4:	688a      	ldr	r2, [r1, #8]
 80047a6:	690b      	ldr	r3, [r1, #16]
 80047a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047ac:	4293      	cmp	r3, r2
 80047ae:	bfb8      	it	lt
 80047b0:	4613      	movlt	r3, r2
 80047b2:	6033      	str	r3, [r6, #0]
 80047b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047b8:	4607      	mov	r7, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	b10a      	cbz	r2, 80047c2 <_printf_common+0x26>
 80047be:	3301      	adds	r3, #1
 80047c0:	6033      	str	r3, [r6, #0]
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	0699      	lsls	r1, r3, #26
 80047c6:	bf42      	ittt	mi
 80047c8:	6833      	ldrmi	r3, [r6, #0]
 80047ca:	3302      	addmi	r3, #2
 80047cc:	6033      	strmi	r3, [r6, #0]
 80047ce:	6825      	ldr	r5, [r4, #0]
 80047d0:	f015 0506 	ands.w	r5, r5, #6
 80047d4:	d106      	bne.n	80047e4 <_printf_common+0x48>
 80047d6:	f104 0a19 	add.w	sl, r4, #25
 80047da:	68e3      	ldr	r3, [r4, #12]
 80047dc:	6832      	ldr	r2, [r6, #0]
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	42ab      	cmp	r3, r5
 80047e2:	dc26      	bgt.n	8004832 <_printf_common+0x96>
 80047e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047e8:	1e13      	subs	r3, r2, #0
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	bf18      	it	ne
 80047ee:	2301      	movne	r3, #1
 80047f0:	0692      	lsls	r2, r2, #26
 80047f2:	d42b      	bmi.n	800484c <_printf_common+0xb0>
 80047f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f8:	4649      	mov	r1, r9
 80047fa:	4638      	mov	r0, r7
 80047fc:	47c0      	blx	r8
 80047fe:	3001      	adds	r0, #1
 8004800:	d01e      	beq.n	8004840 <_printf_common+0xa4>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	68e5      	ldr	r5, [r4, #12]
 8004806:	6832      	ldr	r2, [r6, #0]
 8004808:	f003 0306 	and.w	r3, r3, #6
 800480c:	2b04      	cmp	r3, #4
 800480e:	bf08      	it	eq
 8004810:	1aad      	subeq	r5, r5, r2
 8004812:	68a3      	ldr	r3, [r4, #8]
 8004814:	6922      	ldr	r2, [r4, #16]
 8004816:	bf0c      	ite	eq
 8004818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800481c:	2500      	movne	r5, #0
 800481e:	4293      	cmp	r3, r2
 8004820:	bfc4      	itt	gt
 8004822:	1a9b      	subgt	r3, r3, r2
 8004824:	18ed      	addgt	r5, r5, r3
 8004826:	2600      	movs	r6, #0
 8004828:	341a      	adds	r4, #26
 800482a:	42b5      	cmp	r5, r6
 800482c:	d11a      	bne.n	8004864 <_printf_common+0xc8>
 800482e:	2000      	movs	r0, #0
 8004830:	e008      	b.n	8004844 <_printf_common+0xa8>
 8004832:	2301      	movs	r3, #1
 8004834:	4652      	mov	r2, sl
 8004836:	4649      	mov	r1, r9
 8004838:	4638      	mov	r0, r7
 800483a:	47c0      	blx	r8
 800483c:	3001      	adds	r0, #1
 800483e:	d103      	bne.n	8004848 <_printf_common+0xac>
 8004840:	f04f 30ff 	mov.w	r0, #4294967295
 8004844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004848:	3501      	adds	r5, #1
 800484a:	e7c6      	b.n	80047da <_printf_common+0x3e>
 800484c:	18e1      	adds	r1, r4, r3
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	2030      	movs	r0, #48	; 0x30
 8004852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004856:	4422      	add	r2, r4
 8004858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800485c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004860:	3302      	adds	r3, #2
 8004862:	e7c7      	b.n	80047f4 <_printf_common+0x58>
 8004864:	2301      	movs	r3, #1
 8004866:	4622      	mov	r2, r4
 8004868:	4649      	mov	r1, r9
 800486a:	4638      	mov	r0, r7
 800486c:	47c0      	blx	r8
 800486e:	3001      	adds	r0, #1
 8004870:	d0e6      	beq.n	8004840 <_printf_common+0xa4>
 8004872:	3601      	adds	r6, #1
 8004874:	e7d9      	b.n	800482a <_printf_common+0x8e>
	...

08004878 <_printf_i>:
 8004878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800487c:	7e0f      	ldrb	r7, [r1, #24]
 800487e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004880:	2f78      	cmp	r7, #120	; 0x78
 8004882:	4691      	mov	r9, r2
 8004884:	4680      	mov	r8, r0
 8004886:	460c      	mov	r4, r1
 8004888:	469a      	mov	sl, r3
 800488a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800488e:	d807      	bhi.n	80048a0 <_printf_i+0x28>
 8004890:	2f62      	cmp	r7, #98	; 0x62
 8004892:	d80a      	bhi.n	80048aa <_printf_i+0x32>
 8004894:	2f00      	cmp	r7, #0
 8004896:	f000 80d8 	beq.w	8004a4a <_printf_i+0x1d2>
 800489a:	2f58      	cmp	r7, #88	; 0x58
 800489c:	f000 80a3 	beq.w	80049e6 <_printf_i+0x16e>
 80048a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048a8:	e03a      	b.n	8004920 <_printf_i+0xa8>
 80048aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ae:	2b15      	cmp	r3, #21
 80048b0:	d8f6      	bhi.n	80048a0 <_printf_i+0x28>
 80048b2:	a101      	add	r1, pc, #4	; (adr r1, 80048b8 <_printf_i+0x40>)
 80048b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048b8:	08004911 	.word	0x08004911
 80048bc:	08004925 	.word	0x08004925
 80048c0:	080048a1 	.word	0x080048a1
 80048c4:	080048a1 	.word	0x080048a1
 80048c8:	080048a1 	.word	0x080048a1
 80048cc:	080048a1 	.word	0x080048a1
 80048d0:	08004925 	.word	0x08004925
 80048d4:	080048a1 	.word	0x080048a1
 80048d8:	080048a1 	.word	0x080048a1
 80048dc:	080048a1 	.word	0x080048a1
 80048e0:	080048a1 	.word	0x080048a1
 80048e4:	08004a31 	.word	0x08004a31
 80048e8:	08004955 	.word	0x08004955
 80048ec:	08004a13 	.word	0x08004a13
 80048f0:	080048a1 	.word	0x080048a1
 80048f4:	080048a1 	.word	0x080048a1
 80048f8:	08004a53 	.word	0x08004a53
 80048fc:	080048a1 	.word	0x080048a1
 8004900:	08004955 	.word	0x08004955
 8004904:	080048a1 	.word	0x080048a1
 8004908:	080048a1 	.word	0x080048a1
 800490c:	08004a1b 	.word	0x08004a1b
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	1d1a      	adds	r2, r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	602a      	str	r2, [r5, #0]
 8004918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800491c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004920:	2301      	movs	r3, #1
 8004922:	e0a3      	b.n	8004a6c <_printf_i+0x1f4>
 8004924:	6820      	ldr	r0, [r4, #0]
 8004926:	6829      	ldr	r1, [r5, #0]
 8004928:	0606      	lsls	r6, r0, #24
 800492a:	f101 0304 	add.w	r3, r1, #4
 800492e:	d50a      	bpl.n	8004946 <_printf_i+0xce>
 8004930:	680e      	ldr	r6, [r1, #0]
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	2e00      	cmp	r6, #0
 8004936:	da03      	bge.n	8004940 <_printf_i+0xc8>
 8004938:	232d      	movs	r3, #45	; 0x2d
 800493a:	4276      	negs	r6, r6
 800493c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004940:	485e      	ldr	r0, [pc, #376]	; (8004abc <_printf_i+0x244>)
 8004942:	230a      	movs	r3, #10
 8004944:	e019      	b.n	800497a <_printf_i+0x102>
 8004946:	680e      	ldr	r6, [r1, #0]
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800494e:	bf18      	it	ne
 8004950:	b236      	sxthne	r6, r6
 8004952:	e7ef      	b.n	8004934 <_printf_i+0xbc>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	6820      	ldr	r0, [r4, #0]
 8004958:	1d19      	adds	r1, r3, #4
 800495a:	6029      	str	r1, [r5, #0]
 800495c:	0601      	lsls	r1, r0, #24
 800495e:	d501      	bpl.n	8004964 <_printf_i+0xec>
 8004960:	681e      	ldr	r6, [r3, #0]
 8004962:	e002      	b.n	800496a <_printf_i+0xf2>
 8004964:	0646      	lsls	r6, r0, #25
 8004966:	d5fb      	bpl.n	8004960 <_printf_i+0xe8>
 8004968:	881e      	ldrh	r6, [r3, #0]
 800496a:	4854      	ldr	r0, [pc, #336]	; (8004abc <_printf_i+0x244>)
 800496c:	2f6f      	cmp	r7, #111	; 0x6f
 800496e:	bf0c      	ite	eq
 8004970:	2308      	moveq	r3, #8
 8004972:	230a      	movne	r3, #10
 8004974:	2100      	movs	r1, #0
 8004976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800497a:	6865      	ldr	r5, [r4, #4]
 800497c:	60a5      	str	r5, [r4, #8]
 800497e:	2d00      	cmp	r5, #0
 8004980:	bfa2      	ittt	ge
 8004982:	6821      	ldrge	r1, [r4, #0]
 8004984:	f021 0104 	bicge.w	r1, r1, #4
 8004988:	6021      	strge	r1, [r4, #0]
 800498a:	b90e      	cbnz	r6, 8004990 <_printf_i+0x118>
 800498c:	2d00      	cmp	r5, #0
 800498e:	d04d      	beq.n	8004a2c <_printf_i+0x1b4>
 8004990:	4615      	mov	r5, r2
 8004992:	fbb6 f1f3 	udiv	r1, r6, r3
 8004996:	fb03 6711 	mls	r7, r3, r1, r6
 800499a:	5dc7      	ldrb	r7, [r0, r7]
 800499c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049a0:	4637      	mov	r7, r6
 80049a2:	42bb      	cmp	r3, r7
 80049a4:	460e      	mov	r6, r1
 80049a6:	d9f4      	bls.n	8004992 <_printf_i+0x11a>
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d10b      	bne.n	80049c4 <_printf_i+0x14c>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	07de      	lsls	r6, r3, #31
 80049b0:	d508      	bpl.n	80049c4 <_printf_i+0x14c>
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	6861      	ldr	r1, [r4, #4]
 80049b6:	4299      	cmp	r1, r3
 80049b8:	bfde      	ittt	le
 80049ba:	2330      	movle	r3, #48	; 0x30
 80049bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049c4:	1b52      	subs	r2, r2, r5
 80049c6:	6122      	str	r2, [r4, #16]
 80049c8:	f8cd a000 	str.w	sl, [sp]
 80049cc:	464b      	mov	r3, r9
 80049ce:	aa03      	add	r2, sp, #12
 80049d0:	4621      	mov	r1, r4
 80049d2:	4640      	mov	r0, r8
 80049d4:	f7ff fee2 	bl	800479c <_printf_common>
 80049d8:	3001      	adds	r0, #1
 80049da:	d14c      	bne.n	8004a76 <_printf_i+0x1fe>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	b004      	add	sp, #16
 80049e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e6:	4835      	ldr	r0, [pc, #212]	; (8004abc <_printf_i+0x244>)
 80049e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049ec:	6829      	ldr	r1, [r5, #0]
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80049f4:	6029      	str	r1, [r5, #0]
 80049f6:	061d      	lsls	r5, r3, #24
 80049f8:	d514      	bpl.n	8004a24 <_printf_i+0x1ac>
 80049fa:	07df      	lsls	r7, r3, #31
 80049fc:	bf44      	itt	mi
 80049fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004a02:	6023      	strmi	r3, [r4, #0]
 8004a04:	b91e      	cbnz	r6, 8004a0e <_printf_i+0x196>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	f023 0320 	bic.w	r3, r3, #32
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	2310      	movs	r3, #16
 8004a10:	e7b0      	b.n	8004974 <_printf_i+0xfc>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	f043 0320 	orr.w	r3, r3, #32
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	2378      	movs	r3, #120	; 0x78
 8004a1c:	4828      	ldr	r0, [pc, #160]	; (8004ac0 <_printf_i+0x248>)
 8004a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a22:	e7e3      	b.n	80049ec <_printf_i+0x174>
 8004a24:	0659      	lsls	r1, r3, #25
 8004a26:	bf48      	it	mi
 8004a28:	b2b6      	uxthmi	r6, r6
 8004a2a:	e7e6      	b.n	80049fa <_printf_i+0x182>
 8004a2c:	4615      	mov	r5, r2
 8004a2e:	e7bb      	b.n	80049a8 <_printf_i+0x130>
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	6826      	ldr	r6, [r4, #0]
 8004a34:	6961      	ldr	r1, [r4, #20]
 8004a36:	1d18      	adds	r0, r3, #4
 8004a38:	6028      	str	r0, [r5, #0]
 8004a3a:	0635      	lsls	r5, r6, #24
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	d501      	bpl.n	8004a44 <_printf_i+0x1cc>
 8004a40:	6019      	str	r1, [r3, #0]
 8004a42:	e002      	b.n	8004a4a <_printf_i+0x1d2>
 8004a44:	0670      	lsls	r0, r6, #25
 8004a46:	d5fb      	bpl.n	8004a40 <_printf_i+0x1c8>
 8004a48:	8019      	strh	r1, [r3, #0]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6123      	str	r3, [r4, #16]
 8004a4e:	4615      	mov	r5, r2
 8004a50:	e7ba      	b.n	80049c8 <_printf_i+0x150>
 8004a52:	682b      	ldr	r3, [r5, #0]
 8004a54:	1d1a      	adds	r2, r3, #4
 8004a56:	602a      	str	r2, [r5, #0]
 8004a58:	681d      	ldr	r5, [r3, #0]
 8004a5a:	6862      	ldr	r2, [r4, #4]
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f7fb fbb6 	bl	80001d0 <memchr>
 8004a64:	b108      	cbz	r0, 8004a6a <_printf_i+0x1f2>
 8004a66:	1b40      	subs	r0, r0, r5
 8004a68:	6060      	str	r0, [r4, #4]
 8004a6a:	6863      	ldr	r3, [r4, #4]
 8004a6c:	6123      	str	r3, [r4, #16]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a74:	e7a8      	b.n	80049c8 <_printf_i+0x150>
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	462a      	mov	r2, r5
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	47d0      	blx	sl
 8004a80:	3001      	adds	r0, #1
 8004a82:	d0ab      	beq.n	80049dc <_printf_i+0x164>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	079b      	lsls	r3, r3, #30
 8004a88:	d413      	bmi.n	8004ab2 <_printf_i+0x23a>
 8004a8a:	68e0      	ldr	r0, [r4, #12]
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	4298      	cmp	r0, r3
 8004a90:	bfb8      	it	lt
 8004a92:	4618      	movlt	r0, r3
 8004a94:	e7a4      	b.n	80049e0 <_printf_i+0x168>
 8004a96:	2301      	movs	r3, #1
 8004a98:	4632      	mov	r2, r6
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	4640      	mov	r0, r8
 8004a9e:	47d0      	blx	sl
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d09b      	beq.n	80049dc <_printf_i+0x164>
 8004aa4:	3501      	adds	r5, #1
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	9903      	ldr	r1, [sp, #12]
 8004aaa:	1a5b      	subs	r3, r3, r1
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	dcf2      	bgt.n	8004a96 <_printf_i+0x21e>
 8004ab0:	e7eb      	b.n	8004a8a <_printf_i+0x212>
 8004ab2:	2500      	movs	r5, #0
 8004ab4:	f104 0619 	add.w	r6, r4, #25
 8004ab8:	e7f5      	b.n	8004aa6 <_printf_i+0x22e>
 8004aba:	bf00      	nop
 8004abc:	08004d29 	.word	0x08004d29
 8004ac0:	08004d3a 	.word	0x08004d3a

08004ac4 <_sbrk_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4d06      	ldr	r5, [pc, #24]	; (8004ae0 <_sbrk_r+0x1c>)
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4604      	mov	r4, r0
 8004acc:	4608      	mov	r0, r1
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	f7fb ff70 	bl	80009b4 <_sbrk>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_sbrk_r+0x1a>
 8004ad8:	682b      	ldr	r3, [r5, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_sbrk_r+0x1a>
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	2000012c 	.word	0x2000012c

08004ae4 <__sread>:
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aec:	f000 f8a0 	bl	8004c30 <_read_r>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	bfab      	itete	ge
 8004af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004af6:	89a3      	ldrhlt	r3, [r4, #12]
 8004af8:	181b      	addge	r3, r3, r0
 8004afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004afe:	bfac      	ite	ge
 8004b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b02:	81a3      	strhlt	r3, [r4, #12]
 8004b04:	bd10      	pop	{r4, pc}

08004b06 <__swrite>:
 8004b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0a:	461f      	mov	r7, r3
 8004b0c:	898b      	ldrh	r3, [r1, #12]
 8004b0e:	05db      	lsls	r3, r3, #23
 8004b10:	4605      	mov	r5, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	4616      	mov	r6, r2
 8004b16:	d505      	bpl.n	8004b24 <__swrite+0x1e>
 8004b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f000 f868 	bl	8004bf4 <_lseek_r>
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	4632      	mov	r2, r6
 8004b32:	463b      	mov	r3, r7
 8004b34:	4628      	mov	r0, r5
 8004b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3a:	f000 b817 	b.w	8004b6c <_write_r>

08004b3e <__sseek>:
 8004b3e:	b510      	push	{r4, lr}
 8004b40:	460c      	mov	r4, r1
 8004b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b46:	f000 f855 	bl	8004bf4 <_lseek_r>
 8004b4a:	1c43      	adds	r3, r0, #1
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	bf15      	itete	ne
 8004b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b5a:	81a3      	strheq	r3, [r4, #12]
 8004b5c:	bf18      	it	ne
 8004b5e:	81a3      	strhne	r3, [r4, #12]
 8004b60:	bd10      	pop	{r4, pc}

08004b62 <__sclose>:
 8004b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b66:	f000 b813 	b.w	8004b90 <_close_r>
	...

08004b6c <_write_r>:
 8004b6c:	b538      	push	{r3, r4, r5, lr}
 8004b6e:	4d07      	ldr	r5, [pc, #28]	; (8004b8c <_write_r+0x20>)
 8004b70:	4604      	mov	r4, r0
 8004b72:	4608      	mov	r0, r1
 8004b74:	4611      	mov	r1, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	602a      	str	r2, [r5, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f7fb fc3d 	bl	80003fa <_write>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_write_r+0x1e>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_write_r+0x1e>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	2000012c 	.word	0x2000012c

08004b90 <_close_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4d06      	ldr	r5, [pc, #24]	; (8004bac <_close_r+0x1c>)
 8004b94:	2300      	movs	r3, #0
 8004b96:	4604      	mov	r4, r0
 8004b98:	4608      	mov	r0, r1
 8004b9a:	602b      	str	r3, [r5, #0]
 8004b9c:	f7fb fed5 	bl	800094a <_close>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_close_r+0x1a>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_close_r+0x1a>
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	2000012c 	.word	0x2000012c

08004bb0 <_fstat_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4d07      	ldr	r5, [pc, #28]	; (8004bd0 <_fstat_r+0x20>)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	f7fb fed0 	bl	8000962 <_fstat>
 8004bc2:	1c43      	adds	r3, r0, #1
 8004bc4:	d102      	bne.n	8004bcc <_fstat_r+0x1c>
 8004bc6:	682b      	ldr	r3, [r5, #0]
 8004bc8:	b103      	cbz	r3, 8004bcc <_fstat_r+0x1c>
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	bd38      	pop	{r3, r4, r5, pc}
 8004bce:	bf00      	nop
 8004bd0:	2000012c 	.word	0x2000012c

08004bd4 <_isatty_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d06      	ldr	r5, [pc, #24]	; (8004bf0 <_isatty_r+0x1c>)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	f7fb fecf 	bl	8000982 <_isatty>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_isatty_r+0x1a>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_isatty_r+0x1a>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	2000012c 	.word	0x2000012c

08004bf4 <_lseek_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4d07      	ldr	r5, [pc, #28]	; (8004c14 <_lseek_r+0x20>)
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	4608      	mov	r0, r1
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	602a      	str	r2, [r5, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f7fb fec8 	bl	8000998 <_lseek>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_lseek_r+0x1e>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_lseek_r+0x1e>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	2000012c 	.word	0x2000012c

08004c18 <__malloc_lock>:
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <__malloc_lock+0x8>)
 8004c1a:	f7ff bb1d 	b.w	8004258 <__retarget_lock_acquire_recursive>
 8004c1e:	bf00      	nop
 8004c20:	20000120 	.word	0x20000120

08004c24 <__malloc_unlock>:
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <__malloc_unlock+0x8>)
 8004c26:	f7ff bb18 	b.w	800425a <__retarget_lock_release_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	20000120 	.word	0x20000120

08004c30 <_read_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	; (8004c50 <_read_r+0x20>)
 8004c34:	4604      	mov	r4, r0
 8004c36:	4608      	mov	r0, r1
 8004c38:	4611      	mov	r1, r2
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	602a      	str	r2, [r5, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f7fb fe66 	bl	8000910 <_read>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_read_r+0x1e>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_read_r+0x1e>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	2000012c 	.word	0x2000012c

08004c54 <_init>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

08004c60 <_fini>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr
