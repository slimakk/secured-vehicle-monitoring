
obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000331c  0800d010  0800d010  0001d010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801032c  0801032c  0003035c  2**0
                  CONTENTS
  4 .ARM          00000008  0801032c  0801032c  0002032c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010334  08010334  0003035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010334  08010334  00020334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010338  08010338  00020338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0801033c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  2000035c  08010698  0003035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  08010698  00030b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f79a  00000000  00000000  0003038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000424d  00000000  00000000  0004fb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00053d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  000557c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027053  00000000  00000000  00057050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020dca  00000000  00000000  0007e0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7742  00000000  00000000  0009ee6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001865af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008118  00000000  00000000  00186600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000035c 	.word	0x2000035c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cff4 	.word	0x0800cff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000360 	.word	0x20000360
 80001cc:	0800cff4 	.word	0x0800cff4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CAN1_Init>:
extern IWDG_HandleTypeDef hiwdg;
extern CAN_HandleTypeDef hcan1;
uint32_t tx_mailbox;

void MX_CAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_CAN1_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f6e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f9c:	f003 fd02 	bl	80049a4 <HAL_CAN_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_CAN1_Init+0x5e>
	{
	  Error_Handler();
 8000fa6:	f001 fc4b 	bl	8002840 <Error_Handler>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000444 	.word	0x20000444
 8000fb4:	40006400 	.word	0x40006400

08000fb8 <canConfig>:

void canConfig(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8000fca:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000fce:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8000fd4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fd8:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <canConfig+0x64>)
 8000fec:	f003 fdd5 	bl	8004b9a <HAL_CAN_ConfigFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <canConfig+0x42>
	{
		Error_Handler();
 8000ff6:	f001 fc23 	bl	8002840 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <canConfig+0x64>)
 8000ffc:	f003 fe97 	bl	8004d2e <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <canConfig+0x52>
	{
		Error_Handler();
 8001006:	f001 fc1b 	bl	8002840 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <canConfig+0x64>)
 800100e:	f004 f8b4 	bl	800517a <HAL_CAN_ActivateNotification>
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000444 	.word	0x20000444

08001020 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	f107 0214 	add.w	r2, r7, #20
 8001030:	2100      	movs	r1, #0
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001034:	f003 ff8f 	bl	8004f56 <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fb93 	bl	8001768 <OBD2_PID_Parse>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001048:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	OBD2_ShowOnDisplay(obd_comm.current_value);
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800104e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f000 ff7d 	bl	8001f54 <OBD2_ShowOnDisplay>

//	HAL_IWDG_Refresh(&hiwdg);
}
 800105a:	bf00      	nop
 800105c:	3730      	adds	r7, #48	; 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000444 	.word	0x20000444
 8001068:	200006c0 	.word	0x200006c0

0800106c <CAN_SEND_MESSAGE>:

void CAN_SEND_MESSAGE(uint8_t *tx_frame)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = DEVICE_CAN_ID;
 8001074:	f240 73df 	movw	r3, #2015	; 0x7df
 8001078:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 800107a:	2308      	movs	r3, #8
 800107c:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_frame, &tx_mailbox) != HAL_OK)
 8001086:	f107 0108 	add.w	r1, r7, #8
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <CAN_SEND_MESSAGE+0x3c>)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <CAN_SEND_MESSAGE+0x40>)
 8001090:	f003 fe91 	bl	8004db6 <HAL_CAN_AddTxMessage>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <CAN_SEND_MESSAGE+0x32>
	{
		Error_Handler();
 800109a:	f001 fbd1 	bl	8002840 <Error_Handler>
	}

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000378 	.word	0x20000378
 80010ac:	20000444 	.word	0x20000444

080010b0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	60da      	str	r2, [r3, #12]
//	__HAL_CAN_Receive_IT(hcan, CAN_RX_FIFO0);
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <KLine_Init>:
static void MX_GPIO_KLineUART_Init(void);
static void UART_PIN_State(uint8_t state);
static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght);
static void MX_USART1_UART_Init(uint16_t baud_rate);

obd_protocol KLine_Init(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 80010d2:	f000 f8f9 	bl	80012c8 <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 80010d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010da:	f002 fa81 	bl	80035e0 <HAL_Delay>
	UART_PIN_State(0); //0
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f908 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f002 fa7b 	bl	80035e0 <HAL_Delay>
	UART_PIN_State(1);//11
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 f902 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(400);
 80010f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010f4:	f002 fa74 	bl	80035e0 <HAL_Delay>
	UART_PIN_State(0);//00
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 f8fb 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(400);
 80010fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001102:	f002 fa6d 	bl	80035e0 <HAL_Delay>
	UART_PIN_State(1);//11
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f8f4 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(400);
 800110c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001110:	f002 fa66 	bl	80035e0 <HAL_Delay>
	UART_PIN_State(0);//00
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f8ed 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(400);
 800111a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800111e:	f002 fa5f 	bl	80035e0 <HAL_Delay>
	UART_PIN_State(1);//1
 8001122:	2001      	movs	r0, #1
 8001124:	f000 f8e6 	bl	80012f4 <UART_PIN_State>

	MX_USART1_UART_Init(10400);
 8001128:	f642 00a0 	movw	r0, #10400	; 0x28a0
 800112c:	f000 f9f4 	bl	8001518 <MX_USART1_UART_Init>

	HAL_UART_Receive(&huart1, uartBuf, 3, 500);
 8001130:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001134:	2203      	movs	r2, #3
 8001136:	492b      	ldr	r1, [pc, #172]	; (80011e4 <KLine_Init+0x118>)
 8001138:	482b      	ldr	r0, [pc, #172]	; (80011e8 <KLine_Init+0x11c>)
 800113a:	f007 fd6a 	bl	8008c12 <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <KLine_Init+0x118>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b55      	cmp	r3, #85	; 0x55
 8001144:	d001      	beq.n	800114a <KLine_Init+0x7e>
	{
		return OBD_NONE;
 8001146:	2300      	movs	r3, #0
 8001148:	e047      	b.n	80011da <KLine_Init+0x10e>
	}
	else if(uartBuf[1] == uartBuf[2])
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <KLine_Init+0x118>)
 800114c:	785a      	ldrb	r2, [r3, #1]
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <KLine_Init+0x118>)
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	429a      	cmp	r2, r3
 8001154:	d122      	bne.n	800119c <KLine_Init+0xd0>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <KLine_Init+0x118>)
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	43db      	mvns	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 8001160:	2019      	movs	r0, #25
 8001162:	f002 fa3d 	bl	80035e0 <HAL_Delay>
			HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 8001166:	1df9      	adds	r1, r7, #7
 8001168:	2332      	movs	r3, #50	; 0x32
 800116a:	2201      	movs	r2, #1
 800116c:	481e      	ldr	r0, [pc, #120]	; (80011e8 <KLine_Init+0x11c>)
 800116e:	f007 fcbc 	bl	8008aea <HAL_UART_Transmit>
			HAL_Delay(25);
 8001172:	2019      	movs	r0, #25
 8001174:	f002 fa34 	bl	80035e0 <HAL_Delay>
			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <KLine_Init+0x11c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	8b1b      	ldrh	r3, [r3, #24]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <KLine_Init+0x11c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0208 	orr.w	r2, r2, #8
 8001188:	b292      	uxth	r2, r2
 800118a:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	2201      	movs	r2, #1
 8001190:	4916      	ldr	r1, [pc, #88]	; (80011ec <KLine_Init+0x120>)
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <KLine_Init+0x11c>)
 8001194:	f007 fd3d 	bl	8008c12 <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
			//kline_kb = uartBuf[1];
			return OBD_PROTO_ISO9141;
 8001198:	2301      	movs	r3, #1
 800119a:	e01e      	b.n	80011da <KLine_Init+0x10e>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <KLine_Init+0x118>)
 800119e:	785b      	ldrb	r3, [r3, #1]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 80011a6:	2019      	movs	r0, #25
 80011a8:	f002 fa1a 	bl	80035e0 <HAL_Delay>
		HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 80011ac:	1db9      	adds	r1, r7, #6
 80011ae:	2332      	movs	r3, #50	; 0x32
 80011b0:	2201      	movs	r2, #1
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <KLine_Init+0x11c>)
 80011b4:	f007 fc99 	bl	8008aea <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <KLine_Init+0x11c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	8b1b      	ldrh	r3, [r3, #24]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <KLine_Init+0x11c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0208 	orr.w	r2, r2, #8
 80011c8:	b292      	uxth	r2, r2
 80011ca:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 80011cc:	2364      	movs	r3, #100	; 0x64
 80011ce:	2201      	movs	r2, #1
 80011d0:	4906      	ldr	r1, [pc, #24]	; (80011ec <KLine_Init+0x120>)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <KLine_Init+0x11c>)
 80011d4:	f007 fd1d 	bl	8008c12 <HAL_UART_Receive>
		return OBD_PROTO_KWP2000_SLOW;
 80011d8:	2302      	movs	r3, #2
	}
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000634 	.word	0x20000634
 80011e8:	20000568 	.word	0x20000568
 80011ec:	20000393 	.word	0x20000393

080011f0 <KWP2000_Fast_Init>:

obd_protocol KWP2000_Fast_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 80011f6:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <KWP2000_Fast_Init+0xc4>)
 80011f8:	463b      	mov	r3, r7
 80011fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	7019      	strb	r1, [r3, #0]
//	uint8_t resp_msg[7]={0};
	uint8_t checksum = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
	obd_comm.msg_type = 1;
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <KWP2000_Fast_Init+0xc8>)
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	HAL_UART_DeInit(&huart1);
 8001210:	482a      	ldr	r0, [pc, #168]	; (80012bc <KWP2000_Fast_Init+0xcc>)
 8001212:	f007 fc31 	bl	8008a78 <HAL_UART_DeInit>
	HAL_Delay(3000);
 8001216:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800121a:	f002 f9e1 	bl	80035e0 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 800121e:	f000 f853 	bl	80012c8 <MX_GPIO_KLineUART_Init>
	UART_PIN_State(0);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f866 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(25);
 8001228:	2019      	movs	r0, #25
 800122a:	f002 f9d9 	bl	80035e0 <HAL_Delay>
	UART_PIN_State(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f000 f860 	bl	80012f4 <UART_PIN_State>
	HAL_Delay(25);
 8001234:	2019      	movs	r0, #25
 8001236:	f002 f9d3 	bl	80035e0 <HAL_Delay>
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800123a:	4820      	ldr	r0, [pc, #128]	; (80012bc <KWP2000_Fast_Init+0xcc>)
 800123c:	f007 fbce 	bl	80089dc <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <KWP2000_Fast_Init+0x5a>
	{
		Error_Handler();
 8001246:	f001 fafb 	bl	8002840 <Error_Handler>
	}
//	MX_USART1_UART_Init(10400);
	HAL_UART_Transmit(&huart1, start_msg, 5, 10);
 800124a:	4639      	mov	r1, r7
 800124c:	230a      	movs	r3, #10
 800124e:	2205      	movs	r2, #5
 8001250:	481a      	ldr	r0, [pc, #104]	; (80012bc <KWP2000_Fast_Init+0xcc>)
 8001252:	f007 fc4a 	bl	8008aea <HAL_UART_Transmit>
//	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
//	HAL_Delay(20);

	HAL_UART_Receive_DMA(&huart1, uartBuf, 8);
 8001256:	2208      	movs	r2, #8
 8001258:	4919      	ldr	r1, [pc, #100]	; (80012c0 <KWP2000_Fast_Init+0xd0>)
 800125a:	4818      	ldr	r0, [pc, #96]	; (80012bc <KWP2000_Fast_Init+0xcc>)
 800125c:	f007 fdaa 	bl	8008db4 <HAL_UART_Receive_DMA>
	//HAL_TIM_Base_Start_IT(&htim6);

	while(obd_comm.msg_type != 0)
 8001260:	e000      	b.n	8001264 <KWP2000_Fast_Init+0x74>
	{
		__NOP();
 8001262:	bf00      	nop
	while(obd_comm.msg_type != 0)
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <KWP2000_Fast_Init+0xc8>)
 8001266:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <KWP2000_Fast_Init+0x72>
	}

	for(int i = 1; i < 7; i++)
 800126e:	2301      	movs	r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	e009      	b.n	8001288 <KWP2000_Fast_Init+0x98>
	{
		checksum = checksum + uartBuf[i];
 8001274:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <KWP2000_Fast_Init+0xd0>)
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4413      	add	r3, r2
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	4413      	add	r3, r2
 8001280:	73fb      	strb	r3, [r7, #15]
	for(int i = 1; i < 7; i++)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3301      	adds	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b06      	cmp	r3, #6
 800128c:	ddf2      	ble.n	8001274 <KWP2000_Fast_Init+0x84>
	}
	checksum = checksum % 256;
	if(checksum == uartBuf[7] && checksum != 0)
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <KWP2000_Fast_Init+0xd0>)
 8001290:	79db      	ldrb	r3, [r3, #7]
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	429a      	cmp	r2, r3
 8001296:	d108      	bne.n	80012aa <KWP2000_Fast_Init+0xba>
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <KWP2000_Fast_Init+0xba>
	{
		ecu_addr = uartBuf[3];
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <KWP2000_Fast_Init+0xd0>)
 80012a0:	78da      	ldrb	r2, [r3, #3]
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <KWP2000_Fast_Init+0xd4>)
 80012a4:	701a      	strb	r2, [r3, #0]
		return OBD_PROTO_KWP2000_FAST;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e000      	b.n	80012ac <KWP2000_Fast_Init+0xbc>
	}
	else
		return OBD_NONE;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	0800d010 	.word	0x0800d010
 80012b8:	200006c0 	.word	0x200006c0
 80012bc:	20000568 	.word	0x20000568
 80012c0:	20000634 	.word	0x20000634
 80012c4:	20000393 	.word	0x20000393

080012c8 <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
 80012ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e8:	f004 fdde 	bl	8005ea8 <HAL_GPIO_Init>
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <UART_PIN_State>:

static void UART_PIN_State(uint8_t state)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10e      	bne.n	8001322 <UART_PIN_State+0x2e>
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f005 f837 	bl	8006380 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131c:	f005 f830 	bl	8006380 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}
 8001320:	e00d      	b.n	800133e <UART_PIN_State+0x4a>
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
 8001322:	2201      	movs	r2, #1
 8001324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f005 f828 	bl	8006380 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f005 f821 	bl	8006380 <HAL_GPIO_WritePin>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <KLine_SEND_MESSAGE>:

void KLine_SEND_MESSAGE(uint8_t *tx_frame)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001350:	2368      	movs	r3, #104	; 0x68
 8001352:	723b      	strb	r3, [r7, #8]
 8001354:	236a      	movs	r3, #106	; 0x6a
 8001356:	727b      	strb	r3, [r7, #9]
 8001358:	23f1      	movs	r3, #241	; 0xf1
 800135a:	72bb      	strb	r3, [r7, #10]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	72fb      	strb	r3, [r7, #11]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	733b      	strb	r3, [r7, #12]
 8001368:	2300      	movs	r3, #0
 800136a:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3301      	adds	r3, #1
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fe54 	bl	8002020 <PID_Get_Lenght>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <KLine_SEND_MESSAGE+0xa8>)
 800137e:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	e00a      	b.n	80013a0 <KLine_SEND_MESSAGE+0x58>
	{
		checksum += kline_msg[i];
 800138a:	f107 0208 	add.w	r2, r7, #8
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4413      	add	r3, r2
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	4413      	add	r3, r2
 8001398:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	3301      	adds	r3, #1
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d9f1      	bls.n	800138a <KLine_SEND_MESSAGE+0x42>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1, kline_msg, sizeof(kline_msg), 12);
 80013aa:	f107 0108 	add.w	r1, r7, #8
 80013ae:	230c      	movs	r3, #12
 80013b0:	2206      	movs	r2, #6
 80013b2:	4810      	ldr	r0, [pc, #64]	; (80013f4 <KLine_SEND_MESSAGE+0xac>)
 80013b4:	f007 fb99 	bl	8008aea <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <KLine_SEND_MESSAGE+0xac>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	8b1b      	ldrh	r3, [r3, #24]
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <KLine_SEND_MESSAGE+0xac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0208 	orr.w	r2, r2, #8
 80013c8:	b292      	uxth	r2, r2
 80013ca:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 4);
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <KLine_SEND_MESSAGE+0xa8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3304      	adds	r3, #4
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	4907      	ldr	r1, [pc, #28]	; (80013f8 <KLine_SEND_MESSAGE+0xb0>)
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <KLine_SEND_MESSAGE+0xac>)
 80013dc:	f007 fcea 	bl	8008db4 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80013e0:	203c      	movs	r0, #60	; 0x3c
 80013e2:	f002 f8fd 	bl	80035e0 <HAL_Delay>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000394 	.word	0x20000394
 80013f4:	20000568 	.word	0x20000568
 80013f8:	2000037c 	.word	0x2000037c

080013fc <KWP2000_SEND_MESSAGE>:

void KWP2000_SEND_MESSAGE(uint8_t *tx_frame)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, 0x33, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001404:	23c2      	movs	r3, #194	; 0xc2
 8001406:	723b      	strb	r3, [r7, #8]
 8001408:	2333      	movs	r3, #51	; 0x33
 800140a:	727b      	strb	r3, [r7, #9]
 800140c:	23f1      	movs	r3, #241	; 0xf1
 800140e:	72bb      	strb	r3, [r7, #10]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	72fb      	strb	r3, [r7, #11]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	733b      	strb	r3, [r7, #12]
 800141c:	2300      	movs	r3, #0
 800141e:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fdfa 	bl	8002020 <PID_Get_Lenght>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <KWP2000_SEND_MESSAGE+0xb4>)
 8001432:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]
	obd_comm.msg_type = 2;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <KWP2000_SEND_MESSAGE+0xb8>)
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	e00a      	b.n	800145c <KWP2000_SEND_MESSAGE+0x60>
	{
		checksum += kwp_msg[i];
 8001446:	f107 0208 	add.w	r2, r7, #8
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4413      	add	r3, r2
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	4413      	add	r3, r2
 8001454:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	3301      	adds	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2b04      	cmp	r3, #4
 8001460:	d9f1      	bls.n	8001446 <KWP2000_SEND_MESSAGE+0x4a>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	737b      	strb	r3, [r7, #13]

	HAL_Delay(20);
 8001466:	2014      	movs	r0, #20
 8001468:	f002 f8ba 	bl	80035e0 <HAL_Delay>

	HAL_UART_Transmit(&huart1, kwp_msg, sizeof(kwp_msg), 12);
 800146c:	f107 0108 	add.w	r1, r7, #8
 8001470:	230c      	movs	r3, #12
 8001472:	2206      	movs	r2, #6
 8001474:	4810      	ldr	r0, [pc, #64]	; (80014b8 <KWP2000_SEND_MESSAGE+0xbc>)
 8001476:	f007 fb38 	bl	8008aea <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <KWP2000_SEND_MESSAGE+0xbc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	8b1b      	ldrh	r3, [r3, #24]
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <KWP2000_SEND_MESSAGE+0xbc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0208 	orr.w	r2, r2, #8
 800148a:	b292      	uxth	r2, r2
 800148c:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 5);
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <KWP2000_SEND_MESSAGE+0xb4>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	3305      	adds	r3, #5
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <KWP2000_SEND_MESSAGE+0xc0>)
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <KWP2000_SEND_MESSAGE+0xbc>)
 800149e:	f007 fc89 	bl	8008db4 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80014a2:	203c      	movs	r0, #60	; 0x3c
 80014a4:	f002 f89c 	bl	80035e0 <HAL_Delay>
}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000394 	.word	0x20000394
 80014b4:	200006c0 	.word	0x200006c0
 80014b8:	20000568 	.word	0x20000568
 80014bc:	2000037c 	.word	0x2000037c

080014c0 <Verify_Checksum>:

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	e009      	b.n	80014ea <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	4413      	add	r3, r2
 80014e2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf0      	blt.n	80014d6 <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	429a      	cmp	r2, r3
 8001502:	d101      	bne.n	8001508 <Verify_Checksum+0x48>
	{
		return 1;
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <Verify_Checksum+0x4a>
	}
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(uint16_t baud_rate)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
  huart1.Instance = USART1;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <MX_USART1_UART_Init+0x6c>)
 8001526:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud_rate;
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <MX_USART1_UART_Init+0x68>)
 800152c:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART1_UART_Init+0x68>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART1_UART_Init+0x68>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART1_UART_Init+0x68>)
 800155a:	2201      	movs	r2, #1
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001560:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <MX_USART1_UART_Init+0x68>)
 8001568:	f007 fa38 	bl	80089dc <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8001572:	f001 f965 	bl	8002840 <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000568 	.word	0x20000568
 8001584:	40013800 	.word	0x40013800

08001588 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	if(obd_comm.msg_type == 1)
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 8001592:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001596:	2b01      	cmp	r3, #1
 8001598:	d104      	bne.n	80015a4 <HAL_UART_RxCpltCallback+0x1c>
	{
		obd_comm.msg_type = 0;
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			HAL_IWDG_Refresh(&hiwdg);
		}
	}


}
 80015a2:	e03c      	b.n	800161e <HAL_UART_RxCpltCallback+0x96>
	else if (obd_comm.msg_type == 2)
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 80015a6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d137      	bne.n	800161e <HAL_UART_RxCpltCallback+0x96>
		if(Verify_Checksum(kline_rx_buf, pid_length + 5))
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_UART_RxCpltCallback+0xa4>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3305      	adds	r3, #5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	481d      	ldr	r0, [pc, #116]	; (8001630 <HAL_UART_RxCpltCallback+0xa8>)
 80015ba:	f7ff ff81 	bl	80014c0 <Verify_Checksum>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d02c      	beq.n	800161e <HAL_UART_RxCpltCallback+0x96>
			uint8_t j = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 80015c8:	2302      	movs	r3, #2
 80015ca:	73bb      	strb	r3, [r7, #14]
 80015cc:	e00b      	b.n	80015e6 <HAL_UART_RxCpltCallback+0x5e>
				rx_frame[j] = kline_rx_buf[i];
 80015ce:	7bba      	ldrb	r2, [r7, #14]
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	4917      	ldr	r1, [pc, #92]	; (8001630 <HAL_UART_RxCpltCallback+0xa8>)
 80015d4:	5c89      	ldrb	r1, [r1, r2]
 80015d6:	4a17      	ldr	r2, [pc, #92]	; (8001634 <HAL_UART_RxCpltCallback+0xac>)
 80015d8:	54d1      	strb	r1, [r2, r3]
				j++;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	3301      	adds	r3, #1
 80015e4:	73bb      	strb	r3, [r7, #14]
 80015e6:	7bba      	ldrb	r2, [r7, #14]
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_UART_RxCpltCallback+0xa4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3304      	adds	r3, #4
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dded      	ble.n	80015ce <HAL_UART_RxCpltCallback+0x46>
			obd_comm.msg_type = 0;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <HAL_UART_RxCpltCallback+0xac>)
 80015fc:	f000 f8b4 	bl	8001768 <OBD2_PID_Parse>
 8001600:	eef0 7a40 	vmov.f32	s15, s0
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 8001606:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			OBD2_ShowOnDisplay(obd_comm.current_value);
 800160a:	4b07      	ldr	r3, [pc, #28]	; (8001628 <HAL_UART_RxCpltCallback+0xa0>)
 800160c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f000 fc9e 	bl	8001f54 <OBD2_ShowOnDisplay>
			HAL_IWDG_Refresh(&hiwdg);
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <HAL_UART_RxCpltCallback+0xb0>)
 800161a:	f005 fbbd 	bl	8006d98 <HAL_IWDG_Refresh>
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200006c0 	.word	0x200006c0
 800162c:	20000394 	.word	0x20000394
 8001630:	2000037c 	.word	0x2000037c
 8001634:	2000038c 	.word	0x2000038c
 8001638:	200004c0 	.word	0x200004c0

0800163c <OBD2_PID_Decode>:
//	strcat(txTest2, "\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t *)txTest2, sizeof(txTest2),10);
//}

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	int number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3303      	adds	r3, #3
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	061a      	lsls	r2, r3, #24
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3304      	adds	r3, #4
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3305      	adds	r3, #5
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	4313      	orrs	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	3206      	adds	r2, #6
 8001664:	7812      	ldrb	r2, [r2, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 800166e:	231f      	movs	r3, #31
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	e030      	b.n	80016d6 <OBD2_PID_Decode+0x9a>
	{
		int digit = number >> i;
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	fa42 f303 	asr.w	r3, r2, r3
 800167c:	60bb      	str	r3, [r7, #8]
		digit &= 1;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
		if(obd_comm.pid == 0x00)
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <OBD2_PID_Decode+0xb0>)
 8001688:	785b      	ldrb	r3, [r3, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <OBD2_PID_Decode+0x64>
		{
			obd_comm.available_pids_1[j] = digit;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	b2d9      	uxtb	r1, r3
 8001692:	4a16      	ldr	r2, [pc, #88]	; (80016ec <OBD2_PID_Decode+0xb0>)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4413      	add	r3, r2
 8001698:	3303      	adds	r3, #3
 800169a:	460a      	mov	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	e014      	b.n	80016ca <OBD2_PID_Decode+0x8e>
		}
		else if(obd_comm.pid == 0x20)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <OBD2_PID_Decode+0xb0>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	2b20      	cmp	r3, #32
 80016a6:	d108      	bne.n	80016ba <OBD2_PID_Decode+0x7e>
		{
			obd_comm.available_pids_2[j] = digit;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	b2d9      	uxtb	r1, r3
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <OBD2_PID_Decode+0xb0>)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	4413      	add	r3, r2
 80016b2:	3323      	adds	r3, #35	; 0x23
 80016b4:	460a      	mov	r2, r1
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <OBD2_PID_Decode+0x8e>
		}
		else
		{
			obd_comm.available_pids_3[j] = digit;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	b2d9      	uxtb	r1, r3
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <OBD2_PID_Decode+0xb0>)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	4413      	add	r3, r2
 80016c4:	3343      	adds	r3, #67	; 0x43
 80016c6:	460a      	mov	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dacb      	bge.n	8001674 <OBD2_PID_Decode+0x38>
	}
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200006c0 	.word	0x200006c0

080016f0 <OBD2_Request>:

void OBD2_Request(OBD obd)
{
 80016f0:	b084      	sub	sp, #16
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	f107 0c18 	add.w	ip, r7, #24
 80016fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(10);
 8001700:	200a      	movs	r0, #10
 8001702:	f001 ff6d 	bl	80035e0 <HAL_Delay>
	if(obd.used_protocol == OBD_PROTO_CAN)
 8001706:	7e3b      	ldrb	r3, [r7, #24]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d115      	bne.n	8001738 <OBD2_Request+0x48>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 800170c:	2302      	movs	r3, #2
 800170e:	723b      	strb	r3, [r7, #8]
 8001710:	2301      	movs	r3, #1
 8001712:	727b      	strb	r3, [r7, #9]
 8001714:	7e7b      	ldrb	r3, [r7, #25]
 8001716:	72bb      	strb	r3, [r7, #10]
 8001718:	2300      	movs	r3, #0
 800171a:	72fb      	strb	r3, [r7, #11]
 800171c:	2300      	movs	r3, #0
 800171e:	733b      	strb	r3, [r7, #12]
 8001720:	2300      	movs	r3, #0
 8001722:	737b      	strb	r3, [r7, #13]
 8001724:	2300      	movs	r3, #0
 8001726:	73bb      	strb	r3, [r7, #14]
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
		CAN_SEND_MESSAGE(tx_data_CAN);
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fc9b 	bl	800106c <CAN_SEND_MESSAGE>
		else
		{
			KWP2000_SEND_MESSAGE(tx_data_ISO);
		}
	}
}
 8001736:	e00f      	b.n	8001758 <OBD2_Request+0x68>
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 8001738:	2301      	movs	r3, #1
 800173a:	713b      	strb	r3, [r7, #4]
 800173c:	7e7b      	ldrb	r3, [r7, #25]
 800173e:	717b      	strb	r3, [r7, #5]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 8001740:	7e3b      	ldrb	r3, [r7, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d104      	bne.n	8001750 <OBD2_Request+0x60>
			KLine_SEND_MESSAGE(tx_data_ISO);
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fdfd 	bl	8001348 <KLine_SEND_MESSAGE>
}
 800174e:	e003      	b.n	8001758 <OBD2_Request+0x68>
			KWP2000_SEND_MESSAGE(tx_data_ISO);
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe52 	bl	80013fc <KWP2000_SEND_MESSAGE>
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001762:	b004      	add	sp, #16
 8001764:	4770      	bx	lr
	...

08001768 <OBD2_PID_Parse>:

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3302      	adds	r3, #2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2ba6      	cmp	r3, #166	; 0xa6
 800177e:	f200 83b2 	bhi.w	8001ee6 <OBD2_PID_Parse+0x77e>
 8001782:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <OBD2_PID_Parse+0x20>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	08001a25 	.word	0x08001a25
 800178c:	08001ee7 	.word	0x08001ee7
 8001790:	08001ee7 	.word	0x08001ee7
 8001794:	08001ee7 	.word	0x08001ee7
 8001798:	08001a33 	.word	0x08001a33
 800179c:	08001a3b 	.word	0x08001a3b
 80017a0:	08001a51 	.word	0x08001a51
 80017a4:	08001a51 	.word	0x08001a51
 80017a8:	08001a51 	.word	0x08001a51
 80017ac:	08001a51 	.word	0x08001a51
 80017b0:	08001a57 	.word	0x08001a57
 80017b4:	08001a73 	.word	0x08001a73
 80017b8:	08001a87 	.word	0x08001a87
 80017bc:	08001aad 	.word	0x08001aad
 80017c0:	08001ac1 	.word	0x08001ac1
 80017c4:	08001adb 	.word	0x08001adb
 80017c8:	08001af1 	.word	0x08001af1
 80017cc:	08001b1b 	.word	0x08001b1b
 80017d0:	08001ee7 	.word	0x08001ee7
 80017d4:	08001ee7 	.word	0x08001ee7
 80017d8:	08001b23 	.word	0x08001b23
 80017dc:	08001b23 	.word	0x08001b23
 80017e0:	08001b23 	.word	0x08001b23
 80017e4:	08001b23 	.word	0x08001b23
 80017e8:	08001b23 	.word	0x08001b23
 80017ec:	08001b23 	.word	0x08001b23
 80017f0:	08001b23 	.word	0x08001b23
 80017f4:	08001b23 	.word	0x08001b23
 80017f8:	08001ee7 	.word	0x08001ee7
 80017fc:	08001ee7 	.word	0x08001ee7
 8001800:	08001ee7 	.word	0x08001ee7
 8001804:	08001b41 	.word	0x08001b41
 8001808:	08001b5f 	.word	0x08001b5f
 800180c:	08001b41 	.word	0x08001b41
 8001810:	08001b6d 	.word	0x08001b6d
 8001814:	08001b9d 	.word	0x08001b9d
 8001818:	08001bc3 	.word	0x08001bc3
 800181c:	08001bc3 	.word	0x08001bc3
 8001820:	08001bc3 	.word	0x08001bc3
 8001824:	08001bc3 	.word	0x08001bc3
 8001828:	08001bc3 	.word	0x08001bc3
 800182c:	08001bc3 	.word	0x08001bc3
 8001830:	08001bc3 	.word	0x08001bc3
 8001834:	08001bc3 	.word	0x08001bc3
 8001838:	08001bcb 	.word	0x08001bcb
 800183c:	08001bd3 	.word	0x08001bd3
 8001840:	08001bd9 	.word	0x08001bd9
 8001844:	08001bd9 	.word	0x08001bd9
 8001848:	08001be1 	.word	0x08001be1
 800184c:	08001bf5 	.word	0x08001bf5
 8001850:	08001c13 	.word	0x08001c13
 8001854:	08001c39 	.word	0x08001c39
 8001858:	08001c4d 	.word	0x08001c4d
 800185c:	08001c4d 	.word	0x08001c4d
 8001860:	08001c4d 	.word	0x08001c4d
 8001864:	08001c4d 	.word	0x08001c4d
 8001868:	08001c4d 	.word	0x08001c4d
 800186c:	08001c4d 	.word	0x08001c4d
 8001870:	08001c4d 	.word	0x08001c4d
 8001874:	08001c4d 	.word	0x08001c4d
 8001878:	08001c55 	.word	0x08001c55
 800187c:	08001c55 	.word	0x08001c55
 8001880:	08001c55 	.word	0x08001c55
 8001884:	08001c55 	.word	0x08001c55
 8001888:	08001c81 	.word	0x08001c81
 800188c:	08001ee7 	.word	0x08001ee7
 8001890:	08001c8f 	.word	0x08001c8f
 8001894:	08001cb9 	.word	0x08001cb9
 8001898:	08001cc1 	.word	0x08001cc1
 800189c:	08001cc9 	.word	0x08001cc9
 80018a0:	08001cd1 	.word	0x08001cd1
 80018a4:	08001ce7 	.word	0x08001ce7
 80018a8:	08001ce7 	.word	0x08001ce7
 80018ac:	08001ce7 	.word	0x08001ce7
 80018b0:	08001ce7 	.word	0x08001ce7
 80018b4:	08001ce7 	.word	0x08001ce7
 80018b8:	08001ce7 	.word	0x08001ce7
 80018bc:	08001cef 	.word	0x08001cef
 80018c0:	08001cef 	.word	0x08001cef
 80018c4:	08001d0d 	.word	0x08001d0d
 80018c8:	08001ee7 	.word	0x08001ee7
 80018cc:	08001ee7 	.word	0x08001ee7
 80018d0:	08001d21 	.word	0x08001d21
 80018d4:	08001d3d 	.word	0x08001d3d
 80018d8:	08001d6f 	.word	0x08001d6f
 80018dc:	08001d93 	.word	0x08001d93
 80018e0:	08001d93 	.word	0x08001d93
 80018e4:	08001d93 	.word	0x08001d93
 80018e8:	08001d93 	.word	0x08001d93
 80018ec:	08001d99 	.word	0x08001d99
 80018f0:	08001db7 	.word	0x08001db7
 80018f4:	08001db7 	.word	0x08001db7
 80018f8:	08001dbf 	.word	0x08001dbf
 80018fc:	08001dd5 	.word	0x08001dd5
 8001900:	08001ddb 	.word	0x08001ddb
 8001904:	08001ee7 	.word	0x08001ee7
 8001908:	08001ee7 	.word	0x08001ee7
 800190c:	08001e0d 	.word	0x08001e0d
 8001910:	08001e0d 	.word	0x08001e0d
 8001914:	08001e23 	.word	0x08001e23
 8001918:	08001e41 	.word	0x08001e41
 800191c:	08001ee7 	.word	0x08001ee7
 8001920:	08001e57 	.word	0x08001e57
 8001924:	08001e5f 	.word	0x08001e5f
 8001928:	08001e5f 	.word	0x08001e5f
 800192c:	08001ee7 	.word	0x08001ee7
 8001930:	08001ee7 	.word	0x08001ee7
 8001934:	08001ee7 	.word	0x08001ee7
 8001938:	08001ee7 	.word	0x08001ee7
 800193c:	08001ee7 	.word	0x08001ee7
 8001940:	08001ee7 	.word	0x08001ee7
 8001944:	08001ee7 	.word	0x08001ee7
 8001948:	08001ee7 	.word	0x08001ee7
 800194c:	08001ee7 	.word	0x08001ee7
 8001950:	08001ee7 	.word	0x08001ee7
 8001954:	08001ee7 	.word	0x08001ee7
 8001958:	08001ee7 	.word	0x08001ee7
 800195c:	08001ee7 	.word	0x08001ee7
 8001960:	08001ee7 	.word	0x08001ee7
 8001964:	08001ee7 	.word	0x08001ee7
 8001968:	08001ee7 	.word	0x08001ee7
 800196c:	08001ee7 	.word	0x08001ee7
 8001970:	08001ee7 	.word	0x08001ee7
 8001974:	08001ee7 	.word	0x08001ee7
 8001978:	08001e75 	.word	0x08001e75
 800197c:	08001ee7 	.word	0x08001ee7
 8001980:	08001ee7 	.word	0x08001ee7
 8001984:	08001ee7 	.word	0x08001ee7
 8001988:	08001ee7 	.word	0x08001ee7
 800198c:	08001ee7 	.word	0x08001ee7
 8001990:	08001ee7 	.word	0x08001ee7
 8001994:	08001ee7 	.word	0x08001ee7
 8001998:	08001ee7 	.word	0x08001ee7
 800199c:	08001ee7 	.word	0x08001ee7
 80019a0:	08001ee7 	.word	0x08001ee7
 80019a4:	08001ee7 	.word	0x08001ee7
 80019a8:	08001ee7 	.word	0x08001ee7
 80019ac:	08001ee7 	.word	0x08001ee7
 80019b0:	08001ee7 	.word	0x08001ee7
 80019b4:	08001ee7 	.word	0x08001ee7
 80019b8:	08001ee7 	.word	0x08001ee7
 80019bc:	08001ee7 	.word	0x08001ee7
 80019c0:	08001ee7 	.word	0x08001ee7
 80019c4:	08001ee7 	.word	0x08001ee7
 80019c8:	08001ee7 	.word	0x08001ee7
 80019cc:	08001ee7 	.word	0x08001ee7
 80019d0:	08001ee7 	.word	0x08001ee7
 80019d4:	08001ee7 	.word	0x08001ee7
 80019d8:	08001ee7 	.word	0x08001ee7
 80019dc:	08001ee7 	.word	0x08001ee7
 80019e0:	08001ee7 	.word	0x08001ee7
 80019e4:	08001ee7 	.word	0x08001ee7
 80019e8:	08001ee7 	.word	0x08001ee7
 80019ec:	08001ee7 	.word	0x08001ee7
 80019f0:	08001ee7 	.word	0x08001ee7
 80019f4:	08001ee7 	.word	0x08001ee7
 80019f8:	08001ee7 	.word	0x08001ee7
 80019fc:	08001ee7 	.word	0x08001ee7
 8001a00:	08001ee7 	.word	0x08001ee7
 8001a04:	08001ee7 	.word	0x08001ee7
 8001a08:	08001ee7 	.word	0x08001ee7
 8001a0c:	08001ee7 	.word	0x08001ee7
 8001a10:	08001ee7 	.word	0x08001ee7
 8001a14:	08001ee7 	.word	0x08001ee7
 8001a18:	08001ee7 	.word	0x08001ee7
 8001a1c:	08001ee7 	.word	0x08001ee7
 8001a20:	08001ea1 	.word	0x08001ea1
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff fe09 	bl	800163c <OBD2_PID_Decode>
		value = 0;
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
		break;
 8001a30:	e259      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
		break;
 8001a38:	e255      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3303      	adds	r3, #3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3b28      	subs	r3, #40	; 0x28
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a4e:	e24a      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001a50:	4bb7      	ldr	r3, [pc, #732]	; (8001d30 <OBD2_PID_Parse+0x5c8>)
 8001a52:	60fb      	str	r3, [r7, #12]
		break;
 8001a54:	e247      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3303      	adds	r3, #3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a70:	e239      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3303      	adds	r3, #3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a80:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a84:	e22f      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3303      	adds	r3, #3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	3204      	adds	r2, #4
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	da00      	bge.n	8001a9c <OBD2_PID_Parse+0x334>
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	109b      	asrs	r3, r3, #2
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aaa:	e21c      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aba:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001abe:	e212      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3b40      	subs	r3, #64	; 0x40
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ad8:	e205      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3303      	adds	r3, #3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3b28      	subs	r3, #40	; 0x28
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aee:	e1fa      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3303      	adds	r3, #3
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	3204      	adds	r2, #4
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	4a8c      	ldr	r2, [pc, #560]	; (8001d34 <OBD2_PID_Parse+0x5cc>)
 8001b02:	fb82 1203 	smull	r1, r2, r2, r3
 8001b06:	1152      	asrs	r2, r2, #5
 8001b08:	17db      	asrs	r3, r3, #31
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b14:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b18:	e1e5      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
		break;
 8001b20:	e1e1      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3303      	adds	r3, #3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4a82      	ldr	r2, [pc, #520]	; (8001d34 <OBD2_PID_Parse+0x5cc>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	099b      	lsrs	r3, r3, #6
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b3e:	e1d2      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3303      	adds	r3, #3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	3204      	adds	r2, #4
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b58:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b5c:	e1c3      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fd6c 	bl	800163c <OBD2_PID_Decode>
		value = 0;
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
		break;
 8001b6a:	e1bc      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3303      	adds	r3, #3
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	3204      	adds	r2, #4
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fcd1 	bl	8000524 <__aeabi_i2d>
 8001b82:	a369      	add	r3, pc, #420	; (adr r3, 8001d28 <OBD2_PID_Parse+0x5c0>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fd36 	bl	80005f8 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7ff f808 	bl	8000ba8 <__aeabi_d2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	3204      	adds	r2, #4
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001bc0:	e191      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
		break;
 8001bc8:	e18d      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
		break;
 8001bd0:	e189      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001bd2:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <OBD2_PID_Parse+0x5c8>)
 8001bd4:	60fb      	str	r3, [r7, #12]
		break;
 8001bd6:	e186      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
		break;
 8001bde:	e182      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3303      	adds	r3, #3
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bee:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001bf2:	e178      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3303      	adds	r3, #3
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	3204      	adds	r2, #4
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c10:	e169      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3303      	adds	r3, #3
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	3204      	adds	r2, #4
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da00      	bge.n	8001c28 <OBD2_PID_Parse+0x4c0>
 8001c26:	3303      	adds	r3, #3
 8001c28:	109b      	asrs	r3, r3, #2
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c32:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c36:	e156      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3303      	adds	r3, #3
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c46:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c4a:	e14c      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
		break;
 8001c52:	e148      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3303      	adds	r3, #3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	3204      	adds	r2, #4
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	4a33      	ldr	r2, [pc, #204]	; (8001d34 <OBD2_PID_Parse+0x5cc>)
 8001c66:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6a:	1152      	asrs	r2, r2, #5
 8001c6c:	17db      	asrs	r3, r3, #31
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	3b28      	subs	r3, #40	; 0x28
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c7e:	e132      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fcdb 	bl	800163c <OBD2_PID_Decode>
		value = 0;
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
		break;
 8001c8c:	e12b      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3303      	adds	r3, #3
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	3204      	adds	r2, #4
 8001c9a:	7812      	ldrb	r2, [r2, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	4a26      	ldr	r2, [pc, #152]	; (8001d38 <OBD2_PID_Parse+0x5d0>)
 8001ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca4:	1192      	asrs	r2, r2, #6
 8001ca6:	17db      	asrs	r3, r3, #31
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cb6:	e116      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
		break;
 8001cbe:	e112      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
		break;
 8001cc6:	e10e      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
		break;
 8001cce:	e10a      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3303      	adds	r3, #3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3b28      	subs	r3, #40	; 0x28
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ce4:	e0ff      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
		break;
 8001cec:	e0fb      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	3204      	adds	r2, #4
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d06:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d0a:	e0ec      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3303      	adds	r3, #3
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d1a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d1e:	e0e2      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
		break;
 8001d26:	e0de      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
 8001d28:	10624dd3 	.word	0x10624dd3
 8001d2c:	3fb43958 	.word	0x3fb43958
 8001d30:	c2c80000 	.word	0xc2c80000
 8001d34:	51eb851f 	.word	0x51eb851f
 8001d38:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	3204      	adds	r2, #4
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbe9 	bl	8000524 <__aeabi_i2d>
 8001d52:	a370      	add	r3, pc, #448	; (adr r3, 8001f14 <OBD2_PID_Parse+0x7ac>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fc4e 	bl	80005f8 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe ff20 	bl	8000ba8 <__aeabi_d2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]
		break;
 8001d6c:	e0bb      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3303      	adds	r3, #3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	3204      	adds	r2, #4
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001d82:	3b7f      	subs	r3, #127	; 0x7f
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d90:	e0a9      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <OBD2_PID_Parse+0x7a0>)
 8001d94:	60fb      	str	r3, [r7, #12]
		break;
 8001d96:	e0a6      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	3204      	adds	r2, #4
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001db4:	e097      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
		break;
 8001dbc:	e093      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3303      	adds	r3, #3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	3b28      	subs	r3, #40	; 0x28
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dce:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001dd2:	e088      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <OBD2_PID_Parse+0x7a4>)
 8001dd6:	60fb      	str	r3, [r7, #12]
		break;
 8001dd8:	e085      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3303      	adds	r3, #3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	3204      	adds	r2, #4
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb9a 	bl	8000524 <__aeabi_i2d>
 8001df0:	a341      	add	r3, pc, #260	; (adr r3, 8001ef8 <OBD2_PID_Parse+0x790>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fbff 	bl	80005f8 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f7fe fed1 	bl	8000ba8 <__aeabi_d2f>
 8001e06:	4603      	mov	r3, r0
 8001e08:	60fb      	str	r3, [r7, #12]
		break;
 8001e0a:	e06c      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3303      	adds	r3, #3
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	3b7d      	subs	r3, #125	; 0x7d
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e20:	e061      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3303      	adds	r3, #3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	3204      	adds	r2, #4
 8001e2e:	7812      	ldrb	r2, [r2, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e3e:	e052      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3303      	adds	r3, #3
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	3b7d      	subs	r3, #125	; 0x7d
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e50:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e54:	e047      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
		break;
 8001e5c:	e043      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3303      	adds	r3, #3
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3b28      	subs	r3, #40	; 0x28
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e72:	e038      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3303      	adds	r3, #3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	3204      	adds	r2, #4
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <OBD2_PID_Parse+0x7a8>)
 8001e86:	fb82 1203 	smull	r1, r2, r2, r3
 8001e8a:	1152      	asrs	r2, r2, #5
 8001e8c:	17db      	asrs	r3, r3, #31
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	3b28      	subs	r3, #40	; 0x28
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e9e:	e022      	b.n	8001ee6 <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3303      	adds	r3, #3
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	061a      	lsls	r2, r3, #24
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3305      	adds	r3, #5
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	3206      	adds	r2, #6
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb2d 	bl	8000524 <__aeabi_i2d>
 8001eca:	a30d      	add	r3, pc, #52	; (adr r3, 8001f00 <OBD2_PID_Parse+0x798>)
 8001ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed0:	f7fe fb92 	bl	80005f8 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fe64 	bl	8000ba8 <__aeabi_d2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60fb      	str	r3, [r7, #12]
		break;
 8001ee4:	bf00      	nop
	}
	return value;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	ee07 3a90 	vmov	s15, r3
}
 8001eec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	9999999a 	.word	0x9999999a
 8001efc:	3fa99999 	.word	0x3fa99999
 8001f00:	9999999a 	.word	0x9999999a
 8001f04:	3fb99999 	.word	0x3fb99999
 8001f08:	c2c80000 	.word	0xc2c80000
 8001f0c:	c3520000 	.word	0xc3520000
 8001f10:	51eb851f 	.word	0x51eb851f
 8001f14:	47ae147b 	.word	0x47ae147b
 8001f18:	3f747ae1 	.word	0x3f747ae1

08001f1c <OBD2_Init>:

obd_protocol OBD2_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
	obd_protocol used_protocol = KLine_Init();
 8001f22:	f7ff f8d3 	bl	80010cc <KLine_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
	if(used_protocol == OBD_NONE)
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10c      	bne.n	8001f4a <OBD2_Init+0x2e>
	{
		used_protocol = KWP2000_Fast_Init();
 8001f30:	f7ff f95e 	bl	80011f0 <KWP2000_Fast_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
		if(used_protocol == OBD_NONE)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <OBD2_Init+0x2e>
		{
			used_protocol = OBD_PROTO_CAN;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	71fb      	strb	r3, [r7, #7]
			//HAL_DMA_DeInit(&hdma_usart1_rx);
			MX_CAN1_Init();
 8001f42:	f7ff f803 	bl	8000f4c <MX_CAN1_Init>
			canConfig();
 8001f46:	f7ff f837 	bl	8000fb8 <canConfig>
		}
	}
	return used_protocol;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <OBD2_ShowOnDisplay>:

void OBD2_ShowOnDisplay(float value)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b094      	sub	sp, #80	; 0x50
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	char str2[13];
	char str3[32];
	Get_Name(obd_comm.pid_index, str3);
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <OBD2_ShowOnDisplay+0xb0>)
 8001f60:	789b      	ldrb	r3, [r3, #2]
 8001f62:	f107 020c 	add.w	r2, r7, #12
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f879 	bl	8002060 <Get_Name>
	//char str3 = Get_Name(obd_comm.pid_index);
	snprintf(str, 10, "%f", value);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe faea 	bl	8000548 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001f7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001f80:	4a21      	ldr	r2, [pc, #132]	; (8002008 <OBD2_ShowOnDisplay+0xb4>)
 8001f82:	210a      	movs	r1, #10
 8001f84:	f008 fd92 	bl	800aaac <sniprintf>
	snprintf(str2, 13, "BAT %.2f V", obd_comm.voltage);
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <OBD2_ShowOnDisplay+0xb0>)
 8001f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fadb 	bl	8000548 <__aeabi_f2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f9a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	; (800200c <OBD2_ShowOnDisplay+0xb8>)
 8001fa0:	210d      	movs	r1, #13
 8001fa2:	f008 fd83 	bl	800aaac <sniprintf>
	ssd1306_SetCursor(0,0);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f001 fa4f 	bl	800344c <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f001 f8fe 	bl	80031b0 <ssd1306_Fill>
	ssd1306_WriteString(pid_names[obd_comm.pid_index], Font_7x10, White);
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <OBD2_ShowOnDisplay+0xb0>)
 8001fb6:	789b      	ldrb	r3, [r3, #2]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <OBD2_ShowOnDisplay+0xbc>)
 8001fbc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <OBD2_ShowOnDisplay+0xc0>)
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	ca06      	ldmia	r2, {r1, r2}
 8001fc6:	f001 fa1b 	bl	8003400 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 12);
 8001fca:	210c      	movs	r1, #12
 8001fcc:	2028      	movs	r0, #40	; 0x28
 8001fce:	f001 fa3d 	bl	800344c <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, White);
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <OBD2_ShowOnDisplay+0xc4>)
 8001fd4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001fd8:	2301      	movs	r3, #1
 8001fda:	ca06      	ldmia	r2, {r1, r2}
 8001fdc:	f001 fa10 	bl	8003400 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 40);
 8001fe0:	2128      	movs	r1, #40	; 0x28
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f001 fa32 	bl	800344c <ssd1306_SetCursor>
	ssd1306_WriteString(str2, Font_11x18, White);
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	; (800201c <OBD2_ShowOnDisplay+0xc8>)
 8001fea:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001fee:	2301      	movs	r3, #1
 8001ff0:	ca06      	ldmia	r2, {r1, r2}
 8001ff2:	f001 fa05 	bl	8003400 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ff6:	f001 f8ff 	bl	80031f8 <ssd1306_UpdateScreen>
}
 8001ffa:	bf00      	nop
 8001ffc:	3748      	adds	r7, #72	; 0x48
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200006c0 	.word	0x200006c0
 8002008:	0800d018 	.word	0x0800d018
 800200c:	0800d01c 	.word	0x0800d01c
 8002010:	20000000 	.word	0x20000000
 8002014:	2000016c 	.word	0x2000016c
 8002018:	2000017c 	.word	0x2000017c
 800201c:	20000174 	.word	0x20000174

08002020 <PID_Get_Lenght>:
		[0x7C] = { 3 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 5 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	return PID_LUT[pid][0];
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <PID_Get_Lenght+0x1c>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	0800d5f8 	.word	0x0800d5f8

08002040 <Get_PID>:

uint8_t Get_PID(uint8_t index)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
	return PID_list[index];
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <Get_PID+0x1c>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	0800d59c 	.word	0x0800d59c

08002060 <Get_Name>:
void Get_Name(uint8_t index, char *name)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
	name = pid_names[index];
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <Get_Name+0x24>)
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	603b      	str	r3, [r7, #0]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_GPIO_EXTI_Callback>:
extern TIM_HandleTypeDef htim1;
extern OBD obd_comm;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MENU_BTN_Pin)
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	2b40      	cmp	r3, #64	; 0x40
 8002096:	d107      	bne.n	80020a8 <HAL_GPIO_EXTI_Callback+0x20>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8002098:	4806      	ldr	r0, [pc, #24]	; (80020b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 800209a:	f006 f889 	bl	80081b0 <HAL_TIM_Base_Start_IT>
		obd_comm.button_state = 0;
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_GPIO_EXTI_Callback+0x30>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	}
	else
	{
		__NOP();
	}
}
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x22>
		__NOP();
 80020a8:	bf00      	nop
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200004d0 	.word	0x200004d0
 80020b8:	200006c0 	.word	0x200006c0

080020bc <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim6;
extern OBD obd_comm;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d124      	bne.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		if(HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin)== GPIO_PIN_SET)
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	481a      	ldr	r0, [pc, #104]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020d2:	f004 f93d 	bl	8006350 <HAL_GPIO_ReadPin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d11d      	bne.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			obd_comm.button_state = 1;
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			if(obd_comm.pid_index == 89)
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020e6:	789b      	ldrb	r3, [r3, #2]
 80020e8:	2b59      	cmp	r3, #89	; 0x59
 80020ea:	d103      	bne.n	80020f4 <HAL_TIM_PeriodElapsedCallback+0x38>
			{
				obd_comm.pid_index = 0;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	709a      	strb	r2, [r3, #2]
 80020f2:	e005      	b.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x44>
			}
			else
			{
				obd_comm.pid_index++;
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020f6:	789b      	ldrb	r3, [r3, #2]
 80020f8:	3301      	adds	r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020fe:	709a      	strb	r2, [r3, #2]
			}
			obd_comm.pid = Get_PID(obd_comm.pid_index);
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002102:	789b      	ldrb	r3, [r3, #2]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff9b 	bl	8002040 <Get_PID>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002110:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim1);
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002114:	f006 f8a0 	bl	8008258 <HAL_TIM_Base_Stop_IT>
		}
	}
	if(htim->Instance == TIM6)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d106      	bne.n	8002130 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		obd_comm.msg_type = 0;
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		HAL_TIM_Base_Stop_IT(&htim6);
 800212a:	4808      	ldr	r0, [pc, #32]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800212c:	f006 f894 	bl	8008258 <HAL_TIM_Base_Stop_IT>
	}
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40012c00 	.word	0x40012c00
 800213c:	48000400 	.word	0x48000400
 8002140:	200006c0 	.word	0x200006c0
 8002144:	200004d0 	.word	0x200004d0
 8002148:	40001000 	.word	0x40001000
 800214c:	2000051c 	.word	0x2000051c

08002150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b09b      	sub	sp, #108	; 0x6c
 8002154:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE BEGIN 1 */
	uint32_t timer_adc = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800215a:	f001 f9cd 	bl	80034f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800215e:	f000 f8bb 	bl	80022d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002162:	f000 fa7f 	bl	8002664 <MX_GPIO_Init>
  MX_DMA_Init();
 8002166:	f000 fa57 	bl	8002618 <MX_DMA_Init>
  MX_I2C2_Init();
 800216a:	f000 f96b 	bl	8002444 <MX_I2C2_Init>
  MX_TIM1_Init();
 800216e:	f000 f9c7 	bl	8002500 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002172:	f000 f903 	bl	800237c <MX_ADC1_Init>
  MX_TIM6_Init();
 8002176:	f000 fa17 	bl	80025a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 800217a:	f000 ffaf 	bl	80030dc <ssd1306_Init>
  ssd1306_Fill(Black);
 800217e:	2000      	movs	r0, #0
 8002180:	f001 f816 	bl	80031b0 <ssd1306_Fill>
  ssd1306_SetCursor(28, 0);
 8002184:	2100      	movs	r1, #0
 8002186:	201c      	movs	r0, #28
 8002188:	f001 f960 	bl	800344c <ssd1306_SetCursor>
  ssd1306_WriteString("Initialization", Font_7x10, White);
 800218c:	4a4c      	ldr	r2, [pc, #304]	; (80022c0 <main+0x170>)
 800218e:	2301      	movs	r3, #1
 8002190:	ca06      	ldmia	r2, {r1, r2}
 8002192:	484c      	ldr	r0, [pc, #304]	; (80022c4 <main+0x174>)
 8002194:	f001 f934 	bl	8003400 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002198:	f001 f82e 	bl	80031f8 <ssd1306_UpdateScreen>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800219c:	217f      	movs	r1, #127	; 0x7f
 800219e:	484a      	ldr	r0, [pc, #296]	; (80022c8 <main+0x178>)
 80021a0:	f002 fba0 	bl	80048e4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 64);
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	4949      	ldr	r1, [pc, #292]	; (80022cc <main+0x17c>)
 80021a8:	4847      	ldr	r0, [pc, #284]	; (80022c8 <main+0x178>)
 80021aa:	f001 fd73 	bl	8003c94 <HAL_ADC_Start_DMA>

    while(obd_comm.voltage <= 12.75)
 80021ae:	e01a      	b.n	80021e6 <main+0x96>
    {
  	  if((HAL_GetTick() - timer_adc) >= ADC_SAMPLE_TIME)
 80021b0:	f001 fa0a 	bl	80035c8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021be:	d30a      	bcc.n	80021d6 <main+0x86>
  	  {
  		  obd_comm.voltage = ADC_Average(adc_buffer);
 80021c0:	4842      	ldr	r0, [pc, #264]	; (80022cc <main+0x17c>)
 80021c2:	f000 fad5 	bl	8002770 <ADC_Average>
 80021c6:	eef0 7a40 	vmov.f32	s15, s0
 80021ca:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <main+0x180>)
 80021cc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
  		  timer_adc = HAL_GetTick();
 80021d0:	f001 f9fa 	bl	80035c8 <HAL_GetTick>
 80021d4:	6078      	str	r0, [r7, #4]
  	  }
  	  if(ssd1306_GetDisplayOn())
 80021d6:	f001 f983 	bl	80034e0 <ssd1306_GetDisplayOn>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <main+0x96>
  	  {
  		 ssd1306_SetDisplayOn(0);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f001 f95f 	bl	80034a4 <ssd1306_SetDisplayOn>
    while(obd_comm.voltage <= 12.75)
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <main+0x180>)
 80021e8:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80021ec:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80022d4 <main+0x184>
 80021f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	d9da      	bls.n	80021b0 <main+0x60>
  	  }
    }

    ssd1306_SetDisplayOn(1);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f001 f952 	bl	80034a4 <ssd1306_SetDisplayOn>

    timer_adc = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]

  obd_comm.button_state = 1;
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <main+0x180>)
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

  obd_comm.used_protocol = OBD2_Init();
 800220c:	f7ff fe86 	bl	8001f1c <OBD2_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <main+0x180>)
 8002216:	701a      	strb	r2, [r3, #0]

  obd_comm.pid = 0x05;
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <main+0x180>)
 800221a:	2205      	movs	r2, #5
 800221c:	705a      	strb	r2, [r3, #1]

  MX_IWDG_Init();
 800221e:	f000 f951 	bl	80024c4 <MX_IWDG_Init>

  OBD2_Request(obd_comm);
 8002222:	4c2b      	ldr	r4, [pc, #172]	; (80022d0 <main+0x180>)
 8002224:	4668      	mov	r0, sp
 8002226:	f104 0310 	add.w	r3, r4, #16
 800222a:	2260      	movs	r2, #96	; 0x60
 800222c:	4619      	mov	r1, r3
 800222e:	f007 ffbd 	bl	800a1ac <memcpy>
 8002232:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002236:	f7ff fa5b 	bl	80016f0 <OBD2_Request>

  OBD2_Request(obd_comm);
 800223a:	4c25      	ldr	r4, [pc, #148]	; (80022d0 <main+0x180>)
 800223c:	4668      	mov	r0, sp
 800223e:	f104 0310 	add.w	r3, r4, #16
 8002242:	2260      	movs	r2, #96	; 0x60
 8002244:	4619      	mov	r1, r3
 8002246:	f007 ffb1 	bl	800a1ac <memcpy>
 800224a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800224e:	f7ff fa4f 	bl	80016f0 <OBD2_Request>

  OBD2_Request(obd_comm);
 8002252:	4c1f      	ldr	r4, [pc, #124]	; (80022d0 <main+0x180>)
 8002254:	4668      	mov	r0, sp
 8002256:	f104 0310 	add.w	r3, r4, #16
 800225a:	2260      	movs	r2, #96	; 0x60
 800225c:	4619      	mov	r1, r3
 800225e:	f007 ffa5 	bl	800a1ac <memcpy>
 8002262:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002266:	f7ff fa43 	bl	80016f0 <OBD2_Request>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((HAL_GetTick() - timer_adc) >= ADC_SAMPLE_TIME)
 800226a:	f001 f9ad 	bl	80035c8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002278:	d30a      	bcc.n	8002290 <main+0x140>
	  {
		  obd_comm.voltage = ADC_Average(adc_buffer);
 800227a:	4814      	ldr	r0, [pc, #80]	; (80022cc <main+0x17c>)
 800227c:	f000 fa78 	bl	8002770 <ADC_Average>
 8002280:	eef0 7a40 	vmov.f32	s15, s0
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <main+0x180>)
 8002286:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		  timer_adc = HAL_GetTick();
 800228a:	f001 f99d 	bl	80035c8 <HAL_GetTick>
 800228e:	6078      	str	r0, [r7, #4]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(obd_comm.voltage >= 12.75)
 8002290:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <main+0x180>)
 8002292:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002296:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80022d4 <main+0x184>
 800229a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	db0b      	blt.n	80022bc <main+0x16c>
	  {
		  OBD2_Request(obd_comm);
 80022a4:	4c0a      	ldr	r4, [pc, #40]	; (80022d0 <main+0x180>)
 80022a6:	4668      	mov	r0, sp
 80022a8:	f104 0310 	add.w	r3, r4, #16
 80022ac:	2260      	movs	r2, #96	; 0x60
 80022ae:	4619      	mov	r1, r3
 80022b0:	f007 ff7c 	bl	800a1ac <memcpy>
 80022b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022b8:	f7ff fa1a 	bl	80016f0 <OBD2_Request>
	  if((HAL_GetTick() - timer_adc) >= ADC_SAMPLE_TIME)
 80022bc:	e7d5      	b.n	800226a <main+0x11a>
 80022be:	bf00      	nop
 80022c0:	2000016c 	.word	0x2000016c
 80022c4:	0800d58c 	.word	0x0800d58c
 80022c8:	20000398 	.word	0x20000398
 80022cc:	20000640 	.word	0x20000640
 80022d0:	200006c0 	.word	0x200006c0
 80022d4:	414c0000 	.word	0x414c0000

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b096      	sub	sp, #88	; 0x58
 80022dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	2244      	movs	r2, #68	; 0x44
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f007 ff6e 	bl	800a1c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ec:	463b      	mov	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022fe:	f004 fd69 	bl	8006dd4 <HAL_PWREx_ControlVoltageScaling>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002308:	f000 fa9a 	bl	8002840 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800230c:	2309      	movs	r3, #9
 800230e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002314:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002316:	2301      	movs	r3, #1
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800231a:	2302      	movs	r3, #2
 800231c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800231e:	2303      	movs	r3, #3
 8002320:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002326:	230a      	movs	r3, #10
 8002328:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800232a:	2307      	movs	r3, #7
 800232c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800232e:	2302      	movs	r3, #2
 8002330:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002332:	2302      	movs	r3, #2
 8002334:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4618      	mov	r0, r3
 800233c:	f004 fda0 	bl	8006e80 <HAL_RCC_OscConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002346:	f000 fa7b 	bl	8002840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234a:	230f      	movs	r3, #15
 800234c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800234e:	2303      	movs	r3, #3
 8002350:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800235e:	463b      	mov	r3, r7
 8002360:	2104      	movs	r1, #4
 8002362:	4618      	mov	r0, r3
 8002364:	f005 f9a0 	bl	80076a8 <HAL_RCC_ClockConfig>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800236e:	f000 fa67 	bl	8002840 <Error_Handler>
  }
}
 8002372:	bf00      	nop
 8002374:	3758      	adds	r7, #88	; 0x58
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002382:	463b      	mov	r3, r7
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
 8002390:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002392:	4b29      	ldr	r3, [pc, #164]	; (8002438 <MX_ADC1_Init+0xbc>)
 8002394:	4a29      	ldr	r2, [pc, #164]	; (800243c <MX_ADC1_Init+0xc0>)
 8002396:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <MX_ADC1_Init+0xbc>)
 800239a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800239e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023b4:	2204      	movs	r2, #4
 80023b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80023c4:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023da:	2200      	movs	r2, #0
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023f4:	4810      	ldr	r0, [pc, #64]	; (8002438 <MX_ADC1_Init+0xbc>)
 80023f6:	f001 fb05 	bl	8003a04 <HAL_ADC_Init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002400:	f000 fa1e 	bl	8002840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_ADC1_Init+0xc4>)
 8002406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002408:	2306      	movs	r3, #6
 800240a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800240c:	2307      	movs	r3, #7
 800240e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002410:	237f      	movs	r3, #127	; 0x7f
 8002412:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002414:	2304      	movs	r3, #4
 8002416:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_ADC1_Init+0xbc>)
 8002422:	f001 fcd9 	bl	8003dd8 <HAL_ADC_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800242c:	f000 fa08 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000398 	.word	0x20000398
 800243c:	50040000 	.word	0x50040000
 8002440:	3ac04000 	.word	0x3ac04000

08002444 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_I2C2_Init+0x74>)
 800244a:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <MX_I2C2_Init+0x78>)
 800244c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <MX_I2C2_Init+0x7c>)
 8002452:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_I2C2_Init+0x74>)
 800245c:	2201      	movs	r2, #1
 800245e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_I2C2_Init+0x74>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_I2C2_Init+0x74>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800247e:	480e      	ldr	r0, [pc, #56]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002480:	f003 ffae 	bl	80063e0 <HAL_I2C_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800248a:	f000 f9d9 	bl	8002840 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800248e:	2100      	movs	r1, #0
 8002490:	4809      	ldr	r0, [pc, #36]	; (80024b8 <MX_I2C2_Init+0x74>)
 8002492:	f004 fb9b 	bl	8006bcc <HAL_I2CEx_ConfigAnalogFilter>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800249c:	f000 f9d0 	bl	8002840 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024a0:	2100      	movs	r1, #0
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_I2C2_Init+0x74>)
 80024a4:	f004 fbdd 	bl	8006c62 <HAL_I2CEx_ConfigDigitalFilter>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80024ae:	f000 f9c7 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000046c 	.word	0x2000046c
 80024bc:	40005800 	.word	0x40005800
 80024c0:	10909cec 	.word	0x10909cec

080024c4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <MX_IWDG_Init+0x34>)
 80024ca:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <MX_IWDG_Init+0x38>)
 80024cc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <MX_IWDG_Init+0x34>)
 80024d0:	2204      	movs	r2, #4
 80024d2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <MX_IWDG_Init+0x34>)
 80024d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80024da:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <MX_IWDG_Init+0x34>)
 80024de:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80024e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <MX_IWDG_Init+0x34>)
 80024e6:	f004 fc08 	bl	8006cfa <HAL_IWDG_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80024f0:	f000 f9a6 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200004c0 	.word	0x200004c0
 80024fc:	40003000 	.word	0x40003000

08002500 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <MX_TIM1_Init+0xa0>)
 8002520:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <MX_TIM1_Init+0xa4>)
 8002522:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800;
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <MX_TIM1_Init+0xa0>)
 8002526:	f44f 7248 	mov.w	r2, #800	; 0x320
 800252a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252c:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <MX_TIM1_Init+0xa0>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <MX_TIM1_Init+0xa0>)
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <MX_TIM1_Init+0xa0>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <MX_TIM1_Init+0xa0>)
 8002542:	2200      	movs	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <MX_TIM1_Init+0xa0>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800254c:	4814      	ldr	r0, [pc, #80]	; (80025a0 <MX_TIM1_Init+0xa0>)
 800254e:	f005 fdd7 	bl	8008100 <HAL_TIM_Base_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002558:	f000 f972 	bl	8002840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800255c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002560:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	4619      	mov	r1, r3
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <MX_TIM1_Init+0xa0>)
 800256a:	f005 ffc3 	bl	80084f4 <HAL_TIM_ConfigClockSource>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002574:	f000 f964 	bl	8002840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002578:	2300      	movs	r3, #0
 800257a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <MX_TIM1_Init+0xa0>)
 800258a:	f006 f9a3 	bl	80088d4 <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002594:	f000 f954 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200004d0 	.word	0x200004d0
 80025a4:	40012c00 	.word	0x40012c00

080025a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <MX_TIM6_Init+0x68>)
 80025ba:	4a16      	ldr	r2, [pc, #88]	; (8002614 <MX_TIM6_Init+0x6c>)
 80025bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80025be:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_TIM6_Init+0x68>)
 80025c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80025c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <MX_TIM6_Init+0x68>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <MX_TIM6_Init+0x68>)
 80025ce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80025d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <MX_TIM6_Init+0x68>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025da:	480d      	ldr	r0, [pc, #52]	; (8002610 <MX_TIM6_Init+0x68>)
 80025dc:	f005 fd90 	bl	8008100 <HAL_TIM_Base_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80025e6:	f000 f92b 	bl	8002840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <MX_TIM6_Init+0x68>)
 80025f8:	f006 f96c 	bl	80088d4 <HAL_TIMEx_MasterConfigSynchronization>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002602:	f000 f91d 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000051c 	.word	0x2000051c
 8002614:	40001000 	.word	0x40001000

08002618 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <MX_DMA_Init+0x48>)
 8002620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002622:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <MX_DMA_Init+0x48>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6493      	str	r3, [r2, #72]	; 0x48
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <MX_DMA_Init+0x48>)
 800262c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	200b      	movs	r0, #11
 800263c:	f003 f8e7 	bl	800580e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002640:	200b      	movs	r0, #11
 8002642:	f003 f900 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	200f      	movs	r0, #15
 800264c:	f003 f8df 	bl	800580e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002650:	200f      	movs	r0, #15
 8002652:	f003 f8f8 	bl	8005846 <HAL_NVIC_EnableIRQ>

}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000

08002664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <MX_GPIO_Init+0x100>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	4a39      	ldr	r2, [pc, #228]	; (8002764 <MX_GPIO_Init+0x100>)
 8002680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <MX_GPIO_Init+0x100>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <MX_GPIO_Init+0x100>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	4a33      	ldr	r2, [pc, #204]	; (8002764 <MX_GPIO_Init+0x100>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <MX_GPIO_Init+0x100>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026aa:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <MX_GPIO_Init+0x100>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	4a2d      	ldr	r2, [pc, #180]	; (8002764 <MX_GPIO_Init+0x100>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <MX_GPIO_Init+0x100>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <MX_GPIO_Init+0x100>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a27      	ldr	r2, [pc, #156]	; (8002764 <MX_GPIO_Init+0x100>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <MX_GPIO_Init+0x100>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 80026da:	2200      	movs	r2, #0
 80026dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e0:	4821      	ldr	r0, [pc, #132]	; (8002768 <MX_GPIO_Init+0x104>)
 80026e2:	f003 fe4d 	bl	8006380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 80026e6:	2200      	movs	r2, #0
 80026e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f0:	f003 fe46 	bl	8006380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_S_Pin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 80026f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026fe:	2302      	movs	r3, #2
 8002700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4619      	mov	r1, r3
 800270c:	4816      	ldr	r0, [pc, #88]	; (8002768 <MX_GPIO_Init+0x104>)
 800270e:	f003 fbcb 	bl	8005ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LLine_Pin */
  GPIO_InitStruct.Pin = LLine_Pin;
 8002712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002718:	2301      	movs	r3, #1
 800271a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LLine_GPIO_Port, &GPIO_InitStruct);
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272e:	f003 fbbb 	bl	8005ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_BTN_Pin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin;
 8002732:	2340      	movs	r3, #64	; 0x40
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002736:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800273a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MENU_BTN_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4809      	ldr	r0, [pc, #36]	; (800276c <MX_GPIO_Init+0x108>)
 8002748:	f003 fbae 	bl	8005ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800274c:	2200      	movs	r2, #0
 800274e:	2100      	movs	r1, #0
 8002750:	2017      	movs	r0, #23
 8002752:	f003 f85c 	bl	800580e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002756:	2017      	movs	r0, #23
 8002758:	f003 f875 	bl	8005846 <HAL_NVIC_EnableIRQ>

}
 800275c:	bf00      	nop
 800275e:	3728      	adds	r7, #40	; 0x28
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	48000800 	.word	0x48000800
 800276c:	48000400 	.word	0x48000400

08002770 <ADC_Average>:

/* USER CODE BEGIN 4 */
static float ADC_Average(uint16_t *data)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	float result = 0;
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < sizeof(data); i++)
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	e011      	b.n	80027a8 <ADC_Average+0x38>
	{
		result += data[i];
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002796:	ed97 7a03 	vldr	s14, [r7, #12]
 800279a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279e:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < sizeof(data); i++)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d9ea      	bls.n	8002784 <ADC_Average+0x14>
	}
	result = result / sizeof(data);
 80027ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80027b2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80027b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ba:	edc7 7a03 	vstr	s15, [r7, #12]
	result = result * (3.3 / 4095);
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7fd fec2 	bl	8000548 <__aeabi_f2d>
 80027c4:	a31c      	add	r3, pc, #112	; (adr r3, 8002838 <ADC_Average+0xc8>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd ff15 	bl	80005f8 <__aeabi_dmul>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7fe f9e7 	bl	8000ba8 <__aeabi_d2f>
 80027da:	4603      	mov	r3, r0
 80027dc:	60fb      	str	r3, [r7, #12]
	result = (result * (100 + 27)) / 27;
 80027de:	edd7 7a03 	vldr	s15, [r7, #12]
 80027e2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002830 <ADC_Average+0xc0>
 80027e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027ea:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 80027ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f2:	edc7 7a03 	vstr	s15, [r7, #12]
	result = roundf(result*100) / 100;
 80027f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80027fa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002834 <ADC_Average+0xc4>
 80027fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002802:	eeb0 0a67 	vmov.f32	s0, s15
 8002806:	f00a fbd1 	bl	800cfac <roundf>
 800280a:	eeb0 7a40 	vmov.f32	s14, s0
 800280e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002834 <ADC_Average+0xc4>
 8002812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002816:	edc7 7a03 	vstr	s15, [r7, #12]
	return result;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	ee07 3a90 	vmov	s15, r3
}
 8002820:	eeb0 0a67 	vmov.f32	s0, s15
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	f3af 8000 	nop.w
 8002830:	42fe0000 	.word	0x42fe0000
 8002834:	42c80000 	.word	0x42c80000
 8002838:	e734d9b4 	.word	0xe734d9b4
 800283c:	3f4a680c 	.word	0x3f4a680c

08002840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002844:	b672      	cpsid	i
}
 8002846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002848:	e7fe      	b.n	8002848 <Error_Handler+0x8>
	...

0800284c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <HAL_MspInit+0x44>)
 8002854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_MspInit+0x44>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6613      	str	r3, [r2, #96]	; 0x60
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_MspInit+0x44>)
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_MspInit+0x44>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <HAL_MspInit+0x44>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6593      	str	r3, [r2, #88]	; 0x58
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_MspInit+0x44>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000

08002894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0a0      	sub	sp, #128	; 0x80
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	225c      	movs	r2, #92	; 0x5c
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f007 fc87 	bl	800a1c8 <memset>
  if(hadc->Instance==ADC1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a3a      	ldr	r2, [pc, #232]	; (80029a8 <HAL_ADC_MspInit+0x114>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d16d      	bne.n	80029a0 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028ce:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80028d0:	2303      	movs	r3, #3
 80028d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80028d8:	2308      	movs	r3, #8
 80028da:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80028dc:	2307      	movs	r3, #7
 80028de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80028e0:	2302      	movs	r3, #2
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80028e4:	2302      	movs	r3, #2
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80028e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 f8fa 	bl	8007aec <HAL_RCCEx_PeriphCLKConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80028fe:	f7ff ff9f 	bl	8002840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <HAL_ADC_MspInit+0x118>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	4a29      	ldr	r2, [pc, #164]	; (80029ac <HAL_ADC_MspInit+0x118>)
 8002908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800290c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_ADC_MspInit+0x118>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800291a:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_ADC_MspInit+0x118>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	4a23      	ldr	r2, [pc, #140]	; (80029ac <HAL_ADC_MspInit+0x118>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_ADC_MspInit+0x118>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	f003 0304 	and.w	r3, r3, #4
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 8002932:	2320      	movs	r3, #32
 8002934:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002936:	230b      	movs	r3, #11
 8002938:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002942:	4619      	mov	r1, r3
 8002944:	481a      	ldr	r0, [pc, #104]	; (80029b0 <HAL_ADC_MspInit+0x11c>)
 8002946:	f003 faaf 	bl	8005ea8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 800294c:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_ADC_MspInit+0x124>)
 800294e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 8002952:	2200      	movs	r2, #0
 8002954:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800295c:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002970:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 8002972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002976:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 800297a:	2220      	movs	r2, #32
 800297c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002984:	480b      	ldr	r0, [pc, #44]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 8002986:	f002 ff87 	bl	8005898 <HAL_DMA_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8002990:	f7ff ff56 	bl	8002840 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 8002998:	64da      	str	r2, [r3, #76]	; 0x4c
 800299a:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <HAL_ADC_MspInit+0x120>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029a0:	bf00      	nop
 80029a2:	3780      	adds	r7, #128	; 0x80
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	50040000 	.word	0x50040000
 80029ac:	40021000 	.word	0x40021000
 80029b0:	48000800 	.word	0x48000800
 80029b4:	200003fc 	.word	0x200003fc
 80029b8:	40020008 	.word	0x40020008

080029bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <HAL_CAN_MspInit+0xa0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d139      	bne.n	8002a52 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_CAN_MspInit+0xa4>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	4a1f      	ldr	r2, [pc, #124]	; (8002a60 <HAL_CAN_MspInit+0xa4>)
 80029e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029e8:	6593      	str	r3, [r2, #88]	; 0x58
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_CAN_MspInit+0xa4>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_CAN_MspInit+0xa4>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <HAL_CAN_MspInit+0xa4>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <HAL_CAN_MspInit+0xa4>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8002a0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a20:	2309      	movs	r3, #9
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2e:	f003 fa3b 	bl	8005ea8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2101      	movs	r1, #1
 8002a36:	2014      	movs	r0, #20
 8002a38:	f002 fee9 	bl	800580e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a3c:	2014      	movs	r0, #20
 8002a3e:	f002 ff02 	bl	8005846 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2101      	movs	r1, #1
 8002a46:	2015      	movs	r0, #21
 8002a48:	f002 fee1 	bl	800580e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002a4c:	2015      	movs	r0, #21
 8002a4e:	f002 fefa 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a52:	bf00      	nop
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40006400 	.word	0x40006400
 8002a60:	40021000 	.word	0x40021000

08002a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0a0      	sub	sp, #128	; 0x80
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a7c:	f107 0310 	add.w	r3, r7, #16
 8002a80:	225c      	movs	r2, #92	; 0x5c
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f007 fb9f 	bl	800a1c8 <memset>
  if(hi2c->Instance==I2C2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_I2C_MspInit+0xa8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d136      	bne.n	8002b02 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9c:	f107 0310 	add.w	r3, r7, #16
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f005 f823 	bl	8007aec <HAL_RCCEx_PeriphCLKConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002aac:	f7ff fec8 	bl	8002840 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_I2C_MspInit+0xac>)
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_I2C_MspInit+0xac>)
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_I2C_MspInit+0xac>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002ac8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002acc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ace:	2312      	movs	r3, #18
 8002ad0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ada:	2304      	movs	r3, #4
 8002adc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ade:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	480b      	ldr	r0, [pc, #44]	; (8002b14 <HAL_I2C_MspInit+0xb0>)
 8002ae6:	f003 f9df 	bl	8005ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_I2C_MspInit+0xac>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_I2C_MspInit+0xac>)
 8002af0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002af4:	6593      	str	r3, [r2, #88]	; 0x58
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_I2C_MspInit+0xac>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	3780      	adds	r7, #128	; 0x80
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40005800 	.word	0x40005800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	48000400 	.word	0x48000400

08002b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <HAL_TIM_Base_MspInit+0xa8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d12c      	bne.n	8002b84 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <HAL_TIM_Base_MspInit+0xac>)
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <HAL_TIM_Base_MspInit+0xac>)
 8002b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b34:	6613      	str	r3, [r2, #96]	; 0x60
 8002b36:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_TIM_Base_MspInit+0xac>)
 8002b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	2018      	movs	r0, #24
 8002b48:	f002 fe61 	bl	800580e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002b4c:	2018      	movs	r0, #24
 8002b4e:	f002 fe7a 	bl	8005846 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	2019      	movs	r0, #25
 8002b58:	f002 fe59 	bl	800580e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b5c:	2019      	movs	r0, #25
 8002b5e:	f002 fe72 	bl	8005846 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	201a      	movs	r0, #26
 8002b68:	f002 fe51 	bl	800580e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002b6c:	201a      	movs	r0, #26
 8002b6e:	f002 fe6a 	bl	8005846 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	201b      	movs	r0, #27
 8002b78:	f002 fe49 	bl	800580e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b7c:	201b      	movs	r0, #27
 8002b7e:	f002 fe62 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b82:	e018      	b.n	8002bb6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <HAL_TIM_Base_MspInit+0xb0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d113      	bne.n	8002bb6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_TIM_Base_MspInit+0xac>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b92:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <HAL_TIM_Base_MspInit+0xac>)
 8002b94:	f043 0310 	orr.w	r3, r3, #16
 8002b98:	6593      	str	r3, [r2, #88]	; 0x58
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_TIM_Base_MspInit+0xac>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 1);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2102      	movs	r1, #2
 8002baa:	2036      	movs	r0, #54	; 0x36
 8002bac:	f002 fe2f 	bl	800580e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bb0:	2036      	movs	r0, #54	; 0x36
 8002bb2:	f002 fe48 	bl	8005846 <HAL_NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40001000 	.word	0x40001000

08002bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b0a0      	sub	sp, #128	; 0x80
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	225c      	movs	r2, #92	; 0x5c
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f007 faeb 	bl	800a1c8 <memset>
  if(huart->Instance==USART1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a38      	ldr	r2, [pc, #224]	; (8002cd8 <HAL_UART_MspInit+0x10c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d169      	bne.n	8002cd0 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c00:	2300      	movs	r3, #0
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c04:	f107 0310 	add.w	r3, r7, #16
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f004 ff6f 	bl	8007aec <HAL_RCCEx_PeriphCLKConfig>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c14:	f7ff fe14 	bl	8002840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_UART_MspInit+0x110>)
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1c:	4a2f      	ldr	r2, [pc, #188]	; (8002cdc <HAL_UART_MspInit+0x110>)
 8002c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c22:	6613      	str	r3, [r2, #96]	; 0x60
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_UART_MspInit+0x110>)
 8002c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_UART_MspInit+0x110>)
 8002c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c34:	4a29      	ldr	r2, [pc, #164]	; (8002cdc <HAL_UART_MspInit+0x110>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_UART_MspInit+0x110>)
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = KLine_TX_Pin|KLine_RX_Pin;
 8002c48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c62:	4619      	mov	r1, r3
 8002c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c68:	f003 f91e 	bl	8005ea8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <HAL_UART_MspInit+0x118>)
 8002c70:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002c72:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002c74:	2202      	movs	r2, #2
 8002c76:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c9c:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002c9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ca2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ca4:	480e      	ldr	r0, [pc, #56]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002ca6:	f002 fdf7 	bl	8005898 <HAL_DMA_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002cb0:	f7ff fdc6 	bl	8002840 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002cb8:	671a      	str	r2, [r3, #112]	; 0x70
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_UART_MspInit+0x114>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2025      	movs	r0, #37	; 0x25
 8002cc6:	f002 fda2 	bl	800580e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cca:	2025      	movs	r0, #37	; 0x25
 8002ccc:	f002 fdbb 	bl	8005846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cd0:	bf00      	nop
 8002cd2:	3780      	adds	r7, #128	; 0x80
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	200005ec 	.word	0x200005ec
 8002ce4:	40020058 	.word	0x40020058

08002ce8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <HAL_UART_MspDeInit+0x44>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d113      	bne.n	8002d22 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_UART_MspDeInit+0x48>)
 8002cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfe:	4a0c      	ldr	r2, [pc, #48]	; (8002d30 <HAL_UART_MspDeInit+0x48>)
 8002d00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d04:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, KLine_TX_Pin|KLine_RX_Pin);
 8002d06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0e:	f003 fa45 	bl	800619c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 fe76 	bl	8005a08 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002d1c:	2025      	movs	r0, #37	; 0x25
 8002d1e:	f002 fda0 	bl	8005862 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40013800 	.word	0x40013800
 8002d30:	40021000 	.word	0x40021000

08002d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <NMI_Handler+0x4>

08002d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d3e:	e7fe      	b.n	8002d3e <HardFault_Handler+0x4>

08002d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <MemManage_Handler+0x4>

08002d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4a:	e7fe      	b.n	8002d4a <BusFault_Handler+0x4>

08002d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <UsageFault_Handler+0x4>

08002d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d80:	f000 fc0e 	bl	80035a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <DMA1_Channel1_IRQHandler+0x10>)
 8002d8e:	f002 ffac 	bl	8005cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200003fc 	.word	0x200003fc

08002d9c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <DMA1_Channel5_IRQHandler+0x10>)
 8002da2:	f002 ffa2 	bl	8005cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200005ec 	.word	0x200005ec

08002db0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <CAN1_RX0_IRQHandler+0x10>)
 8002db6:	f002 fa06 	bl	80051c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000444 	.word	0x20000444

08002dc4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <CAN1_RX1_IRQHandler+0x10>)
 8002dca:	f002 f9fc 	bl	80051c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000444 	.word	0x20000444

08002dd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_BTN_Pin);
 8002ddc:	2040      	movs	r0, #64	; 0x40
 8002dde:	f003 fae7 	bl	80063b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002dee:	f005 fa62 	bl	80082b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200004d0 	.word	0x200004d0

08002dfc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e00:	4802      	ldr	r0, [pc, #8]	; (8002e0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002e02:	f005 fa58 	bl	80082b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200004d0 	.word	0x200004d0

08002e10 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002e16:	f005 fa4e 	bl	80082b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200004d0 	.word	0x200004d0

08002e24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <TIM1_CC_IRQHandler+0x10>)
 8002e2a:	f005 fa44 	bl	80082b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200004d0 	.word	0x200004d0

08002e38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <USART1_IRQHandler+0x10>)
 8002e3e:	f006 f80f 	bl	8008e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000568 	.word	0x20000568

08002e4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <TIM6_DAC_IRQHandler+0x10>)
 8002e52:	f005 fa30 	bl	80082b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000051c 	.word	0x2000051c

08002e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
	return 1;
 8002e64:	2301      	movs	r3, #1
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <_kill>:

int _kill(int pid, int sig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e7a:	f007 f96d 	bl	800a158 <__errno>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2216      	movs	r2, #22
 8002e82:	601a      	str	r2, [r3, #0]
	return -1;
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_exit>:

void _exit (int status)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ffe7 	bl	8002e70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ea2:	e7fe      	b.n	8002ea2 <_exit+0x12>

08002ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e00a      	b.n	8002ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eb6:	f3af 8000 	nop.w
 8002eba:	4601      	mov	r1, r0
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60ba      	str	r2, [r7, #8]
 8002ec2:	b2ca      	uxtb	r2, r1
 8002ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	dbf0      	blt.n	8002eb6 <_read+0x12>
	}

return len;
 8002ed4:	687b      	ldr	r3, [r7, #4]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e009      	b.n	8002f04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	60ba      	str	r2, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbf1      	blt.n	8002ef0 <_write+0x12>
	}
	return len;
 8002f0c:	687b      	ldr	r3, [r7, #4]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_close>:

int _close(int file)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
	return -1;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <_isatty>:

int _isatty(int file)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
	return 1;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <_sbrk+0x5c>)
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <_sbrk+0x60>)
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <_sbrk+0x64>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <_sbrk+0x68>)
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb0:	f007 f8d2 	bl	800a158 <__errno>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	e009      	b.n	8002fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <_sbrk+0x64>)
 8002fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20010000 	.word	0x20010000
 8002fe0:	00000400 	.word	0x00000400
 8002fe4:	20000730 	.word	0x20000730
 8002fe8:	20000b50 	.word	0x20000b50

08002fec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <SystemInit+0x28>)
 8002ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ff6:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <SystemInit+0x28>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <SystemInit+0x28>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <Reset_Handler>:
 8003018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003050 <LoopForever+0x2>
 800301c:	f7ff ffe6 	bl	8002fec <SystemInit>
 8003020:	480c      	ldr	r0, [pc, #48]	; (8003054 <LoopForever+0x6>)
 8003022:	490d      	ldr	r1, [pc, #52]	; (8003058 <LoopForever+0xa>)
 8003024:	4a0d      	ldr	r2, [pc, #52]	; (800305c <LoopForever+0xe>)
 8003026:	2300      	movs	r3, #0
 8003028:	e002      	b.n	8003030 <LoopCopyDataInit>

0800302a <CopyDataInit>:
 800302a:	58d4      	ldr	r4, [r2, r3]
 800302c:	50c4      	str	r4, [r0, r3]
 800302e:	3304      	adds	r3, #4

08003030 <LoopCopyDataInit>:
 8003030:	18c4      	adds	r4, r0, r3
 8003032:	428c      	cmp	r4, r1
 8003034:	d3f9      	bcc.n	800302a <CopyDataInit>
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <LoopForever+0x12>)
 8003038:	4c0a      	ldr	r4, [pc, #40]	; (8003064 <LoopForever+0x16>)
 800303a:	2300      	movs	r3, #0
 800303c:	e001      	b.n	8003042 <LoopFillZerobss>

0800303e <FillZerobss>:
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	3204      	adds	r2, #4

08003042 <LoopFillZerobss>:
 8003042:	42a2      	cmp	r2, r4
 8003044:	d3fb      	bcc.n	800303e <FillZerobss>
 8003046:	f007 f88d 	bl	800a164 <__libc_init_array>
 800304a:	f7ff f881 	bl	8002150 <main>

0800304e <LoopForever>:
 800304e:	e7fe      	b.n	800304e <LoopForever>
 8003050:	20010000 	.word	0x20010000
 8003054:	20000000 	.word	0x20000000
 8003058:	2000035c 	.word	0x2000035c
 800305c:	0801033c 	.word	0x0801033c
 8003060:	2000035c 	.word	0x2000035c
 8003064:	20000b50 	.word	0x20000b50

08003068 <ADC1_IRQHandler>:
 8003068:	e7fe      	b.n	8003068 <ADC1_IRQHandler>

0800306a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af04      	add	r7, sp, #16
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	9302      	str	r3, [sp, #8]
 8003088:	2301      	movs	r3, #1
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	1dfb      	adds	r3, r7, #7
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2301      	movs	r3, #1
 8003092:	2200      	movs	r2, #0
 8003094:	2178      	movs	r1, #120	; 0x78
 8003096:	4803      	ldr	r0, [pc, #12]	; (80030a4 <ssd1306_WriteCommand+0x2c>)
 8003098:	f003 fa32 	bl	8006500 <HAL_I2C_Mem_Write>
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000046c 	.word	0x2000046c

080030a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af04      	add	r7, sp, #16
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ba:	9202      	str	r2, [sp, #8]
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	2301      	movs	r3, #1
 80030c4:	2240      	movs	r2, #64	; 0x40
 80030c6:	2178      	movs	r1, #120	; 0x78
 80030c8:	4803      	ldr	r0, [pc, #12]	; (80030d8 <ssd1306_WriteData+0x30>)
 80030ca:	f003 fa19 	bl	8006500 <HAL_I2C_Mem_Write>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000046c 	.word	0x2000046c

080030dc <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80030e0:	f7ff ffc3 	bl	800306a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80030e4:	2064      	movs	r0, #100	; 0x64
 80030e6:	f000 fa7b 	bl	80035e0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80030ea:	2000      	movs	r0, #0
 80030ec:	f000 f9da 	bl	80034a4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80030f0:	2020      	movs	r0, #32
 80030f2:	f7ff ffc1 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7ff ffbe 	bl	8003078 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80030fc:	20b0      	movs	r0, #176	; 0xb0
 80030fe:	f7ff ffbb 	bl	8003078 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003102:	20c8      	movs	r0, #200	; 0xc8
 8003104:	f7ff ffb8 	bl	8003078 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003108:	2000      	movs	r0, #0
 800310a:	f7ff ffb5 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800310e:	2010      	movs	r0, #16
 8003110:	f7ff ffb2 	bl	8003078 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003114:	2040      	movs	r0, #64	; 0x40
 8003116:	f7ff ffaf 	bl	8003078 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800311a:	20ff      	movs	r0, #255	; 0xff
 800311c:	f000 f9ae 	bl	800347c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003120:	20a1      	movs	r0, #161	; 0xa1
 8003122:	f7ff ffa9 	bl	8003078 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003126:	20a6      	movs	r0, #166	; 0xa6
 8003128:	f7ff ffa6 	bl	8003078 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800312c:	20a8      	movs	r0, #168	; 0xa8
 800312e:	f7ff ffa3 	bl	8003078 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003132:	203f      	movs	r0, #63	; 0x3f
 8003134:	f7ff ffa0 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003138:	20a4      	movs	r0, #164	; 0xa4
 800313a:	f7ff ff9d 	bl	8003078 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800313e:	20d3      	movs	r0, #211	; 0xd3
 8003140:	f7ff ff9a 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003144:	2000      	movs	r0, #0
 8003146:	f7ff ff97 	bl	8003078 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800314a:	20d5      	movs	r0, #213	; 0xd5
 800314c:	f7ff ff94 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003150:	20f0      	movs	r0, #240	; 0xf0
 8003152:	f7ff ff91 	bl	8003078 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003156:	20d9      	movs	r0, #217	; 0xd9
 8003158:	f7ff ff8e 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800315c:	2022      	movs	r0, #34	; 0x22
 800315e:	f7ff ff8b 	bl	8003078 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003162:	20da      	movs	r0, #218	; 0xda
 8003164:	f7ff ff88 	bl	8003078 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003168:	2012      	movs	r0, #18
 800316a:	f7ff ff85 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800316e:	20db      	movs	r0, #219	; 0xdb
 8003170:	f7ff ff82 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003174:	2020      	movs	r0, #32
 8003176:	f7ff ff7f 	bl	8003078 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800317a:	208d      	movs	r0, #141	; 0x8d
 800317c:	f7ff ff7c 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003180:	2014      	movs	r0, #20
 8003182:	f7ff ff79 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003186:	2001      	movs	r0, #1
 8003188:	f000 f98c 	bl	80034a4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800318c:	2000      	movs	r0, #0
 800318e:	f000 f80f 	bl	80031b0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003192:	f000 f831 	bl	80031f8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <ssd1306_Init+0xd0>)
 8003198:	2200      	movs	r2, #0
 800319a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <ssd1306_Init+0xd0>)
 800319e:	2200      	movs	r2, #0
 80031a0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80031a2:	4b02      	ldr	r3, [pc, #8]	; (80031ac <ssd1306_Init+0xd0>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	711a      	strb	r2, [r3, #4]
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000b34 	.word	0x20000b34

080031b0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e00d      	b.n	80031dc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <ssd1306_Fill+0x1a>
 80031c6:	2100      	movs	r1, #0
 80031c8:	e000      	b.n	80031cc <ssd1306_Fill+0x1c>
 80031ca:	21ff      	movs	r1, #255	; 0xff
 80031cc:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <ssd1306_Fill+0x44>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	460a      	mov	r2, r1
 80031d4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3301      	adds	r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e2:	d3ed      	bcc.n	80031c0 <ssd1306_Fill+0x10>
    }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000734 	.word	0x20000734

080031f8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80031fe:	2300      	movs	r3, #0
 8003200:	71fb      	strb	r3, [r7, #7]
 8003202:	e016      	b.n	8003232 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	3b50      	subs	r3, #80	; 0x50
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff34 	bl	8003078 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003210:	2000      	movs	r0, #0
 8003212:	f7ff ff31 	bl	8003078 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003216:	2010      	movs	r0, #16
 8003218:	f7ff ff2e 	bl	8003078 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	01db      	lsls	r3, r3, #7
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <ssd1306_UpdateScreen+0x4c>)
 8003222:	4413      	add	r3, r2
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ff3e 	bl	80030a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	3301      	adds	r3, #1
 8003230:	71fb      	strb	r3, [r7, #7]
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2b07      	cmp	r3, #7
 8003236:	d9e5      	bls.n	8003204 <ssd1306_UpdateScreen+0xc>
    }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000734 	.word	0x20000734

08003248 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
 8003252:	460b      	mov	r3, r1
 8003254:	71bb      	strb	r3, [r7, #6]
 8003256:	4613      	mov	r3, r2
 8003258:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	db3d      	blt.n	80032de <ssd1306_DrawPixel+0x96>
 8003262:	79bb      	ldrb	r3, [r7, #6]
 8003264:	2b3f      	cmp	r3, #63	; 0x3f
 8003266:	d83a      	bhi.n	80032de <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003268:	797b      	ldrb	r3, [r7, #5]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d11a      	bne.n	80032a4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800326e:	79fa      	ldrb	r2, [r7, #7]
 8003270:	79bb      	ldrb	r3, [r7, #6]
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	b2d8      	uxtb	r0, r3
 8003276:	4603      	mov	r3, r0
 8003278:	01db      	lsls	r3, r3, #7
 800327a:	4413      	add	r3, r2
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <ssd1306_DrawPixel+0xa4>)
 800327e:	5cd3      	ldrb	r3, [r2, r3]
 8003280:	b25a      	sxtb	r2, r3
 8003282:	79bb      	ldrb	r3, [r7, #6]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	b25b      	sxtb	r3, r3
 8003290:	4313      	orrs	r3, r2
 8003292:	b259      	sxtb	r1, r3
 8003294:	79fa      	ldrb	r2, [r7, #7]
 8003296:	4603      	mov	r3, r0
 8003298:	01db      	lsls	r3, r3, #7
 800329a:	4413      	add	r3, r2
 800329c:	b2c9      	uxtb	r1, r1
 800329e:	4a13      	ldr	r2, [pc, #76]	; (80032ec <ssd1306_DrawPixel+0xa4>)
 80032a0:	54d1      	strb	r1, [r2, r3]
 80032a2:	e01d      	b.n	80032e0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80032a4:	79fa      	ldrb	r2, [r7, #7]
 80032a6:	79bb      	ldrb	r3, [r7, #6]
 80032a8:	08db      	lsrs	r3, r3, #3
 80032aa:	b2d8      	uxtb	r0, r3
 80032ac:	4603      	mov	r3, r0
 80032ae:	01db      	lsls	r3, r3, #7
 80032b0:	4413      	add	r3, r2
 80032b2:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <ssd1306_DrawPixel+0xa4>)
 80032b4:	5cd3      	ldrb	r3, [r2, r3]
 80032b6:	b25a      	sxtb	r2, r3
 80032b8:	79bb      	ldrb	r3, [r7, #6]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	4013      	ands	r3, r2
 80032cc:	b259      	sxtb	r1, r3
 80032ce:	79fa      	ldrb	r2, [r7, #7]
 80032d0:	4603      	mov	r3, r0
 80032d2:	01db      	lsls	r3, r3, #7
 80032d4:	4413      	add	r3, r2
 80032d6:	b2c9      	uxtb	r1, r1
 80032d8:	4a04      	ldr	r2, [pc, #16]	; (80032ec <ssd1306_DrawPixel+0xa4>)
 80032da:	54d1      	strb	r1, [r2, r3]
 80032dc:	e000      	b.n	80032e0 <ssd1306_DrawPixel+0x98>
        return;
 80032de:	bf00      	nop
    }
}
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000734 	.word	0x20000734

080032f0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4604      	mov	r4, r0
 80032f8:	1d38      	adds	r0, r7, #4
 80032fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80032fe:	461a      	mov	r2, r3
 8003300:	4623      	mov	r3, r4
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	4613      	mov	r3, r2
 8003306:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b1f      	cmp	r3, #31
 800330c:	d902      	bls.n	8003314 <ssd1306_WriteChar+0x24>
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b7e      	cmp	r3, #126	; 0x7e
 8003312:	d901      	bls.n	8003318 <ssd1306_WriteChar+0x28>
        return 0;
 8003314:	2300      	movs	r3, #0
 8003316:	e06d      	b.n	80033f4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003318:	4b38      	ldr	r3, [pc, #224]	; (80033fc <ssd1306_WriteChar+0x10c>)
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	793b      	ldrb	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	dc06      	bgt.n	8003334 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003326:	4b35      	ldr	r3, [pc, #212]	; (80033fc <ssd1306_WriteChar+0x10c>)
 8003328:	885b      	ldrh	r3, [r3, #2]
 800332a:	461a      	mov	r2, r3
 800332c:	797b      	ldrb	r3, [r7, #5]
 800332e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	dd01      	ble.n	8003338 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003334:	2300      	movs	r3, #0
 8003336:	e05d      	b.n	80033f4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	e04c      	b.n	80033d8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	3b20      	subs	r3, #32
 8003344:	7979      	ldrb	r1, [r7, #5]
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4619      	mov	r1, r3
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	440b      	add	r3, r1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e034      	b.n	80033c8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d012      	beq.n	8003394 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800336e:	4b23      	ldr	r3, [pc, #140]	; (80033fc <ssd1306_WriteChar+0x10c>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	4413      	add	r3, r2
 800337a:	b2d8      	uxtb	r0, r3
 800337c:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <ssd1306_WriteChar+0x10c>)
 800337e:	885b      	ldrh	r3, [r3, #2]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	4413      	add	r3, r2
 8003388:	b2db      	uxtb	r3, r3
 800338a:	7bba      	ldrb	r2, [r7, #14]
 800338c:	4619      	mov	r1, r3
 800338e:	f7ff ff5b 	bl	8003248 <ssd1306_DrawPixel>
 8003392:	e016      	b.n	80033c2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <ssd1306_WriteChar+0x10c>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	4413      	add	r3, r2
 80033a0:	b2d8      	uxtb	r0, r3
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <ssd1306_WriteChar+0x10c>)
 80033a4:	885b      	ldrh	r3, [r3, #2]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	b2d9      	uxtb	r1, r3
 80033b0:	7bbb      	ldrb	r3, [r7, #14]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	f7ff ff43 	bl	8003248 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	793b      	ldrb	r3, [r7, #4]
 80033ca:	461a      	mov	r2, r3
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d3c5      	bcc.n	800335e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	797b      	ldrb	r3, [r7, #5]
 80033da:	461a      	mov	r2, r3
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4293      	cmp	r3, r2
 80033e0:	d3ad      	bcc.n	800333e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <ssd1306_WriteChar+0x10c>)
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	793b      	ldrb	r3, [r7, #4]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	4b03      	ldr	r3, [pc, #12]	; (80033fc <ssd1306_WriteChar+0x10c>)
 80033f0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3724      	adds	r7, #36	; 0x24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	20000b34 	.word	0x20000b34

08003400 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	1d38      	adds	r0, r7, #4
 800340a:	e880 0006 	stmia.w	r0, {r1, r2}
 800340e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8003410:	e012      	b.n	8003438 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	7818      	ldrb	r0, [r3, #0]
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	1d3a      	adds	r2, r7, #4
 800341a:	ca06      	ldmia	r2, {r1, r2}
 800341c:	f7ff ff68 	bl	80032f0 <ssd1306_WriteChar>
 8003420:	4603      	mov	r3, r0
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d002      	beq.n	8003432 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	e008      	b.n	8003444 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e8      	bne.n	8003412 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	781b      	ldrb	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	460a      	mov	r2, r1
 8003456:	71fb      	strb	r3, [r7, #7]
 8003458:	4613      	mov	r3, r2
 800345a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <ssd1306_SetCursor+0x2c>)
 8003462:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003464:	79bb      	ldrb	r3, [r7, #6]
 8003466:	b29a      	uxth	r2, r3
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <ssd1306_SetCursor+0x2c>)
 800346a:	805a      	strh	r2, [r3, #2]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	20000b34 	.word	0x20000b34

0800347c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003486:	2381      	movs	r3, #129	; 0x81
 8003488:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fdf3 	bl	8003078 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fdef 	bl	8003078 <ssd1306_WriteCommand>
}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80034b4:	23af      	movs	r3, #175	; 0xaf
 80034b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80034b8:	4b08      	ldr	r3, [pc, #32]	; (80034dc <ssd1306_SetDisplayOn+0x38>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	715a      	strb	r2, [r3, #5]
 80034be:	e004      	b.n	80034ca <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80034c0:	23ae      	movs	r3, #174	; 0xae
 80034c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <ssd1306_SetDisplayOn+0x38>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fdd3 	bl	8003078 <ssd1306_WriteCommand>
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000b34 	.word	0x20000b34

080034e0 <ssd1306_GetDisplayOn>:

uint8_t ssd1306_GetDisplayOn() {
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
    return SSD1306.DisplayOn;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <ssd1306_GetDisplayOn+0x14>)
 80034e6:	795b      	ldrb	r3, [r3, #5]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000b34 	.word	0x20000b34

080034f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003502:	2003      	movs	r0, #3
 8003504:	f002 f978 	bl	80057f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003508:	2000      	movs	r0, #0
 800350a:	f000 f80d 	bl	8003528 <HAL_InitTick>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	71fb      	strb	r3, [r7, #7]
 8003518:	e001      	b.n	800351e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800351a:	f7ff f997 	bl	800284c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800351e:	79fb      	ldrb	r3, [r7, #7]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003534:	4b17      	ldr	r3, [pc, #92]	; (8003594 <HAL_InitTick+0x6c>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d023      	beq.n	8003584 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800353c:	4b16      	ldr	r3, [pc, #88]	; (8003598 <HAL_InitTick+0x70>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b14      	ldr	r3, [pc, #80]	; (8003594 <HAL_InitTick+0x6c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4619      	mov	r1, r3
 8003546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800354a:	fbb3 f3f1 	udiv	r3, r3, r1
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	4618      	mov	r0, r3
 8003554:	f002 f993 	bl	800587e <HAL_SYSTICK_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b0f      	cmp	r3, #15
 8003562:	d809      	bhi.n	8003578 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003564:	2200      	movs	r2, #0
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	f002 f94f 	bl	800580e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003570:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_InitTick+0x74>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e007      	b.n	8003588 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	e004      	b.n	8003588 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
 8003582:	e001      	b.n	8003588 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000188 	.word	0x20000188
 8003598:	20000168 	.word	0x20000168
 800359c:	20000184 	.word	0x20000184

080035a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_IncTick+0x20>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_IncTick+0x24>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4413      	add	r3, r2
 80035b0:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <HAL_IncTick+0x24>)
 80035b2:	6013      	str	r3, [r2, #0]
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000188 	.word	0x20000188
 80035c4:	20000b3c 	.word	0x20000b3c

080035c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return uwTick;
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <HAL_GetTick+0x14>)
 80035ce:	681b      	ldr	r3, [r3, #0]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000b3c 	.word	0x20000b3c

080035e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035e8:	f7ff ffee 	bl	80035c8 <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f8:	d005      	beq.n	8003606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_Delay+0x44>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003606:	bf00      	nop
 8003608:	f7ff ffde 	bl	80035c8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d8f7      	bhi.n	8003608 <HAL_Delay+0x28>
  {
  }
}
 8003618:	bf00      	nop
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000188 	.word	0x20000188

08003628 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	609a      	str	r2, [r3, #8]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3360      	adds	r3, #96	; 0x60
 80036a2:	461a      	mov	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <LL_ADC_SetOffset+0x44>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	4313      	orrs	r3, r2
 80036c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	03fff000 	.word	0x03fff000

080036d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3360      	adds	r3, #96	; 0x60
 80036e6:	461a      	mov	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3360      	adds	r3, #96	; 0x60
 8003714:	461a      	mov	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	431a      	orrs	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3330      	adds	r3, #48	; 0x30
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	4413      	add	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	211f      	movs	r1, #31
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	401a      	ands	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0e9b      	lsrs	r3, r3, #26
 8003798:	f003 011f 	and.w	r1, r3, #31
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	431a      	orrs	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3314      	adds	r3, #20
 80037c8:	461a      	mov	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	0e5b      	lsrs	r3, r3, #25
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	4413      	add	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	0d1b      	lsrs	r3, r3, #20
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2107      	movs	r1, #7
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	401a      	ands	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	0d1b      	lsrs	r3, r3, #20
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	431a      	orrs	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003828:	43db      	mvns	r3, r3
 800382a:	401a      	ands	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0318 	and.w	r3, r3, #24
 8003832:	4908      	ldr	r1, [pc, #32]	; (8003854 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003834:	40d9      	lsrs	r1, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	400b      	ands	r3, r1
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	431a      	orrs	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	0007ffff 	.word	0x0007ffff

08003858 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6093      	str	r3, [r2, #8]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800388c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003890:	d101      	bne.n	8003896 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80038b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e0:	d101      	bne.n	80038e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800392c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003930:	f043 0202 	orr.w	r2, r3, #2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <LL_ADC_IsEnabled+0x18>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <LL_ADC_IsEnabled+0x1a>
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d101      	bne.n	8003982 <LL_ADC_IsDisableOngoing+0x18>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <LL_ADC_IsDisableOngoing+0x1a>
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d101      	bne.n	80039d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d101      	bne.n	80039f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e12c      	b.n	8003c78 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fe ff31 	bl	8002894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff19 	bl	800387c <LL_ADC_IsDeepPowerDownEnabled>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff feff 	bl	8003858 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff ff34 	bl	80038cc <LL_ADC_IsInternalRegulatorEnabled>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ff18 	bl	80038a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a74:	4b82      	ldr	r3, [pc, #520]	; (8003c80 <HAL_ADC_Init+0x27c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	4a82      	ldr	r2, [pc, #520]	; (8003c84 <HAL_ADC_Init+0x280>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	3301      	adds	r3, #1
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a88:	e002      	b.n	8003a90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f9      	bne.n	8003a8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff16 	bl	80038cc <LL_ADC_IsInternalRegulatorEnabled>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f043 0210 	orr.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff ff76 	bl	80039b8 <LL_ADC_REG_IsConversionOngoing>
 8003acc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 80c5 	bne.w	8003c66 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 80c1 	bne.w	8003c66 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003aec:	f043 0202 	orr.w	r2, r3, #2
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff23 	bl	8003944 <LL_ADC_IsEnabled>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b04:	4860      	ldr	r0, [pc, #384]	; (8003c88 <HAL_ADC_Init+0x284>)
 8003b06:	f7ff ff1d 	bl	8003944 <LL_ADC_IsEnabled>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d105      	bne.n	8003b1c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4619      	mov	r1, r3
 8003b16:	485d      	ldr	r0, [pc, #372]	; (8003c8c <HAL_ADC_Init+0x288>)
 8003b18:	f7ff fd86 	bl	8003628 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	7e5b      	ldrb	r3, [r3, #25]
 8003b20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003b2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003b32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d106      	bne.n	8003b58 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	045b      	lsls	r3, r3, #17
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	4b45      	ldr	r3, [pc, #276]	; (8003c90 <HAL_ADC_Init+0x28c>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	69b9      	ldr	r1, [r7, #24]
 8003b84:	430b      	orrs	r3, r1
 8003b86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff13 	bl	80039b8 <LL_ADC_REG_IsConversionOngoing>
 8003b92:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff20 	bl	80039de <LL_ADC_INJ_IsConversionOngoing>
 8003b9e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d13d      	bne.n	8003c22 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d13a      	bne.n	8003c22 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bb0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bb8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc8:	f023 0302 	bic.w	r3, r3, #2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	69b9      	ldr	r1, [r7, #24]
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d118      	bne.n	8003c12 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bf6:	4311      	orrs	r1, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003bfc:	4311      	orrs	r1, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c02:	430a      	orrs	r2, r1
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	611a      	str	r2, [r3, #16]
 8003c10:	e007      	b.n	8003c22 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10c      	bne.n	8003c44 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	f023 010f 	bic.w	r1, r3, #15
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	1e5a      	subs	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
 8003c42:	e007      	b.n	8003c54 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 020f 	bic.w	r2, r2, #15
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	f023 0303 	bic.w	r3, r3, #3
 8003c5c:	f043 0201 	orr.w	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
 8003c64:	e007      	b.n	8003c76 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000168 	.word	0x20000168
 8003c84:	053e2d63 	.word	0x053e2d63
 8003c88:	50040000 	.word	0x50040000
 8003c8c:	50040300 	.word	0x50040300
 8003c90:	fff0c007 	.word	0xfff0c007

08003c94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fe87 	bl	80039b8 <LL_ADC_REG_IsConversionOngoing>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d167      	bne.n	8003d80 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_Start_DMA+0x2a>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e063      	b.n	8003d86 <HAL_ADC_Start_DMA+0xf2>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fc66 	bl	8004598 <ADC_Enable>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d14f      	bne.n	8003d76 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d006      	beq.n	8003d04 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f023 0206 	bic.w	r2, r3, #6
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	659a      	str	r2, [r3, #88]	; 0x58
 8003d02:	e002      	b.n	8003d0a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	4a20      	ldr	r2, [pc, #128]	; (8003d90 <HAL_ADC_Start_DMA+0xfc>)
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <HAL_ADC_Start_DMA+0x100>)
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <HAL_ADC_Start_DMA+0x104>)
 8003d20:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	221c      	movs	r2, #28
 8003d28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0210 	orr.w	r2, r2, #16
 8003d40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3340      	adds	r3, #64	; 0x40
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f001 fee3 	bl	8005b2c <HAL_DMA_Start_IT>
 8003d66:	4603      	mov	r3, r0
 8003d68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fe0e 	bl	8003990 <LL_ADC_REG_StartConversion>
 8003d74:	e006      	b.n	8003d84 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003d7e:	e001      	b.n	8003d84 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
 8003d82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	08004763 	.word	0x08004763
 8003d94:	0800483b 	.word	0x0800483b
 8003d98:	08004857 	.word	0x08004857

08003d9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b0b6      	sub	sp, #216	; 0xd8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x22>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e3b9      	b.n	800456e <HAL_ADC_ConfigChannel+0x796>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fdd6 	bl	80039b8 <LL_ADC_REG_IsConversionOngoing>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 839e 	bne.w	8004550 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	d824      	bhi.n	8003e66 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	3b02      	subs	r3, #2
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d81b      	bhi.n	8003e5e <HAL_ADC_ConfigChannel+0x86>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <HAL_ADC_ConfigChannel+0x54>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e45 	.word	0x08003e45
 8003e34:	08003e4d 	.word	0x08003e4d
 8003e38:	08003e55 	.word	0x08003e55
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	220c      	movs	r2, #12
 8003e40:	605a      	str	r2, [r3, #4]
          break;
 8003e42:	e011      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2212      	movs	r2, #18
 8003e48:	605a      	str	r2, [r3, #4]
          break;
 8003e4a:	e00d      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2218      	movs	r2, #24
 8003e50:	605a      	str	r2, [r3, #4]
          break;
 8003e52:	e009      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5a:	605a      	str	r2, [r3, #4]
          break;
 8003e5c:	e004      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2206      	movs	r2, #6
 8003e62:	605a      	str	r2, [r3, #4]
          break;
 8003e64:	e000      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003e66:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	f7ff fc73 	bl	8003760 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff fd9a 	bl	80039b8 <LL_ADC_REG_IsConversionOngoing>
 8003e84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fda6 	bl	80039de <LL_ADC_INJ_IsConversionOngoing>
 8003e92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f040 81a6 	bne.w	80041ec <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 81a1 	bne.w	80041ec <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f7ff fc7e 	bl	80037b8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	08db      	lsrs	r3, r3, #3
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d00a      	beq.n	8003ef4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6919      	ldr	r1, [r3, #16]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003eee:	f7ff fbcf 	bl	8003690 <LL_ADC_SetOffset>
 8003ef2:	e17b      	b.n	80041ec <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fbec 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x148>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2100      	movs	r1, #0
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fbe1 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	f003 021f 	and.w	r2, r3, #31
 8003f1e:	e01e      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x186>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fbd6 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003f4e:	2320      	movs	r3, #32
 8003f50:	e004      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x19e>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	0e9b      	lsrs	r3, r3, #26
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	e018      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x1d0>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	e004      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d106      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fba5 	bl	8003704 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fb89 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x20e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fb7e 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	0e9b      	lsrs	r3, r3, #26
 8003fe0:	f003 021f 	and.w	r2, r3, #31
 8003fe4:	e01e      	b.n	8004024 <HAL_ADC_ConfigChannel+0x24c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fb73 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800400c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004014:	2320      	movs	r3, #32
 8004016:	e004      	b.n	8004022 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800401c:	fab3 f383 	clz	r3, r3
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_ADC_ConfigChannel+0x264>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	0e9b      	lsrs	r3, r3, #26
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	e018      	b.n	800406e <HAL_ADC_ConfigChannel+0x296>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004060:	2320      	movs	r3, #32
 8004062:	e004      	b.n	800406e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004068:	fab3 f383 	clz	r3, r3
 800406c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800406e:	429a      	cmp	r2, r3
 8004070:	d106      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fb42 	bl	8003704 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fb26 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 800408c:	4603      	mov	r3, r0
 800408e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x2d4>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fb1b 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 80040a2:	4603      	mov	r3, r0
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	f003 021f 	and.w	r2, r3, #31
 80040aa:	e01e      	b.n	80040ea <HAL_ADC_ConfigChannel+0x312>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2102      	movs	r1, #2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fb10 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c2:	fa93 f3a3 	rbit	r3, r3
 80040c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80040ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80040d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80040da:	2320      	movs	r3, #32
 80040dc:	e004      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80040de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x32a>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	0e9b      	lsrs	r3, r3, #26
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	e016      	b.n	8004130 <HAL_ADC_ConfigChannel+0x358>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800411a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004122:	2320      	movs	r3, #32
 8004124:	e004      	b.n	8004130 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800412a:	fab3 f383 	clz	r3, r3
 800412e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004130:	429a      	cmp	r2, r3
 8004132:	d106      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	2102      	movs	r1, #2
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fae1 	bl	8003704 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2103      	movs	r1, #3
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fac5 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 800414e:	4603      	mov	r3, r0
 8004150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <HAL_ADC_ConfigChannel+0x396>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2103      	movs	r1, #3
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff faba 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 8004164:	4603      	mov	r3, r0
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	e017      	b.n	800419e <HAL_ADC_ConfigChannel+0x3c6>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2103      	movs	r1, #3
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff faaf 	bl	80036d8 <LL_ADC_GetOffsetChannel>
 800417a:	4603      	mov	r3, r0
 800417c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004188:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800418a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e003      	b.n	800419c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d105      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x3de>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	0e9b      	lsrs	r3, r3, #26
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	e011      	b.n	80041da <HAL_ADC_ConfigChannel+0x402>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80041c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80041c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80041ce:	2320      	movs	r3, #32
 80041d0:	e003      	b.n	80041da <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041da:	429a      	cmp	r2, r3
 80041dc:	d106      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	2103      	movs	r1, #3
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fa8c 	bl	8003704 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fba7 	bl	8003944 <LL_ADC_IsEnabled>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 813f 	bne.w	800447c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6819      	ldr	r1, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	461a      	mov	r2, r3
 800420c:	f7ff fb00 	bl	8003810 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a8e      	ldr	r2, [pc, #568]	; (8004450 <HAL_ADC_ConfigChannel+0x678>)
 8004216:	4293      	cmp	r3, r2
 8004218:	f040 8130 	bne.w	800447c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x46c>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	0e9b      	lsrs	r3, r3, #26
 8004232:	3301      	adds	r3, #1
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	2b09      	cmp	r3, #9
 800423a:	bf94      	ite	ls
 800423c:	2301      	movls	r3, #1
 800423e:	2300      	movhi	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e019      	b.n	8004278 <HAL_ADC_ConfigChannel+0x4a0>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424c:	fa93 f3a3 	rbit	r3, r3
 8004250:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004254:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800425c:	2320      	movs	r3, #32
 800425e:	e003      	b.n	8004268 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	3301      	adds	r3, #1
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	2b09      	cmp	r3, #9
 8004270:	bf94      	ite	ls
 8004272:	2301      	movls	r3, #1
 8004274:	2300      	movhi	r3, #0
 8004276:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004278:	2b00      	cmp	r3, #0
 800427a:	d079      	beq.n	8004370 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x4c0>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0e9b      	lsrs	r3, r3, #26
 800428e:	3301      	adds	r3, #1
 8004290:	069b      	lsls	r3, r3, #26
 8004292:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004296:	e015      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x4ec>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80042aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80042b0:	2320      	movs	r3, #32
 80042b2:	e003      	b.n	80042bc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80042b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	069b      	lsls	r3, r3, #26
 80042c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x50c>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	0e9b      	lsrs	r3, r3, #26
 80042d6:	3301      	adds	r3, #1
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2101      	movs	r1, #1
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	e017      	b.n	8004314 <HAL_ADC_ConfigChannel+0x53c>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ec:	fa93 f3a3 	rbit	r3, r3
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80042f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80042f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80042fc:	2320      	movs	r3, #32
 80042fe:	e003      	b.n	8004308 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	3301      	adds	r3, #1
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	ea42 0103 	orr.w	r1, r2, r3
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <HAL_ADC_ConfigChannel+0x562>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	0e9b      	lsrs	r3, r3, #26
 800432a:	3301      	adds	r3, #1
 800432c:	f003 021f 	and.w	r2, r3, #31
 8004330:	4613      	mov	r3, r2
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	4413      	add	r3, r2
 8004336:	051b      	lsls	r3, r3, #20
 8004338:	e018      	b.n	800436c <HAL_ADC_ConfigChannel+0x594>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	fa93 f3a3 	rbit	r3, r3
 8004346:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800434c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004352:	2320      	movs	r3, #32
 8004354:	e003      	b.n	800435e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	fab3 f383 	clz	r3, r3
 800435c:	b2db      	uxtb	r3, r3
 800435e:	3301      	adds	r3, #1
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	4613      	mov	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4413      	add	r3, r2
 800436a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800436c:	430b      	orrs	r3, r1
 800436e:	e080      	b.n	8004472 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004378:	2b00      	cmp	r3, #0
 800437a:	d107      	bne.n	800438c <HAL_ADC_ConfigChannel+0x5b4>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0e9b      	lsrs	r3, r3, #26
 8004382:	3301      	adds	r3, #1
 8004384:	069b      	lsls	r3, r3, #26
 8004386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800438a:	e015      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x5e0>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	fa93 f3a3 	rbit	r3, r3
 8004398:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80043a4:	2320      	movs	r3, #32
 80043a6:	e003      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	069b      	lsls	r3, r3, #26
 80043b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x600>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	3301      	adds	r3, #1
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2101      	movs	r1, #1
 80043d2:	fa01 f303 	lsl.w	r3, r1, r3
 80043d6:	e017      	b.n	8004408 <HAL_ADC_ConfigChannel+0x630>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	fa93 f3a3 	rbit	r3, r3
 80043e4:	61fb      	str	r3, [r7, #28]
  return result;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80043f0:	2320      	movs	r3, #32
 80043f2:	e003      	b.n	80043fc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	3301      	adds	r3, #1
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2101      	movs	r1, #1
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	ea42 0103 	orr.w	r1, r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10d      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x65c>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	0e9b      	lsrs	r3, r3, #26
 800441e:	3301      	adds	r3, #1
 8004420:	f003 021f 	and.w	r2, r3, #31
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	3b1e      	subs	r3, #30
 800442c:	051b      	lsls	r3, r3, #20
 800442e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004432:	e01d      	b.n	8004470 <HAL_ADC_ConfigChannel+0x698>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	fa93 f3a3 	rbit	r3, r3
 8004440:	613b      	str	r3, [r7, #16]
  return result;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800444c:	2320      	movs	r3, #32
 800444e:	e005      	b.n	800445c <HAL_ADC_ConfigChannel+0x684>
 8004450:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3301      	adds	r3, #1
 800445e:	f003 021f 	and.w	r2, r3, #31
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	3b1e      	subs	r3, #30
 800446a:	051b      	lsls	r3, r3, #20
 800446c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004470:	430b      	orrs	r3, r1
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	6892      	ldr	r2, [r2, #8]
 8004476:	4619      	mov	r1, r3
 8004478:	f7ff f99e 	bl	80037b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <HAL_ADC_ConfigChannel+0x7a0>)
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d06c      	beq.n	8004562 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004488:	483c      	ldr	r0, [pc, #240]	; (800457c <HAL_ADC_ConfigChannel+0x7a4>)
 800448a:	f7ff f8f3 	bl	8003674 <LL_ADC_GetCommonPathInternalCh>
 800448e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3a      	ldr	r2, [pc, #232]	; (8004580 <HAL_ADC_ConfigChannel+0x7a8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d127      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800449c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d121      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a35      	ldr	r2, [pc, #212]	; (8004584 <HAL_ADC_ConfigChannel+0x7ac>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d157      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044ba:	4619      	mov	r1, r3
 80044bc:	482f      	ldr	r0, [pc, #188]	; (800457c <HAL_ADC_ConfigChannel+0x7a4>)
 80044be:	f7ff f8c6 	bl	800364e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044c2:	4b31      	ldr	r3, [pc, #196]	; (8004588 <HAL_ADC_ConfigChannel+0x7b0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	4a30      	ldr	r2, [pc, #192]	; (800458c <HAL_ADC_ConfigChannel+0x7b4>)
 80044ca:	fba2 2303 	umull	r2, r3, r2, r3
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	4613      	mov	r3, r2
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044dc:	e002      	b.n	80044e4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f9      	bne.n	80044de <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ea:	e03a      	b.n	8004562 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a27      	ldr	r2, [pc, #156]	; (8004590 <HAL_ADC_ConfigChannel+0x7b8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d113      	bne.n	800451e <HAL_ADC_ConfigChannel+0x746>
 80044f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <HAL_ADC_ConfigChannel+0x7ac>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d12a      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800450c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004514:	4619      	mov	r1, r3
 8004516:	4819      	ldr	r0, [pc, #100]	; (800457c <HAL_ADC_ConfigChannel+0x7a4>)
 8004518:	f7ff f899 	bl	800364e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800451c:	e021      	b.n	8004562 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1c      	ldr	r2, [pc, #112]	; (8004594 <HAL_ADC_ConfigChannel+0x7bc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d11c      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800452c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d116      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a12      	ldr	r2, [pc, #72]	; (8004584 <HAL_ADC_ConfigChannel+0x7ac>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d111      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800453e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004542:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004546:	4619      	mov	r1, r3
 8004548:	480c      	ldr	r0, [pc, #48]	; (800457c <HAL_ADC_ConfigChannel+0x7a4>)
 800454a:	f7ff f880 	bl	800364e <LL_ADC_SetCommonPathInternalCh>
 800454e:	e008      	b.n	8004562 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800456a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800456e:	4618      	mov	r0, r3
 8004570:	37d8      	adds	r7, #216	; 0xd8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	80080000 	.word	0x80080000
 800457c:	50040300 	.word	0x50040300
 8004580:	c7520000 	.word	0xc7520000
 8004584:	50040000 	.word	0x50040000
 8004588:	20000168 	.word	0x20000168
 800458c:	053e2d63 	.word	0x053e2d63
 8004590:	cb840000 	.word	0xcb840000
 8004594:	80000001 	.word	0x80000001

08004598 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f9cb 	bl	8003944 <LL_ADC_IsEnabled>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d169      	bne.n	8004688 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	4b36      	ldr	r3, [pc, #216]	; (8004694 <ADC_Enable+0xfc>)
 80045bc:	4013      	ands	r3, r2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	f043 0210 	orr.w	r2, r3, #16
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	f043 0201 	orr.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e055      	b.n	800468a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff f986 	bl	80038f4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045e8:	482b      	ldr	r0, [pc, #172]	; (8004698 <ADC_Enable+0x100>)
 80045ea:	f7ff f843 	bl	8003674 <LL_ADC_GetCommonPathInternalCh>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d013      	beq.n	8004620 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f8:	4b28      	ldr	r3, [pc, #160]	; (800469c <ADC_Enable+0x104>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	099b      	lsrs	r3, r3, #6
 80045fe:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <ADC_Enable+0x108>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	099b      	lsrs	r3, r3, #6
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004612:	e002      	b.n	800461a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	3b01      	subs	r3, #1
 8004618:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f9      	bne.n	8004614 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004620:	f7fe ffd2 	bl	80035c8 <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004626:	e028      	b.n	800467a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff f989 	bl	8003944 <LL_ADC_IsEnabled>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d104      	bne.n	8004642 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff f959 	bl	80038f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004642:	f7fe ffc1 	bl	80035c8 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d914      	bls.n	800467a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d00d      	beq.n	800467a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f043 0210 	orr.w	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	f043 0201 	orr.w	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e007      	b.n	800468a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d1cf      	bne.n	8004628 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	8000003f 	.word	0x8000003f
 8004698:	50040300 	.word	0x50040300
 800469c:	20000168 	.word	0x20000168
 80046a0:	053e2d63 	.word	0x053e2d63

080046a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff f95a 	bl	800396a <LL_ADC_IsDisableOngoing>
 80046b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff f941 	bl	8003944 <LL_ADC_IsEnabled>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d047      	beq.n	8004758 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d144      	bne.n	8004758 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 030d 	and.w	r3, r3, #13
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10c      	bne.n	80046f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff f91b 	bl	800391c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2203      	movs	r2, #3
 80046ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046ee:	f7fe ff6b 	bl	80035c8 <HAL_GetTick>
 80046f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046f4:	e029      	b.n	800474a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	f043 0210 	orr.w	r2, r3, #16
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f043 0201 	orr.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e023      	b.n	800475a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004712:	f7fe ff59 	bl	80035c8 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d914      	bls.n	800474a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00d      	beq.n	800474a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	f043 0210 	orr.w	r2, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f043 0201 	orr.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e007      	b.n	800475a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1dc      	bne.n	8004712 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004778:	2b00      	cmp	r3, #0
 800477a:	d14b      	bne.n	8004814 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004780:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d021      	beq.n	80047da <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fe ffcd 	bl	800373a <LL_ADC_REG_IsTriggerSourceSWStart>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d032      	beq.n	800480c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d12b      	bne.n	800480c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11f      	bne.n	800480c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
 80047d8:	e018      	b.n	800480c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d111      	bne.n	800480c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f043 0201 	orr.w	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff fac5 	bl	8003d9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004812:	e00e      	b.n	8004832 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff facf 	bl	8003dc4 <HAL_ADC_ErrorCallback>
}
 8004826:	e004      	b.n	8004832 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7ff fab1 	bl	8003db0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff faa1 	bl	8003dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <LL_ADC_StartCalibration>:
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800489c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_ADC_IsCalibrationOnGoing>:
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d0:	d101      	bne.n	80048d6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_ADCEx_Calibration_Start+0x1c>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e04d      	b.n	800499c <HAL_ADCEx_Calibration_Start+0xb8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fecb 	bl	80046a4 <ADC_Disable>
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d136      	bne.n	8004986 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004920:	f023 0302 	bic.w	r3, r3, #2
 8004924:	f043 0202 	orr.w	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6839      	ldr	r1, [r7, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff ffa9 	bl	800488a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004938:	e014      	b.n	8004964 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	3301      	adds	r3, #1
 800493e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004946:	d30d      	bcc.n	8004964 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494c:	f023 0312 	bic.w	r3, r3, #18
 8004950:	f043 0210 	orr.w	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e01b      	b.n	800499c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff ffa7 	bl	80048bc <LL_ADC_IsCalibrationOnGoing>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e2      	bne.n	800493a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	f023 0303 	bic.w	r3, r3, #3
 800497c:	f043 0201 	orr.w	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	655a      	str	r2, [r3, #84]	; 0x54
 8004984:	e005      	b.n	8004992 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f043 0210 	orr.w	r2, r3, #16
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e0ed      	b.n	8004b92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d102      	bne.n	80049c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd fffa 	bl	80029bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049d8:	f7fe fdf6 	bl	80035c8 <HAL_GetTick>
 80049dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049de:	e012      	b.n	8004a06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049e0:	f7fe fdf2 	bl	80035c8 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b0a      	cmp	r3, #10
 80049ec:	d90b      	bls.n	8004a06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2205      	movs	r2, #5
 80049fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0c5      	b.n	8004b92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0e5      	beq.n	80049e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0202 	bic.w	r2, r2, #2
 8004a22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a24:	f7fe fdd0 	bl	80035c8 <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a2a:	e012      	b.n	8004a52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a2c:	f7fe fdcc 	bl	80035c8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b0a      	cmp	r3, #10
 8004a38:	d90b      	bls.n	8004a52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2205      	movs	r2, #5
 8004a4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e09f      	b.n	8004b92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e5      	bne.n	8004a2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	7e1b      	ldrb	r3, [r3, #24]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d108      	bne.n	8004a7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e007      	b.n	8004a8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	7e5b      	ldrb	r3, [r3, #25]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d108      	bne.n	8004aa4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e007      	b.n	8004ab4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	7e9b      	ldrb	r3, [r3, #26]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d108      	bne.n	8004ace <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0220 	orr.w	r2, r2, #32
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	e007      	b.n	8004ade <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0220 	bic.w	r2, r2, #32
 8004adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	7edb      	ldrb	r3, [r3, #27]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d108      	bne.n	8004af8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0210 	bic.w	r2, r2, #16
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e007      	b.n	8004b08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0210 	orr.w	r2, r2, #16
 8004b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	7f1b      	ldrb	r3, [r3, #28]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d108      	bne.n	8004b22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0208 	orr.w	r2, r2, #8
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	e007      	b.n	8004b32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0208 	bic.w	r2, r2, #8
 8004b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	7f5b      	ldrb	r3, [r3, #29]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d108      	bne.n	8004b4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0204 	orr.w	r2, r2, #4
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e007      	b.n	8004b5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0204 	bic.w	r2, r2, #4
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	ea42 0103 	orr.w	r1, r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	1e5a      	subs	r2, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bb0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004bb2:	7cfb      	ldrb	r3, [r7, #19]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d003      	beq.n	8004bc0 <HAL_CAN_ConfigFilter+0x26>
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	f040 80aa 	bne.w	8004d14 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	2201      	movs	r2, #1
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	401a      	ands	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d123      	bne.n	8004c42 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	401a      	ands	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	3248      	adds	r2, #72	; 0x48
 8004c22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c38:	6979      	ldr	r1, [r7, #20]
 8004c3a:	3348      	adds	r3, #72	; 0x48
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	440b      	add	r3, r1
 8004c40:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d122      	bne.n	8004c90 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	3248      	adds	r2, #72	; 0x48
 8004c70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	3348      	adds	r3, #72	; 0x48
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004caa:	e007      	b.n	8004cbc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	401a      	ands	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004cd6:	e007      	b.n	8004ce8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d107      	bne.n	8004d00 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d06:	f023 0201 	bic.w	r2, r3, #1
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e006      	b.n	8004d22 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
  }
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d12e      	bne.n	8004da0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5a:	f7fe fc35 	bl	80035c8 <HAL_GetTick>
 8004d5e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d60:	e012      	b.n	8004d88 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d62:	f7fe fc31 	bl	80035c8 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b0a      	cmp	r3, #10
 8004d6e:	d90b      	bls.n	8004d88 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e012      	b.n	8004dae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e5      	bne.n	8004d62 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e006      	b.n	8004dae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b089      	sub	sp, #36	; 0x24
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
 8004dc2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dca:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004dd4:	7ffb      	ldrb	r3, [r7, #31]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d003      	beq.n	8004de2 <HAL_CAN_AddTxMessage+0x2c>
 8004dda:	7ffb      	ldrb	r3, [r7, #31]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	f040 80ad 	bne.w	8004f3c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8095 	beq.w	8004f2c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	0e1b      	lsrs	r3, r3, #24
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	409a      	lsls	r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10d      	bne.n	8004e3a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	6809      	ldr	r1, [r1, #0]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	3318      	adds	r3, #24
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	440b      	add	r3, r1
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e00f      	b.n	8004e5a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e44:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004e4e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	3318      	adds	r3, #24
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	440b      	add	r3, r1
 8004e58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3318      	adds	r3, #24
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	440b      	add	r3, r1
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	7d1b      	ldrb	r3, [r3, #20]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d111      	bne.n	8004e9a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	3318      	adds	r3, #24
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4413      	add	r3, r2
 8004e82:	3304      	adds	r3, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	6811      	ldr	r1, [r2, #0]
 8004e8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	3318      	adds	r3, #24
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	440b      	add	r3, r1
 8004e96:	3304      	adds	r3, #4
 8004e98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	061a      	lsls	r2, r3, #24
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3306      	adds	r3, #6
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3305      	adds	r3, #5
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	3204      	adds	r2, #4
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	6811      	ldr	r1, [r2, #0]
 8004ec2:	ea43 0200 	orr.w	r2, r3, r0
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	440b      	add	r3, r1
 8004ecc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004ed0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3303      	adds	r3, #3
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	061a      	lsls	r2, r3, #24
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3302      	adds	r3, #2
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	041b      	lsls	r3, r3, #16
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	4313      	orrs	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	6811      	ldr	r1, [r2, #0]
 8004ef8:	ea43 0200 	orr.w	r2, r3, r0
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	440b      	add	r3, r1
 8004f02:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3318      	adds	r3, #24
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	4413      	add	r3, r2
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	6811      	ldr	r1, [r2, #0]
 8004f1a:	f043 0201 	orr.w	r2, r3, #1
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	3318      	adds	r3, #24
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	440b      	add	r3, r1
 8004f26:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e00e      	b.n	8004f4a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e006      	b.n	8004f4a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3724      	adds	r7, #36	; 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f56:	b480      	push	{r7}
 8004f58:	b087      	sub	sp, #28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f6a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d003      	beq.n	8004f7a <HAL_CAN_GetRxMessage+0x24>
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	f040 80f3 	bne.w	8005160 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10e      	bne.n	8004f9e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d116      	bne.n	8004fbc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0e7      	b.n	800516e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d107      	bne.n	8004fbc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0d8      	b.n	800516e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	331b      	adds	r3, #27
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	4413      	add	r3, r2
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0204 	and.w	r2, r3, #4
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	331b      	adds	r3, #27
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	4413      	add	r3, r2
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	0d5b      	lsrs	r3, r3, #21
 8004fea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e00b      	b.n	800500c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	331b      	adds	r3, #27
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	4413      	add	r3, r2
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	08db      	lsrs	r3, r3, #3
 8005004:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	331b      	adds	r3, #27
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	4413      	add	r3, r2
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0202 	and.w	r2, r3, #2
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	331b      	adds	r3, #27
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	4413      	add	r3, r2
 800502e:	3304      	adds	r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 020f 	and.w	r2, r3, #15
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	331b      	adds	r3, #27
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	4413      	add	r3, r2
 8005046:	3304      	adds	r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	0a1b      	lsrs	r3, r3, #8
 800504c:	b2da      	uxtb	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	331b      	adds	r3, #27
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	4413      	add	r3, r2
 800505e:	3304      	adds	r3, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	b29a      	uxth	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	4413      	add	r3, r2
 8005074:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	4413      	add	r3, r2
 800508a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	0a1a      	lsrs	r2, r3, #8
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	0c1a      	lsrs	r2, r3, #16
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	3302      	adds	r3, #2
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	4413      	add	r3, r2
 80050be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	0e1a      	lsrs	r2, r3, #24
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	3303      	adds	r3, #3
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	3304      	adds	r3, #4
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	0a1a      	lsrs	r2, r3, #8
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	3305      	adds	r3, #5
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	4413      	add	r3, r2
 800510a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	0c1a      	lsrs	r2, r3, #16
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	3306      	adds	r3, #6
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	4413      	add	r3, r2
 8005124:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	0e1a      	lsrs	r2, r3, #24
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	3307      	adds	r3, #7
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d108      	bne.n	800514c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0220 	orr.w	r2, r2, #32
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	e007      	b.n	800515c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0220 	orr.w	r2, r2, #32
 800515a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	e006      	b.n	800516e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800518a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d002      	beq.n	8005198 <HAL_CAN_ActivateNotification+0x1e>
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d109      	bne.n	80051ac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6959      	ldr	r1, [r3, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e006      	b.n	80051ba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b08a      	sub	sp, #40	; 0x28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d07c      	beq.n	8005306 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d023      	beq.n	800525e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2201      	movs	r2, #1
 800521c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f983 	bl	8005534 <HAL_CAN_TxMailbox0CompleteCallback>
 800522e:	e016      	b.n	800525e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
 8005242:	e00c      	b.n	800525e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d004      	beq.n	8005258 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
 8005256:	e002      	b.n	800525e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f989 	bl	8005570 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d024      	beq.n	80052b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005270:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f963 	bl	8005548 <HAL_CAN_TxMailbox1CompleteCallback>
 8005282:	e016      	b.n	80052b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
 8005296:	e00c      	b.n	80052b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
 80052aa:	e002      	b.n	80052b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f969 	bl	8005584 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d024      	beq.n	8005306 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f943 	bl	800555c <HAL_CAN_TxMailbox2CompleteCallback>
 80052d6:	e016      	b.n	8005306 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ea:	e00c      	b.n	8005306 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	e002      	b.n	8005306 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f949 	bl	8005598 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00c      	beq.n	800532a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005320:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2210      	movs	r2, #16
 8005328:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d006      	beq.n	800534c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2208      	movs	r2, #8
 8005344:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f930 	bl	80055ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fb fe5b 	bl	8001020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00c      	beq.n	800538e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005384:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2210      	movs	r2, #16
 800538c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2208      	movs	r2, #8
 80053a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f912 	bl	80055d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8f9 	bl	80055c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d006      	beq.n	80053f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2210      	movs	r2, #16
 80053e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8fc 	bl	80055e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d006      	beq.n	8005412 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2208      	movs	r2, #8
 800540a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f8f5 	bl	80055fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d07b      	beq.n	8005514 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d072      	beq.n	800550c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	f043 0304 	orr.w	r3, r3, #4
 8005478:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005480:	2b00      	cmp	r3, #0
 8005482:	d043      	beq.n	800550c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800548a:	2b00      	cmp	r3, #0
 800548c:	d03e      	beq.n	800550c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005494:	2b60      	cmp	r3, #96	; 0x60
 8005496:	d02b      	beq.n	80054f0 <HAL_CAN_IRQHandler+0x32a>
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d82e      	bhi.n	80054fa <HAL_CAN_IRQHandler+0x334>
 800549c:	2b50      	cmp	r3, #80	; 0x50
 800549e:	d022      	beq.n	80054e6 <HAL_CAN_IRQHandler+0x320>
 80054a0:	2b50      	cmp	r3, #80	; 0x50
 80054a2:	d82a      	bhi.n	80054fa <HAL_CAN_IRQHandler+0x334>
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d019      	beq.n	80054dc <HAL_CAN_IRQHandler+0x316>
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d826      	bhi.n	80054fa <HAL_CAN_IRQHandler+0x334>
 80054ac:	2b30      	cmp	r3, #48	; 0x30
 80054ae:	d010      	beq.n	80054d2 <HAL_CAN_IRQHandler+0x30c>
 80054b0:	2b30      	cmp	r3, #48	; 0x30
 80054b2:	d822      	bhi.n	80054fa <HAL_CAN_IRQHandler+0x334>
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d002      	beq.n	80054be <HAL_CAN_IRQHandler+0x2f8>
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d005      	beq.n	80054c8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80054bc:	e01d      	b.n	80054fa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c0:	f043 0308 	orr.w	r3, r3, #8
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054c6:	e019      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	f043 0310 	orr.w	r3, r3, #16
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054d0:	e014      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	f043 0320 	orr.w	r3, r3, #32
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054da:	e00f      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054e4:	e00a      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054ee:	e005      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054f8:	e000      	b.n	80054fc <HAL_CAN_IRQHandler+0x336>
            break;
 80054fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800550a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2204      	movs	r2, #4
 8005512:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d008      	beq.n	800552c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb fdc2 	bl	80010b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800552c:	bf00      	nop
 800552e:	3728      	adds	r7, #40	; 0x28
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005620:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <__NVIC_SetPriorityGrouping+0x44>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800562c:	4013      	ands	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800563c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005642:	4a04      	ldr	r2, [pc, #16]	; (8005654 <__NVIC_SetPriorityGrouping+0x44>)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	60d3      	str	r3, [r2, #12]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	e000ed00 	.word	0xe000ed00

08005658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <__NVIC_GetPriorityGrouping+0x18>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	f003 0307 	and.w	r3, r3, #7
}
 8005666:	4618      	mov	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800567e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005682:	2b00      	cmp	r3, #0
 8005684:	db0b      	blt.n	800569e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	f003 021f 	and.w	r2, r3, #31
 800568c:	4907      	ldr	r1, [pc, #28]	; (80056ac <__NVIC_EnableIRQ+0x38>)
 800568e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	2001      	movs	r0, #1
 8005696:	fa00 f202 	lsl.w	r2, r0, r2
 800569a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	e000e100 	.word	0xe000e100

080056b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	db12      	blt.n	80056e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	f003 021f 	and.w	r2, r3, #31
 80056c8:	490a      	ldr	r1, [pc, #40]	; (80056f4 <__NVIC_DisableIRQ+0x44>)
 80056ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2001      	movs	r0, #1
 80056d2:	fa00 f202 	lsl.w	r2, r0, r2
 80056d6:	3320      	adds	r3, #32
 80056d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80056dc:	f3bf 8f4f 	dsb	sy
}
 80056e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056e2:	f3bf 8f6f 	isb	sy
}
 80056e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	e000e100 	.word	0xe000e100

080056f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	6039      	str	r1, [r7, #0]
 8005702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005708:	2b00      	cmp	r3, #0
 800570a:	db0a      	blt.n	8005722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	b2da      	uxtb	r2, r3
 8005710:	490c      	ldr	r1, [pc, #48]	; (8005744 <__NVIC_SetPriority+0x4c>)
 8005712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005716:	0112      	lsls	r2, r2, #4
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	440b      	add	r3, r1
 800571c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005720:	e00a      	b.n	8005738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	4908      	ldr	r1, [pc, #32]	; (8005748 <__NVIC_SetPriority+0x50>)
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	3b04      	subs	r3, #4
 8005730:	0112      	lsls	r2, r2, #4
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	440b      	add	r3, r1
 8005736:	761a      	strb	r2, [r3, #24]
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	e000e100 	.word	0xe000e100
 8005748:	e000ed00 	.word	0xe000ed00

0800574c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800574c:	b480      	push	{r7}
 800574e:	b089      	sub	sp, #36	; 0x24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	f1c3 0307 	rsb	r3, r3, #7
 8005766:	2b04      	cmp	r3, #4
 8005768:	bf28      	it	cs
 800576a:	2304      	movcs	r3, #4
 800576c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	3304      	adds	r3, #4
 8005772:	2b06      	cmp	r3, #6
 8005774:	d902      	bls.n	800577c <NVIC_EncodePriority+0x30>
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3b03      	subs	r3, #3
 800577a:	e000      	b.n	800577e <NVIC_EncodePriority+0x32>
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005780:	f04f 32ff 	mov.w	r2, #4294967295
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43da      	mvns	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	401a      	ands	r2, r3
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005794:	f04f 31ff 	mov.w	r1, #4294967295
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	fa01 f303 	lsl.w	r3, r1, r3
 800579e:	43d9      	mvns	r1, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a4:	4313      	orrs	r3, r2
         );
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3724      	adds	r7, #36	; 0x24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3b01      	subs	r3, #1
 80057c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057c4:	d301      	bcc.n	80057ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057c6:	2301      	movs	r3, #1
 80057c8:	e00f      	b.n	80057ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ca:	4a0a      	ldr	r2, [pc, #40]	; (80057f4 <SysTick_Config+0x40>)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057d2:	210f      	movs	r1, #15
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	f7ff ff8e 	bl	80056f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <SysTick_Config+0x40>)
 80057de:	2200      	movs	r2, #0
 80057e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057e2:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <SysTick_Config+0x40>)
 80057e4:	2207      	movs	r2, #7
 80057e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	e000e010 	.word	0xe000e010

080057f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff ff05 	bl	8005610 <__NVIC_SetPriorityGrouping>
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b086      	sub	sp, #24
 8005812:	af00      	add	r7, sp, #0
 8005814:	4603      	mov	r3, r0
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005820:	f7ff ff1a 	bl	8005658 <__NVIC_GetPriorityGrouping>
 8005824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	6978      	ldr	r0, [r7, #20]
 800582c:	f7ff ff8e 	bl	800574c <NVIC_EncodePriority>
 8005830:	4602      	mov	r2, r0
 8005832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ff5d 	bl	80056f8 <__NVIC_SetPriority>
}
 800583e:	bf00      	nop
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	4603      	mov	r3, r0
 800584e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff ff0d 	bl	8005674 <__NVIC_EnableIRQ>
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	4603      	mov	r3, r0
 800586a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800586c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff1d 	bl	80056b0 <__NVIC_DisableIRQ>
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff ff94 	bl	80057b4 <SysTick_Config>
 800588c:	4603      	mov	r3, r0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e098      	b.n	80059dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	4b4d      	ldr	r3, [pc, #308]	; (80059e8 <HAL_DMA_Init+0x150>)
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d80f      	bhi.n	80058d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	4b4b      	ldr	r3, [pc, #300]	; (80059ec <HAL_DMA_Init+0x154>)
 80058be:	4413      	add	r3, r2
 80058c0:	4a4b      	ldr	r2, [pc, #300]	; (80059f0 <HAL_DMA_Init+0x158>)
 80058c2:	fba2 2303 	umull	r2, r3, r2, r3
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	009a      	lsls	r2, r3, #2
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a48      	ldr	r2, [pc, #288]	; (80059f4 <HAL_DMA_Init+0x15c>)
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40
 80058d4:	e00e      	b.n	80058f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <HAL_DMA_Init+0x160>)
 80058de:	4413      	add	r3, r2
 80058e0:	4a43      	ldr	r2, [pc, #268]	; (80059f0 <HAL_DMA_Init+0x158>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	009a      	lsls	r2, r3, #2
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a42      	ldr	r2, [pc, #264]	; (80059fc <HAL_DMA_Init+0x164>)
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800594e:	d039      	beq.n	80059c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <HAL_DMA_Init+0x15c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d11a      	bne.n	8005990 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800595a:	4b29      	ldr	r3, [pc, #164]	; (8005a00 <HAL_DMA_Init+0x168>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	f003 031c 	and.w	r3, r3, #28
 8005966:	210f      	movs	r1, #15
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	43db      	mvns	r3, r3
 800596e:	4924      	ldr	r1, [pc, #144]	; (8005a00 <HAL_DMA_Init+0x168>)
 8005970:	4013      	ands	r3, r2
 8005972:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005974:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <HAL_DMA_Init+0x168>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6859      	ldr	r1, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005980:	f003 031c 	and.w	r3, r3, #28
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	491d      	ldr	r1, [pc, #116]	; (8005a00 <HAL_DMA_Init+0x168>)
 800598a:	4313      	orrs	r3, r2
 800598c:	600b      	str	r3, [r1, #0]
 800598e:	e019      	b.n	80059c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005990:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <HAL_DMA_Init+0x16c>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005998:	f003 031c 	and.w	r3, r3, #28
 800599c:	210f      	movs	r1, #15
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	4917      	ldr	r1, [pc, #92]	; (8005a04 <HAL_DMA_Init+0x16c>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <HAL_DMA_Init+0x16c>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	f003 031c 	and.w	r3, r3, #28
 80059ba:	fa01 f303 	lsl.w	r3, r1, r3
 80059be:	4911      	ldr	r1, [pc, #68]	; (8005a04 <HAL_DMA_Init+0x16c>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40020407 	.word	0x40020407
 80059ec:	bffdfff8 	.word	0xbffdfff8
 80059f0:	cccccccd 	.word	0xcccccccd
 80059f4:	40020000 	.word	0x40020000
 80059f8:	bffdfbf8 	.word	0xbffdfbf8
 80059fc:	40020400 	.word	0x40020400
 8005a00:	400200a8 	.word	0x400200a8
 8005a04:	400204a8 	.word	0x400204a8

08005a08 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e072      	b.n	8005b00 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4b36      	ldr	r3, [pc, #216]	; (8005b0c <HAL_DMA_DeInit+0x104>)
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d80f      	bhi.n	8005a56 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b34      	ldr	r3, [pc, #208]	; (8005b10 <HAL_DMA_DeInit+0x108>)
 8005a3e:	4413      	add	r3, r2
 8005a40:	4a34      	ldr	r2, [pc, #208]	; (8005b14 <HAL_DMA_DeInit+0x10c>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	009a      	lsls	r2, r3, #2
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a31      	ldr	r2, [pc, #196]	; (8005b18 <HAL_DMA_DeInit+0x110>)
 8005a52:	641a      	str	r2, [r3, #64]	; 0x40
 8005a54:	e00e      	b.n	8005a74 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b2f      	ldr	r3, [pc, #188]	; (8005b1c <HAL_DMA_DeInit+0x114>)
 8005a5e:	4413      	add	r3, r2
 8005a60:	4a2c      	ldr	r2, [pc, #176]	; (8005b14 <HAL_DMA_DeInit+0x10c>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	091b      	lsrs	r3, r3, #4
 8005a68:	009a      	lsls	r2, r3, #2
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2b      	ldr	r2, [pc, #172]	; (8005b20 <HAL_DMA_DeInit+0x118>)
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a80:	f003 021c 	and.w	r2, r3, #28
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a88:	2101      	movs	r1, #1
 8005a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a8e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <HAL_DMA_DeInit+0x110>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d10d      	bne.n	8005ab6 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a9a:	4b22      	ldr	r3, [pc, #136]	; (8005b24 <HAL_DMA_DeInit+0x11c>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	f003 031c 	and.w	r3, r3, #28
 8005aa6:	210f      	movs	r1, #15
 8005aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	491d      	ldr	r1, [pc, #116]	; (8005b24 <HAL_DMA_DeInit+0x11c>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]
 8005ab4:	e00c      	b.n	8005ad0 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ab6:	4b1c      	ldr	r3, [pc, #112]	; (8005b28 <HAL_DMA_DeInit+0x120>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	f003 031c 	and.w	r3, r3, #28
 8005ac2:	210f      	movs	r1, #15
 8005ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	4917      	ldr	r1, [pc, #92]	; (8005b28 <HAL_DMA_DeInit+0x120>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40020407 	.word	0x40020407
 8005b10:	bffdfff8 	.word	0xbffdfff8
 8005b14:	cccccccd 	.word	0xcccccccd
 8005b18:	40020000 	.word	0x40020000
 8005b1c:	bffdfbf8 	.word	0xbffdfbf8
 8005b20:	40020400 	.word	0x40020400
 8005b24:	400200a8 	.word	0x400200a8
 8005b28:	400204a8 	.word	0x400204a8

08005b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_DMA_Start_IT+0x20>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e04b      	b.n	8005be4 <HAL_DMA_Start_IT+0xb8>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d13a      	bne.n	8005bd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f95f 	bl	8005e48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 020e 	orr.w	r2, r2, #14
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e00f      	b.n	8005bc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0204 	bic.w	r2, r2, #4
 8005bb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 020a 	orr.w	r2, r2, #10
 8005bc2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e005      	b.n	8005be2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
 8005be0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d008      	beq.n	8005c16 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2204      	movs	r2, #4
 8005c08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e022      	b.n	8005c5c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 020e 	bic.w	r2, r2, #14
 8005c24:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0201 	bic.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	f003 021c 	and.w	r2, r3, #28
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	2101      	movs	r1, #1
 8005c44:	fa01 f202 	lsl.w	r2, r1, r2
 8005c48:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d005      	beq.n	8005c8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2204      	movs	r2, #4
 8005c84:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	73fb      	strb	r3, [r7, #15]
 8005c8a:	e029      	b.n	8005ce0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 020e 	bic.w	r2, r2, #14
 8005c9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb0:	f003 021c 	and.w	r2, r3, #28
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	2101      	movs	r1, #1
 8005cba:	fa01 f202 	lsl.w	r2, r1, r2
 8005cbe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
    }
  }
  return status;
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	f003 031c 	and.w	r3, r3, #28
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	409a      	lsls	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d026      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x7a>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d021      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d107      	bne.n	8005d3e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0204 	bic.w	r2, r2, #4
 8005d3c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	f003 021c 	and.w	r2, r3, #28
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2104      	movs	r1, #4
 8005d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d50:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d071      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005d62:	e06c      	b.n	8005e3e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d68:	f003 031c 	and.w	r3, r3, #28
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d02e      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xec>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d029      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10b      	bne.n	8005da8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 020a 	bic.w	r2, r2, #10
 8005d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	f003 021c 	and.w	r2, r3, #28
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	2102      	movs	r1, #2
 8005db6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d038      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005dd4:	e033      	b.n	8005e3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	f003 031c 	and.w	r3, r3, #28
 8005dde:	2208      	movs	r2, #8
 8005de0:	409a      	lsls	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02a      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x156>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d025      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 020e 	bic.w	r2, r2, #14
 8005e02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e08:	f003 021c 	and.w	r2, r3, #28
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	2101      	movs	r1, #1
 8005e12:	fa01 f202 	lsl.w	r2, r1, r2
 8005e16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d004      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e3e:	bf00      	nop
 8005e40:	bf00      	nop
}
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	f003 021c 	and.w	r2, r3, #28
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	2101      	movs	r1, #1
 8005e64:	fa01 f202 	lsl.w	r2, r1, r2
 8005e68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d108      	bne.n	8005e8c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e8a:	e007      	b.n	8005e9c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
}
 8005e9c:	bf00      	nop
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eb6:	e154      	b.n	8006162 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8146 	beq.w	800615c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d005      	beq.n	8005ee8 <HAL_GPIO_Init+0x40>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d130      	bne.n	8005f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4013      	ands	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f1e:	2201      	movs	r2, #1
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	43db      	mvns	r3, r3
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	091b      	lsrs	r3, r3, #4
 8005f34:	f003 0201 	and.w	r2, r3, #1
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d017      	beq.n	8005f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	2203      	movs	r2, #3
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	43db      	mvns	r3, r3
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d123      	bne.n	8005fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	08da      	lsrs	r2, r3, #3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3208      	adds	r2, #8
 8005f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	220f      	movs	r2, #15
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	08da      	lsrs	r2, r3, #3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3208      	adds	r2, #8
 8005fd4:	6939      	ldr	r1, [r7, #16]
 8005fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	43db      	mvns	r3, r3
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f003 0203 	and.w	r2, r3, #3
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80a0 	beq.w	800615c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800601c:	4b58      	ldr	r3, [pc, #352]	; (8006180 <HAL_GPIO_Init+0x2d8>)
 800601e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006020:	4a57      	ldr	r2, [pc, #348]	; (8006180 <HAL_GPIO_Init+0x2d8>)
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	6613      	str	r3, [r2, #96]	; 0x60
 8006028:	4b55      	ldr	r3, [pc, #340]	; (8006180 <HAL_GPIO_Init+0x2d8>)
 800602a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006034:	4a53      	ldr	r2, [pc, #332]	; (8006184 <HAL_GPIO_Init+0x2dc>)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	089b      	lsrs	r3, r3, #2
 800603a:	3302      	adds	r3, #2
 800603c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	220f      	movs	r2, #15
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	43db      	mvns	r3, r3
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4013      	ands	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800605e:	d019      	beq.n	8006094 <HAL_GPIO_Init+0x1ec>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a49      	ldr	r2, [pc, #292]	; (8006188 <HAL_GPIO_Init+0x2e0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d013      	beq.n	8006090 <HAL_GPIO_Init+0x1e8>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a48      	ldr	r2, [pc, #288]	; (800618c <HAL_GPIO_Init+0x2e4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00d      	beq.n	800608c <HAL_GPIO_Init+0x1e4>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a47      	ldr	r2, [pc, #284]	; (8006190 <HAL_GPIO_Init+0x2e8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <HAL_GPIO_Init+0x1e0>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a46      	ldr	r2, [pc, #280]	; (8006194 <HAL_GPIO_Init+0x2ec>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d101      	bne.n	8006084 <HAL_GPIO_Init+0x1dc>
 8006080:	2304      	movs	r3, #4
 8006082:	e008      	b.n	8006096 <HAL_GPIO_Init+0x1ee>
 8006084:	2307      	movs	r3, #7
 8006086:	e006      	b.n	8006096 <HAL_GPIO_Init+0x1ee>
 8006088:	2303      	movs	r3, #3
 800608a:	e004      	b.n	8006096 <HAL_GPIO_Init+0x1ee>
 800608c:	2302      	movs	r3, #2
 800608e:	e002      	b.n	8006096 <HAL_GPIO_Init+0x1ee>
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <HAL_GPIO_Init+0x1ee>
 8006094:	2300      	movs	r3, #0
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	f002 0203 	and.w	r2, r2, #3
 800609c:	0092      	lsls	r2, r2, #2
 800609e:	4093      	lsls	r3, r2
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060a6:	4937      	ldr	r1, [pc, #220]	; (8006184 <HAL_GPIO_Init+0x2dc>)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	089b      	lsrs	r3, r3, #2
 80060ac:	3302      	adds	r3, #2
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060b4:	4b38      	ldr	r3, [pc, #224]	; (8006198 <HAL_GPIO_Init+0x2f0>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	43db      	mvns	r3, r3
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4013      	ands	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80060d8:	4a2f      	ldr	r2, [pc, #188]	; (8006198 <HAL_GPIO_Init+0x2f0>)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80060de:	4b2e      	ldr	r3, [pc, #184]	; (8006198 <HAL_GPIO_Init+0x2f0>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4013      	ands	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006102:	4a25      	ldr	r2, [pc, #148]	; (8006198 <HAL_GPIO_Init+0x2f0>)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006108:	4b23      	ldr	r3, [pc, #140]	; (8006198 <HAL_GPIO_Init+0x2f0>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	43db      	mvns	r3, r3
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4013      	ands	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800612c:	4a1a      	ldr	r2, [pc, #104]	; (8006198 <HAL_GPIO_Init+0x2f0>)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006132:	4b19      	ldr	r3, [pc, #100]	; (8006198 <HAL_GPIO_Init+0x2f0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	43db      	mvns	r3, r3
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4013      	ands	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006156:	4a10      	ldr	r2, [pc, #64]	; (8006198 <HAL_GPIO_Init+0x2f0>)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3301      	adds	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	f47f aea3 	bne.w	8005eb8 <HAL_GPIO_Init+0x10>
  }
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40021000 	.word	0x40021000
 8006184:	40010000 	.word	0x40010000
 8006188:	48000400 	.word	0x48000400
 800618c:	48000800 	.word	0x48000800
 8006190:	48000c00 	.word	0x48000c00
 8006194:	48001000 	.word	0x48001000
 8006198:	40010400 	.word	0x40010400

0800619c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80061aa:	e0b7      	b.n	800631c <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80061ac:	2201      	movs	r2, #1
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	4013      	ands	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80aa 	beq.w	8006316 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80061c2:	4a5d      	ldr	r2, [pc, #372]	; (8006338 <HAL_GPIO_DeInit+0x19c>)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	3302      	adds	r3, #2
 80061ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	220f      	movs	r2, #15
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4013      	ands	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061ea:	d019      	beq.n	8006220 <HAL_GPIO_DeInit+0x84>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a53      	ldr	r2, [pc, #332]	; (800633c <HAL_GPIO_DeInit+0x1a0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_GPIO_DeInit+0x80>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a52      	ldr	r2, [pc, #328]	; (8006340 <HAL_GPIO_DeInit+0x1a4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00d      	beq.n	8006218 <HAL_GPIO_DeInit+0x7c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a51      	ldr	r2, [pc, #324]	; (8006344 <HAL_GPIO_DeInit+0x1a8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d007      	beq.n	8006214 <HAL_GPIO_DeInit+0x78>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a50      	ldr	r2, [pc, #320]	; (8006348 <HAL_GPIO_DeInit+0x1ac>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <HAL_GPIO_DeInit+0x74>
 800620c:	2304      	movs	r3, #4
 800620e:	e008      	b.n	8006222 <HAL_GPIO_DeInit+0x86>
 8006210:	2307      	movs	r3, #7
 8006212:	e006      	b.n	8006222 <HAL_GPIO_DeInit+0x86>
 8006214:	2303      	movs	r3, #3
 8006216:	e004      	b.n	8006222 <HAL_GPIO_DeInit+0x86>
 8006218:	2302      	movs	r3, #2
 800621a:	e002      	b.n	8006222 <HAL_GPIO_DeInit+0x86>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <HAL_GPIO_DeInit+0x86>
 8006220:	2300      	movs	r3, #0
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	f002 0203 	and.w	r2, r2, #3
 8006228:	0092      	lsls	r2, r2, #2
 800622a:	4093      	lsls	r3, r2
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	429a      	cmp	r2, r3
 8006230:	d132      	bne.n	8006298 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006232:	4b46      	ldr	r3, [pc, #280]	; (800634c <HAL_GPIO_DeInit+0x1b0>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	43db      	mvns	r3, r3
 800623a:	4944      	ldr	r1, [pc, #272]	; (800634c <HAL_GPIO_DeInit+0x1b0>)
 800623c:	4013      	ands	r3, r2
 800623e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006240:	4b42      	ldr	r3, [pc, #264]	; (800634c <HAL_GPIO_DeInit+0x1b0>)
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	43db      	mvns	r3, r3
 8006248:	4940      	ldr	r1, [pc, #256]	; (800634c <HAL_GPIO_DeInit+0x1b0>)
 800624a:	4013      	ands	r3, r2
 800624c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800624e:	4b3f      	ldr	r3, [pc, #252]	; (800634c <HAL_GPIO_DeInit+0x1b0>)
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	43db      	mvns	r3, r3
 8006256:	493d      	ldr	r1, [pc, #244]	; (800634c <HAL_GPIO_DeInit+0x1b0>)
 8006258:	4013      	ands	r3, r2
 800625a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800625c:	4b3b      	ldr	r3, [pc, #236]	; (800634c <HAL_GPIO_DeInit+0x1b0>)
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	43db      	mvns	r3, r3
 8006264:	4939      	ldr	r1, [pc, #228]	; (800634c <HAL_GPIO_DeInit+0x1b0>)
 8006266:	4013      	ands	r3, r2
 8006268:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	220f      	movs	r2, #15
 8006274:	fa02 f303 	lsl.w	r3, r2, r3
 8006278:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800627a:	4a2f      	ldr	r2, [pc, #188]	; (8006338 <HAL_GPIO_DeInit+0x19c>)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	089b      	lsrs	r3, r3, #2
 8006280:	3302      	adds	r3, #2
 8006282:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	43da      	mvns	r2, r3
 800628a:	482b      	ldr	r0, [pc, #172]	; (8006338 <HAL_GPIO_DeInit+0x19c>)
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	089b      	lsrs	r3, r3, #2
 8006290:	400a      	ands	r2, r1
 8006292:	3302      	adds	r3, #2
 8006294:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	2103      	movs	r1, #3
 80062a2:	fa01 f303 	lsl.w	r3, r1, r3
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	08da      	lsrs	r2, r3, #3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3208      	adds	r2, #8
 80062b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	220f      	movs	r2, #15
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43db      	mvns	r3, r3
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	08d2      	lsrs	r2, r2, #3
 80062cc:	4019      	ands	r1, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3208      	adds	r2, #8
 80062d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	2103      	movs	r1, #3
 80062e0:	fa01 f303 	lsl.w	r3, r1, r3
 80062e4:	43db      	mvns	r3, r3
 80062e6:	401a      	ands	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	2101      	movs	r1, #1
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	fa01 f303 	lsl.w	r3, r1, r3
 80062f8:	43db      	mvns	r3, r3
 80062fa:	401a      	ands	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	2103      	movs	r1, #3
 800630a:	fa01 f303 	lsl.w	r3, r1, r3
 800630e:	43db      	mvns	r3, r3
 8006310:	401a      	ands	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	3301      	adds	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	fa22 f303 	lsr.w	r3, r2, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	f47f af41 	bne.w	80061ac <HAL_GPIO_DeInit+0x10>
  }
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	40010000 	.word	0x40010000
 800633c:	48000400 	.word	0x48000400
 8006340:	48000800 	.word	0x48000800
 8006344:	48000c00 	.word	0x48000c00
 8006348:	48001000 	.word	0x48001000
 800634c:	40010400 	.word	0x40010400

08006350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	887b      	ldrh	r3, [r7, #2]
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e001      	b.n	8006372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	807b      	strh	r3, [r7, #2]
 800638c:	4613      	mov	r3, r2
 800638e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006390:	787b      	ldrb	r3, [r7, #1]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006396:	887a      	ldrh	r2, [r7, #2]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800639c:	e002      	b.n	80063a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800639e:	887a      	ldrh	r2, [r7, #2]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80063ba:	4b08      	ldr	r3, [pc, #32]	; (80063dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d006      	beq.n	80063d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063c6:	4a05      	ldr	r2, [pc, #20]	; (80063dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063c8:	88fb      	ldrh	r3, [r7, #6]
 80063ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fb fe5a 	bl	8002088 <HAL_GPIO_EXTI_Callback>
  }
}
 80063d4:	bf00      	nop
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40010400 	.word	0x40010400

080063e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e081      	b.n	80064f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fc fb2c 	bl	8002a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2224      	movs	r2, #36	; 0x24
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d107      	bne.n	800645a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	e006      	b.n	8006468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d104      	bne.n	800647a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800649c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69d9      	ldr	r1, [r3, #28]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1a      	ldr	r2, [r3, #32]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	461a      	mov	r2, r3
 800650e:	4603      	mov	r3, r0
 8006510:	817b      	strh	r3, [r7, #10]
 8006512:	460b      	mov	r3, r1
 8006514:	813b      	strh	r3, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b20      	cmp	r3, #32
 8006524:	f040 80f9 	bne.w	800671a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <HAL_I2C_Mem_Write+0x34>
 800652e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800653a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0ed      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_I2C_Mem_Write+0x4e>
 800654a:	2302      	movs	r3, #2
 800654c:	e0e6      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006556:	f7fd f837 	bl	80035c8 <HAL_GetTick>
 800655a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	2319      	movs	r3, #25
 8006562:	2201      	movs	r2, #1
 8006564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f955 	bl	8006818 <I2C_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0d1      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2221      	movs	r2, #33	; 0x21
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2240      	movs	r2, #64	; 0x40
 8006584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065a0:	88f8      	ldrh	r0, [r7, #6]
 80065a2:	893a      	ldrh	r2, [r7, #8]
 80065a4:	8979      	ldrh	r1, [r7, #10]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	4603      	mov	r3, r0
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f8b9 	bl	8006728 <I2C_RequestMemoryWrite>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0a9      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2bff      	cmp	r3, #255	; 0xff
 80065d0:	d90e      	bls.n	80065f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	8979      	ldrh	r1, [r7, #10]
 80065e0:	2300      	movs	r3, #0
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fabd 	bl	8006b68 <I2C_TransferConfig>
 80065ee:	e00f      	b.n	8006610 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	8979      	ldrh	r1, [r7, #10]
 8006602:	2300      	movs	r3, #0
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 faac 	bl	8006b68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f93f 	bl	8006898 <I2C_WaitOnTXISFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e07b      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	781a      	ldrb	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d034      	beq.n	80066c8 <HAL_I2C_Mem_Write+0x1c8>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d130      	bne.n	80066c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	2200      	movs	r2, #0
 800666e:	2180      	movs	r1, #128	; 0x80
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f8d1 	bl	8006818 <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e04d      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2bff      	cmp	r3, #255	; 0xff
 8006688:	d90e      	bls.n	80066a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006694:	b2da      	uxtb	r2, r3
 8006696:	8979      	ldrh	r1, [r7, #10]
 8006698:	2300      	movs	r3, #0
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fa61 	bl	8006b68 <I2C_TransferConfig>
 80066a6:	e00f      	b.n	80066c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	8979      	ldrh	r1, [r7, #10]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fa50 	bl	8006b68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d19e      	bne.n	8006610 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f91e 	bl	8006918 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e01a      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2220      	movs	r2, #32
 80066ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <HAL_I2C_Mem_Write+0x224>)
 80066fa:	400b      	ands	r3, r1
 80066fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	fe00e800 	.word	0xfe00e800

08006728 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	461a      	mov	r2, r3
 8006736:	4603      	mov	r3, r0
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	460b      	mov	r3, r1
 800673c:	813b      	strh	r3, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	8979      	ldrh	r1, [r7, #10]
 8006748:	4b20      	ldr	r3, [pc, #128]	; (80067cc <I2C_RequestMemoryWrite+0xa4>)
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fa09 	bl	8006b68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	69b9      	ldr	r1, [r7, #24]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f89c 	bl	8006898 <I2C_WaitOnTXISFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e02c      	b.n	80067c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d105      	bne.n	800677c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006770:	893b      	ldrh	r3, [r7, #8]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	629a      	str	r2, [r3, #40]	; 0x28
 800677a:	e015      	b.n	80067a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800677c:	893b      	ldrh	r3, [r7, #8]
 800677e:	0a1b      	lsrs	r3, r3, #8
 8006780:	b29b      	uxth	r3, r3
 8006782:	b2da      	uxtb	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	69b9      	ldr	r1, [r7, #24]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f882 	bl	8006898 <I2C_WaitOnTXISFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e012      	b.n	80067c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800679e:	893b      	ldrh	r3, [r7, #8]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2200      	movs	r2, #0
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f830 	bl	8006818 <I2C_WaitOnFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	80002000 	.word	0x80002000

080067d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d103      	bne.n	80067ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2200      	movs	r2, #0
 80067ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d007      	beq.n	800680c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	619a      	str	r2, [r3, #24]
  }
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006828:	e022      	b.n	8006870 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d01e      	beq.n	8006870 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006832:	f7fc fec9 	bl	80035c8 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d302      	bcc.n	8006848 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d113      	bne.n	8006870 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684c:	f043 0220 	orr.w	r2, r3, #32
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e00f      	b.n	8006890 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	4013      	ands	r3, r2
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	429a      	cmp	r2, r3
 800687e:	bf0c      	ite	eq
 8006880:	2301      	moveq	r3, #1
 8006882:	2300      	movne	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	461a      	mov	r2, r3
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	429a      	cmp	r2, r3
 800688c:	d0cd      	beq.n	800682a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068a4:	e02c      	b.n	8006900 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f870 	bl	8006990 <I2C_IsErrorOccurred>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e02a      	b.n	8006910 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d01e      	beq.n	8006900 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c2:	f7fc fe81 	bl	80035c8 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d302      	bcc.n	80068d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d113      	bne.n	8006900 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068dc:	f043 0220 	orr.w	r2, r3, #32
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e007      	b.n	8006910 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b02      	cmp	r3, #2
 800690c:	d1cb      	bne.n	80068a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006924:	e028      	b.n	8006978 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 f830 	bl	8006990 <I2C_IsErrorOccurred>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e026      	b.n	8006988 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800693a:	f7fc fe45 	bl	80035c8 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d113      	bne.n	8006978 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	f043 0220 	orr.w	r2, r3, #32
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e007      	b.n	8006988 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b20      	cmp	r3, #32
 8006984:	d1cf      	bne.n	8006926 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	f003 0310 	and.w	r3, r3, #16
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d075      	beq.n	8006aa8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2210      	movs	r2, #16
 80069c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069c4:	e056      	b.n	8006a74 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d052      	beq.n	8006a74 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069ce:	f7fc fdfb 	bl	80035c8 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d302      	bcc.n	80069e4 <I2C_IsErrorOccurred+0x54>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d147      	bne.n	8006a74 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a06:	d12e      	bne.n	8006a66 <I2C_IsErrorOccurred+0xd6>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a0e:	d02a      	beq.n	8006a66 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006a10:	7cfb      	ldrb	r3, [r7, #19]
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d027      	beq.n	8006a66 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a26:	f7fc fdcf 	bl	80035c8 <HAL_GetTick>
 8006a2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a2c:	e01b      	b.n	8006a66 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a2e:	f7fc fdcb 	bl	80035c8 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b19      	cmp	r3, #25
 8006a3a:	d914      	bls.n	8006a66 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a40:	f043 0220 	orr.w	r2, r3, #32
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b20      	cmp	r3, #32
 8006a72:	d1dc      	bne.n	8006a2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d003      	beq.n	8006a8a <I2C_IsErrorOccurred+0xfa>
 8006a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d09d      	beq.n	80069c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2220      	movs	r2, #32
 8006a98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f043 0304 	orr.w	r3, r3, #4
 8006aa0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00b      	beq.n	8006ad2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	f043 0301 	orr.w	r3, r3, #1
 8006ac0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006aca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	f043 0308 	orr.w	r3, r3, #8
 8006ae2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006aec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00b      	beq.n	8006b16 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01c      	beq.n	8006b58 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7ff fe56 	bl	80067d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6859      	ldr	r1, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <I2C_IsErrorOccurred+0x1d4>)
 8006b30:	400b      	ands	r3, r1
 8006b32:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3728      	adds	r7, #40	; 0x28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	fe00e800 	.word	0xfe00e800

08006b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	607b      	str	r3, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	817b      	strh	r3, [r7, #10]
 8006b76:	4613      	mov	r3, r2
 8006b78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b7a:	897b      	ldrh	r3, [r7, #10]
 8006b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b80:	7a7b      	ldrb	r3, [r7, #9]
 8006b82:	041b      	lsls	r3, r3, #16
 8006b84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	0d5b      	lsrs	r3, r3, #21
 8006ba2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <I2C_TransferConfig+0x60>)
 8006ba8:	430b      	orrs	r3, r1
 8006baa:	43db      	mvns	r3, r3
 8006bac:	ea02 0103 	and.w	r1, r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	03ff63ff 	.word	0x03ff63ff

08006bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d138      	bne.n	8006c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e032      	b.n	8006c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2224      	movs	r2, #36	; 0x24
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0201 	bic.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6819      	ldr	r1, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c50:	2300      	movs	r3, #0
 8006c52:	e000      	b.n	8006c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c54:	2302      	movs	r3, #2
  }
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d139      	bne.n	8006cec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c82:	2302      	movs	r3, #2
 8006c84:	e033      	b.n	8006cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2224      	movs	r2, #36	; 0x24
 8006c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0201 	bic.w	r2, r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e000      	b.n	8006cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006cec:	2302      	movs	r3, #2
  }
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e041      	b.n	8006d90 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006d14:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f245 5255 	movw	r2, #21845	; 0x5555
 8006d1e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6852      	ldr	r2, [r2, #4]
 8006d28:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6892      	ldr	r2, [r2, #8]
 8006d32:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006d34:	f7fc fc48 	bl	80035c8 <HAL_GetTick>
 8006d38:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d3a:	e00f      	b.n	8006d5c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006d3c:	f7fc fc44 	bl	80035c8 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b31      	cmp	r3, #49	; 0x31
 8006d48:	d908      	bls.n	8006d5c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e019      	b.n	8006d90 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e8      	bne.n	8006d3c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d005      	beq.n	8006d84 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	68d2      	ldr	r2, [r2, #12]
 8006d80:	611a      	str	r2, [r3, #16]
 8006d82:	e004      	b.n	8006d8e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006da8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40007000 	.word	0x40007000

08006dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de2:	d130      	bne.n	8006e46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006de4:	4b23      	ldr	r3, [pc, #140]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df0:	d038      	beq.n	8006e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006df2:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e02:	4b1d      	ldr	r3, [pc, #116]	; (8006e78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2232      	movs	r2, #50	; 0x32
 8006e08:	fb02 f303 	mul.w	r3, r2, r3
 8006e0c:	4a1b      	ldr	r2, [pc, #108]	; (8006e7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	0c9b      	lsrs	r3, r3, #18
 8006e14:	3301      	adds	r3, #1
 8006e16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e18:	e002      	b.n	8006e20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e20:	4b14      	ldr	r3, [pc, #80]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e2c:	d102      	bne.n	8006e34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f2      	bne.n	8006e1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e34:	4b0f      	ldr	r3, [pc, #60]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e40:	d110      	bne.n	8006e64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e00f      	b.n	8006e66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e52:	d007      	beq.n	8006e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006e54:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e5c:	4a05      	ldr	r2, [pc, #20]	; (8006e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40007000 	.word	0x40007000
 8006e78:	20000168 	.word	0x20000168
 8006e7c:	431bde83 	.word	0x431bde83

08006e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d102      	bne.n	8006e94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f000 bc02 	b.w	8007698 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e94:	4b96      	ldr	r3, [pc, #600]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 030c 	and.w	r3, r3, #12
 8006e9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e9e:	4b94      	ldr	r3, [pc, #592]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80e4 	beq.w	800707e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <HAL_RCC_OscConfig+0x4c>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b0c      	cmp	r3, #12
 8006ec0:	f040 808b 	bne.w	8006fda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	f040 8087 	bne.w	8006fda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ecc:	4b88      	ldr	r3, [pc, #544]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x64>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e3d9      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1a      	ldr	r2, [r3, #32]
 8006ee8:	4b81      	ldr	r3, [pc, #516]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d004      	beq.n	8006efe <HAL_RCC_OscConfig+0x7e>
 8006ef4:	4b7e      	ldr	r3, [pc, #504]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006efc:	e005      	b.n	8006f0a <HAL_RCC_OscConfig+0x8a>
 8006efe:	4b7c      	ldr	r3, [pc, #496]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f04:	091b      	lsrs	r3, r3, #4
 8006f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d223      	bcs.n	8006f56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fd8a 	bl	8007a2c <RCC_SetFlashLatencyFromMSIRange>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e3ba      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f22:	4b73      	ldr	r3, [pc, #460]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a72      	ldr	r2, [pc, #456]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f28:	f043 0308 	orr.w	r3, r3, #8
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b70      	ldr	r3, [pc, #448]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	496d      	ldr	r1, [pc, #436]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f40:	4b6b      	ldr	r3, [pc, #428]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	4968      	ldr	r1, [pc, #416]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	604b      	str	r3, [r1, #4]
 8006f54:	e025      	b.n	8006fa2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f56:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a65      	ldr	r2, [pc, #404]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f5c:	f043 0308 	orr.w	r3, r3, #8
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	4b63      	ldr	r3, [pc, #396]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	4960      	ldr	r1, [pc, #384]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f74:	4b5e      	ldr	r3, [pc, #376]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	495b      	ldr	r1, [pc, #364]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fd4a 	bl	8007a2c <RCC_SetFlashLatencyFromMSIRange>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e37a      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fa2:	f000 fc81 	bl	80078a8 <HAL_RCC_GetSysClockFreq>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	4b51      	ldr	r3, [pc, #324]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	091b      	lsrs	r3, r3, #4
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	4950      	ldr	r1, [pc, #320]	; (80070f4 <HAL_RCC_OscConfig+0x274>)
 8006fb4:	5ccb      	ldrb	r3, [r1, r3]
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbe:	4a4e      	ldr	r2, [pc, #312]	; (80070f8 <HAL_RCC_OscConfig+0x278>)
 8006fc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006fc2:	4b4e      	ldr	r3, [pc, #312]	; (80070fc <HAL_RCC_OscConfig+0x27c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fc faae 	bl	8003528 <HAL_InitTick>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d052      	beq.n	800707c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	e35e      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d032      	beq.n	8007048 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006fe2:	4b43      	ldr	r3, [pc, #268]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a42      	ldr	r2, [pc, #264]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fee:	f7fc faeb 	bl	80035c8 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ff6:	f7fc fae7 	bl	80035c8 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e347      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007008:	4b39      	ldr	r3, [pc, #228]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007014:	4b36      	ldr	r3, [pc, #216]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a35      	ldr	r2, [pc, #212]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800701a:	f043 0308 	orr.w	r3, r3, #8
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	4b33      	ldr	r3, [pc, #204]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	4930      	ldr	r1, [pc, #192]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800702e:	4313      	orrs	r3, r2
 8007030:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007032:	4b2f      	ldr	r3, [pc, #188]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	492b      	ldr	r1, [pc, #172]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007042:	4313      	orrs	r3, r2
 8007044:	604b      	str	r3, [r1, #4]
 8007046:	e01a      	b.n	800707e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007048:	4b29      	ldr	r3, [pc, #164]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a28      	ldr	r2, [pc, #160]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800704e:	f023 0301 	bic.w	r3, r3, #1
 8007052:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007054:	f7fc fab8 	bl	80035c8 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800705c:	f7fc fab4 	bl	80035c8 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e314      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800706e:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f0      	bne.n	800705c <HAL_RCC_OscConfig+0x1dc>
 800707a:	e000      	b.n	800707e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800707c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d073      	beq.n	8007172 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b08      	cmp	r3, #8
 800708e:	d005      	beq.n	800709c <HAL_RCC_OscConfig+0x21c>
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	2b0c      	cmp	r3, #12
 8007094:	d10e      	bne.n	80070b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b03      	cmp	r3, #3
 800709a:	d10b      	bne.n	80070b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800709c:	4b14      	ldr	r3, [pc, #80]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d063      	beq.n	8007170 <HAL_RCC_OscConfig+0x2f0>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d15f      	bne.n	8007170 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e2f1      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070bc:	d106      	bne.n	80070cc <HAL_RCC_OscConfig+0x24c>
 80070be:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	e025      	b.n	8007118 <HAL_RCC_OscConfig+0x298>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070d4:	d114      	bne.n	8007100 <HAL_RCC_OscConfig+0x280>
 80070d6:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a05      	ldr	r2, [pc, #20]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a02      	ldr	r2, [pc, #8]	; (80070f0 <HAL_RCC_OscConfig+0x270>)
 80070e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	e013      	b.n	8007118 <HAL_RCC_OscConfig+0x298>
 80070f0:	40021000 	.word	0x40021000
 80070f4:	0800d6f8 	.word	0x0800d6f8
 80070f8:	20000168 	.word	0x20000168
 80070fc:	20000184 	.word	0x20000184
 8007100:	4ba0      	ldr	r3, [pc, #640]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a9f      	ldr	r2, [pc, #636]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	4b9d      	ldr	r3, [pc, #628]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a9c      	ldr	r2, [pc, #624]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d013      	beq.n	8007148 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fc fa52 	bl	80035c8 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007128:	f7fc fa4e 	bl	80035c8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b64      	cmp	r3, #100	; 0x64
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e2ae      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800713a:	4b92      	ldr	r3, [pc, #584]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0f0      	beq.n	8007128 <HAL_RCC_OscConfig+0x2a8>
 8007146:	e014      	b.n	8007172 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007148:	f7fc fa3e 	bl	80035c8 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007150:	f7fc fa3a 	bl	80035c8 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b64      	cmp	r3, #100	; 0x64
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e29a      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007162:	4b88      	ldr	r3, [pc, #544]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x2d0>
 800716e:	e000      	b.n	8007172 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d060      	beq.n	8007240 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b04      	cmp	r3, #4
 8007182:	d005      	beq.n	8007190 <HAL_RCC_OscConfig+0x310>
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b0c      	cmp	r3, #12
 8007188:	d119      	bne.n	80071be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d116      	bne.n	80071be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007190:	4b7c      	ldr	r3, [pc, #496]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <HAL_RCC_OscConfig+0x328>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e277      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a8:	4b76      	ldr	r3, [pc, #472]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	061b      	lsls	r3, r3, #24
 80071b6:	4973      	ldr	r1, [pc, #460]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071bc:	e040      	b.n	8007240 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d023      	beq.n	800720e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071c6:	4b6f      	ldr	r3, [pc, #444]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a6e      	ldr	r2, [pc, #440]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d2:	f7fc f9f9 	bl	80035c8 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071d8:	e008      	b.n	80071ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071da:	f7fc f9f5 	bl	80035c8 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e255      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071ec:	4b65      	ldr	r3, [pc, #404]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0f0      	beq.n	80071da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f8:	4b62      	ldr	r3, [pc, #392]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	061b      	lsls	r3, r3, #24
 8007206:	495f      	ldr	r1, [pc, #380]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007208:	4313      	orrs	r3, r2
 800720a:	604b      	str	r3, [r1, #4]
 800720c:	e018      	b.n	8007240 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800720e:	4b5d      	ldr	r3, [pc, #372]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a5c      	ldr	r2, [pc, #368]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721a:	f7fc f9d5 	bl	80035c8 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007222:	f7fc f9d1 	bl	80035c8 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e231      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007234:	4b53      	ldr	r3, [pc, #332]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f0      	bne.n	8007222 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d03c      	beq.n	80072c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01c      	beq.n	800728e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007254:	4b4b      	ldr	r3, [pc, #300]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800725a:	4a4a      	ldr	r2, [pc, #296]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 800725c:	f043 0301 	orr.w	r3, r3, #1
 8007260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007264:	f7fc f9b0 	bl	80035c8 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800726c:	f7fc f9ac 	bl	80035c8 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e20c      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800727e:	4b41      	ldr	r3, [pc, #260]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ef      	beq.n	800726c <HAL_RCC_OscConfig+0x3ec>
 800728c:	e01b      	b.n	80072c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800728e:	4b3d      	ldr	r3, [pc, #244]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007294:	4a3b      	ldr	r2, [pc, #236]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729e:	f7fc f993 	bl	80035c8 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072a6:	f7fc f98f 	bl	80035c8 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e1ef      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80072b8:	4b32      	ldr	r3, [pc, #200]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1ef      	bne.n	80072a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80a6 	beq.w	8007420 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072d4:	2300      	movs	r3, #0
 80072d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80072d8:	4b2a      	ldr	r3, [pc, #168]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10d      	bne.n	8007300 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072e4:	4b27      	ldr	r3, [pc, #156]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e8:	4a26      	ldr	r2, [pc, #152]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ee:	6593      	str	r3, [r2, #88]	; 0x58
 80072f0:	4b24      	ldr	r3, [pc, #144]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 80072f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072fc:	2301      	movs	r3, #1
 80072fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007300:	4b21      	ldr	r3, [pc, #132]	; (8007388 <HAL_RCC_OscConfig+0x508>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	d118      	bne.n	800733e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800730c:	4b1e      	ldr	r3, [pc, #120]	; (8007388 <HAL_RCC_OscConfig+0x508>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <HAL_RCC_OscConfig+0x508>)
 8007312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007318:	f7fc f956 	bl	80035c8 <HAL_GetTick>
 800731c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007320:	f7fc f952 	bl	80035c8 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e1b2      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <HAL_RCC_OscConfig+0x508>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d108      	bne.n	8007358 <HAL_RCC_OscConfig+0x4d8>
 8007346:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	4a0d      	ldr	r2, [pc, #52]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007356:	e029      	b.n	80073ac <HAL_RCC_OscConfig+0x52c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b05      	cmp	r3, #5
 800735e:	d115      	bne.n	800738c <HAL_RCC_OscConfig+0x50c>
 8007360:	4b08      	ldr	r3, [pc, #32]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007366:	4a07      	ldr	r2, [pc, #28]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007368:	f043 0304 	orr.w	r3, r3, #4
 800736c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007370:	4b04      	ldr	r3, [pc, #16]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	4a03      	ldr	r2, [pc, #12]	; (8007384 <HAL_RCC_OscConfig+0x504>)
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007380:	e014      	b.n	80073ac <HAL_RCC_OscConfig+0x52c>
 8007382:	bf00      	nop
 8007384:	40021000 	.word	0x40021000
 8007388:	40007000 	.word	0x40007000
 800738c:	4b9a      	ldr	r3, [pc, #616]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 800738e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007392:	4a99      	ldr	r2, [pc, #612]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800739c:	4b96      	ldr	r3, [pc, #600]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 800739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a2:	4a95      	ldr	r2, [pc, #596]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 80073a4:	f023 0304 	bic.w	r3, r3, #4
 80073a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d016      	beq.n	80073e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b4:	f7fc f908 	bl	80035c8 <HAL_GetTick>
 80073b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073ba:	e00a      	b.n	80073d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073bc:	f7fc f904 	bl	80035c8 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e162      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073d2:	4b89      	ldr	r3, [pc, #548]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 80073d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0ed      	beq.n	80073bc <HAL_RCC_OscConfig+0x53c>
 80073e0:	e015      	b.n	800740e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e2:	f7fc f8f1 	bl	80035c8 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073e8:	e00a      	b.n	8007400 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ea:	f7fc f8ed 	bl	80035c8 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e14b      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007400:	4b7d      	ldr	r3, [pc, #500]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1ed      	bne.n	80073ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800740e:	7ffb      	ldrb	r3, [r7, #31]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d105      	bne.n	8007420 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007414:	4b78      	ldr	r3, [pc, #480]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	4a77      	ldr	r2, [pc, #476]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 800741a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800741e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b00      	cmp	r3, #0
 800742a:	d03c      	beq.n	80074a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01c      	beq.n	800746e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007434:	4b70      	ldr	r3, [pc, #448]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800743a:	4a6f      	ldr	r2, [pc, #444]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 800743c:	f043 0301 	orr.w	r3, r3, #1
 8007440:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007444:	f7fc f8c0 	bl	80035c8 <HAL_GetTick>
 8007448:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800744a:	e008      	b.n	800745e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800744c:	f7fc f8bc 	bl	80035c8 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	2b02      	cmp	r3, #2
 8007458:	d901      	bls.n	800745e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e11c      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800745e:	4b66      	ldr	r3, [pc, #408]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0ef      	beq.n	800744c <HAL_RCC_OscConfig+0x5cc>
 800746c:	e01b      	b.n	80074a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800746e:	4b62      	ldr	r3, [pc, #392]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007474:	4a60      	ldr	r2, [pc, #384]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007476:	f023 0301 	bic.w	r3, r3, #1
 800747a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800747e:	f7fc f8a3 	bl	80035c8 <HAL_GetTick>
 8007482:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007484:	e008      	b.n	8007498 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007486:	f7fc f89f 	bl	80035c8 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b02      	cmp	r3, #2
 8007492:	d901      	bls.n	8007498 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e0ff      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007498:	4b57      	ldr	r3, [pc, #348]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 800749a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1ef      	bne.n	8007486 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80f3 	beq.w	8007696 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	f040 80c9 	bne.w	800764c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80074ba:	4b4f      	ldr	r3, [pc, #316]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f003 0203 	and.w	r2, r3, #3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d12c      	bne.n	8007528 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	3b01      	subs	r3, #1
 80074da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80074dc:	429a      	cmp	r2, r3
 80074de:	d123      	bne.n	8007528 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d11b      	bne.n	8007528 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d113      	bne.n	8007528 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750a:	085b      	lsrs	r3, r3, #1
 800750c:	3b01      	subs	r3, #1
 800750e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007510:	429a      	cmp	r2, r3
 8007512:	d109      	bne.n	8007528 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	3b01      	subs	r3, #1
 8007522:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007524:	429a      	cmp	r2, r3
 8007526:	d06b      	beq.n	8007600 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b0c      	cmp	r3, #12
 800752c:	d062      	beq.n	80075f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800752e:	4b32      	ldr	r3, [pc, #200]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e0ac      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800753e:	4b2e      	ldr	r3, [pc, #184]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a2d      	ldr	r2, [pc, #180]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007544:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007548:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800754a:	f7fc f83d 	bl	80035c8 <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007550:	e008      	b.n	8007564 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007552:	f7fc f839 	bl	80035c8 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d901      	bls.n	8007564 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e099      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007564:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f0      	bne.n	8007552 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007570:	4b21      	ldr	r3, [pc, #132]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	4b21      	ldr	r3, [pc, #132]	; (80075fc <HAL_RCC_OscConfig+0x77c>)
 8007576:	4013      	ands	r3, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007580:	3a01      	subs	r2, #1
 8007582:	0112      	lsls	r2, r2, #4
 8007584:	4311      	orrs	r1, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800758a:	0212      	lsls	r2, r2, #8
 800758c:	4311      	orrs	r1, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007592:	0852      	lsrs	r2, r2, #1
 8007594:	3a01      	subs	r2, #1
 8007596:	0552      	lsls	r2, r2, #21
 8007598:	4311      	orrs	r1, r2
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800759e:	0852      	lsrs	r2, r2, #1
 80075a0:	3a01      	subs	r2, #1
 80075a2:	0652      	lsls	r2, r2, #25
 80075a4:	4311      	orrs	r1, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075aa:	06d2      	lsls	r2, r2, #27
 80075ac:	430a      	orrs	r2, r1
 80075ae:	4912      	ldr	r1, [pc, #72]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80075b4:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a0f      	ldr	r2, [pc, #60]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 80075ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075c0:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 80075c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075cc:	f7fb fffc 	bl	80035c8 <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075d2:	e008      	b.n	80075e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d4:	f7fb fff8 	bl	80035c8 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e058      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075e6:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <HAL_RCC_OscConfig+0x778>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0f0      	beq.n	80075d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075f2:	e050      	b.n	8007696 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e04f      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
 80075f8:	40021000 	.word	0x40021000
 80075fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007600:	4b27      	ldr	r3, [pc, #156]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d144      	bne.n	8007696 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800760c:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a23      	ldr	r2, [pc, #140]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 8007612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007616:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007618:	4b21      	ldr	r3, [pc, #132]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	4a20      	ldr	r2, [pc, #128]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 800761e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007622:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007624:	f7fb ffd0 	bl	80035c8 <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800762c:	f7fb ffcc 	bl	80035c8 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e02c      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800763e:	4b18      	ldr	r3, [pc, #96]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f0      	beq.n	800762c <HAL_RCC_OscConfig+0x7ac>
 800764a:	e024      	b.n	8007696 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b0c      	cmp	r3, #12
 8007650:	d01f      	beq.n	8007692 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007652:	4b13      	ldr	r3, [pc, #76]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a12      	ldr	r2, [pc, #72]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 8007658:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800765c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765e:	f7fb ffb3 	bl	80035c8 <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007664:	e008      	b.n	8007678 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007666:	f7fb ffaf 	bl	80035c8 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d901      	bls.n	8007678 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e00f      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1f0      	bne.n	8007666 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	4905      	ldr	r1, [pc, #20]	; (80076a0 <HAL_RCC_OscConfig+0x820>)
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <HAL_RCC_OscConfig+0x824>)
 800768c:	4013      	ands	r3, r2
 800768e:	60cb      	str	r3, [r1, #12]
 8007690:	e001      	b.n	8007696 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3720      	adds	r7, #32
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	40021000 	.word	0x40021000
 80076a4:	feeefffc 	.word	0xfeeefffc

080076a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e0e7      	b.n	800788c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076bc:	4b75      	ldr	r3, [pc, #468]	; (8007894 <HAL_RCC_ClockConfig+0x1ec>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d910      	bls.n	80076ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ca:	4b72      	ldr	r3, [pc, #456]	; (8007894 <HAL_RCC_ClockConfig+0x1ec>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f023 0207 	bic.w	r2, r3, #7
 80076d2:	4970      	ldr	r1, [pc, #448]	; (8007894 <HAL_RCC_ClockConfig+0x1ec>)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076da:	4b6e      	ldr	r3, [pc, #440]	; (8007894 <HAL_RCC_ClockConfig+0x1ec>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d001      	beq.n	80076ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e0cf      	b.n	800788c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d010      	beq.n	800771a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	4b66      	ldr	r3, [pc, #408]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007704:	429a      	cmp	r2, r3
 8007706:	d908      	bls.n	800771a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007708:	4b63      	ldr	r3, [pc, #396]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	4960      	ldr	r1, [pc, #384]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 8007716:	4313      	orrs	r3, r2
 8007718:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d04c      	beq.n	80077c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2b03      	cmp	r3, #3
 800772c:	d107      	bne.n	800773e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800772e:	4b5a      	ldr	r3, [pc, #360]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d121      	bne.n	800777e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e0a6      	b.n	800788c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d107      	bne.n	8007756 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007746:	4b54      	ldr	r3, [pc, #336]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d115      	bne.n	800777e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e09a      	b.n	800788c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d107      	bne.n	800776e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800775e:	4b4e      	ldr	r3, [pc, #312]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e08e      	b.n	800788c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800776e:	4b4a      	ldr	r3, [pc, #296]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e086      	b.n	800788c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800777e:	4b46      	ldr	r3, [pc, #280]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f023 0203 	bic.w	r2, r3, #3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	4943      	ldr	r1, [pc, #268]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 800778c:	4313      	orrs	r3, r2
 800778e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007790:	f7fb ff1a 	bl	80035c8 <HAL_GetTick>
 8007794:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007796:	e00a      	b.n	80077ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007798:	f7fb ff16 	bl	80035c8 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e06e      	b.n	800788c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ae:	4b3a      	ldr	r3, [pc, #232]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 020c 	and.w	r2, r3, #12
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	429a      	cmp	r2, r3
 80077be:	d1eb      	bne.n	8007798 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0302 	and.w	r3, r3, #2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d010      	beq.n	80077ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	4b31      	ldr	r3, [pc, #196]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077d8:	429a      	cmp	r2, r3
 80077da:	d208      	bcs.n	80077ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077dc:	4b2e      	ldr	r3, [pc, #184]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	492b      	ldr	r1, [pc, #172]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077ee:	4b29      	ldr	r3, [pc, #164]	; (8007894 <HAL_RCC_ClockConfig+0x1ec>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d210      	bcs.n	800781e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077fc:	4b25      	ldr	r3, [pc, #148]	; (8007894 <HAL_RCC_ClockConfig+0x1ec>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f023 0207 	bic.w	r2, r3, #7
 8007804:	4923      	ldr	r1, [pc, #140]	; (8007894 <HAL_RCC_ClockConfig+0x1ec>)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	4313      	orrs	r3, r2
 800780a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800780c:	4b21      	ldr	r3, [pc, #132]	; (8007894 <HAL_RCC_ClockConfig+0x1ec>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d001      	beq.n	800781e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e036      	b.n	800788c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d008      	beq.n	800783c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800782a:	4b1b      	ldr	r3, [pc, #108]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	4918      	ldr	r1, [pc, #96]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 8007838:	4313      	orrs	r3, r2
 800783a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007848:	4b13      	ldr	r3, [pc, #76]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	4910      	ldr	r1, [pc, #64]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 8007858:	4313      	orrs	r3, r2
 800785a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800785c:	f000 f824 	bl	80078a8 <HAL_RCC_GetSysClockFreq>
 8007860:	4602      	mov	r2, r0
 8007862:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <HAL_RCC_ClockConfig+0x1f0>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	091b      	lsrs	r3, r3, #4
 8007868:	f003 030f 	and.w	r3, r3, #15
 800786c:	490b      	ldr	r1, [pc, #44]	; (800789c <HAL_RCC_ClockConfig+0x1f4>)
 800786e:	5ccb      	ldrb	r3, [r1, r3]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	fa22 f303 	lsr.w	r3, r2, r3
 8007878:	4a09      	ldr	r2, [pc, #36]	; (80078a0 <HAL_RCC_ClockConfig+0x1f8>)
 800787a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <HAL_RCC_ClockConfig+0x1fc>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f7fb fe51 	bl	8003528 <HAL_InitTick>
 8007886:	4603      	mov	r3, r0
 8007888:	72fb      	strb	r3, [r7, #11]

  return status;
 800788a:	7afb      	ldrb	r3, [r7, #11]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	40022000 	.word	0x40022000
 8007898:	40021000 	.word	0x40021000
 800789c:	0800d6f8 	.word	0x0800d6f8
 80078a0:	20000168 	.word	0x20000168
 80078a4:	20000184 	.word	0x20000184

080078a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b089      	sub	sp, #36	; 0x24
 80078ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	61fb      	str	r3, [r7, #28]
 80078b2:	2300      	movs	r3, #0
 80078b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078b6:	4b3e      	ldr	r3, [pc, #248]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 030c 	and.w	r3, r3, #12
 80078be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078c0:	4b3b      	ldr	r3, [pc, #236]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d005      	beq.n	80078dc <HAL_RCC_GetSysClockFreq+0x34>
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b0c      	cmp	r3, #12
 80078d4:	d121      	bne.n	800791a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d11e      	bne.n	800791a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80078dc:	4b34      	ldr	r3, [pc, #208]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d107      	bne.n	80078f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80078e8:	4b31      	ldr	r3, [pc, #196]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80078ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078ee:	0a1b      	lsrs	r3, r3, #8
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	e005      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80078f8:	4b2d      	ldr	r3, [pc, #180]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	091b      	lsrs	r3, r3, #4
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007904:	4a2b      	ldr	r2, [pc, #172]	; (80079b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10d      	bne.n	8007930 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007918:	e00a      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	2b04      	cmp	r3, #4
 800791e:	d102      	bne.n	8007926 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007920:	4b25      	ldr	r3, [pc, #148]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007922:	61bb      	str	r3, [r7, #24]
 8007924:	e004      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b08      	cmp	r3, #8
 800792a:	d101      	bne.n	8007930 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800792c:	4b22      	ldr	r3, [pc, #136]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800792e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b0c      	cmp	r3, #12
 8007934:	d134      	bne.n	80079a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007936:	4b1e      	ldr	r3, [pc, #120]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d003      	beq.n	800794e <HAL_RCC_GetSysClockFreq+0xa6>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d003      	beq.n	8007954 <HAL_RCC_GetSysClockFreq+0xac>
 800794c:	e005      	b.n	800795a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800794e:	4b1a      	ldr	r3, [pc, #104]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007950:	617b      	str	r3, [r7, #20]
      break;
 8007952:	e005      	b.n	8007960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007954:	4b18      	ldr	r3, [pc, #96]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007956:	617b      	str	r3, [r7, #20]
      break;
 8007958:	e002      	b.n	8007960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	617b      	str	r3, [r7, #20]
      break;
 800795e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007960:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	3301      	adds	r3, #1
 800796c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800796e:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	fb03 f202 	mul.w	r2, r3, r2
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	fbb2 f3f3 	udiv	r3, r2, r3
 8007984:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007986:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	0e5b      	lsrs	r3, r3, #25
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	3301      	adds	r3, #1
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	fbb2 f3f3 	udiv	r3, r2, r3
 800799e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80079a0:	69bb      	ldr	r3, [r7, #24]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3724      	adds	r7, #36	; 0x24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	40021000 	.word	0x40021000
 80079b4:	0800d710 	.word	0x0800d710
 80079b8:	00f42400 	.word	0x00f42400

080079bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079c0:	4b03      	ldr	r3, [pc, #12]	; (80079d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80079c2:	681b      	ldr	r3, [r3, #0]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20000168 	.word	0x20000168

080079d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80079d8:	f7ff fff0 	bl	80079bc <HAL_RCC_GetHCLKFreq>
 80079dc:	4602      	mov	r2, r0
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	0a1b      	lsrs	r3, r3, #8
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	4904      	ldr	r1, [pc, #16]	; (80079fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80079ea:	5ccb      	ldrb	r3, [r1, r3]
 80079ec:	f003 031f 	and.w	r3, r3, #31
 80079f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40021000 	.word	0x40021000
 80079fc:	0800d708 	.word	0x0800d708

08007a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007a04:	f7ff ffda 	bl	80079bc <HAL_RCC_GetHCLKFreq>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	0adb      	lsrs	r3, r3, #11
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	4904      	ldr	r1, [pc, #16]	; (8007a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a16:	5ccb      	ldrb	r3, [r1, r3]
 8007a18:	f003 031f 	and.w	r3, r3, #31
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40021000 	.word	0x40021000
 8007a28:	0800d708 	.word	0x0800d708

08007a2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a38:	4b2a      	ldr	r3, [pc, #168]	; (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a44:	f7ff f9b8 	bl	8006db8 <HAL_PWREx_GetVoltageRange>
 8007a48:	6178      	str	r0, [r7, #20]
 8007a4a:	e014      	b.n	8007a76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a4c:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a50:	4a24      	ldr	r2, [pc, #144]	; (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a56:	6593      	str	r3, [r2, #88]	; 0x58
 8007a58:	4b22      	ldr	r3, [pc, #136]	; (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a64:	f7ff f9a8 	bl	8006db8 <HAL_PWREx_GetVoltageRange>
 8007a68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a7c:	d10b      	bne.n	8007a96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b80      	cmp	r3, #128	; 0x80
 8007a82:	d919      	bls.n	8007ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2ba0      	cmp	r3, #160	; 0xa0
 8007a88:	d902      	bls.n	8007a90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	613b      	str	r3, [r7, #16]
 8007a8e:	e013      	b.n	8007ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007a90:	2301      	movs	r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	e010      	b.n	8007ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b80      	cmp	r3, #128	; 0x80
 8007a9a:	d902      	bls.n	8007aa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	e00a      	b.n	8007ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b80      	cmp	r3, #128	; 0x80
 8007aa6:	d102      	bne.n	8007aae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	e004      	b.n	8007ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b70      	cmp	r3, #112	; 0x70
 8007ab2:	d101      	bne.n	8007ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007ab8:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f023 0207 	bic.w	r2, r3, #7
 8007ac0:	4909      	ldr	r1, [pc, #36]	; (8007ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007ac8:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d001      	beq.n	8007ada <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	40021000 	.word	0x40021000
 8007ae8:	40022000 	.word	0x40022000

08007aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007af4:	2300      	movs	r3, #0
 8007af6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007af8:	2300      	movs	r3, #0
 8007afa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d031      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b10:	d01a      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007b12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b16:	d814      	bhi.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d009      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b20:	d10f      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007b22:	4b5d      	ldr	r3, [pc, #372]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	4a5c      	ldr	r2, [pc, #368]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b2e:	e00c      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3304      	adds	r3, #4
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f9f0 	bl	8007f1c <RCCEx_PLLSAI1_Config>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007b40:	e003      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	74fb      	strb	r3, [r7, #19]
      break;
 8007b46:	e000      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b4a:	7cfb      	ldrb	r3, [r7, #19]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10b      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b50:	4b51      	ldr	r3, [pc, #324]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5e:	494e      	ldr	r1, [pc, #312]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007b66:	e001      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b68:	7cfb      	ldrb	r3, [r7, #19]
 8007b6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 809e 	beq.w	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b7e:	4b46      	ldr	r3, [pc, #280]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b94:	4b40      	ldr	r3, [pc, #256]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b98:	4a3f      	ldr	r2, [pc, #252]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8007ba0:	4b3d      	ldr	r3, [pc, #244]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ba8:	60bb      	str	r3, [r7, #8]
 8007baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bac:	2301      	movs	r3, #1
 8007bae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bb0:	4b3a      	ldr	r3, [pc, #232]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a39      	ldr	r2, [pc, #228]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bbc:	f7fb fd04 	bl	80035c8 <HAL_GetTick>
 8007bc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bc2:	e009      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bc4:	f7fb fd00 	bl	80035c8 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d902      	bls.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	74fb      	strb	r3, [r7, #19]
        break;
 8007bd6:	e005      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007bd8:	4b30      	ldr	r3, [pc, #192]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0ef      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007be4:	7cfb      	ldrb	r3, [r7, #19]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d15a      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007bea:	4b2b      	ldr	r3, [pc, #172]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01e      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d019      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c06:	4b24      	ldr	r3, [pc, #144]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c10:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007c12:	4b21      	ldr	r3, [pc, #132]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c18:	4a1f      	ldr	r2, [pc, #124]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007c22:	4b1d      	ldr	r3, [pc, #116]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c28:	4a1b      	ldr	r2, [pc, #108]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007c32:	4a19      	ldr	r2, [pc, #100]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d016      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c44:	f7fb fcc0 	bl	80035c8 <HAL_GetTick>
 8007c48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c4a:	e00b      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4c:	f7fb fcbc 	bl	80035c8 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d902      	bls.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	74fb      	strb	r3, [r7, #19]
            break;
 8007c62:	e006      	b.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c64:	4b0c      	ldr	r3, [pc, #48]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0ec      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007c72:	7cfb      	ldrb	r3, [r7, #19]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10b      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c78:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c86:	4904      	ldr	r1, [pc, #16]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007c8e:	e009      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c90:	7cfb      	ldrb	r3, [r7, #19]
 8007c92:	74bb      	strb	r3, [r7, #18]
 8007c94:	e006      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007c96:	bf00      	nop
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca0:	7cfb      	ldrb	r3, [r7, #19]
 8007ca2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ca4:	7c7b      	ldrb	r3, [r7, #17]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d105      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007caa:	4b9b      	ldr	r3, [pc, #620]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cae:	4a9a      	ldr	r2, [pc, #616]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cc2:	4b95      	ldr	r3, [pc, #596]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc8:	f023 0203 	bic.w	r2, r3, #3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	4991      	ldr	r1, [pc, #580]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ce4:	4b8c      	ldr	r3, [pc, #560]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cea:	f023 020c 	bic.w	r2, r3, #12
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	4989      	ldr	r1, [pc, #548]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0304 	and.w	r3, r3, #4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d06:	4b84      	ldr	r3, [pc, #528]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	4980      	ldr	r1, [pc, #512]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d28:	4b7b      	ldr	r3, [pc, #492]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	4978      	ldr	r1, [pc, #480]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d4a:	4b73      	ldr	r3, [pc, #460]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d58:	496f      	ldr	r1, [pc, #444]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d6c:	4b6a      	ldr	r3, [pc, #424]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	4967      	ldr	r1, [pc, #412]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007d8e:	4b62      	ldr	r3, [pc, #392]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9c:	495e      	ldr	r1, [pc, #376]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007db0:	4b59      	ldr	r3, [pc, #356]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbe:	4956      	ldr	r1, [pc, #344]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007dd2:	4b51      	ldr	r3, [pc, #324]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	494d      	ldr	r1, [pc, #308]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d028      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007df4:	4b48      	ldr	r3, [pc, #288]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e02:	4945      	ldr	r1, [pc, #276]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e12:	d106      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e14:	4b40      	ldr	r3, [pc, #256]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4a3f      	ldr	r2, [pc, #252]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e1e:	60d3      	str	r3, [r2, #12]
 8007e20:	e011      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e2a:	d10c      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	2101      	movs	r1, #1
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 f872 	bl	8007f1c <RCCEx_PLLSAI1_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e3c:	7cfb      	ldrb	r3, [r7, #19]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007e42:	7cfb      	ldrb	r3, [r7, #19]
 8007e44:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d028      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e52:	4b31      	ldr	r3, [pc, #196]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e60:	492d      	ldr	r1, [pc, #180]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e70:	d106      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e72:	4b29      	ldr	r3, [pc, #164]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	4a28      	ldr	r2, [pc, #160]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e7c:	60d3      	str	r3, [r2, #12]
 8007e7e:	e011      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e88:	d10c      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	2101      	movs	r1, #1
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 f843 	bl	8007f1c <RCCEx_PLLSAI1_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e9a:	7cfb      	ldrb	r3, [r7, #19]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007ea0:	7cfb      	ldrb	r3, [r7, #19]
 8007ea2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d01c      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eb0:	4b19      	ldr	r3, [pc, #100]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ebe:	4916      	ldr	r1, [pc, #88]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ece:	d10c      	bne.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	2102      	movs	r1, #2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 f820 	bl	8007f1c <RCCEx_PLLSAI1_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ee0:	7cfb      	ldrb	r3, [r7, #19]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007ee6:	7cfb      	ldrb	r3, [r7, #19]
 8007ee8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ef6:	4b08      	ldr	r3, [pc, #32]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007efc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f04:	4904      	ldr	r1, [pc, #16]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	40021000 	.word	0x40021000

08007f1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f2a:	4b74      	ldr	r3, [pc, #464]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d018      	beq.n	8007f68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f36:	4b71      	ldr	r3, [pc, #452]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f003 0203 	and.w	r2, r3, #3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d10d      	bne.n	8007f62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
       ||
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d009      	beq.n	8007f62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007f4e:	4b6b      	ldr	r3, [pc, #428]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	091b      	lsrs	r3, r3, #4
 8007f54:	f003 0307 	and.w	r3, r3, #7
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
       ||
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d047      	beq.n	8007ff2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	73fb      	strb	r3, [r7, #15]
 8007f66:	e044      	b.n	8007ff2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d018      	beq.n	8007fa2 <RCCEx_PLLSAI1_Config+0x86>
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d825      	bhi.n	8007fc0 <RCCEx_PLLSAI1_Config+0xa4>
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d002      	beq.n	8007f7e <RCCEx_PLLSAI1_Config+0x62>
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d009      	beq.n	8007f90 <RCCEx_PLLSAI1_Config+0x74>
 8007f7c:	e020      	b.n	8007fc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f7e:	4b5f      	ldr	r3, [pc, #380]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d11d      	bne.n	8007fc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f8e:	e01a      	b.n	8007fc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f90:	4b5a      	ldr	r3, [pc, #360]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d116      	bne.n	8007fca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fa0:	e013      	b.n	8007fca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007fa2:	4b56      	ldr	r3, [pc, #344]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10f      	bne.n	8007fce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007fae:	4b53      	ldr	r3, [pc, #332]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d109      	bne.n	8007fce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007fbe:	e006      	b.n	8007fce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc4:	e004      	b.n	8007fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007fc6:	bf00      	nop
 8007fc8:	e002      	b.n	8007fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007fca:	bf00      	nop
 8007fcc:	e000      	b.n	8007fd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007fce:	bf00      	nop
    }

    if(status == HAL_OK)
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10d      	bne.n	8007ff2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007fd6:	4b49      	ldr	r3, [pc, #292]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6819      	ldr	r1, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	011b      	lsls	r3, r3, #4
 8007fea:	430b      	orrs	r3, r1
 8007fec:	4943      	ldr	r1, [pc, #268]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d17c      	bne.n	80080f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007ff8:	4b40      	ldr	r3, [pc, #256]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a3f      	ldr	r2, [pc, #252]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ffe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008004:	f7fb fae0 	bl	80035c8 <HAL_GetTick>
 8008008:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800800a:	e009      	b.n	8008020 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800800c:	f7fb fadc 	bl	80035c8 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b02      	cmp	r3, #2
 8008018:	d902      	bls.n	8008020 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	73fb      	strb	r3, [r7, #15]
        break;
 800801e:	e005      	b.n	800802c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008020:	4b36      	ldr	r3, [pc, #216]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1ef      	bne.n	800800c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d15f      	bne.n	80080f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d110      	bne.n	800805a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008038:	4b30      	ldr	r3, [pc, #192]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008040:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6892      	ldr	r2, [r2, #8]
 8008048:	0211      	lsls	r1, r2, #8
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	68d2      	ldr	r2, [r2, #12]
 800804e:	06d2      	lsls	r2, r2, #27
 8008050:	430a      	orrs	r2, r1
 8008052:	492a      	ldr	r1, [pc, #168]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008054:	4313      	orrs	r3, r2
 8008056:	610b      	str	r3, [r1, #16]
 8008058:	e027      	b.n	80080aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d112      	bne.n	8008086 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008060:	4b26      	ldr	r3, [pc, #152]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6892      	ldr	r2, [r2, #8]
 8008070:	0211      	lsls	r1, r2, #8
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6912      	ldr	r2, [r2, #16]
 8008076:	0852      	lsrs	r2, r2, #1
 8008078:	3a01      	subs	r2, #1
 800807a:	0552      	lsls	r2, r2, #21
 800807c:	430a      	orrs	r2, r1
 800807e:	491f      	ldr	r1, [pc, #124]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008080:	4313      	orrs	r3, r2
 8008082:	610b      	str	r3, [r1, #16]
 8008084:	e011      	b.n	80080aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008086:	4b1d      	ldr	r3, [pc, #116]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800808e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	6892      	ldr	r2, [r2, #8]
 8008096:	0211      	lsls	r1, r2, #8
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6952      	ldr	r2, [r2, #20]
 800809c:	0852      	lsrs	r2, r2, #1
 800809e:	3a01      	subs	r2, #1
 80080a0:	0652      	lsls	r2, r2, #25
 80080a2:	430a      	orrs	r2, r1
 80080a4:	4915      	ldr	r1, [pc, #84]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80080aa:	4b14      	ldr	r3, [pc, #80]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a13      	ldr	r2, [pc, #76]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80080b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b6:	f7fb fa87 	bl	80035c8 <HAL_GetTick>
 80080ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080bc:	e009      	b.n	80080d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080be:	f7fb fa83 	bl	80035c8 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d902      	bls.n	80080d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	73fb      	strb	r3, [r7, #15]
          break;
 80080d0:	e005      	b.n	80080de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80080d2:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0ef      	beq.n	80080be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d106      	bne.n	80080f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	4903      	ldr	r1, [pc, #12]	; (80080fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	40021000 	.word	0x40021000

08008100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e049      	b.n	80081a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fa fcf6 	bl	8002b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3304      	adds	r3, #4
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f000 faca 	bl	80086d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d001      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e03b      	b.n	8008240 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0201 	orr.w	r2, r2, #1
 80081de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a19      	ldr	r2, [pc, #100]	; (800824c <HAL_TIM_Base_Start_IT+0x9c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d009      	beq.n	80081fe <HAL_TIM_Base_Start_IT+0x4e>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f2:	d004      	beq.n	80081fe <HAL_TIM_Base_Start_IT+0x4e>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a15      	ldr	r2, [pc, #84]	; (8008250 <HAL_TIM_Base_Start_IT+0xa0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d115      	bne.n	800822a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	4b13      	ldr	r3, [pc, #76]	; (8008254 <HAL_TIM_Base_Start_IT+0xa4>)
 8008206:	4013      	ands	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b06      	cmp	r3, #6
 800820e:	d015      	beq.n	800823c <HAL_TIM_Base_Start_IT+0x8c>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008216:	d011      	beq.n	800823c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008228:	e008      	b.n	800823c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0201 	orr.w	r2, r2, #1
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	e000      	b.n	800823e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	40012c00 	.word	0x40012c00
 8008250:	40014000 	.word	0x40014000
 8008254:	00010007 	.word	0x00010007

08008258 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0201 	bic.w	r2, r2, #1
 800826e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6a1a      	ldr	r2, [r3, #32]
 8008276:	f241 1311 	movw	r3, #4369	; 0x1111
 800827a:	4013      	ands	r3, r2
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10f      	bne.n	80082a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6a1a      	ldr	r2, [r3, #32]
 8008286:	f240 4344 	movw	r3, #1092	; 0x444
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d107      	bne.n	80082a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0201 	bic.w	r2, r2, #1
 800829e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d122      	bne.n	8008312 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d11b      	bne.n	8008312 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f06f 0202 	mvn.w	r2, #2
 80082e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f9ce 	bl	800869a <HAL_TIM_IC_CaptureCallback>
 80082fe:	e005      	b.n	800830c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f9c0 	bl	8008686 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f9d1 	bl	80086ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b04      	cmp	r3, #4
 800831e:	d122      	bne.n	8008366 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b04      	cmp	r3, #4
 800832c:	d11b      	bne.n	8008366 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f06f 0204 	mvn.w	r2, #4
 8008336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f9a4 	bl	800869a <HAL_TIM_IC_CaptureCallback>
 8008352:	e005      	b.n	8008360 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f996 	bl	8008686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f9a7 	bl	80086ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b08      	cmp	r3, #8
 8008372:	d122      	bne.n	80083ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b08      	cmp	r3, #8
 8008380:	d11b      	bne.n	80083ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f06f 0208 	mvn.w	r2, #8
 800838a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2204      	movs	r2, #4
 8008390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	f003 0303 	and.w	r3, r3, #3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f97a 	bl	800869a <HAL_TIM_IC_CaptureCallback>
 80083a6:	e005      	b.n	80083b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f96c 	bl	8008686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f97d 	bl	80086ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	f003 0310 	and.w	r3, r3, #16
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	d122      	bne.n	800840e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	f003 0310 	and.w	r3, r3, #16
 80083d2:	2b10      	cmp	r3, #16
 80083d4:	d11b      	bne.n	800840e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f06f 0210 	mvn.w	r2, #16
 80083de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2208      	movs	r2, #8
 80083e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f950 	bl	800869a <HAL_TIM_IC_CaptureCallback>
 80083fa:	e005      	b.n	8008408 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f942 	bl	8008686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f953 	bl	80086ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b01      	cmp	r3, #1
 800841a:	d10e      	bne.n	800843a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b01      	cmp	r3, #1
 8008428:	d107      	bne.n	800843a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f06f 0201 	mvn.w	r2, #1
 8008432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7f9 fe41 	bl	80020bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008444:	2b80      	cmp	r3, #128	; 0x80
 8008446:	d10e      	bne.n	8008466 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008452:	2b80      	cmp	r3, #128	; 0x80
 8008454:	d107      	bne.n	8008466 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800845e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 faa7 	bl	80089b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008474:	d10e      	bne.n	8008494 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008480:	2b80      	cmp	r3, #128	; 0x80
 8008482:	d107      	bne.n	8008494 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800848c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa9a 	bl	80089c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849e:	2b40      	cmp	r3, #64	; 0x40
 80084a0:	d10e      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	d107      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f901 	bl	80086c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d10e      	bne.n	80084ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 0320 	and.w	r3, r3, #32
 80084d8:	2b20      	cmp	r3, #32
 80084da:	d107      	bne.n	80084ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f06f 0220 	mvn.w	r2, #32
 80084e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fa5a 	bl	80089a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_TIM_ConfigClockSource+0x1c>
 800850c:	2302      	movs	r3, #2
 800850e:	e0b6      	b.n	800867e <HAL_TIM_ConfigClockSource+0x18a>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800852e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800853a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800854c:	d03e      	beq.n	80085cc <HAL_TIM_ConfigClockSource+0xd8>
 800854e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008552:	f200 8087 	bhi.w	8008664 <HAL_TIM_ConfigClockSource+0x170>
 8008556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800855a:	f000 8086 	beq.w	800866a <HAL_TIM_ConfigClockSource+0x176>
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008562:	d87f      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x170>
 8008564:	2b70      	cmp	r3, #112	; 0x70
 8008566:	d01a      	beq.n	800859e <HAL_TIM_ConfigClockSource+0xaa>
 8008568:	2b70      	cmp	r3, #112	; 0x70
 800856a:	d87b      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x170>
 800856c:	2b60      	cmp	r3, #96	; 0x60
 800856e:	d050      	beq.n	8008612 <HAL_TIM_ConfigClockSource+0x11e>
 8008570:	2b60      	cmp	r3, #96	; 0x60
 8008572:	d877      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x170>
 8008574:	2b50      	cmp	r3, #80	; 0x50
 8008576:	d03c      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0xfe>
 8008578:	2b50      	cmp	r3, #80	; 0x50
 800857a:	d873      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x170>
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	d058      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x13e>
 8008580:	2b40      	cmp	r3, #64	; 0x40
 8008582:	d86f      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x170>
 8008584:	2b30      	cmp	r3, #48	; 0x30
 8008586:	d064      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0x15e>
 8008588:	2b30      	cmp	r3, #48	; 0x30
 800858a:	d86b      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x170>
 800858c:	2b20      	cmp	r3, #32
 800858e:	d060      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0x15e>
 8008590:	2b20      	cmp	r3, #32
 8008592:	d867      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x170>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d05c      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0x15e>
 8008598:	2b10      	cmp	r3, #16
 800859a:	d05a      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0x15e>
 800859c:	e062      	b.n	8008664 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6899      	ldr	r1, [r3, #8]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	f000 f971 	bl	8008894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	609a      	str	r2, [r3, #8]
      break;
 80085ca:	e04f      	b.n	800866c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	6899      	ldr	r1, [r3, #8]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f000 f95a 	bl	8008894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085ee:	609a      	str	r2, [r3, #8]
      break;
 80085f0:	e03c      	b.n	800866c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	6859      	ldr	r1, [r3, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	461a      	mov	r2, r3
 8008600:	f000 f8ce 	bl	80087a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2150      	movs	r1, #80	; 0x50
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f927 	bl	800885e <TIM_ITRx_SetConfig>
      break;
 8008610:	e02c      	b.n	800866c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6818      	ldr	r0, [r3, #0]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	6859      	ldr	r1, [r3, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	461a      	mov	r2, r3
 8008620:	f000 f8ed 	bl	80087fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2160      	movs	r1, #96	; 0x60
 800862a:	4618      	mov	r0, r3
 800862c:	f000 f917 	bl	800885e <TIM_ITRx_SetConfig>
      break;
 8008630:	e01c      	b.n	800866c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	6859      	ldr	r1, [r3, #4]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	461a      	mov	r2, r3
 8008640:	f000 f8ae 	bl	80087a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2140      	movs	r1, #64	; 0x40
 800864a:	4618      	mov	r0, r3
 800864c:	f000 f907 	bl	800885e <TIM_ITRx_SetConfig>
      break;
 8008650:	e00c      	b.n	800866c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4619      	mov	r1, r3
 800865c:	4610      	mov	r0, r2
 800865e:	f000 f8fe 	bl	800885e <TIM_ITRx_SetConfig>
      break;
 8008662:	e003      	b.n	800866c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]
      break;
 8008668:	e000      	b.n	800866c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800866a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
	...

080086d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a2a      	ldr	r2, [pc, #168]	; (8008794 <TIM_Base_SetConfig+0xbc>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d003      	beq.n	80086f8 <TIM_Base_SetConfig+0x20>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f6:	d108      	bne.n	800870a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	4313      	orrs	r3, r2
 8008708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a21      	ldr	r2, [pc, #132]	; (8008794 <TIM_Base_SetConfig+0xbc>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00b      	beq.n	800872a <TIM_Base_SetConfig+0x52>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008718:	d007      	beq.n	800872a <TIM_Base_SetConfig+0x52>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a1e      	ldr	r2, [pc, #120]	; (8008798 <TIM_Base_SetConfig+0xc0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_Base_SetConfig+0x52>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a1d      	ldr	r2, [pc, #116]	; (800879c <TIM_Base_SetConfig+0xc4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d108      	bne.n	800873c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4313      	orrs	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a0c      	ldr	r2, [pc, #48]	; (8008794 <TIM_Base_SetConfig+0xbc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d007      	beq.n	8008778 <TIM_Base_SetConfig+0xa0>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a0b      	ldr	r2, [pc, #44]	; (8008798 <TIM_Base_SetConfig+0xc0>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <TIM_Base_SetConfig+0xa0>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a0a      	ldr	r2, [pc, #40]	; (800879c <TIM_Base_SetConfig+0xc4>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d103      	bne.n	8008780 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	615a      	str	r2, [r3, #20]
}
 8008786:	bf00      	nop
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40012c00 	.word	0x40012c00
 8008798:	40014000 	.word	0x40014000
 800879c:	40014400 	.word	0x40014400

080087a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	f023 0201 	bic.w	r2, r3, #1
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	011b      	lsls	r3, r3, #4
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f023 030a 	bic.w	r3, r3, #10
 80087dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	621a      	str	r2, [r3, #32]
}
 80087f2:	bf00      	nop
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087fe:	b480      	push	{r7}
 8008800:	b087      	sub	sp, #28
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f023 0210 	bic.w	r2, r3, #16
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	031b      	lsls	r3, r3, #12
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800883a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	621a      	str	r2, [r3, #32]
}
 8008852:	bf00      	nop
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800885e:	b480      	push	{r7}
 8008860:	b085      	sub	sp, #20
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4313      	orrs	r3, r2
 800887c:	f043 0307 	orr.w	r3, r3, #7
 8008880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	609a      	str	r2, [r3, #8]
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	021a      	lsls	r2, r3, #8
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	431a      	orrs	r2, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	697a      	ldr	r2, [r7, #20]
 80088c6:	609a      	str	r2, [r3, #8]
}
 80088c8:	bf00      	nop
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088e8:	2302      	movs	r3, #2
 80088ea:	e04f      	b.n	800898c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a21      	ldr	r2, [pc, #132]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d108      	bne.n	8008928 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800891c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	4313      	orrs	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a14      	ldr	r2, [pc, #80]	; (8008998 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d009      	beq.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008954:	d004      	beq.n	8008960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a10      	ldr	r2, [pc, #64]	; (800899c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10c      	bne.n	800897a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008966:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	4313      	orrs	r3, r2
 8008970:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	40012c00 	.word	0x40012c00
 800899c:	40014000 	.word	0x40014000

080089a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e040      	b.n	8008a70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7fa f8e4 	bl	8002bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2224      	movs	r2, #36	; 0x24
 8008a08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0201 	bic.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fd2c 	bl	8009478 <UART_SetConfig>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e022      	b.n	8008a70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 ff7a 	bl	800992c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0201 	orr.w	r2, r2, #1
 8008a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 f801 	bl	8009a70 <UART_CheckIdleState>
 8008a6e:	4603      	mov	r3, r0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e02b      	b.n	8008ae2 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2224      	movs	r2, #36	; 0x24
 8008a8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0201 	bic.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2200      	movs	r2, #0
 8008aae:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7fa f915 	bl	8002ce8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b08a      	sub	sp, #40	; 0x28
 8008aee:	af02      	add	r7, sp, #8
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	603b      	str	r3, [r7, #0]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	f040 8082 	bne.w	8008c08 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <HAL_UART_Transmit+0x26>
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e07a      	b.n	8008c0a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d101      	bne.n	8008b22 <HAL_UART_Transmit+0x38>
 8008b1e:	2302      	movs	r3, #2
 8008b20:	e073      	b.n	8008c0a <HAL_UART_Transmit+0x120>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2221      	movs	r2, #33	; 0x21
 8008b36:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b38:	f7fa fd46 	bl	80035c8 <HAL_GetTick>
 8008b3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	88fa      	ldrh	r2, [r7, #6]
 8008b42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	88fa      	ldrh	r2, [r7, #6]
 8008b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b56:	d108      	bne.n	8008b6a <HAL_UART_Transmit+0x80>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	61bb      	str	r3, [r7, #24]
 8008b68:	e003      	b.n	8008b72 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008b7a:	e02d      	b.n	8008bd8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	2200      	movs	r2, #0
 8008b84:	2180      	movs	r1, #128	; 0x80
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 ffbb 	bl	8009b02 <UART_WaitOnFlagUntilTimeout>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e039      	b.n	8008c0a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	881a      	ldrh	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ba8:	b292      	uxth	r2, r2
 8008baa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	3302      	adds	r3, #2
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e008      	b.n	8008bc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	781a      	ldrb	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	b292      	uxth	r2, r2
 8008bbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1cb      	bne.n	8008b7c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2200      	movs	r2, #0
 8008bec:	2140      	movs	r1, #64	; 0x40
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 ff87 	bl	8009b02 <UART_WaitOnFlagUntilTimeout>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e005      	b.n	8008c0a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2220      	movs	r2, #32
 8008c02:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e000      	b.n	8008c0a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008c08:	2302      	movs	r3, #2
  }
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b08a      	sub	sp, #40	; 0x28
 8008c16:	af02      	add	r7, sp, #8
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	603b      	str	r3, [r7, #0]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c26:	2b20      	cmp	r3, #32
 8008c28:	f040 80bf 	bne.w	8008daa <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <HAL_UART_Receive+0x26>
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e0b7      	b.n	8008dac <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d101      	bne.n	8008c4a <HAL_UART_Receive+0x38>
 8008c46:	2302      	movs	r3, #2
 8008c48:	e0b0      	b.n	8008dac <HAL_UART_Receive+0x19a>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2222      	movs	r2, #34	; 0x22
 8008c5e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c66:	f7fa fcaf 	bl	80035c8 <HAL_GetTick>
 8008c6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	88fa      	ldrh	r2, [r7, #6]
 8008c70:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	88fa      	ldrh	r2, [r7, #6]
 8008c78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c84:	d10e      	bne.n	8008ca4 <HAL_UART_Receive+0x92>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d105      	bne.n	8008c9a <HAL_UART_Receive+0x88>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c98:	e02d      	b.n	8008cf6 <HAL_UART_Receive+0xe4>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	22ff      	movs	r2, #255	; 0xff
 8008c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ca2:	e028      	b.n	8008cf6 <HAL_UART_Receive+0xe4>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10d      	bne.n	8008cc8 <HAL_UART_Receive+0xb6>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d104      	bne.n	8008cbe <HAL_UART_Receive+0xac>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	22ff      	movs	r2, #255	; 0xff
 8008cb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cbc:	e01b      	b.n	8008cf6 <HAL_UART_Receive+0xe4>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	227f      	movs	r2, #127	; 0x7f
 8008cc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cc6:	e016      	b.n	8008cf6 <HAL_UART_Receive+0xe4>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cd0:	d10d      	bne.n	8008cee <HAL_UART_Receive+0xdc>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d104      	bne.n	8008ce4 <HAL_UART_Receive+0xd2>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	227f      	movs	r2, #127	; 0x7f
 8008cde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ce2:	e008      	b.n	8008cf6 <HAL_UART_Receive+0xe4>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	223f      	movs	r2, #63	; 0x3f
 8008ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cec:	e003      	b.n	8008cf6 <HAL_UART_Receive+0xe4>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008cfc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d06:	d108      	bne.n	8008d1a <HAL_UART_Receive+0x108>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008d10:	2300      	movs	r3, #0
 8008d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	61bb      	str	r3, [r7, #24]
 8008d18:	e003      	b.n	8008d22 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008d2a:	e033      	b.n	8008d94 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	2200      	movs	r2, #0
 8008d34:	2120      	movs	r1, #32
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fee3 	bl	8009b02 <UART_WaitOnFlagUntilTimeout>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e032      	b.n	8008dac <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10c      	bne.n	8008d66 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	8a7b      	ldrh	r3, [r7, #18]
 8008d56:	4013      	ands	r3, r2
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	3302      	adds	r3, #2
 8008d62:	61bb      	str	r3, [r7, #24]
 8008d64:	e00d      	b.n	8008d82 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	8a7b      	ldrh	r3, [r7, #18]
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	4013      	ands	r3, r2
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1c5      	bne.n	8008d2c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2220      	movs	r2, #32
 8008da4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e000      	b.n	8008dac <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008daa:	2302      	movs	r3, #2
  }
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3720      	adds	r7, #32
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08a      	sub	sp, #40	; 0x28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d142      	bne.n	8008e50 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <HAL_UART_Receive_DMA+0x22>
 8008dd0:	88fb      	ldrh	r3, [r7, #6]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e03b      	b.n	8008e52 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d101      	bne.n	8008de8 <HAL_UART_Receive_DMA+0x34>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e034      	b.n	8008e52 <HAL_UART_Receive_DMA+0x9e>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a18      	ldr	r2, [pc, #96]	; (8008e5c <HAL_UART_Receive_DMA+0xa8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d01f      	beq.n	8008e40 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d018      	beq.n	8008e40 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	623b      	str	r3, [r7, #32]
 8008e2e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e30:	69f9      	ldr	r1, [r7, #28]
 8008e32:	6a3a      	ldr	r2, [r7, #32]
 8008e34:	e841 2300 	strex	r3, r2, [r1]
 8008e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e6      	bne.n	8008e0e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e40:	88fb      	ldrh	r3, [r7, #6]
 8008e42:	461a      	mov	r2, r3
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 ff20 	bl	8009c8c <UART_Start_Receive_DMA>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	e000      	b.n	8008e52 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008e50:	2302      	movs	r3, #2
  }
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3728      	adds	r7, #40	; 0x28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	40008000 	.word	0x40008000

08008e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b0ba      	sub	sp, #232	; 0xe8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008e8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e8e:	4013      	ands	r3, r2
 8008e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d115      	bne.n	8008ec8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00f      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d009      	beq.n	8008ec8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 82a6 	beq.w	800940a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
      }
      return;
 8008ec6:	e2a0      	b.n	800940a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 8117 	beq.w	8009100 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d106      	bne.n	8008eec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ee2:	4b85      	ldr	r3, [pc, #532]	; (80090f8 <HAL_UART_IRQHandler+0x298>)
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 810a 	beq.w	8009100 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d011      	beq.n	8008f1c <HAL_UART_IRQHandler+0xbc>
 8008ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00b      	beq.n	8008f1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f12:	f043 0201 	orr.w	r2, r3, #1
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d011      	beq.n	8008f4c <HAL_UART_IRQHandler+0xec>
 8008f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2202      	movs	r2, #2
 8008f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f42:	f043 0204 	orr.w	r2, r3, #4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d011      	beq.n	8008f7c <HAL_UART_IRQHandler+0x11c>
 8008f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2204      	movs	r2, #4
 8008f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f72:	f043 0202 	orr.w	r2, r3, #2
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f80:	f003 0308 	and.w	r3, r3, #8
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d017      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2208      	movs	r2, #8
 8008fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fae:	f043 0208 	orr.w	r2, r3, #8
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d012      	beq.n	8008fea <HAL_UART_IRQHandler+0x18a>
 8008fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00c      	beq.n	8008fea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fe0:	f043 0220 	orr.w	r2, r3, #32
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 820c 	beq.w	800940e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00d      	beq.n	800901e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d007      	beq.n	800901e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009032:	2b40      	cmp	r3, #64	; 0x40
 8009034:	d005      	beq.n	8009042 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800903a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800903e:	2b00      	cmp	r3, #0
 8009040:	d04f      	beq.n	80090e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 feee 	bl	8009e24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009052:	2b40      	cmp	r3, #64	; 0x40
 8009054:	d141      	bne.n	80090da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3308      	adds	r3, #8
 800905c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800906c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3308      	adds	r3, #8
 800907e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009082:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800908e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800909a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1d9      	bne.n	8009056 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d013      	beq.n	80090d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ae:	4a13      	ldr	r2, [pc, #76]	; (80090fc <HAL_UART_IRQHandler+0x29c>)
 80090b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fc fdd6 	bl	8005c68 <HAL_DMA_Abort_IT>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d017      	beq.n	80090f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80090cc:	4610      	mov	r0, r2
 80090ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d0:	e00f      	b.n	80090f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9ba 	bl	800944c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d8:	e00b      	b.n	80090f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9b6 	bl	800944c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e0:	e007      	b.n	80090f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f9b2 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80090f0:	e18d      	b.n	800940e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f2:	bf00      	nop
    return;
 80090f4:	e18b      	b.n	800940e <HAL_UART_IRQHandler+0x5ae>
 80090f6:	bf00      	nop
 80090f8:	04000120 	.word	0x04000120
 80090fc:	0800a0c3 	.word	0x0800a0c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009104:	2b01      	cmp	r3, #1
 8009106:	f040 8146 	bne.w	8009396 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800910a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910e:	f003 0310 	and.w	r3, r3, #16
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 813f 	beq.w	8009396 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800911c:	f003 0310 	and.w	r3, r3, #16
 8009120:	2b00      	cmp	r3, #0
 8009122:	f000 8138 	beq.w	8009396 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2210      	movs	r2, #16
 800912c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009138:	2b40      	cmp	r3, #64	; 0x40
 800913a:	f040 80b4 	bne.w	80092a6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800914a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 815f 	beq.w	8009412 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800915a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800915e:	429a      	cmp	r2, r3
 8009160:	f080 8157 	bcs.w	8009412 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800916a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0320 	and.w	r3, r3, #32
 800917a:	2b00      	cmp	r3, #0
 800917c:	f040 8085 	bne.w	800928a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800919c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	461a      	mov	r2, r3
 80091a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1da      	bne.n	8009180 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091dc:	f023 0301 	bic.w	r3, r3, #1
 80091e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3308      	adds	r3, #8
 80091ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80091f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80091f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e1      	bne.n	80091ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800921c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800922a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800922c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e3      	bne.n	8009206 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800925a:	f023 0310 	bic.w	r3, r3, #16
 800925e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800926c:	65bb      	str	r3, [r7, #88]	; 0x58
 800926e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800927a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e4      	bne.n	800924a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009284:	4618      	mov	r0, r3
 8009286:	f7fc fcb1 	bl	8005bec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009296:	b29b      	uxth	r3, r3
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	b29b      	uxth	r3, r3
 800929c:	4619      	mov	r1, r3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f8de 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092a4:	e0b5      	b.n	8009412 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f000 80a7 	beq.w	8009416 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80092c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 80a2 	beq.w	8009416 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092f4:	647b      	str	r3, [r7, #68]	; 0x44
 80092f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092fc:	e841 2300 	strex	r3, r2, [r1]
 8009300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e4      	bne.n	80092d2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3308      	adds	r3, #8
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	623b      	str	r3, [r7, #32]
   return(result);
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	f023 0301 	bic.w	r3, r3, #1
 800931e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800932c:	633a      	str	r2, [r7, #48]	; 0x30
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009334:	e841 2300 	strex	r3, r2, [r1]
 8009338:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1e3      	bne.n	8009308 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2220      	movs	r2, #32
 8009344:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 0310 	bic.w	r3, r3, #16
 8009366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009374:	61fb      	str	r3, [r7, #28]
 8009376:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	69b9      	ldr	r1, [r7, #24]
 800937a:	69fa      	ldr	r2, [r7, #28]
 800937c:	e841 2300 	strex	r3, r2, [r1]
 8009380:	617b      	str	r3, [r7, #20]
   return(result);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1e4      	bne.n	8009352 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f866 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009394:	e03f      	b.n	8009416 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800939a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00e      	beq.n	80093c0 <HAL_UART_IRQHandler+0x560>
 80093a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d008      	beq.n	80093c0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80093b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fec2 	bl	800a142 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093be:	e02d      	b.n	800941c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80093c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00e      	beq.n	80093ea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80093cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d008      	beq.n	80093ea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01c      	beq.n	800941a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	4798      	blx	r3
    }
    return;
 80093e8:	e017      	b.n	800941a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d012      	beq.n	800941c <HAL_UART_IRQHandler+0x5bc>
 80093f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00c      	beq.n	800941c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fe73 	bl	800a0ee <UART_EndTransmit_IT>
    return;
 8009408:	e008      	b.n	800941c <HAL_UART_IRQHandler+0x5bc>
      return;
 800940a:	bf00      	nop
 800940c:	e006      	b.n	800941c <HAL_UART_IRQHandler+0x5bc>
    return;
 800940e:	bf00      	nop
 8009410:	e004      	b.n	800941c <HAL_UART_IRQHandler+0x5bc>
      return;
 8009412:	bf00      	nop
 8009414:	e002      	b.n	800941c <HAL_UART_IRQHandler+0x5bc>
      return;
 8009416:	bf00      	nop
 8009418:	e000      	b.n	800941c <HAL_UART_IRQHandler+0x5bc>
    return;
 800941a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800941c:	37e8      	adds	r7, #232	; 0xe8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop

08009424 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr

0800944c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800947c:	b08a      	sub	sp, #40	; 0x28
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	689a      	ldr	r2, [r3, #8]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	431a      	orrs	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	431a      	orrs	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	4313      	orrs	r3, r2
 800949e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	4b9e      	ldr	r3, [pc, #632]	; (8009720 <UART_SetConfig+0x2a8>)
 80094a8:	4013      	ands	r3, r2
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094b0:	430b      	orrs	r3, r1
 80094b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	68da      	ldr	r2, [r3, #12]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a93      	ldr	r2, [pc, #588]	; (8009724 <UART_SetConfig+0x2ac>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d004      	beq.n	80094e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e0:	4313      	orrs	r3, r2
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f4:	430a      	orrs	r2, r1
 80094f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a8a      	ldr	r2, [pc, #552]	; (8009728 <UART_SetConfig+0x2b0>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d126      	bne.n	8009550 <UART_SetConfig+0xd8>
 8009502:	4b8a      	ldr	r3, [pc, #552]	; (800972c <UART_SetConfig+0x2b4>)
 8009504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	2b03      	cmp	r3, #3
 800950e:	d81b      	bhi.n	8009548 <UART_SetConfig+0xd0>
 8009510:	a201      	add	r2, pc, #4	; (adr r2, 8009518 <UART_SetConfig+0xa0>)
 8009512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009516:	bf00      	nop
 8009518:	08009529 	.word	0x08009529
 800951c:	08009539 	.word	0x08009539
 8009520:	08009531 	.word	0x08009531
 8009524:	08009541 	.word	0x08009541
 8009528:	2301      	movs	r3, #1
 800952a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800952e:	e0ab      	b.n	8009688 <UART_SetConfig+0x210>
 8009530:	2302      	movs	r3, #2
 8009532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009536:	e0a7      	b.n	8009688 <UART_SetConfig+0x210>
 8009538:	2304      	movs	r3, #4
 800953a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800953e:	e0a3      	b.n	8009688 <UART_SetConfig+0x210>
 8009540:	2308      	movs	r3, #8
 8009542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009546:	e09f      	b.n	8009688 <UART_SetConfig+0x210>
 8009548:	2310      	movs	r3, #16
 800954a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800954e:	e09b      	b.n	8009688 <UART_SetConfig+0x210>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a76      	ldr	r2, [pc, #472]	; (8009730 <UART_SetConfig+0x2b8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d138      	bne.n	80095cc <UART_SetConfig+0x154>
 800955a:	4b74      	ldr	r3, [pc, #464]	; (800972c <UART_SetConfig+0x2b4>)
 800955c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009560:	f003 030c 	and.w	r3, r3, #12
 8009564:	2b0c      	cmp	r3, #12
 8009566:	d82d      	bhi.n	80095c4 <UART_SetConfig+0x14c>
 8009568:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <UART_SetConfig+0xf8>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	080095a5 	.word	0x080095a5
 8009574:	080095c5 	.word	0x080095c5
 8009578:	080095c5 	.word	0x080095c5
 800957c:	080095c5 	.word	0x080095c5
 8009580:	080095b5 	.word	0x080095b5
 8009584:	080095c5 	.word	0x080095c5
 8009588:	080095c5 	.word	0x080095c5
 800958c:	080095c5 	.word	0x080095c5
 8009590:	080095ad 	.word	0x080095ad
 8009594:	080095c5 	.word	0x080095c5
 8009598:	080095c5 	.word	0x080095c5
 800959c:	080095c5 	.word	0x080095c5
 80095a0:	080095bd 	.word	0x080095bd
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095aa:	e06d      	b.n	8009688 <UART_SetConfig+0x210>
 80095ac:	2302      	movs	r3, #2
 80095ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095b2:	e069      	b.n	8009688 <UART_SetConfig+0x210>
 80095b4:	2304      	movs	r3, #4
 80095b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095ba:	e065      	b.n	8009688 <UART_SetConfig+0x210>
 80095bc:	2308      	movs	r3, #8
 80095be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095c2:	e061      	b.n	8009688 <UART_SetConfig+0x210>
 80095c4:	2310      	movs	r3, #16
 80095c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80095ca:	e05d      	b.n	8009688 <UART_SetConfig+0x210>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a58      	ldr	r2, [pc, #352]	; (8009734 <UART_SetConfig+0x2bc>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d125      	bne.n	8009622 <UART_SetConfig+0x1aa>
 80095d6:	4b55      	ldr	r3, [pc, #340]	; (800972c <UART_SetConfig+0x2b4>)
 80095d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095e0:	2b30      	cmp	r3, #48	; 0x30
 80095e2:	d016      	beq.n	8009612 <UART_SetConfig+0x19a>
 80095e4:	2b30      	cmp	r3, #48	; 0x30
 80095e6:	d818      	bhi.n	800961a <UART_SetConfig+0x1a2>
 80095e8:	2b20      	cmp	r3, #32
 80095ea:	d00a      	beq.n	8009602 <UART_SetConfig+0x18a>
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	d814      	bhi.n	800961a <UART_SetConfig+0x1a2>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <UART_SetConfig+0x182>
 80095f4:	2b10      	cmp	r3, #16
 80095f6:	d008      	beq.n	800960a <UART_SetConfig+0x192>
 80095f8:	e00f      	b.n	800961a <UART_SetConfig+0x1a2>
 80095fa:	2300      	movs	r3, #0
 80095fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009600:	e042      	b.n	8009688 <UART_SetConfig+0x210>
 8009602:	2302      	movs	r3, #2
 8009604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009608:	e03e      	b.n	8009688 <UART_SetConfig+0x210>
 800960a:	2304      	movs	r3, #4
 800960c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009610:	e03a      	b.n	8009688 <UART_SetConfig+0x210>
 8009612:	2308      	movs	r3, #8
 8009614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009618:	e036      	b.n	8009688 <UART_SetConfig+0x210>
 800961a:	2310      	movs	r3, #16
 800961c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009620:	e032      	b.n	8009688 <UART_SetConfig+0x210>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a3f      	ldr	r2, [pc, #252]	; (8009724 <UART_SetConfig+0x2ac>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d12a      	bne.n	8009682 <UART_SetConfig+0x20a>
 800962c:	4b3f      	ldr	r3, [pc, #252]	; (800972c <UART_SetConfig+0x2b4>)
 800962e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009632:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800963a:	d01a      	beq.n	8009672 <UART_SetConfig+0x1fa>
 800963c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009640:	d81b      	bhi.n	800967a <UART_SetConfig+0x202>
 8009642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009646:	d00c      	beq.n	8009662 <UART_SetConfig+0x1ea>
 8009648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800964c:	d815      	bhi.n	800967a <UART_SetConfig+0x202>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <UART_SetConfig+0x1e2>
 8009652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009656:	d008      	beq.n	800966a <UART_SetConfig+0x1f2>
 8009658:	e00f      	b.n	800967a <UART_SetConfig+0x202>
 800965a:	2300      	movs	r3, #0
 800965c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009660:	e012      	b.n	8009688 <UART_SetConfig+0x210>
 8009662:	2302      	movs	r3, #2
 8009664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009668:	e00e      	b.n	8009688 <UART_SetConfig+0x210>
 800966a:	2304      	movs	r3, #4
 800966c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009670:	e00a      	b.n	8009688 <UART_SetConfig+0x210>
 8009672:	2308      	movs	r3, #8
 8009674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009678:	e006      	b.n	8009688 <UART_SetConfig+0x210>
 800967a:	2310      	movs	r3, #16
 800967c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009680:	e002      	b.n	8009688 <UART_SetConfig+0x210>
 8009682:	2310      	movs	r3, #16
 8009684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a25      	ldr	r2, [pc, #148]	; (8009724 <UART_SetConfig+0x2ac>)
 800968e:	4293      	cmp	r3, r2
 8009690:	f040 808a 	bne.w	80097a8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009698:	2b08      	cmp	r3, #8
 800969a:	d824      	bhi.n	80096e6 <UART_SetConfig+0x26e>
 800969c:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <UART_SetConfig+0x22c>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096e7 	.word	0x080096e7
 80096ac:	080096d1 	.word	0x080096d1
 80096b0:	080096e7 	.word	0x080096e7
 80096b4:	080096d7 	.word	0x080096d7
 80096b8:	080096e7 	.word	0x080096e7
 80096bc:	080096e7 	.word	0x080096e7
 80096c0:	080096e7 	.word	0x080096e7
 80096c4:	080096df 	.word	0x080096df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096c8:	f7fe f984 	bl	80079d4 <HAL_RCC_GetPCLK1Freq>
 80096cc:	61f8      	str	r0, [r7, #28]
        break;
 80096ce:	e010      	b.n	80096f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096d0:	4b19      	ldr	r3, [pc, #100]	; (8009738 <UART_SetConfig+0x2c0>)
 80096d2:	61fb      	str	r3, [r7, #28]
        break;
 80096d4:	e00d      	b.n	80096f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096d6:	f7fe f8e7 	bl	80078a8 <HAL_RCC_GetSysClockFreq>
 80096da:	61f8      	str	r0, [r7, #28]
        break;
 80096dc:	e009      	b.n	80096f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e2:	61fb      	str	r3, [r7, #28]
        break;
 80096e4:	e005      	b.n	80096f2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80096f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8109 	beq.w	800990c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	4613      	mov	r3, r2
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	4413      	add	r3, r2
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	429a      	cmp	r2, r3
 8009708:	d305      	bcc.n	8009716 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009710:	69fa      	ldr	r2, [r7, #28]
 8009712:	429a      	cmp	r2, r3
 8009714:	d912      	bls.n	800973c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800971c:	e0f6      	b.n	800990c <UART_SetConfig+0x494>
 800971e:	bf00      	nop
 8009720:	efff69f3 	.word	0xefff69f3
 8009724:	40008000 	.word	0x40008000
 8009728:	40013800 	.word	0x40013800
 800972c:	40021000 	.word	0x40021000
 8009730:	40004400 	.word	0x40004400
 8009734:	40004800 	.word	0x40004800
 8009738:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	2200      	movs	r2, #0
 8009740:	461c      	mov	r4, r3
 8009742:	4615      	mov	r5, r2
 8009744:	f04f 0200 	mov.w	r2, #0
 8009748:	f04f 0300 	mov.w	r3, #0
 800974c:	022b      	lsls	r3, r5, #8
 800974e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009752:	0222      	lsls	r2, r4, #8
 8009754:	68f9      	ldr	r1, [r7, #12]
 8009756:	6849      	ldr	r1, [r1, #4]
 8009758:	0849      	lsrs	r1, r1, #1
 800975a:	2000      	movs	r0, #0
 800975c:	4688      	mov	r8, r1
 800975e:	4681      	mov	r9, r0
 8009760:	eb12 0a08 	adds.w	sl, r2, r8
 8009764:	eb43 0b09 	adc.w	fp, r3, r9
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009776:	4650      	mov	r0, sl
 8009778:	4659      	mov	r1, fp
 800977a:	f7f7 fa65 	bl	8000c48 <__aeabi_uldivmod>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4613      	mov	r3, r2
 8009784:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800978c:	d308      	bcc.n	80097a0 <UART_SetConfig+0x328>
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009794:	d204      	bcs.n	80097a0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	60da      	str	r2, [r3, #12]
 800979e:	e0b5      	b.n	800990c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80097a6:	e0b1      	b.n	800990c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097b0:	d15d      	bne.n	800986e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80097b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097b6:	2b08      	cmp	r3, #8
 80097b8:	d827      	bhi.n	800980a <UART_SetConfig+0x392>
 80097ba:	a201      	add	r2, pc, #4	; (adr r2, 80097c0 <UART_SetConfig+0x348>)
 80097bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c0:	080097e5 	.word	0x080097e5
 80097c4:	080097ed 	.word	0x080097ed
 80097c8:	080097f5 	.word	0x080097f5
 80097cc:	0800980b 	.word	0x0800980b
 80097d0:	080097fb 	.word	0x080097fb
 80097d4:	0800980b 	.word	0x0800980b
 80097d8:	0800980b 	.word	0x0800980b
 80097dc:	0800980b 	.word	0x0800980b
 80097e0:	08009803 	.word	0x08009803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097e4:	f7fe f8f6 	bl	80079d4 <HAL_RCC_GetPCLK1Freq>
 80097e8:	61f8      	str	r0, [r7, #28]
        break;
 80097ea:	e014      	b.n	8009816 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097ec:	f7fe f908 	bl	8007a00 <HAL_RCC_GetPCLK2Freq>
 80097f0:	61f8      	str	r0, [r7, #28]
        break;
 80097f2:	e010      	b.n	8009816 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097f4:	4b4c      	ldr	r3, [pc, #304]	; (8009928 <UART_SetConfig+0x4b0>)
 80097f6:	61fb      	str	r3, [r7, #28]
        break;
 80097f8:	e00d      	b.n	8009816 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097fa:	f7fe f855 	bl	80078a8 <HAL_RCC_GetSysClockFreq>
 80097fe:	61f8      	str	r0, [r7, #28]
        break;
 8009800:	e009      	b.n	8009816 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009806:	61fb      	str	r3, [r7, #28]
        break;
 8009808:	e005      	b.n	8009816 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009814:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d077      	beq.n	800990c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	005a      	lsls	r2, r3, #1
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	085b      	lsrs	r3, r3, #1
 8009826:	441a      	add	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009830:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b0f      	cmp	r3, #15
 8009836:	d916      	bls.n	8009866 <UART_SetConfig+0x3ee>
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800983e:	d212      	bcs.n	8009866 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	b29b      	uxth	r3, r3
 8009844:	f023 030f 	bic.w	r3, r3, #15
 8009848:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	085b      	lsrs	r3, r3, #1
 800984e:	b29b      	uxth	r3, r3
 8009850:	f003 0307 	and.w	r3, r3, #7
 8009854:	b29a      	uxth	r2, r3
 8009856:	8afb      	ldrh	r3, [r7, #22]
 8009858:	4313      	orrs	r3, r2
 800985a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	8afa      	ldrh	r2, [r7, #22]
 8009862:	60da      	str	r2, [r3, #12]
 8009864:	e052      	b.n	800990c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800986c:	e04e      	b.n	800990c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800986e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009872:	2b08      	cmp	r3, #8
 8009874:	d827      	bhi.n	80098c6 <UART_SetConfig+0x44e>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <UART_SetConfig+0x404>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	080098a1 	.word	0x080098a1
 8009880:	080098a9 	.word	0x080098a9
 8009884:	080098b1 	.word	0x080098b1
 8009888:	080098c7 	.word	0x080098c7
 800988c:	080098b7 	.word	0x080098b7
 8009890:	080098c7 	.word	0x080098c7
 8009894:	080098c7 	.word	0x080098c7
 8009898:	080098c7 	.word	0x080098c7
 800989c:	080098bf 	.word	0x080098bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098a0:	f7fe f898 	bl	80079d4 <HAL_RCC_GetPCLK1Freq>
 80098a4:	61f8      	str	r0, [r7, #28]
        break;
 80098a6:	e014      	b.n	80098d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098a8:	f7fe f8aa 	bl	8007a00 <HAL_RCC_GetPCLK2Freq>
 80098ac:	61f8      	str	r0, [r7, #28]
        break;
 80098ae:	e010      	b.n	80098d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098b0:	4b1d      	ldr	r3, [pc, #116]	; (8009928 <UART_SetConfig+0x4b0>)
 80098b2:	61fb      	str	r3, [r7, #28]
        break;
 80098b4:	e00d      	b.n	80098d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098b6:	f7fd fff7 	bl	80078a8 <HAL_RCC_GetSysClockFreq>
 80098ba:	61f8      	str	r0, [r7, #28]
        break;
 80098bc:	e009      	b.n	80098d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098c2:	61fb      	str	r3, [r7, #28]
        break;
 80098c4:	e005      	b.n	80098d2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80098d0:	bf00      	nop
    }

    if (pclk != 0U)
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d019      	beq.n	800990c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	085a      	lsrs	r2, r3, #1
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	441a      	add	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	2b0f      	cmp	r3, #15
 80098f0:	d909      	bls.n	8009906 <UART_SetConfig+0x48e>
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098f8:	d205      	bcs.n	8009906 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	60da      	str	r2, [r3, #12]
 8009904:	e002      	b.n	800990c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800991c:	4618      	mov	r0, r3
 800991e:	3728      	adds	r7, #40	; 0x28
 8009920:	46bd      	mov	sp, r7
 8009922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009926:	bf00      	nop
 8009928:	00f42400 	.word	0x00f42400

0800992c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00a      	beq.n	8009956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	430a      	orrs	r2, r1
 8009954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00a      	beq.n	8009978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	430a      	orrs	r2, r1
 8009976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00a      	beq.n	800999a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	430a      	orrs	r2, r1
 8009998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	f003 0308 	and.w	r3, r3, #8
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00a      	beq.n	80099bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	f003 0310 	and.w	r3, r3, #16
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00a      	beq.n	80099de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	f003 0320 	and.w	r3, r3, #32
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d01a      	beq.n	8009a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a2a:	d10a      	bne.n	8009a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	605a      	str	r2, [r3, #4]
  }
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af02      	add	r7, sp, #8
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a80:	f7f9 fda2 	bl	80035c8 <HAL_GetTick>
 8009a84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0308 	and.w	r3, r3, #8
 8009a90:	2b08      	cmp	r3, #8
 8009a92:	d10e      	bne.n	8009ab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f82d 	bl	8009b02 <UART_WaitOnFlagUntilTimeout>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e023      	b.n	8009afa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0304 	and.w	r3, r3, #4
 8009abc:	2b04      	cmp	r3, #4
 8009abe:	d10e      	bne.n	8009ade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f817 	bl	8009b02 <UART_WaitOnFlagUntilTimeout>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e00d      	b.n	8009afa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b09c      	sub	sp, #112	; 0x70
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	603b      	str	r3, [r7, #0]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b12:	e0a5      	b.n	8009c60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1a:	f000 80a1 	beq.w	8009c60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1e:	f7f9 fd53 	bl	80035c8 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d302      	bcc.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x32>
 8009b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d13e      	bne.n	8009bb2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b3c:	e853 3f00 	ldrex	r3, [r3]
 8009b40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b48:	667b      	str	r3, [r7, #100]	; 0x64
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b5a:	e841 2300 	strex	r3, r2, [r1]
 8009b5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e6      	bne.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3308      	adds	r3, #8
 8009b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b70:	e853 3f00 	ldrex	r3, [r3]
 8009b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b78:	f023 0301 	bic.w	r3, r3, #1
 8009b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3308      	adds	r3, #8
 8009b84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b86:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b8e:	e841 2300 	strex	r3, r2, [r1]
 8009b92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1e5      	bne.n	8009b66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e067      	b.n	8009c82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0304 	and.w	r3, r3, #4
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d04f      	beq.n	8009c60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bce:	d147      	bne.n	8009c60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bd8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8009bfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c00:	e841 2300 	strex	r3, r2, [r1]
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1e6      	bne.n	8009bda <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3308      	adds	r3, #8
 8009c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f023 0301 	bic.w	r3, r3, #1
 8009c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3308      	adds	r3, #8
 8009c2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c2c:	623a      	str	r2, [r7, #32]
 8009c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c30:	69f9      	ldr	r1, [r7, #28]
 8009c32:	6a3a      	ldr	r2, [r7, #32]
 8009c34:	e841 2300 	strex	r3, r2, [r1]
 8009c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e5      	bne.n	8009c0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2220      	movs	r2, #32
 8009c44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e010      	b.n	8009c82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	69da      	ldr	r2, [r3, #28]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	bf0c      	ite	eq
 8009c70:	2301      	moveq	r3, #1
 8009c72:	2300      	movne	r3, #0
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	461a      	mov	r2, r3
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	f43f af4a 	beq.w	8009b14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3770      	adds	r7, #112	; 0x70
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b096      	sub	sp, #88	; 0x58
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	4613      	mov	r3, r2
 8009c98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	88fa      	ldrh	r2, [r7, #6]
 8009ca4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2222      	movs	r2, #34	; 0x22
 8009cb4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d02b      	beq.n	8009d16 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc2:	4a42      	ldr	r2, [pc, #264]	; (8009dcc <UART_Start_Receive_DMA+0x140>)
 8009cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cca:	4a41      	ldr	r2, [pc, #260]	; (8009dd0 <UART_Start_Receive_DMA+0x144>)
 8009ccc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd2:	4a40      	ldr	r2, [pc, #256]	; (8009dd4 <UART_Start_Receive_DMA+0x148>)
 8009cd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cda:	2200      	movs	r2, #0
 8009cdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3324      	adds	r3, #36	; 0x24
 8009ce8:	4619      	mov	r1, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cee:	461a      	mov	r2, r3
 8009cf0:	88fb      	ldrh	r3, [r7, #6]
 8009cf2:	f7fb ff1b 	bl	8005b2c <HAL_DMA_Start_IT>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00c      	beq.n	8009d16 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2210      	movs	r2, #16
 8009d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e055      	b.n	8009dc2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d018      	beq.n	8009d58 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2e:	e853 3f00 	ldrex	r3, [r3]
 8009d32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	461a      	mov	r2, r3
 8009d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d46:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d4c:	e841 2300 	strex	r3, r2, [r1]
 8009d50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1e6      	bne.n	8009d26 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	e853 3f00 	ldrex	r3, [r3]
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3308      	adds	r3, #8
 8009d76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d78:	637a      	str	r2, [r7, #52]	; 0x34
 8009d7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e5      	bne.n	8009d58 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3308      	adds	r3, #8
 8009d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	e853 3f00 	ldrex	r3, [r3]
 8009d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3308      	adds	r3, #8
 8009daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dac:	623a      	str	r2, [r7, #32]
 8009dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	69f9      	ldr	r1, [r7, #28]
 8009db2:	6a3a      	ldr	r2, [r7, #32]
 8009db4:	e841 2300 	strex	r3, r2, [r1]
 8009db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1e5      	bne.n	8009d8c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3758      	adds	r7, #88	; 0x58
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	08009eeb 	.word	0x08009eeb
 8009dd0:	0800a00f 	.word	0x0800a00f
 8009dd4:	0800a047 	.word	0x0800a047

08009dd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b089      	sub	sp, #36	; 0x24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	e853 3f00 	ldrex	r3, [r3]
 8009dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	61bb      	str	r3, [r7, #24]
 8009e00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e02:	6979      	ldr	r1, [r7, #20]
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	e841 2300 	strex	r3, r2, [r1]
 8009e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1e6      	bne.n	8009de0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2220      	movs	r2, #32
 8009e16:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009e18:	bf00      	nop
 8009e1a:	3724      	adds	r7, #36	; 0x24
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b095      	sub	sp, #84	; 0x54
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	461a      	mov	r2, r3
 8009e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e4a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e6      	bne.n	8009e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3308      	adds	r3, #8
 8009e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	f023 0301 	bic.w	r3, r3, #1
 8009e74:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e5      	bne.n	8009e5e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d118      	bne.n	8009ecc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f023 0310 	bic.w	r3, r3, #16
 8009eae:	647b      	str	r3, [r7, #68]	; 0x44
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb8:	61bb      	str	r3, [r7, #24]
 8009eba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6979      	ldr	r1, [r7, #20]
 8009ebe:	69ba      	ldr	r2, [r7, #24]
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e6      	bne.n	8009e9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2220      	movs	r2, #32
 8009ed0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009ede:	bf00      	nop
 8009ee0:	3754      	adds	r7, #84	; 0x54
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b09c      	sub	sp, #112	; 0x70
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0320 	and.w	r3, r3, #32
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d170      	bne.n	8009fe8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8009f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e6      	bne.n	8009f0e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3308      	adds	r3, #8
 8009f46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f52:	f023 0301 	bic.w	r3, r3, #1
 8009f56:	667b      	str	r3, [r7, #100]	; 0x64
 8009f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009f60:	647a      	str	r2, [r7, #68]	; 0x44
 8009f62:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e5      	bne.n	8009f40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	e853 3f00 	ldrex	r3, [r3]
 8009f82:	623b      	str	r3, [r7, #32]
   return(result);
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f8a:	663b      	str	r3, [r7, #96]	; 0x60
 8009f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3308      	adds	r3, #8
 8009f92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f94:	633a      	str	r2, [r7, #48]	; 0x30
 8009f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f9c:	e841 2300 	strex	r3, r2, [r1]
 8009fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e5      	bne.n	8009f74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009faa:	2220      	movs	r2, #32
 8009fac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d118      	bne.n	8009fe8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	e853 3f00 	ldrex	r3, [r3]
 8009fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f023 0310 	bic.w	r3, r3, #16
 8009fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fd4:	61fb      	str	r3, [r7, #28]
 8009fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd8:	69b9      	ldr	r1, [r7, #24]
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	e841 2300 	strex	r3, r2, [r1]
 8009fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e6      	bne.n	8009fb6 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d107      	bne.n	800a000 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ff2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009ffa:	f7ff fa31 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ffe:	e002      	b.n	800a006 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a000:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a002:	f7f7 fac1 	bl	8001588 <HAL_UART_RxCpltCallback>
}
 800a006:	bf00      	nop
 800a008:	3770      	adds	r7, #112	; 0x70
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a020:	2b01      	cmp	r3, #1
 800a022:	d109      	bne.n	800a038 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a02a:	085b      	lsrs	r3, r3, #1
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	4619      	mov	r1, r3
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f7ff fa15 	bl	8009460 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a036:	e002      	b.n	800a03e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff f9fd 	bl	8009438 <HAL_UART_RxHalfCpltCallback>
}
 800a03e:	bf00      	nop
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b086      	sub	sp, #24
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a052:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a058:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a06a:	2b80      	cmp	r3, #128	; 0x80
 800a06c:	d109      	bne.n	800a082 <UART_DMAError+0x3c>
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2b21      	cmp	r3, #33	; 0x21
 800a072:	d106      	bne.n	800a082 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	2200      	movs	r2, #0
 800a078:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a07c:	6978      	ldr	r0, [r7, #20]
 800a07e:	f7ff feab 	bl	8009dd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	d109      	bne.n	800a0a4 <UART_DMAError+0x5e>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b22      	cmp	r3, #34	; 0x22
 800a094:	d106      	bne.n	800a0a4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2200      	movs	r2, #0
 800a09a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a09e:	6978      	ldr	r0, [r7, #20]
 800a0a0:	f7ff fec0 	bl	8009e24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0aa:	f043 0210 	orr.w	r2, r3, #16
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0b4:	6978      	ldr	r0, [r7, #20]
 800a0b6:	f7ff f9c9 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0ba:	bf00      	nop
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f7ff f9b3 	bl	800944c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0e6:	bf00      	nop
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b088      	sub	sp, #32
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	e853 3f00 	ldrex	r3, [r3]
 800a102:	60bb      	str	r3, [r7, #8]
   return(result);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a10a:	61fb      	str	r3, [r7, #28]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a118:	6979      	ldr	r1, [r7, #20]
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	e841 2300 	strex	r3, r2, [r1]
 800a120:	613b      	str	r3, [r7, #16]
   return(result);
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1e6      	bne.n	800a0f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2220      	movs	r2, #32
 800a12c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff f975 	bl	8009424 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a13a:	bf00      	nop
 800a13c:	3720      	adds	r7, #32
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a14a:	bf00      	nop
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
	...

0800a158 <__errno>:
 800a158:	4b01      	ldr	r3, [pc, #4]	; (800a160 <__errno+0x8>)
 800a15a:	6818      	ldr	r0, [r3, #0]
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	2000018c 	.word	0x2000018c

0800a164 <__libc_init_array>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	4d0d      	ldr	r5, [pc, #52]	; (800a19c <__libc_init_array+0x38>)
 800a168:	4c0d      	ldr	r4, [pc, #52]	; (800a1a0 <__libc_init_array+0x3c>)
 800a16a:	1b64      	subs	r4, r4, r5
 800a16c:	10a4      	asrs	r4, r4, #2
 800a16e:	2600      	movs	r6, #0
 800a170:	42a6      	cmp	r6, r4
 800a172:	d109      	bne.n	800a188 <__libc_init_array+0x24>
 800a174:	4d0b      	ldr	r5, [pc, #44]	; (800a1a4 <__libc_init_array+0x40>)
 800a176:	4c0c      	ldr	r4, [pc, #48]	; (800a1a8 <__libc_init_array+0x44>)
 800a178:	f002 ff3c 	bl	800cff4 <_init>
 800a17c:	1b64      	subs	r4, r4, r5
 800a17e:	10a4      	asrs	r4, r4, #2
 800a180:	2600      	movs	r6, #0
 800a182:	42a6      	cmp	r6, r4
 800a184:	d105      	bne.n	800a192 <__libc_init_array+0x2e>
 800a186:	bd70      	pop	{r4, r5, r6, pc}
 800a188:	f855 3b04 	ldr.w	r3, [r5], #4
 800a18c:	4798      	blx	r3
 800a18e:	3601      	adds	r6, #1
 800a190:	e7ee      	b.n	800a170 <__libc_init_array+0xc>
 800a192:	f855 3b04 	ldr.w	r3, [r5], #4
 800a196:	4798      	blx	r3
 800a198:	3601      	adds	r6, #1
 800a19a:	e7f2      	b.n	800a182 <__libc_init_array+0x1e>
 800a19c:	08010334 	.word	0x08010334
 800a1a0:	08010334 	.word	0x08010334
 800a1a4:	08010334 	.word	0x08010334
 800a1a8:	08010338 	.word	0x08010338

0800a1ac <memcpy>:
 800a1ac:	440a      	add	r2, r1
 800a1ae:	4291      	cmp	r1, r2
 800a1b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1b4:	d100      	bne.n	800a1b8 <memcpy+0xc>
 800a1b6:	4770      	bx	lr
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1c2:	4291      	cmp	r1, r2
 800a1c4:	d1f9      	bne.n	800a1ba <memcpy+0xe>
 800a1c6:	bd10      	pop	{r4, pc}

0800a1c8 <memset>:
 800a1c8:	4402      	add	r2, r0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d100      	bne.n	800a1d2 <memset+0xa>
 800a1d0:	4770      	bx	lr
 800a1d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1d6:	e7f9      	b.n	800a1cc <memset+0x4>

0800a1d8 <__cvt>:
 800a1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	ec55 4b10 	vmov	r4, r5, d0
 800a1e0:	2d00      	cmp	r5, #0
 800a1e2:	460e      	mov	r6, r1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	bfbb      	ittet	lt
 800a1ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1ee:	461d      	movlt	r5, r3
 800a1f0:	2300      	movge	r3, #0
 800a1f2:	232d      	movlt	r3, #45	; 0x2d
 800a1f4:	700b      	strb	r3, [r1, #0]
 800a1f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1fc:	4691      	mov	r9, r2
 800a1fe:	f023 0820 	bic.w	r8, r3, #32
 800a202:	bfbc      	itt	lt
 800a204:	4622      	movlt	r2, r4
 800a206:	4614      	movlt	r4, r2
 800a208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a20c:	d005      	beq.n	800a21a <__cvt+0x42>
 800a20e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a212:	d100      	bne.n	800a216 <__cvt+0x3e>
 800a214:	3601      	adds	r6, #1
 800a216:	2102      	movs	r1, #2
 800a218:	e000      	b.n	800a21c <__cvt+0x44>
 800a21a:	2103      	movs	r1, #3
 800a21c:	ab03      	add	r3, sp, #12
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	ab02      	add	r3, sp, #8
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	ec45 4b10 	vmov	d0, r4, r5
 800a228:	4653      	mov	r3, sl
 800a22a:	4632      	mov	r2, r6
 800a22c:	f000 fd00 	bl	800ac30 <_dtoa_r>
 800a230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a234:	4607      	mov	r7, r0
 800a236:	d102      	bne.n	800a23e <__cvt+0x66>
 800a238:	f019 0f01 	tst.w	r9, #1
 800a23c:	d022      	beq.n	800a284 <__cvt+0xac>
 800a23e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a242:	eb07 0906 	add.w	r9, r7, r6
 800a246:	d110      	bne.n	800a26a <__cvt+0x92>
 800a248:	783b      	ldrb	r3, [r7, #0]
 800a24a:	2b30      	cmp	r3, #48	; 0x30
 800a24c:	d10a      	bne.n	800a264 <__cvt+0x8c>
 800a24e:	2200      	movs	r2, #0
 800a250:	2300      	movs	r3, #0
 800a252:	4620      	mov	r0, r4
 800a254:	4629      	mov	r1, r5
 800a256:	f7f6 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800a25a:	b918      	cbnz	r0, 800a264 <__cvt+0x8c>
 800a25c:	f1c6 0601 	rsb	r6, r6, #1
 800a260:	f8ca 6000 	str.w	r6, [sl]
 800a264:	f8da 3000 	ldr.w	r3, [sl]
 800a268:	4499      	add	r9, r3
 800a26a:	2200      	movs	r2, #0
 800a26c:	2300      	movs	r3, #0
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	f7f6 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 800a276:	b108      	cbz	r0, 800a27c <__cvt+0xa4>
 800a278:	f8cd 900c 	str.w	r9, [sp, #12]
 800a27c:	2230      	movs	r2, #48	; 0x30
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	454b      	cmp	r3, r9
 800a282:	d307      	bcc.n	800a294 <__cvt+0xbc>
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a288:	1bdb      	subs	r3, r3, r7
 800a28a:	4638      	mov	r0, r7
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	b004      	add	sp, #16
 800a290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a294:	1c59      	adds	r1, r3, #1
 800a296:	9103      	str	r1, [sp, #12]
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	e7f0      	b.n	800a27e <__cvt+0xa6>

0800a29c <__exponent>:
 800a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	bfb8      	it	lt
 800a2a4:	4249      	neglt	r1, r1
 800a2a6:	f803 2b02 	strb.w	r2, [r3], #2
 800a2aa:	bfb4      	ite	lt
 800a2ac:	222d      	movlt	r2, #45	; 0x2d
 800a2ae:	222b      	movge	r2, #43	; 0x2b
 800a2b0:	2909      	cmp	r1, #9
 800a2b2:	7042      	strb	r2, [r0, #1]
 800a2b4:	dd2a      	ble.n	800a30c <__exponent+0x70>
 800a2b6:	f10d 0407 	add.w	r4, sp, #7
 800a2ba:	46a4      	mov	ip, r4
 800a2bc:	270a      	movs	r7, #10
 800a2be:	46a6      	mov	lr, r4
 800a2c0:	460a      	mov	r2, r1
 800a2c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2c6:	fb07 1516 	mls	r5, r7, r6, r1
 800a2ca:	3530      	adds	r5, #48	; 0x30
 800a2cc:	2a63      	cmp	r2, #99	; 0x63
 800a2ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800a2d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	dcf1      	bgt.n	800a2be <__exponent+0x22>
 800a2da:	3130      	adds	r1, #48	; 0x30
 800a2dc:	f1ae 0502 	sub.w	r5, lr, #2
 800a2e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a2e4:	1c44      	adds	r4, r0, #1
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4561      	cmp	r1, ip
 800a2ea:	d30a      	bcc.n	800a302 <__exponent+0x66>
 800a2ec:	f10d 0209 	add.w	r2, sp, #9
 800a2f0:	eba2 020e 	sub.w	r2, r2, lr
 800a2f4:	4565      	cmp	r5, ip
 800a2f6:	bf88      	it	hi
 800a2f8:	2200      	movhi	r2, #0
 800a2fa:	4413      	add	r3, r2
 800a2fc:	1a18      	subs	r0, r3, r0
 800a2fe:	b003      	add	sp, #12
 800a300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a306:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a30a:	e7ed      	b.n	800a2e8 <__exponent+0x4c>
 800a30c:	2330      	movs	r3, #48	; 0x30
 800a30e:	3130      	adds	r1, #48	; 0x30
 800a310:	7083      	strb	r3, [r0, #2]
 800a312:	70c1      	strb	r1, [r0, #3]
 800a314:	1d03      	adds	r3, r0, #4
 800a316:	e7f1      	b.n	800a2fc <__exponent+0x60>

0800a318 <_printf_float>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	ed2d 8b02 	vpush	{d8}
 800a320:	b08d      	sub	sp, #52	; 0x34
 800a322:	460c      	mov	r4, r1
 800a324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a328:	4616      	mov	r6, r2
 800a32a:	461f      	mov	r7, r3
 800a32c:	4605      	mov	r5, r0
 800a32e:	f001 fa6d 	bl	800b80c <_localeconv_r>
 800a332:	f8d0 a000 	ldr.w	sl, [r0]
 800a336:	4650      	mov	r0, sl
 800a338:	f7f5 ff4a 	bl	80001d0 <strlen>
 800a33c:	2300      	movs	r3, #0
 800a33e:	930a      	str	r3, [sp, #40]	; 0x28
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	f8d8 3000 	ldr.w	r3, [r8]
 800a348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a34c:	3307      	adds	r3, #7
 800a34e:	f023 0307 	bic.w	r3, r3, #7
 800a352:	f103 0208 	add.w	r2, r3, #8
 800a356:	f8c8 2000 	str.w	r2, [r8]
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a362:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a36a:	9307      	str	r3, [sp, #28]
 800a36c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a370:	ee08 0a10 	vmov	s16, r0
 800a374:	4b9f      	ldr	r3, [pc, #636]	; (800a5f4 <_printf_float+0x2dc>)
 800a376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295
 800a37e:	f7f6 fbd5 	bl	8000b2c <__aeabi_dcmpun>
 800a382:	bb88      	cbnz	r0, 800a3e8 <_printf_float+0xd0>
 800a384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a388:	4b9a      	ldr	r3, [pc, #616]	; (800a5f4 <_printf_float+0x2dc>)
 800a38a:	f04f 32ff 	mov.w	r2, #4294967295
 800a38e:	f7f6 fbaf 	bl	8000af0 <__aeabi_dcmple>
 800a392:	bb48      	cbnz	r0, 800a3e8 <_printf_float+0xd0>
 800a394:	2200      	movs	r2, #0
 800a396:	2300      	movs	r3, #0
 800a398:	4640      	mov	r0, r8
 800a39a:	4649      	mov	r1, r9
 800a39c:	f7f6 fb9e 	bl	8000adc <__aeabi_dcmplt>
 800a3a0:	b110      	cbz	r0, 800a3a8 <_printf_float+0x90>
 800a3a2:	232d      	movs	r3, #45	; 0x2d
 800a3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a8:	4b93      	ldr	r3, [pc, #588]	; (800a5f8 <_printf_float+0x2e0>)
 800a3aa:	4894      	ldr	r0, [pc, #592]	; (800a5fc <_printf_float+0x2e4>)
 800a3ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3b0:	bf94      	ite	ls
 800a3b2:	4698      	movls	r8, r3
 800a3b4:	4680      	movhi	r8, r0
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	f023 0204 	bic.w	r2, r3, #4
 800a3c0:	6022      	str	r2, [r4, #0]
 800a3c2:	f04f 0900 	mov.w	r9, #0
 800a3c6:	9700      	str	r7, [sp, #0]
 800a3c8:	4633      	mov	r3, r6
 800a3ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f000 f9d8 	bl	800a784 <_printf_common>
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f040 8090 	bne.w	800a4fa <_printf_float+0x1e2>
 800a3da:	f04f 30ff 	mov.w	r0, #4294967295
 800a3de:	b00d      	add	sp, #52	; 0x34
 800a3e0:	ecbd 8b02 	vpop	{d8}
 800a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	f7f6 fb9c 	bl	8000b2c <__aeabi_dcmpun>
 800a3f4:	b140      	cbz	r0, 800a408 <_printf_float+0xf0>
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	bfbc      	itt	lt
 800a3fc:	232d      	movlt	r3, #45	; 0x2d
 800a3fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a402:	487f      	ldr	r0, [pc, #508]	; (800a600 <_printf_float+0x2e8>)
 800a404:	4b7f      	ldr	r3, [pc, #508]	; (800a604 <_printf_float+0x2ec>)
 800a406:	e7d1      	b.n	800a3ac <_printf_float+0x94>
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a40e:	9206      	str	r2, [sp, #24]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	d13f      	bne.n	800a494 <_printf_float+0x17c>
 800a414:	2306      	movs	r3, #6
 800a416:	6063      	str	r3, [r4, #4]
 800a418:	9b05      	ldr	r3, [sp, #20]
 800a41a:	6861      	ldr	r1, [r4, #4]
 800a41c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a420:	2300      	movs	r3, #0
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	ab0a      	add	r3, sp, #40	; 0x28
 800a426:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a42a:	ab09      	add	r3, sp, #36	; 0x24
 800a42c:	ec49 8b10 	vmov	d0, r8, r9
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	6022      	str	r2, [r4, #0]
 800a434:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a438:	4628      	mov	r0, r5
 800a43a:	f7ff fecd 	bl	800a1d8 <__cvt>
 800a43e:	9b06      	ldr	r3, [sp, #24]
 800a440:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a442:	2b47      	cmp	r3, #71	; 0x47
 800a444:	4680      	mov	r8, r0
 800a446:	d108      	bne.n	800a45a <_printf_float+0x142>
 800a448:	1cc8      	adds	r0, r1, #3
 800a44a:	db02      	blt.n	800a452 <_printf_float+0x13a>
 800a44c:	6863      	ldr	r3, [r4, #4]
 800a44e:	4299      	cmp	r1, r3
 800a450:	dd41      	ble.n	800a4d6 <_printf_float+0x1be>
 800a452:	f1ab 0b02 	sub.w	fp, fp, #2
 800a456:	fa5f fb8b 	uxtb.w	fp, fp
 800a45a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a45e:	d820      	bhi.n	800a4a2 <_printf_float+0x18a>
 800a460:	3901      	subs	r1, #1
 800a462:	465a      	mov	r2, fp
 800a464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a468:	9109      	str	r1, [sp, #36]	; 0x24
 800a46a:	f7ff ff17 	bl	800a29c <__exponent>
 800a46e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a470:	1813      	adds	r3, r2, r0
 800a472:	2a01      	cmp	r2, #1
 800a474:	4681      	mov	r9, r0
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	dc02      	bgt.n	800a480 <_printf_float+0x168>
 800a47a:	6822      	ldr	r2, [r4, #0]
 800a47c:	07d2      	lsls	r2, r2, #31
 800a47e:	d501      	bpl.n	800a484 <_printf_float+0x16c>
 800a480:	3301      	adds	r3, #1
 800a482:	6123      	str	r3, [r4, #16]
 800a484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d09c      	beq.n	800a3c6 <_printf_float+0xae>
 800a48c:	232d      	movs	r3, #45	; 0x2d
 800a48e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a492:	e798      	b.n	800a3c6 <_printf_float+0xae>
 800a494:	9a06      	ldr	r2, [sp, #24]
 800a496:	2a47      	cmp	r2, #71	; 0x47
 800a498:	d1be      	bne.n	800a418 <_printf_float+0x100>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1bc      	bne.n	800a418 <_printf_float+0x100>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e7b9      	b.n	800a416 <_printf_float+0xfe>
 800a4a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4a6:	d118      	bne.n	800a4da <_printf_float+0x1c2>
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	6863      	ldr	r3, [r4, #4]
 800a4ac:	dd0b      	ble.n	800a4c6 <_printf_float+0x1ae>
 800a4ae:	6121      	str	r1, [r4, #16]
 800a4b0:	b913      	cbnz	r3, 800a4b8 <_printf_float+0x1a0>
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	07d0      	lsls	r0, r2, #31
 800a4b6:	d502      	bpl.n	800a4be <_printf_float+0x1a6>
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	440b      	add	r3, r1
 800a4bc:	6123      	str	r3, [r4, #16]
 800a4be:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4c0:	f04f 0900 	mov.w	r9, #0
 800a4c4:	e7de      	b.n	800a484 <_printf_float+0x16c>
 800a4c6:	b913      	cbnz	r3, 800a4ce <_printf_float+0x1b6>
 800a4c8:	6822      	ldr	r2, [r4, #0]
 800a4ca:	07d2      	lsls	r2, r2, #31
 800a4cc:	d501      	bpl.n	800a4d2 <_printf_float+0x1ba>
 800a4ce:	3302      	adds	r3, #2
 800a4d0:	e7f4      	b.n	800a4bc <_printf_float+0x1a4>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e7f2      	b.n	800a4bc <_printf_float+0x1a4>
 800a4d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	db05      	blt.n	800a4ec <_printf_float+0x1d4>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	6121      	str	r1, [r4, #16]
 800a4e4:	07d8      	lsls	r0, r3, #31
 800a4e6:	d5ea      	bpl.n	800a4be <_printf_float+0x1a6>
 800a4e8:	1c4b      	adds	r3, r1, #1
 800a4ea:	e7e7      	b.n	800a4bc <_printf_float+0x1a4>
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	bfd4      	ite	le
 800a4f0:	f1c1 0202 	rsble	r2, r1, #2
 800a4f4:	2201      	movgt	r2, #1
 800a4f6:	4413      	add	r3, r2
 800a4f8:	e7e0      	b.n	800a4bc <_printf_float+0x1a4>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	055a      	lsls	r2, r3, #21
 800a4fe:	d407      	bmi.n	800a510 <_printf_float+0x1f8>
 800a500:	6923      	ldr	r3, [r4, #16]
 800a502:	4642      	mov	r2, r8
 800a504:	4631      	mov	r1, r6
 800a506:	4628      	mov	r0, r5
 800a508:	47b8      	blx	r7
 800a50a:	3001      	adds	r0, #1
 800a50c:	d12c      	bne.n	800a568 <_printf_float+0x250>
 800a50e:	e764      	b.n	800a3da <_printf_float+0xc2>
 800a510:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a514:	f240 80e0 	bls.w	800a6d8 <_printf_float+0x3c0>
 800a518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a51c:	2200      	movs	r2, #0
 800a51e:	2300      	movs	r3, #0
 800a520:	f7f6 fad2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a524:	2800      	cmp	r0, #0
 800a526:	d034      	beq.n	800a592 <_printf_float+0x27a>
 800a528:	4a37      	ldr	r2, [pc, #220]	; (800a608 <_printf_float+0x2f0>)
 800a52a:	2301      	movs	r3, #1
 800a52c:	4631      	mov	r1, r6
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	f43f af51 	beq.w	800a3da <_printf_float+0xc2>
 800a538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a53c:	429a      	cmp	r2, r3
 800a53e:	db02      	blt.n	800a546 <_printf_float+0x22e>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	07d8      	lsls	r0, r3, #31
 800a544:	d510      	bpl.n	800a568 <_printf_float+0x250>
 800a546:	ee18 3a10 	vmov	r3, s16
 800a54a:	4652      	mov	r2, sl
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	f43f af41 	beq.w	800a3da <_printf_float+0xc2>
 800a558:	f04f 0800 	mov.w	r8, #0
 800a55c:	f104 091a 	add.w	r9, r4, #26
 800a560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a562:	3b01      	subs	r3, #1
 800a564:	4543      	cmp	r3, r8
 800a566:	dc09      	bgt.n	800a57c <_printf_float+0x264>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	079b      	lsls	r3, r3, #30
 800a56c:	f100 8105 	bmi.w	800a77a <_printf_float+0x462>
 800a570:	68e0      	ldr	r0, [r4, #12]
 800a572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a574:	4298      	cmp	r0, r3
 800a576:	bfb8      	it	lt
 800a578:	4618      	movlt	r0, r3
 800a57a:	e730      	b.n	800a3de <_printf_float+0xc6>
 800a57c:	2301      	movs	r3, #1
 800a57e:	464a      	mov	r2, r9
 800a580:	4631      	mov	r1, r6
 800a582:	4628      	mov	r0, r5
 800a584:	47b8      	blx	r7
 800a586:	3001      	adds	r0, #1
 800a588:	f43f af27 	beq.w	800a3da <_printf_float+0xc2>
 800a58c:	f108 0801 	add.w	r8, r8, #1
 800a590:	e7e6      	b.n	800a560 <_printf_float+0x248>
 800a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a594:	2b00      	cmp	r3, #0
 800a596:	dc39      	bgt.n	800a60c <_printf_float+0x2f4>
 800a598:	4a1b      	ldr	r2, [pc, #108]	; (800a608 <_printf_float+0x2f0>)
 800a59a:	2301      	movs	r3, #1
 800a59c:	4631      	mov	r1, r6
 800a59e:	4628      	mov	r0, r5
 800a5a0:	47b8      	blx	r7
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	f43f af19 	beq.w	800a3da <_printf_float+0xc2>
 800a5a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	d102      	bne.n	800a5b6 <_printf_float+0x29e>
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	07d9      	lsls	r1, r3, #31
 800a5b4:	d5d8      	bpl.n	800a568 <_printf_float+0x250>
 800a5b6:	ee18 3a10 	vmov	r3, s16
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f af09 	beq.w	800a3da <_printf_float+0xc2>
 800a5c8:	f04f 0900 	mov.w	r9, #0
 800a5cc:	f104 0a1a 	add.w	sl, r4, #26
 800a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d2:	425b      	negs	r3, r3
 800a5d4:	454b      	cmp	r3, r9
 800a5d6:	dc01      	bgt.n	800a5dc <_printf_float+0x2c4>
 800a5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5da:	e792      	b.n	800a502 <_printf_float+0x1ea>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	4652      	mov	r2, sl
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	47b8      	blx	r7
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	f43f aef7 	beq.w	800a3da <_printf_float+0xc2>
 800a5ec:	f109 0901 	add.w	r9, r9, #1
 800a5f0:	e7ee      	b.n	800a5d0 <_printf_float+0x2b8>
 800a5f2:	bf00      	nop
 800a5f4:	7fefffff 	.word	0x7fefffff
 800a5f8:	0800ff58 	.word	0x0800ff58
 800a5fc:	0800ff5c 	.word	0x0800ff5c
 800a600:	0800ff64 	.word	0x0800ff64
 800a604:	0800ff60 	.word	0x0800ff60
 800a608:	0800ff68 	.word	0x0800ff68
 800a60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a610:	429a      	cmp	r2, r3
 800a612:	bfa8      	it	ge
 800a614:	461a      	movge	r2, r3
 800a616:	2a00      	cmp	r2, #0
 800a618:	4691      	mov	r9, r2
 800a61a:	dc37      	bgt.n	800a68c <_printf_float+0x374>
 800a61c:	f04f 0b00 	mov.w	fp, #0
 800a620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a624:	f104 021a 	add.w	r2, r4, #26
 800a628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a62a:	9305      	str	r3, [sp, #20]
 800a62c:	eba3 0309 	sub.w	r3, r3, r9
 800a630:	455b      	cmp	r3, fp
 800a632:	dc33      	bgt.n	800a69c <_printf_float+0x384>
 800a634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a638:	429a      	cmp	r2, r3
 800a63a:	db3b      	blt.n	800a6b4 <_printf_float+0x39c>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	07da      	lsls	r2, r3, #31
 800a640:	d438      	bmi.n	800a6b4 <_printf_float+0x39c>
 800a642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a644:	9a05      	ldr	r2, [sp, #20]
 800a646:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a648:	1a9a      	subs	r2, r3, r2
 800a64a:	eba3 0901 	sub.w	r9, r3, r1
 800a64e:	4591      	cmp	r9, r2
 800a650:	bfa8      	it	ge
 800a652:	4691      	movge	r9, r2
 800a654:	f1b9 0f00 	cmp.w	r9, #0
 800a658:	dc35      	bgt.n	800a6c6 <_printf_float+0x3ae>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a662:	f104 0a1a 	add.w	sl, r4, #26
 800a666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a66a:	1a9b      	subs	r3, r3, r2
 800a66c:	eba3 0309 	sub.w	r3, r3, r9
 800a670:	4543      	cmp	r3, r8
 800a672:	f77f af79 	ble.w	800a568 <_printf_float+0x250>
 800a676:	2301      	movs	r3, #1
 800a678:	4652      	mov	r2, sl
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b8      	blx	r7
 800a680:	3001      	adds	r0, #1
 800a682:	f43f aeaa 	beq.w	800a3da <_printf_float+0xc2>
 800a686:	f108 0801 	add.w	r8, r8, #1
 800a68a:	e7ec      	b.n	800a666 <_printf_float+0x34e>
 800a68c:	4613      	mov	r3, r2
 800a68e:	4631      	mov	r1, r6
 800a690:	4642      	mov	r2, r8
 800a692:	4628      	mov	r0, r5
 800a694:	47b8      	blx	r7
 800a696:	3001      	adds	r0, #1
 800a698:	d1c0      	bne.n	800a61c <_printf_float+0x304>
 800a69a:	e69e      	b.n	800a3da <_printf_float+0xc2>
 800a69c:	2301      	movs	r3, #1
 800a69e:	4631      	mov	r1, r6
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	9205      	str	r2, [sp, #20]
 800a6a4:	47b8      	blx	r7
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	f43f ae97 	beq.w	800a3da <_printf_float+0xc2>
 800a6ac:	9a05      	ldr	r2, [sp, #20]
 800a6ae:	f10b 0b01 	add.w	fp, fp, #1
 800a6b2:	e7b9      	b.n	800a628 <_printf_float+0x310>
 800a6b4:	ee18 3a10 	vmov	r3, s16
 800a6b8:	4652      	mov	r2, sl
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4628      	mov	r0, r5
 800a6be:	47b8      	blx	r7
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d1be      	bne.n	800a642 <_printf_float+0x32a>
 800a6c4:	e689      	b.n	800a3da <_printf_float+0xc2>
 800a6c6:	9a05      	ldr	r2, [sp, #20]
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	4442      	add	r2, r8
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	47b8      	blx	r7
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	d1c1      	bne.n	800a65a <_printf_float+0x342>
 800a6d6:	e680      	b.n	800a3da <_printf_float+0xc2>
 800a6d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6da:	2a01      	cmp	r2, #1
 800a6dc:	dc01      	bgt.n	800a6e2 <_printf_float+0x3ca>
 800a6de:	07db      	lsls	r3, r3, #31
 800a6e0:	d538      	bpl.n	800a754 <_printf_float+0x43c>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	47b8      	blx	r7
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	f43f ae74 	beq.w	800a3da <_printf_float+0xc2>
 800a6f2:	ee18 3a10 	vmov	r3, s16
 800a6f6:	4652      	mov	r2, sl
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b8      	blx	r7
 800a6fe:	3001      	adds	r0, #1
 800a700:	f43f ae6b 	beq.w	800a3da <_printf_float+0xc2>
 800a704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a708:	2200      	movs	r2, #0
 800a70a:	2300      	movs	r3, #0
 800a70c:	f7f6 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a710:	b9d8      	cbnz	r0, 800a74a <_printf_float+0x432>
 800a712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a714:	f108 0201 	add.w	r2, r8, #1
 800a718:	3b01      	subs	r3, #1
 800a71a:	4631      	mov	r1, r6
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	d10e      	bne.n	800a742 <_printf_float+0x42a>
 800a724:	e659      	b.n	800a3da <_printf_float+0xc2>
 800a726:	2301      	movs	r3, #1
 800a728:	4652      	mov	r2, sl
 800a72a:	4631      	mov	r1, r6
 800a72c:	4628      	mov	r0, r5
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	f43f ae52 	beq.w	800a3da <_printf_float+0xc2>
 800a736:	f108 0801 	add.w	r8, r8, #1
 800a73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73c:	3b01      	subs	r3, #1
 800a73e:	4543      	cmp	r3, r8
 800a740:	dcf1      	bgt.n	800a726 <_printf_float+0x40e>
 800a742:	464b      	mov	r3, r9
 800a744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a748:	e6dc      	b.n	800a504 <_printf_float+0x1ec>
 800a74a:	f04f 0800 	mov.w	r8, #0
 800a74e:	f104 0a1a 	add.w	sl, r4, #26
 800a752:	e7f2      	b.n	800a73a <_printf_float+0x422>
 800a754:	2301      	movs	r3, #1
 800a756:	4642      	mov	r2, r8
 800a758:	e7df      	b.n	800a71a <_printf_float+0x402>
 800a75a:	2301      	movs	r3, #1
 800a75c:	464a      	mov	r2, r9
 800a75e:	4631      	mov	r1, r6
 800a760:	4628      	mov	r0, r5
 800a762:	47b8      	blx	r7
 800a764:	3001      	adds	r0, #1
 800a766:	f43f ae38 	beq.w	800a3da <_printf_float+0xc2>
 800a76a:	f108 0801 	add.w	r8, r8, #1
 800a76e:	68e3      	ldr	r3, [r4, #12]
 800a770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a772:	1a5b      	subs	r3, r3, r1
 800a774:	4543      	cmp	r3, r8
 800a776:	dcf0      	bgt.n	800a75a <_printf_float+0x442>
 800a778:	e6fa      	b.n	800a570 <_printf_float+0x258>
 800a77a:	f04f 0800 	mov.w	r8, #0
 800a77e:	f104 0919 	add.w	r9, r4, #25
 800a782:	e7f4      	b.n	800a76e <_printf_float+0x456>

0800a784 <_printf_common>:
 800a784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a788:	4616      	mov	r6, r2
 800a78a:	4699      	mov	r9, r3
 800a78c:	688a      	ldr	r2, [r1, #8]
 800a78e:	690b      	ldr	r3, [r1, #16]
 800a790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a794:	4293      	cmp	r3, r2
 800a796:	bfb8      	it	lt
 800a798:	4613      	movlt	r3, r2
 800a79a:	6033      	str	r3, [r6, #0]
 800a79c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	b10a      	cbz	r2, 800a7aa <_printf_common+0x26>
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	6033      	str	r3, [r6, #0]
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	0699      	lsls	r1, r3, #26
 800a7ae:	bf42      	ittt	mi
 800a7b0:	6833      	ldrmi	r3, [r6, #0]
 800a7b2:	3302      	addmi	r3, #2
 800a7b4:	6033      	strmi	r3, [r6, #0]
 800a7b6:	6825      	ldr	r5, [r4, #0]
 800a7b8:	f015 0506 	ands.w	r5, r5, #6
 800a7bc:	d106      	bne.n	800a7cc <_printf_common+0x48>
 800a7be:	f104 0a19 	add.w	sl, r4, #25
 800a7c2:	68e3      	ldr	r3, [r4, #12]
 800a7c4:	6832      	ldr	r2, [r6, #0]
 800a7c6:	1a9b      	subs	r3, r3, r2
 800a7c8:	42ab      	cmp	r3, r5
 800a7ca:	dc26      	bgt.n	800a81a <_printf_common+0x96>
 800a7cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7d0:	1e13      	subs	r3, r2, #0
 800a7d2:	6822      	ldr	r2, [r4, #0]
 800a7d4:	bf18      	it	ne
 800a7d6:	2301      	movne	r3, #1
 800a7d8:	0692      	lsls	r2, r2, #26
 800a7da:	d42b      	bmi.n	800a834 <_printf_common+0xb0>
 800a7dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c0      	blx	r8
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d01e      	beq.n	800a828 <_printf_common+0xa4>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	68e5      	ldr	r5, [r4, #12]
 800a7ee:	6832      	ldr	r2, [r6, #0]
 800a7f0:	f003 0306 	and.w	r3, r3, #6
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	bf08      	it	eq
 800a7f8:	1aad      	subeq	r5, r5, r2
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	6922      	ldr	r2, [r4, #16]
 800a7fe:	bf0c      	ite	eq
 800a800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a804:	2500      	movne	r5, #0
 800a806:	4293      	cmp	r3, r2
 800a808:	bfc4      	itt	gt
 800a80a:	1a9b      	subgt	r3, r3, r2
 800a80c:	18ed      	addgt	r5, r5, r3
 800a80e:	2600      	movs	r6, #0
 800a810:	341a      	adds	r4, #26
 800a812:	42b5      	cmp	r5, r6
 800a814:	d11a      	bne.n	800a84c <_printf_common+0xc8>
 800a816:	2000      	movs	r0, #0
 800a818:	e008      	b.n	800a82c <_printf_common+0xa8>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4652      	mov	r2, sl
 800a81e:	4649      	mov	r1, r9
 800a820:	4638      	mov	r0, r7
 800a822:	47c0      	blx	r8
 800a824:	3001      	adds	r0, #1
 800a826:	d103      	bne.n	800a830 <_printf_common+0xac>
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a830:	3501      	adds	r5, #1
 800a832:	e7c6      	b.n	800a7c2 <_printf_common+0x3e>
 800a834:	18e1      	adds	r1, r4, r3
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	2030      	movs	r0, #48	; 0x30
 800a83a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a83e:	4422      	add	r2, r4
 800a840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a848:	3302      	adds	r3, #2
 800a84a:	e7c7      	b.n	800a7dc <_printf_common+0x58>
 800a84c:	2301      	movs	r3, #1
 800a84e:	4622      	mov	r2, r4
 800a850:	4649      	mov	r1, r9
 800a852:	4638      	mov	r0, r7
 800a854:	47c0      	blx	r8
 800a856:	3001      	adds	r0, #1
 800a858:	d0e6      	beq.n	800a828 <_printf_common+0xa4>
 800a85a:	3601      	adds	r6, #1
 800a85c:	e7d9      	b.n	800a812 <_printf_common+0x8e>
	...

0800a860 <_printf_i>:
 800a860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a864:	7e0f      	ldrb	r7, [r1, #24]
 800a866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a868:	2f78      	cmp	r7, #120	; 0x78
 800a86a:	4691      	mov	r9, r2
 800a86c:	4680      	mov	r8, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	469a      	mov	sl, r3
 800a872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a876:	d807      	bhi.n	800a888 <_printf_i+0x28>
 800a878:	2f62      	cmp	r7, #98	; 0x62
 800a87a:	d80a      	bhi.n	800a892 <_printf_i+0x32>
 800a87c:	2f00      	cmp	r7, #0
 800a87e:	f000 80d8 	beq.w	800aa32 <_printf_i+0x1d2>
 800a882:	2f58      	cmp	r7, #88	; 0x58
 800a884:	f000 80a3 	beq.w	800a9ce <_printf_i+0x16e>
 800a888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a88c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a890:	e03a      	b.n	800a908 <_printf_i+0xa8>
 800a892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a896:	2b15      	cmp	r3, #21
 800a898:	d8f6      	bhi.n	800a888 <_printf_i+0x28>
 800a89a:	a101      	add	r1, pc, #4	; (adr r1, 800a8a0 <_printf_i+0x40>)
 800a89c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8a0:	0800a8f9 	.word	0x0800a8f9
 800a8a4:	0800a90d 	.word	0x0800a90d
 800a8a8:	0800a889 	.word	0x0800a889
 800a8ac:	0800a889 	.word	0x0800a889
 800a8b0:	0800a889 	.word	0x0800a889
 800a8b4:	0800a889 	.word	0x0800a889
 800a8b8:	0800a90d 	.word	0x0800a90d
 800a8bc:	0800a889 	.word	0x0800a889
 800a8c0:	0800a889 	.word	0x0800a889
 800a8c4:	0800a889 	.word	0x0800a889
 800a8c8:	0800a889 	.word	0x0800a889
 800a8cc:	0800aa19 	.word	0x0800aa19
 800a8d0:	0800a93d 	.word	0x0800a93d
 800a8d4:	0800a9fb 	.word	0x0800a9fb
 800a8d8:	0800a889 	.word	0x0800a889
 800a8dc:	0800a889 	.word	0x0800a889
 800a8e0:	0800aa3b 	.word	0x0800aa3b
 800a8e4:	0800a889 	.word	0x0800a889
 800a8e8:	0800a93d 	.word	0x0800a93d
 800a8ec:	0800a889 	.word	0x0800a889
 800a8f0:	0800a889 	.word	0x0800a889
 800a8f4:	0800aa03 	.word	0x0800aa03
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	1d1a      	adds	r2, r3, #4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	602a      	str	r2, [r5, #0]
 800a900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a908:	2301      	movs	r3, #1
 800a90a:	e0a3      	b.n	800aa54 <_printf_i+0x1f4>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	6829      	ldr	r1, [r5, #0]
 800a910:	0606      	lsls	r6, r0, #24
 800a912:	f101 0304 	add.w	r3, r1, #4
 800a916:	d50a      	bpl.n	800a92e <_printf_i+0xce>
 800a918:	680e      	ldr	r6, [r1, #0]
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	da03      	bge.n	800a928 <_printf_i+0xc8>
 800a920:	232d      	movs	r3, #45	; 0x2d
 800a922:	4276      	negs	r6, r6
 800a924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a928:	485e      	ldr	r0, [pc, #376]	; (800aaa4 <_printf_i+0x244>)
 800a92a:	230a      	movs	r3, #10
 800a92c:	e019      	b.n	800a962 <_printf_i+0x102>
 800a92e:	680e      	ldr	r6, [r1, #0]
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a936:	bf18      	it	ne
 800a938:	b236      	sxthne	r6, r6
 800a93a:	e7ef      	b.n	800a91c <_printf_i+0xbc>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	6820      	ldr	r0, [r4, #0]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	6029      	str	r1, [r5, #0]
 800a944:	0601      	lsls	r1, r0, #24
 800a946:	d501      	bpl.n	800a94c <_printf_i+0xec>
 800a948:	681e      	ldr	r6, [r3, #0]
 800a94a:	e002      	b.n	800a952 <_printf_i+0xf2>
 800a94c:	0646      	lsls	r6, r0, #25
 800a94e:	d5fb      	bpl.n	800a948 <_printf_i+0xe8>
 800a950:	881e      	ldrh	r6, [r3, #0]
 800a952:	4854      	ldr	r0, [pc, #336]	; (800aaa4 <_printf_i+0x244>)
 800a954:	2f6f      	cmp	r7, #111	; 0x6f
 800a956:	bf0c      	ite	eq
 800a958:	2308      	moveq	r3, #8
 800a95a:	230a      	movne	r3, #10
 800a95c:	2100      	movs	r1, #0
 800a95e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a962:	6865      	ldr	r5, [r4, #4]
 800a964:	60a5      	str	r5, [r4, #8]
 800a966:	2d00      	cmp	r5, #0
 800a968:	bfa2      	ittt	ge
 800a96a:	6821      	ldrge	r1, [r4, #0]
 800a96c:	f021 0104 	bicge.w	r1, r1, #4
 800a970:	6021      	strge	r1, [r4, #0]
 800a972:	b90e      	cbnz	r6, 800a978 <_printf_i+0x118>
 800a974:	2d00      	cmp	r5, #0
 800a976:	d04d      	beq.n	800aa14 <_printf_i+0x1b4>
 800a978:	4615      	mov	r5, r2
 800a97a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a97e:	fb03 6711 	mls	r7, r3, r1, r6
 800a982:	5dc7      	ldrb	r7, [r0, r7]
 800a984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a988:	4637      	mov	r7, r6
 800a98a:	42bb      	cmp	r3, r7
 800a98c:	460e      	mov	r6, r1
 800a98e:	d9f4      	bls.n	800a97a <_printf_i+0x11a>
 800a990:	2b08      	cmp	r3, #8
 800a992:	d10b      	bne.n	800a9ac <_printf_i+0x14c>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	07de      	lsls	r6, r3, #31
 800a998:	d508      	bpl.n	800a9ac <_printf_i+0x14c>
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	6861      	ldr	r1, [r4, #4]
 800a99e:	4299      	cmp	r1, r3
 800a9a0:	bfde      	ittt	le
 800a9a2:	2330      	movle	r3, #48	; 0x30
 800a9a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9ac:	1b52      	subs	r2, r2, r5
 800a9ae:	6122      	str	r2, [r4, #16]
 800a9b0:	f8cd a000 	str.w	sl, [sp]
 800a9b4:	464b      	mov	r3, r9
 800a9b6:	aa03      	add	r2, sp, #12
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	f7ff fee2 	bl	800a784 <_printf_common>
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d14c      	bne.n	800aa5e <_printf_i+0x1fe>
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	b004      	add	sp, #16
 800a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ce:	4835      	ldr	r0, [pc, #212]	; (800aaa4 <_printf_i+0x244>)
 800a9d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9d4:	6829      	ldr	r1, [r5, #0]
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9dc:	6029      	str	r1, [r5, #0]
 800a9de:	061d      	lsls	r5, r3, #24
 800a9e0:	d514      	bpl.n	800aa0c <_printf_i+0x1ac>
 800a9e2:	07df      	lsls	r7, r3, #31
 800a9e4:	bf44      	itt	mi
 800a9e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a9ea:	6023      	strmi	r3, [r4, #0]
 800a9ec:	b91e      	cbnz	r6, 800a9f6 <_printf_i+0x196>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	f023 0320 	bic.w	r3, r3, #32
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	2310      	movs	r3, #16
 800a9f8:	e7b0      	b.n	800a95c <_printf_i+0xfc>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	f043 0320 	orr.w	r3, r3, #32
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	2378      	movs	r3, #120	; 0x78
 800aa04:	4828      	ldr	r0, [pc, #160]	; (800aaa8 <_printf_i+0x248>)
 800aa06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa0a:	e7e3      	b.n	800a9d4 <_printf_i+0x174>
 800aa0c:	0659      	lsls	r1, r3, #25
 800aa0e:	bf48      	it	mi
 800aa10:	b2b6      	uxthmi	r6, r6
 800aa12:	e7e6      	b.n	800a9e2 <_printf_i+0x182>
 800aa14:	4615      	mov	r5, r2
 800aa16:	e7bb      	b.n	800a990 <_printf_i+0x130>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	6826      	ldr	r6, [r4, #0]
 800aa1c:	6961      	ldr	r1, [r4, #20]
 800aa1e:	1d18      	adds	r0, r3, #4
 800aa20:	6028      	str	r0, [r5, #0]
 800aa22:	0635      	lsls	r5, r6, #24
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	d501      	bpl.n	800aa2c <_printf_i+0x1cc>
 800aa28:	6019      	str	r1, [r3, #0]
 800aa2a:	e002      	b.n	800aa32 <_printf_i+0x1d2>
 800aa2c:	0670      	lsls	r0, r6, #25
 800aa2e:	d5fb      	bpl.n	800aa28 <_printf_i+0x1c8>
 800aa30:	8019      	strh	r1, [r3, #0]
 800aa32:	2300      	movs	r3, #0
 800aa34:	6123      	str	r3, [r4, #16]
 800aa36:	4615      	mov	r5, r2
 800aa38:	e7ba      	b.n	800a9b0 <_printf_i+0x150>
 800aa3a:	682b      	ldr	r3, [r5, #0]
 800aa3c:	1d1a      	adds	r2, r3, #4
 800aa3e:	602a      	str	r2, [r5, #0]
 800aa40:	681d      	ldr	r5, [r3, #0]
 800aa42:	6862      	ldr	r2, [r4, #4]
 800aa44:	2100      	movs	r1, #0
 800aa46:	4628      	mov	r0, r5
 800aa48:	f7f5 fbca 	bl	80001e0 <memchr>
 800aa4c:	b108      	cbz	r0, 800aa52 <_printf_i+0x1f2>
 800aa4e:	1b40      	subs	r0, r0, r5
 800aa50:	6060      	str	r0, [r4, #4]
 800aa52:	6863      	ldr	r3, [r4, #4]
 800aa54:	6123      	str	r3, [r4, #16]
 800aa56:	2300      	movs	r3, #0
 800aa58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa5c:	e7a8      	b.n	800a9b0 <_printf_i+0x150>
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	462a      	mov	r2, r5
 800aa62:	4649      	mov	r1, r9
 800aa64:	4640      	mov	r0, r8
 800aa66:	47d0      	blx	sl
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d0ab      	beq.n	800a9c4 <_printf_i+0x164>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	079b      	lsls	r3, r3, #30
 800aa70:	d413      	bmi.n	800aa9a <_printf_i+0x23a>
 800aa72:	68e0      	ldr	r0, [r4, #12]
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	4298      	cmp	r0, r3
 800aa78:	bfb8      	it	lt
 800aa7a:	4618      	movlt	r0, r3
 800aa7c:	e7a4      	b.n	800a9c8 <_printf_i+0x168>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4632      	mov	r2, r6
 800aa82:	4649      	mov	r1, r9
 800aa84:	4640      	mov	r0, r8
 800aa86:	47d0      	blx	sl
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d09b      	beq.n	800a9c4 <_printf_i+0x164>
 800aa8c:	3501      	adds	r5, #1
 800aa8e:	68e3      	ldr	r3, [r4, #12]
 800aa90:	9903      	ldr	r1, [sp, #12]
 800aa92:	1a5b      	subs	r3, r3, r1
 800aa94:	42ab      	cmp	r3, r5
 800aa96:	dcf2      	bgt.n	800aa7e <_printf_i+0x21e>
 800aa98:	e7eb      	b.n	800aa72 <_printf_i+0x212>
 800aa9a:	2500      	movs	r5, #0
 800aa9c:	f104 0619 	add.w	r6, r4, #25
 800aaa0:	e7f5      	b.n	800aa8e <_printf_i+0x22e>
 800aaa2:	bf00      	nop
 800aaa4:	0800ff6a 	.word	0x0800ff6a
 800aaa8:	0800ff7b 	.word	0x0800ff7b

0800aaac <sniprintf>:
 800aaac:	b40c      	push	{r2, r3}
 800aaae:	b530      	push	{r4, r5, lr}
 800aab0:	4b17      	ldr	r3, [pc, #92]	; (800ab10 <sniprintf+0x64>)
 800aab2:	1e0c      	subs	r4, r1, #0
 800aab4:	681d      	ldr	r5, [r3, #0]
 800aab6:	b09d      	sub	sp, #116	; 0x74
 800aab8:	da08      	bge.n	800aacc <sniprintf+0x20>
 800aaba:	238b      	movs	r3, #139	; 0x8b
 800aabc:	602b      	str	r3, [r5, #0]
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295
 800aac2:	b01d      	add	sp, #116	; 0x74
 800aac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aac8:	b002      	add	sp, #8
 800aaca:	4770      	bx	lr
 800aacc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aad0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aad4:	bf14      	ite	ne
 800aad6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aada:	4623      	moveq	r3, r4
 800aadc:	9304      	str	r3, [sp, #16]
 800aade:	9307      	str	r3, [sp, #28]
 800aae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aae4:	9002      	str	r0, [sp, #8]
 800aae6:	9006      	str	r0, [sp, #24]
 800aae8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aaec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aaee:	ab21      	add	r3, sp, #132	; 0x84
 800aaf0:	a902      	add	r1, sp, #8
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	9301      	str	r3, [sp, #4]
 800aaf6:	f001 fb6b 	bl	800c1d0 <_svfiprintf_r>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	bfbc      	itt	lt
 800aafe:	238b      	movlt	r3, #139	; 0x8b
 800ab00:	602b      	strlt	r3, [r5, #0]
 800ab02:	2c00      	cmp	r4, #0
 800ab04:	d0dd      	beq.n	800aac2 <sniprintf+0x16>
 800ab06:	9b02      	ldr	r3, [sp, #8]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	e7d9      	b.n	800aac2 <sniprintf+0x16>
 800ab0e:	bf00      	nop
 800ab10:	2000018c 	.word	0x2000018c

0800ab14 <quorem>:
 800ab14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab18:	6903      	ldr	r3, [r0, #16]
 800ab1a:	690c      	ldr	r4, [r1, #16]
 800ab1c:	42a3      	cmp	r3, r4
 800ab1e:	4607      	mov	r7, r0
 800ab20:	f2c0 8081 	blt.w	800ac26 <quorem+0x112>
 800ab24:	3c01      	subs	r4, #1
 800ab26:	f101 0814 	add.w	r8, r1, #20
 800ab2a:	f100 0514 	add.w	r5, r0, #20
 800ab2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab32:	9301      	str	r3, [sp, #4]
 800ab34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab48:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab4c:	d331      	bcc.n	800abb2 <quorem+0x9e>
 800ab4e:	f04f 0e00 	mov.w	lr, #0
 800ab52:	4640      	mov	r0, r8
 800ab54:	46ac      	mov	ip, r5
 800ab56:	46f2      	mov	sl, lr
 800ab58:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab5c:	b293      	uxth	r3, r2
 800ab5e:	fb06 e303 	mla	r3, r6, r3, lr
 800ab62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	ebaa 0303 	sub.w	r3, sl, r3
 800ab6c:	f8dc a000 	ldr.w	sl, [ip]
 800ab70:	0c12      	lsrs	r2, r2, #16
 800ab72:	fa13 f38a 	uxtah	r3, r3, sl
 800ab76:	fb06 e202 	mla	r2, r6, r2, lr
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	9b00      	ldr	r3, [sp, #0]
 800ab7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab82:	b292      	uxth	r2, r2
 800ab84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab8c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ab90:	4581      	cmp	r9, r0
 800ab92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab96:	f84c 3b04 	str.w	r3, [ip], #4
 800ab9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab9e:	d2db      	bcs.n	800ab58 <quorem+0x44>
 800aba0:	f855 300b 	ldr.w	r3, [r5, fp]
 800aba4:	b92b      	cbnz	r3, 800abb2 <quorem+0x9e>
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	3b04      	subs	r3, #4
 800abaa:	429d      	cmp	r5, r3
 800abac:	461a      	mov	r2, r3
 800abae:	d32e      	bcc.n	800ac0e <quorem+0xfa>
 800abb0:	613c      	str	r4, [r7, #16]
 800abb2:	4638      	mov	r0, r7
 800abb4:	f001 f8b8 	bl	800bd28 <__mcmp>
 800abb8:	2800      	cmp	r0, #0
 800abba:	db24      	blt.n	800ac06 <quorem+0xf2>
 800abbc:	3601      	adds	r6, #1
 800abbe:	4628      	mov	r0, r5
 800abc0:	f04f 0c00 	mov.w	ip, #0
 800abc4:	f858 2b04 	ldr.w	r2, [r8], #4
 800abc8:	f8d0 e000 	ldr.w	lr, [r0]
 800abcc:	b293      	uxth	r3, r2
 800abce:	ebac 0303 	sub.w	r3, ip, r3
 800abd2:	0c12      	lsrs	r2, r2, #16
 800abd4:	fa13 f38e 	uxtah	r3, r3, lr
 800abd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800abdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abe6:	45c1      	cmp	r9, r8
 800abe8:	f840 3b04 	str.w	r3, [r0], #4
 800abec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800abf0:	d2e8      	bcs.n	800abc4 <quorem+0xb0>
 800abf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abfa:	b922      	cbnz	r2, 800ac06 <quorem+0xf2>
 800abfc:	3b04      	subs	r3, #4
 800abfe:	429d      	cmp	r5, r3
 800ac00:	461a      	mov	r2, r3
 800ac02:	d30a      	bcc.n	800ac1a <quorem+0x106>
 800ac04:	613c      	str	r4, [r7, #16]
 800ac06:	4630      	mov	r0, r6
 800ac08:	b003      	add	sp, #12
 800ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	3b04      	subs	r3, #4
 800ac12:	2a00      	cmp	r2, #0
 800ac14:	d1cc      	bne.n	800abb0 <quorem+0x9c>
 800ac16:	3c01      	subs	r4, #1
 800ac18:	e7c7      	b.n	800abaa <quorem+0x96>
 800ac1a:	6812      	ldr	r2, [r2, #0]
 800ac1c:	3b04      	subs	r3, #4
 800ac1e:	2a00      	cmp	r2, #0
 800ac20:	d1f0      	bne.n	800ac04 <quorem+0xf0>
 800ac22:	3c01      	subs	r4, #1
 800ac24:	e7eb      	b.n	800abfe <quorem+0xea>
 800ac26:	2000      	movs	r0, #0
 800ac28:	e7ee      	b.n	800ac08 <quorem+0xf4>
 800ac2a:	0000      	movs	r0, r0
 800ac2c:	0000      	movs	r0, r0
	...

0800ac30 <_dtoa_r>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	ed2d 8b04 	vpush	{d8-d9}
 800ac38:	ec57 6b10 	vmov	r6, r7, d0
 800ac3c:	b093      	sub	sp, #76	; 0x4c
 800ac3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac44:	9106      	str	r1, [sp, #24]
 800ac46:	ee10 aa10 	vmov	sl, s0
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac50:	46bb      	mov	fp, r7
 800ac52:	b975      	cbnz	r5, 800ac72 <_dtoa_r+0x42>
 800ac54:	2010      	movs	r0, #16
 800ac56:	f000 fddd 	bl	800b814 <malloc>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	6260      	str	r0, [r4, #36]	; 0x24
 800ac5e:	b920      	cbnz	r0, 800ac6a <_dtoa_r+0x3a>
 800ac60:	4ba7      	ldr	r3, [pc, #668]	; (800af00 <_dtoa_r+0x2d0>)
 800ac62:	21ea      	movs	r1, #234	; 0xea
 800ac64:	48a7      	ldr	r0, [pc, #668]	; (800af04 <_dtoa_r+0x2d4>)
 800ac66:	f001 fbc3 	bl	800c3f0 <__assert_func>
 800ac6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac6e:	6005      	str	r5, [r0, #0]
 800ac70:	60c5      	str	r5, [r0, #12]
 800ac72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac74:	6819      	ldr	r1, [r3, #0]
 800ac76:	b151      	cbz	r1, 800ac8e <_dtoa_r+0x5e>
 800ac78:	685a      	ldr	r2, [r3, #4]
 800ac7a:	604a      	str	r2, [r1, #4]
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	4093      	lsls	r3, r2
 800ac80:	608b      	str	r3, [r1, #8]
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fe0e 	bl	800b8a4 <_Bfree>
 800ac88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	1e3b      	subs	r3, r7, #0
 800ac90:	bfaa      	itet	ge
 800ac92:	2300      	movge	r3, #0
 800ac94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ac98:	f8c8 3000 	strge.w	r3, [r8]
 800ac9c:	4b9a      	ldr	r3, [pc, #616]	; (800af08 <_dtoa_r+0x2d8>)
 800ac9e:	bfbc      	itt	lt
 800aca0:	2201      	movlt	r2, #1
 800aca2:	f8c8 2000 	strlt.w	r2, [r8]
 800aca6:	ea33 030b 	bics.w	r3, r3, fp
 800acaa:	d11b      	bne.n	800ace4 <_dtoa_r+0xb4>
 800acac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acae:	f242 730f 	movw	r3, #9999	; 0x270f
 800acb2:	6013      	str	r3, [r2, #0]
 800acb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acb8:	4333      	orrs	r3, r6
 800acba:	f000 8592 	beq.w	800b7e2 <_dtoa_r+0xbb2>
 800acbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acc0:	b963      	cbnz	r3, 800acdc <_dtoa_r+0xac>
 800acc2:	4b92      	ldr	r3, [pc, #584]	; (800af0c <_dtoa_r+0x2dc>)
 800acc4:	e022      	b.n	800ad0c <_dtoa_r+0xdc>
 800acc6:	4b92      	ldr	r3, [pc, #584]	; (800af10 <_dtoa_r+0x2e0>)
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	3308      	adds	r3, #8
 800accc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	9801      	ldr	r0, [sp, #4]
 800acd2:	b013      	add	sp, #76	; 0x4c
 800acd4:	ecbd 8b04 	vpop	{d8-d9}
 800acd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acdc:	4b8b      	ldr	r3, [pc, #556]	; (800af0c <_dtoa_r+0x2dc>)
 800acde:	9301      	str	r3, [sp, #4]
 800ace0:	3303      	adds	r3, #3
 800ace2:	e7f3      	b.n	800accc <_dtoa_r+0x9c>
 800ace4:	2200      	movs	r2, #0
 800ace6:	2300      	movs	r3, #0
 800ace8:	4650      	mov	r0, sl
 800acea:	4659      	mov	r1, fp
 800acec:	f7f5 feec 	bl	8000ac8 <__aeabi_dcmpeq>
 800acf0:	ec4b ab19 	vmov	d9, sl, fp
 800acf4:	4680      	mov	r8, r0
 800acf6:	b158      	cbz	r0, 800ad10 <_dtoa_r+0xe0>
 800acf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acfa:	2301      	movs	r3, #1
 800acfc:	6013      	str	r3, [r2, #0]
 800acfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 856b 	beq.w	800b7dc <_dtoa_r+0xbac>
 800ad06:	4883      	ldr	r0, [pc, #524]	; (800af14 <_dtoa_r+0x2e4>)
 800ad08:	6018      	str	r0, [r3, #0]
 800ad0a:	1e43      	subs	r3, r0, #1
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	e7df      	b.n	800acd0 <_dtoa_r+0xa0>
 800ad10:	ec4b ab10 	vmov	d0, sl, fp
 800ad14:	aa10      	add	r2, sp, #64	; 0x40
 800ad16:	a911      	add	r1, sp, #68	; 0x44
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f001 f8ab 	bl	800be74 <__d2b>
 800ad1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ad22:	ee08 0a10 	vmov	s16, r0
 800ad26:	2d00      	cmp	r5, #0
 800ad28:	f000 8084 	beq.w	800ae34 <_dtoa_r+0x204>
 800ad2c:	ee19 3a90 	vmov	r3, s19
 800ad30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad38:	4656      	mov	r6, sl
 800ad3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ad46:	4b74      	ldr	r3, [pc, #464]	; (800af18 <_dtoa_r+0x2e8>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	4639      	mov	r1, r7
 800ad4e:	f7f5 fa9b 	bl	8000288 <__aeabi_dsub>
 800ad52:	a365      	add	r3, pc, #404	; (adr r3, 800aee8 <_dtoa_r+0x2b8>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f7f5 fc4e 	bl	80005f8 <__aeabi_dmul>
 800ad5c:	a364      	add	r3, pc, #400	; (adr r3, 800aef0 <_dtoa_r+0x2c0>)
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f7f5 fa93 	bl	800028c <__adddf3>
 800ad66:	4606      	mov	r6, r0
 800ad68:	4628      	mov	r0, r5
 800ad6a:	460f      	mov	r7, r1
 800ad6c:	f7f5 fbda 	bl	8000524 <__aeabi_i2d>
 800ad70:	a361      	add	r3, pc, #388	; (adr r3, 800aef8 <_dtoa_r+0x2c8>)
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	f7f5 fc3f 	bl	80005f8 <__aeabi_dmul>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4630      	mov	r0, r6
 800ad80:	4639      	mov	r1, r7
 800ad82:	f7f5 fa83 	bl	800028c <__adddf3>
 800ad86:	4606      	mov	r6, r0
 800ad88:	460f      	mov	r7, r1
 800ad8a:	f7f5 fee5 	bl	8000b58 <__aeabi_d2iz>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	9000      	str	r0, [sp, #0]
 800ad92:	2300      	movs	r3, #0
 800ad94:	4630      	mov	r0, r6
 800ad96:	4639      	mov	r1, r7
 800ad98:	f7f5 fea0 	bl	8000adc <__aeabi_dcmplt>
 800ad9c:	b150      	cbz	r0, 800adb4 <_dtoa_r+0x184>
 800ad9e:	9800      	ldr	r0, [sp, #0]
 800ada0:	f7f5 fbc0 	bl	8000524 <__aeabi_i2d>
 800ada4:	4632      	mov	r2, r6
 800ada6:	463b      	mov	r3, r7
 800ada8:	f7f5 fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800adac:	b910      	cbnz	r0, 800adb4 <_dtoa_r+0x184>
 800adae:	9b00      	ldr	r3, [sp, #0]
 800adb0:	3b01      	subs	r3, #1
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	9b00      	ldr	r3, [sp, #0]
 800adb6:	2b16      	cmp	r3, #22
 800adb8:	d85a      	bhi.n	800ae70 <_dtoa_r+0x240>
 800adba:	9a00      	ldr	r2, [sp, #0]
 800adbc:	4b57      	ldr	r3, [pc, #348]	; (800af1c <_dtoa_r+0x2ec>)
 800adbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	ec51 0b19 	vmov	r0, r1, d9
 800adca:	f7f5 fe87 	bl	8000adc <__aeabi_dcmplt>
 800adce:	2800      	cmp	r0, #0
 800add0:	d050      	beq.n	800ae74 <_dtoa_r+0x244>
 800add2:	9b00      	ldr	r3, [sp, #0]
 800add4:	3b01      	subs	r3, #1
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	2300      	movs	r3, #0
 800adda:	930b      	str	r3, [sp, #44]	; 0x2c
 800addc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adde:	1b5d      	subs	r5, r3, r5
 800ade0:	1e6b      	subs	r3, r5, #1
 800ade2:	9305      	str	r3, [sp, #20]
 800ade4:	bf45      	ittet	mi
 800ade6:	f1c5 0301 	rsbmi	r3, r5, #1
 800adea:	9304      	strmi	r3, [sp, #16]
 800adec:	2300      	movpl	r3, #0
 800adee:	2300      	movmi	r3, #0
 800adf0:	bf4c      	ite	mi
 800adf2:	9305      	strmi	r3, [sp, #20]
 800adf4:	9304      	strpl	r3, [sp, #16]
 800adf6:	9b00      	ldr	r3, [sp, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	db3d      	blt.n	800ae78 <_dtoa_r+0x248>
 800adfc:	9b05      	ldr	r3, [sp, #20]
 800adfe:	9a00      	ldr	r2, [sp, #0]
 800ae00:	920a      	str	r2, [sp, #40]	; 0x28
 800ae02:	4413      	add	r3, r2
 800ae04:	9305      	str	r3, [sp, #20]
 800ae06:	2300      	movs	r3, #0
 800ae08:	9307      	str	r3, [sp, #28]
 800ae0a:	9b06      	ldr	r3, [sp, #24]
 800ae0c:	2b09      	cmp	r3, #9
 800ae0e:	f200 8089 	bhi.w	800af24 <_dtoa_r+0x2f4>
 800ae12:	2b05      	cmp	r3, #5
 800ae14:	bfc4      	itt	gt
 800ae16:	3b04      	subgt	r3, #4
 800ae18:	9306      	strgt	r3, [sp, #24]
 800ae1a:	9b06      	ldr	r3, [sp, #24]
 800ae1c:	f1a3 0302 	sub.w	r3, r3, #2
 800ae20:	bfcc      	ite	gt
 800ae22:	2500      	movgt	r5, #0
 800ae24:	2501      	movle	r5, #1
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	f200 8087 	bhi.w	800af3a <_dtoa_r+0x30a>
 800ae2c:	e8df f003 	tbb	[pc, r3]
 800ae30:	59383a2d 	.word	0x59383a2d
 800ae34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae38:	441d      	add	r5, r3
 800ae3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae3e:	2b20      	cmp	r3, #32
 800ae40:	bfc1      	itttt	gt
 800ae42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ae4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ae4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae52:	bfda      	itte	le
 800ae54:	f1c3 0320 	rsble	r3, r3, #32
 800ae58:	fa06 f003 	lslle.w	r0, r6, r3
 800ae5c:	4318      	orrgt	r0, r3
 800ae5e:	f7f5 fb51 	bl	8000504 <__aeabi_ui2d>
 800ae62:	2301      	movs	r3, #1
 800ae64:	4606      	mov	r6, r0
 800ae66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae6a:	3d01      	subs	r5, #1
 800ae6c:	930e      	str	r3, [sp, #56]	; 0x38
 800ae6e:	e76a      	b.n	800ad46 <_dtoa_r+0x116>
 800ae70:	2301      	movs	r3, #1
 800ae72:	e7b2      	b.n	800adda <_dtoa_r+0x1aa>
 800ae74:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae76:	e7b1      	b.n	800addc <_dtoa_r+0x1ac>
 800ae78:	9b04      	ldr	r3, [sp, #16]
 800ae7a:	9a00      	ldr	r2, [sp, #0]
 800ae7c:	1a9b      	subs	r3, r3, r2
 800ae7e:	9304      	str	r3, [sp, #16]
 800ae80:	4253      	negs	r3, r2
 800ae82:	9307      	str	r3, [sp, #28]
 800ae84:	2300      	movs	r3, #0
 800ae86:	930a      	str	r3, [sp, #40]	; 0x28
 800ae88:	e7bf      	b.n	800ae0a <_dtoa_r+0x1da>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	9308      	str	r3, [sp, #32]
 800ae8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	dc55      	bgt.n	800af40 <_dtoa_r+0x310>
 800ae94:	2301      	movs	r3, #1
 800ae96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae9e:	e00c      	b.n	800aeba <_dtoa_r+0x28a>
 800aea0:	2301      	movs	r3, #1
 800aea2:	e7f3      	b.n	800ae8c <_dtoa_r+0x25c>
 800aea4:	2300      	movs	r3, #0
 800aea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aea8:	9308      	str	r3, [sp, #32]
 800aeaa:	9b00      	ldr	r3, [sp, #0]
 800aeac:	4413      	add	r3, r2
 800aeae:	9302      	str	r3, [sp, #8]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	9303      	str	r3, [sp, #12]
 800aeb6:	bfb8      	it	lt
 800aeb8:	2301      	movlt	r3, #1
 800aeba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aebc:	2200      	movs	r2, #0
 800aebe:	6042      	str	r2, [r0, #4]
 800aec0:	2204      	movs	r2, #4
 800aec2:	f102 0614 	add.w	r6, r2, #20
 800aec6:	429e      	cmp	r6, r3
 800aec8:	6841      	ldr	r1, [r0, #4]
 800aeca:	d93d      	bls.n	800af48 <_dtoa_r+0x318>
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 fca9 	bl	800b824 <_Balloc>
 800aed2:	9001      	str	r0, [sp, #4]
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d13b      	bne.n	800af50 <_dtoa_r+0x320>
 800aed8:	4b11      	ldr	r3, [pc, #68]	; (800af20 <_dtoa_r+0x2f0>)
 800aeda:	4602      	mov	r2, r0
 800aedc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aee0:	e6c0      	b.n	800ac64 <_dtoa_r+0x34>
 800aee2:	2301      	movs	r3, #1
 800aee4:	e7df      	b.n	800aea6 <_dtoa_r+0x276>
 800aee6:	bf00      	nop
 800aee8:	636f4361 	.word	0x636f4361
 800aeec:	3fd287a7 	.word	0x3fd287a7
 800aef0:	8b60c8b3 	.word	0x8b60c8b3
 800aef4:	3fc68a28 	.word	0x3fc68a28
 800aef8:	509f79fb 	.word	0x509f79fb
 800aefc:	3fd34413 	.word	0x3fd34413
 800af00:	0800ff99 	.word	0x0800ff99
 800af04:	0800ffb0 	.word	0x0800ffb0
 800af08:	7ff00000 	.word	0x7ff00000
 800af0c:	0800ff95 	.word	0x0800ff95
 800af10:	0800ff8c 	.word	0x0800ff8c
 800af14:	0800ff69 	.word	0x0800ff69
 800af18:	3ff80000 	.word	0x3ff80000
 800af1c:	080100a0 	.word	0x080100a0
 800af20:	0801000b 	.word	0x0801000b
 800af24:	2501      	movs	r5, #1
 800af26:	2300      	movs	r3, #0
 800af28:	9306      	str	r3, [sp, #24]
 800af2a:	9508      	str	r5, [sp, #32]
 800af2c:	f04f 33ff 	mov.w	r3, #4294967295
 800af30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af34:	2200      	movs	r2, #0
 800af36:	2312      	movs	r3, #18
 800af38:	e7b0      	b.n	800ae9c <_dtoa_r+0x26c>
 800af3a:	2301      	movs	r3, #1
 800af3c:	9308      	str	r3, [sp, #32]
 800af3e:	e7f5      	b.n	800af2c <_dtoa_r+0x2fc>
 800af40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af46:	e7b8      	b.n	800aeba <_dtoa_r+0x28a>
 800af48:	3101      	adds	r1, #1
 800af4a:	6041      	str	r1, [r0, #4]
 800af4c:	0052      	lsls	r2, r2, #1
 800af4e:	e7b8      	b.n	800aec2 <_dtoa_r+0x292>
 800af50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af52:	9a01      	ldr	r2, [sp, #4]
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	2b0e      	cmp	r3, #14
 800af5a:	f200 809d 	bhi.w	800b098 <_dtoa_r+0x468>
 800af5e:	2d00      	cmp	r5, #0
 800af60:	f000 809a 	beq.w	800b098 <_dtoa_r+0x468>
 800af64:	9b00      	ldr	r3, [sp, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	dd32      	ble.n	800afd0 <_dtoa_r+0x3a0>
 800af6a:	4ab7      	ldr	r2, [pc, #732]	; (800b248 <_dtoa_r+0x618>)
 800af6c:	f003 030f 	and.w	r3, r3, #15
 800af70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af78:	9b00      	ldr	r3, [sp, #0]
 800af7a:	05d8      	lsls	r0, r3, #23
 800af7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800af80:	d516      	bpl.n	800afb0 <_dtoa_r+0x380>
 800af82:	4bb2      	ldr	r3, [pc, #712]	; (800b24c <_dtoa_r+0x61c>)
 800af84:	ec51 0b19 	vmov	r0, r1, d9
 800af88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af8c:	f7f5 fc5e 	bl	800084c <__aeabi_ddiv>
 800af90:	f007 070f 	and.w	r7, r7, #15
 800af94:	4682      	mov	sl, r0
 800af96:	468b      	mov	fp, r1
 800af98:	2503      	movs	r5, #3
 800af9a:	4eac      	ldr	r6, [pc, #688]	; (800b24c <_dtoa_r+0x61c>)
 800af9c:	b957      	cbnz	r7, 800afb4 <_dtoa_r+0x384>
 800af9e:	4642      	mov	r2, r8
 800afa0:	464b      	mov	r3, r9
 800afa2:	4650      	mov	r0, sl
 800afa4:	4659      	mov	r1, fp
 800afa6:	f7f5 fc51 	bl	800084c <__aeabi_ddiv>
 800afaa:	4682      	mov	sl, r0
 800afac:	468b      	mov	fp, r1
 800afae:	e028      	b.n	800b002 <_dtoa_r+0x3d2>
 800afb0:	2502      	movs	r5, #2
 800afb2:	e7f2      	b.n	800af9a <_dtoa_r+0x36a>
 800afb4:	07f9      	lsls	r1, r7, #31
 800afb6:	d508      	bpl.n	800afca <_dtoa_r+0x39a>
 800afb8:	4640      	mov	r0, r8
 800afba:	4649      	mov	r1, r9
 800afbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afc0:	f7f5 fb1a 	bl	80005f8 <__aeabi_dmul>
 800afc4:	3501      	adds	r5, #1
 800afc6:	4680      	mov	r8, r0
 800afc8:	4689      	mov	r9, r1
 800afca:	107f      	asrs	r7, r7, #1
 800afcc:	3608      	adds	r6, #8
 800afce:	e7e5      	b.n	800af9c <_dtoa_r+0x36c>
 800afd0:	f000 809b 	beq.w	800b10a <_dtoa_r+0x4da>
 800afd4:	9b00      	ldr	r3, [sp, #0]
 800afd6:	4f9d      	ldr	r7, [pc, #628]	; (800b24c <_dtoa_r+0x61c>)
 800afd8:	425e      	negs	r6, r3
 800afda:	4b9b      	ldr	r3, [pc, #620]	; (800b248 <_dtoa_r+0x618>)
 800afdc:	f006 020f 	and.w	r2, r6, #15
 800afe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	ec51 0b19 	vmov	r0, r1, d9
 800afec:	f7f5 fb04 	bl	80005f8 <__aeabi_dmul>
 800aff0:	1136      	asrs	r6, r6, #4
 800aff2:	4682      	mov	sl, r0
 800aff4:	468b      	mov	fp, r1
 800aff6:	2300      	movs	r3, #0
 800aff8:	2502      	movs	r5, #2
 800affa:	2e00      	cmp	r6, #0
 800affc:	d17a      	bne.n	800b0f4 <_dtoa_r+0x4c4>
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1d3      	bne.n	800afaa <_dtoa_r+0x37a>
 800b002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 8082 	beq.w	800b10e <_dtoa_r+0x4de>
 800b00a:	4b91      	ldr	r3, [pc, #580]	; (800b250 <_dtoa_r+0x620>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	4650      	mov	r0, sl
 800b010:	4659      	mov	r1, fp
 800b012:	f7f5 fd63 	bl	8000adc <__aeabi_dcmplt>
 800b016:	2800      	cmp	r0, #0
 800b018:	d079      	beq.n	800b10e <_dtoa_r+0x4de>
 800b01a:	9b03      	ldr	r3, [sp, #12]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d076      	beq.n	800b10e <_dtoa_r+0x4de>
 800b020:	9b02      	ldr	r3, [sp, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	dd36      	ble.n	800b094 <_dtoa_r+0x464>
 800b026:	9b00      	ldr	r3, [sp, #0]
 800b028:	4650      	mov	r0, sl
 800b02a:	4659      	mov	r1, fp
 800b02c:	1e5f      	subs	r7, r3, #1
 800b02e:	2200      	movs	r2, #0
 800b030:	4b88      	ldr	r3, [pc, #544]	; (800b254 <_dtoa_r+0x624>)
 800b032:	f7f5 fae1 	bl	80005f8 <__aeabi_dmul>
 800b036:	9e02      	ldr	r6, [sp, #8]
 800b038:	4682      	mov	sl, r0
 800b03a:	468b      	mov	fp, r1
 800b03c:	3501      	adds	r5, #1
 800b03e:	4628      	mov	r0, r5
 800b040:	f7f5 fa70 	bl	8000524 <__aeabi_i2d>
 800b044:	4652      	mov	r2, sl
 800b046:	465b      	mov	r3, fp
 800b048:	f7f5 fad6 	bl	80005f8 <__aeabi_dmul>
 800b04c:	4b82      	ldr	r3, [pc, #520]	; (800b258 <_dtoa_r+0x628>)
 800b04e:	2200      	movs	r2, #0
 800b050:	f7f5 f91c 	bl	800028c <__adddf3>
 800b054:	46d0      	mov	r8, sl
 800b056:	46d9      	mov	r9, fp
 800b058:	4682      	mov	sl, r0
 800b05a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b05e:	2e00      	cmp	r6, #0
 800b060:	d158      	bne.n	800b114 <_dtoa_r+0x4e4>
 800b062:	4b7e      	ldr	r3, [pc, #504]	; (800b25c <_dtoa_r+0x62c>)
 800b064:	2200      	movs	r2, #0
 800b066:	4640      	mov	r0, r8
 800b068:	4649      	mov	r1, r9
 800b06a:	f7f5 f90d 	bl	8000288 <__aeabi_dsub>
 800b06e:	4652      	mov	r2, sl
 800b070:	465b      	mov	r3, fp
 800b072:	4680      	mov	r8, r0
 800b074:	4689      	mov	r9, r1
 800b076:	f7f5 fd4f 	bl	8000b18 <__aeabi_dcmpgt>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	f040 8295 	bne.w	800b5aa <_dtoa_r+0x97a>
 800b080:	4652      	mov	r2, sl
 800b082:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b086:	4640      	mov	r0, r8
 800b088:	4649      	mov	r1, r9
 800b08a:	f7f5 fd27 	bl	8000adc <__aeabi_dcmplt>
 800b08e:	2800      	cmp	r0, #0
 800b090:	f040 8289 	bne.w	800b5a6 <_dtoa_r+0x976>
 800b094:	ec5b ab19 	vmov	sl, fp, d9
 800b098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f2c0 8148 	blt.w	800b330 <_dtoa_r+0x700>
 800b0a0:	9a00      	ldr	r2, [sp, #0]
 800b0a2:	2a0e      	cmp	r2, #14
 800b0a4:	f300 8144 	bgt.w	800b330 <_dtoa_r+0x700>
 800b0a8:	4b67      	ldr	r3, [pc, #412]	; (800b248 <_dtoa_r+0x618>)
 800b0aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f280 80d5 	bge.w	800b264 <_dtoa_r+0x634>
 800b0ba:	9b03      	ldr	r3, [sp, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f300 80d1 	bgt.w	800b264 <_dtoa_r+0x634>
 800b0c2:	f040 826f 	bne.w	800b5a4 <_dtoa_r+0x974>
 800b0c6:	4b65      	ldr	r3, [pc, #404]	; (800b25c <_dtoa_r+0x62c>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	f7f5 fa93 	bl	80005f8 <__aeabi_dmul>
 800b0d2:	4652      	mov	r2, sl
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	f7f5 fd15 	bl	8000b04 <__aeabi_dcmpge>
 800b0da:	9e03      	ldr	r6, [sp, #12]
 800b0dc:	4637      	mov	r7, r6
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f040 8245 	bne.w	800b56e <_dtoa_r+0x93e>
 800b0e4:	9d01      	ldr	r5, [sp, #4]
 800b0e6:	2331      	movs	r3, #49	; 0x31
 800b0e8:	f805 3b01 	strb.w	r3, [r5], #1
 800b0ec:	9b00      	ldr	r3, [sp, #0]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	e240      	b.n	800b576 <_dtoa_r+0x946>
 800b0f4:	07f2      	lsls	r2, r6, #31
 800b0f6:	d505      	bpl.n	800b104 <_dtoa_r+0x4d4>
 800b0f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0fc:	f7f5 fa7c 	bl	80005f8 <__aeabi_dmul>
 800b100:	3501      	adds	r5, #1
 800b102:	2301      	movs	r3, #1
 800b104:	1076      	asrs	r6, r6, #1
 800b106:	3708      	adds	r7, #8
 800b108:	e777      	b.n	800affa <_dtoa_r+0x3ca>
 800b10a:	2502      	movs	r5, #2
 800b10c:	e779      	b.n	800b002 <_dtoa_r+0x3d2>
 800b10e:	9f00      	ldr	r7, [sp, #0]
 800b110:	9e03      	ldr	r6, [sp, #12]
 800b112:	e794      	b.n	800b03e <_dtoa_r+0x40e>
 800b114:	9901      	ldr	r1, [sp, #4]
 800b116:	4b4c      	ldr	r3, [pc, #304]	; (800b248 <_dtoa_r+0x618>)
 800b118:	4431      	add	r1, r6
 800b11a:	910d      	str	r1, [sp, #52]	; 0x34
 800b11c:	9908      	ldr	r1, [sp, #32]
 800b11e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b126:	2900      	cmp	r1, #0
 800b128:	d043      	beq.n	800b1b2 <_dtoa_r+0x582>
 800b12a:	494d      	ldr	r1, [pc, #308]	; (800b260 <_dtoa_r+0x630>)
 800b12c:	2000      	movs	r0, #0
 800b12e:	f7f5 fb8d 	bl	800084c <__aeabi_ddiv>
 800b132:	4652      	mov	r2, sl
 800b134:	465b      	mov	r3, fp
 800b136:	f7f5 f8a7 	bl	8000288 <__aeabi_dsub>
 800b13a:	9d01      	ldr	r5, [sp, #4]
 800b13c:	4682      	mov	sl, r0
 800b13e:	468b      	mov	fp, r1
 800b140:	4649      	mov	r1, r9
 800b142:	4640      	mov	r0, r8
 800b144:	f7f5 fd08 	bl	8000b58 <__aeabi_d2iz>
 800b148:	4606      	mov	r6, r0
 800b14a:	f7f5 f9eb 	bl	8000524 <__aeabi_i2d>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4640      	mov	r0, r8
 800b154:	4649      	mov	r1, r9
 800b156:	f7f5 f897 	bl	8000288 <__aeabi_dsub>
 800b15a:	3630      	adds	r6, #48	; 0x30
 800b15c:	f805 6b01 	strb.w	r6, [r5], #1
 800b160:	4652      	mov	r2, sl
 800b162:	465b      	mov	r3, fp
 800b164:	4680      	mov	r8, r0
 800b166:	4689      	mov	r9, r1
 800b168:	f7f5 fcb8 	bl	8000adc <__aeabi_dcmplt>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d163      	bne.n	800b238 <_dtoa_r+0x608>
 800b170:	4642      	mov	r2, r8
 800b172:	464b      	mov	r3, r9
 800b174:	4936      	ldr	r1, [pc, #216]	; (800b250 <_dtoa_r+0x620>)
 800b176:	2000      	movs	r0, #0
 800b178:	f7f5 f886 	bl	8000288 <__aeabi_dsub>
 800b17c:	4652      	mov	r2, sl
 800b17e:	465b      	mov	r3, fp
 800b180:	f7f5 fcac 	bl	8000adc <__aeabi_dcmplt>
 800b184:	2800      	cmp	r0, #0
 800b186:	f040 80b5 	bne.w	800b2f4 <_dtoa_r+0x6c4>
 800b18a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b18c:	429d      	cmp	r5, r3
 800b18e:	d081      	beq.n	800b094 <_dtoa_r+0x464>
 800b190:	4b30      	ldr	r3, [pc, #192]	; (800b254 <_dtoa_r+0x624>)
 800b192:	2200      	movs	r2, #0
 800b194:	4650      	mov	r0, sl
 800b196:	4659      	mov	r1, fp
 800b198:	f7f5 fa2e 	bl	80005f8 <__aeabi_dmul>
 800b19c:	4b2d      	ldr	r3, [pc, #180]	; (800b254 <_dtoa_r+0x624>)
 800b19e:	4682      	mov	sl, r0
 800b1a0:	468b      	mov	fp, r1
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f7f5 fa26 	bl	80005f8 <__aeabi_dmul>
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4689      	mov	r9, r1
 800b1b0:	e7c6      	b.n	800b140 <_dtoa_r+0x510>
 800b1b2:	4650      	mov	r0, sl
 800b1b4:	4659      	mov	r1, fp
 800b1b6:	f7f5 fa1f 	bl	80005f8 <__aeabi_dmul>
 800b1ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1bc:	9d01      	ldr	r5, [sp, #4]
 800b1be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1c0:	4682      	mov	sl, r0
 800b1c2:	468b      	mov	fp, r1
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	f7f5 fcc6 	bl	8000b58 <__aeabi_d2iz>
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	f7f5 f9a9 	bl	8000524 <__aeabi_i2d>
 800b1d2:	3630      	adds	r6, #48	; 0x30
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4640      	mov	r0, r8
 800b1da:	4649      	mov	r1, r9
 800b1dc:	f7f5 f854 	bl	8000288 <__aeabi_dsub>
 800b1e0:	f805 6b01 	strb.w	r6, [r5], #1
 800b1e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1e6:	429d      	cmp	r5, r3
 800b1e8:	4680      	mov	r8, r0
 800b1ea:	4689      	mov	r9, r1
 800b1ec:	f04f 0200 	mov.w	r2, #0
 800b1f0:	d124      	bne.n	800b23c <_dtoa_r+0x60c>
 800b1f2:	4b1b      	ldr	r3, [pc, #108]	; (800b260 <_dtoa_r+0x630>)
 800b1f4:	4650      	mov	r0, sl
 800b1f6:	4659      	mov	r1, fp
 800b1f8:	f7f5 f848 	bl	800028c <__adddf3>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4640      	mov	r0, r8
 800b202:	4649      	mov	r1, r9
 800b204:	f7f5 fc88 	bl	8000b18 <__aeabi_dcmpgt>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d173      	bne.n	800b2f4 <_dtoa_r+0x6c4>
 800b20c:	4652      	mov	r2, sl
 800b20e:	465b      	mov	r3, fp
 800b210:	4913      	ldr	r1, [pc, #76]	; (800b260 <_dtoa_r+0x630>)
 800b212:	2000      	movs	r0, #0
 800b214:	f7f5 f838 	bl	8000288 <__aeabi_dsub>
 800b218:	4602      	mov	r2, r0
 800b21a:	460b      	mov	r3, r1
 800b21c:	4640      	mov	r0, r8
 800b21e:	4649      	mov	r1, r9
 800b220:	f7f5 fc5c 	bl	8000adc <__aeabi_dcmplt>
 800b224:	2800      	cmp	r0, #0
 800b226:	f43f af35 	beq.w	800b094 <_dtoa_r+0x464>
 800b22a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b22c:	1e6b      	subs	r3, r5, #1
 800b22e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b230:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b234:	2b30      	cmp	r3, #48	; 0x30
 800b236:	d0f8      	beq.n	800b22a <_dtoa_r+0x5fa>
 800b238:	9700      	str	r7, [sp, #0]
 800b23a:	e049      	b.n	800b2d0 <_dtoa_r+0x6a0>
 800b23c:	4b05      	ldr	r3, [pc, #20]	; (800b254 <_dtoa_r+0x624>)
 800b23e:	f7f5 f9db 	bl	80005f8 <__aeabi_dmul>
 800b242:	4680      	mov	r8, r0
 800b244:	4689      	mov	r9, r1
 800b246:	e7bd      	b.n	800b1c4 <_dtoa_r+0x594>
 800b248:	080100a0 	.word	0x080100a0
 800b24c:	08010078 	.word	0x08010078
 800b250:	3ff00000 	.word	0x3ff00000
 800b254:	40240000 	.word	0x40240000
 800b258:	401c0000 	.word	0x401c0000
 800b25c:	40140000 	.word	0x40140000
 800b260:	3fe00000 	.word	0x3fe00000
 800b264:	9d01      	ldr	r5, [sp, #4]
 800b266:	4656      	mov	r6, sl
 800b268:	465f      	mov	r7, fp
 800b26a:	4642      	mov	r2, r8
 800b26c:	464b      	mov	r3, r9
 800b26e:	4630      	mov	r0, r6
 800b270:	4639      	mov	r1, r7
 800b272:	f7f5 faeb 	bl	800084c <__aeabi_ddiv>
 800b276:	f7f5 fc6f 	bl	8000b58 <__aeabi_d2iz>
 800b27a:	4682      	mov	sl, r0
 800b27c:	f7f5 f952 	bl	8000524 <__aeabi_i2d>
 800b280:	4642      	mov	r2, r8
 800b282:	464b      	mov	r3, r9
 800b284:	f7f5 f9b8 	bl	80005f8 <__aeabi_dmul>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4630      	mov	r0, r6
 800b28e:	4639      	mov	r1, r7
 800b290:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b294:	f7f4 fff8 	bl	8000288 <__aeabi_dsub>
 800b298:	f805 6b01 	strb.w	r6, [r5], #1
 800b29c:	9e01      	ldr	r6, [sp, #4]
 800b29e:	9f03      	ldr	r7, [sp, #12]
 800b2a0:	1bae      	subs	r6, r5, r6
 800b2a2:	42b7      	cmp	r7, r6
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	d135      	bne.n	800b316 <_dtoa_r+0x6e6>
 800b2aa:	f7f4 ffef 	bl	800028c <__adddf3>
 800b2ae:	4642      	mov	r2, r8
 800b2b0:	464b      	mov	r3, r9
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	460f      	mov	r7, r1
 800b2b6:	f7f5 fc2f 	bl	8000b18 <__aeabi_dcmpgt>
 800b2ba:	b9d0      	cbnz	r0, 800b2f2 <_dtoa_r+0x6c2>
 800b2bc:	4642      	mov	r2, r8
 800b2be:	464b      	mov	r3, r9
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	f7f5 fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2c8:	b110      	cbz	r0, 800b2d0 <_dtoa_r+0x6a0>
 800b2ca:	f01a 0f01 	tst.w	sl, #1
 800b2ce:	d110      	bne.n	800b2f2 <_dtoa_r+0x6c2>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	ee18 1a10 	vmov	r1, s16
 800b2d6:	f000 fae5 	bl	800b8a4 <_Bfree>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	9800      	ldr	r0, [sp, #0]
 800b2de:	702b      	strb	r3, [r5, #0]
 800b2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	6018      	str	r0, [r3, #0]
 800b2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f43f acf1 	beq.w	800acd0 <_dtoa_r+0xa0>
 800b2ee:	601d      	str	r5, [r3, #0]
 800b2f0:	e4ee      	b.n	800acd0 <_dtoa_r+0xa0>
 800b2f2:	9f00      	ldr	r7, [sp, #0]
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	461d      	mov	r5, r3
 800b2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2fc:	2a39      	cmp	r2, #57	; 0x39
 800b2fe:	d106      	bne.n	800b30e <_dtoa_r+0x6de>
 800b300:	9a01      	ldr	r2, [sp, #4]
 800b302:	429a      	cmp	r2, r3
 800b304:	d1f7      	bne.n	800b2f6 <_dtoa_r+0x6c6>
 800b306:	9901      	ldr	r1, [sp, #4]
 800b308:	2230      	movs	r2, #48	; 0x30
 800b30a:	3701      	adds	r7, #1
 800b30c:	700a      	strb	r2, [r1, #0]
 800b30e:	781a      	ldrb	r2, [r3, #0]
 800b310:	3201      	adds	r2, #1
 800b312:	701a      	strb	r2, [r3, #0]
 800b314:	e790      	b.n	800b238 <_dtoa_r+0x608>
 800b316:	4ba6      	ldr	r3, [pc, #664]	; (800b5b0 <_dtoa_r+0x980>)
 800b318:	2200      	movs	r2, #0
 800b31a:	f7f5 f96d 	bl	80005f8 <__aeabi_dmul>
 800b31e:	2200      	movs	r2, #0
 800b320:	2300      	movs	r3, #0
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	f7f5 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	d09d      	beq.n	800b26a <_dtoa_r+0x63a>
 800b32e:	e7cf      	b.n	800b2d0 <_dtoa_r+0x6a0>
 800b330:	9a08      	ldr	r2, [sp, #32]
 800b332:	2a00      	cmp	r2, #0
 800b334:	f000 80d7 	beq.w	800b4e6 <_dtoa_r+0x8b6>
 800b338:	9a06      	ldr	r2, [sp, #24]
 800b33a:	2a01      	cmp	r2, #1
 800b33c:	f300 80ba 	bgt.w	800b4b4 <_dtoa_r+0x884>
 800b340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b342:	2a00      	cmp	r2, #0
 800b344:	f000 80b2 	beq.w	800b4ac <_dtoa_r+0x87c>
 800b348:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b34c:	9e07      	ldr	r6, [sp, #28]
 800b34e:	9d04      	ldr	r5, [sp, #16]
 800b350:	9a04      	ldr	r2, [sp, #16]
 800b352:	441a      	add	r2, r3
 800b354:	9204      	str	r2, [sp, #16]
 800b356:	9a05      	ldr	r2, [sp, #20]
 800b358:	2101      	movs	r1, #1
 800b35a:	441a      	add	r2, r3
 800b35c:	4620      	mov	r0, r4
 800b35e:	9205      	str	r2, [sp, #20]
 800b360:	f000 fb58 	bl	800ba14 <__i2b>
 800b364:	4607      	mov	r7, r0
 800b366:	2d00      	cmp	r5, #0
 800b368:	dd0c      	ble.n	800b384 <_dtoa_r+0x754>
 800b36a:	9b05      	ldr	r3, [sp, #20]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dd09      	ble.n	800b384 <_dtoa_r+0x754>
 800b370:	42ab      	cmp	r3, r5
 800b372:	9a04      	ldr	r2, [sp, #16]
 800b374:	bfa8      	it	ge
 800b376:	462b      	movge	r3, r5
 800b378:	1ad2      	subs	r2, r2, r3
 800b37a:	9204      	str	r2, [sp, #16]
 800b37c:	9a05      	ldr	r2, [sp, #20]
 800b37e:	1aed      	subs	r5, r5, r3
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	9305      	str	r3, [sp, #20]
 800b384:	9b07      	ldr	r3, [sp, #28]
 800b386:	b31b      	cbz	r3, 800b3d0 <_dtoa_r+0x7a0>
 800b388:	9b08      	ldr	r3, [sp, #32]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f000 80af 	beq.w	800b4ee <_dtoa_r+0x8be>
 800b390:	2e00      	cmp	r6, #0
 800b392:	dd13      	ble.n	800b3bc <_dtoa_r+0x78c>
 800b394:	4639      	mov	r1, r7
 800b396:	4632      	mov	r2, r6
 800b398:	4620      	mov	r0, r4
 800b39a:	f000 fbfb 	bl	800bb94 <__pow5mult>
 800b39e:	ee18 2a10 	vmov	r2, s16
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	4607      	mov	r7, r0
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 fb4a 	bl	800ba40 <__multiply>
 800b3ac:	ee18 1a10 	vmov	r1, s16
 800b3b0:	4680      	mov	r8, r0
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 fa76 	bl	800b8a4 <_Bfree>
 800b3b8:	ee08 8a10 	vmov	s16, r8
 800b3bc:	9b07      	ldr	r3, [sp, #28]
 800b3be:	1b9a      	subs	r2, r3, r6
 800b3c0:	d006      	beq.n	800b3d0 <_dtoa_r+0x7a0>
 800b3c2:	ee18 1a10 	vmov	r1, s16
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 fbe4 	bl	800bb94 <__pow5mult>
 800b3cc:	ee08 0a10 	vmov	s16, r0
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 fb1e 	bl	800ba14 <__i2b>
 800b3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	4606      	mov	r6, r0
 800b3de:	f340 8088 	ble.w	800b4f2 <_dtoa_r+0x8c2>
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	4601      	mov	r1, r0
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 fbd4 	bl	800bb94 <__pow5mult>
 800b3ec:	9b06      	ldr	r3, [sp, #24]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	f340 8081 	ble.w	800b4f8 <_dtoa_r+0x8c8>
 800b3f6:	f04f 0800 	mov.w	r8, #0
 800b3fa:	6933      	ldr	r3, [r6, #16]
 800b3fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b400:	6918      	ldr	r0, [r3, #16]
 800b402:	f000 fab7 	bl	800b974 <__hi0bits>
 800b406:	f1c0 0020 	rsb	r0, r0, #32
 800b40a:	9b05      	ldr	r3, [sp, #20]
 800b40c:	4418      	add	r0, r3
 800b40e:	f010 001f 	ands.w	r0, r0, #31
 800b412:	f000 8092 	beq.w	800b53a <_dtoa_r+0x90a>
 800b416:	f1c0 0320 	rsb	r3, r0, #32
 800b41a:	2b04      	cmp	r3, #4
 800b41c:	f340 808a 	ble.w	800b534 <_dtoa_r+0x904>
 800b420:	f1c0 001c 	rsb	r0, r0, #28
 800b424:	9b04      	ldr	r3, [sp, #16]
 800b426:	4403      	add	r3, r0
 800b428:	9304      	str	r3, [sp, #16]
 800b42a:	9b05      	ldr	r3, [sp, #20]
 800b42c:	4403      	add	r3, r0
 800b42e:	4405      	add	r5, r0
 800b430:	9305      	str	r3, [sp, #20]
 800b432:	9b04      	ldr	r3, [sp, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	dd07      	ble.n	800b448 <_dtoa_r+0x818>
 800b438:	ee18 1a10 	vmov	r1, s16
 800b43c:	461a      	mov	r2, r3
 800b43e:	4620      	mov	r0, r4
 800b440:	f000 fc02 	bl	800bc48 <__lshift>
 800b444:	ee08 0a10 	vmov	s16, r0
 800b448:	9b05      	ldr	r3, [sp, #20]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dd05      	ble.n	800b45a <_dtoa_r+0x82a>
 800b44e:	4631      	mov	r1, r6
 800b450:	461a      	mov	r2, r3
 800b452:	4620      	mov	r0, r4
 800b454:	f000 fbf8 	bl	800bc48 <__lshift>
 800b458:	4606      	mov	r6, r0
 800b45a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d06e      	beq.n	800b53e <_dtoa_r+0x90e>
 800b460:	ee18 0a10 	vmov	r0, s16
 800b464:	4631      	mov	r1, r6
 800b466:	f000 fc5f 	bl	800bd28 <__mcmp>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	da67      	bge.n	800b53e <_dtoa_r+0x90e>
 800b46e:	9b00      	ldr	r3, [sp, #0]
 800b470:	3b01      	subs	r3, #1
 800b472:	ee18 1a10 	vmov	r1, s16
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	220a      	movs	r2, #10
 800b47a:	2300      	movs	r3, #0
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 fa33 	bl	800b8e8 <__multadd>
 800b482:	9b08      	ldr	r3, [sp, #32]
 800b484:	ee08 0a10 	vmov	s16, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 81b1 	beq.w	800b7f0 <_dtoa_r+0xbc0>
 800b48e:	2300      	movs	r3, #0
 800b490:	4639      	mov	r1, r7
 800b492:	220a      	movs	r2, #10
 800b494:	4620      	mov	r0, r4
 800b496:	f000 fa27 	bl	800b8e8 <__multadd>
 800b49a:	9b02      	ldr	r3, [sp, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	4607      	mov	r7, r0
 800b4a0:	f300 808e 	bgt.w	800b5c0 <_dtoa_r+0x990>
 800b4a4:	9b06      	ldr	r3, [sp, #24]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	dc51      	bgt.n	800b54e <_dtoa_r+0x91e>
 800b4aa:	e089      	b.n	800b5c0 <_dtoa_r+0x990>
 800b4ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4b2:	e74b      	b.n	800b34c <_dtoa_r+0x71c>
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	1e5e      	subs	r6, r3, #1
 800b4b8:	9b07      	ldr	r3, [sp, #28]
 800b4ba:	42b3      	cmp	r3, r6
 800b4bc:	bfbf      	itttt	lt
 800b4be:	9b07      	ldrlt	r3, [sp, #28]
 800b4c0:	9607      	strlt	r6, [sp, #28]
 800b4c2:	1af2      	sublt	r2, r6, r3
 800b4c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b4c6:	bfb6      	itet	lt
 800b4c8:	189b      	addlt	r3, r3, r2
 800b4ca:	1b9e      	subge	r6, r3, r6
 800b4cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b4ce:	9b03      	ldr	r3, [sp, #12]
 800b4d0:	bfb8      	it	lt
 800b4d2:	2600      	movlt	r6, #0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	bfb7      	itett	lt
 800b4d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b4dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b4e0:	1a9d      	sublt	r5, r3, r2
 800b4e2:	2300      	movlt	r3, #0
 800b4e4:	e734      	b.n	800b350 <_dtoa_r+0x720>
 800b4e6:	9e07      	ldr	r6, [sp, #28]
 800b4e8:	9d04      	ldr	r5, [sp, #16]
 800b4ea:	9f08      	ldr	r7, [sp, #32]
 800b4ec:	e73b      	b.n	800b366 <_dtoa_r+0x736>
 800b4ee:	9a07      	ldr	r2, [sp, #28]
 800b4f0:	e767      	b.n	800b3c2 <_dtoa_r+0x792>
 800b4f2:	9b06      	ldr	r3, [sp, #24]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	dc18      	bgt.n	800b52a <_dtoa_r+0x8fa>
 800b4f8:	f1ba 0f00 	cmp.w	sl, #0
 800b4fc:	d115      	bne.n	800b52a <_dtoa_r+0x8fa>
 800b4fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b502:	b993      	cbnz	r3, 800b52a <_dtoa_r+0x8fa>
 800b504:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b508:	0d1b      	lsrs	r3, r3, #20
 800b50a:	051b      	lsls	r3, r3, #20
 800b50c:	b183      	cbz	r3, 800b530 <_dtoa_r+0x900>
 800b50e:	9b04      	ldr	r3, [sp, #16]
 800b510:	3301      	adds	r3, #1
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	9b05      	ldr	r3, [sp, #20]
 800b516:	3301      	adds	r3, #1
 800b518:	9305      	str	r3, [sp, #20]
 800b51a:	f04f 0801 	mov.w	r8, #1
 800b51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b520:	2b00      	cmp	r3, #0
 800b522:	f47f af6a 	bne.w	800b3fa <_dtoa_r+0x7ca>
 800b526:	2001      	movs	r0, #1
 800b528:	e76f      	b.n	800b40a <_dtoa_r+0x7da>
 800b52a:	f04f 0800 	mov.w	r8, #0
 800b52e:	e7f6      	b.n	800b51e <_dtoa_r+0x8ee>
 800b530:	4698      	mov	r8, r3
 800b532:	e7f4      	b.n	800b51e <_dtoa_r+0x8ee>
 800b534:	f43f af7d 	beq.w	800b432 <_dtoa_r+0x802>
 800b538:	4618      	mov	r0, r3
 800b53a:	301c      	adds	r0, #28
 800b53c:	e772      	b.n	800b424 <_dtoa_r+0x7f4>
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	dc37      	bgt.n	800b5b4 <_dtoa_r+0x984>
 800b544:	9b06      	ldr	r3, [sp, #24]
 800b546:	2b02      	cmp	r3, #2
 800b548:	dd34      	ble.n	800b5b4 <_dtoa_r+0x984>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	9302      	str	r3, [sp, #8]
 800b54e:	9b02      	ldr	r3, [sp, #8]
 800b550:	b96b      	cbnz	r3, 800b56e <_dtoa_r+0x93e>
 800b552:	4631      	mov	r1, r6
 800b554:	2205      	movs	r2, #5
 800b556:	4620      	mov	r0, r4
 800b558:	f000 f9c6 	bl	800b8e8 <__multadd>
 800b55c:	4601      	mov	r1, r0
 800b55e:	4606      	mov	r6, r0
 800b560:	ee18 0a10 	vmov	r0, s16
 800b564:	f000 fbe0 	bl	800bd28 <__mcmp>
 800b568:	2800      	cmp	r0, #0
 800b56a:	f73f adbb 	bgt.w	800b0e4 <_dtoa_r+0x4b4>
 800b56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b570:	9d01      	ldr	r5, [sp, #4]
 800b572:	43db      	mvns	r3, r3
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	f04f 0800 	mov.w	r8, #0
 800b57a:	4631      	mov	r1, r6
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 f991 	bl	800b8a4 <_Bfree>
 800b582:	2f00      	cmp	r7, #0
 800b584:	f43f aea4 	beq.w	800b2d0 <_dtoa_r+0x6a0>
 800b588:	f1b8 0f00 	cmp.w	r8, #0
 800b58c:	d005      	beq.n	800b59a <_dtoa_r+0x96a>
 800b58e:	45b8      	cmp	r8, r7
 800b590:	d003      	beq.n	800b59a <_dtoa_r+0x96a>
 800b592:	4641      	mov	r1, r8
 800b594:	4620      	mov	r0, r4
 800b596:	f000 f985 	bl	800b8a4 <_Bfree>
 800b59a:	4639      	mov	r1, r7
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 f981 	bl	800b8a4 <_Bfree>
 800b5a2:	e695      	b.n	800b2d0 <_dtoa_r+0x6a0>
 800b5a4:	2600      	movs	r6, #0
 800b5a6:	4637      	mov	r7, r6
 800b5a8:	e7e1      	b.n	800b56e <_dtoa_r+0x93e>
 800b5aa:	9700      	str	r7, [sp, #0]
 800b5ac:	4637      	mov	r7, r6
 800b5ae:	e599      	b.n	800b0e4 <_dtoa_r+0x4b4>
 800b5b0:	40240000 	.word	0x40240000
 800b5b4:	9b08      	ldr	r3, [sp, #32]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 80ca 	beq.w	800b750 <_dtoa_r+0xb20>
 800b5bc:	9b03      	ldr	r3, [sp, #12]
 800b5be:	9302      	str	r3, [sp, #8]
 800b5c0:	2d00      	cmp	r5, #0
 800b5c2:	dd05      	ble.n	800b5d0 <_dtoa_r+0x9a0>
 800b5c4:	4639      	mov	r1, r7
 800b5c6:	462a      	mov	r2, r5
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f000 fb3d 	bl	800bc48 <__lshift>
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	f1b8 0f00 	cmp.w	r8, #0
 800b5d4:	d05b      	beq.n	800b68e <_dtoa_r+0xa5e>
 800b5d6:	6879      	ldr	r1, [r7, #4]
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 f923 	bl	800b824 <_Balloc>
 800b5de:	4605      	mov	r5, r0
 800b5e0:	b928      	cbnz	r0, 800b5ee <_dtoa_r+0x9be>
 800b5e2:	4b87      	ldr	r3, [pc, #540]	; (800b800 <_dtoa_r+0xbd0>)
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b5ea:	f7ff bb3b 	b.w	800ac64 <_dtoa_r+0x34>
 800b5ee:	693a      	ldr	r2, [r7, #16]
 800b5f0:	3202      	adds	r2, #2
 800b5f2:	0092      	lsls	r2, r2, #2
 800b5f4:	f107 010c 	add.w	r1, r7, #12
 800b5f8:	300c      	adds	r0, #12
 800b5fa:	f7fe fdd7 	bl	800a1ac <memcpy>
 800b5fe:	2201      	movs	r2, #1
 800b600:	4629      	mov	r1, r5
 800b602:	4620      	mov	r0, r4
 800b604:	f000 fb20 	bl	800bc48 <__lshift>
 800b608:	9b01      	ldr	r3, [sp, #4]
 800b60a:	f103 0901 	add.w	r9, r3, #1
 800b60e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b612:	4413      	add	r3, r2
 800b614:	9305      	str	r3, [sp, #20]
 800b616:	f00a 0301 	and.w	r3, sl, #1
 800b61a:	46b8      	mov	r8, r7
 800b61c:	9304      	str	r3, [sp, #16]
 800b61e:	4607      	mov	r7, r0
 800b620:	4631      	mov	r1, r6
 800b622:	ee18 0a10 	vmov	r0, s16
 800b626:	f7ff fa75 	bl	800ab14 <quorem>
 800b62a:	4641      	mov	r1, r8
 800b62c:	9002      	str	r0, [sp, #8]
 800b62e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b632:	ee18 0a10 	vmov	r0, s16
 800b636:	f000 fb77 	bl	800bd28 <__mcmp>
 800b63a:	463a      	mov	r2, r7
 800b63c:	9003      	str	r0, [sp, #12]
 800b63e:	4631      	mov	r1, r6
 800b640:	4620      	mov	r0, r4
 800b642:	f000 fb8d 	bl	800bd60 <__mdiff>
 800b646:	68c2      	ldr	r2, [r0, #12]
 800b648:	f109 3bff 	add.w	fp, r9, #4294967295
 800b64c:	4605      	mov	r5, r0
 800b64e:	bb02      	cbnz	r2, 800b692 <_dtoa_r+0xa62>
 800b650:	4601      	mov	r1, r0
 800b652:	ee18 0a10 	vmov	r0, s16
 800b656:	f000 fb67 	bl	800bd28 <__mcmp>
 800b65a:	4602      	mov	r2, r0
 800b65c:	4629      	mov	r1, r5
 800b65e:	4620      	mov	r0, r4
 800b660:	9207      	str	r2, [sp, #28]
 800b662:	f000 f91f 	bl	800b8a4 <_Bfree>
 800b666:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b66a:	ea43 0102 	orr.w	r1, r3, r2
 800b66e:	9b04      	ldr	r3, [sp, #16]
 800b670:	430b      	orrs	r3, r1
 800b672:	464d      	mov	r5, r9
 800b674:	d10f      	bne.n	800b696 <_dtoa_r+0xa66>
 800b676:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b67a:	d02a      	beq.n	800b6d2 <_dtoa_r+0xaa2>
 800b67c:	9b03      	ldr	r3, [sp, #12]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	dd02      	ble.n	800b688 <_dtoa_r+0xa58>
 800b682:	9b02      	ldr	r3, [sp, #8]
 800b684:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b688:	f88b a000 	strb.w	sl, [fp]
 800b68c:	e775      	b.n	800b57a <_dtoa_r+0x94a>
 800b68e:	4638      	mov	r0, r7
 800b690:	e7ba      	b.n	800b608 <_dtoa_r+0x9d8>
 800b692:	2201      	movs	r2, #1
 800b694:	e7e2      	b.n	800b65c <_dtoa_r+0xa2c>
 800b696:	9b03      	ldr	r3, [sp, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	db04      	blt.n	800b6a6 <_dtoa_r+0xa76>
 800b69c:	9906      	ldr	r1, [sp, #24]
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	9904      	ldr	r1, [sp, #16]
 800b6a2:	430b      	orrs	r3, r1
 800b6a4:	d122      	bne.n	800b6ec <_dtoa_r+0xabc>
 800b6a6:	2a00      	cmp	r2, #0
 800b6a8:	ddee      	ble.n	800b688 <_dtoa_r+0xa58>
 800b6aa:	ee18 1a10 	vmov	r1, s16
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 fac9 	bl	800bc48 <__lshift>
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	ee08 0a10 	vmov	s16, r0
 800b6bc:	f000 fb34 	bl	800bd28 <__mcmp>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	dc03      	bgt.n	800b6cc <_dtoa_r+0xa9c>
 800b6c4:	d1e0      	bne.n	800b688 <_dtoa_r+0xa58>
 800b6c6:	f01a 0f01 	tst.w	sl, #1
 800b6ca:	d0dd      	beq.n	800b688 <_dtoa_r+0xa58>
 800b6cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6d0:	d1d7      	bne.n	800b682 <_dtoa_r+0xa52>
 800b6d2:	2339      	movs	r3, #57	; 0x39
 800b6d4:	f88b 3000 	strb.w	r3, [fp]
 800b6d8:	462b      	mov	r3, r5
 800b6da:	461d      	mov	r5, r3
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b6e2:	2a39      	cmp	r2, #57	; 0x39
 800b6e4:	d071      	beq.n	800b7ca <_dtoa_r+0xb9a>
 800b6e6:	3201      	adds	r2, #1
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	e746      	b.n	800b57a <_dtoa_r+0x94a>
 800b6ec:	2a00      	cmp	r2, #0
 800b6ee:	dd07      	ble.n	800b700 <_dtoa_r+0xad0>
 800b6f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6f4:	d0ed      	beq.n	800b6d2 <_dtoa_r+0xaa2>
 800b6f6:	f10a 0301 	add.w	r3, sl, #1
 800b6fa:	f88b 3000 	strb.w	r3, [fp]
 800b6fe:	e73c      	b.n	800b57a <_dtoa_r+0x94a>
 800b700:	9b05      	ldr	r3, [sp, #20]
 800b702:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b706:	4599      	cmp	r9, r3
 800b708:	d047      	beq.n	800b79a <_dtoa_r+0xb6a>
 800b70a:	ee18 1a10 	vmov	r1, s16
 800b70e:	2300      	movs	r3, #0
 800b710:	220a      	movs	r2, #10
 800b712:	4620      	mov	r0, r4
 800b714:	f000 f8e8 	bl	800b8e8 <__multadd>
 800b718:	45b8      	cmp	r8, r7
 800b71a:	ee08 0a10 	vmov	s16, r0
 800b71e:	f04f 0300 	mov.w	r3, #0
 800b722:	f04f 020a 	mov.w	r2, #10
 800b726:	4641      	mov	r1, r8
 800b728:	4620      	mov	r0, r4
 800b72a:	d106      	bne.n	800b73a <_dtoa_r+0xb0a>
 800b72c:	f000 f8dc 	bl	800b8e8 <__multadd>
 800b730:	4680      	mov	r8, r0
 800b732:	4607      	mov	r7, r0
 800b734:	f109 0901 	add.w	r9, r9, #1
 800b738:	e772      	b.n	800b620 <_dtoa_r+0x9f0>
 800b73a:	f000 f8d5 	bl	800b8e8 <__multadd>
 800b73e:	4639      	mov	r1, r7
 800b740:	4680      	mov	r8, r0
 800b742:	2300      	movs	r3, #0
 800b744:	220a      	movs	r2, #10
 800b746:	4620      	mov	r0, r4
 800b748:	f000 f8ce 	bl	800b8e8 <__multadd>
 800b74c:	4607      	mov	r7, r0
 800b74e:	e7f1      	b.n	800b734 <_dtoa_r+0xb04>
 800b750:	9b03      	ldr	r3, [sp, #12]
 800b752:	9302      	str	r3, [sp, #8]
 800b754:	9d01      	ldr	r5, [sp, #4]
 800b756:	ee18 0a10 	vmov	r0, s16
 800b75a:	4631      	mov	r1, r6
 800b75c:	f7ff f9da 	bl	800ab14 <quorem>
 800b760:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b764:	9b01      	ldr	r3, [sp, #4]
 800b766:	f805 ab01 	strb.w	sl, [r5], #1
 800b76a:	1aea      	subs	r2, r5, r3
 800b76c:	9b02      	ldr	r3, [sp, #8]
 800b76e:	4293      	cmp	r3, r2
 800b770:	dd09      	ble.n	800b786 <_dtoa_r+0xb56>
 800b772:	ee18 1a10 	vmov	r1, s16
 800b776:	2300      	movs	r3, #0
 800b778:	220a      	movs	r2, #10
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 f8b4 	bl	800b8e8 <__multadd>
 800b780:	ee08 0a10 	vmov	s16, r0
 800b784:	e7e7      	b.n	800b756 <_dtoa_r+0xb26>
 800b786:	9b02      	ldr	r3, [sp, #8]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	bfc8      	it	gt
 800b78c:	461d      	movgt	r5, r3
 800b78e:	9b01      	ldr	r3, [sp, #4]
 800b790:	bfd8      	it	le
 800b792:	2501      	movle	r5, #1
 800b794:	441d      	add	r5, r3
 800b796:	f04f 0800 	mov.w	r8, #0
 800b79a:	ee18 1a10 	vmov	r1, s16
 800b79e:	2201      	movs	r2, #1
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f000 fa51 	bl	800bc48 <__lshift>
 800b7a6:	4631      	mov	r1, r6
 800b7a8:	ee08 0a10 	vmov	s16, r0
 800b7ac:	f000 fabc 	bl	800bd28 <__mcmp>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	dc91      	bgt.n	800b6d8 <_dtoa_r+0xaa8>
 800b7b4:	d102      	bne.n	800b7bc <_dtoa_r+0xb8c>
 800b7b6:	f01a 0f01 	tst.w	sl, #1
 800b7ba:	d18d      	bne.n	800b6d8 <_dtoa_r+0xaa8>
 800b7bc:	462b      	mov	r3, r5
 800b7be:	461d      	mov	r5, r3
 800b7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7c4:	2a30      	cmp	r2, #48	; 0x30
 800b7c6:	d0fa      	beq.n	800b7be <_dtoa_r+0xb8e>
 800b7c8:	e6d7      	b.n	800b57a <_dtoa_r+0x94a>
 800b7ca:	9a01      	ldr	r2, [sp, #4]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d184      	bne.n	800b6da <_dtoa_r+0xaaa>
 800b7d0:	9b00      	ldr	r3, [sp, #0]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	2331      	movs	r3, #49	; 0x31
 800b7d8:	7013      	strb	r3, [r2, #0]
 800b7da:	e6ce      	b.n	800b57a <_dtoa_r+0x94a>
 800b7dc:	4b09      	ldr	r3, [pc, #36]	; (800b804 <_dtoa_r+0xbd4>)
 800b7de:	f7ff ba95 	b.w	800ad0c <_dtoa_r+0xdc>
 800b7e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f47f aa6e 	bne.w	800acc6 <_dtoa_r+0x96>
 800b7ea:	4b07      	ldr	r3, [pc, #28]	; (800b808 <_dtoa_r+0xbd8>)
 800b7ec:	f7ff ba8e 	b.w	800ad0c <_dtoa_r+0xdc>
 800b7f0:	9b02      	ldr	r3, [sp, #8]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	dcae      	bgt.n	800b754 <_dtoa_r+0xb24>
 800b7f6:	9b06      	ldr	r3, [sp, #24]
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	f73f aea8 	bgt.w	800b54e <_dtoa_r+0x91e>
 800b7fe:	e7a9      	b.n	800b754 <_dtoa_r+0xb24>
 800b800:	0801000b 	.word	0x0801000b
 800b804:	0800ff68 	.word	0x0800ff68
 800b808:	0800ff8c 	.word	0x0800ff8c

0800b80c <_localeconv_r>:
 800b80c:	4800      	ldr	r0, [pc, #0]	; (800b810 <_localeconv_r+0x4>)
 800b80e:	4770      	bx	lr
 800b810:	200002e0 	.word	0x200002e0

0800b814 <malloc>:
 800b814:	4b02      	ldr	r3, [pc, #8]	; (800b820 <malloc+0xc>)
 800b816:	4601      	mov	r1, r0
 800b818:	6818      	ldr	r0, [r3, #0]
 800b81a:	f000 bc09 	b.w	800c030 <_malloc_r>
 800b81e:	bf00      	nop
 800b820:	2000018c 	.word	0x2000018c

0800b824 <_Balloc>:
 800b824:	b570      	push	{r4, r5, r6, lr}
 800b826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b828:	4604      	mov	r4, r0
 800b82a:	460d      	mov	r5, r1
 800b82c:	b976      	cbnz	r6, 800b84c <_Balloc+0x28>
 800b82e:	2010      	movs	r0, #16
 800b830:	f7ff fff0 	bl	800b814 <malloc>
 800b834:	4602      	mov	r2, r0
 800b836:	6260      	str	r0, [r4, #36]	; 0x24
 800b838:	b920      	cbnz	r0, 800b844 <_Balloc+0x20>
 800b83a:	4b18      	ldr	r3, [pc, #96]	; (800b89c <_Balloc+0x78>)
 800b83c:	4818      	ldr	r0, [pc, #96]	; (800b8a0 <_Balloc+0x7c>)
 800b83e:	2166      	movs	r1, #102	; 0x66
 800b840:	f000 fdd6 	bl	800c3f0 <__assert_func>
 800b844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b848:	6006      	str	r6, [r0, #0]
 800b84a:	60c6      	str	r6, [r0, #12]
 800b84c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b84e:	68f3      	ldr	r3, [r6, #12]
 800b850:	b183      	cbz	r3, 800b874 <_Balloc+0x50>
 800b852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b85a:	b9b8      	cbnz	r0, 800b88c <_Balloc+0x68>
 800b85c:	2101      	movs	r1, #1
 800b85e:	fa01 f605 	lsl.w	r6, r1, r5
 800b862:	1d72      	adds	r2, r6, #5
 800b864:	0092      	lsls	r2, r2, #2
 800b866:	4620      	mov	r0, r4
 800b868:	f000 fb60 	bl	800bf2c <_calloc_r>
 800b86c:	b160      	cbz	r0, 800b888 <_Balloc+0x64>
 800b86e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b872:	e00e      	b.n	800b892 <_Balloc+0x6e>
 800b874:	2221      	movs	r2, #33	; 0x21
 800b876:	2104      	movs	r1, #4
 800b878:	4620      	mov	r0, r4
 800b87a:	f000 fb57 	bl	800bf2c <_calloc_r>
 800b87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b880:	60f0      	str	r0, [r6, #12]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1e4      	bne.n	800b852 <_Balloc+0x2e>
 800b888:	2000      	movs	r0, #0
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	6802      	ldr	r2, [r0, #0]
 800b88e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b892:	2300      	movs	r3, #0
 800b894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b898:	e7f7      	b.n	800b88a <_Balloc+0x66>
 800b89a:	bf00      	nop
 800b89c:	0800ff99 	.word	0x0800ff99
 800b8a0:	0801001c 	.word	0x0801001c

0800b8a4 <_Bfree>:
 800b8a4:	b570      	push	{r4, r5, r6, lr}
 800b8a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8a8:	4605      	mov	r5, r0
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	b976      	cbnz	r6, 800b8cc <_Bfree+0x28>
 800b8ae:	2010      	movs	r0, #16
 800b8b0:	f7ff ffb0 	bl	800b814 <malloc>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	6268      	str	r0, [r5, #36]	; 0x24
 800b8b8:	b920      	cbnz	r0, 800b8c4 <_Bfree+0x20>
 800b8ba:	4b09      	ldr	r3, [pc, #36]	; (800b8e0 <_Bfree+0x3c>)
 800b8bc:	4809      	ldr	r0, [pc, #36]	; (800b8e4 <_Bfree+0x40>)
 800b8be:	218a      	movs	r1, #138	; 0x8a
 800b8c0:	f000 fd96 	bl	800c3f0 <__assert_func>
 800b8c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8c8:	6006      	str	r6, [r0, #0]
 800b8ca:	60c6      	str	r6, [r0, #12]
 800b8cc:	b13c      	cbz	r4, 800b8de <_Bfree+0x3a>
 800b8ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8d0:	6862      	ldr	r2, [r4, #4]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8d8:	6021      	str	r1, [r4, #0]
 800b8da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8de:	bd70      	pop	{r4, r5, r6, pc}
 800b8e0:	0800ff99 	.word	0x0800ff99
 800b8e4:	0801001c 	.word	0x0801001c

0800b8e8 <__multadd>:
 800b8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ec:	690d      	ldr	r5, [r1, #16]
 800b8ee:	4607      	mov	r7, r0
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	461e      	mov	r6, r3
 800b8f4:	f101 0c14 	add.w	ip, r1, #20
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	f8dc 3000 	ldr.w	r3, [ip]
 800b8fe:	b299      	uxth	r1, r3
 800b900:	fb02 6101 	mla	r1, r2, r1, r6
 800b904:	0c1e      	lsrs	r6, r3, #16
 800b906:	0c0b      	lsrs	r3, r1, #16
 800b908:	fb02 3306 	mla	r3, r2, r6, r3
 800b90c:	b289      	uxth	r1, r1
 800b90e:	3001      	adds	r0, #1
 800b910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b914:	4285      	cmp	r5, r0
 800b916:	f84c 1b04 	str.w	r1, [ip], #4
 800b91a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b91e:	dcec      	bgt.n	800b8fa <__multadd+0x12>
 800b920:	b30e      	cbz	r6, 800b966 <__multadd+0x7e>
 800b922:	68a3      	ldr	r3, [r4, #8]
 800b924:	42ab      	cmp	r3, r5
 800b926:	dc19      	bgt.n	800b95c <__multadd+0x74>
 800b928:	6861      	ldr	r1, [r4, #4]
 800b92a:	4638      	mov	r0, r7
 800b92c:	3101      	adds	r1, #1
 800b92e:	f7ff ff79 	bl	800b824 <_Balloc>
 800b932:	4680      	mov	r8, r0
 800b934:	b928      	cbnz	r0, 800b942 <__multadd+0x5a>
 800b936:	4602      	mov	r2, r0
 800b938:	4b0c      	ldr	r3, [pc, #48]	; (800b96c <__multadd+0x84>)
 800b93a:	480d      	ldr	r0, [pc, #52]	; (800b970 <__multadd+0x88>)
 800b93c:	21b5      	movs	r1, #181	; 0xb5
 800b93e:	f000 fd57 	bl	800c3f0 <__assert_func>
 800b942:	6922      	ldr	r2, [r4, #16]
 800b944:	3202      	adds	r2, #2
 800b946:	f104 010c 	add.w	r1, r4, #12
 800b94a:	0092      	lsls	r2, r2, #2
 800b94c:	300c      	adds	r0, #12
 800b94e:	f7fe fc2d 	bl	800a1ac <memcpy>
 800b952:	4621      	mov	r1, r4
 800b954:	4638      	mov	r0, r7
 800b956:	f7ff ffa5 	bl	800b8a4 <_Bfree>
 800b95a:	4644      	mov	r4, r8
 800b95c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b960:	3501      	adds	r5, #1
 800b962:	615e      	str	r6, [r3, #20]
 800b964:	6125      	str	r5, [r4, #16]
 800b966:	4620      	mov	r0, r4
 800b968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b96c:	0801000b 	.word	0x0801000b
 800b970:	0801001c 	.word	0x0801001c

0800b974 <__hi0bits>:
 800b974:	0c03      	lsrs	r3, r0, #16
 800b976:	041b      	lsls	r3, r3, #16
 800b978:	b9d3      	cbnz	r3, 800b9b0 <__hi0bits+0x3c>
 800b97a:	0400      	lsls	r0, r0, #16
 800b97c:	2310      	movs	r3, #16
 800b97e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b982:	bf04      	itt	eq
 800b984:	0200      	lsleq	r0, r0, #8
 800b986:	3308      	addeq	r3, #8
 800b988:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b98c:	bf04      	itt	eq
 800b98e:	0100      	lsleq	r0, r0, #4
 800b990:	3304      	addeq	r3, #4
 800b992:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b996:	bf04      	itt	eq
 800b998:	0080      	lsleq	r0, r0, #2
 800b99a:	3302      	addeq	r3, #2
 800b99c:	2800      	cmp	r0, #0
 800b99e:	db05      	blt.n	800b9ac <__hi0bits+0x38>
 800b9a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9a4:	f103 0301 	add.w	r3, r3, #1
 800b9a8:	bf08      	it	eq
 800b9aa:	2320      	moveq	r3, #32
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	4770      	bx	lr
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e7e4      	b.n	800b97e <__hi0bits+0xa>

0800b9b4 <__lo0bits>:
 800b9b4:	6803      	ldr	r3, [r0, #0]
 800b9b6:	f013 0207 	ands.w	r2, r3, #7
 800b9ba:	4601      	mov	r1, r0
 800b9bc:	d00b      	beq.n	800b9d6 <__lo0bits+0x22>
 800b9be:	07da      	lsls	r2, r3, #31
 800b9c0:	d423      	bmi.n	800ba0a <__lo0bits+0x56>
 800b9c2:	0798      	lsls	r0, r3, #30
 800b9c4:	bf49      	itett	mi
 800b9c6:	085b      	lsrmi	r3, r3, #1
 800b9c8:	089b      	lsrpl	r3, r3, #2
 800b9ca:	2001      	movmi	r0, #1
 800b9cc:	600b      	strmi	r3, [r1, #0]
 800b9ce:	bf5c      	itt	pl
 800b9d0:	600b      	strpl	r3, [r1, #0]
 800b9d2:	2002      	movpl	r0, #2
 800b9d4:	4770      	bx	lr
 800b9d6:	b298      	uxth	r0, r3
 800b9d8:	b9a8      	cbnz	r0, 800ba06 <__lo0bits+0x52>
 800b9da:	0c1b      	lsrs	r3, r3, #16
 800b9dc:	2010      	movs	r0, #16
 800b9de:	b2da      	uxtb	r2, r3
 800b9e0:	b90a      	cbnz	r2, 800b9e6 <__lo0bits+0x32>
 800b9e2:	3008      	adds	r0, #8
 800b9e4:	0a1b      	lsrs	r3, r3, #8
 800b9e6:	071a      	lsls	r2, r3, #28
 800b9e8:	bf04      	itt	eq
 800b9ea:	091b      	lsreq	r3, r3, #4
 800b9ec:	3004      	addeq	r0, #4
 800b9ee:	079a      	lsls	r2, r3, #30
 800b9f0:	bf04      	itt	eq
 800b9f2:	089b      	lsreq	r3, r3, #2
 800b9f4:	3002      	addeq	r0, #2
 800b9f6:	07da      	lsls	r2, r3, #31
 800b9f8:	d403      	bmi.n	800ba02 <__lo0bits+0x4e>
 800b9fa:	085b      	lsrs	r3, r3, #1
 800b9fc:	f100 0001 	add.w	r0, r0, #1
 800ba00:	d005      	beq.n	800ba0e <__lo0bits+0x5a>
 800ba02:	600b      	str	r3, [r1, #0]
 800ba04:	4770      	bx	lr
 800ba06:	4610      	mov	r0, r2
 800ba08:	e7e9      	b.n	800b9de <__lo0bits+0x2a>
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	4770      	bx	lr
 800ba0e:	2020      	movs	r0, #32
 800ba10:	4770      	bx	lr
	...

0800ba14 <__i2b>:
 800ba14:	b510      	push	{r4, lr}
 800ba16:	460c      	mov	r4, r1
 800ba18:	2101      	movs	r1, #1
 800ba1a:	f7ff ff03 	bl	800b824 <_Balloc>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	b928      	cbnz	r0, 800ba2e <__i2b+0x1a>
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <__i2b+0x24>)
 800ba24:	4805      	ldr	r0, [pc, #20]	; (800ba3c <__i2b+0x28>)
 800ba26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba2a:	f000 fce1 	bl	800c3f0 <__assert_func>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	6144      	str	r4, [r0, #20]
 800ba32:	6103      	str	r3, [r0, #16]
 800ba34:	bd10      	pop	{r4, pc}
 800ba36:	bf00      	nop
 800ba38:	0801000b 	.word	0x0801000b
 800ba3c:	0801001c 	.word	0x0801001c

0800ba40 <__multiply>:
 800ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba44:	4691      	mov	r9, r2
 800ba46:	690a      	ldr	r2, [r1, #16]
 800ba48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	bfb8      	it	lt
 800ba50:	460b      	movlt	r3, r1
 800ba52:	460c      	mov	r4, r1
 800ba54:	bfbc      	itt	lt
 800ba56:	464c      	movlt	r4, r9
 800ba58:	4699      	movlt	r9, r3
 800ba5a:	6927      	ldr	r7, [r4, #16]
 800ba5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba60:	68a3      	ldr	r3, [r4, #8]
 800ba62:	6861      	ldr	r1, [r4, #4]
 800ba64:	eb07 060a 	add.w	r6, r7, sl
 800ba68:	42b3      	cmp	r3, r6
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	bfb8      	it	lt
 800ba6e:	3101      	addlt	r1, #1
 800ba70:	f7ff fed8 	bl	800b824 <_Balloc>
 800ba74:	b930      	cbnz	r0, 800ba84 <__multiply+0x44>
 800ba76:	4602      	mov	r2, r0
 800ba78:	4b44      	ldr	r3, [pc, #272]	; (800bb8c <__multiply+0x14c>)
 800ba7a:	4845      	ldr	r0, [pc, #276]	; (800bb90 <__multiply+0x150>)
 800ba7c:	f240 115d 	movw	r1, #349	; 0x15d
 800ba80:	f000 fcb6 	bl	800c3f0 <__assert_func>
 800ba84:	f100 0514 	add.w	r5, r0, #20
 800ba88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba8c:	462b      	mov	r3, r5
 800ba8e:	2200      	movs	r2, #0
 800ba90:	4543      	cmp	r3, r8
 800ba92:	d321      	bcc.n	800bad8 <__multiply+0x98>
 800ba94:	f104 0314 	add.w	r3, r4, #20
 800ba98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba9c:	f109 0314 	add.w	r3, r9, #20
 800baa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800baa4:	9202      	str	r2, [sp, #8]
 800baa6:	1b3a      	subs	r2, r7, r4
 800baa8:	3a15      	subs	r2, #21
 800baaa:	f022 0203 	bic.w	r2, r2, #3
 800baae:	3204      	adds	r2, #4
 800bab0:	f104 0115 	add.w	r1, r4, #21
 800bab4:	428f      	cmp	r7, r1
 800bab6:	bf38      	it	cc
 800bab8:	2204      	movcc	r2, #4
 800baba:	9201      	str	r2, [sp, #4]
 800babc:	9a02      	ldr	r2, [sp, #8]
 800babe:	9303      	str	r3, [sp, #12]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d80c      	bhi.n	800bade <__multiply+0x9e>
 800bac4:	2e00      	cmp	r6, #0
 800bac6:	dd03      	ble.n	800bad0 <__multiply+0x90>
 800bac8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d05a      	beq.n	800bb86 <__multiply+0x146>
 800bad0:	6106      	str	r6, [r0, #16]
 800bad2:	b005      	add	sp, #20
 800bad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad8:	f843 2b04 	str.w	r2, [r3], #4
 800badc:	e7d8      	b.n	800ba90 <__multiply+0x50>
 800bade:	f8b3 a000 	ldrh.w	sl, [r3]
 800bae2:	f1ba 0f00 	cmp.w	sl, #0
 800bae6:	d024      	beq.n	800bb32 <__multiply+0xf2>
 800bae8:	f104 0e14 	add.w	lr, r4, #20
 800baec:	46a9      	mov	r9, r5
 800baee:	f04f 0c00 	mov.w	ip, #0
 800baf2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800baf6:	f8d9 1000 	ldr.w	r1, [r9]
 800bafa:	fa1f fb82 	uxth.w	fp, r2
 800bafe:	b289      	uxth	r1, r1
 800bb00:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb08:	f8d9 2000 	ldr.w	r2, [r9]
 800bb0c:	4461      	add	r1, ip
 800bb0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb12:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb1a:	b289      	uxth	r1, r1
 800bb1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bb20:	4577      	cmp	r7, lr
 800bb22:	f849 1b04 	str.w	r1, [r9], #4
 800bb26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb2a:	d8e2      	bhi.n	800baf2 <__multiply+0xb2>
 800bb2c:	9a01      	ldr	r2, [sp, #4]
 800bb2e:	f845 c002 	str.w	ip, [r5, r2]
 800bb32:	9a03      	ldr	r2, [sp, #12]
 800bb34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	f1b9 0f00 	cmp.w	r9, #0
 800bb3e:	d020      	beq.n	800bb82 <__multiply+0x142>
 800bb40:	6829      	ldr	r1, [r5, #0]
 800bb42:	f104 0c14 	add.w	ip, r4, #20
 800bb46:	46ae      	mov	lr, r5
 800bb48:	f04f 0a00 	mov.w	sl, #0
 800bb4c:	f8bc b000 	ldrh.w	fp, [ip]
 800bb50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bb54:	fb09 220b 	mla	r2, r9, fp, r2
 800bb58:	4492      	add	sl, r2
 800bb5a:	b289      	uxth	r1, r1
 800bb5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bb60:	f84e 1b04 	str.w	r1, [lr], #4
 800bb64:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb68:	f8be 1000 	ldrh.w	r1, [lr]
 800bb6c:	0c12      	lsrs	r2, r2, #16
 800bb6e:	fb09 1102 	mla	r1, r9, r2, r1
 800bb72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bb76:	4567      	cmp	r7, ip
 800bb78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb7c:	d8e6      	bhi.n	800bb4c <__multiply+0x10c>
 800bb7e:	9a01      	ldr	r2, [sp, #4]
 800bb80:	50a9      	str	r1, [r5, r2]
 800bb82:	3504      	adds	r5, #4
 800bb84:	e79a      	b.n	800babc <__multiply+0x7c>
 800bb86:	3e01      	subs	r6, #1
 800bb88:	e79c      	b.n	800bac4 <__multiply+0x84>
 800bb8a:	bf00      	nop
 800bb8c:	0801000b 	.word	0x0801000b
 800bb90:	0801001c 	.word	0x0801001c

0800bb94 <__pow5mult>:
 800bb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb98:	4615      	mov	r5, r2
 800bb9a:	f012 0203 	ands.w	r2, r2, #3
 800bb9e:	4606      	mov	r6, r0
 800bba0:	460f      	mov	r7, r1
 800bba2:	d007      	beq.n	800bbb4 <__pow5mult+0x20>
 800bba4:	4c25      	ldr	r4, [pc, #148]	; (800bc3c <__pow5mult+0xa8>)
 800bba6:	3a01      	subs	r2, #1
 800bba8:	2300      	movs	r3, #0
 800bbaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbae:	f7ff fe9b 	bl	800b8e8 <__multadd>
 800bbb2:	4607      	mov	r7, r0
 800bbb4:	10ad      	asrs	r5, r5, #2
 800bbb6:	d03d      	beq.n	800bc34 <__pow5mult+0xa0>
 800bbb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbba:	b97c      	cbnz	r4, 800bbdc <__pow5mult+0x48>
 800bbbc:	2010      	movs	r0, #16
 800bbbe:	f7ff fe29 	bl	800b814 <malloc>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	6270      	str	r0, [r6, #36]	; 0x24
 800bbc6:	b928      	cbnz	r0, 800bbd4 <__pow5mult+0x40>
 800bbc8:	4b1d      	ldr	r3, [pc, #116]	; (800bc40 <__pow5mult+0xac>)
 800bbca:	481e      	ldr	r0, [pc, #120]	; (800bc44 <__pow5mult+0xb0>)
 800bbcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bbd0:	f000 fc0e 	bl	800c3f0 <__assert_func>
 800bbd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbd8:	6004      	str	r4, [r0, #0]
 800bbda:	60c4      	str	r4, [r0, #12]
 800bbdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bbe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbe4:	b94c      	cbnz	r4, 800bbfa <__pow5mult+0x66>
 800bbe6:	f240 2171 	movw	r1, #625	; 0x271
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ff12 	bl	800ba14 <__i2b>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	6003      	str	r3, [r0, #0]
 800bbfa:	f04f 0900 	mov.w	r9, #0
 800bbfe:	07eb      	lsls	r3, r5, #31
 800bc00:	d50a      	bpl.n	800bc18 <__pow5mult+0x84>
 800bc02:	4639      	mov	r1, r7
 800bc04:	4622      	mov	r2, r4
 800bc06:	4630      	mov	r0, r6
 800bc08:	f7ff ff1a 	bl	800ba40 <__multiply>
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	4680      	mov	r8, r0
 800bc10:	4630      	mov	r0, r6
 800bc12:	f7ff fe47 	bl	800b8a4 <_Bfree>
 800bc16:	4647      	mov	r7, r8
 800bc18:	106d      	asrs	r5, r5, #1
 800bc1a:	d00b      	beq.n	800bc34 <__pow5mult+0xa0>
 800bc1c:	6820      	ldr	r0, [r4, #0]
 800bc1e:	b938      	cbnz	r0, 800bc30 <__pow5mult+0x9c>
 800bc20:	4622      	mov	r2, r4
 800bc22:	4621      	mov	r1, r4
 800bc24:	4630      	mov	r0, r6
 800bc26:	f7ff ff0b 	bl	800ba40 <__multiply>
 800bc2a:	6020      	str	r0, [r4, #0]
 800bc2c:	f8c0 9000 	str.w	r9, [r0]
 800bc30:	4604      	mov	r4, r0
 800bc32:	e7e4      	b.n	800bbfe <__pow5mult+0x6a>
 800bc34:	4638      	mov	r0, r7
 800bc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3a:	bf00      	nop
 800bc3c:	08010168 	.word	0x08010168
 800bc40:	0800ff99 	.word	0x0800ff99
 800bc44:	0801001c 	.word	0x0801001c

0800bc48 <__lshift>:
 800bc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	6849      	ldr	r1, [r1, #4]
 800bc50:	6923      	ldr	r3, [r4, #16]
 800bc52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc56:	68a3      	ldr	r3, [r4, #8]
 800bc58:	4607      	mov	r7, r0
 800bc5a:	4691      	mov	r9, r2
 800bc5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc60:	f108 0601 	add.w	r6, r8, #1
 800bc64:	42b3      	cmp	r3, r6
 800bc66:	db0b      	blt.n	800bc80 <__lshift+0x38>
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f7ff fddb 	bl	800b824 <_Balloc>
 800bc6e:	4605      	mov	r5, r0
 800bc70:	b948      	cbnz	r0, 800bc86 <__lshift+0x3e>
 800bc72:	4602      	mov	r2, r0
 800bc74:	4b2a      	ldr	r3, [pc, #168]	; (800bd20 <__lshift+0xd8>)
 800bc76:	482b      	ldr	r0, [pc, #172]	; (800bd24 <__lshift+0xdc>)
 800bc78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc7c:	f000 fbb8 	bl	800c3f0 <__assert_func>
 800bc80:	3101      	adds	r1, #1
 800bc82:	005b      	lsls	r3, r3, #1
 800bc84:	e7ee      	b.n	800bc64 <__lshift+0x1c>
 800bc86:	2300      	movs	r3, #0
 800bc88:	f100 0114 	add.w	r1, r0, #20
 800bc8c:	f100 0210 	add.w	r2, r0, #16
 800bc90:	4618      	mov	r0, r3
 800bc92:	4553      	cmp	r3, sl
 800bc94:	db37      	blt.n	800bd06 <__lshift+0xbe>
 800bc96:	6920      	ldr	r0, [r4, #16]
 800bc98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc9c:	f104 0314 	add.w	r3, r4, #20
 800bca0:	f019 091f 	ands.w	r9, r9, #31
 800bca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bca8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bcac:	d02f      	beq.n	800bd0e <__lshift+0xc6>
 800bcae:	f1c9 0e20 	rsb	lr, r9, #32
 800bcb2:	468a      	mov	sl, r1
 800bcb4:	f04f 0c00 	mov.w	ip, #0
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	fa02 f209 	lsl.w	r2, r2, r9
 800bcbe:	ea42 020c 	orr.w	r2, r2, ip
 800bcc2:	f84a 2b04 	str.w	r2, [sl], #4
 800bcc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcca:	4298      	cmp	r0, r3
 800bccc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bcd0:	d8f2      	bhi.n	800bcb8 <__lshift+0x70>
 800bcd2:	1b03      	subs	r3, r0, r4
 800bcd4:	3b15      	subs	r3, #21
 800bcd6:	f023 0303 	bic.w	r3, r3, #3
 800bcda:	3304      	adds	r3, #4
 800bcdc:	f104 0215 	add.w	r2, r4, #21
 800bce0:	4290      	cmp	r0, r2
 800bce2:	bf38      	it	cc
 800bce4:	2304      	movcc	r3, #4
 800bce6:	f841 c003 	str.w	ip, [r1, r3]
 800bcea:	f1bc 0f00 	cmp.w	ip, #0
 800bcee:	d001      	beq.n	800bcf4 <__lshift+0xac>
 800bcf0:	f108 0602 	add.w	r6, r8, #2
 800bcf4:	3e01      	subs	r6, #1
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	612e      	str	r6, [r5, #16]
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	f7ff fdd2 	bl	800b8a4 <_Bfree>
 800bd00:	4628      	mov	r0, r5
 800bd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd06:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	e7c1      	b.n	800bc92 <__lshift+0x4a>
 800bd0e:	3904      	subs	r1, #4
 800bd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd14:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd18:	4298      	cmp	r0, r3
 800bd1a:	d8f9      	bhi.n	800bd10 <__lshift+0xc8>
 800bd1c:	e7ea      	b.n	800bcf4 <__lshift+0xac>
 800bd1e:	bf00      	nop
 800bd20:	0801000b 	.word	0x0801000b
 800bd24:	0801001c 	.word	0x0801001c

0800bd28 <__mcmp>:
 800bd28:	b530      	push	{r4, r5, lr}
 800bd2a:	6902      	ldr	r2, [r0, #16]
 800bd2c:	690c      	ldr	r4, [r1, #16]
 800bd2e:	1b12      	subs	r2, r2, r4
 800bd30:	d10e      	bne.n	800bd50 <__mcmp+0x28>
 800bd32:	f100 0314 	add.w	r3, r0, #20
 800bd36:	3114      	adds	r1, #20
 800bd38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd48:	42a5      	cmp	r5, r4
 800bd4a:	d003      	beq.n	800bd54 <__mcmp+0x2c>
 800bd4c:	d305      	bcc.n	800bd5a <__mcmp+0x32>
 800bd4e:	2201      	movs	r2, #1
 800bd50:	4610      	mov	r0, r2
 800bd52:	bd30      	pop	{r4, r5, pc}
 800bd54:	4283      	cmp	r3, r0
 800bd56:	d3f3      	bcc.n	800bd40 <__mcmp+0x18>
 800bd58:	e7fa      	b.n	800bd50 <__mcmp+0x28>
 800bd5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd5e:	e7f7      	b.n	800bd50 <__mcmp+0x28>

0800bd60 <__mdiff>:
 800bd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	460c      	mov	r4, r1
 800bd66:	4606      	mov	r6, r0
 800bd68:	4611      	mov	r1, r2
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	4690      	mov	r8, r2
 800bd6e:	f7ff ffdb 	bl	800bd28 <__mcmp>
 800bd72:	1e05      	subs	r5, r0, #0
 800bd74:	d110      	bne.n	800bd98 <__mdiff+0x38>
 800bd76:	4629      	mov	r1, r5
 800bd78:	4630      	mov	r0, r6
 800bd7a:	f7ff fd53 	bl	800b824 <_Balloc>
 800bd7e:	b930      	cbnz	r0, 800bd8e <__mdiff+0x2e>
 800bd80:	4b3a      	ldr	r3, [pc, #232]	; (800be6c <__mdiff+0x10c>)
 800bd82:	4602      	mov	r2, r0
 800bd84:	f240 2132 	movw	r1, #562	; 0x232
 800bd88:	4839      	ldr	r0, [pc, #228]	; (800be70 <__mdiff+0x110>)
 800bd8a:	f000 fb31 	bl	800c3f0 <__assert_func>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd98:	bfa4      	itt	ge
 800bd9a:	4643      	movge	r3, r8
 800bd9c:	46a0      	movge	r8, r4
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bda4:	bfa6      	itte	ge
 800bda6:	461c      	movge	r4, r3
 800bda8:	2500      	movge	r5, #0
 800bdaa:	2501      	movlt	r5, #1
 800bdac:	f7ff fd3a 	bl	800b824 <_Balloc>
 800bdb0:	b920      	cbnz	r0, 800bdbc <__mdiff+0x5c>
 800bdb2:	4b2e      	ldr	r3, [pc, #184]	; (800be6c <__mdiff+0x10c>)
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bdba:	e7e5      	b.n	800bd88 <__mdiff+0x28>
 800bdbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bdc0:	6926      	ldr	r6, [r4, #16]
 800bdc2:	60c5      	str	r5, [r0, #12]
 800bdc4:	f104 0914 	add.w	r9, r4, #20
 800bdc8:	f108 0514 	add.w	r5, r8, #20
 800bdcc:	f100 0e14 	add.w	lr, r0, #20
 800bdd0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bdd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bdd8:	f108 0210 	add.w	r2, r8, #16
 800bddc:	46f2      	mov	sl, lr
 800bdde:	2100      	movs	r1, #0
 800bde0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bde4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bde8:	fa1f f883 	uxth.w	r8, r3
 800bdec:	fa11 f18b 	uxtah	r1, r1, fp
 800bdf0:	0c1b      	lsrs	r3, r3, #16
 800bdf2:	eba1 0808 	sub.w	r8, r1, r8
 800bdf6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bdfa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bdfe:	fa1f f888 	uxth.w	r8, r8
 800be02:	1419      	asrs	r1, r3, #16
 800be04:	454e      	cmp	r6, r9
 800be06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be0a:	f84a 3b04 	str.w	r3, [sl], #4
 800be0e:	d8e7      	bhi.n	800bde0 <__mdiff+0x80>
 800be10:	1b33      	subs	r3, r6, r4
 800be12:	3b15      	subs	r3, #21
 800be14:	f023 0303 	bic.w	r3, r3, #3
 800be18:	3304      	adds	r3, #4
 800be1a:	3415      	adds	r4, #21
 800be1c:	42a6      	cmp	r6, r4
 800be1e:	bf38      	it	cc
 800be20:	2304      	movcc	r3, #4
 800be22:	441d      	add	r5, r3
 800be24:	4473      	add	r3, lr
 800be26:	469e      	mov	lr, r3
 800be28:	462e      	mov	r6, r5
 800be2a:	4566      	cmp	r6, ip
 800be2c:	d30e      	bcc.n	800be4c <__mdiff+0xec>
 800be2e:	f10c 0203 	add.w	r2, ip, #3
 800be32:	1b52      	subs	r2, r2, r5
 800be34:	f022 0203 	bic.w	r2, r2, #3
 800be38:	3d03      	subs	r5, #3
 800be3a:	45ac      	cmp	ip, r5
 800be3c:	bf38      	it	cc
 800be3e:	2200      	movcc	r2, #0
 800be40:	441a      	add	r2, r3
 800be42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be46:	b17b      	cbz	r3, 800be68 <__mdiff+0x108>
 800be48:	6107      	str	r7, [r0, #16]
 800be4a:	e7a3      	b.n	800bd94 <__mdiff+0x34>
 800be4c:	f856 8b04 	ldr.w	r8, [r6], #4
 800be50:	fa11 f288 	uxtah	r2, r1, r8
 800be54:	1414      	asrs	r4, r2, #16
 800be56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be5a:	b292      	uxth	r2, r2
 800be5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be60:	f84e 2b04 	str.w	r2, [lr], #4
 800be64:	1421      	asrs	r1, r4, #16
 800be66:	e7e0      	b.n	800be2a <__mdiff+0xca>
 800be68:	3f01      	subs	r7, #1
 800be6a:	e7ea      	b.n	800be42 <__mdiff+0xe2>
 800be6c:	0801000b 	.word	0x0801000b
 800be70:	0801001c 	.word	0x0801001c

0800be74 <__d2b>:
 800be74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be78:	4689      	mov	r9, r1
 800be7a:	2101      	movs	r1, #1
 800be7c:	ec57 6b10 	vmov	r6, r7, d0
 800be80:	4690      	mov	r8, r2
 800be82:	f7ff fccf 	bl	800b824 <_Balloc>
 800be86:	4604      	mov	r4, r0
 800be88:	b930      	cbnz	r0, 800be98 <__d2b+0x24>
 800be8a:	4602      	mov	r2, r0
 800be8c:	4b25      	ldr	r3, [pc, #148]	; (800bf24 <__d2b+0xb0>)
 800be8e:	4826      	ldr	r0, [pc, #152]	; (800bf28 <__d2b+0xb4>)
 800be90:	f240 310a 	movw	r1, #778	; 0x30a
 800be94:	f000 faac 	bl	800c3f0 <__assert_func>
 800be98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bea0:	bb35      	cbnz	r5, 800bef0 <__d2b+0x7c>
 800bea2:	2e00      	cmp	r6, #0
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	d028      	beq.n	800befa <__d2b+0x86>
 800bea8:	4668      	mov	r0, sp
 800beaa:	9600      	str	r6, [sp, #0]
 800beac:	f7ff fd82 	bl	800b9b4 <__lo0bits>
 800beb0:	9900      	ldr	r1, [sp, #0]
 800beb2:	b300      	cbz	r0, 800bef6 <__d2b+0x82>
 800beb4:	9a01      	ldr	r2, [sp, #4]
 800beb6:	f1c0 0320 	rsb	r3, r0, #32
 800beba:	fa02 f303 	lsl.w	r3, r2, r3
 800bebe:	430b      	orrs	r3, r1
 800bec0:	40c2      	lsrs	r2, r0
 800bec2:	6163      	str	r3, [r4, #20]
 800bec4:	9201      	str	r2, [sp, #4]
 800bec6:	9b01      	ldr	r3, [sp, #4]
 800bec8:	61a3      	str	r3, [r4, #24]
 800beca:	2b00      	cmp	r3, #0
 800becc:	bf14      	ite	ne
 800bece:	2202      	movne	r2, #2
 800bed0:	2201      	moveq	r2, #1
 800bed2:	6122      	str	r2, [r4, #16]
 800bed4:	b1d5      	cbz	r5, 800bf0c <__d2b+0x98>
 800bed6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800beda:	4405      	add	r5, r0
 800bedc:	f8c9 5000 	str.w	r5, [r9]
 800bee0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bee4:	f8c8 0000 	str.w	r0, [r8]
 800bee8:	4620      	mov	r0, r4
 800beea:	b003      	add	sp, #12
 800beec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bef4:	e7d5      	b.n	800bea2 <__d2b+0x2e>
 800bef6:	6161      	str	r1, [r4, #20]
 800bef8:	e7e5      	b.n	800bec6 <__d2b+0x52>
 800befa:	a801      	add	r0, sp, #4
 800befc:	f7ff fd5a 	bl	800b9b4 <__lo0bits>
 800bf00:	9b01      	ldr	r3, [sp, #4]
 800bf02:	6163      	str	r3, [r4, #20]
 800bf04:	2201      	movs	r2, #1
 800bf06:	6122      	str	r2, [r4, #16]
 800bf08:	3020      	adds	r0, #32
 800bf0a:	e7e3      	b.n	800bed4 <__d2b+0x60>
 800bf0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf14:	f8c9 0000 	str.w	r0, [r9]
 800bf18:	6918      	ldr	r0, [r3, #16]
 800bf1a:	f7ff fd2b 	bl	800b974 <__hi0bits>
 800bf1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf22:	e7df      	b.n	800bee4 <__d2b+0x70>
 800bf24:	0801000b 	.word	0x0801000b
 800bf28:	0801001c 	.word	0x0801001c

0800bf2c <_calloc_r>:
 800bf2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf2e:	fba1 2402 	umull	r2, r4, r1, r2
 800bf32:	b94c      	cbnz	r4, 800bf48 <_calloc_r+0x1c>
 800bf34:	4611      	mov	r1, r2
 800bf36:	9201      	str	r2, [sp, #4]
 800bf38:	f000 f87a 	bl	800c030 <_malloc_r>
 800bf3c:	9a01      	ldr	r2, [sp, #4]
 800bf3e:	4605      	mov	r5, r0
 800bf40:	b930      	cbnz	r0, 800bf50 <_calloc_r+0x24>
 800bf42:	4628      	mov	r0, r5
 800bf44:	b003      	add	sp, #12
 800bf46:	bd30      	pop	{r4, r5, pc}
 800bf48:	220c      	movs	r2, #12
 800bf4a:	6002      	str	r2, [r0, #0]
 800bf4c:	2500      	movs	r5, #0
 800bf4e:	e7f8      	b.n	800bf42 <_calloc_r+0x16>
 800bf50:	4621      	mov	r1, r4
 800bf52:	f7fe f939 	bl	800a1c8 <memset>
 800bf56:	e7f4      	b.n	800bf42 <_calloc_r+0x16>

0800bf58 <_free_r>:
 800bf58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf5a:	2900      	cmp	r1, #0
 800bf5c:	d044      	beq.n	800bfe8 <_free_r+0x90>
 800bf5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf62:	9001      	str	r0, [sp, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f1a1 0404 	sub.w	r4, r1, #4
 800bf6a:	bfb8      	it	lt
 800bf6c:	18e4      	addlt	r4, r4, r3
 800bf6e:	f000 fa9b 	bl	800c4a8 <__malloc_lock>
 800bf72:	4a1e      	ldr	r2, [pc, #120]	; (800bfec <_free_r+0x94>)
 800bf74:	9801      	ldr	r0, [sp, #4]
 800bf76:	6813      	ldr	r3, [r2, #0]
 800bf78:	b933      	cbnz	r3, 800bf88 <_free_r+0x30>
 800bf7a:	6063      	str	r3, [r4, #4]
 800bf7c:	6014      	str	r4, [r2, #0]
 800bf7e:	b003      	add	sp, #12
 800bf80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf84:	f000 ba96 	b.w	800c4b4 <__malloc_unlock>
 800bf88:	42a3      	cmp	r3, r4
 800bf8a:	d908      	bls.n	800bf9e <_free_r+0x46>
 800bf8c:	6825      	ldr	r5, [r4, #0]
 800bf8e:	1961      	adds	r1, r4, r5
 800bf90:	428b      	cmp	r3, r1
 800bf92:	bf01      	itttt	eq
 800bf94:	6819      	ldreq	r1, [r3, #0]
 800bf96:	685b      	ldreq	r3, [r3, #4]
 800bf98:	1949      	addeq	r1, r1, r5
 800bf9a:	6021      	streq	r1, [r4, #0]
 800bf9c:	e7ed      	b.n	800bf7a <_free_r+0x22>
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	b10b      	cbz	r3, 800bfa8 <_free_r+0x50>
 800bfa4:	42a3      	cmp	r3, r4
 800bfa6:	d9fa      	bls.n	800bf9e <_free_r+0x46>
 800bfa8:	6811      	ldr	r1, [r2, #0]
 800bfaa:	1855      	adds	r5, r2, r1
 800bfac:	42a5      	cmp	r5, r4
 800bfae:	d10b      	bne.n	800bfc8 <_free_r+0x70>
 800bfb0:	6824      	ldr	r4, [r4, #0]
 800bfb2:	4421      	add	r1, r4
 800bfb4:	1854      	adds	r4, r2, r1
 800bfb6:	42a3      	cmp	r3, r4
 800bfb8:	6011      	str	r1, [r2, #0]
 800bfba:	d1e0      	bne.n	800bf7e <_free_r+0x26>
 800bfbc:	681c      	ldr	r4, [r3, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	6053      	str	r3, [r2, #4]
 800bfc2:	4421      	add	r1, r4
 800bfc4:	6011      	str	r1, [r2, #0]
 800bfc6:	e7da      	b.n	800bf7e <_free_r+0x26>
 800bfc8:	d902      	bls.n	800bfd0 <_free_r+0x78>
 800bfca:	230c      	movs	r3, #12
 800bfcc:	6003      	str	r3, [r0, #0]
 800bfce:	e7d6      	b.n	800bf7e <_free_r+0x26>
 800bfd0:	6825      	ldr	r5, [r4, #0]
 800bfd2:	1961      	adds	r1, r4, r5
 800bfd4:	428b      	cmp	r3, r1
 800bfd6:	bf04      	itt	eq
 800bfd8:	6819      	ldreq	r1, [r3, #0]
 800bfda:	685b      	ldreq	r3, [r3, #4]
 800bfdc:	6063      	str	r3, [r4, #4]
 800bfde:	bf04      	itt	eq
 800bfe0:	1949      	addeq	r1, r1, r5
 800bfe2:	6021      	streq	r1, [r4, #0]
 800bfe4:	6054      	str	r4, [r2, #4]
 800bfe6:	e7ca      	b.n	800bf7e <_free_r+0x26>
 800bfe8:	b003      	add	sp, #12
 800bfea:	bd30      	pop	{r4, r5, pc}
 800bfec:	20000b40 	.word	0x20000b40

0800bff0 <sbrk_aligned>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	4e0e      	ldr	r6, [pc, #56]	; (800c02c <sbrk_aligned+0x3c>)
 800bff4:	460c      	mov	r4, r1
 800bff6:	6831      	ldr	r1, [r6, #0]
 800bff8:	4605      	mov	r5, r0
 800bffa:	b911      	cbnz	r1, 800c002 <sbrk_aligned+0x12>
 800bffc:	f000 f9e8 	bl	800c3d0 <_sbrk_r>
 800c000:	6030      	str	r0, [r6, #0]
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	f000 f9e3 	bl	800c3d0 <_sbrk_r>
 800c00a:	1c43      	adds	r3, r0, #1
 800c00c:	d00a      	beq.n	800c024 <sbrk_aligned+0x34>
 800c00e:	1cc4      	adds	r4, r0, #3
 800c010:	f024 0403 	bic.w	r4, r4, #3
 800c014:	42a0      	cmp	r0, r4
 800c016:	d007      	beq.n	800c028 <sbrk_aligned+0x38>
 800c018:	1a21      	subs	r1, r4, r0
 800c01a:	4628      	mov	r0, r5
 800c01c:	f000 f9d8 	bl	800c3d0 <_sbrk_r>
 800c020:	3001      	adds	r0, #1
 800c022:	d101      	bne.n	800c028 <sbrk_aligned+0x38>
 800c024:	f04f 34ff 	mov.w	r4, #4294967295
 800c028:	4620      	mov	r0, r4
 800c02a:	bd70      	pop	{r4, r5, r6, pc}
 800c02c:	20000b44 	.word	0x20000b44

0800c030 <_malloc_r>:
 800c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c034:	1ccd      	adds	r5, r1, #3
 800c036:	f025 0503 	bic.w	r5, r5, #3
 800c03a:	3508      	adds	r5, #8
 800c03c:	2d0c      	cmp	r5, #12
 800c03e:	bf38      	it	cc
 800c040:	250c      	movcc	r5, #12
 800c042:	2d00      	cmp	r5, #0
 800c044:	4607      	mov	r7, r0
 800c046:	db01      	blt.n	800c04c <_malloc_r+0x1c>
 800c048:	42a9      	cmp	r1, r5
 800c04a:	d905      	bls.n	800c058 <_malloc_r+0x28>
 800c04c:	230c      	movs	r3, #12
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	2600      	movs	r6, #0
 800c052:	4630      	mov	r0, r6
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	4e2e      	ldr	r6, [pc, #184]	; (800c114 <_malloc_r+0xe4>)
 800c05a:	f000 fa25 	bl	800c4a8 <__malloc_lock>
 800c05e:	6833      	ldr	r3, [r6, #0]
 800c060:	461c      	mov	r4, r3
 800c062:	bb34      	cbnz	r4, 800c0b2 <_malloc_r+0x82>
 800c064:	4629      	mov	r1, r5
 800c066:	4638      	mov	r0, r7
 800c068:	f7ff ffc2 	bl	800bff0 <sbrk_aligned>
 800c06c:	1c43      	adds	r3, r0, #1
 800c06e:	4604      	mov	r4, r0
 800c070:	d14d      	bne.n	800c10e <_malloc_r+0xde>
 800c072:	6834      	ldr	r4, [r6, #0]
 800c074:	4626      	mov	r6, r4
 800c076:	2e00      	cmp	r6, #0
 800c078:	d140      	bne.n	800c0fc <_malloc_r+0xcc>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	4631      	mov	r1, r6
 800c07e:	4638      	mov	r0, r7
 800c080:	eb04 0803 	add.w	r8, r4, r3
 800c084:	f000 f9a4 	bl	800c3d0 <_sbrk_r>
 800c088:	4580      	cmp	r8, r0
 800c08a:	d13a      	bne.n	800c102 <_malloc_r+0xd2>
 800c08c:	6821      	ldr	r1, [r4, #0]
 800c08e:	3503      	adds	r5, #3
 800c090:	1a6d      	subs	r5, r5, r1
 800c092:	f025 0503 	bic.w	r5, r5, #3
 800c096:	3508      	adds	r5, #8
 800c098:	2d0c      	cmp	r5, #12
 800c09a:	bf38      	it	cc
 800c09c:	250c      	movcc	r5, #12
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff ffa5 	bl	800bff0 <sbrk_aligned>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d02b      	beq.n	800c102 <_malloc_r+0xd2>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	442b      	add	r3, r5
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	e00e      	b.n	800c0d0 <_malloc_r+0xa0>
 800c0b2:	6822      	ldr	r2, [r4, #0]
 800c0b4:	1b52      	subs	r2, r2, r5
 800c0b6:	d41e      	bmi.n	800c0f6 <_malloc_r+0xc6>
 800c0b8:	2a0b      	cmp	r2, #11
 800c0ba:	d916      	bls.n	800c0ea <_malloc_r+0xba>
 800c0bc:	1961      	adds	r1, r4, r5
 800c0be:	42a3      	cmp	r3, r4
 800c0c0:	6025      	str	r5, [r4, #0]
 800c0c2:	bf18      	it	ne
 800c0c4:	6059      	strne	r1, [r3, #4]
 800c0c6:	6863      	ldr	r3, [r4, #4]
 800c0c8:	bf08      	it	eq
 800c0ca:	6031      	streq	r1, [r6, #0]
 800c0cc:	5162      	str	r2, [r4, r5]
 800c0ce:	604b      	str	r3, [r1, #4]
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f104 060b 	add.w	r6, r4, #11
 800c0d6:	f000 f9ed 	bl	800c4b4 <__malloc_unlock>
 800c0da:	f026 0607 	bic.w	r6, r6, #7
 800c0de:	1d23      	adds	r3, r4, #4
 800c0e0:	1af2      	subs	r2, r6, r3
 800c0e2:	d0b6      	beq.n	800c052 <_malloc_r+0x22>
 800c0e4:	1b9b      	subs	r3, r3, r6
 800c0e6:	50a3      	str	r3, [r4, r2]
 800c0e8:	e7b3      	b.n	800c052 <_malloc_r+0x22>
 800c0ea:	6862      	ldr	r2, [r4, #4]
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	bf0c      	ite	eq
 800c0f0:	6032      	streq	r2, [r6, #0]
 800c0f2:	605a      	strne	r2, [r3, #4]
 800c0f4:	e7ec      	b.n	800c0d0 <_malloc_r+0xa0>
 800c0f6:	4623      	mov	r3, r4
 800c0f8:	6864      	ldr	r4, [r4, #4]
 800c0fa:	e7b2      	b.n	800c062 <_malloc_r+0x32>
 800c0fc:	4634      	mov	r4, r6
 800c0fe:	6876      	ldr	r6, [r6, #4]
 800c100:	e7b9      	b.n	800c076 <_malloc_r+0x46>
 800c102:	230c      	movs	r3, #12
 800c104:	603b      	str	r3, [r7, #0]
 800c106:	4638      	mov	r0, r7
 800c108:	f000 f9d4 	bl	800c4b4 <__malloc_unlock>
 800c10c:	e7a1      	b.n	800c052 <_malloc_r+0x22>
 800c10e:	6025      	str	r5, [r4, #0]
 800c110:	e7de      	b.n	800c0d0 <_malloc_r+0xa0>
 800c112:	bf00      	nop
 800c114:	20000b40 	.word	0x20000b40

0800c118 <__ssputs_r>:
 800c118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c11c:	688e      	ldr	r6, [r1, #8]
 800c11e:	429e      	cmp	r6, r3
 800c120:	4682      	mov	sl, r0
 800c122:	460c      	mov	r4, r1
 800c124:	4690      	mov	r8, r2
 800c126:	461f      	mov	r7, r3
 800c128:	d838      	bhi.n	800c19c <__ssputs_r+0x84>
 800c12a:	898a      	ldrh	r2, [r1, #12]
 800c12c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c130:	d032      	beq.n	800c198 <__ssputs_r+0x80>
 800c132:	6825      	ldr	r5, [r4, #0]
 800c134:	6909      	ldr	r1, [r1, #16]
 800c136:	eba5 0901 	sub.w	r9, r5, r1
 800c13a:	6965      	ldr	r5, [r4, #20]
 800c13c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c144:	3301      	adds	r3, #1
 800c146:	444b      	add	r3, r9
 800c148:	106d      	asrs	r5, r5, #1
 800c14a:	429d      	cmp	r5, r3
 800c14c:	bf38      	it	cc
 800c14e:	461d      	movcc	r5, r3
 800c150:	0553      	lsls	r3, r2, #21
 800c152:	d531      	bpl.n	800c1b8 <__ssputs_r+0xa0>
 800c154:	4629      	mov	r1, r5
 800c156:	f7ff ff6b 	bl	800c030 <_malloc_r>
 800c15a:	4606      	mov	r6, r0
 800c15c:	b950      	cbnz	r0, 800c174 <__ssputs_r+0x5c>
 800c15e:	230c      	movs	r3, #12
 800c160:	f8ca 3000 	str.w	r3, [sl]
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c174:	6921      	ldr	r1, [r4, #16]
 800c176:	464a      	mov	r2, r9
 800c178:	f7fe f818 	bl	800a1ac <memcpy>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c186:	81a3      	strh	r3, [r4, #12]
 800c188:	6126      	str	r6, [r4, #16]
 800c18a:	6165      	str	r5, [r4, #20]
 800c18c:	444e      	add	r6, r9
 800c18e:	eba5 0509 	sub.w	r5, r5, r9
 800c192:	6026      	str	r6, [r4, #0]
 800c194:	60a5      	str	r5, [r4, #8]
 800c196:	463e      	mov	r6, r7
 800c198:	42be      	cmp	r6, r7
 800c19a:	d900      	bls.n	800c19e <__ssputs_r+0x86>
 800c19c:	463e      	mov	r6, r7
 800c19e:	6820      	ldr	r0, [r4, #0]
 800c1a0:	4632      	mov	r2, r6
 800c1a2:	4641      	mov	r1, r8
 800c1a4:	f000 f966 	bl	800c474 <memmove>
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	1b9b      	subs	r3, r3, r6
 800c1ac:	60a3      	str	r3, [r4, #8]
 800c1ae:	6823      	ldr	r3, [r4, #0]
 800c1b0:	4433      	add	r3, r6
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	e7db      	b.n	800c170 <__ssputs_r+0x58>
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	f000 f981 	bl	800c4c0 <_realloc_r>
 800c1be:	4606      	mov	r6, r0
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d1e1      	bne.n	800c188 <__ssputs_r+0x70>
 800c1c4:	6921      	ldr	r1, [r4, #16]
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	f7ff fec6 	bl	800bf58 <_free_r>
 800c1cc:	e7c7      	b.n	800c15e <__ssputs_r+0x46>
	...

0800c1d0 <_svfiprintf_r>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	4698      	mov	r8, r3
 800c1d6:	898b      	ldrh	r3, [r1, #12]
 800c1d8:	061b      	lsls	r3, r3, #24
 800c1da:	b09d      	sub	sp, #116	; 0x74
 800c1dc:	4607      	mov	r7, r0
 800c1de:	460d      	mov	r5, r1
 800c1e0:	4614      	mov	r4, r2
 800c1e2:	d50e      	bpl.n	800c202 <_svfiprintf_r+0x32>
 800c1e4:	690b      	ldr	r3, [r1, #16]
 800c1e6:	b963      	cbnz	r3, 800c202 <_svfiprintf_r+0x32>
 800c1e8:	2140      	movs	r1, #64	; 0x40
 800c1ea:	f7ff ff21 	bl	800c030 <_malloc_r>
 800c1ee:	6028      	str	r0, [r5, #0]
 800c1f0:	6128      	str	r0, [r5, #16]
 800c1f2:	b920      	cbnz	r0, 800c1fe <_svfiprintf_r+0x2e>
 800c1f4:	230c      	movs	r3, #12
 800c1f6:	603b      	str	r3, [r7, #0]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	e0d1      	b.n	800c3a2 <_svfiprintf_r+0x1d2>
 800c1fe:	2340      	movs	r3, #64	; 0x40
 800c200:	616b      	str	r3, [r5, #20]
 800c202:	2300      	movs	r3, #0
 800c204:	9309      	str	r3, [sp, #36]	; 0x24
 800c206:	2320      	movs	r3, #32
 800c208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c210:	2330      	movs	r3, #48	; 0x30
 800c212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3bc <_svfiprintf_r+0x1ec>
 800c216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c21a:	f04f 0901 	mov.w	r9, #1
 800c21e:	4623      	mov	r3, r4
 800c220:	469a      	mov	sl, r3
 800c222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c226:	b10a      	cbz	r2, 800c22c <_svfiprintf_r+0x5c>
 800c228:	2a25      	cmp	r2, #37	; 0x25
 800c22a:	d1f9      	bne.n	800c220 <_svfiprintf_r+0x50>
 800c22c:	ebba 0b04 	subs.w	fp, sl, r4
 800c230:	d00b      	beq.n	800c24a <_svfiprintf_r+0x7a>
 800c232:	465b      	mov	r3, fp
 800c234:	4622      	mov	r2, r4
 800c236:	4629      	mov	r1, r5
 800c238:	4638      	mov	r0, r7
 800c23a:	f7ff ff6d 	bl	800c118 <__ssputs_r>
 800c23e:	3001      	adds	r0, #1
 800c240:	f000 80aa 	beq.w	800c398 <_svfiprintf_r+0x1c8>
 800c244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c246:	445a      	add	r2, fp
 800c248:	9209      	str	r2, [sp, #36]	; 0x24
 800c24a:	f89a 3000 	ldrb.w	r3, [sl]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 80a2 	beq.w	800c398 <_svfiprintf_r+0x1c8>
 800c254:	2300      	movs	r3, #0
 800c256:	f04f 32ff 	mov.w	r2, #4294967295
 800c25a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c25e:	f10a 0a01 	add.w	sl, sl, #1
 800c262:	9304      	str	r3, [sp, #16]
 800c264:	9307      	str	r3, [sp, #28]
 800c266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c26a:	931a      	str	r3, [sp, #104]	; 0x68
 800c26c:	4654      	mov	r4, sl
 800c26e:	2205      	movs	r2, #5
 800c270:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c274:	4851      	ldr	r0, [pc, #324]	; (800c3bc <_svfiprintf_r+0x1ec>)
 800c276:	f7f3 ffb3 	bl	80001e0 <memchr>
 800c27a:	9a04      	ldr	r2, [sp, #16]
 800c27c:	b9d8      	cbnz	r0, 800c2b6 <_svfiprintf_r+0xe6>
 800c27e:	06d0      	lsls	r0, r2, #27
 800c280:	bf44      	itt	mi
 800c282:	2320      	movmi	r3, #32
 800c284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c288:	0711      	lsls	r1, r2, #28
 800c28a:	bf44      	itt	mi
 800c28c:	232b      	movmi	r3, #43	; 0x2b
 800c28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c292:	f89a 3000 	ldrb.w	r3, [sl]
 800c296:	2b2a      	cmp	r3, #42	; 0x2a
 800c298:	d015      	beq.n	800c2c6 <_svfiprintf_r+0xf6>
 800c29a:	9a07      	ldr	r2, [sp, #28]
 800c29c:	4654      	mov	r4, sl
 800c29e:	2000      	movs	r0, #0
 800c2a0:	f04f 0c0a 	mov.w	ip, #10
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2aa:	3b30      	subs	r3, #48	; 0x30
 800c2ac:	2b09      	cmp	r3, #9
 800c2ae:	d94e      	bls.n	800c34e <_svfiprintf_r+0x17e>
 800c2b0:	b1b0      	cbz	r0, 800c2e0 <_svfiprintf_r+0x110>
 800c2b2:	9207      	str	r2, [sp, #28]
 800c2b4:	e014      	b.n	800c2e0 <_svfiprintf_r+0x110>
 800c2b6:	eba0 0308 	sub.w	r3, r0, r8
 800c2ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	46a2      	mov	sl, r4
 800c2c4:	e7d2      	b.n	800c26c <_svfiprintf_r+0x9c>
 800c2c6:	9b03      	ldr	r3, [sp, #12]
 800c2c8:	1d19      	adds	r1, r3, #4
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	9103      	str	r1, [sp, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	bfbb      	ittet	lt
 800c2d2:	425b      	neglt	r3, r3
 800c2d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c2d8:	9307      	strge	r3, [sp, #28]
 800c2da:	9307      	strlt	r3, [sp, #28]
 800c2dc:	bfb8      	it	lt
 800c2de:	9204      	strlt	r2, [sp, #16]
 800c2e0:	7823      	ldrb	r3, [r4, #0]
 800c2e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c2e4:	d10c      	bne.n	800c300 <_svfiprintf_r+0x130>
 800c2e6:	7863      	ldrb	r3, [r4, #1]
 800c2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ea:	d135      	bne.n	800c358 <_svfiprintf_r+0x188>
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	1d1a      	adds	r2, r3, #4
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	9203      	str	r2, [sp, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	bfb8      	it	lt
 800c2f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2fc:	3402      	adds	r4, #2
 800c2fe:	9305      	str	r3, [sp, #20]
 800c300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c3cc <_svfiprintf_r+0x1fc>
 800c304:	7821      	ldrb	r1, [r4, #0]
 800c306:	2203      	movs	r2, #3
 800c308:	4650      	mov	r0, sl
 800c30a:	f7f3 ff69 	bl	80001e0 <memchr>
 800c30e:	b140      	cbz	r0, 800c322 <_svfiprintf_r+0x152>
 800c310:	2340      	movs	r3, #64	; 0x40
 800c312:	eba0 000a 	sub.w	r0, r0, sl
 800c316:	fa03 f000 	lsl.w	r0, r3, r0
 800c31a:	9b04      	ldr	r3, [sp, #16]
 800c31c:	4303      	orrs	r3, r0
 800c31e:	3401      	adds	r4, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c326:	4826      	ldr	r0, [pc, #152]	; (800c3c0 <_svfiprintf_r+0x1f0>)
 800c328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c32c:	2206      	movs	r2, #6
 800c32e:	f7f3 ff57 	bl	80001e0 <memchr>
 800c332:	2800      	cmp	r0, #0
 800c334:	d038      	beq.n	800c3a8 <_svfiprintf_r+0x1d8>
 800c336:	4b23      	ldr	r3, [pc, #140]	; (800c3c4 <_svfiprintf_r+0x1f4>)
 800c338:	bb1b      	cbnz	r3, 800c382 <_svfiprintf_r+0x1b2>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	3307      	adds	r3, #7
 800c33e:	f023 0307 	bic.w	r3, r3, #7
 800c342:	3308      	adds	r3, #8
 800c344:	9303      	str	r3, [sp, #12]
 800c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c348:	4433      	add	r3, r6
 800c34a:	9309      	str	r3, [sp, #36]	; 0x24
 800c34c:	e767      	b.n	800c21e <_svfiprintf_r+0x4e>
 800c34e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c352:	460c      	mov	r4, r1
 800c354:	2001      	movs	r0, #1
 800c356:	e7a5      	b.n	800c2a4 <_svfiprintf_r+0xd4>
 800c358:	2300      	movs	r3, #0
 800c35a:	3401      	adds	r4, #1
 800c35c:	9305      	str	r3, [sp, #20]
 800c35e:	4619      	mov	r1, r3
 800c360:	f04f 0c0a 	mov.w	ip, #10
 800c364:	4620      	mov	r0, r4
 800c366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c36a:	3a30      	subs	r2, #48	; 0x30
 800c36c:	2a09      	cmp	r2, #9
 800c36e:	d903      	bls.n	800c378 <_svfiprintf_r+0x1a8>
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0c5      	beq.n	800c300 <_svfiprintf_r+0x130>
 800c374:	9105      	str	r1, [sp, #20]
 800c376:	e7c3      	b.n	800c300 <_svfiprintf_r+0x130>
 800c378:	fb0c 2101 	mla	r1, ip, r1, r2
 800c37c:	4604      	mov	r4, r0
 800c37e:	2301      	movs	r3, #1
 800c380:	e7f0      	b.n	800c364 <_svfiprintf_r+0x194>
 800c382:	ab03      	add	r3, sp, #12
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	462a      	mov	r2, r5
 800c388:	4b0f      	ldr	r3, [pc, #60]	; (800c3c8 <_svfiprintf_r+0x1f8>)
 800c38a:	a904      	add	r1, sp, #16
 800c38c:	4638      	mov	r0, r7
 800c38e:	f7fd ffc3 	bl	800a318 <_printf_float>
 800c392:	1c42      	adds	r2, r0, #1
 800c394:	4606      	mov	r6, r0
 800c396:	d1d6      	bne.n	800c346 <_svfiprintf_r+0x176>
 800c398:	89ab      	ldrh	r3, [r5, #12]
 800c39a:	065b      	lsls	r3, r3, #25
 800c39c:	f53f af2c 	bmi.w	800c1f8 <_svfiprintf_r+0x28>
 800c3a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3a2:	b01d      	add	sp, #116	; 0x74
 800c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a8:	ab03      	add	r3, sp, #12
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	462a      	mov	r2, r5
 800c3ae:	4b06      	ldr	r3, [pc, #24]	; (800c3c8 <_svfiprintf_r+0x1f8>)
 800c3b0:	a904      	add	r1, sp, #16
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f7fe fa54 	bl	800a860 <_printf_i>
 800c3b8:	e7eb      	b.n	800c392 <_svfiprintf_r+0x1c2>
 800c3ba:	bf00      	nop
 800c3bc:	08010174 	.word	0x08010174
 800c3c0:	0801017e 	.word	0x0801017e
 800c3c4:	0800a319 	.word	0x0800a319
 800c3c8:	0800c119 	.word	0x0800c119
 800c3cc:	0801017a 	.word	0x0801017a

0800c3d0 <_sbrk_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d06      	ldr	r5, [pc, #24]	; (800c3ec <_sbrk_r+0x1c>)
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	4608      	mov	r0, r1
 800c3da:	602b      	str	r3, [r5, #0]
 800c3dc:	f7f6 fdd0 	bl	8002f80 <_sbrk>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_sbrk_r+0x1a>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_sbrk_r+0x1a>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	20000b48 	.word	0x20000b48

0800c3f0 <__assert_func>:
 800c3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3f2:	4614      	mov	r4, r2
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	4b09      	ldr	r3, [pc, #36]	; (800c41c <__assert_func+0x2c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	68d8      	ldr	r0, [r3, #12]
 800c3fe:	b14c      	cbz	r4, 800c414 <__assert_func+0x24>
 800c400:	4b07      	ldr	r3, [pc, #28]	; (800c420 <__assert_func+0x30>)
 800c402:	9100      	str	r1, [sp, #0]
 800c404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c408:	4906      	ldr	r1, [pc, #24]	; (800c424 <__assert_func+0x34>)
 800c40a:	462b      	mov	r3, r5
 800c40c:	f000 f80e 	bl	800c42c <fiprintf>
 800c410:	f000 faac 	bl	800c96c <abort>
 800c414:	4b04      	ldr	r3, [pc, #16]	; (800c428 <__assert_func+0x38>)
 800c416:	461c      	mov	r4, r3
 800c418:	e7f3      	b.n	800c402 <__assert_func+0x12>
 800c41a:	bf00      	nop
 800c41c:	2000018c 	.word	0x2000018c
 800c420:	08010185 	.word	0x08010185
 800c424:	08010192 	.word	0x08010192
 800c428:	080101c0 	.word	0x080101c0

0800c42c <fiprintf>:
 800c42c:	b40e      	push	{r1, r2, r3}
 800c42e:	b503      	push	{r0, r1, lr}
 800c430:	4601      	mov	r1, r0
 800c432:	ab03      	add	r3, sp, #12
 800c434:	4805      	ldr	r0, [pc, #20]	; (800c44c <fiprintf+0x20>)
 800c436:	f853 2b04 	ldr.w	r2, [r3], #4
 800c43a:	6800      	ldr	r0, [r0, #0]
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	f000 f897 	bl	800c570 <_vfiprintf_r>
 800c442:	b002      	add	sp, #8
 800c444:	f85d eb04 	ldr.w	lr, [sp], #4
 800c448:	b003      	add	sp, #12
 800c44a:	4770      	bx	lr
 800c44c:	2000018c 	.word	0x2000018c

0800c450 <__ascii_mbtowc>:
 800c450:	b082      	sub	sp, #8
 800c452:	b901      	cbnz	r1, 800c456 <__ascii_mbtowc+0x6>
 800c454:	a901      	add	r1, sp, #4
 800c456:	b142      	cbz	r2, 800c46a <__ascii_mbtowc+0x1a>
 800c458:	b14b      	cbz	r3, 800c46e <__ascii_mbtowc+0x1e>
 800c45a:	7813      	ldrb	r3, [r2, #0]
 800c45c:	600b      	str	r3, [r1, #0]
 800c45e:	7812      	ldrb	r2, [r2, #0]
 800c460:	1e10      	subs	r0, r2, #0
 800c462:	bf18      	it	ne
 800c464:	2001      	movne	r0, #1
 800c466:	b002      	add	sp, #8
 800c468:	4770      	bx	lr
 800c46a:	4610      	mov	r0, r2
 800c46c:	e7fb      	b.n	800c466 <__ascii_mbtowc+0x16>
 800c46e:	f06f 0001 	mvn.w	r0, #1
 800c472:	e7f8      	b.n	800c466 <__ascii_mbtowc+0x16>

0800c474 <memmove>:
 800c474:	4288      	cmp	r0, r1
 800c476:	b510      	push	{r4, lr}
 800c478:	eb01 0402 	add.w	r4, r1, r2
 800c47c:	d902      	bls.n	800c484 <memmove+0x10>
 800c47e:	4284      	cmp	r4, r0
 800c480:	4623      	mov	r3, r4
 800c482:	d807      	bhi.n	800c494 <memmove+0x20>
 800c484:	1e43      	subs	r3, r0, #1
 800c486:	42a1      	cmp	r1, r4
 800c488:	d008      	beq.n	800c49c <memmove+0x28>
 800c48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c492:	e7f8      	b.n	800c486 <memmove+0x12>
 800c494:	4402      	add	r2, r0
 800c496:	4601      	mov	r1, r0
 800c498:	428a      	cmp	r2, r1
 800c49a:	d100      	bne.n	800c49e <memmove+0x2a>
 800c49c:	bd10      	pop	{r4, pc}
 800c49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4a6:	e7f7      	b.n	800c498 <memmove+0x24>

0800c4a8 <__malloc_lock>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__malloc_lock+0x8>)
 800c4aa:	f000 bc1f 	b.w	800ccec <__retarget_lock_acquire_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	20000b4c 	.word	0x20000b4c

0800c4b4 <__malloc_unlock>:
 800c4b4:	4801      	ldr	r0, [pc, #4]	; (800c4bc <__malloc_unlock+0x8>)
 800c4b6:	f000 bc1a 	b.w	800ccee <__retarget_lock_release_recursive>
 800c4ba:	bf00      	nop
 800c4bc:	20000b4c 	.word	0x20000b4c

0800c4c0 <_realloc_r>:
 800c4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c4:	4680      	mov	r8, r0
 800c4c6:	4614      	mov	r4, r2
 800c4c8:	460e      	mov	r6, r1
 800c4ca:	b921      	cbnz	r1, 800c4d6 <_realloc_r+0x16>
 800c4cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d0:	4611      	mov	r1, r2
 800c4d2:	f7ff bdad 	b.w	800c030 <_malloc_r>
 800c4d6:	b92a      	cbnz	r2, 800c4e4 <_realloc_r+0x24>
 800c4d8:	f7ff fd3e 	bl	800bf58 <_free_r>
 800c4dc:	4625      	mov	r5, r4
 800c4de:	4628      	mov	r0, r5
 800c4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e4:	f000 fc6a 	bl	800cdbc <_malloc_usable_size_r>
 800c4e8:	4284      	cmp	r4, r0
 800c4ea:	4607      	mov	r7, r0
 800c4ec:	d802      	bhi.n	800c4f4 <_realloc_r+0x34>
 800c4ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4f2:	d812      	bhi.n	800c51a <_realloc_r+0x5a>
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	4640      	mov	r0, r8
 800c4f8:	f7ff fd9a 	bl	800c030 <_malloc_r>
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d0ed      	beq.n	800c4de <_realloc_r+0x1e>
 800c502:	42bc      	cmp	r4, r7
 800c504:	4622      	mov	r2, r4
 800c506:	4631      	mov	r1, r6
 800c508:	bf28      	it	cs
 800c50a:	463a      	movcs	r2, r7
 800c50c:	f7fd fe4e 	bl	800a1ac <memcpy>
 800c510:	4631      	mov	r1, r6
 800c512:	4640      	mov	r0, r8
 800c514:	f7ff fd20 	bl	800bf58 <_free_r>
 800c518:	e7e1      	b.n	800c4de <_realloc_r+0x1e>
 800c51a:	4635      	mov	r5, r6
 800c51c:	e7df      	b.n	800c4de <_realloc_r+0x1e>

0800c51e <__sfputc_r>:
 800c51e:	6893      	ldr	r3, [r2, #8]
 800c520:	3b01      	subs	r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	b410      	push	{r4}
 800c526:	6093      	str	r3, [r2, #8]
 800c528:	da08      	bge.n	800c53c <__sfputc_r+0x1e>
 800c52a:	6994      	ldr	r4, [r2, #24]
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	db01      	blt.n	800c534 <__sfputc_r+0x16>
 800c530:	290a      	cmp	r1, #10
 800c532:	d103      	bne.n	800c53c <__sfputc_r+0x1e>
 800c534:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c538:	f000 b94a 	b.w	800c7d0 <__swbuf_r>
 800c53c:	6813      	ldr	r3, [r2, #0]
 800c53e:	1c58      	adds	r0, r3, #1
 800c540:	6010      	str	r0, [r2, #0]
 800c542:	7019      	strb	r1, [r3, #0]
 800c544:	4608      	mov	r0, r1
 800c546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <__sfputs_r>:
 800c54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	4614      	mov	r4, r2
 800c554:	18d5      	adds	r5, r2, r3
 800c556:	42ac      	cmp	r4, r5
 800c558:	d101      	bne.n	800c55e <__sfputs_r+0x12>
 800c55a:	2000      	movs	r0, #0
 800c55c:	e007      	b.n	800c56e <__sfputs_r+0x22>
 800c55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c562:	463a      	mov	r2, r7
 800c564:	4630      	mov	r0, r6
 800c566:	f7ff ffda 	bl	800c51e <__sfputc_r>
 800c56a:	1c43      	adds	r3, r0, #1
 800c56c:	d1f3      	bne.n	800c556 <__sfputs_r+0xa>
 800c56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c570 <_vfiprintf_r>:
 800c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	460d      	mov	r5, r1
 800c576:	b09d      	sub	sp, #116	; 0x74
 800c578:	4614      	mov	r4, r2
 800c57a:	4698      	mov	r8, r3
 800c57c:	4606      	mov	r6, r0
 800c57e:	b118      	cbz	r0, 800c588 <_vfiprintf_r+0x18>
 800c580:	6983      	ldr	r3, [r0, #24]
 800c582:	b90b      	cbnz	r3, 800c588 <_vfiprintf_r+0x18>
 800c584:	f000 fb14 	bl	800cbb0 <__sinit>
 800c588:	4b89      	ldr	r3, [pc, #548]	; (800c7b0 <_vfiprintf_r+0x240>)
 800c58a:	429d      	cmp	r5, r3
 800c58c:	d11b      	bne.n	800c5c6 <_vfiprintf_r+0x56>
 800c58e:	6875      	ldr	r5, [r6, #4]
 800c590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c592:	07d9      	lsls	r1, r3, #31
 800c594:	d405      	bmi.n	800c5a2 <_vfiprintf_r+0x32>
 800c596:	89ab      	ldrh	r3, [r5, #12]
 800c598:	059a      	lsls	r2, r3, #22
 800c59a:	d402      	bmi.n	800c5a2 <_vfiprintf_r+0x32>
 800c59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c59e:	f000 fba5 	bl	800ccec <__retarget_lock_acquire_recursive>
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	071b      	lsls	r3, r3, #28
 800c5a6:	d501      	bpl.n	800c5ac <_vfiprintf_r+0x3c>
 800c5a8:	692b      	ldr	r3, [r5, #16]
 800c5aa:	b9eb      	cbnz	r3, 800c5e8 <_vfiprintf_r+0x78>
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f000 f96e 	bl	800c890 <__swsetup_r>
 800c5b4:	b1c0      	cbz	r0, 800c5e8 <_vfiprintf_r+0x78>
 800c5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5b8:	07dc      	lsls	r4, r3, #31
 800c5ba:	d50e      	bpl.n	800c5da <_vfiprintf_r+0x6a>
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	b01d      	add	sp, #116	; 0x74
 800c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c6:	4b7b      	ldr	r3, [pc, #492]	; (800c7b4 <_vfiprintf_r+0x244>)
 800c5c8:	429d      	cmp	r5, r3
 800c5ca:	d101      	bne.n	800c5d0 <_vfiprintf_r+0x60>
 800c5cc:	68b5      	ldr	r5, [r6, #8]
 800c5ce:	e7df      	b.n	800c590 <_vfiprintf_r+0x20>
 800c5d0:	4b79      	ldr	r3, [pc, #484]	; (800c7b8 <_vfiprintf_r+0x248>)
 800c5d2:	429d      	cmp	r5, r3
 800c5d4:	bf08      	it	eq
 800c5d6:	68f5      	ldreq	r5, [r6, #12]
 800c5d8:	e7da      	b.n	800c590 <_vfiprintf_r+0x20>
 800c5da:	89ab      	ldrh	r3, [r5, #12]
 800c5dc:	0598      	lsls	r0, r3, #22
 800c5de:	d4ed      	bmi.n	800c5bc <_vfiprintf_r+0x4c>
 800c5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5e2:	f000 fb84 	bl	800ccee <__retarget_lock_release_recursive>
 800c5e6:	e7e9      	b.n	800c5bc <_vfiprintf_r+0x4c>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ec:	2320      	movs	r3, #32
 800c5ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5f6:	2330      	movs	r3, #48	; 0x30
 800c5f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c7bc <_vfiprintf_r+0x24c>
 800c5fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c600:	f04f 0901 	mov.w	r9, #1
 800c604:	4623      	mov	r3, r4
 800c606:	469a      	mov	sl, r3
 800c608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c60c:	b10a      	cbz	r2, 800c612 <_vfiprintf_r+0xa2>
 800c60e:	2a25      	cmp	r2, #37	; 0x25
 800c610:	d1f9      	bne.n	800c606 <_vfiprintf_r+0x96>
 800c612:	ebba 0b04 	subs.w	fp, sl, r4
 800c616:	d00b      	beq.n	800c630 <_vfiprintf_r+0xc0>
 800c618:	465b      	mov	r3, fp
 800c61a:	4622      	mov	r2, r4
 800c61c:	4629      	mov	r1, r5
 800c61e:	4630      	mov	r0, r6
 800c620:	f7ff ff94 	bl	800c54c <__sfputs_r>
 800c624:	3001      	adds	r0, #1
 800c626:	f000 80aa 	beq.w	800c77e <_vfiprintf_r+0x20e>
 800c62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c62c:	445a      	add	r2, fp
 800c62e:	9209      	str	r2, [sp, #36]	; 0x24
 800c630:	f89a 3000 	ldrb.w	r3, [sl]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 80a2 	beq.w	800c77e <_vfiprintf_r+0x20e>
 800c63a:	2300      	movs	r3, #0
 800c63c:	f04f 32ff 	mov.w	r2, #4294967295
 800c640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c644:	f10a 0a01 	add.w	sl, sl, #1
 800c648:	9304      	str	r3, [sp, #16]
 800c64a:	9307      	str	r3, [sp, #28]
 800c64c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c650:	931a      	str	r3, [sp, #104]	; 0x68
 800c652:	4654      	mov	r4, sl
 800c654:	2205      	movs	r2, #5
 800c656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65a:	4858      	ldr	r0, [pc, #352]	; (800c7bc <_vfiprintf_r+0x24c>)
 800c65c:	f7f3 fdc0 	bl	80001e0 <memchr>
 800c660:	9a04      	ldr	r2, [sp, #16]
 800c662:	b9d8      	cbnz	r0, 800c69c <_vfiprintf_r+0x12c>
 800c664:	06d1      	lsls	r1, r2, #27
 800c666:	bf44      	itt	mi
 800c668:	2320      	movmi	r3, #32
 800c66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c66e:	0713      	lsls	r3, r2, #28
 800c670:	bf44      	itt	mi
 800c672:	232b      	movmi	r3, #43	; 0x2b
 800c674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c678:	f89a 3000 	ldrb.w	r3, [sl]
 800c67c:	2b2a      	cmp	r3, #42	; 0x2a
 800c67e:	d015      	beq.n	800c6ac <_vfiprintf_r+0x13c>
 800c680:	9a07      	ldr	r2, [sp, #28]
 800c682:	4654      	mov	r4, sl
 800c684:	2000      	movs	r0, #0
 800c686:	f04f 0c0a 	mov.w	ip, #10
 800c68a:	4621      	mov	r1, r4
 800c68c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c690:	3b30      	subs	r3, #48	; 0x30
 800c692:	2b09      	cmp	r3, #9
 800c694:	d94e      	bls.n	800c734 <_vfiprintf_r+0x1c4>
 800c696:	b1b0      	cbz	r0, 800c6c6 <_vfiprintf_r+0x156>
 800c698:	9207      	str	r2, [sp, #28]
 800c69a:	e014      	b.n	800c6c6 <_vfiprintf_r+0x156>
 800c69c:	eba0 0308 	sub.w	r3, r0, r8
 800c6a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	9304      	str	r3, [sp, #16]
 800c6a8:	46a2      	mov	sl, r4
 800c6aa:	e7d2      	b.n	800c652 <_vfiprintf_r+0xe2>
 800c6ac:	9b03      	ldr	r3, [sp, #12]
 800c6ae:	1d19      	adds	r1, r3, #4
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	9103      	str	r1, [sp, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	bfbb      	ittet	lt
 800c6b8:	425b      	neglt	r3, r3
 800c6ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c6be:	9307      	strge	r3, [sp, #28]
 800c6c0:	9307      	strlt	r3, [sp, #28]
 800c6c2:	bfb8      	it	lt
 800c6c4:	9204      	strlt	r2, [sp, #16]
 800c6c6:	7823      	ldrb	r3, [r4, #0]
 800c6c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ca:	d10c      	bne.n	800c6e6 <_vfiprintf_r+0x176>
 800c6cc:	7863      	ldrb	r3, [r4, #1]
 800c6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d0:	d135      	bne.n	800c73e <_vfiprintf_r+0x1ce>
 800c6d2:	9b03      	ldr	r3, [sp, #12]
 800c6d4:	1d1a      	adds	r2, r3, #4
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	9203      	str	r2, [sp, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bfb8      	it	lt
 800c6de:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6e2:	3402      	adds	r4, #2
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c7cc <_vfiprintf_r+0x25c>
 800c6ea:	7821      	ldrb	r1, [r4, #0]
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	4650      	mov	r0, sl
 800c6f0:	f7f3 fd76 	bl	80001e0 <memchr>
 800c6f4:	b140      	cbz	r0, 800c708 <_vfiprintf_r+0x198>
 800c6f6:	2340      	movs	r3, #64	; 0x40
 800c6f8:	eba0 000a 	sub.w	r0, r0, sl
 800c6fc:	fa03 f000 	lsl.w	r0, r3, r0
 800c700:	9b04      	ldr	r3, [sp, #16]
 800c702:	4303      	orrs	r3, r0
 800c704:	3401      	adds	r4, #1
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70c:	482c      	ldr	r0, [pc, #176]	; (800c7c0 <_vfiprintf_r+0x250>)
 800c70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c712:	2206      	movs	r2, #6
 800c714:	f7f3 fd64 	bl	80001e0 <memchr>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d03f      	beq.n	800c79c <_vfiprintf_r+0x22c>
 800c71c:	4b29      	ldr	r3, [pc, #164]	; (800c7c4 <_vfiprintf_r+0x254>)
 800c71e:	bb1b      	cbnz	r3, 800c768 <_vfiprintf_r+0x1f8>
 800c720:	9b03      	ldr	r3, [sp, #12]
 800c722:	3307      	adds	r3, #7
 800c724:	f023 0307 	bic.w	r3, r3, #7
 800c728:	3308      	adds	r3, #8
 800c72a:	9303      	str	r3, [sp, #12]
 800c72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c72e:	443b      	add	r3, r7
 800c730:	9309      	str	r3, [sp, #36]	; 0x24
 800c732:	e767      	b.n	800c604 <_vfiprintf_r+0x94>
 800c734:	fb0c 3202 	mla	r2, ip, r2, r3
 800c738:	460c      	mov	r4, r1
 800c73a:	2001      	movs	r0, #1
 800c73c:	e7a5      	b.n	800c68a <_vfiprintf_r+0x11a>
 800c73e:	2300      	movs	r3, #0
 800c740:	3401      	adds	r4, #1
 800c742:	9305      	str	r3, [sp, #20]
 800c744:	4619      	mov	r1, r3
 800c746:	f04f 0c0a 	mov.w	ip, #10
 800c74a:	4620      	mov	r0, r4
 800c74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c750:	3a30      	subs	r2, #48	; 0x30
 800c752:	2a09      	cmp	r2, #9
 800c754:	d903      	bls.n	800c75e <_vfiprintf_r+0x1ee>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0c5      	beq.n	800c6e6 <_vfiprintf_r+0x176>
 800c75a:	9105      	str	r1, [sp, #20]
 800c75c:	e7c3      	b.n	800c6e6 <_vfiprintf_r+0x176>
 800c75e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c762:	4604      	mov	r4, r0
 800c764:	2301      	movs	r3, #1
 800c766:	e7f0      	b.n	800c74a <_vfiprintf_r+0x1da>
 800c768:	ab03      	add	r3, sp, #12
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	462a      	mov	r2, r5
 800c76e:	4b16      	ldr	r3, [pc, #88]	; (800c7c8 <_vfiprintf_r+0x258>)
 800c770:	a904      	add	r1, sp, #16
 800c772:	4630      	mov	r0, r6
 800c774:	f7fd fdd0 	bl	800a318 <_printf_float>
 800c778:	4607      	mov	r7, r0
 800c77a:	1c78      	adds	r0, r7, #1
 800c77c:	d1d6      	bne.n	800c72c <_vfiprintf_r+0x1bc>
 800c77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c780:	07d9      	lsls	r1, r3, #31
 800c782:	d405      	bmi.n	800c790 <_vfiprintf_r+0x220>
 800c784:	89ab      	ldrh	r3, [r5, #12]
 800c786:	059a      	lsls	r2, r3, #22
 800c788:	d402      	bmi.n	800c790 <_vfiprintf_r+0x220>
 800c78a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c78c:	f000 faaf 	bl	800ccee <__retarget_lock_release_recursive>
 800c790:	89ab      	ldrh	r3, [r5, #12]
 800c792:	065b      	lsls	r3, r3, #25
 800c794:	f53f af12 	bmi.w	800c5bc <_vfiprintf_r+0x4c>
 800c798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c79a:	e711      	b.n	800c5c0 <_vfiprintf_r+0x50>
 800c79c:	ab03      	add	r3, sp, #12
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	462a      	mov	r2, r5
 800c7a2:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <_vfiprintf_r+0x258>)
 800c7a4:	a904      	add	r1, sp, #16
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f7fe f85a 	bl	800a860 <_printf_i>
 800c7ac:	e7e4      	b.n	800c778 <_vfiprintf_r+0x208>
 800c7ae:	bf00      	nop
 800c7b0:	080102ec 	.word	0x080102ec
 800c7b4:	0801030c 	.word	0x0801030c
 800c7b8:	080102cc 	.word	0x080102cc
 800c7bc:	08010174 	.word	0x08010174
 800c7c0:	0801017e 	.word	0x0801017e
 800c7c4:	0800a319 	.word	0x0800a319
 800c7c8:	0800c54d 	.word	0x0800c54d
 800c7cc:	0801017a 	.word	0x0801017a

0800c7d0 <__swbuf_r>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	460e      	mov	r6, r1
 800c7d4:	4614      	mov	r4, r2
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	b118      	cbz	r0, 800c7e2 <__swbuf_r+0x12>
 800c7da:	6983      	ldr	r3, [r0, #24]
 800c7dc:	b90b      	cbnz	r3, 800c7e2 <__swbuf_r+0x12>
 800c7de:	f000 f9e7 	bl	800cbb0 <__sinit>
 800c7e2:	4b21      	ldr	r3, [pc, #132]	; (800c868 <__swbuf_r+0x98>)
 800c7e4:	429c      	cmp	r4, r3
 800c7e6:	d12b      	bne.n	800c840 <__swbuf_r+0x70>
 800c7e8:	686c      	ldr	r4, [r5, #4]
 800c7ea:	69a3      	ldr	r3, [r4, #24]
 800c7ec:	60a3      	str	r3, [r4, #8]
 800c7ee:	89a3      	ldrh	r3, [r4, #12]
 800c7f0:	071a      	lsls	r2, r3, #28
 800c7f2:	d52f      	bpl.n	800c854 <__swbuf_r+0x84>
 800c7f4:	6923      	ldr	r3, [r4, #16]
 800c7f6:	b36b      	cbz	r3, 800c854 <__swbuf_r+0x84>
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	6820      	ldr	r0, [r4, #0]
 800c7fc:	1ac0      	subs	r0, r0, r3
 800c7fe:	6963      	ldr	r3, [r4, #20]
 800c800:	b2f6      	uxtb	r6, r6
 800c802:	4283      	cmp	r3, r0
 800c804:	4637      	mov	r7, r6
 800c806:	dc04      	bgt.n	800c812 <__swbuf_r+0x42>
 800c808:	4621      	mov	r1, r4
 800c80a:	4628      	mov	r0, r5
 800c80c:	f000 f93c 	bl	800ca88 <_fflush_r>
 800c810:	bb30      	cbnz	r0, 800c860 <__swbuf_r+0x90>
 800c812:	68a3      	ldr	r3, [r4, #8]
 800c814:	3b01      	subs	r3, #1
 800c816:	60a3      	str	r3, [r4, #8]
 800c818:	6823      	ldr	r3, [r4, #0]
 800c81a:	1c5a      	adds	r2, r3, #1
 800c81c:	6022      	str	r2, [r4, #0]
 800c81e:	701e      	strb	r6, [r3, #0]
 800c820:	6963      	ldr	r3, [r4, #20]
 800c822:	3001      	adds	r0, #1
 800c824:	4283      	cmp	r3, r0
 800c826:	d004      	beq.n	800c832 <__swbuf_r+0x62>
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	07db      	lsls	r3, r3, #31
 800c82c:	d506      	bpl.n	800c83c <__swbuf_r+0x6c>
 800c82e:	2e0a      	cmp	r6, #10
 800c830:	d104      	bne.n	800c83c <__swbuf_r+0x6c>
 800c832:	4621      	mov	r1, r4
 800c834:	4628      	mov	r0, r5
 800c836:	f000 f927 	bl	800ca88 <_fflush_r>
 800c83a:	b988      	cbnz	r0, 800c860 <__swbuf_r+0x90>
 800c83c:	4638      	mov	r0, r7
 800c83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c840:	4b0a      	ldr	r3, [pc, #40]	; (800c86c <__swbuf_r+0x9c>)
 800c842:	429c      	cmp	r4, r3
 800c844:	d101      	bne.n	800c84a <__swbuf_r+0x7a>
 800c846:	68ac      	ldr	r4, [r5, #8]
 800c848:	e7cf      	b.n	800c7ea <__swbuf_r+0x1a>
 800c84a:	4b09      	ldr	r3, [pc, #36]	; (800c870 <__swbuf_r+0xa0>)
 800c84c:	429c      	cmp	r4, r3
 800c84e:	bf08      	it	eq
 800c850:	68ec      	ldreq	r4, [r5, #12]
 800c852:	e7ca      	b.n	800c7ea <__swbuf_r+0x1a>
 800c854:	4621      	mov	r1, r4
 800c856:	4628      	mov	r0, r5
 800c858:	f000 f81a 	bl	800c890 <__swsetup_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d0cb      	beq.n	800c7f8 <__swbuf_r+0x28>
 800c860:	f04f 37ff 	mov.w	r7, #4294967295
 800c864:	e7ea      	b.n	800c83c <__swbuf_r+0x6c>
 800c866:	bf00      	nop
 800c868:	080102ec 	.word	0x080102ec
 800c86c:	0801030c 	.word	0x0801030c
 800c870:	080102cc 	.word	0x080102cc

0800c874 <__ascii_wctomb>:
 800c874:	b149      	cbz	r1, 800c88a <__ascii_wctomb+0x16>
 800c876:	2aff      	cmp	r2, #255	; 0xff
 800c878:	bf85      	ittet	hi
 800c87a:	238a      	movhi	r3, #138	; 0x8a
 800c87c:	6003      	strhi	r3, [r0, #0]
 800c87e:	700a      	strbls	r2, [r1, #0]
 800c880:	f04f 30ff 	movhi.w	r0, #4294967295
 800c884:	bf98      	it	ls
 800c886:	2001      	movls	r0, #1
 800c888:	4770      	bx	lr
 800c88a:	4608      	mov	r0, r1
 800c88c:	4770      	bx	lr
	...

0800c890 <__swsetup_r>:
 800c890:	4b32      	ldr	r3, [pc, #200]	; (800c95c <__swsetup_r+0xcc>)
 800c892:	b570      	push	{r4, r5, r6, lr}
 800c894:	681d      	ldr	r5, [r3, #0]
 800c896:	4606      	mov	r6, r0
 800c898:	460c      	mov	r4, r1
 800c89a:	b125      	cbz	r5, 800c8a6 <__swsetup_r+0x16>
 800c89c:	69ab      	ldr	r3, [r5, #24]
 800c89e:	b913      	cbnz	r3, 800c8a6 <__swsetup_r+0x16>
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f000 f985 	bl	800cbb0 <__sinit>
 800c8a6:	4b2e      	ldr	r3, [pc, #184]	; (800c960 <__swsetup_r+0xd0>)
 800c8a8:	429c      	cmp	r4, r3
 800c8aa:	d10f      	bne.n	800c8cc <__swsetup_r+0x3c>
 800c8ac:	686c      	ldr	r4, [r5, #4]
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8b4:	0719      	lsls	r1, r3, #28
 800c8b6:	d42c      	bmi.n	800c912 <__swsetup_r+0x82>
 800c8b8:	06dd      	lsls	r5, r3, #27
 800c8ba:	d411      	bmi.n	800c8e0 <__swsetup_r+0x50>
 800c8bc:	2309      	movs	r3, #9
 800c8be:	6033      	str	r3, [r6, #0]
 800c8c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8c4:	81a3      	strh	r3, [r4, #12]
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ca:	e03e      	b.n	800c94a <__swsetup_r+0xba>
 800c8cc:	4b25      	ldr	r3, [pc, #148]	; (800c964 <__swsetup_r+0xd4>)
 800c8ce:	429c      	cmp	r4, r3
 800c8d0:	d101      	bne.n	800c8d6 <__swsetup_r+0x46>
 800c8d2:	68ac      	ldr	r4, [r5, #8]
 800c8d4:	e7eb      	b.n	800c8ae <__swsetup_r+0x1e>
 800c8d6:	4b24      	ldr	r3, [pc, #144]	; (800c968 <__swsetup_r+0xd8>)
 800c8d8:	429c      	cmp	r4, r3
 800c8da:	bf08      	it	eq
 800c8dc:	68ec      	ldreq	r4, [r5, #12]
 800c8de:	e7e6      	b.n	800c8ae <__swsetup_r+0x1e>
 800c8e0:	0758      	lsls	r0, r3, #29
 800c8e2:	d512      	bpl.n	800c90a <__swsetup_r+0x7a>
 800c8e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8e6:	b141      	cbz	r1, 800c8fa <__swsetup_r+0x6a>
 800c8e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8ec:	4299      	cmp	r1, r3
 800c8ee:	d002      	beq.n	800c8f6 <__swsetup_r+0x66>
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f7ff fb31 	bl	800bf58 <_free_r>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	6363      	str	r3, [r4, #52]	; 0x34
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	2300      	movs	r3, #0
 800c904:	6063      	str	r3, [r4, #4]
 800c906:	6923      	ldr	r3, [r4, #16]
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f043 0308 	orr.w	r3, r3, #8
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	6923      	ldr	r3, [r4, #16]
 800c914:	b94b      	cbnz	r3, 800c92a <__swsetup_r+0x9a>
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c91c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c920:	d003      	beq.n	800c92a <__swsetup_r+0x9a>
 800c922:	4621      	mov	r1, r4
 800c924:	4630      	mov	r0, r6
 800c926:	f000 fa09 	bl	800cd3c <__smakebuf_r>
 800c92a:	89a0      	ldrh	r0, [r4, #12]
 800c92c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c930:	f010 0301 	ands.w	r3, r0, #1
 800c934:	d00a      	beq.n	800c94c <__swsetup_r+0xbc>
 800c936:	2300      	movs	r3, #0
 800c938:	60a3      	str	r3, [r4, #8]
 800c93a:	6963      	ldr	r3, [r4, #20]
 800c93c:	425b      	negs	r3, r3
 800c93e:	61a3      	str	r3, [r4, #24]
 800c940:	6923      	ldr	r3, [r4, #16]
 800c942:	b943      	cbnz	r3, 800c956 <__swsetup_r+0xc6>
 800c944:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c948:	d1ba      	bne.n	800c8c0 <__swsetup_r+0x30>
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	0781      	lsls	r1, r0, #30
 800c94e:	bf58      	it	pl
 800c950:	6963      	ldrpl	r3, [r4, #20]
 800c952:	60a3      	str	r3, [r4, #8]
 800c954:	e7f4      	b.n	800c940 <__swsetup_r+0xb0>
 800c956:	2000      	movs	r0, #0
 800c958:	e7f7      	b.n	800c94a <__swsetup_r+0xba>
 800c95a:	bf00      	nop
 800c95c:	2000018c 	.word	0x2000018c
 800c960:	080102ec 	.word	0x080102ec
 800c964:	0801030c 	.word	0x0801030c
 800c968:	080102cc 	.word	0x080102cc

0800c96c <abort>:
 800c96c:	b508      	push	{r3, lr}
 800c96e:	2006      	movs	r0, #6
 800c970:	f000 fa54 	bl	800ce1c <raise>
 800c974:	2001      	movs	r0, #1
 800c976:	f7f6 fa8b 	bl	8002e90 <_exit>
	...

0800c97c <__sflush_r>:
 800c97c:	898a      	ldrh	r2, [r1, #12]
 800c97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c982:	4605      	mov	r5, r0
 800c984:	0710      	lsls	r0, r2, #28
 800c986:	460c      	mov	r4, r1
 800c988:	d458      	bmi.n	800ca3c <__sflush_r+0xc0>
 800c98a:	684b      	ldr	r3, [r1, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	dc05      	bgt.n	800c99c <__sflush_r+0x20>
 800c990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c992:	2b00      	cmp	r3, #0
 800c994:	dc02      	bgt.n	800c99c <__sflush_r+0x20>
 800c996:	2000      	movs	r0, #0
 800c998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c99c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c99e:	2e00      	cmp	r6, #0
 800c9a0:	d0f9      	beq.n	800c996 <__sflush_r+0x1a>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9a8:	682f      	ldr	r7, [r5, #0]
 800c9aa:	602b      	str	r3, [r5, #0]
 800c9ac:	d032      	beq.n	800ca14 <__sflush_r+0x98>
 800c9ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9b0:	89a3      	ldrh	r3, [r4, #12]
 800c9b2:	075a      	lsls	r2, r3, #29
 800c9b4:	d505      	bpl.n	800c9c2 <__sflush_r+0x46>
 800c9b6:	6863      	ldr	r3, [r4, #4]
 800c9b8:	1ac0      	subs	r0, r0, r3
 800c9ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9bc:	b10b      	cbz	r3, 800c9c2 <__sflush_r+0x46>
 800c9be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9c0:	1ac0      	subs	r0, r0, r3
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9c8:	6a21      	ldr	r1, [r4, #32]
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	47b0      	blx	r6
 800c9ce:	1c43      	adds	r3, r0, #1
 800c9d0:	89a3      	ldrh	r3, [r4, #12]
 800c9d2:	d106      	bne.n	800c9e2 <__sflush_r+0x66>
 800c9d4:	6829      	ldr	r1, [r5, #0]
 800c9d6:	291d      	cmp	r1, #29
 800c9d8:	d82c      	bhi.n	800ca34 <__sflush_r+0xb8>
 800c9da:	4a2a      	ldr	r2, [pc, #168]	; (800ca84 <__sflush_r+0x108>)
 800c9dc:	40ca      	lsrs	r2, r1
 800c9de:	07d6      	lsls	r6, r2, #31
 800c9e0:	d528      	bpl.n	800ca34 <__sflush_r+0xb8>
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	6062      	str	r2, [r4, #4]
 800c9e6:	04d9      	lsls	r1, r3, #19
 800c9e8:	6922      	ldr	r2, [r4, #16]
 800c9ea:	6022      	str	r2, [r4, #0]
 800c9ec:	d504      	bpl.n	800c9f8 <__sflush_r+0x7c>
 800c9ee:	1c42      	adds	r2, r0, #1
 800c9f0:	d101      	bne.n	800c9f6 <__sflush_r+0x7a>
 800c9f2:	682b      	ldr	r3, [r5, #0]
 800c9f4:	b903      	cbnz	r3, 800c9f8 <__sflush_r+0x7c>
 800c9f6:	6560      	str	r0, [r4, #84]	; 0x54
 800c9f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9fa:	602f      	str	r7, [r5, #0]
 800c9fc:	2900      	cmp	r1, #0
 800c9fe:	d0ca      	beq.n	800c996 <__sflush_r+0x1a>
 800ca00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca04:	4299      	cmp	r1, r3
 800ca06:	d002      	beq.n	800ca0e <__sflush_r+0x92>
 800ca08:	4628      	mov	r0, r5
 800ca0a:	f7ff faa5 	bl	800bf58 <_free_r>
 800ca0e:	2000      	movs	r0, #0
 800ca10:	6360      	str	r0, [r4, #52]	; 0x34
 800ca12:	e7c1      	b.n	800c998 <__sflush_r+0x1c>
 800ca14:	6a21      	ldr	r1, [r4, #32]
 800ca16:	2301      	movs	r3, #1
 800ca18:	4628      	mov	r0, r5
 800ca1a:	47b0      	blx	r6
 800ca1c:	1c41      	adds	r1, r0, #1
 800ca1e:	d1c7      	bne.n	800c9b0 <__sflush_r+0x34>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d0c4      	beq.n	800c9b0 <__sflush_r+0x34>
 800ca26:	2b1d      	cmp	r3, #29
 800ca28:	d001      	beq.n	800ca2e <__sflush_r+0xb2>
 800ca2a:	2b16      	cmp	r3, #22
 800ca2c:	d101      	bne.n	800ca32 <__sflush_r+0xb6>
 800ca2e:	602f      	str	r7, [r5, #0]
 800ca30:	e7b1      	b.n	800c996 <__sflush_r+0x1a>
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca38:	81a3      	strh	r3, [r4, #12]
 800ca3a:	e7ad      	b.n	800c998 <__sflush_r+0x1c>
 800ca3c:	690f      	ldr	r7, [r1, #16]
 800ca3e:	2f00      	cmp	r7, #0
 800ca40:	d0a9      	beq.n	800c996 <__sflush_r+0x1a>
 800ca42:	0793      	lsls	r3, r2, #30
 800ca44:	680e      	ldr	r6, [r1, #0]
 800ca46:	bf08      	it	eq
 800ca48:	694b      	ldreq	r3, [r1, #20]
 800ca4a:	600f      	str	r7, [r1, #0]
 800ca4c:	bf18      	it	ne
 800ca4e:	2300      	movne	r3, #0
 800ca50:	eba6 0807 	sub.w	r8, r6, r7
 800ca54:	608b      	str	r3, [r1, #8]
 800ca56:	f1b8 0f00 	cmp.w	r8, #0
 800ca5a:	dd9c      	ble.n	800c996 <__sflush_r+0x1a>
 800ca5c:	6a21      	ldr	r1, [r4, #32]
 800ca5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca60:	4643      	mov	r3, r8
 800ca62:	463a      	mov	r2, r7
 800ca64:	4628      	mov	r0, r5
 800ca66:	47b0      	blx	r6
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	dc06      	bgt.n	800ca7a <__sflush_r+0xfe>
 800ca6c:	89a3      	ldrh	r3, [r4, #12]
 800ca6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca72:	81a3      	strh	r3, [r4, #12]
 800ca74:	f04f 30ff 	mov.w	r0, #4294967295
 800ca78:	e78e      	b.n	800c998 <__sflush_r+0x1c>
 800ca7a:	4407      	add	r7, r0
 800ca7c:	eba8 0800 	sub.w	r8, r8, r0
 800ca80:	e7e9      	b.n	800ca56 <__sflush_r+0xda>
 800ca82:	bf00      	nop
 800ca84:	20400001 	.word	0x20400001

0800ca88 <_fflush_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	690b      	ldr	r3, [r1, #16]
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	460c      	mov	r4, r1
 800ca90:	b913      	cbnz	r3, 800ca98 <_fflush_r+0x10>
 800ca92:	2500      	movs	r5, #0
 800ca94:	4628      	mov	r0, r5
 800ca96:	bd38      	pop	{r3, r4, r5, pc}
 800ca98:	b118      	cbz	r0, 800caa2 <_fflush_r+0x1a>
 800ca9a:	6983      	ldr	r3, [r0, #24]
 800ca9c:	b90b      	cbnz	r3, 800caa2 <_fflush_r+0x1a>
 800ca9e:	f000 f887 	bl	800cbb0 <__sinit>
 800caa2:	4b14      	ldr	r3, [pc, #80]	; (800caf4 <_fflush_r+0x6c>)
 800caa4:	429c      	cmp	r4, r3
 800caa6:	d11b      	bne.n	800cae0 <_fflush_r+0x58>
 800caa8:	686c      	ldr	r4, [r5, #4]
 800caaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0ef      	beq.n	800ca92 <_fflush_r+0xa>
 800cab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cab4:	07d0      	lsls	r0, r2, #31
 800cab6:	d404      	bmi.n	800cac2 <_fflush_r+0x3a>
 800cab8:	0599      	lsls	r1, r3, #22
 800caba:	d402      	bmi.n	800cac2 <_fflush_r+0x3a>
 800cabc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cabe:	f000 f915 	bl	800ccec <__retarget_lock_acquire_recursive>
 800cac2:	4628      	mov	r0, r5
 800cac4:	4621      	mov	r1, r4
 800cac6:	f7ff ff59 	bl	800c97c <__sflush_r>
 800caca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cacc:	07da      	lsls	r2, r3, #31
 800cace:	4605      	mov	r5, r0
 800cad0:	d4e0      	bmi.n	800ca94 <_fflush_r+0xc>
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	059b      	lsls	r3, r3, #22
 800cad6:	d4dd      	bmi.n	800ca94 <_fflush_r+0xc>
 800cad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cada:	f000 f908 	bl	800ccee <__retarget_lock_release_recursive>
 800cade:	e7d9      	b.n	800ca94 <_fflush_r+0xc>
 800cae0:	4b05      	ldr	r3, [pc, #20]	; (800caf8 <_fflush_r+0x70>)
 800cae2:	429c      	cmp	r4, r3
 800cae4:	d101      	bne.n	800caea <_fflush_r+0x62>
 800cae6:	68ac      	ldr	r4, [r5, #8]
 800cae8:	e7df      	b.n	800caaa <_fflush_r+0x22>
 800caea:	4b04      	ldr	r3, [pc, #16]	; (800cafc <_fflush_r+0x74>)
 800caec:	429c      	cmp	r4, r3
 800caee:	bf08      	it	eq
 800caf0:	68ec      	ldreq	r4, [r5, #12]
 800caf2:	e7da      	b.n	800caaa <_fflush_r+0x22>
 800caf4:	080102ec 	.word	0x080102ec
 800caf8:	0801030c 	.word	0x0801030c
 800cafc:	080102cc 	.word	0x080102cc

0800cb00 <std>:
 800cb00:	2300      	movs	r3, #0
 800cb02:	b510      	push	{r4, lr}
 800cb04:	4604      	mov	r4, r0
 800cb06:	e9c0 3300 	strd	r3, r3, [r0]
 800cb0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb0e:	6083      	str	r3, [r0, #8]
 800cb10:	8181      	strh	r1, [r0, #12]
 800cb12:	6643      	str	r3, [r0, #100]	; 0x64
 800cb14:	81c2      	strh	r2, [r0, #14]
 800cb16:	6183      	str	r3, [r0, #24]
 800cb18:	4619      	mov	r1, r3
 800cb1a:	2208      	movs	r2, #8
 800cb1c:	305c      	adds	r0, #92	; 0x5c
 800cb1e:	f7fd fb53 	bl	800a1c8 <memset>
 800cb22:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <std+0x38>)
 800cb24:	6263      	str	r3, [r4, #36]	; 0x24
 800cb26:	4b05      	ldr	r3, [pc, #20]	; (800cb3c <std+0x3c>)
 800cb28:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb2a:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <std+0x40>)
 800cb2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb2e:	4b05      	ldr	r3, [pc, #20]	; (800cb44 <std+0x44>)
 800cb30:	6224      	str	r4, [r4, #32]
 800cb32:	6323      	str	r3, [r4, #48]	; 0x30
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	bf00      	nop
 800cb38:	0800ce55 	.word	0x0800ce55
 800cb3c:	0800ce77 	.word	0x0800ce77
 800cb40:	0800ceaf 	.word	0x0800ceaf
 800cb44:	0800ced3 	.word	0x0800ced3

0800cb48 <_cleanup_r>:
 800cb48:	4901      	ldr	r1, [pc, #4]	; (800cb50 <_cleanup_r+0x8>)
 800cb4a:	f000 b8af 	b.w	800ccac <_fwalk_reent>
 800cb4e:	bf00      	nop
 800cb50:	0800ca89 	.word	0x0800ca89

0800cb54 <__sfmoreglue>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	2268      	movs	r2, #104	; 0x68
 800cb58:	1e4d      	subs	r5, r1, #1
 800cb5a:	4355      	muls	r5, r2
 800cb5c:	460e      	mov	r6, r1
 800cb5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb62:	f7ff fa65 	bl	800c030 <_malloc_r>
 800cb66:	4604      	mov	r4, r0
 800cb68:	b140      	cbz	r0, 800cb7c <__sfmoreglue+0x28>
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	e9c0 1600 	strd	r1, r6, [r0]
 800cb70:	300c      	adds	r0, #12
 800cb72:	60a0      	str	r0, [r4, #8]
 800cb74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb78:	f7fd fb26 	bl	800a1c8 <memset>
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}

0800cb80 <__sfp_lock_acquire>:
 800cb80:	4801      	ldr	r0, [pc, #4]	; (800cb88 <__sfp_lock_acquire+0x8>)
 800cb82:	f000 b8b3 	b.w	800ccec <__retarget_lock_acquire_recursive>
 800cb86:	bf00      	nop
 800cb88:	20000b4d 	.word	0x20000b4d

0800cb8c <__sfp_lock_release>:
 800cb8c:	4801      	ldr	r0, [pc, #4]	; (800cb94 <__sfp_lock_release+0x8>)
 800cb8e:	f000 b8ae 	b.w	800ccee <__retarget_lock_release_recursive>
 800cb92:	bf00      	nop
 800cb94:	20000b4d 	.word	0x20000b4d

0800cb98 <__sinit_lock_acquire>:
 800cb98:	4801      	ldr	r0, [pc, #4]	; (800cba0 <__sinit_lock_acquire+0x8>)
 800cb9a:	f000 b8a7 	b.w	800ccec <__retarget_lock_acquire_recursive>
 800cb9e:	bf00      	nop
 800cba0:	20000b4e 	.word	0x20000b4e

0800cba4 <__sinit_lock_release>:
 800cba4:	4801      	ldr	r0, [pc, #4]	; (800cbac <__sinit_lock_release+0x8>)
 800cba6:	f000 b8a2 	b.w	800ccee <__retarget_lock_release_recursive>
 800cbaa:	bf00      	nop
 800cbac:	20000b4e 	.word	0x20000b4e

0800cbb0 <__sinit>:
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	f7ff fff0 	bl	800cb98 <__sinit_lock_acquire>
 800cbb8:	69a3      	ldr	r3, [r4, #24]
 800cbba:	b11b      	cbz	r3, 800cbc4 <__sinit+0x14>
 800cbbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc0:	f7ff bff0 	b.w	800cba4 <__sinit_lock_release>
 800cbc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbc8:	6523      	str	r3, [r4, #80]	; 0x50
 800cbca:	4b13      	ldr	r3, [pc, #76]	; (800cc18 <__sinit+0x68>)
 800cbcc:	4a13      	ldr	r2, [pc, #76]	; (800cc1c <__sinit+0x6c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cbd2:	42a3      	cmp	r3, r4
 800cbd4:	bf04      	itt	eq
 800cbd6:	2301      	moveq	r3, #1
 800cbd8:	61a3      	streq	r3, [r4, #24]
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f000 f820 	bl	800cc20 <__sfp>
 800cbe0:	6060      	str	r0, [r4, #4]
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f000 f81c 	bl	800cc20 <__sfp>
 800cbe8:	60a0      	str	r0, [r4, #8]
 800cbea:	4620      	mov	r0, r4
 800cbec:	f000 f818 	bl	800cc20 <__sfp>
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	60e0      	str	r0, [r4, #12]
 800cbf4:	2104      	movs	r1, #4
 800cbf6:	6860      	ldr	r0, [r4, #4]
 800cbf8:	f7ff ff82 	bl	800cb00 <std>
 800cbfc:	68a0      	ldr	r0, [r4, #8]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	2109      	movs	r1, #9
 800cc02:	f7ff ff7d 	bl	800cb00 <std>
 800cc06:	68e0      	ldr	r0, [r4, #12]
 800cc08:	2202      	movs	r2, #2
 800cc0a:	2112      	movs	r1, #18
 800cc0c:	f7ff ff78 	bl	800cb00 <std>
 800cc10:	2301      	movs	r3, #1
 800cc12:	61a3      	str	r3, [r4, #24]
 800cc14:	e7d2      	b.n	800cbbc <__sinit+0xc>
 800cc16:	bf00      	nop
 800cc18:	0800ff54 	.word	0x0800ff54
 800cc1c:	0800cb49 	.word	0x0800cb49

0800cc20 <__sfp>:
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	4607      	mov	r7, r0
 800cc24:	f7ff ffac 	bl	800cb80 <__sfp_lock_acquire>
 800cc28:	4b1e      	ldr	r3, [pc, #120]	; (800cca4 <__sfp+0x84>)
 800cc2a:	681e      	ldr	r6, [r3, #0]
 800cc2c:	69b3      	ldr	r3, [r6, #24]
 800cc2e:	b913      	cbnz	r3, 800cc36 <__sfp+0x16>
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7ff ffbd 	bl	800cbb0 <__sinit>
 800cc36:	3648      	adds	r6, #72	; 0x48
 800cc38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	d503      	bpl.n	800cc48 <__sfp+0x28>
 800cc40:	6833      	ldr	r3, [r6, #0]
 800cc42:	b30b      	cbz	r3, 800cc88 <__sfp+0x68>
 800cc44:	6836      	ldr	r6, [r6, #0]
 800cc46:	e7f7      	b.n	800cc38 <__sfp+0x18>
 800cc48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc4c:	b9d5      	cbnz	r5, 800cc84 <__sfp+0x64>
 800cc4e:	4b16      	ldr	r3, [pc, #88]	; (800cca8 <__sfp+0x88>)
 800cc50:	60e3      	str	r3, [r4, #12]
 800cc52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc56:	6665      	str	r5, [r4, #100]	; 0x64
 800cc58:	f000 f847 	bl	800ccea <__retarget_lock_init_recursive>
 800cc5c:	f7ff ff96 	bl	800cb8c <__sfp_lock_release>
 800cc60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc68:	6025      	str	r5, [r4, #0]
 800cc6a:	61a5      	str	r5, [r4, #24]
 800cc6c:	2208      	movs	r2, #8
 800cc6e:	4629      	mov	r1, r5
 800cc70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc74:	f7fd faa8 	bl	800a1c8 <memset>
 800cc78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc80:	4620      	mov	r0, r4
 800cc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc84:	3468      	adds	r4, #104	; 0x68
 800cc86:	e7d9      	b.n	800cc3c <__sfp+0x1c>
 800cc88:	2104      	movs	r1, #4
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	f7ff ff62 	bl	800cb54 <__sfmoreglue>
 800cc90:	4604      	mov	r4, r0
 800cc92:	6030      	str	r0, [r6, #0]
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d1d5      	bne.n	800cc44 <__sfp+0x24>
 800cc98:	f7ff ff78 	bl	800cb8c <__sfp_lock_release>
 800cc9c:	230c      	movs	r3, #12
 800cc9e:	603b      	str	r3, [r7, #0]
 800cca0:	e7ee      	b.n	800cc80 <__sfp+0x60>
 800cca2:	bf00      	nop
 800cca4:	0800ff54 	.word	0x0800ff54
 800cca8:	ffff0001 	.word	0xffff0001

0800ccac <_fwalk_reent>:
 800ccac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb0:	4606      	mov	r6, r0
 800ccb2:	4688      	mov	r8, r1
 800ccb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ccb8:	2700      	movs	r7, #0
 800ccba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ccbe:	f1b9 0901 	subs.w	r9, r9, #1
 800ccc2:	d505      	bpl.n	800ccd0 <_fwalk_reent+0x24>
 800ccc4:	6824      	ldr	r4, [r4, #0]
 800ccc6:	2c00      	cmp	r4, #0
 800ccc8:	d1f7      	bne.n	800ccba <_fwalk_reent+0xe>
 800ccca:	4638      	mov	r0, r7
 800cccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd0:	89ab      	ldrh	r3, [r5, #12]
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d907      	bls.n	800cce6 <_fwalk_reent+0x3a>
 800ccd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	d003      	beq.n	800cce6 <_fwalk_reent+0x3a>
 800ccde:	4629      	mov	r1, r5
 800cce0:	4630      	mov	r0, r6
 800cce2:	47c0      	blx	r8
 800cce4:	4307      	orrs	r7, r0
 800cce6:	3568      	adds	r5, #104	; 0x68
 800cce8:	e7e9      	b.n	800ccbe <_fwalk_reent+0x12>

0800ccea <__retarget_lock_init_recursive>:
 800ccea:	4770      	bx	lr

0800ccec <__retarget_lock_acquire_recursive>:
 800ccec:	4770      	bx	lr

0800ccee <__retarget_lock_release_recursive>:
 800ccee:	4770      	bx	lr

0800ccf0 <__swhatbuf_r>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	460e      	mov	r6, r1
 800ccf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccf8:	2900      	cmp	r1, #0
 800ccfa:	b096      	sub	sp, #88	; 0x58
 800ccfc:	4614      	mov	r4, r2
 800ccfe:	461d      	mov	r5, r3
 800cd00:	da08      	bge.n	800cd14 <__swhatbuf_r+0x24>
 800cd02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	602a      	str	r2, [r5, #0]
 800cd0a:	061a      	lsls	r2, r3, #24
 800cd0c:	d410      	bmi.n	800cd30 <__swhatbuf_r+0x40>
 800cd0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd12:	e00e      	b.n	800cd32 <__swhatbuf_r+0x42>
 800cd14:	466a      	mov	r2, sp
 800cd16:	f000 f903 	bl	800cf20 <_fstat_r>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	dbf1      	blt.n	800cd02 <__swhatbuf_r+0x12>
 800cd1e:	9a01      	ldr	r2, [sp, #4]
 800cd20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd28:	425a      	negs	r2, r3
 800cd2a:	415a      	adcs	r2, r3
 800cd2c:	602a      	str	r2, [r5, #0]
 800cd2e:	e7ee      	b.n	800cd0e <__swhatbuf_r+0x1e>
 800cd30:	2340      	movs	r3, #64	; 0x40
 800cd32:	2000      	movs	r0, #0
 800cd34:	6023      	str	r3, [r4, #0]
 800cd36:	b016      	add	sp, #88	; 0x58
 800cd38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd3c <__smakebuf_r>:
 800cd3c:	898b      	ldrh	r3, [r1, #12]
 800cd3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd40:	079d      	lsls	r5, r3, #30
 800cd42:	4606      	mov	r6, r0
 800cd44:	460c      	mov	r4, r1
 800cd46:	d507      	bpl.n	800cd58 <__smakebuf_r+0x1c>
 800cd48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	6123      	str	r3, [r4, #16]
 800cd50:	2301      	movs	r3, #1
 800cd52:	6163      	str	r3, [r4, #20]
 800cd54:	b002      	add	sp, #8
 800cd56:	bd70      	pop	{r4, r5, r6, pc}
 800cd58:	ab01      	add	r3, sp, #4
 800cd5a:	466a      	mov	r2, sp
 800cd5c:	f7ff ffc8 	bl	800ccf0 <__swhatbuf_r>
 800cd60:	9900      	ldr	r1, [sp, #0]
 800cd62:	4605      	mov	r5, r0
 800cd64:	4630      	mov	r0, r6
 800cd66:	f7ff f963 	bl	800c030 <_malloc_r>
 800cd6a:	b948      	cbnz	r0, 800cd80 <__smakebuf_r+0x44>
 800cd6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd70:	059a      	lsls	r2, r3, #22
 800cd72:	d4ef      	bmi.n	800cd54 <__smakebuf_r+0x18>
 800cd74:	f023 0303 	bic.w	r3, r3, #3
 800cd78:	f043 0302 	orr.w	r3, r3, #2
 800cd7c:	81a3      	strh	r3, [r4, #12]
 800cd7e:	e7e3      	b.n	800cd48 <__smakebuf_r+0xc>
 800cd80:	4b0d      	ldr	r3, [pc, #52]	; (800cdb8 <__smakebuf_r+0x7c>)
 800cd82:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	6020      	str	r0, [r4, #0]
 800cd88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd8c:	81a3      	strh	r3, [r4, #12]
 800cd8e:	9b00      	ldr	r3, [sp, #0]
 800cd90:	6163      	str	r3, [r4, #20]
 800cd92:	9b01      	ldr	r3, [sp, #4]
 800cd94:	6120      	str	r0, [r4, #16]
 800cd96:	b15b      	cbz	r3, 800cdb0 <__smakebuf_r+0x74>
 800cd98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	f000 f8d1 	bl	800cf44 <_isatty_r>
 800cda2:	b128      	cbz	r0, 800cdb0 <__smakebuf_r+0x74>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f023 0303 	bic.w	r3, r3, #3
 800cdaa:	f043 0301 	orr.w	r3, r3, #1
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	89a0      	ldrh	r0, [r4, #12]
 800cdb2:	4305      	orrs	r5, r0
 800cdb4:	81a5      	strh	r5, [r4, #12]
 800cdb6:	e7cd      	b.n	800cd54 <__smakebuf_r+0x18>
 800cdb8:	0800cb49 	.word	0x0800cb49

0800cdbc <_malloc_usable_size_r>:
 800cdbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc0:	1f18      	subs	r0, r3, #4
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	bfbc      	itt	lt
 800cdc6:	580b      	ldrlt	r3, [r1, r0]
 800cdc8:	18c0      	addlt	r0, r0, r3
 800cdca:	4770      	bx	lr

0800cdcc <_raise_r>:
 800cdcc:	291f      	cmp	r1, #31
 800cdce:	b538      	push	{r3, r4, r5, lr}
 800cdd0:	4604      	mov	r4, r0
 800cdd2:	460d      	mov	r5, r1
 800cdd4:	d904      	bls.n	800cde0 <_raise_r+0x14>
 800cdd6:	2316      	movs	r3, #22
 800cdd8:	6003      	str	r3, [r0, #0]
 800cdda:	f04f 30ff 	mov.w	r0, #4294967295
 800cdde:	bd38      	pop	{r3, r4, r5, pc}
 800cde0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cde2:	b112      	cbz	r2, 800cdea <_raise_r+0x1e>
 800cde4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cde8:	b94b      	cbnz	r3, 800cdfe <_raise_r+0x32>
 800cdea:	4620      	mov	r0, r4
 800cdec:	f000 f830 	bl	800ce50 <_getpid_r>
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdfa:	f000 b817 	b.w	800ce2c <_kill_r>
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d00a      	beq.n	800ce18 <_raise_r+0x4c>
 800ce02:	1c59      	adds	r1, r3, #1
 800ce04:	d103      	bne.n	800ce0e <_raise_r+0x42>
 800ce06:	2316      	movs	r3, #22
 800ce08:	6003      	str	r3, [r0, #0]
 800ce0a:	2001      	movs	r0, #1
 800ce0c:	e7e7      	b.n	800cdde <_raise_r+0x12>
 800ce0e:	2400      	movs	r4, #0
 800ce10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce14:	4628      	mov	r0, r5
 800ce16:	4798      	blx	r3
 800ce18:	2000      	movs	r0, #0
 800ce1a:	e7e0      	b.n	800cdde <_raise_r+0x12>

0800ce1c <raise>:
 800ce1c:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <raise+0xc>)
 800ce1e:	4601      	mov	r1, r0
 800ce20:	6818      	ldr	r0, [r3, #0]
 800ce22:	f7ff bfd3 	b.w	800cdcc <_raise_r>
 800ce26:	bf00      	nop
 800ce28:	2000018c 	.word	0x2000018c

0800ce2c <_kill_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d07      	ldr	r5, [pc, #28]	; (800ce4c <_kill_r+0x20>)
 800ce30:	2300      	movs	r3, #0
 800ce32:	4604      	mov	r4, r0
 800ce34:	4608      	mov	r0, r1
 800ce36:	4611      	mov	r1, r2
 800ce38:	602b      	str	r3, [r5, #0]
 800ce3a:	f7f6 f819 	bl	8002e70 <_kill>
 800ce3e:	1c43      	adds	r3, r0, #1
 800ce40:	d102      	bne.n	800ce48 <_kill_r+0x1c>
 800ce42:	682b      	ldr	r3, [r5, #0]
 800ce44:	b103      	cbz	r3, 800ce48 <_kill_r+0x1c>
 800ce46:	6023      	str	r3, [r4, #0]
 800ce48:	bd38      	pop	{r3, r4, r5, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20000b48 	.word	0x20000b48

0800ce50 <_getpid_r>:
 800ce50:	f7f6 b806 	b.w	8002e60 <_getpid>

0800ce54 <__sread>:
 800ce54:	b510      	push	{r4, lr}
 800ce56:	460c      	mov	r4, r1
 800ce58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce5c:	f000 f894 	bl	800cf88 <_read_r>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	bfab      	itete	ge
 800ce64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce66:	89a3      	ldrhlt	r3, [r4, #12]
 800ce68:	181b      	addge	r3, r3, r0
 800ce6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce6e:	bfac      	ite	ge
 800ce70:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce72:	81a3      	strhlt	r3, [r4, #12]
 800ce74:	bd10      	pop	{r4, pc}

0800ce76 <__swrite>:
 800ce76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	461f      	mov	r7, r3
 800ce7c:	898b      	ldrh	r3, [r1, #12]
 800ce7e:	05db      	lsls	r3, r3, #23
 800ce80:	4605      	mov	r5, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	4616      	mov	r6, r2
 800ce86:	d505      	bpl.n	800ce94 <__swrite+0x1e>
 800ce88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f000 f868 	bl	800cf64 <_lseek_r>
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce9e:	81a3      	strh	r3, [r4, #12]
 800cea0:	4632      	mov	r2, r6
 800cea2:	463b      	mov	r3, r7
 800cea4:	4628      	mov	r0, r5
 800cea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceaa:	f000 b817 	b.w	800cedc <_write_r>

0800ceae <__sseek>:
 800ceae:	b510      	push	{r4, lr}
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb6:	f000 f855 	bl	800cf64 <_lseek_r>
 800ceba:	1c43      	adds	r3, r0, #1
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	bf15      	itete	ne
 800cec0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ceca:	81a3      	strheq	r3, [r4, #12]
 800cecc:	bf18      	it	ne
 800cece:	81a3      	strhne	r3, [r4, #12]
 800ced0:	bd10      	pop	{r4, pc}

0800ced2 <__sclose>:
 800ced2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ced6:	f000 b813 	b.w	800cf00 <_close_r>
	...

0800cedc <_write_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4d07      	ldr	r5, [pc, #28]	; (800cefc <_write_r+0x20>)
 800cee0:	4604      	mov	r4, r0
 800cee2:	4608      	mov	r0, r1
 800cee4:	4611      	mov	r1, r2
 800cee6:	2200      	movs	r2, #0
 800cee8:	602a      	str	r2, [r5, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	f7f5 fff7 	bl	8002ede <_write>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d102      	bne.n	800cefa <_write_r+0x1e>
 800cef4:	682b      	ldr	r3, [r5, #0]
 800cef6:	b103      	cbz	r3, 800cefa <_write_r+0x1e>
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	20000b48 	.word	0x20000b48

0800cf00 <_close_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4d06      	ldr	r5, [pc, #24]	; (800cf1c <_close_r+0x1c>)
 800cf04:	2300      	movs	r3, #0
 800cf06:	4604      	mov	r4, r0
 800cf08:	4608      	mov	r0, r1
 800cf0a:	602b      	str	r3, [r5, #0]
 800cf0c:	f7f6 f803 	bl	8002f16 <_close>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_close_r+0x1a>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_close_r+0x1a>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	20000b48 	.word	0x20000b48

0800cf20 <_fstat_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d07      	ldr	r5, [pc, #28]	; (800cf40 <_fstat_r+0x20>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	602b      	str	r3, [r5, #0]
 800cf2e:	f7f5 fffe 	bl	8002f2e <_fstat>
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	d102      	bne.n	800cf3c <_fstat_r+0x1c>
 800cf36:	682b      	ldr	r3, [r5, #0]
 800cf38:	b103      	cbz	r3, 800cf3c <_fstat_r+0x1c>
 800cf3a:	6023      	str	r3, [r4, #0]
 800cf3c:	bd38      	pop	{r3, r4, r5, pc}
 800cf3e:	bf00      	nop
 800cf40:	20000b48 	.word	0x20000b48

0800cf44 <_isatty_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4d06      	ldr	r5, [pc, #24]	; (800cf60 <_isatty_r+0x1c>)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	602b      	str	r3, [r5, #0]
 800cf50:	f7f5 fffd 	bl	8002f4e <_isatty>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_isatty_r+0x1a>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_isatty_r+0x1a>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20000b48 	.word	0x20000b48

0800cf64 <_lseek_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d07      	ldr	r5, [pc, #28]	; (800cf84 <_lseek_r+0x20>)
 800cf68:	4604      	mov	r4, r0
 800cf6a:	4608      	mov	r0, r1
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	602a      	str	r2, [r5, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	f7f5 fff6 	bl	8002f64 <_lseek>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d102      	bne.n	800cf82 <_lseek_r+0x1e>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	b103      	cbz	r3, 800cf82 <_lseek_r+0x1e>
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	20000b48 	.word	0x20000b48

0800cf88 <_read_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4d07      	ldr	r5, [pc, #28]	; (800cfa8 <_read_r+0x20>)
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	4608      	mov	r0, r1
 800cf90:	4611      	mov	r1, r2
 800cf92:	2200      	movs	r2, #0
 800cf94:	602a      	str	r2, [r5, #0]
 800cf96:	461a      	mov	r2, r3
 800cf98:	f7f5 ff84 	bl	8002ea4 <_read>
 800cf9c:	1c43      	adds	r3, r0, #1
 800cf9e:	d102      	bne.n	800cfa6 <_read_r+0x1e>
 800cfa0:	682b      	ldr	r3, [r5, #0]
 800cfa2:	b103      	cbz	r3, 800cfa6 <_read_r+0x1e>
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	bd38      	pop	{r3, r4, r5, pc}
 800cfa8:	20000b48 	.word	0x20000b48

0800cfac <roundf>:
 800cfac:	ee10 0a10 	vmov	r0, s0
 800cfb0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800cfb4:	3a7f      	subs	r2, #127	; 0x7f
 800cfb6:	2a16      	cmp	r2, #22
 800cfb8:	dc15      	bgt.n	800cfe6 <roundf+0x3a>
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	da08      	bge.n	800cfd0 <roundf+0x24>
 800cfbe:	3201      	adds	r2, #1
 800cfc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800cfc4:	d101      	bne.n	800cfca <roundf+0x1e>
 800cfc6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800cfca:	ee00 3a10 	vmov	s0, r3
 800cfce:	4770      	bx	lr
 800cfd0:	4907      	ldr	r1, [pc, #28]	; (800cff0 <roundf+0x44>)
 800cfd2:	4111      	asrs	r1, r2
 800cfd4:	4208      	tst	r0, r1
 800cfd6:	d0fa      	beq.n	800cfce <roundf+0x22>
 800cfd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cfdc:	4113      	asrs	r3, r2
 800cfde:	4403      	add	r3, r0
 800cfe0:	ea23 0301 	bic.w	r3, r3, r1
 800cfe4:	e7f1      	b.n	800cfca <roundf+0x1e>
 800cfe6:	2a80      	cmp	r2, #128	; 0x80
 800cfe8:	d1f1      	bne.n	800cfce <roundf+0x22>
 800cfea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cfee:	4770      	bx	lr
 800cff0:	007fffff 	.word	0x007fffff

0800cff4 <_init>:
 800cff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff6:	bf00      	nop
 800cff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffa:	bc08      	pop	{r3}
 800cffc:	469e      	mov	lr, r3
 800cffe:	4770      	bx	lr

0800d000 <_fini>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr
