
obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b044  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ff4  0800b1d8  0800b1d8  0001b1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1cc  0800d1cc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1cc  0800d1cc  0001d1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1d4  0800d1d4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1d4  0800d1d4  0001d1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1d8  0800d1d8  0001d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d1dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  200001ec  0800d3c8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  0800d3c8  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a222  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af7  00000000  00000000  0003a43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0003df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0003f580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b86  00000000  00000000  00040a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c642  00000000  00000000  000655c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6a81  00000000  00000000  00081c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158689  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee8  00000000  00000000  001586dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1bc 	.word	0x0800b1bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800b1bc 	.word	0x0800b1bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CAN1_Init>:
extern IWDG_HandleTypeDef hiwdg;
CAN_HandleTypeDef hcan1;
uint32_t tx_mailbox;

void MX_CAN1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <MX_CAN1_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f6a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f6e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_CAN1_Init+0x64>)
 8000f9c:	f001 ffb8 	bl	8002f10 <HAL_CAN_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_CAN1_Init+0x5e>
	{
	  Error_Handler();
 8000fa6:	f001 f9d5 	bl	8002354 <Error_Handler>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000208 	.word	0x20000208
 8000fb4:	40006400 	.word	0x40006400

08000fb8 <canConfig>:

void canConfig(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8000fca:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8000fce:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8000fd4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000fd8:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480c      	ldr	r0, [pc, #48]	; (800101c <canConfig+0x64>)
 8000fec:	f002 f88b 	bl	8003106 <HAL_CAN_ConfigFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <canConfig+0x42>
	{
		Error_Handler();
 8000ff6:	f001 f9ad 	bl	8002354 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <canConfig+0x64>)
 8000ffc:	f002 f94d 	bl	800329a <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <canConfig+0x52>
	{
		Error_Handler();
 8001006:	f001 f9a5 	bl	8002354 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800100a:	2102      	movs	r1, #2
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <canConfig+0x64>)
 800100e:	f002 fb6a 	bl	80036e6 <HAL_CAN_ActivateNotification>
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000208 	.word	0x20000208

08001020 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	f107 0214 	add.w	r2, r7, #20
 8001030:	2100      	movs	r1, #0
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001034:	f002 fa45 	bl	80034c2 <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fb43 	bl	80016c8 <OBD2_PID_Parse>
 8001042:	eef0 7a40 	vmov.f32	s15, s0
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001048:	edc3 7a01 	vstr	s15, [r3, #4]

	OBD2_ShowOnDisplay(obd_comm.current_value);
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800104e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f000 ff21 	bl	8001e9c <OBD2_ShowOnDisplay>

	//HAL_IWDG_Refresh(&hiwdg);
}
 800105a:	bf00      	nop
 800105c:	3730      	adds	r7, #48	; 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000208 	.word	0x20000208
 8001068:	200003dc 	.word	0x200003dc

0800106c <CAN_SEND_MESSAGE>:

void CAN_SEND_MESSAGE(uint8_t *tx_frame)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = DEVICE_CAN_ID;
 8001074:	f240 73df 	movw	r3, #2015	; 0x7df
 8001078:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 800107a:	2308      	movs	r3, #8
 800107c:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_frame, &tx_mailbox) != HAL_OK)
 8001086:	f107 0108 	add.w	r1, r7, #8
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <CAN_SEND_MESSAGE+0x3c>)
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <CAN_SEND_MESSAGE+0x40>)
 8001090:	f002 f947 	bl	8003322 <HAL_CAN_AddTxMessage>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <CAN_SEND_MESSAGE+0x32>
	{
		Error_Handler();
 800109a:	f001 f95b 	bl	8002354 <Error_Handler>
	}

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000230 	.word	0x20000230
 80010ac:	20000208 	.word	0x20000208

080010b0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	60da      	str	r2, [r3, #12]
//	__HAL_CAN_Receive_IT(hcan, CAN_RX_FIFO0);
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <KLine_Init>:
static void MX_GPIO_KLineUART_Init(void);
static void UART_PIN_State(uint8_t state);
static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght);
static void MX_USART1_UART_Init(uint16_t baud_rate);

obd_protocol KLine_Init(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 80010d2:	f000 f915 	bl	8001300 <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 80010d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010da:	f001 fef5 	bl	8002ec8 <HAL_Delay>
	UART_PIN_State(0); //0
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f924 	bl	800132c <UART_PIN_State>
	HAL_Delay(200);
 80010e4:	20c8      	movs	r0, #200	; 0xc8
 80010e6:	f001 feef 	bl	8002ec8 <HAL_Delay>
	UART_PIN_State(1);//11
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 f91e 	bl	800132c <UART_PIN_State>
	HAL_Delay(400);
 80010f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80010f4:	f001 fee8 	bl	8002ec8 <HAL_Delay>
	UART_PIN_State(0);//00
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 f917 	bl	800132c <UART_PIN_State>
	HAL_Delay(400);
 80010fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001102:	f001 fee1 	bl	8002ec8 <HAL_Delay>
	UART_PIN_State(1);//11
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f910 	bl	800132c <UART_PIN_State>
	HAL_Delay(400);
 800110c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001110:	f001 feda 	bl	8002ec8 <HAL_Delay>
	UART_PIN_State(0);//00
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f909 	bl	800132c <UART_PIN_State>
	HAL_Delay(400);
 800111a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800111e:	f001 fed3 	bl	8002ec8 <HAL_Delay>
	UART_PIN_State(1);//1
 8001122:	2001      	movs	r0, #1
 8001124:	f000 f902 	bl	800132c <UART_PIN_State>

	MX_USART1_UART_Init(10400);
 8001128:	f642 00a0 	movw	r0, #10400	; 0x28a0
 800112c:	f000 fa16 	bl	800155c <MX_USART1_UART_Init>

	HAL_UART_Receive(&huart1, uartBuf, 3, 500);
 8001130:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001134:	2203      	movs	r2, #3
 8001136:	492d      	ldr	r1, [pc, #180]	; (80011ec <KLine_Init+0x120>)
 8001138:	482d      	ldr	r0, [pc, #180]	; (80011f0 <KLine_Init+0x124>)
 800113a:	f005 fe74 	bl	8006e26 <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <KLine_Init+0x120>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b55      	cmp	r3, #85	; 0x55
 8001144:	d001      	beq.n	800114a <KLine_Init+0x7e>
	{
		return OBD_NONE;
 8001146:	2300      	movs	r3, #0
 8001148:	e04b      	b.n	80011e2 <KLine_Init+0x116>
	}
	else if(uartBuf[1] == uartBuf[2])
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <KLine_Init+0x120>)
 800114c:	785a      	ldrb	r2, [r3, #1]
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <KLine_Init+0x120>)
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	429a      	cmp	r2, r3
 8001154:	d126      	bne.n	80011a4 <KLine_Init+0xd8>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <KLine_Init+0x120>)
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	43db      	mvns	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 8001160:	2019      	movs	r0, #25
 8001162:	f001 feb1 	bl	8002ec8 <HAL_Delay>
			HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 8001166:	1df9      	adds	r1, r7, #7
 8001168:	2332      	movs	r3, #50	; 0x32
 800116a:	2201      	movs	r2, #1
 800116c:	4820      	ldr	r0, [pc, #128]	; (80011f0 <KLine_Init+0x124>)
 800116e:	f005 fdc6 	bl	8006cfe <HAL_UART_Transmit>
			HAL_Delay(25);
 8001172:	2019      	movs	r0, #25
 8001174:	f001 fea8 	bl	8002ec8 <HAL_Delay>
			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <KLine_Init+0x124>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	8b1b      	ldrh	r3, [r3, #24]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <KLine_Init+0x124>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0208 	orr.w	r2, r2, #8
 8001188:	b292      	uxth	r2, r2
 800118a:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	2201      	movs	r2, #1
 8001190:	4918      	ldr	r1, [pc, #96]	; (80011f4 <KLine_Init+0x128>)
 8001192:	4817      	ldr	r0, [pc, #92]	; (80011f0 <KLine_Init+0x124>)
 8001194:	f005 fe47 	bl	8006e26 <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
			kline_kb = uartBuf[1];
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <KLine_Init+0x120>)
 800119a:	785a      	ldrb	r2, [r3, #1]
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <KLine_Init+0x12c>)
 800119e:	701a      	strb	r2, [r3, #0]
			return OBD_PROTO_ISO9141;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e01e      	b.n	80011e2 <KLine_Init+0x116>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <KLine_Init+0x120>)
 80011a6:	785b      	ldrb	r3, [r3, #1]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 80011ae:	2019      	movs	r0, #25
 80011b0:	f001 fe8a 	bl	8002ec8 <HAL_Delay>
		HAL_UART_Transmit(&huart1, &inv_kb, 1, 50);
 80011b4:	1db9      	adds	r1, r7, #6
 80011b6:	2332      	movs	r3, #50	; 0x32
 80011b8:	2201      	movs	r2, #1
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <KLine_Init+0x124>)
 80011bc:	f005 fd9f 	bl	8006cfe <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <KLine_Init+0x124>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	8b1b      	ldrh	r3, [r3, #24]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <KLine_Init+0x124>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0208 	orr.w	r2, r2, #8
 80011d0:	b292      	uxth	r2, r2
 80011d2:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(&huart1, &ecu_addr, 1, 100);
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	2201      	movs	r2, #1
 80011d8:	4906      	ldr	r1, [pc, #24]	; (80011f4 <KLine_Init+0x128>)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <KLine_Init+0x124>)
 80011dc:	f005 fe23 	bl	8006e26 <HAL_UART_Receive>
		return OBD_PROTO_KWP2000_SLOW;
 80011e0:	2302      	movs	r3, #2
	}
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200003d0 	.word	0x200003d0
 80011f0:	20000250 	.word	0x20000250
 80011f4:	2000024a 	.word	0x2000024a
 80011f8:	2000024b 	.word	0x2000024b

080011fc <KWP2000_Fast_Init>:

obd_protocol KWP2000_Fast_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 8001202:	4a3b      	ldr	r2, [pc, #236]	; (80012f0 <KWP2000_Fast_Init+0xf4>)
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120c:	6018      	str	r0, [r3, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	7019      	strb	r1, [r3, #0]
	uint8_t resp_msg[7]={0};
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	2100      	movs	r1, #0
 800121c:	460a      	mov	r2, r1
 800121e:	801a      	strh	r2, [r3, #0]
 8001220:	460a      	mov	r2, r1
 8001222:	709a      	strb	r2, [r3, #2]
	checksum = 0;
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <KWP2000_Fast_Init+0xf8>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]

	HAL_UART_DeInit(&huart1);
 800122a:	4833      	ldr	r0, [pc, #204]	; (80012f8 <KWP2000_Fast_Init+0xfc>)
 800122c:	f005 fd2e 	bl	8006c8c <HAL_UART_DeInit>
	HAL_Delay(3000);
 8001230:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001234:	f001 fe48 	bl	8002ec8 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 8001238:	f000 f862 	bl	8001300 <MX_GPIO_KLineUART_Init>
	UART_PIN_State(0);
 800123c:	2000      	movs	r0, #0
 800123e:	f000 f875 	bl	800132c <UART_PIN_State>
	HAL_Delay(25);
 8001242:	2019      	movs	r0, #25
 8001244:	f001 fe40 	bl	8002ec8 <HAL_Delay>
	UART_PIN_State(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f000 f86f 	bl	800132c <UART_PIN_State>
	HAL_Delay(25);
 800124e:	2019      	movs	r0, #25
 8001250:	f001 fe3a 	bl	8002ec8 <HAL_Delay>
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001254:	4828      	ldr	r0, [pc, #160]	; (80012f8 <KWP2000_Fast_Init+0xfc>)
 8001256:	f005 fccb 	bl	8006bf0 <HAL_UART_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <KWP2000_Fast_Init+0x68>
	{
		Error_Handler();
 8001260:	f001 f878 	bl	8002354 <Error_Handler>
	}
	HAL_UART_Transmit(&huart1, start_msg, 5, 50);
 8001264:	f107 010c 	add.w	r1, r7, #12
 8001268:	2332      	movs	r3, #50	; 0x32
 800126a:	2205      	movs	r2, #5
 800126c:	4822      	ldr	r0, [pc, #136]	; (80012f8 <KWP2000_Fast_Init+0xfc>)
 800126e:	f005 fd46 	bl	8006cfe <HAL_UART_Transmit>
	HAL_Delay(20);
 8001272:	2014      	movs	r0, #20
 8001274:	f001 fe28 	bl	8002ec8 <HAL_Delay>
	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <KWP2000_Fast_Init+0xfc>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	8b1b      	ldrh	r3, [r3, #24]
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <KWP2000_Fast_Init+0xfc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0208 	orr.w	r2, r2, #8
 8001288:	b292      	uxth	r2, r2
 800128a:	831a      	strh	r2, [r3, #24]
	HAL_UART_Receive(&huart1, resp_msg, 7, 500);
 800128c:	1d39      	adds	r1, r7, #4
 800128e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001292:	2207      	movs	r2, #7
 8001294:	4818      	ldr	r0, [pc, #96]	; (80012f8 <KWP2000_Fast_Init+0xfc>)
 8001296:	f005 fdc6 	bl	8006e26 <HAL_UART_Receive>
	for(int i = 0; i < 6; i++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e00c      	b.n	80012ba <KWP2000_Fast_Init+0xbe>
	{
		checksum = checksum + resp_msg[i];
 80012a0:	1d3a      	adds	r2, r7, #4
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	4413      	add	r3, r2
 80012a6:	781a      	ldrb	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <KWP2000_Fast_Init+0xf8>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <KWP2000_Fast_Init+0xf8>)
 80012b2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	ddef      	ble.n	80012a0 <KWP2000_Fast_Init+0xa4>
	}
	checksum = checksum % 256;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <KWP2000_Fast_Init+0xf8>)
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <KWP2000_Fast_Init+0xf8>)
 80012c6:	701a      	strb	r2, [r3, #0]
	if(checksum == resp_msg[6] && checksum != 0)
 80012c8:	7aba      	ldrb	r2, [r7, #10]
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <KWP2000_Fast_Init+0xf8>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d108      	bne.n	80012e4 <KWP2000_Fast_Init+0xe8>
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <KWP2000_Fast_Init+0xf8>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <KWP2000_Fast_Init+0xe8>
	{
		ecu_addr = resp_msg[2];
 80012da:	79ba      	ldrb	r2, [r7, #6]
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <KWP2000_Fast_Init+0x100>)
 80012de:	701a      	strb	r2, [r3, #0]
		return OBD_PROTO_KWP2000_FAST;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e000      	b.n	80012e6 <KWP2000_Fast_Init+0xea>
	}
	else
		return OBD_NONE;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	0800b1d8 	.word	0x0800b1d8
 80012f4:	20000249 	.word	0x20000249
 80012f8:	20000250 	.word	0x20000250
 80012fc:	2000024a 	.word	0x2000024a

08001300 <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = KLine_TX_Pin;
 8001306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(KLine_TX_GPIO_Port, &GPIO_InitStruct);
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001320:	f003 f878 	bl	8004414 <HAL_GPIO_Init>
}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <UART_PIN_State>:

static void UART_PIN_State(uint8_t state)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d10e      	bne.n	800135a <UART_PIN_State+0x2e>
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f003 fab9 	bl	80048bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001354:	f003 fab2 	bl	80048bc <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
	}
}
 8001358:	e00d      	b.n	8001376 <UART_PIN_State+0x4a>
		HAL_GPIO_WritePin(KLine_TX_GPIO_Port, KLine_TX_Pin, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001364:	f003 faaa 	bl	80048bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f003 faa3 	bl	80048bc <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <KLine_SEND_MESSAGE>:

void KLine_SEND_MESSAGE(uint8_t* tx_frame)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001388:	2368      	movs	r3, #104	; 0x68
 800138a:	733b      	strb	r3, [r7, #12]
 800138c:	236a      	movs	r3, #106	; 0x6a
 800138e:	737b      	strb	r3, [r7, #13]
 8001390:	23f1      	movs	r3, #241	; 0xf1
 8001392:	73bb      	strb	r3, [r7, #14]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	785b      	ldrb	r3, [r3, #1]
 800139e:	743b      	strb	r3, [r7, #16]
 80013a0:	2300      	movs	r3, #0
 80013a2:	747b      	strb	r3, [r7, #17]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fdae 	bl	8001f0c <PID_Get_Lenght>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <KLine_SEND_MESSAGE+0xb0>)
 80013b6:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <KLine_SEND_MESSAGE+0xb4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	e00d      	b.n	80013e0 <KLine_SEND_MESSAGE+0x60>
	{
		checksum += kline_msg[i];
 80013c4:	f107 020c 	add.w	r2, r7, #12
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4413      	add	r3, r2
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <KLine_SEND_MESSAGE+0xb4>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <KLine_SEND_MESSAGE+0xb4>)
 80013d8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d9ee      	bls.n	80013c4 <KLine_SEND_MESSAGE+0x44>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <KLine_SEND_MESSAGE+0xb4>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	747b      	strb	r3, [r7, #17]

	HAL_UART_Transmit(&huart1, kline_msg, sizeof(kline_msg), 12);
 80013ec:	f107 010c 	add.w	r1, r7, #12
 80013f0:	230c      	movs	r3, #12
 80013f2:	2206      	movs	r2, #6
 80013f4:	4810      	ldr	r0, [pc, #64]	; (8001438 <KLine_SEND_MESSAGE+0xb8>)
 80013f6:	f005 fc82 	bl	8006cfe <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <KLine_SEND_MESSAGE+0xb8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	8b1b      	ldrh	r3, [r3, #24]
 8001400:	b29a      	uxth	r2, r3
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <KLine_SEND_MESSAGE+0xb8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0208 	orr.w	r2, r2, #8
 800140a:	b292      	uxth	r2, r2
 800140c:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 4);
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <KLine_SEND_MESSAGE+0xb0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	3304      	adds	r3, #4
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <KLine_SEND_MESSAGE+0xbc>)
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <KLine_SEND_MESSAGE+0xb8>)
 800141e:	f005 fdd3 	bl	8006fc8 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 8001422:	203c      	movs	r0, #60	; 0x3c
 8001424:	f001 fd50 	bl	8002ec8 <HAL_Delay>
}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000024c 	.word	0x2000024c
 8001434:	20000249 	.word	0x20000249
 8001438:	20000250 	.word	0x20000250
 800143c:	20000234 	.word	0x20000234

08001440 <KWP2000_SEND_MESSAGE>:

void KWP2000_SEND_MESSAGE(uint8_t* tx_frame)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, ecu_addr, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001448:	23c2      	movs	r3, #194	; 0xc2
 800144a:	733b      	strb	r3, [r7, #12]
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <KWP2000_SEND_MESSAGE+0xb4>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	737b      	strb	r3, [r7, #13]
 8001452:	23f1      	movs	r3, #241	; 0xf1
 8001454:	73bb      	strb	r3, [r7, #14]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	785b      	ldrb	r3, [r3, #1]
 8001460:	743b      	strb	r3, [r7, #16]
 8001462:	2300      	movs	r3, #0
 8001464:	747b      	strb	r3, [r7, #17]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3301      	adds	r3, #1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fd4d 	bl	8001f0c <PID_Get_Lenght>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <KWP2000_SEND_MESSAGE+0xb8>)
 8001478:	701a      	strb	r2, [r3, #0]
	checksum = 0;
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <KWP2000_SEND_MESSAGE+0xbc>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e00d      	b.n	80014a2 <KWP2000_SEND_MESSAGE+0x62>
	{
		checksum += kwp_msg[i];
 8001486:	f107 020c 	add.w	r2, r7, #12
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	4413      	add	r3, r2
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <KWP2000_SEND_MESSAGE+0xbc>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4413      	add	r3, r2
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <KWP2000_SEND_MESSAGE+0xbc>)
 800149a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d9ee      	bls.n	8001486 <KWP2000_SEND_MESSAGE+0x46>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <KWP2000_SEND_MESSAGE+0xbc>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	747b      	strb	r3, [r7, #17]

	HAL_UART_Transmit(&huart1, kwp_msg, sizeof(kwp_msg), 12);
 80014ae:	f107 010c 	add.w	r1, r7, #12
 80014b2:	230c      	movs	r3, #12
 80014b4:	2206      	movs	r2, #6
 80014b6:	4812      	ldr	r0, [pc, #72]	; (8001500 <KWP2000_SEND_MESSAGE+0xc0>)
 80014b8:	f005 fc21 	bl	8006cfe <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <KWP2000_SEND_MESSAGE+0xc0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	8b1b      	ldrh	r3, [r3, #24]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <KWP2000_SEND_MESSAGE+0xc0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0208 	orr.w	r2, r2, #8
 80014cc:	b292      	uxth	r2, r2
 80014ce:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(&huart1, kline_rx_buf, pid_length + 4);
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <KWP2000_SEND_MESSAGE+0xb8>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	3304      	adds	r3, #4
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	4909      	ldr	r1, [pc, #36]	; (8001504 <KWP2000_SEND_MESSAGE+0xc4>)
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <KWP2000_SEND_MESSAGE+0xc0>)
 80014e0:	f005 fd72 	bl	8006fc8 <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80014e4:	203c      	movs	r0, #60	; 0x3c
 80014e6:	f001 fcef 	bl	8002ec8 <HAL_Delay>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000024a 	.word	0x2000024a
 80014f8:	2000024c 	.word	0x2000024c
 80014fc:	20000249 	.word	0x20000249
 8001500:	20000250 	.word	0x20000250
 8001504:	20000234 	.word	0x20000234

08001508 <Verify_Checksum>:

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght; i++)
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	e009      	b.n	8001532 <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	4413      	add	r3, r2
 8001524:	781a      	ldrb	r2, [r3, #0]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	4413      	add	r3, r2
 800152a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght; i++)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3301      	adds	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	429a      	cmp	r2, r3
 8001538:	dbf1      	blt.n	800151e <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	3b01      	subs	r3, #1
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	429a      	cmp	r2, r3
 8001548:	d101      	bne.n	800154e <Verify_Checksum+0x46>
	{
		return 1;
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <Verify_Checksum+0x48>
	}
	return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <MX_USART1_UART_Init>:

void MX_USART1_UART_Init(uint16_t baud_rate)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
  huart1.Instance = USART1;
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 8001568:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <MX_USART1_UART_Init+0x6c>)
 800156a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud_rate;
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 8001570:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 800159e:	2201      	movs	r2, #1
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 80015a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <MX_USART1_UART_Init+0x68>)
 80015ac:	f005 fb20 	bl	8006bf0 <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80015b6:	f000 fecd 	bl	8002354 <Error_Handler>
  }
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000250 	.word	0x20000250
 80015c8:	40013800 	.word	0x40013800

080015cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	if(Verify_Checksum(kline_rx_buf, pid_length + 4))
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_UART_RxCpltCallback+0x78>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	3304      	adds	r3, #4
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4619      	mov	r1, r3
 80015de:	481a      	ldr	r0, [pc, #104]	; (8001648 <HAL_UART_RxCpltCallback+0x7c>)
 80015e0:	f7ff ff92 	bl	8001508 <Verify_Checksum>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d028      	beq.n	800163c <HAL_UART_RxCpltCallback+0x70>
	{
		uint8_t j = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 80015ee:	2302      	movs	r3, #2
 80015f0:	73bb      	strb	r3, [r7, #14]
 80015f2:	e00b      	b.n	800160c <HAL_UART_RxCpltCallback+0x40>
		{
			rx_frame[j] = kline_rx_buf[i];
 80015f4:	7bba      	ldrb	r2, [r7, #14]
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	4913      	ldr	r1, [pc, #76]	; (8001648 <HAL_UART_RxCpltCallback+0x7c>)
 80015fa:	5c89      	ldrb	r1, [r1, r2]
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_UART_RxCpltCallback+0x80>)
 80015fe:	54d1      	strb	r1, [r2, r3]
			j++;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	3301      	adds	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 8001606:	7bbb      	ldrb	r3, [r7, #14]
 8001608:	3301      	adds	r3, #1
 800160a:	73bb      	strb	r3, [r7, #14]
 800160c:	7bba      	ldrb	r2, [r7, #14]
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_UART_RxCpltCallback+0x78>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	3304      	adds	r3, #4
 8001614:	429a      	cmp	r2, r3
 8001616:	dded      	ble.n	80015f4 <HAL_UART_RxCpltCallback+0x28>
		}

		obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <HAL_UART_RxCpltCallback+0x80>)
 800161a:	f000 f855 	bl	80016c8 <OBD2_PID_Parse>
 800161e:	eef0 7a40 	vmov.f32	s15, s0
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_UART_RxCpltCallback+0x84>)
 8001624:	edc3 7a01 	vstr	s15, [r3, #4]

		OBD2_ShowOnDisplay(obd_comm.current_value);
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_UART_RxCpltCallback+0x84>)
 800162a:	edd3 7a01 	vldr	s15, [r3, #4]
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	f000 fc33 	bl	8001e9c <OBD2_ShowOnDisplay>

		HAL_IWDG_Refresh(&hiwdg);
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <HAL_UART_RxCpltCallback+0x88>)
 8001638:	f003 fe4c 	bl	80052d4 <HAL_IWDG_Refresh>
	}
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000024c 	.word	0x2000024c
 8001648:	20000234 	.word	0x20000234
 800164c:	20000244 	.word	0x20000244
 8001650:	200003dc 	.word	0x200003dc
 8001654:	2000032c 	.word	0x2000032c

08001658 <OBD2_Request>:
//	strcat(txTest2, "\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t *)txTest2, sizeof(txTest2),10);
//}

void OBD2_Request(OBD obd)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	463b      	mov	r3, r7
 8001660:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_Delay(10);
 8001664:	200a      	movs	r0, #10
 8001666:	f001 fc2f 	bl	8002ec8 <HAL_Delay>
	if(obd.used_protocol == OBD_PROTO_CAN)
 800166a:	783b      	ldrb	r3, [r7, #0]
 800166c:	2b04      	cmp	r3, #4
 800166e:	d115      	bne.n	800169c <OBD2_Request+0x44>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001670:	2302      	movs	r3, #2
 8001672:	743b      	strb	r3, [r7, #16]
 8001674:	2301      	movs	r3, #1
 8001676:	747b      	strb	r3, [r7, #17]
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	74bb      	strb	r3, [r7, #18]
 800167c:	2300      	movs	r3, #0
 800167e:	74fb      	strb	r3, [r7, #19]
 8001680:	2300      	movs	r3, #0
 8001682:	753b      	strb	r3, [r7, #20]
 8001684:	2300      	movs	r3, #0
 8001686:	757b      	strb	r3, [r7, #21]
 8001688:	2300      	movs	r3, #0
 800168a:	75bb      	strb	r3, [r7, #22]
 800168c:	2300      	movs	r3, #0
 800168e:	75fb      	strb	r3, [r7, #23]
		CAN_SEND_MESSAGE(tx_data_CAN);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fce9 	bl	800106c <CAN_SEND_MESSAGE>
		else
		{
			KWP2000_SEND_MESSAGE(tx_data_ISO);
		}
	}
}
 800169a:	e011      	b.n	80016c0 <OBD2_Request+0x68>
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 800169c:	2301      	movs	r3, #1
 800169e:	733b      	strb	r3, [r7, #12]
 80016a0:	787b      	ldrb	r3, [r7, #1]
 80016a2:	737b      	strb	r3, [r7, #13]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 80016a4:	783b      	ldrb	r3, [r7, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d105      	bne.n	80016b6 <OBD2_Request+0x5e>
			KLine_SEND_MESSAGE(tx_data_ISO);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fe66 	bl	8001380 <KLine_SEND_MESSAGE>
}
 80016b4:	e004      	b.n	80016c0 <OBD2_Request+0x68>
			KWP2000_SEND_MESSAGE(tx_data_ISO);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fec0 	bl	8001440 <KWP2000_SEND_MESSAGE>
}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <OBD2_PID_Parse>:

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	float value = 0;
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3302      	adds	r3, #2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	3b04      	subs	r3, #4
 80016de:	2ba2      	cmp	r3, #162	; 0xa2
 80016e0:	f200 8399 	bhi.w	8001e16 <OBD2_PID_Parse+0x74e>
 80016e4:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <OBD2_PID_Parse+0x24>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	08001979 	.word	0x08001979
 80016f0:	08001981 	.word	0x08001981
 80016f4:	08001997 	.word	0x08001997
 80016f8:	08001997 	.word	0x08001997
 80016fc:	08001997 	.word	0x08001997
 8001700:	08001997 	.word	0x08001997
 8001704:	0800199d 	.word	0x0800199d
 8001708:	080019b9 	.word	0x080019b9
 800170c:	080019cd 	.word	0x080019cd
 8001710:	080019f3 	.word	0x080019f3
 8001714:	08001a07 	.word	0x08001a07
 8001718:	08001a21 	.word	0x08001a21
 800171c:	08001a37 	.word	0x08001a37
 8001720:	08001a61 	.word	0x08001a61
 8001724:	08001e17 	.word	0x08001e17
 8001728:	08001e17 	.word	0x08001e17
 800172c:	08001a69 	.word	0x08001a69
 8001730:	08001a69 	.word	0x08001a69
 8001734:	08001a69 	.word	0x08001a69
 8001738:	08001a69 	.word	0x08001a69
 800173c:	08001a69 	.word	0x08001a69
 8001740:	08001a69 	.word	0x08001a69
 8001744:	08001a69 	.word	0x08001a69
 8001748:	08001a69 	.word	0x08001a69
 800174c:	08001e17 	.word	0x08001e17
 8001750:	08001e17 	.word	0x08001e17
 8001754:	08001e17 	.word	0x08001e17
 8001758:	08001a87 	.word	0x08001a87
 800175c:	08001e17 	.word	0x08001e17
 8001760:	08001a87 	.word	0x08001a87
 8001764:	08001aa5 	.word	0x08001aa5
 8001768:	08001ad5 	.word	0x08001ad5
 800176c:	08001afb 	.word	0x08001afb
 8001770:	08001afb 	.word	0x08001afb
 8001774:	08001afb 	.word	0x08001afb
 8001778:	08001afb 	.word	0x08001afb
 800177c:	08001afb 	.word	0x08001afb
 8001780:	08001afb 	.word	0x08001afb
 8001784:	08001afb 	.word	0x08001afb
 8001788:	08001afb 	.word	0x08001afb
 800178c:	08001b03 	.word	0x08001b03
 8001790:	08001b0b 	.word	0x08001b0b
 8001794:	08001b11 	.word	0x08001b11
 8001798:	08001b11 	.word	0x08001b11
 800179c:	08001b19 	.word	0x08001b19
 80017a0:	08001b2d 	.word	0x08001b2d
 80017a4:	08001b4b 	.word	0x08001b4b
 80017a8:	08001b71 	.word	0x08001b71
 80017ac:	08001b85 	.word	0x08001b85
 80017b0:	08001b85 	.word	0x08001b85
 80017b4:	08001b85 	.word	0x08001b85
 80017b8:	08001b85 	.word	0x08001b85
 80017bc:	08001b85 	.word	0x08001b85
 80017c0:	08001b85 	.word	0x08001b85
 80017c4:	08001b85 	.word	0x08001b85
 80017c8:	08001b85 	.word	0x08001b85
 80017cc:	08001b8d 	.word	0x08001b8d
 80017d0:	08001b8d 	.word	0x08001b8d
 80017d4:	08001b8d 	.word	0x08001b8d
 80017d8:	08001b8d 	.word	0x08001b8d
 80017dc:	08001e17 	.word	0x08001e17
 80017e0:	08001e17 	.word	0x08001e17
 80017e4:	08001bb9 	.word	0x08001bb9
 80017e8:	08001be3 	.word	0x08001be3
 80017ec:	08001beb 	.word	0x08001beb
 80017f0:	08001bf3 	.word	0x08001bf3
 80017f4:	08001bfb 	.word	0x08001bfb
 80017f8:	08001c11 	.word	0x08001c11
 80017fc:	08001c11 	.word	0x08001c11
 8001800:	08001c11 	.word	0x08001c11
 8001804:	08001c11 	.word	0x08001c11
 8001808:	08001c11 	.word	0x08001c11
 800180c:	08001c11 	.word	0x08001c11
 8001810:	08001c19 	.word	0x08001c19
 8001814:	08001c19 	.word	0x08001c19
 8001818:	08001c37 	.word	0x08001c37
 800181c:	08001e17 	.word	0x08001e17
 8001820:	08001e17 	.word	0x08001e17
 8001824:	08001c4b 	.word	0x08001c4b
 8001828:	08001c6d 	.word	0x08001c6d
 800182c:	08001c9f 	.word	0x08001c9f
 8001830:	08001cc3 	.word	0x08001cc3
 8001834:	08001cc3 	.word	0x08001cc3
 8001838:	08001cc3 	.word	0x08001cc3
 800183c:	08001cc3 	.word	0x08001cc3
 8001840:	08001cc9 	.word	0x08001cc9
 8001844:	08001ce7 	.word	0x08001ce7
 8001848:	08001ce7 	.word	0x08001ce7
 800184c:	08001cef 	.word	0x08001cef
 8001850:	08001d05 	.word	0x08001d05
 8001854:	08001d0b 	.word	0x08001d0b
 8001858:	08001e17 	.word	0x08001e17
 800185c:	08001e17 	.word	0x08001e17
 8001860:	08001d3d 	.word	0x08001d3d
 8001864:	08001d3d 	.word	0x08001d3d
 8001868:	08001d53 	.word	0x08001d53
 800186c:	08001d71 	.word	0x08001d71
 8001870:	08001e17 	.word	0x08001e17
 8001874:	08001d87 	.word	0x08001d87
 8001878:	08001d8f 	.word	0x08001d8f
 800187c:	08001d8f 	.word	0x08001d8f
 8001880:	08001e17 	.word	0x08001e17
 8001884:	08001e17 	.word	0x08001e17
 8001888:	08001e17 	.word	0x08001e17
 800188c:	08001e17 	.word	0x08001e17
 8001890:	08001e17 	.word	0x08001e17
 8001894:	08001e17 	.word	0x08001e17
 8001898:	08001e17 	.word	0x08001e17
 800189c:	08001e17 	.word	0x08001e17
 80018a0:	08001e17 	.word	0x08001e17
 80018a4:	08001e17 	.word	0x08001e17
 80018a8:	08001e17 	.word	0x08001e17
 80018ac:	08001e17 	.word	0x08001e17
 80018b0:	08001e17 	.word	0x08001e17
 80018b4:	08001e17 	.word	0x08001e17
 80018b8:	08001e17 	.word	0x08001e17
 80018bc:	08001e17 	.word	0x08001e17
 80018c0:	08001e17 	.word	0x08001e17
 80018c4:	08001e17 	.word	0x08001e17
 80018c8:	08001e17 	.word	0x08001e17
 80018cc:	08001da5 	.word	0x08001da5
 80018d0:	08001e17 	.word	0x08001e17
 80018d4:	08001e17 	.word	0x08001e17
 80018d8:	08001e17 	.word	0x08001e17
 80018dc:	08001e17 	.word	0x08001e17
 80018e0:	08001e17 	.word	0x08001e17
 80018e4:	08001e17 	.word	0x08001e17
 80018e8:	08001e17 	.word	0x08001e17
 80018ec:	08001e17 	.word	0x08001e17
 80018f0:	08001e17 	.word	0x08001e17
 80018f4:	08001e17 	.word	0x08001e17
 80018f8:	08001e17 	.word	0x08001e17
 80018fc:	08001e17 	.word	0x08001e17
 8001900:	08001e17 	.word	0x08001e17
 8001904:	08001e17 	.word	0x08001e17
 8001908:	08001e17 	.word	0x08001e17
 800190c:	08001e17 	.word	0x08001e17
 8001910:	08001e17 	.word	0x08001e17
 8001914:	08001e17 	.word	0x08001e17
 8001918:	08001e17 	.word	0x08001e17
 800191c:	08001e17 	.word	0x08001e17
 8001920:	08001e17 	.word	0x08001e17
 8001924:	08001e17 	.word	0x08001e17
 8001928:	08001e17 	.word	0x08001e17
 800192c:	08001e17 	.word	0x08001e17
 8001930:	08001e17 	.word	0x08001e17
 8001934:	08001e17 	.word	0x08001e17
 8001938:	08001e17 	.word	0x08001e17
 800193c:	08001e17 	.word	0x08001e17
 8001940:	08001e17 	.word	0x08001e17
 8001944:	08001e17 	.word	0x08001e17
 8001948:	08001e17 	.word	0x08001e17
 800194c:	08001e17 	.word	0x08001e17
 8001950:	08001e17 	.word	0x08001e17
 8001954:	08001e17 	.word	0x08001e17
 8001958:	08001e17 	.word	0x08001e17
 800195c:	08001e17 	.word	0x08001e17
 8001960:	08001e17 	.word	0x08001e17
 8001964:	08001e17 	.word	0x08001e17
 8001968:	08001e17 	.word	0x08001e17
 800196c:	08001e17 	.word	0x08001e17
 8001970:	08001e17 	.word	0x08001e17
 8001974:	08001dd1 	.word	0x08001dd1
	{
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
		break;
 800197e:	e24a      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x05:
		value = rx_frame[3] - 40;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3303      	adds	r3, #3
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	3b28      	subs	r3, #40	; 0x28
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001990:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001994:	e23f      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001996:	4bb2      	ldr	r3, [pc, #712]	; (8001c60 <OBD2_PID_Parse+0x598>)
 8001998:	60fb      	str	r3, [r7, #12]
		break;
 800199a:	e23c      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x0A:
		value = 3 * rx_frame[3];
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3303      	adds	r3, #3
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019b6:	e22e      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x0B:
		value = rx_frame[3];
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3303      	adds	r3, #3
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019ca:	e224      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3303      	adds	r3, #3
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	3204      	adds	r2, #4
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da00      	bge.n	80019e2 <OBD2_PID_Parse+0x31a>
 80019e0:	3303      	adds	r3, #3
 80019e2:	109b      	asrs	r3, r3, #2
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ec:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019f0:	e211      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x0D:
		value = rx_frame[3];
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3303      	adds	r3, #3
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a00:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a04:	e207      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3303      	adds	r3, #3
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3b40      	subs	r3, #64	; 0x40
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a1e:	e1fa      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3303      	adds	r3, #3
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3b28      	subs	r3, #40	; 0x28
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a34:	e1ef      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3303      	adds	r3, #3
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	3204      	adds	r2, #4
 8001a42:	7812      	ldrb	r2, [r2, #0]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	4a87      	ldr	r2, [pc, #540]	; (8001c64 <OBD2_PID_Parse+0x59c>)
 8001a48:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4c:	1152      	asrs	r2, r2, #5
 8001a4e:	17db      	asrs	r3, r3, #31
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a5e:	e1da      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
		break;
 8001a66:	e1d6      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	4a7d      	ldr	r2, [pc, #500]	; (8001c64 <OBD2_PID_Parse+0x59c>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	099b      	lsrs	r3, r3, #6
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a84:	e1c7      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3303      	adds	r3, #3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	3204      	adds	r2, #4
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aa2:	e1b8      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3303      	adds	r3, #3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	3204      	adds	r2, #4
 8001ab0:	7812      	ldrb	r2, [r2, #0]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd35 	bl	8000524 <__aeabi_i2d>
 8001aba:	a367      	add	r3, pc, #412	; (adr r3, 8001c58 <OBD2_PID_Parse+0x590>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fd9a 	bl	80005f8 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f86c 	bl	8000ba8 <__aeabi_d2f>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3303      	adds	r3, #3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	3204      	adds	r2, #4
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001af8:	e18d      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
		break;
 8001b00:	e189      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
		break;
 8001b08:	e185      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001b0a:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <OBD2_PID_Parse+0x598>)
 8001b0c:	60fb      	str	r3, [r7, #12]
		break;
 8001b0e:	e182      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
		break;
 8001b16:	e17e      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x30:
		value = rx_frame[3];
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b26:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b2a:	e174      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3303      	adds	r3, #3
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	3204      	adds	r2, #4
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	ee07 3a90 	vmov	s15, r3
 8001b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b44:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b48:	e165      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3303      	adds	r3, #3
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	3204      	adds	r2, #4
 8001b56:	7812      	ldrb	r2, [r2, #0]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da00      	bge.n	8001b60 <OBD2_PID_Parse+0x498>
 8001b5e:	3303      	adds	r3, #3
 8001b60:	109b      	asrs	r3, r3, #2
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b6e:	e152      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x33:
		value = rx_frame[3];
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3303      	adds	r3, #3
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b82:	e148      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
		break;
 8001b8a:	e144      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3303      	adds	r3, #3
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	3204      	adds	r2, #4
 8001b98:	7812      	ldrb	r2, [r2, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	4a31      	ldr	r2, [pc, #196]	; (8001c64 <OBD2_PID_Parse+0x59c>)
 8001b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba2:	1152      	asrs	r2, r2, #5
 8001ba4:	17db      	asrs	r3, r3, #31
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	3b28      	subs	r3, #40	; 0x28
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001bb6:	e12e      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3303      	adds	r3, #3
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	3204      	adds	r2, #4
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <OBD2_PID_Parse+0x5a0>)
 8001bca:	fb82 1203 	smull	r1, r2, r2, r3
 8001bce:	1192      	asrs	r2, r2, #6
 8001bd0:	17db      	asrs	r3, r3, #31
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001be0:	e119      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
		break;
 8001be8:	e115      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
		break;
 8001bf0:	e111      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
		break;
 8001bf8:	e10d      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x46:
		value = rx_frame[3] - 40;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3303      	adds	r3, #3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3b28      	subs	r3, #40	; 0x28
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c0e:	e102      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
		break;
 8001c16:	e0fe      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3303      	adds	r3, #3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	3204      	adds	r2, #4
 8001c24:	7812      	ldrb	r2, [r2, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c30:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c34:	e0ef      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x4F:
		value = rx_frame[3];
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3303      	adds	r3, #3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c44:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c48:	e0e5      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
		break;
 8001c50:	e0e1      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
 8001c52:	bf00      	nop
 8001c54:	f3af 8000 	nop.w
 8001c58:	10624dd3 	.word	0x10624dd3
 8001c5c:	3fb43958 	.word	0x3fb43958
 8001c60:	c2c80000 	.word	0xc2c80000
 8001c64:	51eb851f 	.word	0x51eb851f
 8001c68:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3303      	adds	r3, #3
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	3204      	adds	r2, #4
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc51 	bl	8000524 <__aeabi_i2d>
 8001c82:	a370      	add	r3, pc, #448	; (adr r3, 8001e44 <OBD2_PID_Parse+0x77c>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fcb6 	bl	80005f8 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe ff88 	bl	8000ba8 <__aeabi_d2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60fb      	str	r3, [r7, #12]
		break;
 8001c9c:	e0bb      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	3204      	adds	r2, #4
 8001caa:	7812      	ldrb	r2, [r2, #0]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001cb2:	3b7f      	subs	r3, #127	; 0x7f
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cc0:	e0a9      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	; (8001e38 <OBD2_PID_Parse+0x770>)
 8001cc4:	60fb      	str	r3, [r7, #12]
		break;
 8001cc6:	e0a6      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3303      	adds	r3, #3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	3204      	adds	r2, #4
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ce4:	e097      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
		break;
 8001cec:	e093      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	3b28      	subs	r3, #40	; 0x28
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d02:	e088      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001d04:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <OBD2_PID_Parse+0x774>)
 8001d06:	60fb      	str	r3, [r7, #12]
		break;
 8001d08:	e085      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3303      	adds	r3, #3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	3204      	adds	r2, #4
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc02 	bl	8000524 <__aeabi_i2d>
 8001d20:	a341      	add	r3, pc, #260	; (adr r3, 8001e28 <OBD2_PID_Parse+0x760>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fc67 	bl	80005f8 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe ff39 	bl	8000ba8 <__aeabi_d2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	60fb      	str	r3, [r7, #12]
		break;
 8001d3a:	e06c      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	3b7d      	subs	r3, #125	; 0x7d
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d50:	e061      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3303      	adds	r3, #3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	3204      	adds	r2, #4
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d6e:	e052      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3303      	adds	r3, #3
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3b7d      	subs	r3, #125	; 0x7d
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d84:	e047      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
		break;
 8001d8c:	e043      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3303      	adds	r3, #3
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	3b28      	subs	r3, #40	; 0x28
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001da2:	e038      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3303      	adds	r3, #3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	3204      	adds	r2, #4
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <OBD2_PID_Parse+0x778>)
 8001db6:	fb82 1203 	smull	r1, r2, r2, r3
 8001dba:	1152      	asrs	r2, r2, #5
 8001dbc:	17db      	asrs	r3, r3, #31
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	3b28      	subs	r3, #40	; 0x28
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dca:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001dce:	e022      	b.n	8001e16 <OBD2_PID_Parse+0x74e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3303      	adds	r3, #3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	061a      	lsls	r2, r3, #24
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3305      	adds	r3, #5
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	4313      	orrs	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	3206      	adds	r2, #6
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb95 	bl	8000524 <__aeabi_i2d>
 8001dfa:	a30d      	add	r3, pc, #52	; (adr r3, 8001e30 <OBD2_PID_Parse+0x768>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fbfa 	bl	80005f8 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fecc 	bl	8000ba8 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	60fb      	str	r3, [r7, #12]
		break;
 8001e14:	bf00      	nop
	}
	return value;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	ee07 3a90 	vmov	s15, r3
}
 8001e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	9999999a 	.word	0x9999999a
 8001e2c:	3fa99999 	.word	0x3fa99999
 8001e30:	9999999a 	.word	0x9999999a
 8001e34:	3fb99999 	.word	0x3fb99999
 8001e38:	c2c80000 	.word	0xc2c80000
 8001e3c:	c3520000 	.word	0xc3520000
 8001e40:	51eb851f 	.word	0x51eb851f
 8001e44:	47ae147b 	.word	0x47ae147b
 8001e48:	3f747ae1 	.word	0x3f747ae1

08001e4c <OBD2_Init>:

obd_protocol OBD2_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	used_protocol = KLine_Init();
 8001e50:	f7ff f93c 	bl	80010cc <KLine_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <OBD2_Init+0x48>)
 8001e5a:	701a      	strb	r2, [r3, #0]
	if(used_protocol == OBD_NONE)
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <OBD2_Init+0x48>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d113      	bne.n	8001e8c <OBD2_Init+0x40>
	{
		used_protocol = KWP2000_Fast_Init();
 8001e64:	f7ff f9ca 	bl	80011fc <KWP2000_Fast_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <OBD2_Init+0x48>)
 8001e6e:	701a      	strb	r2, [r3, #0]
		if(used_protocol == OBD_NONE)
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <OBD2_Init+0x48>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <OBD2_Init+0x40>
		{
			used_protocol = OBD_PROTO_CAN;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <OBD2_Init+0x48>)
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	701a      	strb	r2, [r3, #0]
			HAL_DMA_DeInit(&hdma_usart1_rx);
 8001e7e:	4806      	ldr	r0, [pc, #24]	; (8001e98 <OBD2_Init+0x4c>)
 8001e80:	f002 f878 	bl	8003f74 <HAL_DMA_DeInit>
			MX_CAN1_Init();
 8001e84:	f7ff f862 	bl	8000f4c <MX_CAN1_Init>
			canConfig();
 8001e88:	f7ff f896 	bl	8000fb8 <canConfig>
		}
	}
	return used_protocol;
 8001e8c:	4b01      	ldr	r3, [pc, #4]	; (8001e94 <OBD2_Init+0x48>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200002d4 	.word	0x200002d4
 8001e98:	20000388 	.word	0x20000388

08001e9c <OBD2_ShowOnDisplay>:

void OBD2_ShowOnDisplay(float value)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[10];
	snprintf(str, 10, "%f", value);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe fb4e 	bl	8000548 <__aeabi_f2d>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	f107 000c 	add.w	r0, r7, #12
 8001eb4:	e9cd 2300 	strd	r2, r3, [sp]
 8001eb8:	4a10      	ldr	r2, [pc, #64]	; (8001efc <OBD2_ShowOnDisplay+0x60>)
 8001eba:	210a      	movs	r1, #10
 8001ebc:	f006 ff00 	bl	8008cc0 <sniprintf>
	ssd1306_SetCursor(0,0);
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 ff42 	bl	8002d4c <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f000 fdf1 	bl	8002ab0 <ssd1306_Fill>
	ssd1306_WriteString("Teplota", Font_7x10, White);
 8001ece:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <OBD2_ShowOnDisplay+0x64>)
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	ca06      	ldmia	r2, {r1, r2}
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <OBD2_ShowOnDisplay+0x68>)
 8001ed6:	f000 ff13 	bl	8002d00 <ssd1306_WriteString>
	ssd1306_SetCursor(40, 20);
 8001eda:	2114      	movs	r1, #20
 8001edc:	2028      	movs	r0, #40	; 0x28
 8001ede:	f000 ff35 	bl	8002d4c <ssd1306_SetCursor>
	ssd1306_WriteString(str, Font_16x26, White);
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <OBD2_ShowOnDisplay+0x6c>)
 8001ee4:	f107 000c 	add.w	r0, r7, #12
 8001ee8:	2301      	movs	r3, #1
 8001eea:	ca06      	ldmia	r2, {r1, r2}
 8001eec:	f000 ff08 	bl	8002d00 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ef0:	f000 fe02 	bl	8002af8 <ssd1306_UpdateScreen>
}
 8001ef4:	bf00      	nop
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	0800b1e0 	.word	0x0800b1e0
 8001f00:	20000004 	.word	0x20000004
 8001f04:	0800b1e4 	.word	0x0800b1e4
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <PID_Get_Lenght>:
		[0x7C] = { 2 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 4 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
	return PID_LUT[pid][0];
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <PID_Get_Lenght+0x1c>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	0800b1f4 	.word	0x0800b1f4

08001f2c <HAL_GPIO_EXTI_Callback>:

static uint8_t state;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MENU_BTN_Pin && state == 1)
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d10a      	bne.n	8001f52 <HAL_GPIO_EXTI_Callback+0x26>
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_GPIO_EXTI_Callback+0x26>
	{
		HAL_TIM_Base_Start_IT(&htim1);
 8001f44:	4807      	ldr	r0, [pc, #28]	; (8001f64 <HAL_GPIO_EXTI_Callback+0x38>)
 8001f46:	f004 fbd1 	bl	80066ec <HAL_TIM_Base_Start_IT>
		state = 0;
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_EXTI_Callback+0x2a>
	}
	else
	{
		__NOP();
 8001f52:	bf00      	nop
	}
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200002d5 	.word	0x200002d5
 8001f64:	2000033c 	.word	0x2000033c

08001f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f6c:	f000 ff38 	bl	8002de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f70:	f000 f83c 	bl	8001fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f74:	f000 f95c 	bl	8002230 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f78:	f000 f93c 	bl	80021f4 <MX_DMA_Init>
  MX_I2C2_Init();
 8001f7c:	f000 f888 	bl	8002090 <MX_I2C2_Init>
  MX_IWDG_Init();
 8001f80:	f000 f8c6 	bl	8002110 <MX_IWDG_Init>
  MX_TIM1_Init();
 8001f84:	f000 f8e2 	bl	800214c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8001f88:	f000 fd28 	bl	80029dc <ssd1306_Init>
  ssd1306_Fill(Black);
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f000 fd8f 	bl	8002ab0 <ssd1306_Fill>
  ssd1306_WriteString("Teplota", Font_7x10, White);
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <main+0x78>)
 8001f94:	2301      	movs	r3, #1
 8001f96:	ca06      	ldmia	r2, {r1, r2}
 8001f98:	4812      	ldr	r0, [pc, #72]	; (8001fe4 <main+0x7c>)
 8001f9a:	f000 feb1 	bl	8002d00 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001f9e:	f000 fdab 	bl	8002af8 <ssd1306_UpdateScreen>



  obd_comm.used_protocol = OBD2_Init();
 8001fa2:	f7ff ff53 	bl	8001e4c <OBD2_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <main+0x80>)
 8001fac:	701a      	strb	r2, [r3, #0]

  obd_comm.pid = 0x0C;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <main+0x80>)
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	705a      	strb	r2, [r3, #1]

  //MX_IWDG_Init();

  OBD2_Request(obd_comm);
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <main+0x80>)
 8001fb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fba:	f7ff fb4d 	bl	8001658 <OBD2_Request>

  OBD2_Request(obd_comm);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <main+0x80>)
 8001fc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fc4:	f7ff fb48 	bl	8001658 <OBD2_Request>

  OBD2_Request(obd_comm);
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <main+0x80>)
 8001fca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fce:	f7ff fb43 	bl	8001658 <OBD2_Request>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  OBD2_Request(obd_comm);
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <main+0x80>)
 8001fd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fd8:	f7ff fb3e 	bl	8001658 <OBD2_Request>
 8001fdc:	e7f9      	b.n	8001fd2 <main+0x6a>
 8001fde:	bf00      	nop
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	0800b1ec 	.word	0x0800b1ec
 8001fe8:	200003dc 	.word	0x200003dc

08001fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b096      	sub	sp, #88	; 0x58
 8001ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	2244      	movs	r2, #68	; 0x44
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f006 f9ee 	bl	80083dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002000:	463b      	mov	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800200e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002012:	f003 f97d 	bl	8005310 <HAL_PWREx_ControlVoltageScaling>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800201c:	f000 f99a 	bl	8002354 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002020:	2309      	movs	r3, #9
 8002022:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002028:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800202a:	2301      	movs	r3, #1
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800202e:	2302      	movs	r3, #2
 8002030:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002032:	2303      	movs	r3, #3
 8002034:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800203a:	230a      	movs	r3, #10
 800203c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800203e:	2307      	movs	r3, #7
 8002040:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002042:	2302      	movs	r3, #2
 8002044:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002046:	2302      	movs	r3, #2
 8002048:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4618      	mov	r0, r3
 8002050:	f003 f9b4 	bl	80053bc <HAL_RCC_OscConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800205a:	f000 f97b 	bl	8002354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800205e:	230f      	movs	r3, #15
 8002060:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002062:	2303      	movs	r3, #3
 8002064:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002072:	463b      	mov	r3, r7
 8002074:	2104      	movs	r1, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fdb4 	bl	8005be4 <HAL_RCC_ClockConfig>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002082:	f000 f967 	bl	8002354 <Error_Handler>
  }
}
 8002086:	bf00      	nop
 8002088:	3758      	adds	r7, #88	; 0x58
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <MX_I2C2_Init+0x74>)
 8002096:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <MX_I2C2_Init+0x78>)
 8002098:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <MX_I2C2_Init+0x74>)
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <MX_I2C2_Init+0x7c>)
 800209e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_I2C2_Init+0x74>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <MX_I2C2_Init+0x74>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <MX_I2C2_Init+0x74>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <MX_I2C2_Init+0x74>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <MX_I2C2_Init+0x74>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_I2C2_Init+0x74>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MX_I2C2_Init+0x74>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020ca:	480e      	ldr	r0, [pc, #56]	; (8002104 <MX_I2C2_Init+0x74>)
 80020cc:	f002 fc26 	bl	800491c <HAL_I2C_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80020d6:	f000 f93d 	bl	8002354 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020da:	2100      	movs	r1, #0
 80020dc:	4809      	ldr	r0, [pc, #36]	; (8002104 <MX_I2C2_Init+0x74>)
 80020de:	f003 f813 	bl	8005108 <HAL_I2CEx_ConfigAnalogFilter>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80020e8:	f000 f934 	bl	8002354 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020ec:	2100      	movs	r1, #0
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_I2C2_Init+0x74>)
 80020f0:	f003 f855 	bl	800519e <HAL_I2CEx_ConfigDigitalFilter>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80020fa:	f000 f92b 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200002d8 	.word	0x200002d8
 8002108:	40005800 	.word	0x40005800
 800210c:	10909cec 	.word	0x10909cec

08002110 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <MX_IWDG_Init+0x34>)
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <MX_IWDG_Init+0x38>)
 8002118:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <MX_IWDG_Init+0x34>)
 800211c:	2204      	movs	r2, #4
 800211e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <MX_IWDG_Init+0x34>)
 8002122:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002126:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_IWDG_Init+0x34>)
 800212a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800212e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <MX_IWDG_Init+0x34>)
 8002132:	f003 f880 	bl	8005236 <HAL_IWDG_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800213c:	f000 f90a 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2000032c 	.word	0x2000032c
 8002148:	40003000 	.word	0x40003000

0800214c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002152:	f107 0310 	add.w	r3, r7, #16
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <MX_TIM1_Init+0xa0>)
 800216c:	4a20      	ldr	r2, [pc, #128]	; (80021f0 <MX_TIM1_Init+0xa4>)
 800216e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <MX_TIM1_Init+0xa0>)
 8002172:	2210      	movs	r2, #16
 8002174:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <MX_TIM1_Init+0xa0>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <MX_TIM1_Init+0xa0>)
 800217e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002182:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <MX_TIM1_Init+0xa0>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <MX_TIM1_Init+0xa0>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <MX_TIM1_Init+0xa0>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002196:	4815      	ldr	r0, [pc, #84]	; (80021ec <MX_TIM1_Init+0xa0>)
 8002198:	f004 fa50 	bl	800663c <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80021a2:	f000 f8d7 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4619      	mov	r1, r3
 80021b2:	480e      	ldr	r0, [pc, #56]	; (80021ec <MX_TIM1_Init+0xa0>)
 80021b4:	f004 faee 	bl	8006794 <HAL_TIM_ConfigClockSource>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80021be:	f000 f8c9 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4806      	ldr	r0, [pc, #24]	; (80021ec <MX_TIM1_Init+0xa0>)
 80021d4:	f004 fca6 	bl	8006b24 <HAL_TIMEx_MasterConfigSynchronization>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021de:	f000 f8b9 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000033c 	.word	0x2000033c
 80021f0:	40012c00 	.word	0x40012c00

080021f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <MX_DMA_Init+0x38>)
 80021fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021fe:	4a0b      	ldr	r2, [pc, #44]	; (800222c <MX_DMA_Init+0x38>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6493      	str	r3, [r2, #72]	; 0x48
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <MX_DMA_Init+0x38>)
 8002208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	200f      	movs	r0, #15
 8002218:	f001 fdaf 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800221c:	200f      	movs	r0, #15
 800221e:	f001 fdc8 	bl	8003db2 <HAL_NVIC_EnableIRQ>

}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000

08002230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <MX_GPIO_Init+0x118>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	4a3f      	ldr	r2, [pc, #252]	; (8002348 <MX_GPIO_Init+0x118>)
 800224c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <MX_GPIO_Init+0x118>)
 8002254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <MX_GPIO_Init+0x118>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	4a39      	ldr	r2, [pc, #228]	; (8002348 <MX_GPIO_Init+0x118>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800226a:	4b37      	ldr	r3, [pc, #220]	; (8002348 <MX_GPIO_Init+0x118>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <MX_GPIO_Init+0x118>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	4a33      	ldr	r2, [pc, #204]	; (8002348 <MX_GPIO_Init+0x118>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <MX_GPIO_Init+0x118>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <MX_GPIO_Init+0x118>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <MX_GPIO_Init+0x118>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229a:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <MX_GPIO_Init+0x118>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ac:	4827      	ldr	r0, [pc, #156]	; (800234c <MX_GPIO_Init+0x11c>)
 80022ae:	f002 fb05 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LLine_GPIO_Port, LLine_Pin, GPIO_PIN_RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022bc:	f002 fafe 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BAT_V_Pin */
  GPIO_InitStruct.Pin = BAT_V_Pin;
 80022c0:	2320      	movs	r3, #32
 80022c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022c4:	230b      	movs	r3, #11
 80022c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	4619      	mov	r1, r3
 80022d2:	481e      	ldr	r0, [pc, #120]	; (800234c <MX_GPIO_Init+0x11c>)
 80022d4:	f002 f89e 	bl	8004414 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_S_Pin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 80022d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2300      	movs	r3, #0
 80022e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4816      	ldr	r0, [pc, #88]	; (800234c <MX_GPIO_Init+0x11c>)
 80022f2:	f002 f88f 	bl	8004414 <HAL_GPIO_Init>

  /*Configure GPIO pin : LLine_Pin */
  GPIO_InitStruct.Pin = LLine_Pin;
 80022f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LLine_GPIO_Port, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002312:	f002 f87f 	bl	8004414 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_BTN_Pin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin;
 8002316:	2340      	movs	r3, #64	; 0x40
 8002318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800231a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800231e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MENU_BTN_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4809      	ldr	r0, [pc, #36]	; (8002350 <MX_GPIO_Init+0x120>)
 800232c:	f002 f872 	bl	8004414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2017      	movs	r0, #23
 8002336:	f001 fd20 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800233a:	2017      	movs	r0, #23
 800233c:	f001 fd39 	bl	8003db2 <HAL_NVIC_EnableIRQ>

}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	48000800 	.word	0x48000800
 8002350:	48000400 	.word	0x48000400

08002354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002358:	b672      	cpsid	i
}
 800235a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800235c:	e7fe      	b.n	800235c <Error_Handler+0x8>
	...

08002360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_MspInit+0x44>)
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <HAL_MspInit+0x44>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6613      	str	r3, [r2, #96]	; 0x60
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_MspInit+0x44>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_MspInit+0x44>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_MspInit+0x44>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_MspInit+0x44>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <HAL_CAN_MspInit+0xa0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d139      	bne.n	800243e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_CAN_MspInit+0xa4>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	4a1f      	ldr	r2, [pc, #124]	; (800244c <HAL_CAN_MspInit+0xa4>)
 80023d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_CAN_MspInit+0xa4>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_CAN_MspInit+0xa4>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_CAN_MspInit+0xa4>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_CAN_MspInit+0xa4>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80023fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800240c:	2309      	movs	r3, #9
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4619      	mov	r1, r3
 8002416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800241a:	f001 fffb 	bl	8004414 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2101      	movs	r1, #1
 8002422:	2014      	movs	r0, #20
 8002424:	f001 fca9 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002428:	2014      	movs	r0, #20
 800242a:	f001 fcc2 	bl	8003db2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2101      	movs	r1, #1
 8002432:	2015      	movs	r0, #21
 8002434:	f001 fca1 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002438:	2015      	movs	r0, #21
 800243a:	f001 fcba 	bl	8003db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40006400 	.word	0x40006400
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b0a0      	sub	sp, #128	; 0x80
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	225c      	movs	r2, #92	; 0x5c
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f005 ffb3 	bl	80083dc <memset>
  if(hi2c->Instance==I2C2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <HAL_I2C_MspInit+0xa8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d136      	bne.n	80024ee <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002484:	2300      	movs	r3, #0
 8002486:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fdcb 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002498:	f7ff ff5c 	bl	8002354 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_I2C_MspInit+0xac>)
 800249e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_I2C_MspInit+0xac>)
 80024a2:	f043 0302 	orr.w	r3, r3, #2
 80024a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_I2C_MspInit+0xac>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 80024b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ba:	2312      	movs	r3, #18
 80024bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024c6:	2304      	movs	r3, #4
 80024c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024ce:	4619      	mov	r1, r3
 80024d0:	480b      	ldr	r0, [pc, #44]	; (8002500 <HAL_I2C_MspInit+0xb0>)
 80024d2:	f001 ff9f 	bl	8004414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_I2C_MspInit+0xac>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	4a08      	ldr	r2, [pc, #32]	; (80024fc <HAL_I2C_MspInit+0xac>)
 80024dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024e0:	6593      	str	r3, [r2, #88]	; 0x58
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_I2C_MspInit+0xac>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	3780      	adds	r7, #128	; 0x80
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40005800 	.word	0x40005800
 80024fc:	40021000 	.word	0x40021000
 8002500:	48000400 	.word	0x48000400

08002504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <HAL_TIM_Base_MspInit+0x38>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10b      	bne.n	800252e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_TIM_Base_MspInit+0x3c>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_TIM_Base_MspInit+0x3c>)
 800251c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002520:	6613      	str	r3, [r2, #96]	; 0x60
 8002522:	4b07      	ldr	r3, [pc, #28]	; (8002540 <HAL_TIM_Base_MspInit+0x3c>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b0a0      	sub	sp, #128	; 0x80
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	225c      	movs	r2, #92	; 0x5c
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f005 ff39 	bl	80083dc <memset>
  if(huart->Instance==USART1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a38      	ldr	r2, [pc, #224]	; (8002650 <HAL_UART_MspInit+0x10c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d168      	bne.n	8002646 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002578:	2300      	movs	r3, #0
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fd51 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800258c:	f7ff fee2 	bl	8002354 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002590:	4b30      	ldr	r3, [pc, #192]	; (8002654 <HAL_UART_MspInit+0x110>)
 8002592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002594:	4a2f      	ldr	r2, [pc, #188]	; (8002654 <HAL_UART_MspInit+0x110>)
 8002596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259a:	6613      	str	r3, [r2, #96]	; 0x60
 800259c:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <HAL_UART_MspInit+0x110>)
 800259e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_UART_MspInit+0x110>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	4a29      	ldr	r2, [pc, #164]	; (8002654 <HAL_UART_MspInit+0x110>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_UART_MspInit+0x110>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = KLine_TX_Pin|KLine_RX_Pin;
 80025c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025d2:	2307      	movs	r3, #7
 80025d4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025da:	4619      	mov	r1, r3
 80025dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e0:	f001 ff18 	bl	8004414 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_UART_MspInit+0x114>)
 80025e6:	4a1d      	ldr	r2, [pc, #116]	; (800265c <HAL_UART_MspInit+0x118>)
 80025e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_UART_MspInit+0x114>)
 80025ec:	2202      	movs	r2, #2
 80025ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_UART_MspInit+0x114>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_UART_MspInit+0x114>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_UART_MspInit+0x114>)
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_UART_MspInit+0x114>)
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_UART_MspInit+0x114>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_UART_MspInit+0x114>)
 8002610:	2200      	movs	r2, #0
 8002612:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002614:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_UART_MspInit+0x114>)
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800261a:	480f      	ldr	r0, [pc, #60]	; (8002658 <HAL_UART_MspInit+0x114>)
 800261c:	f001 fbf2 	bl	8003e04 <HAL_DMA_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002626:	f7ff fe95 	bl	8002354 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_UART_MspInit+0x114>)
 800262e:	671a      	str	r2, [r3, #112]	; 0x70
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_UART_MspInit+0x114>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	2025      	movs	r0, #37	; 0x25
 800263c:	f001 fb9d 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002640:	2025      	movs	r0, #37	; 0x25
 8002642:	f001 fbb6 	bl	8003db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002646:	bf00      	nop
 8002648:	3780      	adds	r7, #128	; 0x80
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40013800 	.word	0x40013800
 8002654:	40021000 	.word	0x40021000
 8002658:	20000388 	.word	0x20000388
 800265c:	40020058 	.word	0x40020058

08002660 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <HAL_UART_MspDeInit+0x44>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d113      	bne.n	800269a <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002672:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <HAL_UART_MspDeInit+0x48>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <HAL_UART_MspDeInit+0x48>)
 8002678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800267c:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, KLine_TX_Pin|KLine_RX_Pin);
 800267e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002686:	f002 f83f 	bl	8004708 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fc70 	bl	8003f74 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002694:	2025      	movs	r0, #37	; 0x25
 8002696:	f001 fb9a 	bl	8003dce <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40021000 	.word	0x40021000

080026ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <NMI_Handler+0x4>

080026b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b6:	e7fe      	b.n	80026b6 <HardFault_Handler+0x4>

080026b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <MemManage_Handler+0x4>

080026be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c2:	e7fe      	b.n	80026c2 <BusFault_Handler+0x4>

080026c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c8:	e7fe      	b.n	80026c8 <UsageFault_Handler+0x4>

080026ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f8:	f000 fbc6 	bl	8002e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <DMA1_Channel5_IRQHandler+0x10>)
 8002706:	f001 fda6 	bl	8004256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000388 	.word	0x20000388

08002714 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <CAN1_RX0_IRQHandler+0x10>)
 800271a:	f001 f80a 	bl	8003732 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000208 	.word	0x20000208

08002728 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <CAN1_RX1_IRQHandler+0x10>)
 800272e:	f001 f800 	bl	8003732 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000208 	.word	0x20000208

0800273c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MENU_BTN_Pin);
 8002740:	2040      	movs	r0, #64	; 0x40
 8002742:	f002 f8d3 	bl	80048ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <USART1_IRQHandler+0x10>)
 8002752:	f004 fc8f 	bl	8007074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000250 	.word	0x20000250

08002760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
	return 1;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_kill>:

int _kill(int pid, int sig)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800277a:	f005 fdf7 	bl	800836c <__errno>
 800277e:	4603      	mov	r3, r0
 8002780:	2216      	movs	r2, #22
 8002782:	601a      	str	r2, [r3, #0]
	return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_exit>:

void _exit (int status)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ffe7 	bl	8002770 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027a2:	e7fe      	b.n	80027a2 <_exit+0x12>

080027a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e00a      	b.n	80027cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027b6:	f3af 8000 	nop.w
 80027ba:	4601      	mov	r1, r0
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	60ba      	str	r2, [r7, #8]
 80027c2:	b2ca      	uxtb	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf0      	blt.n	80027b6 <_read+0x12>
	}

return len;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e009      	b.n	8002804 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60ba      	str	r2, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	dbf1      	blt.n	80027f0 <_write+0x12>
	}
	return len;
 800280c:	687b      	ldr	r3, [r7, #4]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <_close>:

int _close(int file)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
	return -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283e:	605a      	str	r2, [r3, #4]
	return 0;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <_isatty>:

int _isatty(int file)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
	return 1;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
	return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <_sbrk+0x5c>)
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <_sbrk+0x60>)
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <_sbrk+0x64>)
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <_sbrk+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d207      	bcs.n	80028c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b0:	f005 fd5c 	bl	800836c <__errno>
 80028b4:	4603      	mov	r3, r0
 80028b6:	220c      	movs	r2, #12
 80028b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	e009      	b.n	80028d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <_sbrk+0x64>)
 80028d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20010000 	.word	0x20010000
 80028e0:	00000400 	.word	0x00000400
 80028e4:	200003e4 	.word	0x200003e4
 80028e8:	20000808 	.word	0x20000808

080028ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <SystemInit+0x28>)
 80028f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f6:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <SystemInit+0x28>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <SystemInit+0x28>)
 8002900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <Reset_Handler>:
 8002918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002950 <LoopForever+0x2>
 800291c:	f7ff ffe6 	bl	80028ec <SystemInit>
 8002920:	480c      	ldr	r0, [pc, #48]	; (8002954 <LoopForever+0x6>)
 8002922:	490d      	ldr	r1, [pc, #52]	; (8002958 <LoopForever+0xa>)
 8002924:	4a0d      	ldr	r2, [pc, #52]	; (800295c <LoopForever+0xe>)
 8002926:	2300      	movs	r3, #0
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:
 800292a:	58d4      	ldr	r4, [r2, r3]
 800292c:	50c4      	str	r4, [r0, r3]
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:
 8002930:	18c4      	adds	r4, r0, r3
 8002932:	428c      	cmp	r4, r1
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <LoopForever+0x12>)
 8002938:	4c0a      	ldr	r4, [pc, #40]	; (8002964 <LoopForever+0x16>)
 800293a:	2300      	movs	r3, #0
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:
 8002942:	42a2      	cmp	r2, r4
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>
 8002946:	f005 fd17 	bl	8008378 <__libc_init_array>
 800294a:	f7ff fb0d 	bl	8001f68 <main>

0800294e <LoopForever>:
 800294e:	e7fe      	b.n	800294e <LoopForever>
 8002950:	20010000 	.word	0x20010000
 8002954:	20000000 	.word	0x20000000
 8002958:	200001ec 	.word	0x200001ec
 800295c:	0800d1dc 	.word	0x0800d1dc
 8002960:	200001ec 	.word	0x200001ec
 8002964:	20000804 	.word	0x20000804

08002968 <ADC1_IRQHandler>:
 8002968:	e7fe      	b.n	8002968 <ADC1_IRQHandler>

0800296a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af04      	add	r7, sp, #16
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	9302      	str	r3, [sp, #8]
 8002988:	2301      	movs	r3, #1
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	1dfb      	adds	r3, r7, #7
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2301      	movs	r3, #1
 8002992:	2200      	movs	r2, #0
 8002994:	2178      	movs	r1, #120	; 0x78
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <ssd1306_WriteCommand+0x2c>)
 8002998:	f002 f850 	bl	8004a3c <HAL_I2C_Mem_Write>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200002d8 	.word	0x200002d8

080029a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af04      	add	r7, sp, #16
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	f04f 32ff 	mov.w	r2, #4294967295
 80029ba:	9202      	str	r2, [sp, #8]
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2301      	movs	r3, #1
 80029c4:	2240      	movs	r2, #64	; 0x40
 80029c6:	2178      	movs	r1, #120	; 0x78
 80029c8:	4803      	ldr	r0, [pc, #12]	; (80029d8 <ssd1306_WriteData+0x30>)
 80029ca:	f002 f837 	bl	8004a3c <HAL_I2C_Mem_Write>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200002d8 	.word	0x200002d8

080029dc <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80029e0:	f7ff ffc3 	bl	800296a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80029e4:	2064      	movs	r0, #100	; 0x64
 80029e6:	f000 fa6f 	bl	8002ec8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80029ea:	2000      	movs	r0, #0
 80029ec:	f000 f9da 	bl	8002da4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80029f0:	2020      	movs	r0, #32
 80029f2:	f7ff ffc1 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7ff ffbe 	bl	8002978 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80029fc:	20b0      	movs	r0, #176	; 0xb0
 80029fe:	f7ff ffbb 	bl	8002978 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002a02:	20c8      	movs	r0, #200	; 0xc8
 8002a04:	f7ff ffb8 	bl	8002978 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7ff ffb5 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002a0e:	2010      	movs	r0, #16
 8002a10:	f7ff ffb2 	bl	8002978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002a14:	2040      	movs	r0, #64	; 0x40
 8002a16:	f7ff ffaf 	bl	8002978 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002a1a:	20ff      	movs	r0, #255	; 0xff
 8002a1c:	f000 f9ae 	bl	8002d7c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002a20:	20a1      	movs	r0, #161	; 0xa1
 8002a22:	f7ff ffa9 	bl	8002978 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002a26:	20a6      	movs	r0, #166	; 0xa6
 8002a28:	f7ff ffa6 	bl	8002978 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002a2c:	20a8      	movs	r0, #168	; 0xa8
 8002a2e:	f7ff ffa3 	bl	8002978 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002a32:	203f      	movs	r0, #63	; 0x3f
 8002a34:	f7ff ffa0 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a38:	20a4      	movs	r0, #164	; 0xa4
 8002a3a:	f7ff ff9d 	bl	8002978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002a3e:	20d3      	movs	r0, #211	; 0xd3
 8002a40:	f7ff ff9a 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7ff ff97 	bl	8002978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a4a:	20d5      	movs	r0, #213	; 0xd5
 8002a4c:	f7ff ff94 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002a50:	20f0      	movs	r0, #240	; 0xf0
 8002a52:	f7ff ff91 	bl	8002978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002a56:	20d9      	movs	r0, #217	; 0xd9
 8002a58:	f7ff ff8e 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002a5c:	2022      	movs	r0, #34	; 0x22
 8002a5e:	f7ff ff8b 	bl	8002978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002a62:	20da      	movs	r0, #218	; 0xda
 8002a64:	f7ff ff88 	bl	8002978 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002a68:	2012      	movs	r0, #18
 8002a6a:	f7ff ff85 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002a6e:	20db      	movs	r0, #219	; 0xdb
 8002a70:	f7ff ff82 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002a74:	2020      	movs	r0, #32
 8002a76:	f7ff ff7f 	bl	8002978 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002a7a:	208d      	movs	r0, #141	; 0x8d
 8002a7c:	f7ff ff7c 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002a80:	2014      	movs	r0, #20
 8002a82:	f7ff ff79 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 f98c 	bl	8002da4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f000 f80f 	bl	8002ab0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002a92:	f000 f831 	bl	8002af8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <ssd1306_Init+0xd0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <ssd1306_Init+0xd0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002aa2:	4b02      	ldr	r3, [pc, #8]	; (8002aac <ssd1306_Init+0xd0>)
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	711a      	strb	r2, [r3, #4]
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200007e8 	.word	0x200007e8

08002ab0 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e00d      	b.n	8002adc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <ssd1306_Fill+0x1a>
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	e000      	b.n	8002acc <ssd1306_Fill+0x1c>
 8002aca:	21ff      	movs	r1, #255	; 0xff
 8002acc:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <ssd1306_Fill+0x44>)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d3ed      	bcc.n	8002ac0 <ssd1306_Fill+0x10>
    }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	200003e8 	.word	0x200003e8

08002af8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002afe:	2300      	movs	r3, #0
 8002b00:	71fb      	strb	r3, [r7, #7]
 8002b02:	e016      	b.n	8002b32 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	3b50      	subs	r3, #80	; 0x50
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff34 	bl	8002978 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff ff31 	bl	8002978 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002b16:	2010      	movs	r0, #16
 8002b18:	f7ff ff2e 	bl	8002978 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	01db      	lsls	r3, r3, #7
 8002b20:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <ssd1306_UpdateScreen+0x4c>)
 8002b22:	4413      	add	r3, r2
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff3e 	bl	80029a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	71fb      	strb	r3, [r7, #7]
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	2b07      	cmp	r3, #7
 8002b36:	d9e5      	bls.n	8002b04 <ssd1306_UpdateScreen+0xc>
    }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200003e8 	.word	0x200003e8

08002b48 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
 8002b52:	460b      	mov	r3, r1
 8002b54:	71bb      	strb	r3, [r7, #6]
 8002b56:	4613      	mov	r3, r2
 8002b58:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db3d      	blt.n	8002bde <ssd1306_DrawPixel+0x96>
 8002b62:	79bb      	ldrb	r3, [r7, #6]
 8002b64:	2b3f      	cmp	r3, #63	; 0x3f
 8002b66:	d83a      	bhi.n	8002bde <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002b68:	797b      	ldrb	r3, [r7, #5]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d11a      	bne.n	8002ba4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b6e:	79fa      	ldrb	r2, [r7, #7]
 8002b70:	79bb      	ldrb	r3, [r7, #6]
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	b2d8      	uxtb	r0, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	01db      	lsls	r3, r3, #7
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <ssd1306_DrawPixel+0xa4>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	b25a      	sxtb	r2, r3
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b259      	sxtb	r1, r3
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	4603      	mov	r3, r0
 8002b98:	01db      	lsls	r3, r3, #7
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b2c9      	uxtb	r1, r1
 8002b9e:	4a13      	ldr	r2, [pc, #76]	; (8002bec <ssd1306_DrawPixel+0xa4>)
 8002ba0:	54d1      	strb	r1, [r2, r3]
 8002ba2:	e01d      	b.n	8002be0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	08db      	lsrs	r3, r3, #3
 8002baa:	b2d8      	uxtb	r0, r3
 8002bac:	4603      	mov	r3, r0
 8002bae:	01db      	lsls	r3, r3, #7
 8002bb0:	4413      	add	r3, r2
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <ssd1306_DrawPixel+0xa4>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	b25a      	sxtb	r2, r3
 8002bb8:	79bb      	ldrb	r3, [r7, #6]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	b25b      	sxtb	r3, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b259      	sxtb	r1, r3
 8002bce:	79fa      	ldrb	r2, [r7, #7]
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	01db      	lsls	r3, r3, #7
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b2c9      	uxtb	r1, r1
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <ssd1306_DrawPixel+0xa4>)
 8002bda:	54d1      	strb	r1, [r2, r3]
 8002bdc:	e000      	b.n	8002be0 <ssd1306_DrawPixel+0x98>
        return;
 8002bde:	bf00      	nop
    }
}
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	200003e8 	.word	0x200003e8

08002bf0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	1d38      	adds	r0, r7, #4
 8002bfa:	e880 0006 	stmia.w	r0, {r1, r2}
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4623      	mov	r3, r4
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	4613      	mov	r3, r2
 8002c06:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b1f      	cmp	r3, #31
 8002c0c:	d902      	bls.n	8002c14 <ssd1306_WriteChar+0x24>
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b7e      	cmp	r3, #126	; 0x7e
 8002c12:	d901      	bls.n	8002c18 <ssd1306_WriteChar+0x28>
        return 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e06d      	b.n	8002cf4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c18:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <ssd1306_WriteChar+0x10c>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	793b      	ldrb	r3, [r7, #4]
 8002c20:	4413      	add	r3, r2
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	dc06      	bgt.n	8002c34 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002c26:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <ssd1306_WriteChar+0x10c>)
 8002c28:	885b      	ldrh	r3, [r3, #2]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	797b      	ldrb	r3, [r7, #5]
 8002c2e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c30:	2b40      	cmp	r3, #64	; 0x40
 8002c32:	dd01      	ble.n	8002c38 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e05d      	b.n	8002cf4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e04c      	b.n	8002cd8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	3b20      	subs	r3, #32
 8002c44:	7979      	ldrb	r1, [r7, #5]
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	440b      	add	r3, r1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e034      	b.n	8002cc8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d012      	beq.n	8002c94 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002c6e:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <ssd1306_WriteChar+0x10c>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	b2d8      	uxtb	r0, r3
 8002c7c:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <ssd1306_WriteChar+0x10c>)
 8002c7e:	885b      	ldrh	r3, [r3, #2]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	7bba      	ldrb	r2, [r7, #14]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f7ff ff5b 	bl	8002b48 <ssd1306_DrawPixel>
 8002c92:	e016      	b.n	8002cc2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <ssd1306_WriteChar+0x10c>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	b2d8      	uxtb	r0, r3
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <ssd1306_WriteChar+0x10c>)
 8002ca4:	885b      	ldrh	r3, [r3, #2]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	b2d9      	uxtb	r1, r3
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f7ff ff43 	bl	8002b48 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	793b      	ldrb	r3, [r7, #4]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d3c5      	bcc.n	8002c5e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	797b      	ldrb	r3, [r7, #5]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d3ad      	bcc.n	8002c3e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <ssd1306_WriteChar+0x10c>)
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	793b      	ldrb	r3, [r7, #4]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <ssd1306_WriteChar+0x10c>)
 8002cf0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3724      	adds	r7, #36	; 0x24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}
 8002cfc:	200007e8 	.word	0x200007e8

08002d00 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	1d38      	adds	r0, r7, #4
 8002d0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8002d0e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002d10:	e012      	b.n	8002d38 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	7818      	ldrb	r0, [r3, #0]
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	1d3a      	adds	r2, r7, #4
 8002d1a:	ca06      	ldmia	r2, {r1, r2}
 8002d1c:	f7ff ff68 	bl	8002bf0 <ssd1306_WriteChar>
 8002d20:	4603      	mov	r3, r0
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d002      	beq.n	8002d32 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	e008      	b.n	8002d44 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3301      	adds	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e8      	bne.n	8002d12 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	781b      	ldrb	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	460a      	mov	r2, r1
 8002d56:	71fb      	strb	r3, [r7, #7]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <ssd1306_SetCursor+0x2c>)
 8002d62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002d64:	79bb      	ldrb	r3, [r7, #6]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <ssd1306_SetCursor+0x2c>)
 8002d6a:	805a      	strh	r2, [r3, #2]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	200007e8 	.word	0x200007e8

08002d7c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002d86:	2381      	movs	r3, #129	; 0x81
 8002d88:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fdf3 	bl	8002978 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fdef 	bl	8002978 <ssd1306_WriteCommand>
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002db4:	23af      	movs	r3, #175	; 0xaf
 8002db6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <ssd1306_SetDisplayOn+0x38>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	715a      	strb	r2, [r3, #5]
 8002dbe:	e004      	b.n	8002dca <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002dc0:	23ae      	movs	r3, #174	; 0xae
 8002dc2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <ssd1306_SetDisplayOn+0x38>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fdd3 	bl	8002978 <ssd1306_WriteCommand>
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200007e8 	.word	0x200007e8

08002de0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dea:	2003      	movs	r0, #3
 8002dec:	f000 ffba 	bl	8003d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002df0:	2000      	movs	r0, #0
 8002df2:	f000 f80d 	bl	8002e10 <HAL_InitTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	e001      	b.n	8002e06 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e02:	f7ff faad 	bl	8002360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e06:	79fb      	ldrb	r3, [r7, #7]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_InitTick+0x6c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_InitTick+0x70>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <HAL_InitTick+0x6c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 ffd5 	bl	8003dea <HAL_SYSTICK_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d809      	bhi.n	8002e60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f000 ff91 	bl	8003d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_InitTick+0x74>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e007      	b.n	8002e70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e004      	b.n	8002e70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	e001      	b.n	8002e70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000018 	.word	0x20000018
 8002e80:	20000000 	.word	0x20000000
 8002e84:	20000014 	.word	0x20000014

08002e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_IncTick+0x20>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x24>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_IncTick+0x24>)
 8002e9a:	6013      	str	r3, [r2, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000018 	.word	0x20000018
 8002eac:	200007f0 	.word	0x200007f0

08002eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_GetTick+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	200007f0 	.word	0x200007f0

08002ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff ffee 	bl	8002eb0 <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d005      	beq.n	8002eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_Delay+0x44>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eee:	bf00      	nop
 8002ef0:	f7ff ffde 	bl	8002eb0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d8f7      	bhi.n	8002ef0 <HAL_Delay+0x28>
  {
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000018 	.word	0x20000018

08002f10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0ed      	b.n	80030fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fa3a 	bl	80023a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f44:	f7ff ffb4 	bl	8002eb0 <HAL_GetTick>
 8002f48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f4a:	e012      	b.n	8002f72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f4c:	f7ff ffb0 	bl	8002eb0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b0a      	cmp	r3, #10
 8002f58:	d90b      	bls.n	8002f72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2205      	movs	r2, #5
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0c5      	b.n	80030fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0e5      	beq.n	8002f4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0202 	bic.w	r2, r2, #2
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f90:	f7ff ff8e 	bl	8002eb0 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f96:	e012      	b.n	8002fbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f98:	f7ff ff8a 	bl	8002eb0 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b0a      	cmp	r3, #10
 8002fa4:	d90b      	bls.n	8002fbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2205      	movs	r2, #5
 8002fb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e09f      	b.n	80030fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e5      	bne.n	8002f98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7e1b      	ldrb	r3, [r3, #24]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d108      	bne.n	8002fe6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e007      	b.n	8002ff6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7e5b      	ldrb	r3, [r3, #25]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d108      	bne.n	8003010 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e007      	b.n	8003020 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7e9b      	ldrb	r3, [r3, #26]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d108      	bne.n	800303a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0220 	orr.w	r2, r2, #32
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e007      	b.n	800304a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0220 	bic.w	r2, r2, #32
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7edb      	ldrb	r3, [r3, #27]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0210 	bic.w	r2, r2, #16
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e007      	b.n	8003074 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0210 	orr.w	r2, r2, #16
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7f1b      	ldrb	r3, [r3, #28]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d108      	bne.n	800308e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e007      	b.n	800309e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0208 	bic.w	r2, r2, #8
 800309c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7f5b      	ldrb	r3, [r3, #29]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d108      	bne.n	80030b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0204 	orr.w	r2, r2, #4
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e007      	b.n	80030c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0204 	bic.w	r2, r2, #4
 80030c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	ea42 0103 	orr.w	r1, r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	1e5a      	subs	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003106:	b480      	push	{r7}
 8003108:	b087      	sub	sp, #28
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d003      	beq.n	800312c <HAL_CAN_ConfigFilter+0x26>
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b02      	cmp	r3, #2
 8003128:	f040 80aa 	bne.w	8003280 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2201      	movs	r2, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d123      	bne.n	80031ae <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43db      	mvns	r3, r3
 8003170:	401a      	ands	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003188:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3248      	adds	r2, #72	; 0x48
 800318e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031a4:	6979      	ldr	r1, [r7, #20]
 80031a6:	3348      	adds	r3, #72	; 0x48
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d122      	bne.n	80031fc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	431a      	orrs	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80031d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3248      	adds	r2, #72	; 0x48
 80031dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031f2:	6979      	ldr	r1, [r7, #20]
 80031f4:	3348      	adds	r3, #72	; 0x48
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	440b      	add	r3, r1
 80031fa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	43db      	mvns	r3, r3
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003216:	e007      	b.n	8003228 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	431a      	orrs	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	43db      	mvns	r3, r3
 800323a:	401a      	ands	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003242:	e007      	b.n	8003254 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	431a      	orrs	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	431a      	orrs	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e006      	b.n	800328e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d12e      	bne.n	800330c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032c6:	f7ff fdf3 	bl	8002eb0 <HAL_GetTick>
 80032ca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032cc:	e012      	b.n	80032f4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032ce:	f7ff fdef 	bl	8002eb0 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b0a      	cmp	r3, #10
 80032da:	d90b      	bls.n	80032f4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2205      	movs	r2, #5
 80032ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e012      	b.n	800331a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	e006      	b.n	800331a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003322:	b480      	push	{r7}
 8003324:	b089      	sub	sp, #36	; 0x24
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003336:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003340:	7ffb      	ldrb	r3, [r7, #31]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d003      	beq.n	800334e <HAL_CAN_AddTxMessage+0x2c>
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	2b02      	cmp	r3, #2
 800334a:	f040 80ad 	bne.w	80034a8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8095 	beq.w	8003498 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	0e1b      	lsrs	r3, r3, #24
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003378:	2201      	movs	r2, #1
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	409a      	lsls	r2, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10d      	bne.n	80033a6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003394:	68f9      	ldr	r1, [r7, #12]
 8003396:	6809      	ldr	r1, [r1, #0]
 8003398:	431a      	orrs	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3318      	adds	r3, #24
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	440b      	add	r3, r1
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e00f      	b.n	80033c6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033b6:	68f9      	ldr	r1, [r7, #12]
 80033b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80033ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	3318      	adds	r3, #24
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	440b      	add	r3, r1
 80033c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3318      	adds	r3, #24
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	440b      	add	r3, r1
 80033d6:	3304      	adds	r3, #4
 80033d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	7d1b      	ldrb	r3, [r3, #20]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d111      	bne.n	8003406 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3318      	adds	r3, #24
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	6811      	ldr	r1, [r2, #0]
 80033f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	3318      	adds	r3, #24
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	440b      	add	r3, r1
 8003402:	3304      	adds	r3, #4
 8003404:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3307      	adds	r3, #7
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	061a      	lsls	r2, r3, #24
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3306      	adds	r3, #6
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3305      	adds	r3, #5
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	4313      	orrs	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	3204      	adds	r2, #4
 8003426:	7812      	ldrb	r2, [r2, #0]
 8003428:	4610      	mov	r0, r2
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	6811      	ldr	r1, [r2, #0]
 800342e:	ea43 0200 	orr.w	r2, r3, r0
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	440b      	add	r3, r1
 8003438:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800343c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3303      	adds	r3, #3
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	061a      	lsls	r2, r3, #24
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3302      	adds	r3, #2
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3301      	adds	r3, #1
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	4313      	orrs	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	7812      	ldrb	r2, [r2, #0]
 800345e:	4610      	mov	r0, r2
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	6811      	ldr	r1, [r2, #0]
 8003464:	ea43 0200 	orr.w	r2, r3, r0
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	440b      	add	r3, r1
 800346e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003472:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3318      	adds	r3, #24
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	4413      	add	r3, r2
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	6811      	ldr	r1, [r2, #0]
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	3318      	adds	r3, #24
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	440b      	add	r3, r1
 8003492:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	e00e      	b.n	80034b6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e006      	b.n	80034b6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034c2:	b480      	push	{r7}
 80034c4:	b087      	sub	sp, #28
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d003      	beq.n	80034e6 <HAL_CAN_GetRxMessage+0x24>
 80034de:	7dfb      	ldrb	r3, [r7, #23]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	f040 80f3 	bne.w	80036cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10e      	bne.n	800350a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d116      	bne.n	8003528 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0e7      	b.n	80036da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d107      	bne.n	8003528 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0d8      	b.n	80036da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	331b      	adds	r3, #27
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	4413      	add	r3, r2
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0204 	and.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10c      	bne.n	8003560 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	331b      	adds	r3, #27
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	4413      	add	r3, r2
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0d5b      	lsrs	r3, r3, #21
 8003556:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e00b      	b.n	8003578 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	331b      	adds	r3, #27
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	4413      	add	r3, r2
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	331b      	adds	r3, #27
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	4413      	add	r3, r2
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0202 	and.w	r2, r3, #2
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	331b      	adds	r3, #27
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	4413      	add	r3, r2
 800359a:	3304      	adds	r3, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 020f 	and.w	r2, r3, #15
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	331b      	adds	r3, #27
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	4413      	add	r3, r2
 80035b2:	3304      	adds	r3, #4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	331b      	adds	r3, #27
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	4413      	add	r3, r2
 80035e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0a1a      	lsrs	r2, r3, #8
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	4413      	add	r3, r2
 8003610:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0c1a      	lsrs	r2, r3, #16
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	3302      	adds	r3, #2
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	4413      	add	r3, r2
 800362a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e1a      	lsrs	r2, r3, #24
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	3303      	adds	r3, #3
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	4413      	add	r3, r2
 8003644:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	3304      	adds	r3, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	4413      	add	r3, r2
 800365c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	0a1a      	lsrs	r2, r3, #8
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	3305      	adds	r3, #5
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	4413      	add	r3, r2
 8003676:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0c1a      	lsrs	r2, r3, #16
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	3306      	adds	r3, #6
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	4413      	add	r3, r2
 8003690:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0e1a      	lsrs	r2, r3, #24
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	3307      	adds	r3, #7
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d108      	bne.n	80036b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0220 	orr.w	r2, r2, #32
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e007      	b.n	80036c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0220 	orr.w	r2, r2, #32
 80036c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e006      	b.n	80036da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
  }
}
 80036da:	4618      	mov	r0, r3
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b085      	sub	sp, #20
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d002      	beq.n	8003704 <HAL_CAN_ActivateNotification+0x1e>
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d109      	bne.n	8003718 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6959      	ldr	r1, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e006      	b.n	8003726 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b08a      	sub	sp, #40	; 0x28
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d07c      	beq.n	8003872 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d023      	beq.n	80037ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2201      	movs	r2, #1
 8003788:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f983 	bl	8003aa0 <HAL_CAN_TxMailbox0CompleteCallback>
 800379a:	e016      	b.n	80037ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	e00c      	b.n	80037ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
 80037c2:	e002      	b.n	80037ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f989 	bl	8003adc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d024      	beq.n	800381e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f963 	bl	8003ab4 <HAL_CAN_TxMailbox1CompleteCallback>
 80037ee:	e016      	b.n	800381e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d004      	beq.n	8003804 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	e00c      	b.n	800381e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380a:	2b00      	cmp	r3, #0
 800380c:	d004      	beq.n	8003818 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e002      	b.n	800381e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f969 	bl	8003af0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d024      	beq.n	8003872 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003830:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f943 	bl	8003ac8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003842:	e016      	b.n	8003872 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	e00c      	b.n	8003872 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	e002      	b.n	8003872 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f949 	bl	8003b04 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00c      	beq.n	8003896 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0310 	and.w	r3, r3, #16
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800388c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2210      	movs	r2, #16
 8003894:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d006      	beq.n	80038b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2208      	movs	r2, #8
 80038b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f930 	bl	8003b18 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fd fba5 	bl	8001020 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00c      	beq.n	80038fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2210      	movs	r2, #16
 80038f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d006      	beq.n	800391c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2208      	movs	r2, #8
 8003914:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f912 	bl	8003b40 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f8f9 	bl	8003b2c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	d006      	beq.n	800395c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2210      	movs	r2, #16
 8003954:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8fc 	bl	8003b54 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d006      	beq.n	800397e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f8f5 	bl	8003b68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d07b      	beq.n	8003a80 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d072      	beq.n	8003a78 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d043      	beq.n	8003a78 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d03e      	beq.n	8003a78 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a00:	2b60      	cmp	r3, #96	; 0x60
 8003a02:	d02b      	beq.n	8003a5c <HAL_CAN_IRQHandler+0x32a>
 8003a04:	2b60      	cmp	r3, #96	; 0x60
 8003a06:	d82e      	bhi.n	8003a66 <HAL_CAN_IRQHandler+0x334>
 8003a08:	2b50      	cmp	r3, #80	; 0x50
 8003a0a:	d022      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x320>
 8003a0c:	2b50      	cmp	r3, #80	; 0x50
 8003a0e:	d82a      	bhi.n	8003a66 <HAL_CAN_IRQHandler+0x334>
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d019      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x316>
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d826      	bhi.n	8003a66 <HAL_CAN_IRQHandler+0x334>
 8003a18:	2b30      	cmp	r3, #48	; 0x30
 8003a1a:	d010      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x30c>
 8003a1c:	2b30      	cmp	r3, #48	; 0x30
 8003a1e:	d822      	bhi.n	8003a66 <HAL_CAN_IRQHandler+0x334>
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d002      	beq.n	8003a2a <HAL_CAN_IRQHandler+0x2f8>
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d005      	beq.n	8003a34 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a28:	e01d      	b.n	8003a66 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	f043 0308 	orr.w	r3, r3, #8
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a32:	e019      	b.n	8003a68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	f043 0310 	orr.w	r3, r3, #16
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a3c:	e014      	b.n	8003a68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	f043 0320 	orr.w	r3, r3, #32
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a46:	e00f      	b.n	8003a68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a50:	e00a      	b.n	8003a68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a5a:	e005      	b.n	8003a68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a64:	e000      	b.n	8003a68 <HAL_CAN_IRQHandler+0x336>
            break;
 8003a66:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a76:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fb0c 	bl	80010b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a98:	bf00      	nop
 8003a9a:	3728      	adds	r7, #40	; 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bae:	4a04      	ldr	r2, [pc, #16]	; (8003bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	60d3      	str	r3, [r2, #12]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <__NVIC_GetPriorityGrouping+0x18>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	f003 0307 	and.w	r3, r3, #7
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	db0b      	blt.n	8003c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	f003 021f 	and.w	r2, r3, #31
 8003bf8:	4907      	ldr	r1, [pc, #28]	; (8003c18 <__NVIC_EnableIRQ+0x38>)
 8003bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2001      	movs	r0, #1
 8003c02:	fa00 f202 	lsl.w	r2, r0, r2
 8003c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	e000e100 	.word	0xe000e100

08003c1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	db12      	blt.n	8003c54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	f003 021f 	and.w	r2, r3, #31
 8003c34:	490a      	ldr	r1, [pc, #40]	; (8003c60 <__NVIC_DisableIRQ+0x44>)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c42:	3320      	adds	r3, #32
 8003c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c48:	f3bf 8f4f 	dsb	sy
}
 8003c4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c4e:	f3bf 8f6f 	isb	sy
}
 8003c52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db0a      	blt.n	8003c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	490c      	ldr	r1, [pc, #48]	; (8003cb0 <__NVIC_SetPriority+0x4c>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	440b      	add	r3, r1
 8003c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c8c:	e00a      	b.n	8003ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <__NVIC_SetPriority+0x50>)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	761a      	strb	r2, [r3, #24]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000e100 	.word	0xe000e100
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf28      	it	cs
 8003cd6:	2304      	movcs	r3, #4
 8003cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d902      	bls.n	8003ce8 <NVIC_EncodePriority+0x30>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b03      	subs	r3, #3
 8003ce6:	e000      	b.n	8003cea <NVIC_EncodePriority+0x32>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43d9      	mvns	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	4313      	orrs	r3, r2
         );
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	; 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d30:	d301      	bcc.n	8003d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00f      	b.n	8003d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <SysTick_Config+0x40>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3e:	210f      	movs	r1, #15
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	f7ff ff8e 	bl	8003c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <SysTick_Config+0x40>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <SysTick_Config+0x40>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000e010 	.word	0xe000e010

08003d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ff05 	bl	8003b7c <__NVIC_SetPriorityGrouping>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d8c:	f7ff ff1a 	bl	8003bc4 <__NVIC_GetPriorityGrouping>
 8003d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	6978      	ldr	r0, [r7, #20]
 8003d98:	f7ff ff8e 	bl	8003cb8 <NVIC_EncodePriority>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff5d 	bl	8003c64 <__NVIC_SetPriority>
}
 8003daa:	bf00      	nop
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff0d 	bl	8003be0 <__NVIC_EnableIRQ>
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff1d 	bl	8003c1c <__NVIC_DisableIRQ>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ff94 	bl	8003d20 <SysTick_Config>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e098      	b.n	8003f48 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b4d      	ldr	r3, [pc, #308]	; (8003f54 <HAL_DMA_Init+0x150>)
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d80f      	bhi.n	8003e42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	4b4b      	ldr	r3, [pc, #300]	; (8003f58 <HAL_DMA_Init+0x154>)
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a4b      	ldr	r2, [pc, #300]	; (8003f5c <HAL_DMA_Init+0x158>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	009a      	lsls	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a48      	ldr	r2, [pc, #288]	; (8003f60 <HAL_DMA_Init+0x15c>)
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003e40:	e00e      	b.n	8003e60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b46      	ldr	r3, [pc, #280]	; (8003f64 <HAL_DMA_Init+0x160>)
 8003e4a:	4413      	add	r3, r2
 8003e4c:	4a43      	ldr	r2, [pc, #268]	; (8003f5c <HAL_DMA_Init+0x158>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	009a      	lsls	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a42      	ldr	r2, [pc, #264]	; (8003f68 <HAL_DMA_Init+0x164>)
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eba:	d039      	beq.n	8003f30 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <HAL_DMA_Init+0x15c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d11a      	bne.n	8003efc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ec6:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <HAL_DMA_Init+0x168>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f003 031c 	and.w	r3, r3, #28
 8003ed2:	210f      	movs	r1, #15
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	4924      	ldr	r1, [pc, #144]	; (8003f6c <HAL_DMA_Init+0x168>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ee0:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_DMA_Init+0x168>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6859      	ldr	r1, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eec:	f003 031c 	and.w	r3, r3, #28
 8003ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef4:	491d      	ldr	r1, [pc, #116]	; (8003f6c <HAL_DMA_Init+0x168>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	600b      	str	r3, [r1, #0]
 8003efa:	e019      	b.n	8003f30 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003efc:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <HAL_DMA_Init+0x16c>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	f003 031c 	and.w	r3, r3, #28
 8003f08:	210f      	movs	r1, #15
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	4917      	ldr	r1, [pc, #92]	; (8003f70 <HAL_DMA_Init+0x16c>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <HAL_DMA_Init+0x16c>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f003 031c 	and.w	r3, r3, #28
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	4911      	ldr	r1, [pc, #68]	; (8003f70 <HAL_DMA_Init+0x16c>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40020407 	.word	0x40020407
 8003f58:	bffdfff8 	.word	0xbffdfff8
 8003f5c:	cccccccd 	.word	0xcccccccd
 8003f60:	40020000 	.word	0x40020000
 8003f64:	bffdfbf8 	.word	0xbffdfbf8
 8003f68:	40020400 	.word	0x40020400
 8003f6c:	400200a8 	.word	0x400200a8
 8003f70:	400204a8 	.word	0x400204a8

08003f74 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e072      	b.n	800406c <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b36      	ldr	r3, [pc, #216]	; (8004078 <HAL_DMA_DeInit+0x104>)
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d80f      	bhi.n	8003fc2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4b34      	ldr	r3, [pc, #208]	; (800407c <HAL_DMA_DeInit+0x108>)
 8003faa:	4413      	add	r3, r2
 8003fac:	4a34      	ldr	r2, [pc, #208]	; (8004080 <HAL_DMA_DeInit+0x10c>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	009a      	lsls	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a31      	ldr	r2, [pc, #196]	; (8004084 <HAL_DMA_DeInit+0x110>)
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
 8003fc0:	e00e      	b.n	8003fe0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <HAL_DMA_DeInit+0x114>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <HAL_DMA_DeInit+0x10c>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	009a      	lsls	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2b      	ldr	r2, [pc, #172]	; (800408c <HAL_DMA_DeInit+0x118>)
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fec:	f003 021c 	and.w	r2, r3, #28
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffa:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	4a20      	ldr	r2, [pc, #128]	; (8004084 <HAL_DMA_DeInit+0x110>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10d      	bne.n	8004022 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <HAL_DMA_DeInit+0x11c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f003 031c 	and.w	r3, r3, #28
 8004012:	210f      	movs	r1, #15
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	491d      	ldr	r1, [pc, #116]	; (8004090 <HAL_DMA_DeInit+0x11c>)
 800401c:	4013      	ands	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
 8004020:	e00c      	b.n	800403c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004022:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <HAL_DMA_DeInit+0x120>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	f003 031c 	and.w	r3, r3, #28
 800402e:	210f      	movs	r1, #15
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	4917      	ldr	r1, [pc, #92]	; (8004094 <HAL_DMA_DeInit+0x120>)
 8004038:	4013      	ands	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40020407 	.word	0x40020407
 800407c:	bffdfff8 	.word	0xbffdfff8
 8004080:	cccccccd 	.word	0xcccccccd
 8004084:	40020000 	.word	0x40020000
 8004088:	bffdfbf8 	.word	0xbffdfbf8
 800408c:	40020400 	.word	0x40020400
 8004090:	400200a8 	.word	0x400200a8
 8004094:	400204a8 	.word	0x400204a8

08004098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_DMA_Start_IT+0x20>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e04b      	b.n	8004150 <HAL_DMA_Start_IT+0xb8>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d13a      	bne.n	8004142 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f95f 	bl	80043b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 020e 	orr.w	r2, r2, #14
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e00f      	b.n	8004130 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0204 	bic.w	r2, r2, #4
 800411e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 020a 	orr.w	r2, r2, #10
 800412e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e005      	b.n	800414e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800414a:	2302      	movs	r3, #2
 800414c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800414e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d008      	beq.n	8004182 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2204      	movs	r2, #4
 8004174:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e022      	b.n	80041c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 020e 	bic.w	r2, r2, #14
 8004190:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f003 021c 	and.w	r2, r3, #28
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2101      	movs	r1, #1
 80041b0:	fa01 f202 	lsl.w	r2, r1, r2
 80041b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d005      	beq.n	80041f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2204      	movs	r2, #4
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	e029      	b.n	800424c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 020e 	bic.w	r2, r2, #14
 8004206:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	f003 021c 	and.w	r2, r3, #28
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f202 	lsl.w	r2, r1, r2
 800422a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
    }
  }
  return status;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f003 031c 	and.w	r3, r3, #28
 8004276:	2204      	movs	r2, #4
 8004278:	409a      	lsls	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4013      	ands	r3, r2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d026      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x7a>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d021      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d107      	bne.n	80042aa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0204 	bic.w	r2, r2, #4
 80042a8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	f003 021c 	and.w	r2, r3, #28
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2104      	movs	r1, #4
 80042b8:	fa01 f202 	lsl.w	r2, r1, r2
 80042bc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d071      	beq.n	80043aa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80042ce:	e06c      	b.n	80043aa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	f003 031c 	and.w	r3, r3, #28
 80042d8:	2202      	movs	r2, #2
 80042da:	409a      	lsls	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d02e      	beq.n	8004342 <HAL_DMA_IRQHandler+0xec>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d029      	beq.n	8004342 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 020a 	bic.w	r2, r2, #10
 800430a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	f003 021c 	and.w	r2, r3, #28
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2102      	movs	r1, #2
 8004322:	fa01 f202 	lsl.w	r2, r1, r2
 8004326:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d038      	beq.n	80043aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004340:	e033      	b.n	80043aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f003 031c 	and.w	r3, r3, #28
 800434a:	2208      	movs	r2, #8
 800434c:	409a      	lsls	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02a      	beq.n	80043ac <HAL_DMA_IRQHandler+0x156>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d025      	beq.n	80043ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020e 	bic.w	r2, r2, #14
 800436e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	f003 021c 	and.w	r2, r3, #28
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f202 	lsl.w	r2, r1, r2
 8004382:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
}
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f003 021c 	and.w	r2, r3, #28
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	2101      	movs	r1, #1
 80043d0:	fa01 f202 	lsl.w	r2, r1, r2
 80043d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d108      	bne.n	80043f8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043f6:	e007      	b.n	8004408 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004422:	e154      	b.n	80046ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2101      	movs	r1, #1
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	fa01 f303 	lsl.w	r3, r1, r3
 8004430:	4013      	ands	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8146 	beq.w	80046c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d005      	beq.n	8004454 <HAL_GPIO_Init+0x40>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d130      	bne.n	80044b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	2203      	movs	r2, #3
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4013      	ands	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800448a:	2201      	movs	r2, #1
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	f003 0201 	and.w	r2, r3, #1
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d017      	beq.n	80044f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	2203      	movs	r2, #3
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d123      	bne.n	8004546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	08da      	lsrs	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3208      	adds	r2, #8
 8004506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	220f      	movs	r2, #15
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	08da      	lsrs	r2, r3, #3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3208      	adds	r2, #8
 8004540:	6939      	ldr	r1, [r7, #16]
 8004542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	2203      	movs	r2, #3
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 0203 	and.w	r2, r3, #3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80a0 	beq.w	80046c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004588:	4b58      	ldr	r3, [pc, #352]	; (80046ec <HAL_GPIO_Init+0x2d8>)
 800458a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458c:	4a57      	ldr	r2, [pc, #348]	; (80046ec <HAL_GPIO_Init+0x2d8>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6613      	str	r3, [r2, #96]	; 0x60
 8004594:	4b55      	ldr	r3, [pc, #340]	; (80046ec <HAL_GPIO_Init+0x2d8>)
 8004596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045a0:	4a53      	ldr	r2, [pc, #332]	; (80046f0 <HAL_GPIO_Init+0x2dc>)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	3302      	adds	r3, #2
 80045a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	220f      	movs	r2, #15
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4013      	ands	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045ca:	d019      	beq.n	8004600 <HAL_GPIO_Init+0x1ec>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a49      	ldr	r2, [pc, #292]	; (80046f4 <HAL_GPIO_Init+0x2e0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d013      	beq.n	80045fc <HAL_GPIO_Init+0x1e8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a48      	ldr	r2, [pc, #288]	; (80046f8 <HAL_GPIO_Init+0x2e4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00d      	beq.n	80045f8 <HAL_GPIO_Init+0x1e4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a47      	ldr	r2, [pc, #284]	; (80046fc <HAL_GPIO_Init+0x2e8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <HAL_GPIO_Init+0x1e0>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a46      	ldr	r2, [pc, #280]	; (8004700 <HAL_GPIO_Init+0x2ec>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d101      	bne.n	80045f0 <HAL_GPIO_Init+0x1dc>
 80045ec:	2304      	movs	r3, #4
 80045ee:	e008      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045f0:	2307      	movs	r3, #7
 80045f2:	e006      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045f4:	2303      	movs	r3, #3
 80045f6:	e004      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e002      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 8004600:	2300      	movs	r3, #0
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	f002 0203 	and.w	r2, r2, #3
 8004608:	0092      	lsls	r2, r2, #2
 800460a:	4093      	lsls	r3, r2
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004612:	4937      	ldr	r1, [pc, #220]	; (80046f0 <HAL_GPIO_Init+0x2dc>)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	3302      	adds	r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004620:	4b38      	ldr	r3, [pc, #224]	; (8004704 <HAL_GPIO_Init+0x2f0>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	43db      	mvns	r3, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004644:	4a2f      	ldr	r2, [pc, #188]	; (8004704 <HAL_GPIO_Init+0x2f0>)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800464a:	4b2e      	ldr	r3, [pc, #184]	; (8004704 <HAL_GPIO_Init+0x2f0>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	43db      	mvns	r3, r3
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4013      	ands	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800466e:	4a25      	ldr	r2, [pc, #148]	; (8004704 <HAL_GPIO_Init+0x2f0>)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004674:	4b23      	ldr	r3, [pc, #140]	; (8004704 <HAL_GPIO_Init+0x2f0>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	43db      	mvns	r3, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004698:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <HAL_GPIO_Init+0x2f0>)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800469e:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_GPIO_Init+0x2f0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4013      	ands	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046c2:	4a10      	ldr	r2, [pc, #64]	; (8004704 <HAL_GPIO_Init+0x2f0>)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	3301      	adds	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f47f aea3 	bne.w	8004424 <HAL_GPIO_Init+0x10>
  }
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40010000 	.word	0x40010000
 80046f4:	48000400 	.word	0x48000400
 80046f8:	48000800 	.word	0x48000800
 80046fc:	48000c00 	.word	0x48000c00
 8004700:	48001000 	.word	0x48001000
 8004704:	40010400 	.word	0x40010400

08004708 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004716:	e0b7      	b.n	8004888 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004718:	2201      	movs	r2, #1
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80aa 	beq.w	8004882 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800472e:	4a5d      	ldr	r2, [pc, #372]	; (80048a4 <HAL_GPIO_DeInit+0x19c>)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	3302      	adds	r3, #2
 8004736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	220f      	movs	r2, #15
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4013      	ands	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004756:	d019      	beq.n	800478c <HAL_GPIO_DeInit+0x84>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a53      	ldr	r2, [pc, #332]	; (80048a8 <HAL_GPIO_DeInit+0x1a0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <HAL_GPIO_DeInit+0x80>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a52      	ldr	r2, [pc, #328]	; (80048ac <HAL_GPIO_DeInit+0x1a4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00d      	beq.n	8004784 <HAL_GPIO_DeInit+0x7c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a51      	ldr	r2, [pc, #324]	; (80048b0 <HAL_GPIO_DeInit+0x1a8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <HAL_GPIO_DeInit+0x78>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a50      	ldr	r2, [pc, #320]	; (80048b4 <HAL_GPIO_DeInit+0x1ac>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d101      	bne.n	800477c <HAL_GPIO_DeInit+0x74>
 8004778:	2304      	movs	r3, #4
 800477a:	e008      	b.n	800478e <HAL_GPIO_DeInit+0x86>
 800477c:	2307      	movs	r3, #7
 800477e:	e006      	b.n	800478e <HAL_GPIO_DeInit+0x86>
 8004780:	2303      	movs	r3, #3
 8004782:	e004      	b.n	800478e <HAL_GPIO_DeInit+0x86>
 8004784:	2302      	movs	r3, #2
 8004786:	e002      	b.n	800478e <HAL_GPIO_DeInit+0x86>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <HAL_GPIO_DeInit+0x86>
 800478c:	2300      	movs	r3, #0
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	f002 0203 	and.w	r2, r2, #3
 8004794:	0092      	lsls	r2, r2, #2
 8004796:	4093      	lsls	r3, r2
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	429a      	cmp	r2, r3
 800479c:	d132      	bne.n	8004804 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800479e:	4b46      	ldr	r3, [pc, #280]	; (80048b8 <HAL_GPIO_DeInit+0x1b0>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	4944      	ldr	r1, [pc, #272]	; (80048b8 <HAL_GPIO_DeInit+0x1b0>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80047ac:	4b42      	ldr	r3, [pc, #264]	; (80048b8 <HAL_GPIO_DeInit+0x1b0>)
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	43db      	mvns	r3, r3
 80047b4:	4940      	ldr	r1, [pc, #256]	; (80048b8 <HAL_GPIO_DeInit+0x1b0>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80047ba:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <HAL_GPIO_DeInit+0x1b0>)
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	493d      	ldr	r1, [pc, #244]	; (80048b8 <HAL_GPIO_DeInit+0x1b0>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80047c8:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_GPIO_DeInit+0x1b0>)
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	4939      	ldr	r1, [pc, #228]	; (80048b8 <HAL_GPIO_DeInit+0x1b0>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	220f      	movs	r2, #15
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80047e6:	4a2f      	ldr	r2, [pc, #188]	; (80048a4 <HAL_GPIO_DeInit+0x19c>)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	43da      	mvns	r2, r3
 80047f6:	482b      	ldr	r0, [pc, #172]	; (80048a4 <HAL_GPIO_DeInit+0x19c>)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	400a      	ands	r2, r1
 80047fe:	3302      	adds	r3, #2
 8004800:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2103      	movs	r1, #3
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	08da      	lsrs	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3208      	adds	r2, #8
 8004820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	220f      	movs	r2, #15
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	08d2      	lsrs	r2, r2, #3
 8004838:	4019      	ands	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3208      	adds	r2, #8
 800483e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	2103      	movs	r1, #3
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	401a      	ands	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	2101      	movs	r1, #1
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	401a      	ands	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	2103      	movs	r1, #3
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	401a      	ands	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	3301      	adds	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	f47f af41 	bne.w	8004718 <HAL_GPIO_DeInit+0x10>
  }
}
 8004896:	bf00      	nop
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40010000 	.word	0x40010000
 80048a8:	48000400 	.word	0x48000400
 80048ac:	48000800 	.word	0x48000800
 80048b0:	48000c00 	.word	0x48000c00
 80048b4:	48001000 	.word	0x48001000
 80048b8:	40010400 	.word	0x40010400

080048bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
 80048c8:	4613      	mov	r3, r2
 80048ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048cc:	787b      	ldrb	r3, [r7, #1]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048d8:	e002      	b.n	80048e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048da:	887a      	ldrh	r2, [r7, #2]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004902:	4a05      	ldr	r2, [pc, #20]	; (8004918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fb0e 	bl	8001f2c <HAL_GPIO_EXTI_Callback>
  }
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40010400 	.word	0x40010400

0800491c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e081      	b.n	8004a32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd fd84 	bl	8002450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2224      	movs	r2, #36	; 0x24
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800496c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800497c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d107      	bne.n	8004996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	e006      	b.n	80049a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d104      	bne.n	80049b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	817b      	strh	r3, [r7, #10]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	813b      	strh	r3, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	f040 80f9 	bne.w	8004c56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_I2C_Mem_Write+0x34>
 8004a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0ed      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_I2C_Mem_Write+0x4e>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e0e6      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a92:	f7fe fa0d 	bl	8002eb0 <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2319      	movs	r3, #25
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f955 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0d1      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2221      	movs	r2, #33	; 0x21
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2240      	movs	r2, #64	; 0x40
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004adc:	88f8      	ldrh	r0, [r7, #6]
 8004ade:	893a      	ldrh	r2, [r7, #8]
 8004ae0:	8979      	ldrh	r1, [r7, #10]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	4603      	mov	r3, r0
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f8b9 	bl	8004c64 <I2C_RequestMemoryWrite>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0a9      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2bff      	cmp	r3, #255	; 0xff
 8004b0c:	d90e      	bls.n	8004b2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	22ff      	movs	r2, #255	; 0xff
 8004b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	8979      	ldrh	r1, [r7, #10]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fabd 	bl	80050a4 <I2C_TransferConfig>
 8004b2a:	e00f      	b.n	8004b4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	8979      	ldrh	r1, [r7, #10]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 faac 	bl	80050a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f93f 	bl	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e07b      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d034      	beq.n	8004c04 <HAL_I2C_Mem_Write+0x1c8>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d130      	bne.n	8004c04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f8d1 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e04d      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2bff      	cmp	r3, #255	; 0xff
 8004bc4:	d90e      	bls.n	8004be4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	22ff      	movs	r2, #255	; 0xff
 8004bca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	8979      	ldrh	r1, [r7, #10]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fa61 	bl	80050a4 <I2C_TransferConfig>
 8004be2:	e00f      	b.n	8004c04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	8979      	ldrh	r1, [r7, #10]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fa50 	bl	80050a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d19e      	bne.n	8004b4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f91e 	bl	8004e54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e01a      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2220      	movs	r2, #32
 8004c28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6859      	ldr	r1, [r3, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_I2C_Mem_Write+0x224>)
 8004c36:	400b      	ands	r3, r1
 8004c38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e000      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c56:	2302      	movs	r3, #2
  }
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	fe00e800 	.word	0xfe00e800

08004c64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	460b      	mov	r3, r1
 8004c78:	813b      	strh	r3, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	8979      	ldrh	r1, [r7, #10]
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <I2C_RequestMemoryWrite+0xa4>)
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fa09 	bl	80050a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f89c 	bl	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e02c      	b.n	8004d00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb6:	e015      	b.n	8004ce4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cb8:	893b      	ldrh	r3, [r7, #8]
 8004cba:	0a1b      	lsrs	r3, r3, #8
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f882 	bl	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e012      	b.n	8004d00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cda:	893b      	ldrh	r3, [r7, #8]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f830 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	80002000 	.word	0x80002000

08004d0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d103      	bne.n	8004d2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d007      	beq.n	8004d48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	619a      	str	r2, [r3, #24]
  }
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d64:	e022      	b.n	8004dac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d01e      	beq.n	8004dac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fe f89f 	bl	8002eb0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d113      	bne.n	8004dac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e00f      	b.n	8004dcc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d0cd      	beq.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004de0:	e02c      	b.n	8004e3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f870 	bl	8004ecc <I2C_IsErrorOccurred>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e02a      	b.n	8004e4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d01e      	beq.n	8004e3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fe f857 	bl	8002eb0 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d113      	bne.n	8004e3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e007      	b.n	8004e4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d1cb      	bne.n	8004de2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e60:	e028      	b.n	8004eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f830 	bl	8004ecc <I2C_IsErrorOccurred>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e026      	b.n	8004ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7fe f81b 	bl	8002eb0 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d113      	bne.n	8004eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e007      	b.n	8004ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	d1cf      	bne.n	8004e62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d075      	beq.n	8004fe4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2210      	movs	r2, #16
 8004efe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f00:	e056      	b.n	8004fb0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d052      	beq.n	8004fb0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f0a:	f7fd ffd1 	bl	8002eb0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d302      	bcc.n	8004f20 <I2C_IsErrorOccurred+0x54>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d147      	bne.n	8004fb0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	d12e      	bne.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4a:	d02a      	beq.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d027      	beq.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f62:	f7fd ffa5 	bl	8002eb0 <HAL_GetTick>
 8004f66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f68:	e01b      	b.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f6a:	f7fd ffa1 	bl	8002eb0 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b19      	cmp	r3, #25
 8004f76:	d914      	bls.n	8004fa2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d1dc      	bne.n	8004f6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d003      	beq.n	8004fc6 <I2C_IsErrorOccurred+0xfa>
 8004fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d09d      	beq.n	8004f02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f043 0304 	orr.w	r3, r3, #4
 8004fdc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005006:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	f043 0308 	orr.w	r3, r3, #8
 800501e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	f043 0302 	orr.w	r3, r3, #2
 8005040:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800504a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01c      	beq.n	8005094 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff fe56 	bl	8004d0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <I2C_IsErrorOccurred+0x1d4>)
 800506c:	400b      	ands	r3, r1
 800506e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	431a      	orrs	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005098:	4618      	mov	r0, r3
 800509a:	3728      	adds	r7, #40	; 0x28
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	fe00e800 	.word	0xfe00e800

080050a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	817b      	strh	r3, [r7, #10]
 80050b2:	4613      	mov	r3, r2
 80050b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050b6:	897b      	ldrh	r3, [r7, #10]
 80050b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050bc:	7a7b      	ldrb	r3, [r7, #9]
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	0d5b      	lsrs	r3, r3, #21
 80050de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80050e2:	4b08      	ldr	r3, [pc, #32]	; (8005104 <I2C_TransferConfig+0x60>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	43db      	mvns	r3, r3
 80050e8:	ea02 0103 	and.w	r1, r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	03ff63ff 	.word	0x03ff63ff

08005108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b20      	cmp	r3, #32
 800511c:	d138      	bne.n	8005190 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005128:	2302      	movs	r3, #2
 800512a:	e032      	b.n	8005192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2224      	movs	r2, #36	; 0x24
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800515a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d139      	bne.n	8005228 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051be:	2302      	movs	r3, #2
 80051c0:	e033      	b.n	800522a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2224      	movs	r2, #36	; 0x24
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	e000      	b.n	800522a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005228:	2302      	movs	r3, #2
  }
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e041      	b.n	80052cc <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005250:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f245 5255 	movw	r2, #21845	; 0x5555
 800525a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6852      	ldr	r2, [r2, #4]
 8005264:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6892      	ldr	r2, [r2, #8]
 800526e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005270:	f7fd fe1e 	bl	8002eb0 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005276:	e00f      	b.n	8005298 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005278:	f7fd fe1a 	bl	8002eb0 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b31      	cmp	r3, #49	; 0x31
 8005284:	d908      	bls.n	8005298 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e019      	b.n	80052cc <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e8      	bne.n	8005278 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d005      	beq.n	80052c0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	68d2      	ldr	r2, [r2, #12]
 80052bc:	611a      	str	r2, [r3, #16]
 80052be:	e004      	b.n	80052ca <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80052c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80052e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80052f8:	4b04      	ldr	r3, [pc, #16]	; (800530c <HAL_PWREx_GetVoltageRange+0x18>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40007000 	.word	0x40007000

08005310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800531e:	d130      	bne.n	8005382 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005320:	4b23      	ldr	r3, [pc, #140]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532c:	d038      	beq.n	80053a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005336:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800533e:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2232      	movs	r2, #50	; 0x32
 8005344:	fb02 f303 	mul.w	r3, r2, r3
 8005348:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	0c9b      	lsrs	r3, r3, #18
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005354:	e002      	b.n	800535c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3b01      	subs	r3, #1
 800535a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800535c:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005368:	d102      	bne.n	8005370 <HAL_PWREx_ControlVoltageScaling+0x60>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f2      	bne.n	8005356 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537c:	d110      	bne.n	80053a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e00f      	b.n	80053a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800538a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800538e:	d007      	beq.n	80053a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005398:	4a05      	ldr	r2, [pc, #20]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800539a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800539e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40007000 	.word	0x40007000
 80053b4:	20000000 	.word	0x20000000
 80053b8:	431bde83 	.word	0x431bde83

080053bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d102      	bne.n	80053d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f000 bc02 	b.w	8005bd4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d0:	4b96      	ldr	r3, [pc, #600]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 030c 	and.w	r3, r3, #12
 80053d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053da:	4b94      	ldr	r3, [pc, #592]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80e4 	beq.w	80055ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <HAL_RCC_OscConfig+0x4c>
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	f040 808b 	bne.w	8005516 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b01      	cmp	r3, #1
 8005404:	f040 8087 	bne.w	8005516 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005408:	4b88      	ldr	r3, [pc, #544]	; (800562c <HAL_RCC_OscConfig+0x270>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_OscConfig+0x64>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e3d9      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1a      	ldr	r2, [r3, #32]
 8005424:	4b81      	ldr	r3, [pc, #516]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <HAL_RCC_OscConfig+0x7e>
 8005430:	4b7e      	ldr	r3, [pc, #504]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005438:	e005      	b.n	8005446 <HAL_RCC_OscConfig+0x8a>
 800543a:	4b7c      	ldr	r3, [pc, #496]	; (800562c <HAL_RCC_OscConfig+0x270>)
 800543c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005440:	091b      	lsrs	r3, r3, #4
 8005442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005446:	4293      	cmp	r3, r2
 8005448:	d223      	bcs.n	8005492 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fd8a 	bl	8005f68 <RCC_SetFlashLatencyFromMSIRange>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e3ba      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800545e:	4b73      	ldr	r3, [pc, #460]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a72      	ldr	r2, [pc, #456]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005464:	f043 0308 	orr.w	r3, r3, #8
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	4b70      	ldr	r3, [pc, #448]	; (800562c <HAL_RCC_OscConfig+0x270>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	496d      	ldr	r1, [pc, #436]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800547c:	4b6b      	ldr	r3, [pc, #428]	; (800562c <HAL_RCC_OscConfig+0x270>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	4968      	ldr	r1, [pc, #416]	; (800562c <HAL_RCC_OscConfig+0x270>)
 800548c:	4313      	orrs	r3, r2
 800548e:	604b      	str	r3, [r1, #4]
 8005490:	e025      	b.n	80054de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005492:	4b66      	ldr	r3, [pc, #408]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a65      	ldr	r2, [pc, #404]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005498:	f043 0308 	orr.w	r3, r3, #8
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	4b63      	ldr	r3, [pc, #396]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	4960      	ldr	r1, [pc, #384]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054b0:	4b5e      	ldr	r3, [pc, #376]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	021b      	lsls	r3, r3, #8
 80054be:	495b      	ldr	r1, [pc, #364]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fd4a 	bl	8005f68 <RCC_SetFlashLatencyFromMSIRange>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e37a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054de:	f000 fc81 	bl	8005de4 <HAL_RCC_GetSysClockFreq>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b51      	ldr	r3, [pc, #324]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	4950      	ldr	r1, [pc, #320]	; (8005630 <HAL_RCC_OscConfig+0x274>)
 80054f0:	5ccb      	ldrb	r3, [r1, r3]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	4a4e      	ldr	r2, [pc, #312]	; (8005634 <HAL_RCC_OscConfig+0x278>)
 80054fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054fe:	4b4e      	ldr	r3, [pc, #312]	; (8005638 <HAL_RCC_OscConfig+0x27c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fd fc84 	bl	8002e10 <HAL_InitTick>
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d052      	beq.n	80055b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	e35e      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d032      	beq.n	8005584 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800551e:	4b43      	ldr	r3, [pc, #268]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a42      	ldr	r2, [pc, #264]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005524:	f043 0301 	orr.w	r3, r3, #1
 8005528:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800552a:	f7fd fcc1 	bl	8002eb0 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005532:	f7fd fcbd 	bl	8002eb0 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e347      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005544:	4b39      	ldr	r3, [pc, #228]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005550:	4b36      	ldr	r3, [pc, #216]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a35      	ldr	r2, [pc, #212]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005556:	f043 0308 	orr.w	r3, r3, #8
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	4b33      	ldr	r3, [pc, #204]	; (800562c <HAL_RCC_OscConfig+0x270>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	4930      	ldr	r1, [pc, #192]	; (800562c <HAL_RCC_OscConfig+0x270>)
 800556a:	4313      	orrs	r3, r2
 800556c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800556e:	4b2f      	ldr	r3, [pc, #188]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	492b      	ldr	r1, [pc, #172]	; (800562c <HAL_RCC_OscConfig+0x270>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]
 8005582:	e01a      	b.n	80055ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005584:	4b29      	ldr	r3, [pc, #164]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a28      	ldr	r2, [pc, #160]	; (800562c <HAL_RCC_OscConfig+0x270>)
 800558a:	f023 0301 	bic.w	r3, r3, #1
 800558e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005590:	f7fd fc8e 	bl	8002eb0 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005598:	f7fd fc8a 	bl	8002eb0 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e314      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055aa:	4b20      	ldr	r3, [pc, #128]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x1dc>
 80055b6:	e000      	b.n	80055ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d073      	beq.n	80056ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d005      	beq.n	80055d8 <HAL_RCC_OscConfig+0x21c>
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b0c      	cmp	r3, #12
 80055d0:	d10e      	bne.n	80055f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d10b      	bne.n	80055f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d8:	4b14      	ldr	r3, [pc, #80]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d063      	beq.n	80056ac <HAL_RCC_OscConfig+0x2f0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d15f      	bne.n	80056ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e2f1      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f8:	d106      	bne.n	8005608 <HAL_RCC_OscConfig+0x24c>
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <HAL_RCC_OscConfig+0x270>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a0b      	ldr	r2, [pc, #44]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e025      	b.n	8005654 <HAL_RCC_OscConfig+0x298>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005610:	d114      	bne.n	800563c <HAL_RCC_OscConfig+0x280>
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a05      	ldr	r2, [pc, #20]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	4b03      	ldr	r3, [pc, #12]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a02      	ldr	r2, [pc, #8]	; (800562c <HAL_RCC_OscConfig+0x270>)
 8005624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e013      	b.n	8005654 <HAL_RCC_OscConfig+0x298>
 800562c:	40021000 	.word	0x40021000
 8005630:	0800b2f4 	.word	0x0800b2f4
 8005634:	20000000 	.word	0x20000000
 8005638:	20000014 	.word	0x20000014
 800563c:	4ba0      	ldr	r3, [pc, #640]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a9f      	ldr	r2, [pc, #636]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	4b9d      	ldr	r3, [pc, #628]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a9c      	ldr	r2, [pc, #624]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 800564e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d013      	beq.n	8005684 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fd fc28 	bl	8002eb0 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005664:	f7fd fc24 	bl	8002eb0 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	; 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e2ae      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005676:	4b92      	ldr	r3, [pc, #584]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x2a8>
 8005682:	e014      	b.n	80056ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fd fc14 	bl	8002eb0 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800568c:	f7fd fc10 	bl	8002eb0 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b64      	cmp	r3, #100	; 0x64
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e29a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800569e:	4b88      	ldr	r3, [pc, #544]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x2d0>
 80056aa:	e000      	b.n	80056ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d060      	beq.n	800577c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d005      	beq.n	80056cc <HAL_RCC_OscConfig+0x310>
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b0c      	cmp	r3, #12
 80056c4:	d119      	bne.n	80056fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d116      	bne.n	80056fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056cc:	4b7c      	ldr	r3, [pc, #496]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_RCC_OscConfig+0x328>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e277      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e4:	4b76      	ldr	r3, [pc, #472]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	061b      	lsls	r3, r3, #24
 80056f2:	4973      	ldr	r1, [pc, #460]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056f8:	e040      	b.n	800577c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d023      	beq.n	800574a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005702:	4b6f      	ldr	r3, [pc, #444]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a6e      	ldr	r2, [pc, #440]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570e:	f7fd fbcf 	bl	8002eb0 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005716:	f7fd fbcb 	bl	8002eb0 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e255      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005728:	4b65      	ldr	r3, [pc, #404]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0f0      	beq.n	8005716 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005734:	4b62      	ldr	r3, [pc, #392]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	061b      	lsls	r3, r3, #24
 8005742:	495f      	ldr	r1, [pc, #380]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005744:	4313      	orrs	r3, r2
 8005746:	604b      	str	r3, [r1, #4]
 8005748:	e018      	b.n	800577c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574a:	4b5d      	ldr	r3, [pc, #372]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a5c      	ldr	r2, [pc, #368]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fd fbab 	bl	8002eb0 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800575e:	f7fd fba7 	bl	8002eb0 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e231      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005770:	4b53      	ldr	r3, [pc, #332]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f0      	bne.n	800575e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d03c      	beq.n	8005802 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01c      	beq.n	80057ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005790:	4b4b      	ldr	r3, [pc, #300]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005796:	4a4a      	ldr	r2, [pc, #296]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7fd fb86 	bl	8002eb0 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a8:	f7fd fb82 	bl	8002eb0 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e20c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057ba:	4b41      	ldr	r3, [pc, #260]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80057bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0ef      	beq.n	80057a8 <HAL_RCC_OscConfig+0x3ec>
 80057c8:	e01b      	b.n	8005802 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ca:	4b3d      	ldr	r3, [pc, #244]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80057cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d0:	4a3b      	ldr	r2, [pc, #236]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057da:	f7fd fb69 	bl	8002eb0 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e2:	f7fd fb65 	bl	8002eb0 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e1ef      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057f4:	4b32      	ldr	r3, [pc, #200]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80057f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1ef      	bne.n	80057e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80a6 	beq.w	800595c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005810:	2300      	movs	r3, #0
 8005812:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005814:	4b2a      	ldr	r3, [pc, #168]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10d      	bne.n	800583c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005820:	4b27      	ldr	r3, [pc, #156]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	4a26      	ldr	r2, [pc, #152]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582a:	6593      	str	r3, [r2, #88]	; 0x58
 800582c:	4b24      	ldr	r3, [pc, #144]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005838:	2301      	movs	r3, #1
 800583a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800583c:	4b21      	ldr	r3, [pc, #132]	; (80058c4 <HAL_RCC_OscConfig+0x508>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d118      	bne.n	800587a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005848:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <HAL_RCC_OscConfig+0x508>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <HAL_RCC_OscConfig+0x508>)
 800584e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005852:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005854:	f7fd fb2c 	bl	8002eb0 <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585c:	f7fd fb28 	bl	8002eb0 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e1b2      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800586e:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <HAL_RCC_OscConfig+0x508>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f0      	beq.n	800585c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d108      	bne.n	8005894 <HAL_RCC_OscConfig+0x4d8>
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	4a0d      	ldr	r2, [pc, #52]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005892:	e029      	b.n	80058e8 <HAL_RCC_OscConfig+0x52c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b05      	cmp	r3, #5
 800589a:	d115      	bne.n	80058c8 <HAL_RCC_OscConfig+0x50c>
 800589c:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	4a07      	ldr	r2, [pc, #28]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80058a4:	f043 0304 	orr.w	r3, r3, #4
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	4a03      	ldr	r2, [pc, #12]	; (80058c0 <HAL_RCC_OscConfig+0x504>)
 80058b4:	f043 0301 	orr.w	r3, r3, #1
 80058b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058bc:	e014      	b.n	80058e8 <HAL_RCC_OscConfig+0x52c>
 80058be:	bf00      	nop
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40007000 	.word	0x40007000
 80058c8:	4b9a      	ldr	r3, [pc, #616]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ce:	4a99      	ldr	r2, [pc, #612]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058d8:	4b96      	ldr	r3, [pc, #600]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	4a95      	ldr	r2, [pc, #596]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 80058e0:	f023 0304 	bic.w	r3, r3, #4
 80058e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d016      	beq.n	800591e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fd fade 	bl	8002eb0 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058f6:	e00a      	b.n	800590e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058f8:	f7fd fada 	bl	8002eb0 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e162      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800590e:	4b89      	ldr	r3, [pc, #548]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ed      	beq.n	80058f8 <HAL_RCC_OscConfig+0x53c>
 800591c:	e015      	b.n	800594a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591e:	f7fd fac7 	bl	8002eb0 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005924:	e00a      	b.n	800593c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005926:	f7fd fac3 	bl	8002eb0 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	f241 3288 	movw	r2, #5000	; 0x1388
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e14b      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800593c:	4b7d      	ldr	r3, [pc, #500]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ed      	bne.n	8005926 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800594a:	7ffb      	ldrb	r3, [r7, #31]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d105      	bne.n	800595c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005950:	4b78      	ldr	r3, [pc, #480]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005954:	4a77      	ldr	r2, [pc, #476]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d03c      	beq.n	80059e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01c      	beq.n	80059aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005970:	4b70      	ldr	r3, [pc, #448]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005976:	4a6f      	ldr	r2, [pc, #444]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fd fa96 	bl	8002eb0 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005988:	f7fd fa92 	bl	8002eb0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e11c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800599a:	4b66      	ldr	r3, [pc, #408]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 800599c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ef      	beq.n	8005988 <HAL_RCC_OscConfig+0x5cc>
 80059a8:	e01b      	b.n	80059e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059aa:	4b62      	ldr	r3, [pc, #392]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 80059ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b0:	4a60      	ldr	r2, [pc, #384]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 80059b2:	f023 0301 	bic.w	r3, r3, #1
 80059b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ba:	f7fd fa79 	bl	8002eb0 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059c2:	f7fd fa75 	bl	8002eb0 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e0ff      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059d4:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 80059d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ef      	bne.n	80059c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80f3 	beq.w	8005bd2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	f040 80c9 	bne.w	8005b88 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059f6:	4b4f      	ldr	r3, [pc, #316]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f003 0203 	and.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d12c      	bne.n	8005a64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	3b01      	subs	r3, #1
 8005a16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d123      	bne.n	8005a64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d11b      	bne.n	8005a64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d113      	bne.n	8005a64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d109      	bne.n	8005a64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d06b      	beq.n	8005b3c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d062      	beq.n	8005b30 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a6a:	4b32      	ldr	r3, [pc, #200]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e0ac      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a7a:	4b2e      	ldr	r3, [pc, #184]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2d      	ldr	r2, [pc, #180]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a86:	f7fd fa13 	bl	8002eb0 <HAL_GetTick>
 8005a8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a8e:	f7fd fa0f 	bl	8002eb0 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e099      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aa0:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f0      	bne.n	8005a8e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aac:	4b21      	ldr	r3, [pc, #132]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <HAL_RCC_OscConfig+0x77c>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005abc:	3a01      	subs	r2, #1
 8005abe:	0112      	lsls	r2, r2, #4
 8005ac0:	4311      	orrs	r1, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ac6:	0212      	lsls	r2, r2, #8
 8005ac8:	4311      	orrs	r1, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ace:	0852      	lsrs	r2, r2, #1
 8005ad0:	3a01      	subs	r2, #1
 8005ad2:	0552      	lsls	r2, r2, #21
 8005ad4:	4311      	orrs	r1, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ada:	0852      	lsrs	r2, r2, #1
 8005adc:	3a01      	subs	r2, #1
 8005ade:	0652      	lsls	r2, r2, #25
 8005ae0:	4311      	orrs	r1, r2
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ae6:	06d2      	lsls	r2, r2, #27
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	4912      	ldr	r1, [pc, #72]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005af0:	4b10      	ldr	r3, [pc, #64]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a0f      	ldr	r2, [pc, #60]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b08:	f7fd f9d2 	bl	8002eb0 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fd f9ce 	bl	8002eb0 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e058      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b22:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <HAL_RCC_OscConfig+0x778>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b2e:	e050      	b.n	8005bd2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e04f      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
 8005b34:	40021000 	.word	0x40021000
 8005b38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b3c:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d144      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b48:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b54:	4b21      	ldr	r3, [pc, #132]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a20      	ldr	r2, [pc, #128]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b60:	f7fd f9a6 	bl	8002eb0 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b68:	f7fd f9a2 	bl	8002eb0 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e02c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7a:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x7ac>
 8005b86:	e024      	b.n	8005bd2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2b0c      	cmp	r3, #12
 8005b8c:	d01f      	beq.n	8005bce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9a:	f7fd f989 	bl	8002eb0 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba2:	f7fd f985 	bl	8002eb0 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e00f      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f0      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	4905      	ldr	r1, [pc, #20]	; (8005bdc <HAL_RCC_OscConfig+0x820>)
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <HAL_RCC_OscConfig+0x824>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60cb      	str	r3, [r1, #12]
 8005bcc:	e001      	b.n	8005bd2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	feeefffc 	.word	0xfeeefffc

08005be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0e7      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b75      	ldr	r3, [pc, #468]	; (8005dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d910      	bls.n	8005c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b72      	ldr	r3, [pc, #456]	; (8005dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f023 0207 	bic.w	r2, r3, #7
 8005c0e:	4970      	ldr	r1, [pc, #448]	; (8005dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c16:	4b6e      	ldr	r3, [pc, #440]	; (8005dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0cf      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d010      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	4b66      	ldr	r3, [pc, #408]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d908      	bls.n	8005c56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c44:	4b63      	ldr	r3, [pc, #396]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	4960      	ldr	r1, [pc, #384]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d04c      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d107      	bne.n	8005c7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c6a:	4b5a      	ldr	r3, [pc, #360]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d121      	bne.n	8005cba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e0a6      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d107      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c82:	4b54      	ldr	r3, [pc, #336]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d115      	bne.n	8005cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e09a      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c9a:	4b4e      	ldr	r3, [pc, #312]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e08e      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005caa:	4b4a      	ldr	r3, [pc, #296]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e086      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cba:	4b46      	ldr	r3, [pc, #280]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f023 0203 	bic.w	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	4943      	ldr	r1, [pc, #268]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ccc:	f7fd f8f0 	bl	8002eb0 <HAL_GetTick>
 8005cd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd2:	e00a      	b.n	8005cea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd4:	f7fd f8ec 	bl	8002eb0 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e06e      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cea:	4b3a      	ldr	r3, [pc, #232]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 020c 	and.w	r2, r3, #12
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d1eb      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d010      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	4b31      	ldr	r3, [pc, #196]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d208      	bcs.n	8005d2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d18:	4b2e      	ldr	r3, [pc, #184]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	492b      	ldr	r1, [pc, #172]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d2a:	4b29      	ldr	r3, [pc, #164]	; (8005dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d210      	bcs.n	8005d5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d38:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f023 0207 	bic.w	r2, r3, #7
 8005d40:	4923      	ldr	r1, [pc, #140]	; (8005dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d48:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d001      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e036      	b.n	8005dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d66:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	4918      	ldr	r1, [pc, #96]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d84:	4b13      	ldr	r3, [pc, #76]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	4910      	ldr	r1, [pc, #64]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d98:	f000 f824 	bl	8005de4 <HAL_RCC_GetSysClockFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	091b      	lsrs	r3, r3, #4
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	490b      	ldr	r1, [pc, #44]	; (8005dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
 8005db4:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <HAL_RCC_ClockConfig+0x1f8>)
 8005db6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005db8:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <HAL_RCC_ClockConfig+0x1fc>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fd f827 	bl	8002e10 <HAL_InitTick>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8005dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40022000 	.word	0x40022000
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	0800b2f4 	.word	0x0800b2f4
 8005ddc:	20000000 	.word	0x20000000
 8005de0:	20000014 	.word	0x20000014

08005de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b089      	sub	sp, #36	; 0x24
 8005de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61fb      	str	r3, [r7, #28]
 8005dee:	2300      	movs	r3, #0
 8005df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005df2:	4b3e      	ldr	r3, [pc, #248]	; (8005eec <HAL_RCC_GetSysClockFreq+0x108>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dfc:	4b3b      	ldr	r3, [pc, #236]	; (8005eec <HAL_RCC_GetSysClockFreq+0x108>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x34>
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b0c      	cmp	r3, #12
 8005e10:	d121      	bne.n	8005e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d11e      	bne.n	8005e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e18:	4b34      	ldr	r3, [pc, #208]	; (8005eec <HAL_RCC_GetSysClockFreq+0x108>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d107      	bne.n	8005e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e24:	4b31      	ldr	r3, [pc, #196]	; (8005eec <HAL_RCC_GetSysClockFreq+0x108>)
 8005e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e2a:	0a1b      	lsrs	r3, r3, #8
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	e005      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e34:	4b2d      	ldr	r3, [pc, #180]	; (8005eec <HAL_RCC_GetSysClockFreq+0x108>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 030f 	and.w	r3, r3, #15
 8005e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e40:	4a2b      	ldr	r2, [pc, #172]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10d      	bne.n	8005e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e54:	e00a      	b.n	8005e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d102      	bne.n	8005e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e5c:	4b25      	ldr	r3, [pc, #148]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	e004      	b.n	8005e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d101      	bne.n	8005e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e68:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d134      	bne.n	8005edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e72:	4b1e      	ldr	r3, [pc, #120]	; (8005eec <HAL_RCC_GetSysClockFreq+0x108>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d003      	beq.n	8005e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d003      	beq.n	8005e90 <HAL_RCC_GetSysClockFreq+0xac>
 8005e88:	e005      	b.n	8005e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e8c:	617b      	str	r3, [r7, #20]
      break;
 8005e8e:	e005      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e90:	4b18      	ldr	r3, [pc, #96]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e92:	617b      	str	r3, [r7, #20]
      break;
 8005e94:	e002      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	617b      	str	r3, [r7, #20]
      break;
 8005e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e9c:	4b13      	ldr	r3, [pc, #76]	; (8005eec <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	091b      	lsrs	r3, r3, #4
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005eaa:	4b10      	ldr	r3, [pc, #64]	; (8005eec <HAL_RCC_GetSysClockFreq+0x108>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	0a1b      	lsrs	r3, r3, #8
 8005eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	fb03 f202 	mul.w	r2, r3, r2
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	0e5b      	lsrs	r3, r3, #25
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	3301      	adds	r3, #1
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005edc:	69bb      	ldr	r3, [r7, #24]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3724      	adds	r7, #36	; 0x24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	0800b30c 	.word	0x0800b30c
 8005ef4:	00f42400 	.word	0x00f42400

08005ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000000 	.word	0x20000000

08005f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f14:	f7ff fff0 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4904      	ldr	r1, [pc, #16]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000
 8005f38:	0800b304 	.word	0x0800b304

08005f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f40:	f7ff ffda 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	0adb      	lsrs	r3, r3, #11
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	4904      	ldr	r1, [pc, #16]	; (8005f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f52:	5ccb      	ldrb	r3, [r1, r3]
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000
 8005f64:	0800b304 	.word	0x0800b304

08005f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f80:	f7ff f9b8 	bl	80052f4 <HAL_PWREx_GetVoltageRange>
 8005f84:	6178      	str	r0, [r7, #20]
 8005f86:	e014      	b.n	8005fb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8c:	4a24      	ldr	r2, [pc, #144]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f92:	6593      	str	r3, [r2, #88]	; 0x58
 8005f94:	4b22      	ldr	r3, [pc, #136]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005fa0:	f7ff f9a8 	bl	80052f4 <HAL_PWREx_GetVoltageRange>
 8005fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb8:	d10b      	bne.n	8005fd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d919      	bls.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8005fc4:	d902      	bls.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	e013      	b.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fcc:	2301      	movs	r3, #1
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	e010      	b.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d902      	bls.n	8005fde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005fd8:	2303      	movs	r3, #3
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	e00a      	b.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b80      	cmp	r3, #128	; 0x80
 8005fe2:	d102      	bne.n	8005fea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	e004      	b.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d101      	bne.n	8005ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f023 0207 	bic.w	r2, r3, #7
 8005ffc:	4909      	ldr	r1, [pc, #36]	; (8006024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006004:	4b07      	ldr	r3, [pc, #28]	; (8006024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	429a      	cmp	r2, r3
 8006010:	d001      	beq.n	8006016 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40021000 	.word	0x40021000
 8006024:	40022000 	.word	0x40022000

08006028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006030:	2300      	movs	r3, #0
 8006032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006034:	2300      	movs	r3, #0
 8006036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006040:	2b00      	cmp	r3, #0
 8006042:	d031      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006048:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800604c:	d01a      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800604e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006052:	d814      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800605c:	d10f      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800605e:	4b5d      	ldr	r3, [pc, #372]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	4a5c      	ldr	r2, [pc, #368]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006068:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800606a:	e00c      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3304      	adds	r3, #4
 8006070:	2100      	movs	r1, #0
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f9f0 	bl	8006458 <RCCEx_PLLSAI1_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800607c:	e003      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	74fb      	strb	r3, [r7, #19]
      break;
 8006082:	e000      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006086:	7cfb      	ldrb	r3, [r7, #19]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10b      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800608c:	4b51      	ldr	r3, [pc, #324]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006092:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	494e      	ldr	r1, [pc, #312]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80060a2:	e001      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	7cfb      	ldrb	r3, [r7, #19]
 80060a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 809e 	beq.w	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060b6:	2300      	movs	r3, #0
 80060b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060ba:	4b46      	ldr	r3, [pc, #280]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d0:	4b40      	ldr	r3, [pc, #256]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d4:	4a3f      	ldr	r2, [pc, #252]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060da:	6593      	str	r3, [r2, #88]	; 0x58
 80060dc:	4b3d      	ldr	r3, [pc, #244]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060e8:	2301      	movs	r3, #1
 80060ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060ec:	4b3a      	ldr	r3, [pc, #232]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a39      	ldr	r2, [pc, #228]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80060f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060f8:	f7fc feda 	bl	8002eb0 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060fe:	e009      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006100:	f7fc fed6 	bl	8002eb0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d902      	bls.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	74fb      	strb	r3, [r7, #19]
        break;
 8006112:	e005      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006114:	4b30      	ldr	r3, [pc, #192]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0ef      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006120:	7cfb      	ldrb	r3, [r7, #19]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d15a      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006126:	4b2b      	ldr	r3, [pc, #172]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006130:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01e      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	429a      	cmp	r2, r3
 8006140:	d019      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006142:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800614e:	4b21      	ldr	r3, [pc, #132]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800615e:	4b1d      	ldr	r3, [pc, #116]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006164:	4a1b      	ldr	r2, [pc, #108]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800616a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800616e:	4a19      	ldr	r2, [pc, #100]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d016      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fc fe96 	bl	8002eb0 <HAL_GetTick>
 8006184:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006186:	e00b      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006188:	f7fc fe92 	bl	8002eb0 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	; 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d902      	bls.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	74fb      	strb	r3, [r7, #19]
            break;
 800619e:	e006      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061a0:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0ec      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061b4:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c2:	4904      	ldr	r1, [pc, #16]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80061ca:	e009      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061cc:	7cfb      	ldrb	r3, [r7, #19]
 80061ce:	74bb      	strb	r3, [r7, #18]
 80061d0:	e006      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80061d2:	bf00      	nop
 80061d4:	40021000 	.word	0x40021000
 80061d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	7cfb      	ldrb	r3, [r7, #19]
 80061de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061e0:	7c7b      	ldrb	r3, [r7, #17]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d105      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e6:	4b9b      	ldr	r3, [pc, #620]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ea:	4a9a      	ldr	r2, [pc, #616]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061fe:	4b95      	ldr	r3, [pc, #596]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006204:	f023 0203 	bic.w	r2, r3, #3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	4991      	ldr	r1, [pc, #580]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006220:	4b8c      	ldr	r3, [pc, #560]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006226:	f023 020c 	bic.w	r2, r3, #12
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	4989      	ldr	r1, [pc, #548]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006242:	4b84      	ldr	r3, [pc, #528]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006248:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	4980      	ldr	r1, [pc, #512]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006264:	4b7b      	ldr	r3, [pc, #492]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	4978      	ldr	r1, [pc, #480]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006286:	4b73      	ldr	r3, [pc, #460]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006294:	496f      	ldr	r1, [pc, #444]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062a8:	4b6a      	ldr	r3, [pc, #424]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	4967      	ldr	r1, [pc, #412]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062ca:	4b62      	ldr	r3, [pc, #392]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	495e      	ldr	r1, [pc, #376]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062ec:	4b59      	ldr	r3, [pc, #356]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80062ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fa:	4956      	ldr	r1, [pc, #344]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800630e:	4b51      	ldr	r3, [pc, #324]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	494d      	ldr	r1, [pc, #308]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d028      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006330:	4b48      	ldr	r3, [pc, #288]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800633e:	4945      	ldr	r1, [pc, #276]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006340:	4313      	orrs	r3, r2
 8006342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800634e:	d106      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006350:	4b40      	ldr	r3, [pc, #256]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4a3f      	ldr	r2, [pc, #252]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800635a:	60d3      	str	r3, [r2, #12]
 800635c:	e011      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006366:	d10c      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	2101      	movs	r1, #1
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f872 	bl	8006458 <RCCEx_PLLSAI1_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006378:	7cfb      	ldrb	r3, [r7, #19]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800637e:	7cfb      	ldrb	r3, [r7, #19]
 8006380:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d028      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800638e:	4b31      	ldr	r3, [pc, #196]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639c:	492d      	ldr	r1, [pc, #180]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ac:	d106      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ae:	4b29      	ldr	r3, [pc, #164]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	4a28      	ldr	r2, [pc, #160]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b8:	60d3      	str	r3, [r2, #12]
 80063ba:	e011      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063c4:	d10c      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3304      	adds	r3, #4
 80063ca:	2101      	movs	r1, #1
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 f843 	bl	8006458 <RCCEx_PLLSAI1_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063d6:	7cfb      	ldrb	r3, [r7, #19]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01c      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063ec:	4b19      	ldr	r3, [pc, #100]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fa:	4916      	ldr	r1, [pc, #88]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800640a:	d10c      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	2102      	movs	r1, #2
 8006412:	4618      	mov	r0, r3
 8006414:	f000 f820 	bl	8006458 <RCCEx_PLLSAI1_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800641c:	7cfb      	ldrb	r3, [r7, #19]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8006422:	7cfb      	ldrb	r3, [r7, #19]
 8006424:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006432:	4b08      	ldr	r3, [pc, #32]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006438:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	4904      	ldr	r1, [pc, #16]	; (8006454 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006448:	7cbb      	ldrb	r3, [r7, #18]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40021000 	.word	0x40021000

08006458 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006466:	4b74      	ldr	r3, [pc, #464]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d018      	beq.n	80064a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006472:	4b71      	ldr	r3, [pc, #452]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f003 0203 	and.w	r2, r3, #3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d10d      	bne.n	800649e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
       ||
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800648a:	4b6b      	ldr	r3, [pc, #428]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	091b      	lsrs	r3, r3, #4
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
       ||
 800649a:	429a      	cmp	r2, r3
 800649c:	d047      	beq.n	800652e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	73fb      	strb	r3, [r7, #15]
 80064a2:	e044      	b.n	800652e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d018      	beq.n	80064de <RCCEx_PLLSAI1_Config+0x86>
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d825      	bhi.n	80064fc <RCCEx_PLLSAI1_Config+0xa4>
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d002      	beq.n	80064ba <RCCEx_PLLSAI1_Config+0x62>
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d009      	beq.n	80064cc <RCCEx_PLLSAI1_Config+0x74>
 80064b8:	e020      	b.n	80064fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064ba:	4b5f      	ldr	r3, [pc, #380]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d11d      	bne.n	8006502 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064ca:	e01a      	b.n	8006502 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064cc:	4b5a      	ldr	r3, [pc, #360]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d116      	bne.n	8006506 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064dc:	e013      	b.n	8006506 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064de:	4b56      	ldr	r3, [pc, #344]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10f      	bne.n	800650a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064ea:	4b53      	ldr	r3, [pc, #332]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064fa:	e006      	b.n	800650a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006500:	e004      	b.n	800650c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800650a:	bf00      	nop
    }

    if(status == HAL_OK)
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10d      	bne.n	800652e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006512:	4b49      	ldr	r3, [pc, #292]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6819      	ldr	r1, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	3b01      	subs	r3, #1
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	430b      	orrs	r3, r1
 8006528:	4943      	ldr	r1, [pc, #268]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 800652a:	4313      	orrs	r3, r2
 800652c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d17c      	bne.n	800662e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006534:	4b40      	ldr	r3, [pc, #256]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a3f      	ldr	r2, [pc, #252]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 800653a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800653e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006540:	f7fc fcb6 	bl	8002eb0 <HAL_GetTick>
 8006544:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006546:	e009      	b.n	800655c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006548:	f7fc fcb2 	bl	8002eb0 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d902      	bls.n	800655c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	73fb      	strb	r3, [r7, #15]
        break;
 800655a:	e005      	b.n	8006568 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800655c:	4b36      	ldr	r3, [pc, #216]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ef      	bne.n	8006548 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d15f      	bne.n	800662e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d110      	bne.n	8006596 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006574:	4b30      	ldr	r3, [pc, #192]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800657c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6892      	ldr	r2, [r2, #8]
 8006584:	0211      	lsls	r1, r2, #8
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68d2      	ldr	r2, [r2, #12]
 800658a:	06d2      	lsls	r2, r2, #27
 800658c:	430a      	orrs	r2, r1
 800658e:	492a      	ldr	r1, [pc, #168]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006590:	4313      	orrs	r3, r2
 8006592:	610b      	str	r3, [r1, #16]
 8006594:	e027      	b.n	80065e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d112      	bne.n	80065c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800659c:	4b26      	ldr	r3, [pc, #152]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6892      	ldr	r2, [r2, #8]
 80065ac:	0211      	lsls	r1, r2, #8
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6912      	ldr	r2, [r2, #16]
 80065b2:	0852      	lsrs	r2, r2, #1
 80065b4:	3a01      	subs	r2, #1
 80065b6:	0552      	lsls	r2, r2, #21
 80065b8:	430a      	orrs	r2, r1
 80065ba:	491f      	ldr	r1, [pc, #124]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	610b      	str	r3, [r1, #16]
 80065c0:	e011      	b.n	80065e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065c2:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80065ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6892      	ldr	r2, [r2, #8]
 80065d2:	0211      	lsls	r1, r2, #8
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6952      	ldr	r2, [r2, #20]
 80065d8:	0852      	lsrs	r2, r2, #1
 80065da:	3a01      	subs	r2, #1
 80065dc:	0652      	lsls	r2, r2, #25
 80065de:	430a      	orrs	r2, r1
 80065e0:	4915      	ldr	r1, [pc, #84]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80065e6:	4b14      	ldr	r3, [pc, #80]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a13      	ldr	r2, [pc, #76]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f2:	f7fc fc5d 	bl	8002eb0 <HAL_GetTick>
 80065f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065f8:	e009      	b.n	800660e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065fa:	f7fc fc59 	bl	8002eb0 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d902      	bls.n	800660e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	73fb      	strb	r3, [r7, #15]
          break;
 800660c:	e005      	b.n	800661a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800660e:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0ef      	beq.n	80065fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	4903      	ldr	r1, [pc, #12]	; (8006638 <RCCEx_PLLSAI1_Config+0x1e0>)
 800662a:	4313      	orrs	r3, r2
 800662c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40021000 	.word	0x40021000

0800663c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e049      	b.n	80066e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fb ff4e 	bl	8002504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3304      	adds	r3, #4
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f000 f954 	bl	8006928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d001      	beq.n	8006704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e03b      	b.n	800677c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a19      	ldr	r2, [pc, #100]	; (8006788 <HAL_TIM_Base_Start_IT+0x9c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d009      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x4e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672e:	d004      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x4e>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a15      	ldr	r2, [pc, #84]	; (800678c <HAL_TIM_Base_Start_IT+0xa0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d115      	bne.n	8006766 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	4b13      	ldr	r3, [pc, #76]	; (8006790 <HAL_TIM_Base_Start_IT+0xa4>)
 8006742:	4013      	ands	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b06      	cmp	r3, #6
 800674a:	d015      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0x8c>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006752:	d011      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006764:	e008      	b.n	8006778 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e000      	b.n	800677a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006778:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40014000 	.word	0x40014000
 8006790:	00010007 	.word	0x00010007

08006794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_TIM_ConfigClockSource+0x1c>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e0b6      	b.n	800691e <HAL_TIM_ConfigClockSource+0x18a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ec:	d03e      	beq.n	800686c <HAL_TIM_ConfigClockSource+0xd8>
 80067ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f2:	f200 8087 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x170>
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	f000 8086 	beq.w	800690a <HAL_TIM_ConfigClockSource+0x176>
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006802:	d87f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x170>
 8006804:	2b70      	cmp	r3, #112	; 0x70
 8006806:	d01a      	beq.n	800683e <HAL_TIM_ConfigClockSource+0xaa>
 8006808:	2b70      	cmp	r3, #112	; 0x70
 800680a:	d87b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x170>
 800680c:	2b60      	cmp	r3, #96	; 0x60
 800680e:	d050      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x11e>
 8006810:	2b60      	cmp	r3, #96	; 0x60
 8006812:	d877      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x170>
 8006814:	2b50      	cmp	r3, #80	; 0x50
 8006816:	d03c      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0xfe>
 8006818:	2b50      	cmp	r3, #80	; 0x50
 800681a:	d873      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x170>
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d058      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x13e>
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d86f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x170>
 8006824:	2b30      	cmp	r3, #48	; 0x30
 8006826:	d064      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15e>
 8006828:	2b30      	cmp	r3, #48	; 0x30
 800682a:	d86b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x170>
 800682c:	2b20      	cmp	r3, #32
 800682e:	d060      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15e>
 8006830:	2b20      	cmp	r3, #32
 8006832:	d867      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x170>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d05c      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15e>
 8006838:	2b10      	cmp	r3, #16
 800683a:	d05a      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x15e>
 800683c:	e062      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6899      	ldr	r1, [r3, #8]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f000 f949 	bl	8006ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	609a      	str	r2, [r3, #8]
      break;
 800686a:	e04f      	b.n	800690c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	6899      	ldr	r1, [r3, #8]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f000 f932 	bl	8006ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688e:	609a      	str	r2, [r3, #8]
      break;
 8006890:	e03c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 f8a6 	bl	80069f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2150      	movs	r1, #80	; 0x50
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f8ff 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 80068b0:	e02c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6859      	ldr	r1, [r3, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	461a      	mov	r2, r3
 80068c0:	f000 f8c5 	bl	8006a4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2160      	movs	r1, #96	; 0x60
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 f8ef 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 80068d0:	e01c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 f886 	bl	80069f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2140      	movs	r1, #64	; 0x40
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 f8df 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 80068f0:	e00c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f000 f8d6 	bl	8006aae <TIM_ITRx_SetConfig>
      break;
 8006902:	e003      	b.n	800690c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e000      	b.n	800690c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800690a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <TIM_Base_SetConfig+0xbc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_Base_SetConfig+0x20>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d108      	bne.n	800695a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a21      	ldr	r2, [pc, #132]	; (80069e4 <TIM_Base_SetConfig+0xbc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00b      	beq.n	800697a <TIM_Base_SetConfig+0x52>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006968:	d007      	beq.n	800697a <TIM_Base_SetConfig+0x52>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1e      	ldr	r2, [pc, #120]	; (80069e8 <TIM_Base_SetConfig+0xc0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_Base_SetConfig+0x52>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1d      	ldr	r2, [pc, #116]	; (80069ec <TIM_Base_SetConfig+0xc4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d108      	bne.n	800698c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a0c      	ldr	r2, [pc, #48]	; (80069e4 <TIM_Base_SetConfig+0xbc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_Base_SetConfig+0xa0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a0b      	ldr	r2, [pc, #44]	; (80069e8 <TIM_Base_SetConfig+0xc0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_Base_SetConfig+0xa0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <TIM_Base_SetConfig+0xc4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d103      	bne.n	80069d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	615a      	str	r2, [r3, #20]
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40014400 	.word	0x40014400

080069f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	f023 0201 	bic.w	r2, r3, #1
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f023 030a 	bic.w	r3, r3, #10
 8006a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b087      	sub	sp, #28
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0210 	bic.w	r2, r3, #16
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f043 0307 	orr.w	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	e04f      	b.n	8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a21      	ldr	r2, [pc, #132]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a14      	ldr	r2, [pc, #80]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba4:	d004      	beq.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a10      	ldr	r2, [pc, #64]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d10c      	bne.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	40012c00 	.word	0x40012c00
 8006bec:	40014000 	.word	0x40014000

08006bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e040      	b.n	8006c84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fb fc96 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2224      	movs	r2, #36	; 0x24
 8006c1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fd2c 	bl	800768c <UART_SetConfig>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e022      	b.n	8006c84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 ff7a 	bl	8007b40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0201 	orr.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 f801 	bl	8007c84 <UART_CheckIdleState>
 8006c82:	4603      	mov	r3, r0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e02b      	b.n	8006cf6 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2224      	movs	r2, #36	; 0x24
 8006ca2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7fb fcc7 	bl	8002660 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b08a      	sub	sp, #40	; 0x28
 8006d02:	af02      	add	r7, sp, #8
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	603b      	str	r3, [r7, #0]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	f040 8082 	bne.w	8006e1c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <HAL_UART_Transmit+0x26>
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e07a      	b.n	8006e1e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_UART_Transmit+0x38>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e073      	b.n	8006e1e <HAL_UART_Transmit+0x120>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2221      	movs	r2, #33	; 0x21
 8006d4a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d4c:	f7fc f8b0 	bl	8002eb0 <HAL_GetTick>
 8006d50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	88fa      	ldrh	r2, [r7, #6]
 8006d56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	88fa      	ldrh	r2, [r7, #6]
 8006d5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6a:	d108      	bne.n	8006d7e <HAL_UART_Transmit+0x80>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	e003      	b.n	8006d86 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006d8e:	e02d      	b.n	8006dec <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2200      	movs	r2, #0
 8006d98:	2180      	movs	r1, #128	; 0x80
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 ffbb 	bl	8007d16 <UART_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e039      	b.n	8006e1e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10b      	bne.n	8006dc8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	881a      	ldrh	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	e008      	b.n	8006dda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	781a      	ldrb	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	b292      	uxth	r2, r2
 8006dd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1cb      	bne.n	8006d90 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2140      	movs	r1, #64	; 0x40
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 ff87 	bl	8007d16 <UART_WaitOnFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e005      	b.n	8006e1e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e000      	b.n	8006e1e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006e1c:	2302      	movs	r3, #2
  }
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b08a      	sub	sp, #40	; 0x28
 8006e2a:	af02      	add	r7, sp, #8
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e3a:	2b20      	cmp	r3, #32
 8006e3c:	f040 80bf 	bne.w	8006fbe <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_UART_Receive+0x26>
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e0b7      	b.n	8006fc0 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d101      	bne.n	8006e5e <HAL_UART_Receive+0x38>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e0b0      	b.n	8006fc0 <HAL_UART_Receive+0x19a>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2222      	movs	r2, #34	; 0x22
 8006e72:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e7a:	f7fc f819 	bl	8002eb0 <HAL_GetTick>
 8006e7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e98:	d10e      	bne.n	8006eb8 <HAL_UART_Receive+0x92>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <HAL_UART_Receive+0x88>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eac:	e02d      	b.n	8006f0a <HAL_UART_Receive+0xe4>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	22ff      	movs	r2, #255	; 0xff
 8006eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eb6:	e028      	b.n	8006f0a <HAL_UART_Receive+0xe4>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10d      	bne.n	8006edc <HAL_UART_Receive+0xb6>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <HAL_UART_Receive+0xac>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	22ff      	movs	r2, #255	; 0xff
 8006ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ed0:	e01b      	b.n	8006f0a <HAL_UART_Receive+0xe4>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	227f      	movs	r2, #127	; 0x7f
 8006ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eda:	e016      	b.n	8006f0a <HAL_UART_Receive+0xe4>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ee4:	d10d      	bne.n	8006f02 <HAL_UART_Receive+0xdc>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <HAL_UART_Receive+0xd2>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	227f      	movs	r2, #127	; 0x7f
 8006ef2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ef6:	e008      	b.n	8006f0a <HAL_UART_Receive+0xe4>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	223f      	movs	r2, #63	; 0x3f
 8006efc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f00:	e003      	b.n	8006f0a <HAL_UART_Receive+0xe4>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f10:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1a:	d108      	bne.n	8006f2e <HAL_UART_Receive+0x108>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	61bb      	str	r3, [r7, #24]
 8006f2c:	e003      	b.n	8006f36 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f3e:	e033      	b.n	8006fa8 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2200      	movs	r2, #0
 8006f48:	2120      	movs	r1, #32
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fee3 	bl	8007d16 <UART_WaitOnFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e032      	b.n	8006fc0 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10c      	bne.n	8006f7a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	8a7b      	ldrh	r3, [r7, #18]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	3302      	adds	r3, #2
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	e00d      	b.n	8006f96 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	8a7b      	ldrh	r3, [r7, #18]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	4013      	ands	r3, r2
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	3301      	adds	r3, #1
 8006f94:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1c5      	bne.n	8006f40 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e000      	b.n	8006fc0 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006fbe:	2302      	movs	r3, #2
  }
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fda:	2b20      	cmp	r3, #32
 8006fdc:	d142      	bne.n	8007064 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <HAL_UART_Receive_DMA+0x22>
 8006fe4:	88fb      	ldrh	r3, [r7, #6]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e03b      	b.n	8007066 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_UART_Receive_DMA+0x34>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e034      	b.n	8007066 <HAL_UART_Receive_DMA+0x9e>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a18      	ldr	r2, [pc, #96]	; (8007070 <HAL_UART_Receive_DMA+0xa8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d01f      	beq.n	8007054 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d018      	beq.n	8007054 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	613b      	str	r3, [r7, #16]
   return(result);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	623b      	str	r3, [r7, #32]
 8007042:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	69f9      	ldr	r1, [r7, #28]
 8007046:	6a3a      	ldr	r2, [r7, #32]
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	61bb      	str	r3, [r7, #24]
   return(result);
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e6      	bne.n	8007022 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	461a      	mov	r2, r3
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 ff20 	bl	8007ea0 <UART_Start_Receive_DMA>
 8007060:	4603      	mov	r3, r0
 8007062:	e000      	b.n	8007066 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
  }
}
 8007066:	4618      	mov	r0, r3
 8007068:	3728      	adds	r7, #40	; 0x28
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	40008000 	.word	0x40008000

08007074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b0ba      	sub	sp, #232	; 0xe8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800709a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800709e:	f640 030f 	movw	r3, #2063	; 0x80f
 80070a2:	4013      	ands	r3, r2
 80070a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80070a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d115      	bne.n	80070dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80070b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00f      	beq.n	80070dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80070bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d009      	beq.n	80070dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 82a6 	beq.w	800761e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
      }
      return;
 80070da:	e2a0      	b.n	800761e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80070dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8117 	beq.w	8007314 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070f6:	4b85      	ldr	r3, [pc, #532]	; (800730c <HAL_UART_IRQHandler+0x298>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 810a 	beq.w	8007314 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d011      	beq.n	8007130 <HAL_UART_IRQHandler+0xbc>
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2201      	movs	r2, #1
 800711e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007126:	f043 0201 	orr.w	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d011      	beq.n	8007160 <HAL_UART_IRQHandler+0xec>
 800713c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2202      	movs	r2, #2
 800714e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007156:	f043 0204 	orr.w	r2, r3, #4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d011      	beq.n	8007190 <HAL_UART_IRQHandler+0x11c>
 800716c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2204      	movs	r2, #4
 800717e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007186:	f043 0202 	orr.w	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d017      	beq.n	80071cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800719c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80071a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2208      	movs	r2, #8
 80071ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c2:	f043 0208 	orr.w	r2, r3, #8
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d012      	beq.n	80071fe <HAL_UART_IRQHandler+0x18a>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00c      	beq.n	80071fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f4:	f043 0220 	orr.w	r2, r3, #32
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 820c 	beq.w	8007622 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d005      	beq.n	8007256 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800724a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800724e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007252:	2b00      	cmp	r3, #0
 8007254:	d04f      	beq.n	80072f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 feee 	bl	8008038 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b40      	cmp	r3, #64	; 0x40
 8007268:	d141      	bne.n	80072ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007296:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800729a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1d9      	bne.n	800726a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d013      	beq.n	80072e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	4a13      	ldr	r2, [pc, #76]	; (8007310 <HAL_UART_IRQHandler+0x29c>)
 80072c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fc ff82 	bl	80041d4 <HAL_DMA_Abort_IT>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80072e0:	4610      	mov	r0, r2
 80072e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	e00f      	b.n	8007306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f9ba 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ec:	e00b      	b.n	8007306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f9b6 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f4:	e007      	b.n	8007306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f9b2 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007304:	e18d      	b.n	8007622 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007306:	bf00      	nop
    return;
 8007308:	e18b      	b.n	8007622 <HAL_UART_IRQHandler+0x5ae>
 800730a:	bf00      	nop
 800730c:	04000120 	.word	0x04000120
 8007310:	080082d7 	.word	0x080082d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007318:	2b01      	cmp	r3, #1
 800731a:	f040 8146 	bne.w	80075aa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800731e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007322:	f003 0310 	and.w	r3, r3, #16
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 813f 	beq.w	80075aa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	f003 0310 	and.w	r3, r3, #16
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8138 	beq.w	80075aa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2210      	movs	r2, #16
 8007340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	f040 80b4 	bne.w	80074ba <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800735e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 815f 	beq.w	8007626 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800736e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007372:	429a      	cmp	r2, r3
 8007374:	f080 8157 	bcs.w	8007626 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800737e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	f040 8085 	bne.w	800749e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1da      	bne.n	8007394 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3308      	adds	r3, #8
 80073e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3308      	adds	r3, #8
 80073fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007402:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007406:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800740a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e1      	bne.n	80073de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3308      	adds	r3, #8
 8007420:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800742a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800742c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3308      	adds	r3, #8
 800743a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800743e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007440:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007444:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800744c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e3      	bne.n	800741a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800746c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746e:	f023 0310 	bic.w	r3, r3, #16
 8007472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007480:	65bb      	str	r3, [r7, #88]	; 0x58
 8007482:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007486:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800748e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e4      	bne.n	800745e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007498:	4618      	mov	r0, r3
 800749a:	f7fc fe5d 	bl	8004158 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f8de 	bl	8007674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074b8:	e0b5      	b.n	8007626 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 80a7 	beq.w	800762a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80074dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 80a2 	beq.w	800762a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007508:	647b      	str	r3, [r7, #68]	; 0x44
 800750a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800750e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e4      	bne.n	80074e6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	623b      	str	r3, [r7, #32]
   return(result);
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3308      	adds	r3, #8
 800753c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007540:	633a      	str	r2, [r7, #48]	; 0x30
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e3      	bne.n	800751c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	60fb      	str	r3, [r7, #12]
   return(result);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0310 	bic.w	r3, r3, #16
 800757a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007588:	61fb      	str	r3, [r7, #28]
 800758a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	69b9      	ldr	r1, [r7, #24]
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	617b      	str	r3, [r7, #20]
   return(result);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e4      	bne.n	8007566 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800759c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f866 	bl	8007674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075a8:	e03f      	b.n	800762a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <HAL_UART_IRQHandler+0x560>
 80075b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fec2 	bl	8008356 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075d2:	e02d      	b.n	8007630 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00e      	beq.n	80075fe <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80075e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01c      	beq.n	800762e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	4798      	blx	r3
    }
    return;
 80075fc:	e017      	b.n	800762e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	d012      	beq.n	8007630 <HAL_UART_IRQHandler+0x5bc>
 800760a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00c      	beq.n	8007630 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fe73 	bl	8008302 <UART_EndTransmit_IT>
    return;
 800761c:	e008      	b.n	8007630 <HAL_UART_IRQHandler+0x5bc>
      return;
 800761e:	bf00      	nop
 8007620:	e006      	b.n	8007630 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007622:	bf00      	nop
 8007624:	e004      	b.n	8007630 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007626:	bf00      	nop
 8007628:	e002      	b.n	8007630 <HAL_UART_IRQHandler+0x5bc>
      return;
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <HAL_UART_IRQHandler+0x5bc>
    return;
 800762e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007630:	37e8      	adds	r7, #232	; 0xe8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop

08007638 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800768c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007690:	b08a      	sub	sp, #40	; 0x28
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4b9e      	ldr	r3, [pc, #632]	; (8007934 <UART_SetConfig+0x2a8>)
 80076bc:	4013      	ands	r3, r2
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a93      	ldr	r2, [pc, #588]	; (8007938 <UART_SetConfig+0x2ac>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f4:	4313      	orrs	r3, r2
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007708:	430a      	orrs	r2, r1
 800770a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a8a      	ldr	r2, [pc, #552]	; (800793c <UART_SetConfig+0x2b0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d126      	bne.n	8007764 <UART_SetConfig+0xd8>
 8007716:	4b8a      	ldr	r3, [pc, #552]	; (8007940 <UART_SetConfig+0x2b4>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f003 0303 	and.w	r3, r3, #3
 8007720:	2b03      	cmp	r3, #3
 8007722:	d81b      	bhi.n	800775c <UART_SetConfig+0xd0>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <UART_SetConfig+0xa0>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	0800773d 	.word	0x0800773d
 8007730:	0800774d 	.word	0x0800774d
 8007734:	08007745 	.word	0x08007745
 8007738:	08007755 	.word	0x08007755
 800773c:	2301      	movs	r3, #1
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007742:	e0ab      	b.n	800789c <UART_SetConfig+0x210>
 8007744:	2302      	movs	r3, #2
 8007746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800774a:	e0a7      	b.n	800789c <UART_SetConfig+0x210>
 800774c:	2304      	movs	r3, #4
 800774e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007752:	e0a3      	b.n	800789c <UART_SetConfig+0x210>
 8007754:	2308      	movs	r3, #8
 8007756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800775a:	e09f      	b.n	800789c <UART_SetConfig+0x210>
 800775c:	2310      	movs	r3, #16
 800775e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007762:	e09b      	b.n	800789c <UART_SetConfig+0x210>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a76      	ldr	r2, [pc, #472]	; (8007944 <UART_SetConfig+0x2b8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d138      	bne.n	80077e0 <UART_SetConfig+0x154>
 800776e:	4b74      	ldr	r3, [pc, #464]	; (8007940 <UART_SetConfig+0x2b4>)
 8007770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007774:	f003 030c 	and.w	r3, r3, #12
 8007778:	2b0c      	cmp	r3, #12
 800777a:	d82d      	bhi.n	80077d8 <UART_SetConfig+0x14c>
 800777c:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <UART_SetConfig+0xf8>)
 800777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007782:	bf00      	nop
 8007784:	080077b9 	.word	0x080077b9
 8007788:	080077d9 	.word	0x080077d9
 800778c:	080077d9 	.word	0x080077d9
 8007790:	080077d9 	.word	0x080077d9
 8007794:	080077c9 	.word	0x080077c9
 8007798:	080077d9 	.word	0x080077d9
 800779c:	080077d9 	.word	0x080077d9
 80077a0:	080077d9 	.word	0x080077d9
 80077a4:	080077c1 	.word	0x080077c1
 80077a8:	080077d9 	.word	0x080077d9
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	080077d9 	.word	0x080077d9
 80077b4:	080077d1 	.word	0x080077d1
 80077b8:	2300      	movs	r3, #0
 80077ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077be:	e06d      	b.n	800789c <UART_SetConfig+0x210>
 80077c0:	2302      	movs	r3, #2
 80077c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c6:	e069      	b.n	800789c <UART_SetConfig+0x210>
 80077c8:	2304      	movs	r3, #4
 80077ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ce:	e065      	b.n	800789c <UART_SetConfig+0x210>
 80077d0:	2308      	movs	r3, #8
 80077d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d6:	e061      	b.n	800789c <UART_SetConfig+0x210>
 80077d8:	2310      	movs	r3, #16
 80077da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077de:	e05d      	b.n	800789c <UART_SetConfig+0x210>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a58      	ldr	r2, [pc, #352]	; (8007948 <UART_SetConfig+0x2bc>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d125      	bne.n	8007836 <UART_SetConfig+0x1aa>
 80077ea:	4b55      	ldr	r3, [pc, #340]	; (8007940 <UART_SetConfig+0x2b4>)
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077f4:	2b30      	cmp	r3, #48	; 0x30
 80077f6:	d016      	beq.n	8007826 <UART_SetConfig+0x19a>
 80077f8:	2b30      	cmp	r3, #48	; 0x30
 80077fa:	d818      	bhi.n	800782e <UART_SetConfig+0x1a2>
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d00a      	beq.n	8007816 <UART_SetConfig+0x18a>
 8007800:	2b20      	cmp	r3, #32
 8007802:	d814      	bhi.n	800782e <UART_SetConfig+0x1a2>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <UART_SetConfig+0x182>
 8007808:	2b10      	cmp	r3, #16
 800780a:	d008      	beq.n	800781e <UART_SetConfig+0x192>
 800780c:	e00f      	b.n	800782e <UART_SetConfig+0x1a2>
 800780e:	2300      	movs	r3, #0
 8007810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007814:	e042      	b.n	800789c <UART_SetConfig+0x210>
 8007816:	2302      	movs	r3, #2
 8007818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781c:	e03e      	b.n	800789c <UART_SetConfig+0x210>
 800781e:	2304      	movs	r3, #4
 8007820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007824:	e03a      	b.n	800789c <UART_SetConfig+0x210>
 8007826:	2308      	movs	r3, #8
 8007828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782c:	e036      	b.n	800789c <UART_SetConfig+0x210>
 800782e:	2310      	movs	r3, #16
 8007830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007834:	e032      	b.n	800789c <UART_SetConfig+0x210>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a3f      	ldr	r2, [pc, #252]	; (8007938 <UART_SetConfig+0x2ac>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d12a      	bne.n	8007896 <UART_SetConfig+0x20a>
 8007840:	4b3f      	ldr	r3, [pc, #252]	; (8007940 <UART_SetConfig+0x2b4>)
 8007842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007846:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800784a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800784e:	d01a      	beq.n	8007886 <UART_SetConfig+0x1fa>
 8007850:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007854:	d81b      	bhi.n	800788e <UART_SetConfig+0x202>
 8007856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800785a:	d00c      	beq.n	8007876 <UART_SetConfig+0x1ea>
 800785c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007860:	d815      	bhi.n	800788e <UART_SetConfig+0x202>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <UART_SetConfig+0x1e2>
 8007866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786a:	d008      	beq.n	800787e <UART_SetConfig+0x1f2>
 800786c:	e00f      	b.n	800788e <UART_SetConfig+0x202>
 800786e:	2300      	movs	r3, #0
 8007870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007874:	e012      	b.n	800789c <UART_SetConfig+0x210>
 8007876:	2302      	movs	r3, #2
 8007878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800787c:	e00e      	b.n	800789c <UART_SetConfig+0x210>
 800787e:	2304      	movs	r3, #4
 8007880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007884:	e00a      	b.n	800789c <UART_SetConfig+0x210>
 8007886:	2308      	movs	r3, #8
 8007888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800788c:	e006      	b.n	800789c <UART_SetConfig+0x210>
 800788e:	2310      	movs	r3, #16
 8007890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007894:	e002      	b.n	800789c <UART_SetConfig+0x210>
 8007896:	2310      	movs	r3, #16
 8007898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a25      	ldr	r2, [pc, #148]	; (8007938 <UART_SetConfig+0x2ac>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	f040 808a 	bne.w	80079bc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d824      	bhi.n	80078fa <UART_SetConfig+0x26e>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <UART_SetConfig+0x22c>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078dd 	.word	0x080078dd
 80078bc:	080078fb 	.word	0x080078fb
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078fb 	.word	0x080078fb
 80078c8:	080078eb 	.word	0x080078eb
 80078cc:	080078fb 	.word	0x080078fb
 80078d0:	080078fb 	.word	0x080078fb
 80078d4:	080078fb 	.word	0x080078fb
 80078d8:	080078f3 	.word	0x080078f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078dc:	f7fe fb18 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 80078e0:	61f8      	str	r0, [r7, #28]
        break;
 80078e2:	e010      	b.n	8007906 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078e4:	4b19      	ldr	r3, [pc, #100]	; (800794c <UART_SetConfig+0x2c0>)
 80078e6:	61fb      	str	r3, [r7, #28]
        break;
 80078e8:	e00d      	b.n	8007906 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ea:	f7fe fa7b 	bl	8005de4 <HAL_RCC_GetSysClockFreq>
 80078ee:	61f8      	str	r0, [r7, #28]
        break;
 80078f0:	e009      	b.n	8007906 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078f6:	61fb      	str	r3, [r7, #28]
        break;
 80078f8:	e005      	b.n	8007906 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007904:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8109 	beq.w	8007b20 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4413      	add	r3, r2
 8007918:	69fa      	ldr	r2, [r7, #28]
 800791a:	429a      	cmp	r2, r3
 800791c:	d305      	bcc.n	800792a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	429a      	cmp	r2, r3
 8007928:	d912      	bls.n	8007950 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007930:	e0f6      	b.n	8007b20 <UART_SetConfig+0x494>
 8007932:	bf00      	nop
 8007934:	efff69f3 	.word	0xefff69f3
 8007938:	40008000 	.word	0x40008000
 800793c:	40013800 	.word	0x40013800
 8007940:	40021000 	.word	0x40021000
 8007944:	40004400 	.word	0x40004400
 8007948:	40004800 	.word	0x40004800
 800794c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	2200      	movs	r2, #0
 8007954:	461c      	mov	r4, r3
 8007956:	4615      	mov	r5, r2
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	022b      	lsls	r3, r5, #8
 8007962:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007966:	0222      	lsls	r2, r4, #8
 8007968:	68f9      	ldr	r1, [r7, #12]
 800796a:	6849      	ldr	r1, [r1, #4]
 800796c:	0849      	lsrs	r1, r1, #1
 800796e:	2000      	movs	r0, #0
 8007970:	4688      	mov	r8, r1
 8007972:	4681      	mov	r9, r0
 8007974:	eb12 0a08 	adds.w	sl, r2, r8
 8007978:	eb43 0b09 	adc.w	fp, r3, r9
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	607a      	str	r2, [r7, #4]
 8007986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800798a:	4650      	mov	r0, sl
 800798c:	4659      	mov	r1, fp
 800798e:	f7f9 f95b 	bl	8000c48 <__aeabi_uldivmod>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4613      	mov	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a0:	d308      	bcc.n	80079b4 <UART_SetConfig+0x328>
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a8:	d204      	bcs.n	80079b4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	60da      	str	r2, [r3, #12]
 80079b2:	e0b5      	b.n	8007b20 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079ba:	e0b1      	b.n	8007b20 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c4:	d15d      	bne.n	8007a82 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80079c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d827      	bhi.n	8007a1e <UART_SetConfig+0x392>
 80079ce:	a201      	add	r2, pc, #4	; (adr r2, 80079d4 <UART_SetConfig+0x348>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	08007a1f 	.word	0x08007a1f
 80079e4:	08007a0f 	.word	0x08007a0f
 80079e8:	08007a1f 	.word	0x08007a1f
 80079ec:	08007a1f 	.word	0x08007a1f
 80079f0:	08007a1f 	.word	0x08007a1f
 80079f4:	08007a17 	.word	0x08007a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f8:	f7fe fa8a 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 80079fc:	61f8      	str	r0, [r7, #28]
        break;
 80079fe:	e014      	b.n	8007a2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a00:	f7fe fa9c 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 8007a04:	61f8      	str	r0, [r7, #28]
        break;
 8007a06:	e010      	b.n	8007a2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a08:	4b4c      	ldr	r3, [pc, #304]	; (8007b3c <UART_SetConfig+0x4b0>)
 8007a0a:	61fb      	str	r3, [r7, #28]
        break;
 8007a0c:	e00d      	b.n	8007a2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a0e:	f7fe f9e9 	bl	8005de4 <HAL_RCC_GetSysClockFreq>
 8007a12:	61f8      	str	r0, [r7, #28]
        break;
 8007a14:	e009      	b.n	8007a2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1a:	61fb      	str	r3, [r7, #28]
        break;
 8007a1c:	e005      	b.n	8007a2a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d077      	beq.n	8007b20 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	005a      	lsls	r2, r3, #1
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	085b      	lsrs	r3, r3, #1
 8007a3a:	441a      	add	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	2b0f      	cmp	r3, #15
 8007a4a:	d916      	bls.n	8007a7a <UART_SetConfig+0x3ee>
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a52:	d212      	bcs.n	8007a7a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f023 030f 	bic.w	r3, r3, #15
 8007a5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	8afb      	ldrh	r3, [r7, #22]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	8afa      	ldrh	r2, [r7, #22]
 8007a76:	60da      	str	r2, [r3, #12]
 8007a78:	e052      	b.n	8007b20 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a80:	e04e      	b.n	8007b20 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a86:	2b08      	cmp	r3, #8
 8007a88:	d827      	bhi.n	8007ada <UART_SetConfig+0x44e>
 8007a8a:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <UART_SetConfig+0x404>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007abd 	.word	0x08007abd
 8007a98:	08007ac5 	.word	0x08007ac5
 8007a9c:	08007adb 	.word	0x08007adb
 8007aa0:	08007acb 	.word	0x08007acb
 8007aa4:	08007adb 	.word	0x08007adb
 8007aa8:	08007adb 	.word	0x08007adb
 8007aac:	08007adb 	.word	0x08007adb
 8007ab0:	08007ad3 	.word	0x08007ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab4:	f7fe fa2c 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 8007ab8:	61f8      	str	r0, [r7, #28]
        break;
 8007aba:	e014      	b.n	8007ae6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007abc:	f7fe fa3e 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 8007ac0:	61f8      	str	r0, [r7, #28]
        break;
 8007ac2:	e010      	b.n	8007ae6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ac4:	4b1d      	ldr	r3, [pc, #116]	; (8007b3c <UART_SetConfig+0x4b0>)
 8007ac6:	61fb      	str	r3, [r7, #28]
        break;
 8007ac8:	e00d      	b.n	8007ae6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aca:	f7fe f98b 	bl	8005de4 <HAL_RCC_GetSysClockFreq>
 8007ace:	61f8      	str	r0, [r7, #28]
        break;
 8007ad0:	e009      	b.n	8007ae6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad6:	61fb      	str	r3, [r7, #28]
        break;
 8007ad8:	e005      	b.n	8007ae6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ae4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d019      	beq.n	8007b20 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	085a      	lsrs	r2, r3, #1
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	441a      	add	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	2b0f      	cmp	r3, #15
 8007b04:	d909      	bls.n	8007b1a <UART_SetConfig+0x48e>
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0c:	d205      	bcs.n	8007b1a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	60da      	str	r2, [r3, #12]
 8007b18:	e002      	b.n	8007b20 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3728      	adds	r7, #40	; 0x28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b3a:	bf00      	nop
 8007b3c:	00f42400 	.word	0x00f42400

08007b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00a      	beq.n	8007bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01a      	beq.n	8007c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c3e:	d10a      	bne.n	8007c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	605a      	str	r2, [r3, #4]
  }
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af02      	add	r7, sp, #8
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c94:	f7fb f90c 	bl	8002eb0 <HAL_GetTick>
 8007c98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d10e      	bne.n	8007cc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f82d 	bl	8007d16 <UART_WaitOnFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e023      	b.n	8007d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d10e      	bne.n	8007cf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f817 	bl	8007d16 <UART_WaitOnFlagUntilTimeout>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e00d      	b.n	8007d0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b09c      	sub	sp, #112	; 0x70
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	603b      	str	r3, [r7, #0]
 8007d22:	4613      	mov	r3, r2
 8007d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d26:	e0a5      	b.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2e:	f000 80a1 	beq.w	8007e74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d32:	f7fb f8bd 	bl	8002eb0 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d13e      	bne.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d5c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e6      	bne.n	8007d48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3308      	adds	r3, #8
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	663b      	str	r3, [r7, #96]	; 0x60
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3308      	adds	r3, #8
 8007d98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1e5      	bne.n	8007d7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2220      	movs	r2, #32
 8007db2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e067      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d04f      	beq.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de2:	d147      	bne.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e6      	bne.n	8007dee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e40:	623a      	str	r2, [r7, #32]
 8007e42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	69f9      	ldr	r1, [r7, #28]
 8007e46:	6a3a      	ldr	r2, [r7, #32]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e5      	bne.n	8007e20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e010      	b.n	8007e96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	69da      	ldr	r2, [r3, #28]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	bf0c      	ite	eq
 8007e84:	2301      	moveq	r3, #1
 8007e86:	2300      	movne	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	f43f af4a 	beq.w	8007d28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3770      	adds	r7, #112	; 0x70
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b096      	sub	sp, #88	; 0x58
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	88fa      	ldrh	r2, [r7, #6]
 8007eb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2222      	movs	r2, #34	; 0x22
 8007ec8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d02b      	beq.n	8007f2a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed6:	4a42      	ldr	r2, [pc, #264]	; (8007fe0 <UART_Start_Receive_DMA+0x140>)
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ede:	4a41      	ldr	r2, [pc, #260]	; (8007fe4 <UART_Start_Receive_DMA+0x144>)
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee6:	4a40      	ldr	r2, [pc, #256]	; (8007fe8 <UART_Start_Receive_DMA+0x148>)
 8007ee8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eee:	2200      	movs	r2, #0
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3324      	adds	r3, #36	; 0x24
 8007efc:	4619      	mov	r1, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f02:	461a      	mov	r2, r3
 8007f04:	88fb      	ldrh	r3, [r7, #6]
 8007f06:	f7fc f8c7 	bl	8004098 <HAL_DMA_Start_IT>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00c      	beq.n	8007f2a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2210      	movs	r2, #16
 8007f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2220      	movs	r2, #32
 8007f24:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e055      	b.n	8007fd6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d018      	beq.n	8007f6c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	461a      	mov	r2, r3
 8007f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f58:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f5a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f60:	e841 2300 	strex	r3, r2, [r1]
 8007f64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e6      	bne.n	8007f3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3308      	adds	r3, #8
 8007f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	e853 3f00 	ldrex	r3, [r3]
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	653b      	str	r3, [r7, #80]	; 0x50
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3308      	adds	r3, #8
 8007f8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f8c:	637a      	str	r2, [r7, #52]	; 0x34
 8007f8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e5      	bne.n	8007f6c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	e853 3f00 	ldrex	r3, [r3]
 8007fae:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc0:	623a      	str	r2, [r7, #32]
 8007fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	69f9      	ldr	r1, [r7, #28]
 8007fc6:	6a3a      	ldr	r2, [r7, #32]
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e5      	bne.n	8007fa0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3758      	adds	r7, #88	; 0x58
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	080080ff 	.word	0x080080ff
 8007fe4:	08008223 	.word	0x08008223
 8007fe8:	0800825b 	.word	0x0800825b

08007fec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b089      	sub	sp, #36	; 0x24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	60bb      	str	r3, [r7, #8]
   return(result);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6979      	ldr	r1, [r7, #20]
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	613b      	str	r3, [r7, #16]
   return(result);
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e6      	bne.n	8007ff4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800802c:	bf00      	nop
 800802e:	3724      	adds	r7, #36	; 0x24
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008038:	b480      	push	{r7}
 800803a:	b095      	sub	sp, #84	; 0x54
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	461a      	mov	r2, r3
 800805c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800805e:	643b      	str	r3, [r7, #64]	; 0x40
 8008060:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e6      	bne.n	8008040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	61fb      	str	r3, [r7, #28]
   return(result);
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	64bb      	str	r3, [r7, #72]	; 0x48
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e5      	bne.n	8008072 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d118      	bne.n	80080e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	e853 3f00 	ldrex	r3, [r3]
 80080ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f023 0310 	bic.w	r3, r3, #16
 80080c2:	647b      	str	r3, [r7, #68]	; 0x44
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080cc:	61bb      	str	r3, [r7, #24]
 80080ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6979      	ldr	r1, [r7, #20]
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	613b      	str	r3, [r7, #16]
   return(result);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e6      	bne.n	80080ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2220      	movs	r2, #32
 80080e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80080f2:	bf00      	nop
 80080f4:	3754      	adds	r7, #84	; 0x54
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b09c      	sub	sp, #112	; 0x70
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0320 	and.w	r3, r3, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	d170      	bne.n	80081fc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800811a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811c:	2200      	movs	r2, #0
 800811e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800812a:	e853 3f00 	ldrex	r3, [r3]
 800812e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008136:	66bb      	str	r3, [r7, #104]	; 0x68
 8008138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008140:	65bb      	str	r3, [r7, #88]	; 0x58
 8008142:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008144:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008148:	e841 2300 	strex	r3, r2, [r1]
 800814c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800814e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e6      	bne.n	8008122 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3308      	adds	r3, #8
 800815a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008166:	f023 0301 	bic.w	r3, r3, #1
 800816a:	667b      	str	r3, [r7, #100]	; 0x64
 800816c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3308      	adds	r3, #8
 8008172:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008174:	647a      	str	r2, [r7, #68]	; 0x44
 8008176:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800817a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e5      	bne.n	8008154 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	623b      	str	r3, [r7, #32]
   return(result);
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800819e:	663b      	str	r3, [r7, #96]	; 0x60
 80081a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081a8:	633a      	str	r2, [r7, #48]	; 0x30
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e5      	bne.n	8008188 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081be:	2220      	movs	r2, #32
 80081c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d118      	bne.n	80081fc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0310 	bic.w	r3, r3, #16
 80081de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	461a      	mov	r2, r3
 80081e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e8:	61fb      	str	r3, [r7, #28]
 80081ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	69b9      	ldr	r1, [r7, #24]
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	617b      	str	r3, [r7, #20]
   return(result);
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e6      	bne.n	80081ca <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008200:	2b01      	cmp	r3, #1
 8008202:	d107      	bne.n	8008214 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008206:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800820a:	4619      	mov	r1, r3
 800820c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800820e:	f7ff fa31 	bl	8007674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008212:	e002      	b.n	800821a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8008214:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008216:	f7f9 f9d9 	bl	80015cc <HAL_UART_RxCpltCallback>
}
 800821a:	bf00      	nop
 800821c:	3770      	adds	r7, #112	; 0x70
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008234:	2b01      	cmp	r3, #1
 8008236:	d109      	bne.n	800824c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	b29b      	uxth	r3, r3
 8008242:	4619      	mov	r1, r3
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff fa15 	bl	8007674 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800824a:	e002      	b.n	8008252 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7ff f9fd 	bl	800764c <HAL_UART_RxHalfCpltCallback>
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b086      	sub	sp, #24
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800826c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008272:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800827e:	2b80      	cmp	r3, #128	; 0x80
 8008280:	d109      	bne.n	8008296 <UART_DMAError+0x3c>
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b21      	cmp	r3, #33	; 0x21
 8008286:	d106      	bne.n	8008296 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2200      	movs	r2, #0
 800828c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008290:	6978      	ldr	r0, [r7, #20]
 8008292:	f7ff feab 	bl	8007fec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a0:	2b40      	cmp	r3, #64	; 0x40
 80082a2:	d109      	bne.n	80082b8 <UART_DMAError+0x5e>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b22      	cmp	r3, #34	; 0x22
 80082a8:	d106      	bne.n	80082b8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80082b2:	6978      	ldr	r0, [r7, #20]
 80082b4:	f7ff fec0 	bl	8008038 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082be:	f043 0210 	orr.w	r2, r3, #16
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082c8:	6978      	ldr	r0, [r7, #20]
 80082ca:	f7ff f9c9 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ce:	bf00      	nop
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f7ff f9b3 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b088      	sub	sp, #32
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	60bb      	str	r3, [r7, #8]
   return(result);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831e:	61fb      	str	r3, [r7, #28]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	61bb      	str	r3, [r7, #24]
 800832a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6979      	ldr	r1, [r7, #20]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	613b      	str	r3, [r7, #16]
   return(result);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff f975 	bl	8007638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800834e:	bf00      	nop
 8008350:	3720      	adds	r7, #32
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	; (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	2000001c 	.word	0x2000001c

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4d0d      	ldr	r5, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2600      	movs	r6, #0
 8008384:	42a6      	cmp	r6, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4d0b      	ldr	r5, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f002 ff16 	bl	800b1bc <_init>
 8008390:	1b64      	subs	r4, r4, r5
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2600      	movs	r6, #0
 8008396:	42a6      	cmp	r6, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a0:	4798      	blx	r3
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083aa:	4798      	blx	r3
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	0800d1d4 	.word	0x0800d1d4
 80083b4:	0800d1d4 	.word	0x0800d1d4
 80083b8:	0800d1d4 	.word	0x0800d1d4
 80083bc:	0800d1d8 	.word	0x0800d1d8

080083c0 <memcpy>:
 80083c0:	440a      	add	r2, r1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d100      	bne.n	80083cc <memcpy+0xc>
 80083ca:	4770      	bx	lr
 80083cc:	b510      	push	{r4, lr}
 80083ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d6:	4291      	cmp	r1, r2
 80083d8:	d1f9      	bne.n	80083ce <memcpy+0xe>
 80083da:	bd10      	pop	{r4, pc}

080083dc <memset>:
 80083dc:	4402      	add	r2, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <__cvt>:
 80083ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	ec55 4b10 	vmov	r4, r5, d0
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	460e      	mov	r6, r1
 80083f8:	4619      	mov	r1, r3
 80083fa:	462b      	mov	r3, r5
 80083fc:	bfbb      	ittet	lt
 80083fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008402:	461d      	movlt	r5, r3
 8008404:	2300      	movge	r3, #0
 8008406:	232d      	movlt	r3, #45	; 0x2d
 8008408:	700b      	strb	r3, [r1, #0]
 800840a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800840c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008410:	4691      	mov	r9, r2
 8008412:	f023 0820 	bic.w	r8, r3, #32
 8008416:	bfbc      	itt	lt
 8008418:	4622      	movlt	r2, r4
 800841a:	4614      	movlt	r4, r2
 800841c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008420:	d005      	beq.n	800842e <__cvt+0x42>
 8008422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008426:	d100      	bne.n	800842a <__cvt+0x3e>
 8008428:	3601      	adds	r6, #1
 800842a:	2102      	movs	r1, #2
 800842c:	e000      	b.n	8008430 <__cvt+0x44>
 800842e:	2103      	movs	r1, #3
 8008430:	ab03      	add	r3, sp, #12
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	ab02      	add	r3, sp, #8
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	ec45 4b10 	vmov	d0, r4, r5
 800843c:	4653      	mov	r3, sl
 800843e:	4632      	mov	r2, r6
 8008440:	f000 fcfe 	bl	8008e40 <_dtoa_r>
 8008444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008448:	4607      	mov	r7, r0
 800844a:	d102      	bne.n	8008452 <__cvt+0x66>
 800844c:	f019 0f01 	tst.w	r9, #1
 8008450:	d022      	beq.n	8008498 <__cvt+0xac>
 8008452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008456:	eb07 0906 	add.w	r9, r7, r6
 800845a:	d110      	bne.n	800847e <__cvt+0x92>
 800845c:	783b      	ldrb	r3, [r7, #0]
 800845e:	2b30      	cmp	r3, #48	; 0x30
 8008460:	d10a      	bne.n	8008478 <__cvt+0x8c>
 8008462:	2200      	movs	r2, #0
 8008464:	2300      	movs	r3, #0
 8008466:	4620      	mov	r0, r4
 8008468:	4629      	mov	r1, r5
 800846a:	f7f8 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800846e:	b918      	cbnz	r0, 8008478 <__cvt+0x8c>
 8008470:	f1c6 0601 	rsb	r6, r6, #1
 8008474:	f8ca 6000 	str.w	r6, [sl]
 8008478:	f8da 3000 	ldr.w	r3, [sl]
 800847c:	4499      	add	r9, r3
 800847e:	2200      	movs	r2, #0
 8008480:	2300      	movs	r3, #0
 8008482:	4620      	mov	r0, r4
 8008484:	4629      	mov	r1, r5
 8008486:	f7f8 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800848a:	b108      	cbz	r0, 8008490 <__cvt+0xa4>
 800848c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008490:	2230      	movs	r2, #48	; 0x30
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	454b      	cmp	r3, r9
 8008496:	d307      	bcc.n	80084a8 <__cvt+0xbc>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800849c:	1bdb      	subs	r3, r3, r7
 800849e:	4638      	mov	r0, r7
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	b004      	add	sp, #16
 80084a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a8:	1c59      	adds	r1, r3, #1
 80084aa:	9103      	str	r1, [sp, #12]
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e7f0      	b.n	8008492 <__cvt+0xa6>

080084b0 <__exponent>:
 80084b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084b2:	4603      	mov	r3, r0
 80084b4:	2900      	cmp	r1, #0
 80084b6:	bfb8      	it	lt
 80084b8:	4249      	neglt	r1, r1
 80084ba:	f803 2b02 	strb.w	r2, [r3], #2
 80084be:	bfb4      	ite	lt
 80084c0:	222d      	movlt	r2, #45	; 0x2d
 80084c2:	222b      	movge	r2, #43	; 0x2b
 80084c4:	2909      	cmp	r1, #9
 80084c6:	7042      	strb	r2, [r0, #1]
 80084c8:	dd2a      	ble.n	8008520 <__exponent+0x70>
 80084ca:	f10d 0407 	add.w	r4, sp, #7
 80084ce:	46a4      	mov	ip, r4
 80084d0:	270a      	movs	r7, #10
 80084d2:	46a6      	mov	lr, r4
 80084d4:	460a      	mov	r2, r1
 80084d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80084da:	fb07 1516 	mls	r5, r7, r6, r1
 80084de:	3530      	adds	r5, #48	; 0x30
 80084e0:	2a63      	cmp	r2, #99	; 0x63
 80084e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80084e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084ea:	4631      	mov	r1, r6
 80084ec:	dcf1      	bgt.n	80084d2 <__exponent+0x22>
 80084ee:	3130      	adds	r1, #48	; 0x30
 80084f0:	f1ae 0502 	sub.w	r5, lr, #2
 80084f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084f8:	1c44      	adds	r4, r0, #1
 80084fa:	4629      	mov	r1, r5
 80084fc:	4561      	cmp	r1, ip
 80084fe:	d30a      	bcc.n	8008516 <__exponent+0x66>
 8008500:	f10d 0209 	add.w	r2, sp, #9
 8008504:	eba2 020e 	sub.w	r2, r2, lr
 8008508:	4565      	cmp	r5, ip
 800850a:	bf88      	it	hi
 800850c:	2200      	movhi	r2, #0
 800850e:	4413      	add	r3, r2
 8008510:	1a18      	subs	r0, r3, r0
 8008512:	b003      	add	sp, #12
 8008514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800851e:	e7ed      	b.n	80084fc <__exponent+0x4c>
 8008520:	2330      	movs	r3, #48	; 0x30
 8008522:	3130      	adds	r1, #48	; 0x30
 8008524:	7083      	strb	r3, [r0, #2]
 8008526:	70c1      	strb	r1, [r0, #3]
 8008528:	1d03      	adds	r3, r0, #4
 800852a:	e7f1      	b.n	8008510 <__exponent+0x60>

0800852c <_printf_float>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	ed2d 8b02 	vpush	{d8}
 8008534:	b08d      	sub	sp, #52	; 0x34
 8008536:	460c      	mov	r4, r1
 8008538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800853c:	4616      	mov	r6, r2
 800853e:	461f      	mov	r7, r3
 8008540:	4605      	mov	r5, r0
 8008542:	f001 fa6b 	bl	8009a1c <_localeconv_r>
 8008546:	f8d0 a000 	ldr.w	sl, [r0]
 800854a:	4650      	mov	r0, sl
 800854c:	f7f7 fe40 	bl	80001d0 <strlen>
 8008550:	2300      	movs	r3, #0
 8008552:	930a      	str	r3, [sp, #40]	; 0x28
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	9305      	str	r3, [sp, #20]
 8008558:	f8d8 3000 	ldr.w	r3, [r8]
 800855c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	f103 0208 	add.w	r2, r3, #8
 800856a:	f8c8 2000 	str.w	r2, [r8]
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008576:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800857a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800857e:	9307      	str	r3, [sp, #28]
 8008580:	f8cd 8018 	str.w	r8, [sp, #24]
 8008584:	ee08 0a10 	vmov	s16, r0
 8008588:	4b9f      	ldr	r3, [pc, #636]	; (8008808 <_printf_float+0x2dc>)
 800858a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800858e:	f04f 32ff 	mov.w	r2, #4294967295
 8008592:	f7f8 facb 	bl	8000b2c <__aeabi_dcmpun>
 8008596:	bb88      	cbnz	r0, 80085fc <_printf_float+0xd0>
 8008598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859c:	4b9a      	ldr	r3, [pc, #616]	; (8008808 <_printf_float+0x2dc>)
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	f7f8 faa5 	bl	8000af0 <__aeabi_dcmple>
 80085a6:	bb48      	cbnz	r0, 80085fc <_printf_float+0xd0>
 80085a8:	2200      	movs	r2, #0
 80085aa:	2300      	movs	r3, #0
 80085ac:	4640      	mov	r0, r8
 80085ae:	4649      	mov	r1, r9
 80085b0:	f7f8 fa94 	bl	8000adc <__aeabi_dcmplt>
 80085b4:	b110      	cbz	r0, 80085bc <_printf_float+0x90>
 80085b6:	232d      	movs	r3, #45	; 0x2d
 80085b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085bc:	4b93      	ldr	r3, [pc, #588]	; (800880c <_printf_float+0x2e0>)
 80085be:	4894      	ldr	r0, [pc, #592]	; (8008810 <_printf_float+0x2e4>)
 80085c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80085c4:	bf94      	ite	ls
 80085c6:	4698      	movls	r8, r3
 80085c8:	4680      	movhi	r8, r0
 80085ca:	2303      	movs	r3, #3
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	f023 0204 	bic.w	r2, r3, #4
 80085d4:	6022      	str	r2, [r4, #0]
 80085d6:	f04f 0900 	mov.w	r9, #0
 80085da:	9700      	str	r7, [sp, #0]
 80085dc:	4633      	mov	r3, r6
 80085de:	aa0b      	add	r2, sp, #44	; 0x2c
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 f9d8 	bl	8008998 <_printf_common>
 80085e8:	3001      	adds	r0, #1
 80085ea:	f040 8090 	bne.w	800870e <_printf_float+0x1e2>
 80085ee:	f04f 30ff 	mov.w	r0, #4294967295
 80085f2:	b00d      	add	sp, #52	; 0x34
 80085f4:	ecbd 8b02 	vpop	{d8}
 80085f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fc:	4642      	mov	r2, r8
 80085fe:	464b      	mov	r3, r9
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f8 fa92 	bl	8000b2c <__aeabi_dcmpun>
 8008608:	b140      	cbz	r0, 800861c <_printf_float+0xf0>
 800860a:	464b      	mov	r3, r9
 800860c:	2b00      	cmp	r3, #0
 800860e:	bfbc      	itt	lt
 8008610:	232d      	movlt	r3, #45	; 0x2d
 8008612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008616:	487f      	ldr	r0, [pc, #508]	; (8008814 <_printf_float+0x2e8>)
 8008618:	4b7f      	ldr	r3, [pc, #508]	; (8008818 <_printf_float+0x2ec>)
 800861a:	e7d1      	b.n	80085c0 <_printf_float+0x94>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008622:	9206      	str	r2, [sp, #24]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	d13f      	bne.n	80086a8 <_printf_float+0x17c>
 8008628:	2306      	movs	r3, #6
 800862a:	6063      	str	r3, [r4, #4]
 800862c:	9b05      	ldr	r3, [sp, #20]
 800862e:	6861      	ldr	r1, [r4, #4]
 8008630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008634:	2300      	movs	r3, #0
 8008636:	9303      	str	r3, [sp, #12]
 8008638:	ab0a      	add	r3, sp, #40	; 0x28
 800863a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800863e:	ab09      	add	r3, sp, #36	; 0x24
 8008640:	ec49 8b10 	vmov	d0, r8, r9
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	6022      	str	r2, [r4, #0]
 8008648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800864c:	4628      	mov	r0, r5
 800864e:	f7ff fecd 	bl	80083ec <__cvt>
 8008652:	9b06      	ldr	r3, [sp, #24]
 8008654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008656:	2b47      	cmp	r3, #71	; 0x47
 8008658:	4680      	mov	r8, r0
 800865a:	d108      	bne.n	800866e <_printf_float+0x142>
 800865c:	1cc8      	adds	r0, r1, #3
 800865e:	db02      	blt.n	8008666 <_printf_float+0x13a>
 8008660:	6863      	ldr	r3, [r4, #4]
 8008662:	4299      	cmp	r1, r3
 8008664:	dd41      	ble.n	80086ea <_printf_float+0x1be>
 8008666:	f1ab 0b02 	sub.w	fp, fp, #2
 800866a:	fa5f fb8b 	uxtb.w	fp, fp
 800866e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008672:	d820      	bhi.n	80086b6 <_printf_float+0x18a>
 8008674:	3901      	subs	r1, #1
 8008676:	465a      	mov	r2, fp
 8008678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800867c:	9109      	str	r1, [sp, #36]	; 0x24
 800867e:	f7ff ff17 	bl	80084b0 <__exponent>
 8008682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008684:	1813      	adds	r3, r2, r0
 8008686:	2a01      	cmp	r2, #1
 8008688:	4681      	mov	r9, r0
 800868a:	6123      	str	r3, [r4, #16]
 800868c:	dc02      	bgt.n	8008694 <_printf_float+0x168>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	07d2      	lsls	r2, r2, #31
 8008692:	d501      	bpl.n	8008698 <_printf_float+0x16c>
 8008694:	3301      	adds	r3, #1
 8008696:	6123      	str	r3, [r4, #16]
 8008698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800869c:	2b00      	cmp	r3, #0
 800869e:	d09c      	beq.n	80085da <_printf_float+0xae>
 80086a0:	232d      	movs	r3, #45	; 0x2d
 80086a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a6:	e798      	b.n	80085da <_printf_float+0xae>
 80086a8:	9a06      	ldr	r2, [sp, #24]
 80086aa:	2a47      	cmp	r2, #71	; 0x47
 80086ac:	d1be      	bne.n	800862c <_printf_float+0x100>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1bc      	bne.n	800862c <_printf_float+0x100>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e7b9      	b.n	800862a <_printf_float+0xfe>
 80086b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80086ba:	d118      	bne.n	80086ee <_printf_float+0x1c2>
 80086bc:	2900      	cmp	r1, #0
 80086be:	6863      	ldr	r3, [r4, #4]
 80086c0:	dd0b      	ble.n	80086da <_printf_float+0x1ae>
 80086c2:	6121      	str	r1, [r4, #16]
 80086c4:	b913      	cbnz	r3, 80086cc <_printf_float+0x1a0>
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	07d0      	lsls	r0, r2, #31
 80086ca:	d502      	bpl.n	80086d2 <_printf_float+0x1a6>
 80086cc:	3301      	adds	r3, #1
 80086ce:	440b      	add	r3, r1
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80086d4:	f04f 0900 	mov.w	r9, #0
 80086d8:	e7de      	b.n	8008698 <_printf_float+0x16c>
 80086da:	b913      	cbnz	r3, 80086e2 <_printf_float+0x1b6>
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	07d2      	lsls	r2, r2, #31
 80086e0:	d501      	bpl.n	80086e6 <_printf_float+0x1ba>
 80086e2:	3302      	adds	r3, #2
 80086e4:	e7f4      	b.n	80086d0 <_printf_float+0x1a4>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e7f2      	b.n	80086d0 <_printf_float+0x1a4>
 80086ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086f0:	4299      	cmp	r1, r3
 80086f2:	db05      	blt.n	8008700 <_printf_float+0x1d4>
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	6121      	str	r1, [r4, #16]
 80086f8:	07d8      	lsls	r0, r3, #31
 80086fa:	d5ea      	bpl.n	80086d2 <_printf_float+0x1a6>
 80086fc:	1c4b      	adds	r3, r1, #1
 80086fe:	e7e7      	b.n	80086d0 <_printf_float+0x1a4>
 8008700:	2900      	cmp	r1, #0
 8008702:	bfd4      	ite	le
 8008704:	f1c1 0202 	rsble	r2, r1, #2
 8008708:	2201      	movgt	r2, #1
 800870a:	4413      	add	r3, r2
 800870c:	e7e0      	b.n	80086d0 <_printf_float+0x1a4>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	055a      	lsls	r2, r3, #21
 8008712:	d407      	bmi.n	8008724 <_printf_float+0x1f8>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	4642      	mov	r2, r8
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	d12c      	bne.n	800877c <_printf_float+0x250>
 8008722:	e764      	b.n	80085ee <_printf_float+0xc2>
 8008724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008728:	f240 80e0 	bls.w	80088ec <_printf_float+0x3c0>
 800872c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	f7f8 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008738:	2800      	cmp	r0, #0
 800873a:	d034      	beq.n	80087a6 <_printf_float+0x27a>
 800873c:	4a37      	ldr	r2, [pc, #220]	; (800881c <_printf_float+0x2f0>)
 800873e:	2301      	movs	r3, #1
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f af51 	beq.w	80085ee <_printf_float+0xc2>
 800874c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008750:	429a      	cmp	r2, r3
 8008752:	db02      	blt.n	800875a <_printf_float+0x22e>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07d8      	lsls	r0, r3, #31
 8008758:	d510      	bpl.n	800877c <_printf_float+0x250>
 800875a:	ee18 3a10 	vmov	r3, s16
 800875e:	4652      	mov	r2, sl
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	f43f af41 	beq.w	80085ee <_printf_float+0xc2>
 800876c:	f04f 0800 	mov.w	r8, #0
 8008770:	f104 091a 	add.w	r9, r4, #26
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	3b01      	subs	r3, #1
 8008778:	4543      	cmp	r3, r8
 800877a:	dc09      	bgt.n	8008790 <_printf_float+0x264>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	079b      	lsls	r3, r3, #30
 8008780:	f100 8105 	bmi.w	800898e <_printf_float+0x462>
 8008784:	68e0      	ldr	r0, [r4, #12]
 8008786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008788:	4298      	cmp	r0, r3
 800878a:	bfb8      	it	lt
 800878c:	4618      	movlt	r0, r3
 800878e:	e730      	b.n	80085f2 <_printf_float+0xc6>
 8008790:	2301      	movs	r3, #1
 8008792:	464a      	mov	r2, r9
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f af27 	beq.w	80085ee <_printf_float+0xc2>
 80087a0:	f108 0801 	add.w	r8, r8, #1
 80087a4:	e7e6      	b.n	8008774 <_printf_float+0x248>
 80087a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dc39      	bgt.n	8008820 <_printf_float+0x2f4>
 80087ac:	4a1b      	ldr	r2, [pc, #108]	; (800881c <_printf_float+0x2f0>)
 80087ae:	2301      	movs	r3, #1
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f af19 	beq.w	80085ee <_printf_float+0xc2>
 80087bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087c0:	4313      	orrs	r3, r2
 80087c2:	d102      	bne.n	80087ca <_printf_float+0x29e>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	07d9      	lsls	r1, r3, #31
 80087c8:	d5d8      	bpl.n	800877c <_printf_float+0x250>
 80087ca:	ee18 3a10 	vmov	r3, s16
 80087ce:	4652      	mov	r2, sl
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f af09 	beq.w	80085ee <_printf_float+0xc2>
 80087dc:	f04f 0900 	mov.w	r9, #0
 80087e0:	f104 0a1a 	add.w	sl, r4, #26
 80087e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e6:	425b      	negs	r3, r3
 80087e8:	454b      	cmp	r3, r9
 80087ea:	dc01      	bgt.n	80087f0 <_printf_float+0x2c4>
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	e792      	b.n	8008716 <_printf_float+0x1ea>
 80087f0:	2301      	movs	r3, #1
 80087f2:	4652      	mov	r2, sl
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	f43f aef7 	beq.w	80085ee <_printf_float+0xc2>
 8008800:	f109 0901 	add.w	r9, r9, #1
 8008804:	e7ee      	b.n	80087e4 <_printf_float+0x2b8>
 8008806:	bf00      	nop
 8008808:	7fefffff 	.word	0x7fefffff
 800880c:	0800cdf8 	.word	0x0800cdf8
 8008810:	0800cdfc 	.word	0x0800cdfc
 8008814:	0800ce04 	.word	0x0800ce04
 8008818:	0800ce00 	.word	0x0800ce00
 800881c:	0800ce08 	.word	0x0800ce08
 8008820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008824:	429a      	cmp	r2, r3
 8008826:	bfa8      	it	ge
 8008828:	461a      	movge	r2, r3
 800882a:	2a00      	cmp	r2, #0
 800882c:	4691      	mov	r9, r2
 800882e:	dc37      	bgt.n	80088a0 <_printf_float+0x374>
 8008830:	f04f 0b00 	mov.w	fp, #0
 8008834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008838:	f104 021a 	add.w	r2, r4, #26
 800883c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800883e:	9305      	str	r3, [sp, #20]
 8008840:	eba3 0309 	sub.w	r3, r3, r9
 8008844:	455b      	cmp	r3, fp
 8008846:	dc33      	bgt.n	80088b0 <_printf_float+0x384>
 8008848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800884c:	429a      	cmp	r2, r3
 800884e:	db3b      	blt.n	80088c8 <_printf_float+0x39c>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07da      	lsls	r2, r3, #31
 8008854:	d438      	bmi.n	80088c8 <_printf_float+0x39c>
 8008856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008858:	9a05      	ldr	r2, [sp, #20]
 800885a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800885c:	1a9a      	subs	r2, r3, r2
 800885e:	eba3 0901 	sub.w	r9, r3, r1
 8008862:	4591      	cmp	r9, r2
 8008864:	bfa8      	it	ge
 8008866:	4691      	movge	r9, r2
 8008868:	f1b9 0f00 	cmp.w	r9, #0
 800886c:	dc35      	bgt.n	80088da <_printf_float+0x3ae>
 800886e:	f04f 0800 	mov.w	r8, #0
 8008872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008876:	f104 0a1a 	add.w	sl, r4, #26
 800887a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887e:	1a9b      	subs	r3, r3, r2
 8008880:	eba3 0309 	sub.w	r3, r3, r9
 8008884:	4543      	cmp	r3, r8
 8008886:	f77f af79 	ble.w	800877c <_printf_float+0x250>
 800888a:	2301      	movs	r3, #1
 800888c:	4652      	mov	r2, sl
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	47b8      	blx	r7
 8008894:	3001      	adds	r0, #1
 8008896:	f43f aeaa 	beq.w	80085ee <_printf_float+0xc2>
 800889a:	f108 0801 	add.w	r8, r8, #1
 800889e:	e7ec      	b.n	800887a <_printf_float+0x34e>
 80088a0:	4613      	mov	r3, r2
 80088a2:	4631      	mov	r1, r6
 80088a4:	4642      	mov	r2, r8
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	d1c0      	bne.n	8008830 <_printf_float+0x304>
 80088ae:	e69e      	b.n	80085ee <_printf_float+0xc2>
 80088b0:	2301      	movs	r3, #1
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	9205      	str	r2, [sp, #20]
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f ae97 	beq.w	80085ee <_printf_float+0xc2>
 80088c0:	9a05      	ldr	r2, [sp, #20]
 80088c2:	f10b 0b01 	add.w	fp, fp, #1
 80088c6:	e7b9      	b.n	800883c <_printf_float+0x310>
 80088c8:	ee18 3a10 	vmov	r3, s16
 80088cc:	4652      	mov	r2, sl
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d1be      	bne.n	8008856 <_printf_float+0x32a>
 80088d8:	e689      	b.n	80085ee <_printf_float+0xc2>
 80088da:	9a05      	ldr	r2, [sp, #20]
 80088dc:	464b      	mov	r3, r9
 80088de:	4442      	add	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d1c1      	bne.n	800886e <_printf_float+0x342>
 80088ea:	e680      	b.n	80085ee <_printf_float+0xc2>
 80088ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ee:	2a01      	cmp	r2, #1
 80088f0:	dc01      	bgt.n	80088f6 <_printf_float+0x3ca>
 80088f2:	07db      	lsls	r3, r3, #31
 80088f4:	d538      	bpl.n	8008968 <_printf_float+0x43c>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4642      	mov	r2, r8
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f ae74 	beq.w	80085ee <_printf_float+0xc2>
 8008906:	ee18 3a10 	vmov	r3, s16
 800890a:	4652      	mov	r2, sl
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f ae6b 	beq.w	80085ee <_printf_float+0xc2>
 8008918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800891c:	2200      	movs	r2, #0
 800891e:	2300      	movs	r3, #0
 8008920:	f7f8 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008924:	b9d8      	cbnz	r0, 800895e <_printf_float+0x432>
 8008926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008928:	f108 0201 	add.w	r2, r8, #1
 800892c:	3b01      	subs	r3, #1
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	d10e      	bne.n	8008956 <_printf_float+0x42a>
 8008938:	e659      	b.n	80085ee <_printf_float+0xc2>
 800893a:	2301      	movs	r3, #1
 800893c:	4652      	mov	r2, sl
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	f43f ae52 	beq.w	80085ee <_printf_float+0xc2>
 800894a:	f108 0801 	add.w	r8, r8, #1
 800894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008950:	3b01      	subs	r3, #1
 8008952:	4543      	cmp	r3, r8
 8008954:	dcf1      	bgt.n	800893a <_printf_float+0x40e>
 8008956:	464b      	mov	r3, r9
 8008958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800895c:	e6dc      	b.n	8008718 <_printf_float+0x1ec>
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	f104 0a1a 	add.w	sl, r4, #26
 8008966:	e7f2      	b.n	800894e <_printf_float+0x422>
 8008968:	2301      	movs	r3, #1
 800896a:	4642      	mov	r2, r8
 800896c:	e7df      	b.n	800892e <_printf_float+0x402>
 800896e:	2301      	movs	r3, #1
 8008970:	464a      	mov	r2, r9
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae38 	beq.w	80085ee <_printf_float+0xc2>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	68e3      	ldr	r3, [r4, #12]
 8008984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008986:	1a5b      	subs	r3, r3, r1
 8008988:	4543      	cmp	r3, r8
 800898a:	dcf0      	bgt.n	800896e <_printf_float+0x442>
 800898c:	e6fa      	b.n	8008784 <_printf_float+0x258>
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	f104 0919 	add.w	r9, r4, #25
 8008996:	e7f4      	b.n	8008982 <_printf_float+0x456>

08008998 <_printf_common>:
 8008998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800899c:	4616      	mov	r6, r2
 800899e:	4699      	mov	r9, r3
 80089a0:	688a      	ldr	r2, [r1, #8]
 80089a2:	690b      	ldr	r3, [r1, #16]
 80089a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089a8:	4293      	cmp	r3, r2
 80089aa:	bfb8      	it	lt
 80089ac:	4613      	movlt	r3, r2
 80089ae:	6033      	str	r3, [r6, #0]
 80089b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089b4:	4607      	mov	r7, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	b10a      	cbz	r2, 80089be <_printf_common+0x26>
 80089ba:	3301      	adds	r3, #1
 80089bc:	6033      	str	r3, [r6, #0]
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	0699      	lsls	r1, r3, #26
 80089c2:	bf42      	ittt	mi
 80089c4:	6833      	ldrmi	r3, [r6, #0]
 80089c6:	3302      	addmi	r3, #2
 80089c8:	6033      	strmi	r3, [r6, #0]
 80089ca:	6825      	ldr	r5, [r4, #0]
 80089cc:	f015 0506 	ands.w	r5, r5, #6
 80089d0:	d106      	bne.n	80089e0 <_printf_common+0x48>
 80089d2:	f104 0a19 	add.w	sl, r4, #25
 80089d6:	68e3      	ldr	r3, [r4, #12]
 80089d8:	6832      	ldr	r2, [r6, #0]
 80089da:	1a9b      	subs	r3, r3, r2
 80089dc:	42ab      	cmp	r3, r5
 80089de:	dc26      	bgt.n	8008a2e <_printf_common+0x96>
 80089e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089e4:	1e13      	subs	r3, r2, #0
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	bf18      	it	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	0692      	lsls	r2, r2, #26
 80089ee:	d42b      	bmi.n	8008a48 <_printf_common+0xb0>
 80089f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089f4:	4649      	mov	r1, r9
 80089f6:	4638      	mov	r0, r7
 80089f8:	47c0      	blx	r8
 80089fa:	3001      	adds	r0, #1
 80089fc:	d01e      	beq.n	8008a3c <_printf_common+0xa4>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	68e5      	ldr	r5, [r4, #12]
 8008a02:	6832      	ldr	r2, [r6, #0]
 8008a04:	f003 0306 	and.w	r3, r3, #6
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	bf08      	it	eq
 8008a0c:	1aad      	subeq	r5, r5, r2
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	6922      	ldr	r2, [r4, #16]
 8008a12:	bf0c      	ite	eq
 8008a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a18:	2500      	movne	r5, #0
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	bfc4      	itt	gt
 8008a1e:	1a9b      	subgt	r3, r3, r2
 8008a20:	18ed      	addgt	r5, r5, r3
 8008a22:	2600      	movs	r6, #0
 8008a24:	341a      	adds	r4, #26
 8008a26:	42b5      	cmp	r5, r6
 8008a28:	d11a      	bne.n	8008a60 <_printf_common+0xc8>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	e008      	b.n	8008a40 <_printf_common+0xa8>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4652      	mov	r2, sl
 8008a32:	4649      	mov	r1, r9
 8008a34:	4638      	mov	r0, r7
 8008a36:	47c0      	blx	r8
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d103      	bne.n	8008a44 <_printf_common+0xac>
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a44:	3501      	adds	r5, #1
 8008a46:	e7c6      	b.n	80089d6 <_printf_common+0x3e>
 8008a48:	18e1      	adds	r1, r4, r3
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	2030      	movs	r0, #48	; 0x30
 8008a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a52:	4422      	add	r2, r4
 8008a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	e7c7      	b.n	80089f0 <_printf_common+0x58>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4622      	mov	r2, r4
 8008a64:	4649      	mov	r1, r9
 8008a66:	4638      	mov	r0, r7
 8008a68:	47c0      	blx	r8
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d0e6      	beq.n	8008a3c <_printf_common+0xa4>
 8008a6e:	3601      	adds	r6, #1
 8008a70:	e7d9      	b.n	8008a26 <_printf_common+0x8e>
	...

08008a74 <_printf_i>:
 8008a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	7e0f      	ldrb	r7, [r1, #24]
 8008a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a7c:	2f78      	cmp	r7, #120	; 0x78
 8008a7e:	4691      	mov	r9, r2
 8008a80:	4680      	mov	r8, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	469a      	mov	sl, r3
 8008a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a8a:	d807      	bhi.n	8008a9c <_printf_i+0x28>
 8008a8c:	2f62      	cmp	r7, #98	; 0x62
 8008a8e:	d80a      	bhi.n	8008aa6 <_printf_i+0x32>
 8008a90:	2f00      	cmp	r7, #0
 8008a92:	f000 80d8 	beq.w	8008c46 <_printf_i+0x1d2>
 8008a96:	2f58      	cmp	r7, #88	; 0x58
 8008a98:	f000 80a3 	beq.w	8008be2 <_printf_i+0x16e>
 8008a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008aa4:	e03a      	b.n	8008b1c <_printf_i+0xa8>
 8008aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aaa:	2b15      	cmp	r3, #21
 8008aac:	d8f6      	bhi.n	8008a9c <_printf_i+0x28>
 8008aae:	a101      	add	r1, pc, #4	; (adr r1, 8008ab4 <_printf_i+0x40>)
 8008ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008b21 	.word	0x08008b21
 8008abc:	08008a9d 	.word	0x08008a9d
 8008ac0:	08008a9d 	.word	0x08008a9d
 8008ac4:	08008a9d 	.word	0x08008a9d
 8008ac8:	08008a9d 	.word	0x08008a9d
 8008acc:	08008b21 	.word	0x08008b21
 8008ad0:	08008a9d 	.word	0x08008a9d
 8008ad4:	08008a9d 	.word	0x08008a9d
 8008ad8:	08008a9d 	.word	0x08008a9d
 8008adc:	08008a9d 	.word	0x08008a9d
 8008ae0:	08008c2d 	.word	0x08008c2d
 8008ae4:	08008b51 	.word	0x08008b51
 8008ae8:	08008c0f 	.word	0x08008c0f
 8008aec:	08008a9d 	.word	0x08008a9d
 8008af0:	08008a9d 	.word	0x08008a9d
 8008af4:	08008c4f 	.word	0x08008c4f
 8008af8:	08008a9d 	.word	0x08008a9d
 8008afc:	08008b51 	.word	0x08008b51
 8008b00:	08008a9d 	.word	0x08008a9d
 8008b04:	08008a9d 	.word	0x08008a9d
 8008b08:	08008c17 	.word	0x08008c17
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	1d1a      	adds	r2, r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	602a      	str	r2, [r5, #0]
 8008b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e0a3      	b.n	8008c68 <_printf_i+0x1f4>
 8008b20:	6820      	ldr	r0, [r4, #0]
 8008b22:	6829      	ldr	r1, [r5, #0]
 8008b24:	0606      	lsls	r6, r0, #24
 8008b26:	f101 0304 	add.w	r3, r1, #4
 8008b2a:	d50a      	bpl.n	8008b42 <_printf_i+0xce>
 8008b2c:	680e      	ldr	r6, [r1, #0]
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	2e00      	cmp	r6, #0
 8008b32:	da03      	bge.n	8008b3c <_printf_i+0xc8>
 8008b34:	232d      	movs	r3, #45	; 0x2d
 8008b36:	4276      	negs	r6, r6
 8008b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b3c:	485e      	ldr	r0, [pc, #376]	; (8008cb8 <_printf_i+0x244>)
 8008b3e:	230a      	movs	r3, #10
 8008b40:	e019      	b.n	8008b76 <_printf_i+0x102>
 8008b42:	680e      	ldr	r6, [r1, #0]
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b4a:	bf18      	it	ne
 8008b4c:	b236      	sxthne	r6, r6
 8008b4e:	e7ef      	b.n	8008b30 <_printf_i+0xbc>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	6029      	str	r1, [r5, #0]
 8008b58:	0601      	lsls	r1, r0, #24
 8008b5a:	d501      	bpl.n	8008b60 <_printf_i+0xec>
 8008b5c:	681e      	ldr	r6, [r3, #0]
 8008b5e:	e002      	b.n	8008b66 <_printf_i+0xf2>
 8008b60:	0646      	lsls	r6, r0, #25
 8008b62:	d5fb      	bpl.n	8008b5c <_printf_i+0xe8>
 8008b64:	881e      	ldrh	r6, [r3, #0]
 8008b66:	4854      	ldr	r0, [pc, #336]	; (8008cb8 <_printf_i+0x244>)
 8008b68:	2f6f      	cmp	r7, #111	; 0x6f
 8008b6a:	bf0c      	ite	eq
 8008b6c:	2308      	moveq	r3, #8
 8008b6e:	230a      	movne	r3, #10
 8008b70:	2100      	movs	r1, #0
 8008b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b76:	6865      	ldr	r5, [r4, #4]
 8008b78:	60a5      	str	r5, [r4, #8]
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	bfa2      	ittt	ge
 8008b7e:	6821      	ldrge	r1, [r4, #0]
 8008b80:	f021 0104 	bicge.w	r1, r1, #4
 8008b84:	6021      	strge	r1, [r4, #0]
 8008b86:	b90e      	cbnz	r6, 8008b8c <_printf_i+0x118>
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	d04d      	beq.n	8008c28 <_printf_i+0x1b4>
 8008b8c:	4615      	mov	r5, r2
 8008b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b92:	fb03 6711 	mls	r7, r3, r1, r6
 8008b96:	5dc7      	ldrb	r7, [r0, r7]
 8008b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b9c:	4637      	mov	r7, r6
 8008b9e:	42bb      	cmp	r3, r7
 8008ba0:	460e      	mov	r6, r1
 8008ba2:	d9f4      	bls.n	8008b8e <_printf_i+0x11a>
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d10b      	bne.n	8008bc0 <_printf_i+0x14c>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07de      	lsls	r6, r3, #31
 8008bac:	d508      	bpl.n	8008bc0 <_printf_i+0x14c>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6861      	ldr	r1, [r4, #4]
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	bfde      	ittt	le
 8008bb6:	2330      	movle	r3, #48	; 0x30
 8008bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bc0:	1b52      	subs	r2, r2, r5
 8008bc2:	6122      	str	r2, [r4, #16]
 8008bc4:	f8cd a000 	str.w	sl, [sp]
 8008bc8:	464b      	mov	r3, r9
 8008bca:	aa03      	add	r2, sp, #12
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7ff fee2 	bl	8008998 <_printf_common>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d14c      	bne.n	8008c72 <_printf_i+0x1fe>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	b004      	add	sp, #16
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	4835      	ldr	r0, [pc, #212]	; (8008cb8 <_printf_i+0x244>)
 8008be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008be8:	6829      	ldr	r1, [r5, #0]
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bf0:	6029      	str	r1, [r5, #0]
 8008bf2:	061d      	lsls	r5, r3, #24
 8008bf4:	d514      	bpl.n	8008c20 <_printf_i+0x1ac>
 8008bf6:	07df      	lsls	r7, r3, #31
 8008bf8:	bf44      	itt	mi
 8008bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8008bfe:	6023      	strmi	r3, [r4, #0]
 8008c00:	b91e      	cbnz	r6, 8008c0a <_printf_i+0x196>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	f023 0320 	bic.w	r3, r3, #32
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	2310      	movs	r3, #16
 8008c0c:	e7b0      	b.n	8008b70 <_printf_i+0xfc>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	f043 0320 	orr.w	r3, r3, #32
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	2378      	movs	r3, #120	; 0x78
 8008c18:	4828      	ldr	r0, [pc, #160]	; (8008cbc <_printf_i+0x248>)
 8008c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c1e:	e7e3      	b.n	8008be8 <_printf_i+0x174>
 8008c20:	0659      	lsls	r1, r3, #25
 8008c22:	bf48      	it	mi
 8008c24:	b2b6      	uxthmi	r6, r6
 8008c26:	e7e6      	b.n	8008bf6 <_printf_i+0x182>
 8008c28:	4615      	mov	r5, r2
 8008c2a:	e7bb      	b.n	8008ba4 <_printf_i+0x130>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	6826      	ldr	r6, [r4, #0]
 8008c30:	6961      	ldr	r1, [r4, #20]
 8008c32:	1d18      	adds	r0, r3, #4
 8008c34:	6028      	str	r0, [r5, #0]
 8008c36:	0635      	lsls	r5, r6, #24
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	d501      	bpl.n	8008c40 <_printf_i+0x1cc>
 8008c3c:	6019      	str	r1, [r3, #0]
 8008c3e:	e002      	b.n	8008c46 <_printf_i+0x1d2>
 8008c40:	0670      	lsls	r0, r6, #25
 8008c42:	d5fb      	bpl.n	8008c3c <_printf_i+0x1c8>
 8008c44:	8019      	strh	r1, [r3, #0]
 8008c46:	2300      	movs	r3, #0
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	4615      	mov	r5, r2
 8008c4c:	e7ba      	b.n	8008bc4 <_printf_i+0x150>
 8008c4e:	682b      	ldr	r3, [r5, #0]
 8008c50:	1d1a      	adds	r2, r3, #4
 8008c52:	602a      	str	r2, [r5, #0]
 8008c54:	681d      	ldr	r5, [r3, #0]
 8008c56:	6862      	ldr	r2, [r4, #4]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f7f7 fac0 	bl	80001e0 <memchr>
 8008c60:	b108      	cbz	r0, 8008c66 <_printf_i+0x1f2>
 8008c62:	1b40      	subs	r0, r0, r5
 8008c64:	6060      	str	r0, [r4, #4]
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	6123      	str	r3, [r4, #16]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c70:	e7a8      	b.n	8008bc4 <_printf_i+0x150>
 8008c72:	6923      	ldr	r3, [r4, #16]
 8008c74:	462a      	mov	r2, r5
 8008c76:	4649      	mov	r1, r9
 8008c78:	4640      	mov	r0, r8
 8008c7a:	47d0      	blx	sl
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d0ab      	beq.n	8008bd8 <_printf_i+0x164>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	079b      	lsls	r3, r3, #30
 8008c84:	d413      	bmi.n	8008cae <_printf_i+0x23a>
 8008c86:	68e0      	ldr	r0, [r4, #12]
 8008c88:	9b03      	ldr	r3, [sp, #12]
 8008c8a:	4298      	cmp	r0, r3
 8008c8c:	bfb8      	it	lt
 8008c8e:	4618      	movlt	r0, r3
 8008c90:	e7a4      	b.n	8008bdc <_printf_i+0x168>
 8008c92:	2301      	movs	r3, #1
 8008c94:	4632      	mov	r2, r6
 8008c96:	4649      	mov	r1, r9
 8008c98:	4640      	mov	r0, r8
 8008c9a:	47d0      	blx	sl
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	d09b      	beq.n	8008bd8 <_printf_i+0x164>
 8008ca0:	3501      	adds	r5, #1
 8008ca2:	68e3      	ldr	r3, [r4, #12]
 8008ca4:	9903      	ldr	r1, [sp, #12]
 8008ca6:	1a5b      	subs	r3, r3, r1
 8008ca8:	42ab      	cmp	r3, r5
 8008caa:	dcf2      	bgt.n	8008c92 <_printf_i+0x21e>
 8008cac:	e7eb      	b.n	8008c86 <_printf_i+0x212>
 8008cae:	2500      	movs	r5, #0
 8008cb0:	f104 0619 	add.w	r6, r4, #25
 8008cb4:	e7f5      	b.n	8008ca2 <_printf_i+0x22e>
 8008cb6:	bf00      	nop
 8008cb8:	0800ce0a 	.word	0x0800ce0a
 8008cbc:	0800ce1b 	.word	0x0800ce1b

08008cc0 <sniprintf>:
 8008cc0:	b40c      	push	{r2, r3}
 8008cc2:	b530      	push	{r4, r5, lr}
 8008cc4:	4b17      	ldr	r3, [pc, #92]	; (8008d24 <sniprintf+0x64>)
 8008cc6:	1e0c      	subs	r4, r1, #0
 8008cc8:	681d      	ldr	r5, [r3, #0]
 8008cca:	b09d      	sub	sp, #116	; 0x74
 8008ccc:	da08      	bge.n	8008ce0 <sniprintf+0x20>
 8008cce:	238b      	movs	r3, #139	; 0x8b
 8008cd0:	602b      	str	r3, [r5, #0]
 8008cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd6:	b01d      	add	sp, #116	; 0x74
 8008cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cdc:	b002      	add	sp, #8
 8008cde:	4770      	bx	lr
 8008ce0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ce8:	bf14      	ite	ne
 8008cea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008cee:	4623      	moveq	r3, r4
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	9307      	str	r3, [sp, #28]
 8008cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cf8:	9002      	str	r0, [sp, #8]
 8008cfa:	9006      	str	r0, [sp, #24]
 8008cfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d02:	ab21      	add	r3, sp, #132	; 0x84
 8008d04:	a902      	add	r1, sp, #8
 8008d06:	4628      	mov	r0, r5
 8008d08:	9301      	str	r3, [sp, #4]
 8008d0a:	f001 fb69 	bl	800a3e0 <_svfiprintf_r>
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	bfbc      	itt	lt
 8008d12:	238b      	movlt	r3, #139	; 0x8b
 8008d14:	602b      	strlt	r3, [r5, #0]
 8008d16:	2c00      	cmp	r4, #0
 8008d18:	d0dd      	beq.n	8008cd6 <sniprintf+0x16>
 8008d1a:	9b02      	ldr	r3, [sp, #8]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]
 8008d20:	e7d9      	b.n	8008cd6 <sniprintf+0x16>
 8008d22:	bf00      	nop
 8008d24:	2000001c 	.word	0x2000001c

08008d28 <quorem>:
 8008d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	6903      	ldr	r3, [r0, #16]
 8008d2e:	690c      	ldr	r4, [r1, #16]
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	4607      	mov	r7, r0
 8008d34:	f2c0 8081 	blt.w	8008e3a <quorem+0x112>
 8008d38:	3c01      	subs	r4, #1
 8008d3a:	f101 0814 	add.w	r8, r1, #20
 8008d3e:	f100 0514 	add.w	r5, r0, #20
 8008d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d46:	9301      	str	r3, [sp, #4]
 8008d48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d50:	3301      	adds	r3, #1
 8008d52:	429a      	cmp	r2, r3
 8008d54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d60:	d331      	bcc.n	8008dc6 <quorem+0x9e>
 8008d62:	f04f 0e00 	mov.w	lr, #0
 8008d66:	4640      	mov	r0, r8
 8008d68:	46ac      	mov	ip, r5
 8008d6a:	46f2      	mov	sl, lr
 8008d6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d70:	b293      	uxth	r3, r2
 8008d72:	fb06 e303 	mla	r3, r6, r3, lr
 8008d76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	ebaa 0303 	sub.w	r3, sl, r3
 8008d80:	f8dc a000 	ldr.w	sl, [ip]
 8008d84:	0c12      	lsrs	r2, r2, #16
 8008d86:	fa13 f38a 	uxtah	r3, r3, sl
 8008d8a:	fb06 e202 	mla	r2, r6, r2, lr
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	9b00      	ldr	r3, [sp, #0]
 8008d92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d96:	b292      	uxth	r2, r2
 8008d98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008da0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008da4:	4581      	cmp	r9, r0
 8008da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008daa:	f84c 3b04 	str.w	r3, [ip], #4
 8008dae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008db2:	d2db      	bcs.n	8008d6c <quorem+0x44>
 8008db4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008db8:	b92b      	cbnz	r3, 8008dc6 <quorem+0x9e>
 8008dba:	9b01      	ldr	r3, [sp, #4]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	d32e      	bcc.n	8008e22 <quorem+0xfa>
 8008dc4:	613c      	str	r4, [r7, #16]
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f001 f8b6 	bl	8009f38 <__mcmp>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	db24      	blt.n	8008e1a <quorem+0xf2>
 8008dd0:	3601      	adds	r6, #1
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f04f 0c00 	mov.w	ip, #0
 8008dd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ddc:	f8d0 e000 	ldr.w	lr, [r0]
 8008de0:	b293      	uxth	r3, r2
 8008de2:	ebac 0303 	sub.w	r3, ip, r3
 8008de6:	0c12      	lsrs	r2, r2, #16
 8008de8:	fa13 f38e 	uxtah	r3, r3, lr
 8008dec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dfa:	45c1      	cmp	r9, r8
 8008dfc:	f840 3b04 	str.w	r3, [r0], #4
 8008e00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e04:	d2e8      	bcs.n	8008dd8 <quorem+0xb0>
 8008e06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e0e:	b922      	cbnz	r2, 8008e1a <quorem+0xf2>
 8008e10:	3b04      	subs	r3, #4
 8008e12:	429d      	cmp	r5, r3
 8008e14:	461a      	mov	r2, r3
 8008e16:	d30a      	bcc.n	8008e2e <quorem+0x106>
 8008e18:	613c      	str	r4, [r7, #16]
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	b003      	add	sp, #12
 8008e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e22:	6812      	ldr	r2, [r2, #0]
 8008e24:	3b04      	subs	r3, #4
 8008e26:	2a00      	cmp	r2, #0
 8008e28:	d1cc      	bne.n	8008dc4 <quorem+0x9c>
 8008e2a:	3c01      	subs	r4, #1
 8008e2c:	e7c7      	b.n	8008dbe <quorem+0x96>
 8008e2e:	6812      	ldr	r2, [r2, #0]
 8008e30:	3b04      	subs	r3, #4
 8008e32:	2a00      	cmp	r2, #0
 8008e34:	d1f0      	bne.n	8008e18 <quorem+0xf0>
 8008e36:	3c01      	subs	r4, #1
 8008e38:	e7eb      	b.n	8008e12 <quorem+0xea>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	e7ee      	b.n	8008e1c <quorem+0xf4>
	...

08008e40 <_dtoa_r>:
 8008e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	ed2d 8b04 	vpush	{d8-d9}
 8008e48:	ec57 6b10 	vmov	r6, r7, d0
 8008e4c:	b093      	sub	sp, #76	; 0x4c
 8008e4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e54:	9106      	str	r1, [sp, #24]
 8008e56:	ee10 aa10 	vmov	sl, s0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e60:	46bb      	mov	fp, r7
 8008e62:	b975      	cbnz	r5, 8008e82 <_dtoa_r+0x42>
 8008e64:	2010      	movs	r0, #16
 8008e66:	f000 fddd 	bl	8009a24 <malloc>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6260      	str	r0, [r4, #36]	; 0x24
 8008e6e:	b920      	cbnz	r0, 8008e7a <_dtoa_r+0x3a>
 8008e70:	4ba7      	ldr	r3, [pc, #668]	; (8009110 <_dtoa_r+0x2d0>)
 8008e72:	21ea      	movs	r1, #234	; 0xea
 8008e74:	48a7      	ldr	r0, [pc, #668]	; (8009114 <_dtoa_r+0x2d4>)
 8008e76:	f001 fbc3 	bl	800a600 <__assert_func>
 8008e7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e7e:	6005      	str	r5, [r0, #0]
 8008e80:	60c5      	str	r5, [r0, #12]
 8008e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e84:	6819      	ldr	r1, [r3, #0]
 8008e86:	b151      	cbz	r1, 8008e9e <_dtoa_r+0x5e>
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	604a      	str	r2, [r1, #4]
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	4093      	lsls	r3, r2
 8008e90:	608b      	str	r3, [r1, #8]
 8008e92:	4620      	mov	r0, r4
 8008e94:	f000 fe0e 	bl	8009ab4 <_Bfree>
 8008e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	1e3b      	subs	r3, r7, #0
 8008ea0:	bfaa      	itet	ge
 8008ea2:	2300      	movge	r3, #0
 8008ea4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ea8:	f8c8 3000 	strge.w	r3, [r8]
 8008eac:	4b9a      	ldr	r3, [pc, #616]	; (8009118 <_dtoa_r+0x2d8>)
 8008eae:	bfbc      	itt	lt
 8008eb0:	2201      	movlt	r2, #1
 8008eb2:	f8c8 2000 	strlt.w	r2, [r8]
 8008eb6:	ea33 030b 	bics.w	r3, r3, fp
 8008eba:	d11b      	bne.n	8008ef4 <_dtoa_r+0xb4>
 8008ebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ebe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ec8:	4333      	orrs	r3, r6
 8008eca:	f000 8592 	beq.w	80099f2 <_dtoa_r+0xbb2>
 8008ece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ed0:	b963      	cbnz	r3, 8008eec <_dtoa_r+0xac>
 8008ed2:	4b92      	ldr	r3, [pc, #584]	; (800911c <_dtoa_r+0x2dc>)
 8008ed4:	e022      	b.n	8008f1c <_dtoa_r+0xdc>
 8008ed6:	4b92      	ldr	r3, [pc, #584]	; (8009120 <_dtoa_r+0x2e0>)
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	3308      	adds	r3, #8
 8008edc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	9801      	ldr	r0, [sp, #4]
 8008ee2:	b013      	add	sp, #76	; 0x4c
 8008ee4:	ecbd 8b04 	vpop	{d8-d9}
 8008ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eec:	4b8b      	ldr	r3, [pc, #556]	; (800911c <_dtoa_r+0x2dc>)
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	3303      	adds	r3, #3
 8008ef2:	e7f3      	b.n	8008edc <_dtoa_r+0x9c>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4650      	mov	r0, sl
 8008efa:	4659      	mov	r1, fp
 8008efc:	f7f7 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f00:	ec4b ab19 	vmov	d9, sl, fp
 8008f04:	4680      	mov	r8, r0
 8008f06:	b158      	cbz	r0, 8008f20 <_dtoa_r+0xe0>
 8008f08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 856b 	beq.w	80099ec <_dtoa_r+0xbac>
 8008f16:	4883      	ldr	r0, [pc, #524]	; (8009124 <_dtoa_r+0x2e4>)
 8008f18:	6018      	str	r0, [r3, #0]
 8008f1a:	1e43      	subs	r3, r0, #1
 8008f1c:	9301      	str	r3, [sp, #4]
 8008f1e:	e7df      	b.n	8008ee0 <_dtoa_r+0xa0>
 8008f20:	ec4b ab10 	vmov	d0, sl, fp
 8008f24:	aa10      	add	r2, sp, #64	; 0x40
 8008f26:	a911      	add	r1, sp, #68	; 0x44
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f001 f8ab 	bl	800a084 <__d2b>
 8008f2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f32:	ee08 0a10 	vmov	s16, r0
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	f000 8084 	beq.w	8009044 <_dtoa_r+0x204>
 8008f3c:	ee19 3a90 	vmov	r3, s19
 8008f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f48:	4656      	mov	r6, sl
 8008f4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f56:	4b74      	ldr	r3, [pc, #464]	; (8009128 <_dtoa_r+0x2e8>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	f7f7 f993 	bl	8000288 <__aeabi_dsub>
 8008f62:	a365      	add	r3, pc, #404	; (adr r3, 80090f8 <_dtoa_r+0x2b8>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f7f7 fb46 	bl	80005f8 <__aeabi_dmul>
 8008f6c:	a364      	add	r3, pc, #400	; (adr r3, 8009100 <_dtoa_r+0x2c0>)
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f7f7 f98b 	bl	800028c <__adddf3>
 8008f76:	4606      	mov	r6, r0
 8008f78:	4628      	mov	r0, r5
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	f7f7 fad2 	bl	8000524 <__aeabi_i2d>
 8008f80:	a361      	add	r3, pc, #388	; (adr r3, 8009108 <_dtoa_r+0x2c8>)
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	f7f7 fb37 	bl	80005f8 <__aeabi_dmul>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4630      	mov	r0, r6
 8008f90:	4639      	mov	r1, r7
 8008f92:	f7f7 f97b 	bl	800028c <__adddf3>
 8008f96:	4606      	mov	r6, r0
 8008f98:	460f      	mov	r7, r1
 8008f9a:	f7f7 fddd 	bl	8000b58 <__aeabi_d2iz>
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	9000      	str	r0, [sp, #0]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f7f7 fd98 	bl	8000adc <__aeabi_dcmplt>
 8008fac:	b150      	cbz	r0, 8008fc4 <_dtoa_r+0x184>
 8008fae:	9800      	ldr	r0, [sp, #0]
 8008fb0:	f7f7 fab8 	bl	8000524 <__aeabi_i2d>
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	463b      	mov	r3, r7
 8008fb8:	f7f7 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fbc:	b910      	cbnz	r0, 8008fc4 <_dtoa_r+0x184>
 8008fbe:	9b00      	ldr	r3, [sp, #0]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	9b00      	ldr	r3, [sp, #0]
 8008fc6:	2b16      	cmp	r3, #22
 8008fc8:	d85a      	bhi.n	8009080 <_dtoa_r+0x240>
 8008fca:	9a00      	ldr	r2, [sp, #0]
 8008fcc:	4b57      	ldr	r3, [pc, #348]	; (800912c <_dtoa_r+0x2ec>)
 8008fce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	ec51 0b19 	vmov	r0, r1, d9
 8008fda:	f7f7 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d050      	beq.n	8009084 <_dtoa_r+0x244>
 8008fe2:	9b00      	ldr	r3, [sp, #0]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fee:	1b5d      	subs	r5, r3, r5
 8008ff0:	1e6b      	subs	r3, r5, #1
 8008ff2:	9305      	str	r3, [sp, #20]
 8008ff4:	bf45      	ittet	mi
 8008ff6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008ffa:	9304      	strmi	r3, [sp, #16]
 8008ffc:	2300      	movpl	r3, #0
 8008ffe:	2300      	movmi	r3, #0
 8009000:	bf4c      	ite	mi
 8009002:	9305      	strmi	r3, [sp, #20]
 8009004:	9304      	strpl	r3, [sp, #16]
 8009006:	9b00      	ldr	r3, [sp, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	db3d      	blt.n	8009088 <_dtoa_r+0x248>
 800900c:	9b05      	ldr	r3, [sp, #20]
 800900e:	9a00      	ldr	r2, [sp, #0]
 8009010:	920a      	str	r2, [sp, #40]	; 0x28
 8009012:	4413      	add	r3, r2
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	2300      	movs	r3, #0
 8009018:	9307      	str	r3, [sp, #28]
 800901a:	9b06      	ldr	r3, [sp, #24]
 800901c:	2b09      	cmp	r3, #9
 800901e:	f200 8089 	bhi.w	8009134 <_dtoa_r+0x2f4>
 8009022:	2b05      	cmp	r3, #5
 8009024:	bfc4      	itt	gt
 8009026:	3b04      	subgt	r3, #4
 8009028:	9306      	strgt	r3, [sp, #24]
 800902a:	9b06      	ldr	r3, [sp, #24]
 800902c:	f1a3 0302 	sub.w	r3, r3, #2
 8009030:	bfcc      	ite	gt
 8009032:	2500      	movgt	r5, #0
 8009034:	2501      	movle	r5, #1
 8009036:	2b03      	cmp	r3, #3
 8009038:	f200 8087 	bhi.w	800914a <_dtoa_r+0x30a>
 800903c:	e8df f003 	tbb	[pc, r3]
 8009040:	59383a2d 	.word	0x59383a2d
 8009044:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009048:	441d      	add	r5, r3
 800904a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800904e:	2b20      	cmp	r3, #32
 8009050:	bfc1      	itttt	gt
 8009052:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009056:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800905a:	fa0b f303 	lslgt.w	r3, fp, r3
 800905e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009062:	bfda      	itte	le
 8009064:	f1c3 0320 	rsble	r3, r3, #32
 8009068:	fa06 f003 	lslle.w	r0, r6, r3
 800906c:	4318      	orrgt	r0, r3
 800906e:	f7f7 fa49 	bl	8000504 <__aeabi_ui2d>
 8009072:	2301      	movs	r3, #1
 8009074:	4606      	mov	r6, r0
 8009076:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800907a:	3d01      	subs	r5, #1
 800907c:	930e      	str	r3, [sp, #56]	; 0x38
 800907e:	e76a      	b.n	8008f56 <_dtoa_r+0x116>
 8009080:	2301      	movs	r3, #1
 8009082:	e7b2      	b.n	8008fea <_dtoa_r+0x1aa>
 8009084:	900b      	str	r0, [sp, #44]	; 0x2c
 8009086:	e7b1      	b.n	8008fec <_dtoa_r+0x1ac>
 8009088:	9b04      	ldr	r3, [sp, #16]
 800908a:	9a00      	ldr	r2, [sp, #0]
 800908c:	1a9b      	subs	r3, r3, r2
 800908e:	9304      	str	r3, [sp, #16]
 8009090:	4253      	negs	r3, r2
 8009092:	9307      	str	r3, [sp, #28]
 8009094:	2300      	movs	r3, #0
 8009096:	930a      	str	r3, [sp, #40]	; 0x28
 8009098:	e7bf      	b.n	800901a <_dtoa_r+0x1da>
 800909a:	2300      	movs	r3, #0
 800909c:	9308      	str	r3, [sp, #32]
 800909e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	dc55      	bgt.n	8009150 <_dtoa_r+0x310>
 80090a4:	2301      	movs	r3, #1
 80090a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090aa:	461a      	mov	r2, r3
 80090ac:	9209      	str	r2, [sp, #36]	; 0x24
 80090ae:	e00c      	b.n	80090ca <_dtoa_r+0x28a>
 80090b0:	2301      	movs	r3, #1
 80090b2:	e7f3      	b.n	800909c <_dtoa_r+0x25c>
 80090b4:	2300      	movs	r3, #0
 80090b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b8:	9308      	str	r3, [sp, #32]
 80090ba:	9b00      	ldr	r3, [sp, #0]
 80090bc:	4413      	add	r3, r2
 80090be:	9302      	str	r3, [sp, #8]
 80090c0:	3301      	adds	r3, #1
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	9303      	str	r3, [sp, #12]
 80090c6:	bfb8      	it	lt
 80090c8:	2301      	movlt	r3, #1
 80090ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090cc:	2200      	movs	r2, #0
 80090ce:	6042      	str	r2, [r0, #4]
 80090d0:	2204      	movs	r2, #4
 80090d2:	f102 0614 	add.w	r6, r2, #20
 80090d6:	429e      	cmp	r6, r3
 80090d8:	6841      	ldr	r1, [r0, #4]
 80090da:	d93d      	bls.n	8009158 <_dtoa_r+0x318>
 80090dc:	4620      	mov	r0, r4
 80090de:	f000 fca9 	bl	8009a34 <_Balloc>
 80090e2:	9001      	str	r0, [sp, #4]
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d13b      	bne.n	8009160 <_dtoa_r+0x320>
 80090e8:	4b11      	ldr	r3, [pc, #68]	; (8009130 <_dtoa_r+0x2f0>)
 80090ea:	4602      	mov	r2, r0
 80090ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090f0:	e6c0      	b.n	8008e74 <_dtoa_r+0x34>
 80090f2:	2301      	movs	r3, #1
 80090f4:	e7df      	b.n	80090b6 <_dtoa_r+0x276>
 80090f6:	bf00      	nop
 80090f8:	636f4361 	.word	0x636f4361
 80090fc:	3fd287a7 	.word	0x3fd287a7
 8009100:	8b60c8b3 	.word	0x8b60c8b3
 8009104:	3fc68a28 	.word	0x3fc68a28
 8009108:	509f79fb 	.word	0x509f79fb
 800910c:	3fd34413 	.word	0x3fd34413
 8009110:	0800ce39 	.word	0x0800ce39
 8009114:	0800ce50 	.word	0x0800ce50
 8009118:	7ff00000 	.word	0x7ff00000
 800911c:	0800ce35 	.word	0x0800ce35
 8009120:	0800ce2c 	.word	0x0800ce2c
 8009124:	0800ce09 	.word	0x0800ce09
 8009128:	3ff80000 	.word	0x3ff80000
 800912c:	0800cf40 	.word	0x0800cf40
 8009130:	0800ceab 	.word	0x0800ceab
 8009134:	2501      	movs	r5, #1
 8009136:	2300      	movs	r3, #0
 8009138:	9306      	str	r3, [sp, #24]
 800913a:	9508      	str	r5, [sp, #32]
 800913c:	f04f 33ff 	mov.w	r3, #4294967295
 8009140:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009144:	2200      	movs	r2, #0
 8009146:	2312      	movs	r3, #18
 8009148:	e7b0      	b.n	80090ac <_dtoa_r+0x26c>
 800914a:	2301      	movs	r3, #1
 800914c:	9308      	str	r3, [sp, #32]
 800914e:	e7f5      	b.n	800913c <_dtoa_r+0x2fc>
 8009150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009152:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009156:	e7b8      	b.n	80090ca <_dtoa_r+0x28a>
 8009158:	3101      	adds	r1, #1
 800915a:	6041      	str	r1, [r0, #4]
 800915c:	0052      	lsls	r2, r2, #1
 800915e:	e7b8      	b.n	80090d2 <_dtoa_r+0x292>
 8009160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009162:	9a01      	ldr	r2, [sp, #4]
 8009164:	601a      	str	r2, [r3, #0]
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	2b0e      	cmp	r3, #14
 800916a:	f200 809d 	bhi.w	80092a8 <_dtoa_r+0x468>
 800916e:	2d00      	cmp	r5, #0
 8009170:	f000 809a 	beq.w	80092a8 <_dtoa_r+0x468>
 8009174:	9b00      	ldr	r3, [sp, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	dd32      	ble.n	80091e0 <_dtoa_r+0x3a0>
 800917a:	4ab7      	ldr	r2, [pc, #732]	; (8009458 <_dtoa_r+0x618>)
 800917c:	f003 030f 	and.w	r3, r3, #15
 8009180:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009184:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009188:	9b00      	ldr	r3, [sp, #0]
 800918a:	05d8      	lsls	r0, r3, #23
 800918c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009190:	d516      	bpl.n	80091c0 <_dtoa_r+0x380>
 8009192:	4bb2      	ldr	r3, [pc, #712]	; (800945c <_dtoa_r+0x61c>)
 8009194:	ec51 0b19 	vmov	r0, r1, d9
 8009198:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800919c:	f7f7 fb56 	bl	800084c <__aeabi_ddiv>
 80091a0:	f007 070f 	and.w	r7, r7, #15
 80091a4:	4682      	mov	sl, r0
 80091a6:	468b      	mov	fp, r1
 80091a8:	2503      	movs	r5, #3
 80091aa:	4eac      	ldr	r6, [pc, #688]	; (800945c <_dtoa_r+0x61c>)
 80091ac:	b957      	cbnz	r7, 80091c4 <_dtoa_r+0x384>
 80091ae:	4642      	mov	r2, r8
 80091b0:	464b      	mov	r3, r9
 80091b2:	4650      	mov	r0, sl
 80091b4:	4659      	mov	r1, fp
 80091b6:	f7f7 fb49 	bl	800084c <__aeabi_ddiv>
 80091ba:	4682      	mov	sl, r0
 80091bc:	468b      	mov	fp, r1
 80091be:	e028      	b.n	8009212 <_dtoa_r+0x3d2>
 80091c0:	2502      	movs	r5, #2
 80091c2:	e7f2      	b.n	80091aa <_dtoa_r+0x36a>
 80091c4:	07f9      	lsls	r1, r7, #31
 80091c6:	d508      	bpl.n	80091da <_dtoa_r+0x39a>
 80091c8:	4640      	mov	r0, r8
 80091ca:	4649      	mov	r1, r9
 80091cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091d0:	f7f7 fa12 	bl	80005f8 <__aeabi_dmul>
 80091d4:	3501      	adds	r5, #1
 80091d6:	4680      	mov	r8, r0
 80091d8:	4689      	mov	r9, r1
 80091da:	107f      	asrs	r7, r7, #1
 80091dc:	3608      	adds	r6, #8
 80091de:	e7e5      	b.n	80091ac <_dtoa_r+0x36c>
 80091e0:	f000 809b 	beq.w	800931a <_dtoa_r+0x4da>
 80091e4:	9b00      	ldr	r3, [sp, #0]
 80091e6:	4f9d      	ldr	r7, [pc, #628]	; (800945c <_dtoa_r+0x61c>)
 80091e8:	425e      	negs	r6, r3
 80091ea:	4b9b      	ldr	r3, [pc, #620]	; (8009458 <_dtoa_r+0x618>)
 80091ec:	f006 020f 	and.w	r2, r6, #15
 80091f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	ec51 0b19 	vmov	r0, r1, d9
 80091fc:	f7f7 f9fc 	bl	80005f8 <__aeabi_dmul>
 8009200:	1136      	asrs	r6, r6, #4
 8009202:	4682      	mov	sl, r0
 8009204:	468b      	mov	fp, r1
 8009206:	2300      	movs	r3, #0
 8009208:	2502      	movs	r5, #2
 800920a:	2e00      	cmp	r6, #0
 800920c:	d17a      	bne.n	8009304 <_dtoa_r+0x4c4>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1d3      	bne.n	80091ba <_dtoa_r+0x37a>
 8009212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 8082 	beq.w	800931e <_dtoa_r+0x4de>
 800921a:	4b91      	ldr	r3, [pc, #580]	; (8009460 <_dtoa_r+0x620>)
 800921c:	2200      	movs	r2, #0
 800921e:	4650      	mov	r0, sl
 8009220:	4659      	mov	r1, fp
 8009222:	f7f7 fc5b 	bl	8000adc <__aeabi_dcmplt>
 8009226:	2800      	cmp	r0, #0
 8009228:	d079      	beq.n	800931e <_dtoa_r+0x4de>
 800922a:	9b03      	ldr	r3, [sp, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d076      	beq.n	800931e <_dtoa_r+0x4de>
 8009230:	9b02      	ldr	r3, [sp, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	dd36      	ble.n	80092a4 <_dtoa_r+0x464>
 8009236:	9b00      	ldr	r3, [sp, #0]
 8009238:	4650      	mov	r0, sl
 800923a:	4659      	mov	r1, fp
 800923c:	1e5f      	subs	r7, r3, #1
 800923e:	2200      	movs	r2, #0
 8009240:	4b88      	ldr	r3, [pc, #544]	; (8009464 <_dtoa_r+0x624>)
 8009242:	f7f7 f9d9 	bl	80005f8 <__aeabi_dmul>
 8009246:	9e02      	ldr	r6, [sp, #8]
 8009248:	4682      	mov	sl, r0
 800924a:	468b      	mov	fp, r1
 800924c:	3501      	adds	r5, #1
 800924e:	4628      	mov	r0, r5
 8009250:	f7f7 f968 	bl	8000524 <__aeabi_i2d>
 8009254:	4652      	mov	r2, sl
 8009256:	465b      	mov	r3, fp
 8009258:	f7f7 f9ce 	bl	80005f8 <__aeabi_dmul>
 800925c:	4b82      	ldr	r3, [pc, #520]	; (8009468 <_dtoa_r+0x628>)
 800925e:	2200      	movs	r2, #0
 8009260:	f7f7 f814 	bl	800028c <__adddf3>
 8009264:	46d0      	mov	r8, sl
 8009266:	46d9      	mov	r9, fp
 8009268:	4682      	mov	sl, r0
 800926a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800926e:	2e00      	cmp	r6, #0
 8009270:	d158      	bne.n	8009324 <_dtoa_r+0x4e4>
 8009272:	4b7e      	ldr	r3, [pc, #504]	; (800946c <_dtoa_r+0x62c>)
 8009274:	2200      	movs	r2, #0
 8009276:	4640      	mov	r0, r8
 8009278:	4649      	mov	r1, r9
 800927a:	f7f7 f805 	bl	8000288 <__aeabi_dsub>
 800927e:	4652      	mov	r2, sl
 8009280:	465b      	mov	r3, fp
 8009282:	4680      	mov	r8, r0
 8009284:	4689      	mov	r9, r1
 8009286:	f7f7 fc47 	bl	8000b18 <__aeabi_dcmpgt>
 800928a:	2800      	cmp	r0, #0
 800928c:	f040 8295 	bne.w	80097ba <_dtoa_r+0x97a>
 8009290:	4652      	mov	r2, sl
 8009292:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009296:	4640      	mov	r0, r8
 8009298:	4649      	mov	r1, r9
 800929a:	f7f7 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800929e:	2800      	cmp	r0, #0
 80092a0:	f040 8289 	bne.w	80097b6 <_dtoa_r+0x976>
 80092a4:	ec5b ab19 	vmov	sl, fp, d9
 80092a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f2c0 8148 	blt.w	8009540 <_dtoa_r+0x700>
 80092b0:	9a00      	ldr	r2, [sp, #0]
 80092b2:	2a0e      	cmp	r2, #14
 80092b4:	f300 8144 	bgt.w	8009540 <_dtoa_r+0x700>
 80092b8:	4b67      	ldr	r3, [pc, #412]	; (8009458 <_dtoa_r+0x618>)
 80092ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f280 80d5 	bge.w	8009474 <_dtoa_r+0x634>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f300 80d1 	bgt.w	8009474 <_dtoa_r+0x634>
 80092d2:	f040 826f 	bne.w	80097b4 <_dtoa_r+0x974>
 80092d6:	4b65      	ldr	r3, [pc, #404]	; (800946c <_dtoa_r+0x62c>)
 80092d8:	2200      	movs	r2, #0
 80092da:	4640      	mov	r0, r8
 80092dc:	4649      	mov	r1, r9
 80092de:	f7f7 f98b 	bl	80005f8 <__aeabi_dmul>
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	f7f7 fc0d 	bl	8000b04 <__aeabi_dcmpge>
 80092ea:	9e03      	ldr	r6, [sp, #12]
 80092ec:	4637      	mov	r7, r6
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f040 8245 	bne.w	800977e <_dtoa_r+0x93e>
 80092f4:	9d01      	ldr	r5, [sp, #4]
 80092f6:	2331      	movs	r3, #49	; 0x31
 80092f8:	f805 3b01 	strb.w	r3, [r5], #1
 80092fc:	9b00      	ldr	r3, [sp, #0]
 80092fe:	3301      	adds	r3, #1
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	e240      	b.n	8009786 <_dtoa_r+0x946>
 8009304:	07f2      	lsls	r2, r6, #31
 8009306:	d505      	bpl.n	8009314 <_dtoa_r+0x4d4>
 8009308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800930c:	f7f7 f974 	bl	80005f8 <__aeabi_dmul>
 8009310:	3501      	adds	r5, #1
 8009312:	2301      	movs	r3, #1
 8009314:	1076      	asrs	r6, r6, #1
 8009316:	3708      	adds	r7, #8
 8009318:	e777      	b.n	800920a <_dtoa_r+0x3ca>
 800931a:	2502      	movs	r5, #2
 800931c:	e779      	b.n	8009212 <_dtoa_r+0x3d2>
 800931e:	9f00      	ldr	r7, [sp, #0]
 8009320:	9e03      	ldr	r6, [sp, #12]
 8009322:	e794      	b.n	800924e <_dtoa_r+0x40e>
 8009324:	9901      	ldr	r1, [sp, #4]
 8009326:	4b4c      	ldr	r3, [pc, #304]	; (8009458 <_dtoa_r+0x618>)
 8009328:	4431      	add	r1, r6
 800932a:	910d      	str	r1, [sp, #52]	; 0x34
 800932c:	9908      	ldr	r1, [sp, #32]
 800932e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009332:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009336:	2900      	cmp	r1, #0
 8009338:	d043      	beq.n	80093c2 <_dtoa_r+0x582>
 800933a:	494d      	ldr	r1, [pc, #308]	; (8009470 <_dtoa_r+0x630>)
 800933c:	2000      	movs	r0, #0
 800933e:	f7f7 fa85 	bl	800084c <__aeabi_ddiv>
 8009342:	4652      	mov	r2, sl
 8009344:	465b      	mov	r3, fp
 8009346:	f7f6 ff9f 	bl	8000288 <__aeabi_dsub>
 800934a:	9d01      	ldr	r5, [sp, #4]
 800934c:	4682      	mov	sl, r0
 800934e:	468b      	mov	fp, r1
 8009350:	4649      	mov	r1, r9
 8009352:	4640      	mov	r0, r8
 8009354:	f7f7 fc00 	bl	8000b58 <__aeabi_d2iz>
 8009358:	4606      	mov	r6, r0
 800935a:	f7f7 f8e3 	bl	8000524 <__aeabi_i2d>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4640      	mov	r0, r8
 8009364:	4649      	mov	r1, r9
 8009366:	f7f6 ff8f 	bl	8000288 <__aeabi_dsub>
 800936a:	3630      	adds	r6, #48	; 0x30
 800936c:	f805 6b01 	strb.w	r6, [r5], #1
 8009370:	4652      	mov	r2, sl
 8009372:	465b      	mov	r3, fp
 8009374:	4680      	mov	r8, r0
 8009376:	4689      	mov	r9, r1
 8009378:	f7f7 fbb0 	bl	8000adc <__aeabi_dcmplt>
 800937c:	2800      	cmp	r0, #0
 800937e:	d163      	bne.n	8009448 <_dtoa_r+0x608>
 8009380:	4642      	mov	r2, r8
 8009382:	464b      	mov	r3, r9
 8009384:	4936      	ldr	r1, [pc, #216]	; (8009460 <_dtoa_r+0x620>)
 8009386:	2000      	movs	r0, #0
 8009388:	f7f6 ff7e 	bl	8000288 <__aeabi_dsub>
 800938c:	4652      	mov	r2, sl
 800938e:	465b      	mov	r3, fp
 8009390:	f7f7 fba4 	bl	8000adc <__aeabi_dcmplt>
 8009394:	2800      	cmp	r0, #0
 8009396:	f040 80b5 	bne.w	8009504 <_dtoa_r+0x6c4>
 800939a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800939c:	429d      	cmp	r5, r3
 800939e:	d081      	beq.n	80092a4 <_dtoa_r+0x464>
 80093a0:	4b30      	ldr	r3, [pc, #192]	; (8009464 <_dtoa_r+0x624>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	4650      	mov	r0, sl
 80093a6:	4659      	mov	r1, fp
 80093a8:	f7f7 f926 	bl	80005f8 <__aeabi_dmul>
 80093ac:	4b2d      	ldr	r3, [pc, #180]	; (8009464 <_dtoa_r+0x624>)
 80093ae:	4682      	mov	sl, r0
 80093b0:	468b      	mov	fp, r1
 80093b2:	4640      	mov	r0, r8
 80093b4:	4649      	mov	r1, r9
 80093b6:	2200      	movs	r2, #0
 80093b8:	f7f7 f91e 	bl	80005f8 <__aeabi_dmul>
 80093bc:	4680      	mov	r8, r0
 80093be:	4689      	mov	r9, r1
 80093c0:	e7c6      	b.n	8009350 <_dtoa_r+0x510>
 80093c2:	4650      	mov	r0, sl
 80093c4:	4659      	mov	r1, fp
 80093c6:	f7f7 f917 	bl	80005f8 <__aeabi_dmul>
 80093ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093cc:	9d01      	ldr	r5, [sp, #4]
 80093ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80093d0:	4682      	mov	sl, r0
 80093d2:	468b      	mov	fp, r1
 80093d4:	4649      	mov	r1, r9
 80093d6:	4640      	mov	r0, r8
 80093d8:	f7f7 fbbe 	bl	8000b58 <__aeabi_d2iz>
 80093dc:	4606      	mov	r6, r0
 80093de:	f7f7 f8a1 	bl	8000524 <__aeabi_i2d>
 80093e2:	3630      	adds	r6, #48	; 0x30
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4640      	mov	r0, r8
 80093ea:	4649      	mov	r1, r9
 80093ec:	f7f6 ff4c 	bl	8000288 <__aeabi_dsub>
 80093f0:	f805 6b01 	strb.w	r6, [r5], #1
 80093f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093f6:	429d      	cmp	r5, r3
 80093f8:	4680      	mov	r8, r0
 80093fa:	4689      	mov	r9, r1
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	d124      	bne.n	800944c <_dtoa_r+0x60c>
 8009402:	4b1b      	ldr	r3, [pc, #108]	; (8009470 <_dtoa_r+0x630>)
 8009404:	4650      	mov	r0, sl
 8009406:	4659      	mov	r1, fp
 8009408:	f7f6 ff40 	bl	800028c <__adddf3>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4640      	mov	r0, r8
 8009412:	4649      	mov	r1, r9
 8009414:	f7f7 fb80 	bl	8000b18 <__aeabi_dcmpgt>
 8009418:	2800      	cmp	r0, #0
 800941a:	d173      	bne.n	8009504 <_dtoa_r+0x6c4>
 800941c:	4652      	mov	r2, sl
 800941e:	465b      	mov	r3, fp
 8009420:	4913      	ldr	r1, [pc, #76]	; (8009470 <_dtoa_r+0x630>)
 8009422:	2000      	movs	r0, #0
 8009424:	f7f6 ff30 	bl	8000288 <__aeabi_dsub>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4640      	mov	r0, r8
 800942e:	4649      	mov	r1, r9
 8009430:	f7f7 fb54 	bl	8000adc <__aeabi_dcmplt>
 8009434:	2800      	cmp	r0, #0
 8009436:	f43f af35 	beq.w	80092a4 <_dtoa_r+0x464>
 800943a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800943c:	1e6b      	subs	r3, r5, #1
 800943e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009440:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009444:	2b30      	cmp	r3, #48	; 0x30
 8009446:	d0f8      	beq.n	800943a <_dtoa_r+0x5fa>
 8009448:	9700      	str	r7, [sp, #0]
 800944a:	e049      	b.n	80094e0 <_dtoa_r+0x6a0>
 800944c:	4b05      	ldr	r3, [pc, #20]	; (8009464 <_dtoa_r+0x624>)
 800944e:	f7f7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8009452:	4680      	mov	r8, r0
 8009454:	4689      	mov	r9, r1
 8009456:	e7bd      	b.n	80093d4 <_dtoa_r+0x594>
 8009458:	0800cf40 	.word	0x0800cf40
 800945c:	0800cf18 	.word	0x0800cf18
 8009460:	3ff00000 	.word	0x3ff00000
 8009464:	40240000 	.word	0x40240000
 8009468:	401c0000 	.word	0x401c0000
 800946c:	40140000 	.word	0x40140000
 8009470:	3fe00000 	.word	0x3fe00000
 8009474:	9d01      	ldr	r5, [sp, #4]
 8009476:	4656      	mov	r6, sl
 8009478:	465f      	mov	r7, fp
 800947a:	4642      	mov	r2, r8
 800947c:	464b      	mov	r3, r9
 800947e:	4630      	mov	r0, r6
 8009480:	4639      	mov	r1, r7
 8009482:	f7f7 f9e3 	bl	800084c <__aeabi_ddiv>
 8009486:	f7f7 fb67 	bl	8000b58 <__aeabi_d2iz>
 800948a:	4682      	mov	sl, r0
 800948c:	f7f7 f84a 	bl	8000524 <__aeabi_i2d>
 8009490:	4642      	mov	r2, r8
 8009492:	464b      	mov	r3, r9
 8009494:	f7f7 f8b0 	bl	80005f8 <__aeabi_dmul>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	4630      	mov	r0, r6
 800949e:	4639      	mov	r1, r7
 80094a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80094a4:	f7f6 fef0 	bl	8000288 <__aeabi_dsub>
 80094a8:	f805 6b01 	strb.w	r6, [r5], #1
 80094ac:	9e01      	ldr	r6, [sp, #4]
 80094ae:	9f03      	ldr	r7, [sp, #12]
 80094b0:	1bae      	subs	r6, r5, r6
 80094b2:	42b7      	cmp	r7, r6
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	d135      	bne.n	8009526 <_dtoa_r+0x6e6>
 80094ba:	f7f6 fee7 	bl	800028c <__adddf3>
 80094be:	4642      	mov	r2, r8
 80094c0:	464b      	mov	r3, r9
 80094c2:	4606      	mov	r6, r0
 80094c4:	460f      	mov	r7, r1
 80094c6:	f7f7 fb27 	bl	8000b18 <__aeabi_dcmpgt>
 80094ca:	b9d0      	cbnz	r0, 8009502 <_dtoa_r+0x6c2>
 80094cc:	4642      	mov	r2, r8
 80094ce:	464b      	mov	r3, r9
 80094d0:	4630      	mov	r0, r6
 80094d2:	4639      	mov	r1, r7
 80094d4:	f7f7 faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80094d8:	b110      	cbz	r0, 80094e0 <_dtoa_r+0x6a0>
 80094da:	f01a 0f01 	tst.w	sl, #1
 80094de:	d110      	bne.n	8009502 <_dtoa_r+0x6c2>
 80094e0:	4620      	mov	r0, r4
 80094e2:	ee18 1a10 	vmov	r1, s16
 80094e6:	f000 fae5 	bl	8009ab4 <_Bfree>
 80094ea:	2300      	movs	r3, #0
 80094ec:	9800      	ldr	r0, [sp, #0]
 80094ee:	702b      	strb	r3, [r5, #0]
 80094f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094f2:	3001      	adds	r0, #1
 80094f4:	6018      	str	r0, [r3, #0]
 80094f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f43f acf1 	beq.w	8008ee0 <_dtoa_r+0xa0>
 80094fe:	601d      	str	r5, [r3, #0]
 8009500:	e4ee      	b.n	8008ee0 <_dtoa_r+0xa0>
 8009502:	9f00      	ldr	r7, [sp, #0]
 8009504:	462b      	mov	r3, r5
 8009506:	461d      	mov	r5, r3
 8009508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800950c:	2a39      	cmp	r2, #57	; 0x39
 800950e:	d106      	bne.n	800951e <_dtoa_r+0x6de>
 8009510:	9a01      	ldr	r2, [sp, #4]
 8009512:	429a      	cmp	r2, r3
 8009514:	d1f7      	bne.n	8009506 <_dtoa_r+0x6c6>
 8009516:	9901      	ldr	r1, [sp, #4]
 8009518:	2230      	movs	r2, #48	; 0x30
 800951a:	3701      	adds	r7, #1
 800951c:	700a      	strb	r2, [r1, #0]
 800951e:	781a      	ldrb	r2, [r3, #0]
 8009520:	3201      	adds	r2, #1
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	e790      	b.n	8009448 <_dtoa_r+0x608>
 8009526:	4ba6      	ldr	r3, [pc, #664]	; (80097c0 <_dtoa_r+0x980>)
 8009528:	2200      	movs	r2, #0
 800952a:	f7f7 f865 	bl	80005f8 <__aeabi_dmul>
 800952e:	2200      	movs	r2, #0
 8009530:	2300      	movs	r3, #0
 8009532:	4606      	mov	r6, r0
 8009534:	460f      	mov	r7, r1
 8009536:	f7f7 fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800953a:	2800      	cmp	r0, #0
 800953c:	d09d      	beq.n	800947a <_dtoa_r+0x63a>
 800953e:	e7cf      	b.n	80094e0 <_dtoa_r+0x6a0>
 8009540:	9a08      	ldr	r2, [sp, #32]
 8009542:	2a00      	cmp	r2, #0
 8009544:	f000 80d7 	beq.w	80096f6 <_dtoa_r+0x8b6>
 8009548:	9a06      	ldr	r2, [sp, #24]
 800954a:	2a01      	cmp	r2, #1
 800954c:	f300 80ba 	bgt.w	80096c4 <_dtoa_r+0x884>
 8009550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009552:	2a00      	cmp	r2, #0
 8009554:	f000 80b2 	beq.w	80096bc <_dtoa_r+0x87c>
 8009558:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800955c:	9e07      	ldr	r6, [sp, #28]
 800955e:	9d04      	ldr	r5, [sp, #16]
 8009560:	9a04      	ldr	r2, [sp, #16]
 8009562:	441a      	add	r2, r3
 8009564:	9204      	str	r2, [sp, #16]
 8009566:	9a05      	ldr	r2, [sp, #20]
 8009568:	2101      	movs	r1, #1
 800956a:	441a      	add	r2, r3
 800956c:	4620      	mov	r0, r4
 800956e:	9205      	str	r2, [sp, #20]
 8009570:	f000 fb58 	bl	8009c24 <__i2b>
 8009574:	4607      	mov	r7, r0
 8009576:	2d00      	cmp	r5, #0
 8009578:	dd0c      	ble.n	8009594 <_dtoa_r+0x754>
 800957a:	9b05      	ldr	r3, [sp, #20]
 800957c:	2b00      	cmp	r3, #0
 800957e:	dd09      	ble.n	8009594 <_dtoa_r+0x754>
 8009580:	42ab      	cmp	r3, r5
 8009582:	9a04      	ldr	r2, [sp, #16]
 8009584:	bfa8      	it	ge
 8009586:	462b      	movge	r3, r5
 8009588:	1ad2      	subs	r2, r2, r3
 800958a:	9204      	str	r2, [sp, #16]
 800958c:	9a05      	ldr	r2, [sp, #20]
 800958e:	1aed      	subs	r5, r5, r3
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	9305      	str	r3, [sp, #20]
 8009594:	9b07      	ldr	r3, [sp, #28]
 8009596:	b31b      	cbz	r3, 80095e0 <_dtoa_r+0x7a0>
 8009598:	9b08      	ldr	r3, [sp, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 80af 	beq.w	80096fe <_dtoa_r+0x8be>
 80095a0:	2e00      	cmp	r6, #0
 80095a2:	dd13      	ble.n	80095cc <_dtoa_r+0x78c>
 80095a4:	4639      	mov	r1, r7
 80095a6:	4632      	mov	r2, r6
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 fbfb 	bl	8009da4 <__pow5mult>
 80095ae:	ee18 2a10 	vmov	r2, s16
 80095b2:	4601      	mov	r1, r0
 80095b4:	4607      	mov	r7, r0
 80095b6:	4620      	mov	r0, r4
 80095b8:	f000 fb4a 	bl	8009c50 <__multiply>
 80095bc:	ee18 1a10 	vmov	r1, s16
 80095c0:	4680      	mov	r8, r0
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 fa76 	bl	8009ab4 <_Bfree>
 80095c8:	ee08 8a10 	vmov	s16, r8
 80095cc:	9b07      	ldr	r3, [sp, #28]
 80095ce:	1b9a      	subs	r2, r3, r6
 80095d0:	d006      	beq.n	80095e0 <_dtoa_r+0x7a0>
 80095d2:	ee18 1a10 	vmov	r1, s16
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 fbe4 	bl	8009da4 <__pow5mult>
 80095dc:	ee08 0a10 	vmov	s16, r0
 80095e0:	2101      	movs	r1, #1
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 fb1e 	bl	8009c24 <__i2b>
 80095e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	4606      	mov	r6, r0
 80095ee:	f340 8088 	ble.w	8009702 <_dtoa_r+0x8c2>
 80095f2:	461a      	mov	r2, r3
 80095f4:	4601      	mov	r1, r0
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 fbd4 	bl	8009da4 <__pow5mult>
 80095fc:	9b06      	ldr	r3, [sp, #24]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	4606      	mov	r6, r0
 8009602:	f340 8081 	ble.w	8009708 <_dtoa_r+0x8c8>
 8009606:	f04f 0800 	mov.w	r8, #0
 800960a:	6933      	ldr	r3, [r6, #16]
 800960c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009610:	6918      	ldr	r0, [r3, #16]
 8009612:	f000 fab7 	bl	8009b84 <__hi0bits>
 8009616:	f1c0 0020 	rsb	r0, r0, #32
 800961a:	9b05      	ldr	r3, [sp, #20]
 800961c:	4418      	add	r0, r3
 800961e:	f010 001f 	ands.w	r0, r0, #31
 8009622:	f000 8092 	beq.w	800974a <_dtoa_r+0x90a>
 8009626:	f1c0 0320 	rsb	r3, r0, #32
 800962a:	2b04      	cmp	r3, #4
 800962c:	f340 808a 	ble.w	8009744 <_dtoa_r+0x904>
 8009630:	f1c0 001c 	rsb	r0, r0, #28
 8009634:	9b04      	ldr	r3, [sp, #16]
 8009636:	4403      	add	r3, r0
 8009638:	9304      	str	r3, [sp, #16]
 800963a:	9b05      	ldr	r3, [sp, #20]
 800963c:	4403      	add	r3, r0
 800963e:	4405      	add	r5, r0
 8009640:	9305      	str	r3, [sp, #20]
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	dd07      	ble.n	8009658 <_dtoa_r+0x818>
 8009648:	ee18 1a10 	vmov	r1, s16
 800964c:	461a      	mov	r2, r3
 800964e:	4620      	mov	r0, r4
 8009650:	f000 fc02 	bl	8009e58 <__lshift>
 8009654:	ee08 0a10 	vmov	s16, r0
 8009658:	9b05      	ldr	r3, [sp, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	dd05      	ble.n	800966a <_dtoa_r+0x82a>
 800965e:	4631      	mov	r1, r6
 8009660:	461a      	mov	r2, r3
 8009662:	4620      	mov	r0, r4
 8009664:	f000 fbf8 	bl	8009e58 <__lshift>
 8009668:	4606      	mov	r6, r0
 800966a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800966c:	2b00      	cmp	r3, #0
 800966e:	d06e      	beq.n	800974e <_dtoa_r+0x90e>
 8009670:	ee18 0a10 	vmov	r0, s16
 8009674:	4631      	mov	r1, r6
 8009676:	f000 fc5f 	bl	8009f38 <__mcmp>
 800967a:	2800      	cmp	r0, #0
 800967c:	da67      	bge.n	800974e <_dtoa_r+0x90e>
 800967e:	9b00      	ldr	r3, [sp, #0]
 8009680:	3b01      	subs	r3, #1
 8009682:	ee18 1a10 	vmov	r1, s16
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	220a      	movs	r2, #10
 800968a:	2300      	movs	r3, #0
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fa33 	bl	8009af8 <__multadd>
 8009692:	9b08      	ldr	r3, [sp, #32]
 8009694:	ee08 0a10 	vmov	s16, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 81b1 	beq.w	8009a00 <_dtoa_r+0xbc0>
 800969e:	2300      	movs	r3, #0
 80096a0:	4639      	mov	r1, r7
 80096a2:	220a      	movs	r2, #10
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fa27 	bl	8009af8 <__multadd>
 80096aa:	9b02      	ldr	r3, [sp, #8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	4607      	mov	r7, r0
 80096b0:	f300 808e 	bgt.w	80097d0 <_dtoa_r+0x990>
 80096b4:	9b06      	ldr	r3, [sp, #24]
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	dc51      	bgt.n	800975e <_dtoa_r+0x91e>
 80096ba:	e089      	b.n	80097d0 <_dtoa_r+0x990>
 80096bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096c2:	e74b      	b.n	800955c <_dtoa_r+0x71c>
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	1e5e      	subs	r6, r3, #1
 80096c8:	9b07      	ldr	r3, [sp, #28]
 80096ca:	42b3      	cmp	r3, r6
 80096cc:	bfbf      	itttt	lt
 80096ce:	9b07      	ldrlt	r3, [sp, #28]
 80096d0:	9607      	strlt	r6, [sp, #28]
 80096d2:	1af2      	sublt	r2, r6, r3
 80096d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80096d6:	bfb6      	itet	lt
 80096d8:	189b      	addlt	r3, r3, r2
 80096da:	1b9e      	subge	r6, r3, r6
 80096dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	bfb8      	it	lt
 80096e2:	2600      	movlt	r6, #0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	bfb7      	itett	lt
 80096e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80096f0:	1a9d      	sublt	r5, r3, r2
 80096f2:	2300      	movlt	r3, #0
 80096f4:	e734      	b.n	8009560 <_dtoa_r+0x720>
 80096f6:	9e07      	ldr	r6, [sp, #28]
 80096f8:	9d04      	ldr	r5, [sp, #16]
 80096fa:	9f08      	ldr	r7, [sp, #32]
 80096fc:	e73b      	b.n	8009576 <_dtoa_r+0x736>
 80096fe:	9a07      	ldr	r2, [sp, #28]
 8009700:	e767      	b.n	80095d2 <_dtoa_r+0x792>
 8009702:	9b06      	ldr	r3, [sp, #24]
 8009704:	2b01      	cmp	r3, #1
 8009706:	dc18      	bgt.n	800973a <_dtoa_r+0x8fa>
 8009708:	f1ba 0f00 	cmp.w	sl, #0
 800970c:	d115      	bne.n	800973a <_dtoa_r+0x8fa>
 800970e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009712:	b993      	cbnz	r3, 800973a <_dtoa_r+0x8fa>
 8009714:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009718:	0d1b      	lsrs	r3, r3, #20
 800971a:	051b      	lsls	r3, r3, #20
 800971c:	b183      	cbz	r3, 8009740 <_dtoa_r+0x900>
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	3301      	adds	r3, #1
 8009722:	9304      	str	r3, [sp, #16]
 8009724:	9b05      	ldr	r3, [sp, #20]
 8009726:	3301      	adds	r3, #1
 8009728:	9305      	str	r3, [sp, #20]
 800972a:	f04f 0801 	mov.w	r8, #1
 800972e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009730:	2b00      	cmp	r3, #0
 8009732:	f47f af6a 	bne.w	800960a <_dtoa_r+0x7ca>
 8009736:	2001      	movs	r0, #1
 8009738:	e76f      	b.n	800961a <_dtoa_r+0x7da>
 800973a:	f04f 0800 	mov.w	r8, #0
 800973e:	e7f6      	b.n	800972e <_dtoa_r+0x8ee>
 8009740:	4698      	mov	r8, r3
 8009742:	e7f4      	b.n	800972e <_dtoa_r+0x8ee>
 8009744:	f43f af7d 	beq.w	8009642 <_dtoa_r+0x802>
 8009748:	4618      	mov	r0, r3
 800974a:	301c      	adds	r0, #28
 800974c:	e772      	b.n	8009634 <_dtoa_r+0x7f4>
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	dc37      	bgt.n	80097c4 <_dtoa_r+0x984>
 8009754:	9b06      	ldr	r3, [sp, #24]
 8009756:	2b02      	cmp	r3, #2
 8009758:	dd34      	ble.n	80097c4 <_dtoa_r+0x984>
 800975a:	9b03      	ldr	r3, [sp, #12]
 800975c:	9302      	str	r3, [sp, #8]
 800975e:	9b02      	ldr	r3, [sp, #8]
 8009760:	b96b      	cbnz	r3, 800977e <_dtoa_r+0x93e>
 8009762:	4631      	mov	r1, r6
 8009764:	2205      	movs	r2, #5
 8009766:	4620      	mov	r0, r4
 8009768:	f000 f9c6 	bl	8009af8 <__multadd>
 800976c:	4601      	mov	r1, r0
 800976e:	4606      	mov	r6, r0
 8009770:	ee18 0a10 	vmov	r0, s16
 8009774:	f000 fbe0 	bl	8009f38 <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	f73f adbb 	bgt.w	80092f4 <_dtoa_r+0x4b4>
 800977e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009780:	9d01      	ldr	r5, [sp, #4]
 8009782:	43db      	mvns	r3, r3
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	f04f 0800 	mov.w	r8, #0
 800978a:	4631      	mov	r1, r6
 800978c:	4620      	mov	r0, r4
 800978e:	f000 f991 	bl	8009ab4 <_Bfree>
 8009792:	2f00      	cmp	r7, #0
 8009794:	f43f aea4 	beq.w	80094e0 <_dtoa_r+0x6a0>
 8009798:	f1b8 0f00 	cmp.w	r8, #0
 800979c:	d005      	beq.n	80097aa <_dtoa_r+0x96a>
 800979e:	45b8      	cmp	r8, r7
 80097a0:	d003      	beq.n	80097aa <_dtoa_r+0x96a>
 80097a2:	4641      	mov	r1, r8
 80097a4:	4620      	mov	r0, r4
 80097a6:	f000 f985 	bl	8009ab4 <_Bfree>
 80097aa:	4639      	mov	r1, r7
 80097ac:	4620      	mov	r0, r4
 80097ae:	f000 f981 	bl	8009ab4 <_Bfree>
 80097b2:	e695      	b.n	80094e0 <_dtoa_r+0x6a0>
 80097b4:	2600      	movs	r6, #0
 80097b6:	4637      	mov	r7, r6
 80097b8:	e7e1      	b.n	800977e <_dtoa_r+0x93e>
 80097ba:	9700      	str	r7, [sp, #0]
 80097bc:	4637      	mov	r7, r6
 80097be:	e599      	b.n	80092f4 <_dtoa_r+0x4b4>
 80097c0:	40240000 	.word	0x40240000
 80097c4:	9b08      	ldr	r3, [sp, #32]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 80ca 	beq.w	8009960 <_dtoa_r+0xb20>
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	9302      	str	r3, [sp, #8]
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	dd05      	ble.n	80097e0 <_dtoa_r+0x9a0>
 80097d4:	4639      	mov	r1, r7
 80097d6:	462a      	mov	r2, r5
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 fb3d 	bl	8009e58 <__lshift>
 80097de:	4607      	mov	r7, r0
 80097e0:	f1b8 0f00 	cmp.w	r8, #0
 80097e4:	d05b      	beq.n	800989e <_dtoa_r+0xa5e>
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	4620      	mov	r0, r4
 80097ea:	f000 f923 	bl	8009a34 <_Balloc>
 80097ee:	4605      	mov	r5, r0
 80097f0:	b928      	cbnz	r0, 80097fe <_dtoa_r+0x9be>
 80097f2:	4b87      	ldr	r3, [pc, #540]	; (8009a10 <_dtoa_r+0xbd0>)
 80097f4:	4602      	mov	r2, r0
 80097f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80097fa:	f7ff bb3b 	b.w	8008e74 <_dtoa_r+0x34>
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	3202      	adds	r2, #2
 8009802:	0092      	lsls	r2, r2, #2
 8009804:	f107 010c 	add.w	r1, r7, #12
 8009808:	300c      	adds	r0, #12
 800980a:	f7fe fdd9 	bl	80083c0 <memcpy>
 800980e:	2201      	movs	r2, #1
 8009810:	4629      	mov	r1, r5
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fb20 	bl	8009e58 <__lshift>
 8009818:	9b01      	ldr	r3, [sp, #4]
 800981a:	f103 0901 	add.w	r9, r3, #1
 800981e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009822:	4413      	add	r3, r2
 8009824:	9305      	str	r3, [sp, #20]
 8009826:	f00a 0301 	and.w	r3, sl, #1
 800982a:	46b8      	mov	r8, r7
 800982c:	9304      	str	r3, [sp, #16]
 800982e:	4607      	mov	r7, r0
 8009830:	4631      	mov	r1, r6
 8009832:	ee18 0a10 	vmov	r0, s16
 8009836:	f7ff fa77 	bl	8008d28 <quorem>
 800983a:	4641      	mov	r1, r8
 800983c:	9002      	str	r0, [sp, #8]
 800983e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009842:	ee18 0a10 	vmov	r0, s16
 8009846:	f000 fb77 	bl	8009f38 <__mcmp>
 800984a:	463a      	mov	r2, r7
 800984c:	9003      	str	r0, [sp, #12]
 800984e:	4631      	mov	r1, r6
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fb8d 	bl	8009f70 <__mdiff>
 8009856:	68c2      	ldr	r2, [r0, #12]
 8009858:	f109 3bff 	add.w	fp, r9, #4294967295
 800985c:	4605      	mov	r5, r0
 800985e:	bb02      	cbnz	r2, 80098a2 <_dtoa_r+0xa62>
 8009860:	4601      	mov	r1, r0
 8009862:	ee18 0a10 	vmov	r0, s16
 8009866:	f000 fb67 	bl	8009f38 <__mcmp>
 800986a:	4602      	mov	r2, r0
 800986c:	4629      	mov	r1, r5
 800986e:	4620      	mov	r0, r4
 8009870:	9207      	str	r2, [sp, #28]
 8009872:	f000 f91f 	bl	8009ab4 <_Bfree>
 8009876:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800987a:	ea43 0102 	orr.w	r1, r3, r2
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	430b      	orrs	r3, r1
 8009882:	464d      	mov	r5, r9
 8009884:	d10f      	bne.n	80098a6 <_dtoa_r+0xa66>
 8009886:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800988a:	d02a      	beq.n	80098e2 <_dtoa_r+0xaa2>
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	dd02      	ble.n	8009898 <_dtoa_r+0xa58>
 8009892:	9b02      	ldr	r3, [sp, #8]
 8009894:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009898:	f88b a000 	strb.w	sl, [fp]
 800989c:	e775      	b.n	800978a <_dtoa_r+0x94a>
 800989e:	4638      	mov	r0, r7
 80098a0:	e7ba      	b.n	8009818 <_dtoa_r+0x9d8>
 80098a2:	2201      	movs	r2, #1
 80098a4:	e7e2      	b.n	800986c <_dtoa_r+0xa2c>
 80098a6:	9b03      	ldr	r3, [sp, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	db04      	blt.n	80098b6 <_dtoa_r+0xa76>
 80098ac:	9906      	ldr	r1, [sp, #24]
 80098ae:	430b      	orrs	r3, r1
 80098b0:	9904      	ldr	r1, [sp, #16]
 80098b2:	430b      	orrs	r3, r1
 80098b4:	d122      	bne.n	80098fc <_dtoa_r+0xabc>
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	ddee      	ble.n	8009898 <_dtoa_r+0xa58>
 80098ba:	ee18 1a10 	vmov	r1, s16
 80098be:	2201      	movs	r2, #1
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 fac9 	bl	8009e58 <__lshift>
 80098c6:	4631      	mov	r1, r6
 80098c8:	ee08 0a10 	vmov	s16, r0
 80098cc:	f000 fb34 	bl	8009f38 <__mcmp>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	dc03      	bgt.n	80098dc <_dtoa_r+0xa9c>
 80098d4:	d1e0      	bne.n	8009898 <_dtoa_r+0xa58>
 80098d6:	f01a 0f01 	tst.w	sl, #1
 80098da:	d0dd      	beq.n	8009898 <_dtoa_r+0xa58>
 80098dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098e0:	d1d7      	bne.n	8009892 <_dtoa_r+0xa52>
 80098e2:	2339      	movs	r3, #57	; 0x39
 80098e4:	f88b 3000 	strb.w	r3, [fp]
 80098e8:	462b      	mov	r3, r5
 80098ea:	461d      	mov	r5, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098f2:	2a39      	cmp	r2, #57	; 0x39
 80098f4:	d071      	beq.n	80099da <_dtoa_r+0xb9a>
 80098f6:	3201      	adds	r2, #1
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	e746      	b.n	800978a <_dtoa_r+0x94a>
 80098fc:	2a00      	cmp	r2, #0
 80098fe:	dd07      	ble.n	8009910 <_dtoa_r+0xad0>
 8009900:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009904:	d0ed      	beq.n	80098e2 <_dtoa_r+0xaa2>
 8009906:	f10a 0301 	add.w	r3, sl, #1
 800990a:	f88b 3000 	strb.w	r3, [fp]
 800990e:	e73c      	b.n	800978a <_dtoa_r+0x94a>
 8009910:	9b05      	ldr	r3, [sp, #20]
 8009912:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009916:	4599      	cmp	r9, r3
 8009918:	d047      	beq.n	80099aa <_dtoa_r+0xb6a>
 800991a:	ee18 1a10 	vmov	r1, s16
 800991e:	2300      	movs	r3, #0
 8009920:	220a      	movs	r2, #10
 8009922:	4620      	mov	r0, r4
 8009924:	f000 f8e8 	bl	8009af8 <__multadd>
 8009928:	45b8      	cmp	r8, r7
 800992a:	ee08 0a10 	vmov	s16, r0
 800992e:	f04f 0300 	mov.w	r3, #0
 8009932:	f04f 020a 	mov.w	r2, #10
 8009936:	4641      	mov	r1, r8
 8009938:	4620      	mov	r0, r4
 800993a:	d106      	bne.n	800994a <_dtoa_r+0xb0a>
 800993c:	f000 f8dc 	bl	8009af8 <__multadd>
 8009940:	4680      	mov	r8, r0
 8009942:	4607      	mov	r7, r0
 8009944:	f109 0901 	add.w	r9, r9, #1
 8009948:	e772      	b.n	8009830 <_dtoa_r+0x9f0>
 800994a:	f000 f8d5 	bl	8009af8 <__multadd>
 800994e:	4639      	mov	r1, r7
 8009950:	4680      	mov	r8, r0
 8009952:	2300      	movs	r3, #0
 8009954:	220a      	movs	r2, #10
 8009956:	4620      	mov	r0, r4
 8009958:	f000 f8ce 	bl	8009af8 <__multadd>
 800995c:	4607      	mov	r7, r0
 800995e:	e7f1      	b.n	8009944 <_dtoa_r+0xb04>
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	9302      	str	r3, [sp, #8]
 8009964:	9d01      	ldr	r5, [sp, #4]
 8009966:	ee18 0a10 	vmov	r0, s16
 800996a:	4631      	mov	r1, r6
 800996c:	f7ff f9dc 	bl	8008d28 <quorem>
 8009970:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009974:	9b01      	ldr	r3, [sp, #4]
 8009976:	f805 ab01 	strb.w	sl, [r5], #1
 800997a:	1aea      	subs	r2, r5, r3
 800997c:	9b02      	ldr	r3, [sp, #8]
 800997e:	4293      	cmp	r3, r2
 8009980:	dd09      	ble.n	8009996 <_dtoa_r+0xb56>
 8009982:	ee18 1a10 	vmov	r1, s16
 8009986:	2300      	movs	r3, #0
 8009988:	220a      	movs	r2, #10
 800998a:	4620      	mov	r0, r4
 800998c:	f000 f8b4 	bl	8009af8 <__multadd>
 8009990:	ee08 0a10 	vmov	s16, r0
 8009994:	e7e7      	b.n	8009966 <_dtoa_r+0xb26>
 8009996:	9b02      	ldr	r3, [sp, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	bfc8      	it	gt
 800999c:	461d      	movgt	r5, r3
 800999e:	9b01      	ldr	r3, [sp, #4]
 80099a0:	bfd8      	it	le
 80099a2:	2501      	movle	r5, #1
 80099a4:	441d      	add	r5, r3
 80099a6:	f04f 0800 	mov.w	r8, #0
 80099aa:	ee18 1a10 	vmov	r1, s16
 80099ae:	2201      	movs	r2, #1
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 fa51 	bl	8009e58 <__lshift>
 80099b6:	4631      	mov	r1, r6
 80099b8:	ee08 0a10 	vmov	s16, r0
 80099bc:	f000 fabc 	bl	8009f38 <__mcmp>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	dc91      	bgt.n	80098e8 <_dtoa_r+0xaa8>
 80099c4:	d102      	bne.n	80099cc <_dtoa_r+0xb8c>
 80099c6:	f01a 0f01 	tst.w	sl, #1
 80099ca:	d18d      	bne.n	80098e8 <_dtoa_r+0xaa8>
 80099cc:	462b      	mov	r3, r5
 80099ce:	461d      	mov	r5, r3
 80099d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099d4:	2a30      	cmp	r2, #48	; 0x30
 80099d6:	d0fa      	beq.n	80099ce <_dtoa_r+0xb8e>
 80099d8:	e6d7      	b.n	800978a <_dtoa_r+0x94a>
 80099da:	9a01      	ldr	r2, [sp, #4]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d184      	bne.n	80098ea <_dtoa_r+0xaaa>
 80099e0:	9b00      	ldr	r3, [sp, #0]
 80099e2:	3301      	adds	r3, #1
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	2331      	movs	r3, #49	; 0x31
 80099e8:	7013      	strb	r3, [r2, #0]
 80099ea:	e6ce      	b.n	800978a <_dtoa_r+0x94a>
 80099ec:	4b09      	ldr	r3, [pc, #36]	; (8009a14 <_dtoa_r+0xbd4>)
 80099ee:	f7ff ba95 	b.w	8008f1c <_dtoa_r+0xdc>
 80099f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f47f aa6e 	bne.w	8008ed6 <_dtoa_r+0x96>
 80099fa:	4b07      	ldr	r3, [pc, #28]	; (8009a18 <_dtoa_r+0xbd8>)
 80099fc:	f7ff ba8e 	b.w	8008f1c <_dtoa_r+0xdc>
 8009a00:	9b02      	ldr	r3, [sp, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dcae      	bgt.n	8009964 <_dtoa_r+0xb24>
 8009a06:	9b06      	ldr	r3, [sp, #24]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	f73f aea8 	bgt.w	800975e <_dtoa_r+0x91e>
 8009a0e:	e7a9      	b.n	8009964 <_dtoa_r+0xb24>
 8009a10:	0800ceab 	.word	0x0800ceab
 8009a14:	0800ce08 	.word	0x0800ce08
 8009a18:	0800ce2c 	.word	0x0800ce2c

08009a1c <_localeconv_r>:
 8009a1c:	4800      	ldr	r0, [pc, #0]	; (8009a20 <_localeconv_r+0x4>)
 8009a1e:	4770      	bx	lr
 8009a20:	20000170 	.word	0x20000170

08009a24 <malloc>:
 8009a24:	4b02      	ldr	r3, [pc, #8]	; (8009a30 <malloc+0xc>)
 8009a26:	4601      	mov	r1, r0
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	f000 bc09 	b.w	800a240 <_malloc_r>
 8009a2e:	bf00      	nop
 8009a30:	2000001c 	.word	0x2000001c

08009a34 <_Balloc>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a38:	4604      	mov	r4, r0
 8009a3a:	460d      	mov	r5, r1
 8009a3c:	b976      	cbnz	r6, 8009a5c <_Balloc+0x28>
 8009a3e:	2010      	movs	r0, #16
 8009a40:	f7ff fff0 	bl	8009a24 <malloc>
 8009a44:	4602      	mov	r2, r0
 8009a46:	6260      	str	r0, [r4, #36]	; 0x24
 8009a48:	b920      	cbnz	r0, 8009a54 <_Balloc+0x20>
 8009a4a:	4b18      	ldr	r3, [pc, #96]	; (8009aac <_Balloc+0x78>)
 8009a4c:	4818      	ldr	r0, [pc, #96]	; (8009ab0 <_Balloc+0x7c>)
 8009a4e:	2166      	movs	r1, #102	; 0x66
 8009a50:	f000 fdd6 	bl	800a600 <__assert_func>
 8009a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a58:	6006      	str	r6, [r0, #0]
 8009a5a:	60c6      	str	r6, [r0, #12]
 8009a5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a5e:	68f3      	ldr	r3, [r6, #12]
 8009a60:	b183      	cbz	r3, 8009a84 <_Balloc+0x50>
 8009a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a6a:	b9b8      	cbnz	r0, 8009a9c <_Balloc+0x68>
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	fa01 f605 	lsl.w	r6, r1, r5
 8009a72:	1d72      	adds	r2, r6, #5
 8009a74:	0092      	lsls	r2, r2, #2
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 fb60 	bl	800a13c <_calloc_r>
 8009a7c:	b160      	cbz	r0, 8009a98 <_Balloc+0x64>
 8009a7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a82:	e00e      	b.n	8009aa2 <_Balloc+0x6e>
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	2104      	movs	r1, #4
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fb57 	bl	800a13c <_calloc_r>
 8009a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a90:	60f0      	str	r0, [r6, #12]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e4      	bne.n	8009a62 <_Balloc+0x2e>
 8009a98:	2000      	movs	r0, #0
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	6802      	ldr	r2, [r0, #0]
 8009a9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009aa8:	e7f7      	b.n	8009a9a <_Balloc+0x66>
 8009aaa:	bf00      	nop
 8009aac:	0800ce39 	.word	0x0800ce39
 8009ab0:	0800cebc 	.word	0x0800cebc

08009ab4 <_Bfree>:
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ab8:	4605      	mov	r5, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	b976      	cbnz	r6, 8009adc <_Bfree+0x28>
 8009abe:	2010      	movs	r0, #16
 8009ac0:	f7ff ffb0 	bl	8009a24 <malloc>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	6268      	str	r0, [r5, #36]	; 0x24
 8009ac8:	b920      	cbnz	r0, 8009ad4 <_Bfree+0x20>
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <_Bfree+0x3c>)
 8009acc:	4809      	ldr	r0, [pc, #36]	; (8009af4 <_Bfree+0x40>)
 8009ace:	218a      	movs	r1, #138	; 0x8a
 8009ad0:	f000 fd96 	bl	800a600 <__assert_func>
 8009ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ad8:	6006      	str	r6, [r0, #0]
 8009ada:	60c6      	str	r6, [r0, #12]
 8009adc:	b13c      	cbz	r4, 8009aee <_Bfree+0x3a>
 8009ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ae0:	6862      	ldr	r2, [r4, #4]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ae8:	6021      	str	r1, [r4, #0]
 8009aea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	0800ce39 	.word	0x0800ce39
 8009af4:	0800cebc 	.word	0x0800cebc

08009af8 <__multadd>:
 8009af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afc:	690d      	ldr	r5, [r1, #16]
 8009afe:	4607      	mov	r7, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	461e      	mov	r6, r3
 8009b04:	f101 0c14 	add.w	ip, r1, #20
 8009b08:	2000      	movs	r0, #0
 8009b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8009b0e:	b299      	uxth	r1, r3
 8009b10:	fb02 6101 	mla	r1, r2, r1, r6
 8009b14:	0c1e      	lsrs	r6, r3, #16
 8009b16:	0c0b      	lsrs	r3, r1, #16
 8009b18:	fb02 3306 	mla	r3, r2, r6, r3
 8009b1c:	b289      	uxth	r1, r1
 8009b1e:	3001      	adds	r0, #1
 8009b20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b24:	4285      	cmp	r5, r0
 8009b26:	f84c 1b04 	str.w	r1, [ip], #4
 8009b2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b2e:	dcec      	bgt.n	8009b0a <__multadd+0x12>
 8009b30:	b30e      	cbz	r6, 8009b76 <__multadd+0x7e>
 8009b32:	68a3      	ldr	r3, [r4, #8]
 8009b34:	42ab      	cmp	r3, r5
 8009b36:	dc19      	bgt.n	8009b6c <__multadd+0x74>
 8009b38:	6861      	ldr	r1, [r4, #4]
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	3101      	adds	r1, #1
 8009b3e:	f7ff ff79 	bl	8009a34 <_Balloc>
 8009b42:	4680      	mov	r8, r0
 8009b44:	b928      	cbnz	r0, 8009b52 <__multadd+0x5a>
 8009b46:	4602      	mov	r2, r0
 8009b48:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <__multadd+0x84>)
 8009b4a:	480d      	ldr	r0, [pc, #52]	; (8009b80 <__multadd+0x88>)
 8009b4c:	21b5      	movs	r1, #181	; 0xb5
 8009b4e:	f000 fd57 	bl	800a600 <__assert_func>
 8009b52:	6922      	ldr	r2, [r4, #16]
 8009b54:	3202      	adds	r2, #2
 8009b56:	f104 010c 	add.w	r1, r4, #12
 8009b5a:	0092      	lsls	r2, r2, #2
 8009b5c:	300c      	adds	r0, #12
 8009b5e:	f7fe fc2f 	bl	80083c0 <memcpy>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4638      	mov	r0, r7
 8009b66:	f7ff ffa5 	bl	8009ab4 <_Bfree>
 8009b6a:	4644      	mov	r4, r8
 8009b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b70:	3501      	adds	r5, #1
 8009b72:	615e      	str	r6, [r3, #20]
 8009b74:	6125      	str	r5, [r4, #16]
 8009b76:	4620      	mov	r0, r4
 8009b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b7c:	0800ceab 	.word	0x0800ceab
 8009b80:	0800cebc 	.word	0x0800cebc

08009b84 <__hi0bits>:
 8009b84:	0c03      	lsrs	r3, r0, #16
 8009b86:	041b      	lsls	r3, r3, #16
 8009b88:	b9d3      	cbnz	r3, 8009bc0 <__hi0bits+0x3c>
 8009b8a:	0400      	lsls	r0, r0, #16
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b92:	bf04      	itt	eq
 8009b94:	0200      	lsleq	r0, r0, #8
 8009b96:	3308      	addeq	r3, #8
 8009b98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b9c:	bf04      	itt	eq
 8009b9e:	0100      	lsleq	r0, r0, #4
 8009ba0:	3304      	addeq	r3, #4
 8009ba2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ba6:	bf04      	itt	eq
 8009ba8:	0080      	lsleq	r0, r0, #2
 8009baa:	3302      	addeq	r3, #2
 8009bac:	2800      	cmp	r0, #0
 8009bae:	db05      	blt.n	8009bbc <__hi0bits+0x38>
 8009bb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009bb4:	f103 0301 	add.w	r3, r3, #1
 8009bb8:	bf08      	it	eq
 8009bba:	2320      	moveq	r3, #32
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	4770      	bx	lr
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	e7e4      	b.n	8009b8e <__hi0bits+0xa>

08009bc4 <__lo0bits>:
 8009bc4:	6803      	ldr	r3, [r0, #0]
 8009bc6:	f013 0207 	ands.w	r2, r3, #7
 8009bca:	4601      	mov	r1, r0
 8009bcc:	d00b      	beq.n	8009be6 <__lo0bits+0x22>
 8009bce:	07da      	lsls	r2, r3, #31
 8009bd0:	d423      	bmi.n	8009c1a <__lo0bits+0x56>
 8009bd2:	0798      	lsls	r0, r3, #30
 8009bd4:	bf49      	itett	mi
 8009bd6:	085b      	lsrmi	r3, r3, #1
 8009bd8:	089b      	lsrpl	r3, r3, #2
 8009bda:	2001      	movmi	r0, #1
 8009bdc:	600b      	strmi	r3, [r1, #0]
 8009bde:	bf5c      	itt	pl
 8009be0:	600b      	strpl	r3, [r1, #0]
 8009be2:	2002      	movpl	r0, #2
 8009be4:	4770      	bx	lr
 8009be6:	b298      	uxth	r0, r3
 8009be8:	b9a8      	cbnz	r0, 8009c16 <__lo0bits+0x52>
 8009bea:	0c1b      	lsrs	r3, r3, #16
 8009bec:	2010      	movs	r0, #16
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	b90a      	cbnz	r2, 8009bf6 <__lo0bits+0x32>
 8009bf2:	3008      	adds	r0, #8
 8009bf4:	0a1b      	lsrs	r3, r3, #8
 8009bf6:	071a      	lsls	r2, r3, #28
 8009bf8:	bf04      	itt	eq
 8009bfa:	091b      	lsreq	r3, r3, #4
 8009bfc:	3004      	addeq	r0, #4
 8009bfe:	079a      	lsls	r2, r3, #30
 8009c00:	bf04      	itt	eq
 8009c02:	089b      	lsreq	r3, r3, #2
 8009c04:	3002      	addeq	r0, #2
 8009c06:	07da      	lsls	r2, r3, #31
 8009c08:	d403      	bmi.n	8009c12 <__lo0bits+0x4e>
 8009c0a:	085b      	lsrs	r3, r3, #1
 8009c0c:	f100 0001 	add.w	r0, r0, #1
 8009c10:	d005      	beq.n	8009c1e <__lo0bits+0x5a>
 8009c12:	600b      	str	r3, [r1, #0]
 8009c14:	4770      	bx	lr
 8009c16:	4610      	mov	r0, r2
 8009c18:	e7e9      	b.n	8009bee <__lo0bits+0x2a>
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	4770      	bx	lr
 8009c1e:	2020      	movs	r0, #32
 8009c20:	4770      	bx	lr
	...

08009c24 <__i2b>:
 8009c24:	b510      	push	{r4, lr}
 8009c26:	460c      	mov	r4, r1
 8009c28:	2101      	movs	r1, #1
 8009c2a:	f7ff ff03 	bl	8009a34 <_Balloc>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	b928      	cbnz	r0, 8009c3e <__i2b+0x1a>
 8009c32:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <__i2b+0x24>)
 8009c34:	4805      	ldr	r0, [pc, #20]	; (8009c4c <__i2b+0x28>)
 8009c36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c3a:	f000 fce1 	bl	800a600 <__assert_func>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	6144      	str	r4, [r0, #20]
 8009c42:	6103      	str	r3, [r0, #16]
 8009c44:	bd10      	pop	{r4, pc}
 8009c46:	bf00      	nop
 8009c48:	0800ceab 	.word	0x0800ceab
 8009c4c:	0800cebc 	.word	0x0800cebc

08009c50 <__multiply>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	4691      	mov	r9, r2
 8009c56:	690a      	ldr	r2, [r1, #16]
 8009c58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	bfb8      	it	lt
 8009c60:	460b      	movlt	r3, r1
 8009c62:	460c      	mov	r4, r1
 8009c64:	bfbc      	itt	lt
 8009c66:	464c      	movlt	r4, r9
 8009c68:	4699      	movlt	r9, r3
 8009c6a:	6927      	ldr	r7, [r4, #16]
 8009c6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c70:	68a3      	ldr	r3, [r4, #8]
 8009c72:	6861      	ldr	r1, [r4, #4]
 8009c74:	eb07 060a 	add.w	r6, r7, sl
 8009c78:	42b3      	cmp	r3, r6
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	bfb8      	it	lt
 8009c7e:	3101      	addlt	r1, #1
 8009c80:	f7ff fed8 	bl	8009a34 <_Balloc>
 8009c84:	b930      	cbnz	r0, 8009c94 <__multiply+0x44>
 8009c86:	4602      	mov	r2, r0
 8009c88:	4b44      	ldr	r3, [pc, #272]	; (8009d9c <__multiply+0x14c>)
 8009c8a:	4845      	ldr	r0, [pc, #276]	; (8009da0 <__multiply+0x150>)
 8009c8c:	f240 115d 	movw	r1, #349	; 0x15d
 8009c90:	f000 fcb6 	bl	800a600 <__assert_func>
 8009c94:	f100 0514 	add.w	r5, r0, #20
 8009c98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	4543      	cmp	r3, r8
 8009ca2:	d321      	bcc.n	8009ce8 <__multiply+0x98>
 8009ca4:	f104 0314 	add.w	r3, r4, #20
 8009ca8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009cac:	f109 0314 	add.w	r3, r9, #20
 8009cb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009cb4:	9202      	str	r2, [sp, #8]
 8009cb6:	1b3a      	subs	r2, r7, r4
 8009cb8:	3a15      	subs	r2, #21
 8009cba:	f022 0203 	bic.w	r2, r2, #3
 8009cbe:	3204      	adds	r2, #4
 8009cc0:	f104 0115 	add.w	r1, r4, #21
 8009cc4:	428f      	cmp	r7, r1
 8009cc6:	bf38      	it	cc
 8009cc8:	2204      	movcc	r2, #4
 8009cca:	9201      	str	r2, [sp, #4]
 8009ccc:	9a02      	ldr	r2, [sp, #8]
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d80c      	bhi.n	8009cee <__multiply+0x9e>
 8009cd4:	2e00      	cmp	r6, #0
 8009cd6:	dd03      	ble.n	8009ce0 <__multiply+0x90>
 8009cd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d05a      	beq.n	8009d96 <__multiply+0x146>
 8009ce0:	6106      	str	r6, [r0, #16]
 8009ce2:	b005      	add	sp, #20
 8009ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce8:	f843 2b04 	str.w	r2, [r3], #4
 8009cec:	e7d8      	b.n	8009ca0 <__multiply+0x50>
 8009cee:	f8b3 a000 	ldrh.w	sl, [r3]
 8009cf2:	f1ba 0f00 	cmp.w	sl, #0
 8009cf6:	d024      	beq.n	8009d42 <__multiply+0xf2>
 8009cf8:	f104 0e14 	add.w	lr, r4, #20
 8009cfc:	46a9      	mov	r9, r5
 8009cfe:	f04f 0c00 	mov.w	ip, #0
 8009d02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d06:	f8d9 1000 	ldr.w	r1, [r9]
 8009d0a:	fa1f fb82 	uxth.w	fp, r2
 8009d0e:	b289      	uxth	r1, r1
 8009d10:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d18:	f8d9 2000 	ldr.w	r2, [r9]
 8009d1c:	4461      	add	r1, ip
 8009d1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d22:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d2a:	b289      	uxth	r1, r1
 8009d2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d30:	4577      	cmp	r7, lr
 8009d32:	f849 1b04 	str.w	r1, [r9], #4
 8009d36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d3a:	d8e2      	bhi.n	8009d02 <__multiply+0xb2>
 8009d3c:	9a01      	ldr	r2, [sp, #4]
 8009d3e:	f845 c002 	str.w	ip, [r5, r2]
 8009d42:	9a03      	ldr	r2, [sp, #12]
 8009d44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	f1b9 0f00 	cmp.w	r9, #0
 8009d4e:	d020      	beq.n	8009d92 <__multiply+0x142>
 8009d50:	6829      	ldr	r1, [r5, #0]
 8009d52:	f104 0c14 	add.w	ip, r4, #20
 8009d56:	46ae      	mov	lr, r5
 8009d58:	f04f 0a00 	mov.w	sl, #0
 8009d5c:	f8bc b000 	ldrh.w	fp, [ip]
 8009d60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d64:	fb09 220b 	mla	r2, r9, fp, r2
 8009d68:	4492      	add	sl, r2
 8009d6a:	b289      	uxth	r1, r1
 8009d6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009d70:	f84e 1b04 	str.w	r1, [lr], #4
 8009d74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d78:	f8be 1000 	ldrh.w	r1, [lr]
 8009d7c:	0c12      	lsrs	r2, r2, #16
 8009d7e:	fb09 1102 	mla	r1, r9, r2, r1
 8009d82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d86:	4567      	cmp	r7, ip
 8009d88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d8c:	d8e6      	bhi.n	8009d5c <__multiply+0x10c>
 8009d8e:	9a01      	ldr	r2, [sp, #4]
 8009d90:	50a9      	str	r1, [r5, r2]
 8009d92:	3504      	adds	r5, #4
 8009d94:	e79a      	b.n	8009ccc <__multiply+0x7c>
 8009d96:	3e01      	subs	r6, #1
 8009d98:	e79c      	b.n	8009cd4 <__multiply+0x84>
 8009d9a:	bf00      	nop
 8009d9c:	0800ceab 	.word	0x0800ceab
 8009da0:	0800cebc 	.word	0x0800cebc

08009da4 <__pow5mult>:
 8009da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da8:	4615      	mov	r5, r2
 8009daa:	f012 0203 	ands.w	r2, r2, #3
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	d007      	beq.n	8009dc4 <__pow5mult+0x20>
 8009db4:	4c25      	ldr	r4, [pc, #148]	; (8009e4c <__pow5mult+0xa8>)
 8009db6:	3a01      	subs	r2, #1
 8009db8:	2300      	movs	r3, #0
 8009dba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dbe:	f7ff fe9b 	bl	8009af8 <__multadd>
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	10ad      	asrs	r5, r5, #2
 8009dc6:	d03d      	beq.n	8009e44 <__pow5mult+0xa0>
 8009dc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009dca:	b97c      	cbnz	r4, 8009dec <__pow5mult+0x48>
 8009dcc:	2010      	movs	r0, #16
 8009dce:	f7ff fe29 	bl	8009a24 <malloc>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	6270      	str	r0, [r6, #36]	; 0x24
 8009dd6:	b928      	cbnz	r0, 8009de4 <__pow5mult+0x40>
 8009dd8:	4b1d      	ldr	r3, [pc, #116]	; (8009e50 <__pow5mult+0xac>)
 8009dda:	481e      	ldr	r0, [pc, #120]	; (8009e54 <__pow5mult+0xb0>)
 8009ddc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009de0:	f000 fc0e 	bl	800a600 <__assert_func>
 8009de4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009de8:	6004      	str	r4, [r0, #0]
 8009dea:	60c4      	str	r4, [r0, #12]
 8009dec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009df0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009df4:	b94c      	cbnz	r4, 8009e0a <__pow5mult+0x66>
 8009df6:	f240 2171 	movw	r1, #625	; 0x271
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7ff ff12 	bl	8009c24 <__i2b>
 8009e00:	2300      	movs	r3, #0
 8009e02:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e06:	4604      	mov	r4, r0
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	f04f 0900 	mov.w	r9, #0
 8009e0e:	07eb      	lsls	r3, r5, #31
 8009e10:	d50a      	bpl.n	8009e28 <__pow5mult+0x84>
 8009e12:	4639      	mov	r1, r7
 8009e14:	4622      	mov	r2, r4
 8009e16:	4630      	mov	r0, r6
 8009e18:	f7ff ff1a 	bl	8009c50 <__multiply>
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	4680      	mov	r8, r0
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7ff fe47 	bl	8009ab4 <_Bfree>
 8009e26:	4647      	mov	r7, r8
 8009e28:	106d      	asrs	r5, r5, #1
 8009e2a:	d00b      	beq.n	8009e44 <__pow5mult+0xa0>
 8009e2c:	6820      	ldr	r0, [r4, #0]
 8009e2e:	b938      	cbnz	r0, 8009e40 <__pow5mult+0x9c>
 8009e30:	4622      	mov	r2, r4
 8009e32:	4621      	mov	r1, r4
 8009e34:	4630      	mov	r0, r6
 8009e36:	f7ff ff0b 	bl	8009c50 <__multiply>
 8009e3a:	6020      	str	r0, [r4, #0]
 8009e3c:	f8c0 9000 	str.w	r9, [r0]
 8009e40:	4604      	mov	r4, r0
 8009e42:	e7e4      	b.n	8009e0e <__pow5mult+0x6a>
 8009e44:	4638      	mov	r0, r7
 8009e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e4a:	bf00      	nop
 8009e4c:	0800d008 	.word	0x0800d008
 8009e50:	0800ce39 	.word	0x0800ce39
 8009e54:	0800cebc 	.word	0x0800cebc

08009e58 <__lshift>:
 8009e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	6849      	ldr	r1, [r1, #4]
 8009e60:	6923      	ldr	r3, [r4, #16]
 8009e62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e66:	68a3      	ldr	r3, [r4, #8]
 8009e68:	4607      	mov	r7, r0
 8009e6a:	4691      	mov	r9, r2
 8009e6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e70:	f108 0601 	add.w	r6, r8, #1
 8009e74:	42b3      	cmp	r3, r6
 8009e76:	db0b      	blt.n	8009e90 <__lshift+0x38>
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f7ff fddb 	bl	8009a34 <_Balloc>
 8009e7e:	4605      	mov	r5, r0
 8009e80:	b948      	cbnz	r0, 8009e96 <__lshift+0x3e>
 8009e82:	4602      	mov	r2, r0
 8009e84:	4b2a      	ldr	r3, [pc, #168]	; (8009f30 <__lshift+0xd8>)
 8009e86:	482b      	ldr	r0, [pc, #172]	; (8009f34 <__lshift+0xdc>)
 8009e88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e8c:	f000 fbb8 	bl	800a600 <__assert_func>
 8009e90:	3101      	adds	r1, #1
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	e7ee      	b.n	8009e74 <__lshift+0x1c>
 8009e96:	2300      	movs	r3, #0
 8009e98:	f100 0114 	add.w	r1, r0, #20
 8009e9c:	f100 0210 	add.w	r2, r0, #16
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	4553      	cmp	r3, sl
 8009ea4:	db37      	blt.n	8009f16 <__lshift+0xbe>
 8009ea6:	6920      	ldr	r0, [r4, #16]
 8009ea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009eac:	f104 0314 	add.w	r3, r4, #20
 8009eb0:	f019 091f 	ands.w	r9, r9, #31
 8009eb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009eb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ebc:	d02f      	beq.n	8009f1e <__lshift+0xc6>
 8009ebe:	f1c9 0e20 	rsb	lr, r9, #32
 8009ec2:	468a      	mov	sl, r1
 8009ec4:	f04f 0c00 	mov.w	ip, #0
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	fa02 f209 	lsl.w	r2, r2, r9
 8009ece:	ea42 020c 	orr.w	r2, r2, ip
 8009ed2:	f84a 2b04 	str.w	r2, [sl], #4
 8009ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eda:	4298      	cmp	r0, r3
 8009edc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ee0:	d8f2      	bhi.n	8009ec8 <__lshift+0x70>
 8009ee2:	1b03      	subs	r3, r0, r4
 8009ee4:	3b15      	subs	r3, #21
 8009ee6:	f023 0303 	bic.w	r3, r3, #3
 8009eea:	3304      	adds	r3, #4
 8009eec:	f104 0215 	add.w	r2, r4, #21
 8009ef0:	4290      	cmp	r0, r2
 8009ef2:	bf38      	it	cc
 8009ef4:	2304      	movcc	r3, #4
 8009ef6:	f841 c003 	str.w	ip, [r1, r3]
 8009efa:	f1bc 0f00 	cmp.w	ip, #0
 8009efe:	d001      	beq.n	8009f04 <__lshift+0xac>
 8009f00:	f108 0602 	add.w	r6, r8, #2
 8009f04:	3e01      	subs	r6, #1
 8009f06:	4638      	mov	r0, r7
 8009f08:	612e      	str	r6, [r5, #16]
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	f7ff fdd2 	bl	8009ab4 <_Bfree>
 8009f10:	4628      	mov	r0, r5
 8009f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f16:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	e7c1      	b.n	8009ea2 <__lshift+0x4a>
 8009f1e:	3904      	subs	r1, #4
 8009f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f24:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f28:	4298      	cmp	r0, r3
 8009f2a:	d8f9      	bhi.n	8009f20 <__lshift+0xc8>
 8009f2c:	e7ea      	b.n	8009f04 <__lshift+0xac>
 8009f2e:	bf00      	nop
 8009f30:	0800ceab 	.word	0x0800ceab
 8009f34:	0800cebc 	.word	0x0800cebc

08009f38 <__mcmp>:
 8009f38:	b530      	push	{r4, r5, lr}
 8009f3a:	6902      	ldr	r2, [r0, #16]
 8009f3c:	690c      	ldr	r4, [r1, #16]
 8009f3e:	1b12      	subs	r2, r2, r4
 8009f40:	d10e      	bne.n	8009f60 <__mcmp+0x28>
 8009f42:	f100 0314 	add.w	r3, r0, #20
 8009f46:	3114      	adds	r1, #20
 8009f48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f58:	42a5      	cmp	r5, r4
 8009f5a:	d003      	beq.n	8009f64 <__mcmp+0x2c>
 8009f5c:	d305      	bcc.n	8009f6a <__mcmp+0x32>
 8009f5e:	2201      	movs	r2, #1
 8009f60:	4610      	mov	r0, r2
 8009f62:	bd30      	pop	{r4, r5, pc}
 8009f64:	4283      	cmp	r3, r0
 8009f66:	d3f3      	bcc.n	8009f50 <__mcmp+0x18>
 8009f68:	e7fa      	b.n	8009f60 <__mcmp+0x28>
 8009f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6e:	e7f7      	b.n	8009f60 <__mcmp+0x28>

08009f70 <__mdiff>:
 8009f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	460c      	mov	r4, r1
 8009f76:	4606      	mov	r6, r0
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	4690      	mov	r8, r2
 8009f7e:	f7ff ffdb 	bl	8009f38 <__mcmp>
 8009f82:	1e05      	subs	r5, r0, #0
 8009f84:	d110      	bne.n	8009fa8 <__mdiff+0x38>
 8009f86:	4629      	mov	r1, r5
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff fd53 	bl	8009a34 <_Balloc>
 8009f8e:	b930      	cbnz	r0, 8009f9e <__mdiff+0x2e>
 8009f90:	4b3a      	ldr	r3, [pc, #232]	; (800a07c <__mdiff+0x10c>)
 8009f92:	4602      	mov	r2, r0
 8009f94:	f240 2132 	movw	r1, #562	; 0x232
 8009f98:	4839      	ldr	r0, [pc, #228]	; (800a080 <__mdiff+0x110>)
 8009f9a:	f000 fb31 	bl	800a600 <__assert_func>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa8:	bfa4      	itt	ge
 8009faa:	4643      	movge	r3, r8
 8009fac:	46a0      	movge	r8, r4
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fb4:	bfa6      	itte	ge
 8009fb6:	461c      	movge	r4, r3
 8009fb8:	2500      	movge	r5, #0
 8009fba:	2501      	movlt	r5, #1
 8009fbc:	f7ff fd3a 	bl	8009a34 <_Balloc>
 8009fc0:	b920      	cbnz	r0, 8009fcc <__mdiff+0x5c>
 8009fc2:	4b2e      	ldr	r3, [pc, #184]	; (800a07c <__mdiff+0x10c>)
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009fca:	e7e5      	b.n	8009f98 <__mdiff+0x28>
 8009fcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009fd0:	6926      	ldr	r6, [r4, #16]
 8009fd2:	60c5      	str	r5, [r0, #12]
 8009fd4:	f104 0914 	add.w	r9, r4, #20
 8009fd8:	f108 0514 	add.w	r5, r8, #20
 8009fdc:	f100 0e14 	add.w	lr, r0, #20
 8009fe0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009fe4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fe8:	f108 0210 	add.w	r2, r8, #16
 8009fec:	46f2      	mov	sl, lr
 8009fee:	2100      	movs	r1, #0
 8009ff0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ff4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ff8:	fa1f f883 	uxth.w	r8, r3
 8009ffc:	fa11 f18b 	uxtah	r1, r1, fp
 800a000:	0c1b      	lsrs	r3, r3, #16
 800a002:	eba1 0808 	sub.w	r8, r1, r8
 800a006:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a00a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a00e:	fa1f f888 	uxth.w	r8, r8
 800a012:	1419      	asrs	r1, r3, #16
 800a014:	454e      	cmp	r6, r9
 800a016:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a01a:	f84a 3b04 	str.w	r3, [sl], #4
 800a01e:	d8e7      	bhi.n	8009ff0 <__mdiff+0x80>
 800a020:	1b33      	subs	r3, r6, r4
 800a022:	3b15      	subs	r3, #21
 800a024:	f023 0303 	bic.w	r3, r3, #3
 800a028:	3304      	adds	r3, #4
 800a02a:	3415      	adds	r4, #21
 800a02c:	42a6      	cmp	r6, r4
 800a02e:	bf38      	it	cc
 800a030:	2304      	movcc	r3, #4
 800a032:	441d      	add	r5, r3
 800a034:	4473      	add	r3, lr
 800a036:	469e      	mov	lr, r3
 800a038:	462e      	mov	r6, r5
 800a03a:	4566      	cmp	r6, ip
 800a03c:	d30e      	bcc.n	800a05c <__mdiff+0xec>
 800a03e:	f10c 0203 	add.w	r2, ip, #3
 800a042:	1b52      	subs	r2, r2, r5
 800a044:	f022 0203 	bic.w	r2, r2, #3
 800a048:	3d03      	subs	r5, #3
 800a04a:	45ac      	cmp	ip, r5
 800a04c:	bf38      	it	cc
 800a04e:	2200      	movcc	r2, #0
 800a050:	441a      	add	r2, r3
 800a052:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a056:	b17b      	cbz	r3, 800a078 <__mdiff+0x108>
 800a058:	6107      	str	r7, [r0, #16]
 800a05a:	e7a3      	b.n	8009fa4 <__mdiff+0x34>
 800a05c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a060:	fa11 f288 	uxtah	r2, r1, r8
 800a064:	1414      	asrs	r4, r2, #16
 800a066:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a06a:	b292      	uxth	r2, r2
 800a06c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a070:	f84e 2b04 	str.w	r2, [lr], #4
 800a074:	1421      	asrs	r1, r4, #16
 800a076:	e7e0      	b.n	800a03a <__mdiff+0xca>
 800a078:	3f01      	subs	r7, #1
 800a07a:	e7ea      	b.n	800a052 <__mdiff+0xe2>
 800a07c:	0800ceab 	.word	0x0800ceab
 800a080:	0800cebc 	.word	0x0800cebc

0800a084 <__d2b>:
 800a084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a088:	4689      	mov	r9, r1
 800a08a:	2101      	movs	r1, #1
 800a08c:	ec57 6b10 	vmov	r6, r7, d0
 800a090:	4690      	mov	r8, r2
 800a092:	f7ff fccf 	bl	8009a34 <_Balloc>
 800a096:	4604      	mov	r4, r0
 800a098:	b930      	cbnz	r0, 800a0a8 <__d2b+0x24>
 800a09a:	4602      	mov	r2, r0
 800a09c:	4b25      	ldr	r3, [pc, #148]	; (800a134 <__d2b+0xb0>)
 800a09e:	4826      	ldr	r0, [pc, #152]	; (800a138 <__d2b+0xb4>)
 800a0a0:	f240 310a 	movw	r1, #778	; 0x30a
 800a0a4:	f000 faac 	bl	800a600 <__assert_func>
 800a0a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a0ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0b0:	bb35      	cbnz	r5, 800a100 <__d2b+0x7c>
 800a0b2:	2e00      	cmp	r6, #0
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	d028      	beq.n	800a10a <__d2b+0x86>
 800a0b8:	4668      	mov	r0, sp
 800a0ba:	9600      	str	r6, [sp, #0]
 800a0bc:	f7ff fd82 	bl	8009bc4 <__lo0bits>
 800a0c0:	9900      	ldr	r1, [sp, #0]
 800a0c2:	b300      	cbz	r0, 800a106 <__d2b+0x82>
 800a0c4:	9a01      	ldr	r2, [sp, #4]
 800a0c6:	f1c0 0320 	rsb	r3, r0, #32
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	430b      	orrs	r3, r1
 800a0d0:	40c2      	lsrs	r2, r0
 800a0d2:	6163      	str	r3, [r4, #20]
 800a0d4:	9201      	str	r2, [sp, #4]
 800a0d6:	9b01      	ldr	r3, [sp, #4]
 800a0d8:	61a3      	str	r3, [r4, #24]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	bf14      	ite	ne
 800a0de:	2202      	movne	r2, #2
 800a0e0:	2201      	moveq	r2, #1
 800a0e2:	6122      	str	r2, [r4, #16]
 800a0e4:	b1d5      	cbz	r5, 800a11c <__d2b+0x98>
 800a0e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0ea:	4405      	add	r5, r0
 800a0ec:	f8c9 5000 	str.w	r5, [r9]
 800a0f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0f4:	f8c8 0000 	str.w	r0, [r8]
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	b003      	add	sp, #12
 800a0fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a104:	e7d5      	b.n	800a0b2 <__d2b+0x2e>
 800a106:	6161      	str	r1, [r4, #20]
 800a108:	e7e5      	b.n	800a0d6 <__d2b+0x52>
 800a10a:	a801      	add	r0, sp, #4
 800a10c:	f7ff fd5a 	bl	8009bc4 <__lo0bits>
 800a110:	9b01      	ldr	r3, [sp, #4]
 800a112:	6163      	str	r3, [r4, #20]
 800a114:	2201      	movs	r2, #1
 800a116:	6122      	str	r2, [r4, #16]
 800a118:	3020      	adds	r0, #32
 800a11a:	e7e3      	b.n	800a0e4 <__d2b+0x60>
 800a11c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a120:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a124:	f8c9 0000 	str.w	r0, [r9]
 800a128:	6918      	ldr	r0, [r3, #16]
 800a12a:	f7ff fd2b 	bl	8009b84 <__hi0bits>
 800a12e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a132:	e7df      	b.n	800a0f4 <__d2b+0x70>
 800a134:	0800ceab 	.word	0x0800ceab
 800a138:	0800cebc 	.word	0x0800cebc

0800a13c <_calloc_r>:
 800a13c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a13e:	fba1 2402 	umull	r2, r4, r1, r2
 800a142:	b94c      	cbnz	r4, 800a158 <_calloc_r+0x1c>
 800a144:	4611      	mov	r1, r2
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	f000 f87a 	bl	800a240 <_malloc_r>
 800a14c:	9a01      	ldr	r2, [sp, #4]
 800a14e:	4605      	mov	r5, r0
 800a150:	b930      	cbnz	r0, 800a160 <_calloc_r+0x24>
 800a152:	4628      	mov	r0, r5
 800a154:	b003      	add	sp, #12
 800a156:	bd30      	pop	{r4, r5, pc}
 800a158:	220c      	movs	r2, #12
 800a15a:	6002      	str	r2, [r0, #0]
 800a15c:	2500      	movs	r5, #0
 800a15e:	e7f8      	b.n	800a152 <_calloc_r+0x16>
 800a160:	4621      	mov	r1, r4
 800a162:	f7fe f93b 	bl	80083dc <memset>
 800a166:	e7f4      	b.n	800a152 <_calloc_r+0x16>

0800a168 <_free_r>:
 800a168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a16a:	2900      	cmp	r1, #0
 800a16c:	d044      	beq.n	800a1f8 <_free_r+0x90>
 800a16e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a172:	9001      	str	r0, [sp, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	f1a1 0404 	sub.w	r4, r1, #4
 800a17a:	bfb8      	it	lt
 800a17c:	18e4      	addlt	r4, r4, r3
 800a17e:	f000 fa9b 	bl	800a6b8 <__malloc_lock>
 800a182:	4a1e      	ldr	r2, [pc, #120]	; (800a1fc <_free_r+0x94>)
 800a184:	9801      	ldr	r0, [sp, #4]
 800a186:	6813      	ldr	r3, [r2, #0]
 800a188:	b933      	cbnz	r3, 800a198 <_free_r+0x30>
 800a18a:	6063      	str	r3, [r4, #4]
 800a18c:	6014      	str	r4, [r2, #0]
 800a18e:	b003      	add	sp, #12
 800a190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a194:	f000 ba96 	b.w	800a6c4 <__malloc_unlock>
 800a198:	42a3      	cmp	r3, r4
 800a19a:	d908      	bls.n	800a1ae <_free_r+0x46>
 800a19c:	6825      	ldr	r5, [r4, #0]
 800a19e:	1961      	adds	r1, r4, r5
 800a1a0:	428b      	cmp	r3, r1
 800a1a2:	bf01      	itttt	eq
 800a1a4:	6819      	ldreq	r1, [r3, #0]
 800a1a6:	685b      	ldreq	r3, [r3, #4]
 800a1a8:	1949      	addeq	r1, r1, r5
 800a1aa:	6021      	streq	r1, [r4, #0]
 800a1ac:	e7ed      	b.n	800a18a <_free_r+0x22>
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	b10b      	cbz	r3, 800a1b8 <_free_r+0x50>
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	d9fa      	bls.n	800a1ae <_free_r+0x46>
 800a1b8:	6811      	ldr	r1, [r2, #0]
 800a1ba:	1855      	adds	r5, r2, r1
 800a1bc:	42a5      	cmp	r5, r4
 800a1be:	d10b      	bne.n	800a1d8 <_free_r+0x70>
 800a1c0:	6824      	ldr	r4, [r4, #0]
 800a1c2:	4421      	add	r1, r4
 800a1c4:	1854      	adds	r4, r2, r1
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	6011      	str	r1, [r2, #0]
 800a1ca:	d1e0      	bne.n	800a18e <_free_r+0x26>
 800a1cc:	681c      	ldr	r4, [r3, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	6053      	str	r3, [r2, #4]
 800a1d2:	4421      	add	r1, r4
 800a1d4:	6011      	str	r1, [r2, #0]
 800a1d6:	e7da      	b.n	800a18e <_free_r+0x26>
 800a1d8:	d902      	bls.n	800a1e0 <_free_r+0x78>
 800a1da:	230c      	movs	r3, #12
 800a1dc:	6003      	str	r3, [r0, #0]
 800a1de:	e7d6      	b.n	800a18e <_free_r+0x26>
 800a1e0:	6825      	ldr	r5, [r4, #0]
 800a1e2:	1961      	adds	r1, r4, r5
 800a1e4:	428b      	cmp	r3, r1
 800a1e6:	bf04      	itt	eq
 800a1e8:	6819      	ldreq	r1, [r3, #0]
 800a1ea:	685b      	ldreq	r3, [r3, #4]
 800a1ec:	6063      	str	r3, [r4, #4]
 800a1ee:	bf04      	itt	eq
 800a1f0:	1949      	addeq	r1, r1, r5
 800a1f2:	6021      	streq	r1, [r4, #0]
 800a1f4:	6054      	str	r4, [r2, #4]
 800a1f6:	e7ca      	b.n	800a18e <_free_r+0x26>
 800a1f8:	b003      	add	sp, #12
 800a1fa:	bd30      	pop	{r4, r5, pc}
 800a1fc:	200007f4 	.word	0x200007f4

0800a200 <sbrk_aligned>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	4e0e      	ldr	r6, [pc, #56]	; (800a23c <sbrk_aligned+0x3c>)
 800a204:	460c      	mov	r4, r1
 800a206:	6831      	ldr	r1, [r6, #0]
 800a208:	4605      	mov	r5, r0
 800a20a:	b911      	cbnz	r1, 800a212 <sbrk_aligned+0x12>
 800a20c:	f000 f9e8 	bl	800a5e0 <_sbrk_r>
 800a210:	6030      	str	r0, [r6, #0]
 800a212:	4621      	mov	r1, r4
 800a214:	4628      	mov	r0, r5
 800a216:	f000 f9e3 	bl	800a5e0 <_sbrk_r>
 800a21a:	1c43      	adds	r3, r0, #1
 800a21c:	d00a      	beq.n	800a234 <sbrk_aligned+0x34>
 800a21e:	1cc4      	adds	r4, r0, #3
 800a220:	f024 0403 	bic.w	r4, r4, #3
 800a224:	42a0      	cmp	r0, r4
 800a226:	d007      	beq.n	800a238 <sbrk_aligned+0x38>
 800a228:	1a21      	subs	r1, r4, r0
 800a22a:	4628      	mov	r0, r5
 800a22c:	f000 f9d8 	bl	800a5e0 <_sbrk_r>
 800a230:	3001      	adds	r0, #1
 800a232:	d101      	bne.n	800a238 <sbrk_aligned+0x38>
 800a234:	f04f 34ff 	mov.w	r4, #4294967295
 800a238:	4620      	mov	r0, r4
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	200007f8 	.word	0x200007f8

0800a240 <_malloc_r>:
 800a240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a244:	1ccd      	adds	r5, r1, #3
 800a246:	f025 0503 	bic.w	r5, r5, #3
 800a24a:	3508      	adds	r5, #8
 800a24c:	2d0c      	cmp	r5, #12
 800a24e:	bf38      	it	cc
 800a250:	250c      	movcc	r5, #12
 800a252:	2d00      	cmp	r5, #0
 800a254:	4607      	mov	r7, r0
 800a256:	db01      	blt.n	800a25c <_malloc_r+0x1c>
 800a258:	42a9      	cmp	r1, r5
 800a25a:	d905      	bls.n	800a268 <_malloc_r+0x28>
 800a25c:	230c      	movs	r3, #12
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	2600      	movs	r6, #0
 800a262:	4630      	mov	r0, r6
 800a264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a268:	4e2e      	ldr	r6, [pc, #184]	; (800a324 <_malloc_r+0xe4>)
 800a26a:	f000 fa25 	bl	800a6b8 <__malloc_lock>
 800a26e:	6833      	ldr	r3, [r6, #0]
 800a270:	461c      	mov	r4, r3
 800a272:	bb34      	cbnz	r4, 800a2c2 <_malloc_r+0x82>
 800a274:	4629      	mov	r1, r5
 800a276:	4638      	mov	r0, r7
 800a278:	f7ff ffc2 	bl	800a200 <sbrk_aligned>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	4604      	mov	r4, r0
 800a280:	d14d      	bne.n	800a31e <_malloc_r+0xde>
 800a282:	6834      	ldr	r4, [r6, #0]
 800a284:	4626      	mov	r6, r4
 800a286:	2e00      	cmp	r6, #0
 800a288:	d140      	bne.n	800a30c <_malloc_r+0xcc>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	4631      	mov	r1, r6
 800a28e:	4638      	mov	r0, r7
 800a290:	eb04 0803 	add.w	r8, r4, r3
 800a294:	f000 f9a4 	bl	800a5e0 <_sbrk_r>
 800a298:	4580      	cmp	r8, r0
 800a29a:	d13a      	bne.n	800a312 <_malloc_r+0xd2>
 800a29c:	6821      	ldr	r1, [r4, #0]
 800a29e:	3503      	adds	r5, #3
 800a2a0:	1a6d      	subs	r5, r5, r1
 800a2a2:	f025 0503 	bic.w	r5, r5, #3
 800a2a6:	3508      	adds	r5, #8
 800a2a8:	2d0c      	cmp	r5, #12
 800a2aa:	bf38      	it	cc
 800a2ac:	250c      	movcc	r5, #12
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f7ff ffa5 	bl	800a200 <sbrk_aligned>
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	d02b      	beq.n	800a312 <_malloc_r+0xd2>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	442b      	add	r3, r5
 800a2be:	6023      	str	r3, [r4, #0]
 800a2c0:	e00e      	b.n	800a2e0 <_malloc_r+0xa0>
 800a2c2:	6822      	ldr	r2, [r4, #0]
 800a2c4:	1b52      	subs	r2, r2, r5
 800a2c6:	d41e      	bmi.n	800a306 <_malloc_r+0xc6>
 800a2c8:	2a0b      	cmp	r2, #11
 800a2ca:	d916      	bls.n	800a2fa <_malloc_r+0xba>
 800a2cc:	1961      	adds	r1, r4, r5
 800a2ce:	42a3      	cmp	r3, r4
 800a2d0:	6025      	str	r5, [r4, #0]
 800a2d2:	bf18      	it	ne
 800a2d4:	6059      	strne	r1, [r3, #4]
 800a2d6:	6863      	ldr	r3, [r4, #4]
 800a2d8:	bf08      	it	eq
 800a2da:	6031      	streq	r1, [r6, #0]
 800a2dc:	5162      	str	r2, [r4, r5]
 800a2de:	604b      	str	r3, [r1, #4]
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	f104 060b 	add.w	r6, r4, #11
 800a2e6:	f000 f9ed 	bl	800a6c4 <__malloc_unlock>
 800a2ea:	f026 0607 	bic.w	r6, r6, #7
 800a2ee:	1d23      	adds	r3, r4, #4
 800a2f0:	1af2      	subs	r2, r6, r3
 800a2f2:	d0b6      	beq.n	800a262 <_malloc_r+0x22>
 800a2f4:	1b9b      	subs	r3, r3, r6
 800a2f6:	50a3      	str	r3, [r4, r2]
 800a2f8:	e7b3      	b.n	800a262 <_malloc_r+0x22>
 800a2fa:	6862      	ldr	r2, [r4, #4]
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	bf0c      	ite	eq
 800a300:	6032      	streq	r2, [r6, #0]
 800a302:	605a      	strne	r2, [r3, #4]
 800a304:	e7ec      	b.n	800a2e0 <_malloc_r+0xa0>
 800a306:	4623      	mov	r3, r4
 800a308:	6864      	ldr	r4, [r4, #4]
 800a30a:	e7b2      	b.n	800a272 <_malloc_r+0x32>
 800a30c:	4634      	mov	r4, r6
 800a30e:	6876      	ldr	r6, [r6, #4]
 800a310:	e7b9      	b.n	800a286 <_malloc_r+0x46>
 800a312:	230c      	movs	r3, #12
 800a314:	603b      	str	r3, [r7, #0]
 800a316:	4638      	mov	r0, r7
 800a318:	f000 f9d4 	bl	800a6c4 <__malloc_unlock>
 800a31c:	e7a1      	b.n	800a262 <_malloc_r+0x22>
 800a31e:	6025      	str	r5, [r4, #0]
 800a320:	e7de      	b.n	800a2e0 <_malloc_r+0xa0>
 800a322:	bf00      	nop
 800a324:	200007f4 	.word	0x200007f4

0800a328 <__ssputs_r>:
 800a328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a32c:	688e      	ldr	r6, [r1, #8]
 800a32e:	429e      	cmp	r6, r3
 800a330:	4682      	mov	sl, r0
 800a332:	460c      	mov	r4, r1
 800a334:	4690      	mov	r8, r2
 800a336:	461f      	mov	r7, r3
 800a338:	d838      	bhi.n	800a3ac <__ssputs_r+0x84>
 800a33a:	898a      	ldrh	r2, [r1, #12]
 800a33c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a340:	d032      	beq.n	800a3a8 <__ssputs_r+0x80>
 800a342:	6825      	ldr	r5, [r4, #0]
 800a344:	6909      	ldr	r1, [r1, #16]
 800a346:	eba5 0901 	sub.w	r9, r5, r1
 800a34a:	6965      	ldr	r5, [r4, #20]
 800a34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a354:	3301      	adds	r3, #1
 800a356:	444b      	add	r3, r9
 800a358:	106d      	asrs	r5, r5, #1
 800a35a:	429d      	cmp	r5, r3
 800a35c:	bf38      	it	cc
 800a35e:	461d      	movcc	r5, r3
 800a360:	0553      	lsls	r3, r2, #21
 800a362:	d531      	bpl.n	800a3c8 <__ssputs_r+0xa0>
 800a364:	4629      	mov	r1, r5
 800a366:	f7ff ff6b 	bl	800a240 <_malloc_r>
 800a36a:	4606      	mov	r6, r0
 800a36c:	b950      	cbnz	r0, 800a384 <__ssputs_r+0x5c>
 800a36e:	230c      	movs	r3, #12
 800a370:	f8ca 3000 	str.w	r3, [sl]
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37a:	81a3      	strh	r3, [r4, #12]
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295
 800a380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a384:	6921      	ldr	r1, [r4, #16]
 800a386:	464a      	mov	r2, r9
 800a388:	f7fe f81a 	bl	80083c0 <memcpy>
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	6126      	str	r6, [r4, #16]
 800a39a:	6165      	str	r5, [r4, #20]
 800a39c:	444e      	add	r6, r9
 800a39e:	eba5 0509 	sub.w	r5, r5, r9
 800a3a2:	6026      	str	r6, [r4, #0]
 800a3a4:	60a5      	str	r5, [r4, #8]
 800a3a6:	463e      	mov	r6, r7
 800a3a8:	42be      	cmp	r6, r7
 800a3aa:	d900      	bls.n	800a3ae <__ssputs_r+0x86>
 800a3ac:	463e      	mov	r6, r7
 800a3ae:	6820      	ldr	r0, [r4, #0]
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	4641      	mov	r1, r8
 800a3b4:	f000 f966 	bl	800a684 <memmove>
 800a3b8:	68a3      	ldr	r3, [r4, #8]
 800a3ba:	1b9b      	subs	r3, r3, r6
 800a3bc:	60a3      	str	r3, [r4, #8]
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	4433      	add	r3, r6
 800a3c2:	6023      	str	r3, [r4, #0]
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	e7db      	b.n	800a380 <__ssputs_r+0x58>
 800a3c8:	462a      	mov	r2, r5
 800a3ca:	f000 f981 	bl	800a6d0 <_realloc_r>
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d1e1      	bne.n	800a398 <__ssputs_r+0x70>
 800a3d4:	6921      	ldr	r1, [r4, #16]
 800a3d6:	4650      	mov	r0, sl
 800a3d8:	f7ff fec6 	bl	800a168 <_free_r>
 800a3dc:	e7c7      	b.n	800a36e <__ssputs_r+0x46>
	...

0800a3e0 <_svfiprintf_r>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	4698      	mov	r8, r3
 800a3e6:	898b      	ldrh	r3, [r1, #12]
 800a3e8:	061b      	lsls	r3, r3, #24
 800a3ea:	b09d      	sub	sp, #116	; 0x74
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	4614      	mov	r4, r2
 800a3f2:	d50e      	bpl.n	800a412 <_svfiprintf_r+0x32>
 800a3f4:	690b      	ldr	r3, [r1, #16]
 800a3f6:	b963      	cbnz	r3, 800a412 <_svfiprintf_r+0x32>
 800a3f8:	2140      	movs	r1, #64	; 0x40
 800a3fa:	f7ff ff21 	bl	800a240 <_malloc_r>
 800a3fe:	6028      	str	r0, [r5, #0]
 800a400:	6128      	str	r0, [r5, #16]
 800a402:	b920      	cbnz	r0, 800a40e <_svfiprintf_r+0x2e>
 800a404:	230c      	movs	r3, #12
 800a406:	603b      	str	r3, [r7, #0]
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
 800a40c:	e0d1      	b.n	800a5b2 <_svfiprintf_r+0x1d2>
 800a40e:	2340      	movs	r3, #64	; 0x40
 800a410:	616b      	str	r3, [r5, #20]
 800a412:	2300      	movs	r3, #0
 800a414:	9309      	str	r3, [sp, #36]	; 0x24
 800a416:	2320      	movs	r3, #32
 800a418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a41c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a420:	2330      	movs	r3, #48	; 0x30
 800a422:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5cc <_svfiprintf_r+0x1ec>
 800a426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a42a:	f04f 0901 	mov.w	r9, #1
 800a42e:	4623      	mov	r3, r4
 800a430:	469a      	mov	sl, r3
 800a432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a436:	b10a      	cbz	r2, 800a43c <_svfiprintf_r+0x5c>
 800a438:	2a25      	cmp	r2, #37	; 0x25
 800a43a:	d1f9      	bne.n	800a430 <_svfiprintf_r+0x50>
 800a43c:	ebba 0b04 	subs.w	fp, sl, r4
 800a440:	d00b      	beq.n	800a45a <_svfiprintf_r+0x7a>
 800a442:	465b      	mov	r3, fp
 800a444:	4622      	mov	r2, r4
 800a446:	4629      	mov	r1, r5
 800a448:	4638      	mov	r0, r7
 800a44a:	f7ff ff6d 	bl	800a328 <__ssputs_r>
 800a44e:	3001      	adds	r0, #1
 800a450:	f000 80aa 	beq.w	800a5a8 <_svfiprintf_r+0x1c8>
 800a454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a456:	445a      	add	r2, fp
 800a458:	9209      	str	r2, [sp, #36]	; 0x24
 800a45a:	f89a 3000 	ldrb.w	r3, [sl]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 80a2 	beq.w	800a5a8 <_svfiprintf_r+0x1c8>
 800a464:	2300      	movs	r3, #0
 800a466:	f04f 32ff 	mov.w	r2, #4294967295
 800a46a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a46e:	f10a 0a01 	add.w	sl, sl, #1
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	9307      	str	r3, [sp, #28]
 800a476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a47a:	931a      	str	r3, [sp, #104]	; 0x68
 800a47c:	4654      	mov	r4, sl
 800a47e:	2205      	movs	r2, #5
 800a480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a484:	4851      	ldr	r0, [pc, #324]	; (800a5cc <_svfiprintf_r+0x1ec>)
 800a486:	f7f5 feab 	bl	80001e0 <memchr>
 800a48a:	9a04      	ldr	r2, [sp, #16]
 800a48c:	b9d8      	cbnz	r0, 800a4c6 <_svfiprintf_r+0xe6>
 800a48e:	06d0      	lsls	r0, r2, #27
 800a490:	bf44      	itt	mi
 800a492:	2320      	movmi	r3, #32
 800a494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a498:	0711      	lsls	r1, r2, #28
 800a49a:	bf44      	itt	mi
 800a49c:	232b      	movmi	r3, #43	; 0x2b
 800a49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a8:	d015      	beq.n	800a4d6 <_svfiprintf_r+0xf6>
 800a4aa:	9a07      	ldr	r2, [sp, #28]
 800a4ac:	4654      	mov	r4, sl
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	f04f 0c0a 	mov.w	ip, #10
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4ba:	3b30      	subs	r3, #48	; 0x30
 800a4bc:	2b09      	cmp	r3, #9
 800a4be:	d94e      	bls.n	800a55e <_svfiprintf_r+0x17e>
 800a4c0:	b1b0      	cbz	r0, 800a4f0 <_svfiprintf_r+0x110>
 800a4c2:	9207      	str	r2, [sp, #28]
 800a4c4:	e014      	b.n	800a4f0 <_svfiprintf_r+0x110>
 800a4c6:	eba0 0308 	sub.w	r3, r0, r8
 800a4ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	9304      	str	r3, [sp, #16]
 800a4d2:	46a2      	mov	sl, r4
 800a4d4:	e7d2      	b.n	800a47c <_svfiprintf_r+0x9c>
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	1d19      	adds	r1, r3, #4
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	9103      	str	r1, [sp, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	bfbb      	ittet	lt
 800a4e2:	425b      	neglt	r3, r3
 800a4e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a4e8:	9307      	strge	r3, [sp, #28]
 800a4ea:	9307      	strlt	r3, [sp, #28]
 800a4ec:	bfb8      	it	lt
 800a4ee:	9204      	strlt	r2, [sp, #16]
 800a4f0:	7823      	ldrb	r3, [r4, #0]
 800a4f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a4f4:	d10c      	bne.n	800a510 <_svfiprintf_r+0x130>
 800a4f6:	7863      	ldrb	r3, [r4, #1]
 800a4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4fa:	d135      	bne.n	800a568 <_svfiprintf_r+0x188>
 800a4fc:	9b03      	ldr	r3, [sp, #12]
 800a4fe:	1d1a      	adds	r2, r3, #4
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	9203      	str	r2, [sp, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	bfb8      	it	lt
 800a508:	f04f 33ff 	movlt.w	r3, #4294967295
 800a50c:	3402      	adds	r4, #2
 800a50e:	9305      	str	r3, [sp, #20]
 800a510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5dc <_svfiprintf_r+0x1fc>
 800a514:	7821      	ldrb	r1, [r4, #0]
 800a516:	2203      	movs	r2, #3
 800a518:	4650      	mov	r0, sl
 800a51a:	f7f5 fe61 	bl	80001e0 <memchr>
 800a51e:	b140      	cbz	r0, 800a532 <_svfiprintf_r+0x152>
 800a520:	2340      	movs	r3, #64	; 0x40
 800a522:	eba0 000a 	sub.w	r0, r0, sl
 800a526:	fa03 f000 	lsl.w	r0, r3, r0
 800a52a:	9b04      	ldr	r3, [sp, #16]
 800a52c:	4303      	orrs	r3, r0
 800a52e:	3401      	adds	r4, #1
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a536:	4826      	ldr	r0, [pc, #152]	; (800a5d0 <_svfiprintf_r+0x1f0>)
 800a538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a53c:	2206      	movs	r2, #6
 800a53e:	f7f5 fe4f 	bl	80001e0 <memchr>
 800a542:	2800      	cmp	r0, #0
 800a544:	d038      	beq.n	800a5b8 <_svfiprintf_r+0x1d8>
 800a546:	4b23      	ldr	r3, [pc, #140]	; (800a5d4 <_svfiprintf_r+0x1f4>)
 800a548:	bb1b      	cbnz	r3, 800a592 <_svfiprintf_r+0x1b2>
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	3307      	adds	r3, #7
 800a54e:	f023 0307 	bic.w	r3, r3, #7
 800a552:	3308      	adds	r3, #8
 800a554:	9303      	str	r3, [sp, #12]
 800a556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a558:	4433      	add	r3, r6
 800a55a:	9309      	str	r3, [sp, #36]	; 0x24
 800a55c:	e767      	b.n	800a42e <_svfiprintf_r+0x4e>
 800a55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a562:	460c      	mov	r4, r1
 800a564:	2001      	movs	r0, #1
 800a566:	e7a5      	b.n	800a4b4 <_svfiprintf_r+0xd4>
 800a568:	2300      	movs	r3, #0
 800a56a:	3401      	adds	r4, #1
 800a56c:	9305      	str	r3, [sp, #20]
 800a56e:	4619      	mov	r1, r3
 800a570:	f04f 0c0a 	mov.w	ip, #10
 800a574:	4620      	mov	r0, r4
 800a576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a57a:	3a30      	subs	r2, #48	; 0x30
 800a57c:	2a09      	cmp	r2, #9
 800a57e:	d903      	bls.n	800a588 <_svfiprintf_r+0x1a8>
 800a580:	2b00      	cmp	r3, #0
 800a582:	d0c5      	beq.n	800a510 <_svfiprintf_r+0x130>
 800a584:	9105      	str	r1, [sp, #20]
 800a586:	e7c3      	b.n	800a510 <_svfiprintf_r+0x130>
 800a588:	fb0c 2101 	mla	r1, ip, r1, r2
 800a58c:	4604      	mov	r4, r0
 800a58e:	2301      	movs	r3, #1
 800a590:	e7f0      	b.n	800a574 <_svfiprintf_r+0x194>
 800a592:	ab03      	add	r3, sp, #12
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	462a      	mov	r2, r5
 800a598:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <_svfiprintf_r+0x1f8>)
 800a59a:	a904      	add	r1, sp, #16
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7fd ffc5 	bl	800852c <_printf_float>
 800a5a2:	1c42      	adds	r2, r0, #1
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	d1d6      	bne.n	800a556 <_svfiprintf_r+0x176>
 800a5a8:	89ab      	ldrh	r3, [r5, #12]
 800a5aa:	065b      	lsls	r3, r3, #25
 800a5ac:	f53f af2c 	bmi.w	800a408 <_svfiprintf_r+0x28>
 800a5b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5b2:	b01d      	add	sp, #116	; 0x74
 800a5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b8:	ab03      	add	r3, sp, #12
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	462a      	mov	r2, r5
 800a5be:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <_svfiprintf_r+0x1f8>)
 800a5c0:	a904      	add	r1, sp, #16
 800a5c2:	4638      	mov	r0, r7
 800a5c4:	f7fe fa56 	bl	8008a74 <_printf_i>
 800a5c8:	e7eb      	b.n	800a5a2 <_svfiprintf_r+0x1c2>
 800a5ca:	bf00      	nop
 800a5cc:	0800d014 	.word	0x0800d014
 800a5d0:	0800d01e 	.word	0x0800d01e
 800a5d4:	0800852d 	.word	0x0800852d
 800a5d8:	0800a329 	.word	0x0800a329
 800a5dc:	0800d01a 	.word	0x0800d01a

0800a5e0 <_sbrk_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4d06      	ldr	r5, [pc, #24]	; (800a5fc <_sbrk_r+0x1c>)
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	602b      	str	r3, [r5, #0]
 800a5ec:	f7f8 f948 	bl	8002880 <_sbrk>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d102      	bne.n	800a5fa <_sbrk_r+0x1a>
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	b103      	cbz	r3, 800a5fa <_sbrk_r+0x1a>
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	bd38      	pop	{r3, r4, r5, pc}
 800a5fc:	200007fc 	.word	0x200007fc

0800a600 <__assert_func>:
 800a600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a602:	4614      	mov	r4, r2
 800a604:	461a      	mov	r2, r3
 800a606:	4b09      	ldr	r3, [pc, #36]	; (800a62c <__assert_func+0x2c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4605      	mov	r5, r0
 800a60c:	68d8      	ldr	r0, [r3, #12]
 800a60e:	b14c      	cbz	r4, 800a624 <__assert_func+0x24>
 800a610:	4b07      	ldr	r3, [pc, #28]	; (800a630 <__assert_func+0x30>)
 800a612:	9100      	str	r1, [sp, #0]
 800a614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a618:	4906      	ldr	r1, [pc, #24]	; (800a634 <__assert_func+0x34>)
 800a61a:	462b      	mov	r3, r5
 800a61c:	f000 f80e 	bl	800a63c <fiprintf>
 800a620:	f000 faac 	bl	800ab7c <abort>
 800a624:	4b04      	ldr	r3, [pc, #16]	; (800a638 <__assert_func+0x38>)
 800a626:	461c      	mov	r4, r3
 800a628:	e7f3      	b.n	800a612 <__assert_func+0x12>
 800a62a:	bf00      	nop
 800a62c:	2000001c 	.word	0x2000001c
 800a630:	0800d025 	.word	0x0800d025
 800a634:	0800d032 	.word	0x0800d032
 800a638:	0800d060 	.word	0x0800d060

0800a63c <fiprintf>:
 800a63c:	b40e      	push	{r1, r2, r3}
 800a63e:	b503      	push	{r0, r1, lr}
 800a640:	4601      	mov	r1, r0
 800a642:	ab03      	add	r3, sp, #12
 800a644:	4805      	ldr	r0, [pc, #20]	; (800a65c <fiprintf+0x20>)
 800a646:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64a:	6800      	ldr	r0, [r0, #0]
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	f000 f897 	bl	800a780 <_vfiprintf_r>
 800a652:	b002      	add	sp, #8
 800a654:	f85d eb04 	ldr.w	lr, [sp], #4
 800a658:	b003      	add	sp, #12
 800a65a:	4770      	bx	lr
 800a65c:	2000001c 	.word	0x2000001c

0800a660 <__ascii_mbtowc>:
 800a660:	b082      	sub	sp, #8
 800a662:	b901      	cbnz	r1, 800a666 <__ascii_mbtowc+0x6>
 800a664:	a901      	add	r1, sp, #4
 800a666:	b142      	cbz	r2, 800a67a <__ascii_mbtowc+0x1a>
 800a668:	b14b      	cbz	r3, 800a67e <__ascii_mbtowc+0x1e>
 800a66a:	7813      	ldrb	r3, [r2, #0]
 800a66c:	600b      	str	r3, [r1, #0]
 800a66e:	7812      	ldrb	r2, [r2, #0]
 800a670:	1e10      	subs	r0, r2, #0
 800a672:	bf18      	it	ne
 800a674:	2001      	movne	r0, #1
 800a676:	b002      	add	sp, #8
 800a678:	4770      	bx	lr
 800a67a:	4610      	mov	r0, r2
 800a67c:	e7fb      	b.n	800a676 <__ascii_mbtowc+0x16>
 800a67e:	f06f 0001 	mvn.w	r0, #1
 800a682:	e7f8      	b.n	800a676 <__ascii_mbtowc+0x16>

0800a684 <memmove>:
 800a684:	4288      	cmp	r0, r1
 800a686:	b510      	push	{r4, lr}
 800a688:	eb01 0402 	add.w	r4, r1, r2
 800a68c:	d902      	bls.n	800a694 <memmove+0x10>
 800a68e:	4284      	cmp	r4, r0
 800a690:	4623      	mov	r3, r4
 800a692:	d807      	bhi.n	800a6a4 <memmove+0x20>
 800a694:	1e43      	subs	r3, r0, #1
 800a696:	42a1      	cmp	r1, r4
 800a698:	d008      	beq.n	800a6ac <memmove+0x28>
 800a69a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a69e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6a2:	e7f8      	b.n	800a696 <memmove+0x12>
 800a6a4:	4402      	add	r2, r0
 800a6a6:	4601      	mov	r1, r0
 800a6a8:	428a      	cmp	r2, r1
 800a6aa:	d100      	bne.n	800a6ae <memmove+0x2a>
 800a6ac:	bd10      	pop	{r4, pc}
 800a6ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6b6:	e7f7      	b.n	800a6a8 <memmove+0x24>

0800a6b8 <__malloc_lock>:
 800a6b8:	4801      	ldr	r0, [pc, #4]	; (800a6c0 <__malloc_lock+0x8>)
 800a6ba:	f000 bc1f 	b.w	800aefc <__retarget_lock_acquire_recursive>
 800a6be:	bf00      	nop
 800a6c0:	20000800 	.word	0x20000800

0800a6c4 <__malloc_unlock>:
 800a6c4:	4801      	ldr	r0, [pc, #4]	; (800a6cc <__malloc_unlock+0x8>)
 800a6c6:	f000 bc1a 	b.w	800aefe <__retarget_lock_release_recursive>
 800a6ca:	bf00      	nop
 800a6cc:	20000800 	.word	0x20000800

0800a6d0 <_realloc_r>:
 800a6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d4:	4680      	mov	r8, r0
 800a6d6:	4614      	mov	r4, r2
 800a6d8:	460e      	mov	r6, r1
 800a6da:	b921      	cbnz	r1, 800a6e6 <_realloc_r+0x16>
 800a6dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	f7ff bdad 	b.w	800a240 <_malloc_r>
 800a6e6:	b92a      	cbnz	r2, 800a6f4 <_realloc_r+0x24>
 800a6e8:	f7ff fd3e 	bl	800a168 <_free_r>
 800a6ec:	4625      	mov	r5, r4
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f4:	f000 fc6a 	bl	800afcc <_malloc_usable_size_r>
 800a6f8:	4284      	cmp	r4, r0
 800a6fa:	4607      	mov	r7, r0
 800a6fc:	d802      	bhi.n	800a704 <_realloc_r+0x34>
 800a6fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a702:	d812      	bhi.n	800a72a <_realloc_r+0x5a>
 800a704:	4621      	mov	r1, r4
 800a706:	4640      	mov	r0, r8
 800a708:	f7ff fd9a 	bl	800a240 <_malloc_r>
 800a70c:	4605      	mov	r5, r0
 800a70e:	2800      	cmp	r0, #0
 800a710:	d0ed      	beq.n	800a6ee <_realloc_r+0x1e>
 800a712:	42bc      	cmp	r4, r7
 800a714:	4622      	mov	r2, r4
 800a716:	4631      	mov	r1, r6
 800a718:	bf28      	it	cs
 800a71a:	463a      	movcs	r2, r7
 800a71c:	f7fd fe50 	bl	80083c0 <memcpy>
 800a720:	4631      	mov	r1, r6
 800a722:	4640      	mov	r0, r8
 800a724:	f7ff fd20 	bl	800a168 <_free_r>
 800a728:	e7e1      	b.n	800a6ee <_realloc_r+0x1e>
 800a72a:	4635      	mov	r5, r6
 800a72c:	e7df      	b.n	800a6ee <_realloc_r+0x1e>

0800a72e <__sfputc_r>:
 800a72e:	6893      	ldr	r3, [r2, #8]
 800a730:	3b01      	subs	r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	b410      	push	{r4}
 800a736:	6093      	str	r3, [r2, #8]
 800a738:	da08      	bge.n	800a74c <__sfputc_r+0x1e>
 800a73a:	6994      	ldr	r4, [r2, #24]
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	db01      	blt.n	800a744 <__sfputc_r+0x16>
 800a740:	290a      	cmp	r1, #10
 800a742:	d103      	bne.n	800a74c <__sfputc_r+0x1e>
 800a744:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a748:	f000 b94a 	b.w	800a9e0 <__swbuf_r>
 800a74c:	6813      	ldr	r3, [r2, #0]
 800a74e:	1c58      	adds	r0, r3, #1
 800a750:	6010      	str	r0, [r2, #0]
 800a752:	7019      	strb	r1, [r3, #0]
 800a754:	4608      	mov	r0, r1
 800a756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <__sfputs_r>:
 800a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75e:	4606      	mov	r6, r0
 800a760:	460f      	mov	r7, r1
 800a762:	4614      	mov	r4, r2
 800a764:	18d5      	adds	r5, r2, r3
 800a766:	42ac      	cmp	r4, r5
 800a768:	d101      	bne.n	800a76e <__sfputs_r+0x12>
 800a76a:	2000      	movs	r0, #0
 800a76c:	e007      	b.n	800a77e <__sfputs_r+0x22>
 800a76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a772:	463a      	mov	r2, r7
 800a774:	4630      	mov	r0, r6
 800a776:	f7ff ffda 	bl	800a72e <__sfputc_r>
 800a77a:	1c43      	adds	r3, r0, #1
 800a77c:	d1f3      	bne.n	800a766 <__sfputs_r+0xa>
 800a77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a780 <_vfiprintf_r>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	460d      	mov	r5, r1
 800a786:	b09d      	sub	sp, #116	; 0x74
 800a788:	4614      	mov	r4, r2
 800a78a:	4698      	mov	r8, r3
 800a78c:	4606      	mov	r6, r0
 800a78e:	b118      	cbz	r0, 800a798 <_vfiprintf_r+0x18>
 800a790:	6983      	ldr	r3, [r0, #24]
 800a792:	b90b      	cbnz	r3, 800a798 <_vfiprintf_r+0x18>
 800a794:	f000 fb14 	bl	800adc0 <__sinit>
 800a798:	4b89      	ldr	r3, [pc, #548]	; (800a9c0 <_vfiprintf_r+0x240>)
 800a79a:	429d      	cmp	r5, r3
 800a79c:	d11b      	bne.n	800a7d6 <_vfiprintf_r+0x56>
 800a79e:	6875      	ldr	r5, [r6, #4]
 800a7a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7a2:	07d9      	lsls	r1, r3, #31
 800a7a4:	d405      	bmi.n	800a7b2 <_vfiprintf_r+0x32>
 800a7a6:	89ab      	ldrh	r3, [r5, #12]
 800a7a8:	059a      	lsls	r2, r3, #22
 800a7aa:	d402      	bmi.n	800a7b2 <_vfiprintf_r+0x32>
 800a7ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7ae:	f000 fba5 	bl	800aefc <__retarget_lock_acquire_recursive>
 800a7b2:	89ab      	ldrh	r3, [r5, #12]
 800a7b4:	071b      	lsls	r3, r3, #28
 800a7b6:	d501      	bpl.n	800a7bc <_vfiprintf_r+0x3c>
 800a7b8:	692b      	ldr	r3, [r5, #16]
 800a7ba:	b9eb      	cbnz	r3, 800a7f8 <_vfiprintf_r+0x78>
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f000 f96e 	bl	800aaa0 <__swsetup_r>
 800a7c4:	b1c0      	cbz	r0, 800a7f8 <_vfiprintf_r+0x78>
 800a7c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7c8:	07dc      	lsls	r4, r3, #31
 800a7ca:	d50e      	bpl.n	800a7ea <_vfiprintf_r+0x6a>
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d0:	b01d      	add	sp, #116	; 0x74
 800a7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d6:	4b7b      	ldr	r3, [pc, #492]	; (800a9c4 <_vfiprintf_r+0x244>)
 800a7d8:	429d      	cmp	r5, r3
 800a7da:	d101      	bne.n	800a7e0 <_vfiprintf_r+0x60>
 800a7dc:	68b5      	ldr	r5, [r6, #8]
 800a7de:	e7df      	b.n	800a7a0 <_vfiprintf_r+0x20>
 800a7e0:	4b79      	ldr	r3, [pc, #484]	; (800a9c8 <_vfiprintf_r+0x248>)
 800a7e2:	429d      	cmp	r5, r3
 800a7e4:	bf08      	it	eq
 800a7e6:	68f5      	ldreq	r5, [r6, #12]
 800a7e8:	e7da      	b.n	800a7a0 <_vfiprintf_r+0x20>
 800a7ea:	89ab      	ldrh	r3, [r5, #12]
 800a7ec:	0598      	lsls	r0, r3, #22
 800a7ee:	d4ed      	bmi.n	800a7cc <_vfiprintf_r+0x4c>
 800a7f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f2:	f000 fb84 	bl	800aefe <__retarget_lock_release_recursive>
 800a7f6:	e7e9      	b.n	800a7cc <_vfiprintf_r+0x4c>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7fc:	2320      	movs	r3, #32
 800a7fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a802:	f8cd 800c 	str.w	r8, [sp, #12]
 800a806:	2330      	movs	r3, #48	; 0x30
 800a808:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a9cc <_vfiprintf_r+0x24c>
 800a80c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a810:	f04f 0901 	mov.w	r9, #1
 800a814:	4623      	mov	r3, r4
 800a816:	469a      	mov	sl, r3
 800a818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a81c:	b10a      	cbz	r2, 800a822 <_vfiprintf_r+0xa2>
 800a81e:	2a25      	cmp	r2, #37	; 0x25
 800a820:	d1f9      	bne.n	800a816 <_vfiprintf_r+0x96>
 800a822:	ebba 0b04 	subs.w	fp, sl, r4
 800a826:	d00b      	beq.n	800a840 <_vfiprintf_r+0xc0>
 800a828:	465b      	mov	r3, fp
 800a82a:	4622      	mov	r2, r4
 800a82c:	4629      	mov	r1, r5
 800a82e:	4630      	mov	r0, r6
 800a830:	f7ff ff94 	bl	800a75c <__sfputs_r>
 800a834:	3001      	adds	r0, #1
 800a836:	f000 80aa 	beq.w	800a98e <_vfiprintf_r+0x20e>
 800a83a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a83c:	445a      	add	r2, fp
 800a83e:	9209      	str	r2, [sp, #36]	; 0x24
 800a840:	f89a 3000 	ldrb.w	r3, [sl]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 80a2 	beq.w	800a98e <_vfiprintf_r+0x20e>
 800a84a:	2300      	movs	r3, #0
 800a84c:	f04f 32ff 	mov.w	r2, #4294967295
 800a850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a854:	f10a 0a01 	add.w	sl, sl, #1
 800a858:	9304      	str	r3, [sp, #16]
 800a85a:	9307      	str	r3, [sp, #28]
 800a85c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a860:	931a      	str	r3, [sp, #104]	; 0x68
 800a862:	4654      	mov	r4, sl
 800a864:	2205      	movs	r2, #5
 800a866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a86a:	4858      	ldr	r0, [pc, #352]	; (800a9cc <_vfiprintf_r+0x24c>)
 800a86c:	f7f5 fcb8 	bl	80001e0 <memchr>
 800a870:	9a04      	ldr	r2, [sp, #16]
 800a872:	b9d8      	cbnz	r0, 800a8ac <_vfiprintf_r+0x12c>
 800a874:	06d1      	lsls	r1, r2, #27
 800a876:	bf44      	itt	mi
 800a878:	2320      	movmi	r3, #32
 800a87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a87e:	0713      	lsls	r3, r2, #28
 800a880:	bf44      	itt	mi
 800a882:	232b      	movmi	r3, #43	; 0x2b
 800a884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a888:	f89a 3000 	ldrb.w	r3, [sl]
 800a88c:	2b2a      	cmp	r3, #42	; 0x2a
 800a88e:	d015      	beq.n	800a8bc <_vfiprintf_r+0x13c>
 800a890:	9a07      	ldr	r2, [sp, #28]
 800a892:	4654      	mov	r4, sl
 800a894:	2000      	movs	r0, #0
 800a896:	f04f 0c0a 	mov.w	ip, #10
 800a89a:	4621      	mov	r1, r4
 800a89c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8a0:	3b30      	subs	r3, #48	; 0x30
 800a8a2:	2b09      	cmp	r3, #9
 800a8a4:	d94e      	bls.n	800a944 <_vfiprintf_r+0x1c4>
 800a8a6:	b1b0      	cbz	r0, 800a8d6 <_vfiprintf_r+0x156>
 800a8a8:	9207      	str	r2, [sp, #28]
 800a8aa:	e014      	b.n	800a8d6 <_vfiprintf_r+0x156>
 800a8ac:	eba0 0308 	sub.w	r3, r0, r8
 800a8b0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	9304      	str	r3, [sp, #16]
 800a8b8:	46a2      	mov	sl, r4
 800a8ba:	e7d2      	b.n	800a862 <_vfiprintf_r+0xe2>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	1d19      	adds	r1, r3, #4
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	9103      	str	r1, [sp, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	bfbb      	ittet	lt
 800a8c8:	425b      	neglt	r3, r3
 800a8ca:	f042 0202 	orrlt.w	r2, r2, #2
 800a8ce:	9307      	strge	r3, [sp, #28]
 800a8d0:	9307      	strlt	r3, [sp, #28]
 800a8d2:	bfb8      	it	lt
 800a8d4:	9204      	strlt	r2, [sp, #16]
 800a8d6:	7823      	ldrb	r3, [r4, #0]
 800a8d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a8da:	d10c      	bne.n	800a8f6 <_vfiprintf_r+0x176>
 800a8dc:	7863      	ldrb	r3, [r4, #1]
 800a8de:	2b2a      	cmp	r3, #42	; 0x2a
 800a8e0:	d135      	bne.n	800a94e <_vfiprintf_r+0x1ce>
 800a8e2:	9b03      	ldr	r3, [sp, #12]
 800a8e4:	1d1a      	adds	r2, r3, #4
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	9203      	str	r2, [sp, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	bfb8      	it	lt
 800a8ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8f2:	3402      	adds	r4, #2
 800a8f4:	9305      	str	r3, [sp, #20]
 800a8f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a9dc <_vfiprintf_r+0x25c>
 800a8fa:	7821      	ldrb	r1, [r4, #0]
 800a8fc:	2203      	movs	r2, #3
 800a8fe:	4650      	mov	r0, sl
 800a900:	f7f5 fc6e 	bl	80001e0 <memchr>
 800a904:	b140      	cbz	r0, 800a918 <_vfiprintf_r+0x198>
 800a906:	2340      	movs	r3, #64	; 0x40
 800a908:	eba0 000a 	sub.w	r0, r0, sl
 800a90c:	fa03 f000 	lsl.w	r0, r3, r0
 800a910:	9b04      	ldr	r3, [sp, #16]
 800a912:	4303      	orrs	r3, r0
 800a914:	3401      	adds	r4, #1
 800a916:	9304      	str	r3, [sp, #16]
 800a918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a91c:	482c      	ldr	r0, [pc, #176]	; (800a9d0 <_vfiprintf_r+0x250>)
 800a91e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a922:	2206      	movs	r2, #6
 800a924:	f7f5 fc5c 	bl	80001e0 <memchr>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d03f      	beq.n	800a9ac <_vfiprintf_r+0x22c>
 800a92c:	4b29      	ldr	r3, [pc, #164]	; (800a9d4 <_vfiprintf_r+0x254>)
 800a92e:	bb1b      	cbnz	r3, 800a978 <_vfiprintf_r+0x1f8>
 800a930:	9b03      	ldr	r3, [sp, #12]
 800a932:	3307      	adds	r3, #7
 800a934:	f023 0307 	bic.w	r3, r3, #7
 800a938:	3308      	adds	r3, #8
 800a93a:	9303      	str	r3, [sp, #12]
 800a93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a93e:	443b      	add	r3, r7
 800a940:	9309      	str	r3, [sp, #36]	; 0x24
 800a942:	e767      	b.n	800a814 <_vfiprintf_r+0x94>
 800a944:	fb0c 3202 	mla	r2, ip, r2, r3
 800a948:	460c      	mov	r4, r1
 800a94a:	2001      	movs	r0, #1
 800a94c:	e7a5      	b.n	800a89a <_vfiprintf_r+0x11a>
 800a94e:	2300      	movs	r3, #0
 800a950:	3401      	adds	r4, #1
 800a952:	9305      	str	r3, [sp, #20]
 800a954:	4619      	mov	r1, r3
 800a956:	f04f 0c0a 	mov.w	ip, #10
 800a95a:	4620      	mov	r0, r4
 800a95c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a960:	3a30      	subs	r2, #48	; 0x30
 800a962:	2a09      	cmp	r2, #9
 800a964:	d903      	bls.n	800a96e <_vfiprintf_r+0x1ee>
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0c5      	beq.n	800a8f6 <_vfiprintf_r+0x176>
 800a96a:	9105      	str	r1, [sp, #20]
 800a96c:	e7c3      	b.n	800a8f6 <_vfiprintf_r+0x176>
 800a96e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a972:	4604      	mov	r4, r0
 800a974:	2301      	movs	r3, #1
 800a976:	e7f0      	b.n	800a95a <_vfiprintf_r+0x1da>
 800a978:	ab03      	add	r3, sp, #12
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	462a      	mov	r2, r5
 800a97e:	4b16      	ldr	r3, [pc, #88]	; (800a9d8 <_vfiprintf_r+0x258>)
 800a980:	a904      	add	r1, sp, #16
 800a982:	4630      	mov	r0, r6
 800a984:	f7fd fdd2 	bl	800852c <_printf_float>
 800a988:	4607      	mov	r7, r0
 800a98a:	1c78      	adds	r0, r7, #1
 800a98c:	d1d6      	bne.n	800a93c <_vfiprintf_r+0x1bc>
 800a98e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a990:	07d9      	lsls	r1, r3, #31
 800a992:	d405      	bmi.n	800a9a0 <_vfiprintf_r+0x220>
 800a994:	89ab      	ldrh	r3, [r5, #12]
 800a996:	059a      	lsls	r2, r3, #22
 800a998:	d402      	bmi.n	800a9a0 <_vfiprintf_r+0x220>
 800a99a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a99c:	f000 faaf 	bl	800aefe <__retarget_lock_release_recursive>
 800a9a0:	89ab      	ldrh	r3, [r5, #12]
 800a9a2:	065b      	lsls	r3, r3, #25
 800a9a4:	f53f af12 	bmi.w	800a7cc <_vfiprintf_r+0x4c>
 800a9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9aa:	e711      	b.n	800a7d0 <_vfiprintf_r+0x50>
 800a9ac:	ab03      	add	r3, sp, #12
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	462a      	mov	r2, r5
 800a9b2:	4b09      	ldr	r3, [pc, #36]	; (800a9d8 <_vfiprintf_r+0x258>)
 800a9b4:	a904      	add	r1, sp, #16
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7fe f85c 	bl	8008a74 <_printf_i>
 800a9bc:	e7e4      	b.n	800a988 <_vfiprintf_r+0x208>
 800a9be:	bf00      	nop
 800a9c0:	0800d18c 	.word	0x0800d18c
 800a9c4:	0800d1ac 	.word	0x0800d1ac
 800a9c8:	0800d16c 	.word	0x0800d16c
 800a9cc:	0800d014 	.word	0x0800d014
 800a9d0:	0800d01e 	.word	0x0800d01e
 800a9d4:	0800852d 	.word	0x0800852d
 800a9d8:	0800a75d 	.word	0x0800a75d
 800a9dc:	0800d01a 	.word	0x0800d01a

0800a9e0 <__swbuf_r>:
 800a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e2:	460e      	mov	r6, r1
 800a9e4:	4614      	mov	r4, r2
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	b118      	cbz	r0, 800a9f2 <__swbuf_r+0x12>
 800a9ea:	6983      	ldr	r3, [r0, #24]
 800a9ec:	b90b      	cbnz	r3, 800a9f2 <__swbuf_r+0x12>
 800a9ee:	f000 f9e7 	bl	800adc0 <__sinit>
 800a9f2:	4b21      	ldr	r3, [pc, #132]	; (800aa78 <__swbuf_r+0x98>)
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	d12b      	bne.n	800aa50 <__swbuf_r+0x70>
 800a9f8:	686c      	ldr	r4, [r5, #4]
 800a9fa:	69a3      	ldr	r3, [r4, #24]
 800a9fc:	60a3      	str	r3, [r4, #8]
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	071a      	lsls	r2, r3, #28
 800aa02:	d52f      	bpl.n	800aa64 <__swbuf_r+0x84>
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	b36b      	cbz	r3, 800aa64 <__swbuf_r+0x84>
 800aa08:	6923      	ldr	r3, [r4, #16]
 800aa0a:	6820      	ldr	r0, [r4, #0]
 800aa0c:	1ac0      	subs	r0, r0, r3
 800aa0e:	6963      	ldr	r3, [r4, #20]
 800aa10:	b2f6      	uxtb	r6, r6
 800aa12:	4283      	cmp	r3, r0
 800aa14:	4637      	mov	r7, r6
 800aa16:	dc04      	bgt.n	800aa22 <__swbuf_r+0x42>
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f000 f93c 	bl	800ac98 <_fflush_r>
 800aa20:	bb30      	cbnz	r0, 800aa70 <__swbuf_r+0x90>
 800aa22:	68a3      	ldr	r3, [r4, #8]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	60a3      	str	r3, [r4, #8]
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	6022      	str	r2, [r4, #0]
 800aa2e:	701e      	strb	r6, [r3, #0]
 800aa30:	6963      	ldr	r3, [r4, #20]
 800aa32:	3001      	adds	r0, #1
 800aa34:	4283      	cmp	r3, r0
 800aa36:	d004      	beq.n	800aa42 <__swbuf_r+0x62>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	07db      	lsls	r3, r3, #31
 800aa3c:	d506      	bpl.n	800aa4c <__swbuf_r+0x6c>
 800aa3e:	2e0a      	cmp	r6, #10
 800aa40:	d104      	bne.n	800aa4c <__swbuf_r+0x6c>
 800aa42:	4621      	mov	r1, r4
 800aa44:	4628      	mov	r0, r5
 800aa46:	f000 f927 	bl	800ac98 <_fflush_r>
 800aa4a:	b988      	cbnz	r0, 800aa70 <__swbuf_r+0x90>
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa50:	4b0a      	ldr	r3, [pc, #40]	; (800aa7c <__swbuf_r+0x9c>)
 800aa52:	429c      	cmp	r4, r3
 800aa54:	d101      	bne.n	800aa5a <__swbuf_r+0x7a>
 800aa56:	68ac      	ldr	r4, [r5, #8]
 800aa58:	e7cf      	b.n	800a9fa <__swbuf_r+0x1a>
 800aa5a:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <__swbuf_r+0xa0>)
 800aa5c:	429c      	cmp	r4, r3
 800aa5e:	bf08      	it	eq
 800aa60:	68ec      	ldreq	r4, [r5, #12]
 800aa62:	e7ca      	b.n	800a9fa <__swbuf_r+0x1a>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 f81a 	bl	800aaa0 <__swsetup_r>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d0cb      	beq.n	800aa08 <__swbuf_r+0x28>
 800aa70:	f04f 37ff 	mov.w	r7, #4294967295
 800aa74:	e7ea      	b.n	800aa4c <__swbuf_r+0x6c>
 800aa76:	bf00      	nop
 800aa78:	0800d18c 	.word	0x0800d18c
 800aa7c:	0800d1ac 	.word	0x0800d1ac
 800aa80:	0800d16c 	.word	0x0800d16c

0800aa84 <__ascii_wctomb>:
 800aa84:	b149      	cbz	r1, 800aa9a <__ascii_wctomb+0x16>
 800aa86:	2aff      	cmp	r2, #255	; 0xff
 800aa88:	bf85      	ittet	hi
 800aa8a:	238a      	movhi	r3, #138	; 0x8a
 800aa8c:	6003      	strhi	r3, [r0, #0]
 800aa8e:	700a      	strbls	r2, [r1, #0]
 800aa90:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa94:	bf98      	it	ls
 800aa96:	2001      	movls	r0, #1
 800aa98:	4770      	bx	lr
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4770      	bx	lr
	...

0800aaa0 <__swsetup_r>:
 800aaa0:	4b32      	ldr	r3, [pc, #200]	; (800ab6c <__swsetup_r+0xcc>)
 800aaa2:	b570      	push	{r4, r5, r6, lr}
 800aaa4:	681d      	ldr	r5, [r3, #0]
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	b125      	cbz	r5, 800aab6 <__swsetup_r+0x16>
 800aaac:	69ab      	ldr	r3, [r5, #24]
 800aaae:	b913      	cbnz	r3, 800aab6 <__swsetup_r+0x16>
 800aab0:	4628      	mov	r0, r5
 800aab2:	f000 f985 	bl	800adc0 <__sinit>
 800aab6:	4b2e      	ldr	r3, [pc, #184]	; (800ab70 <__swsetup_r+0xd0>)
 800aab8:	429c      	cmp	r4, r3
 800aaba:	d10f      	bne.n	800aadc <__swsetup_r+0x3c>
 800aabc:	686c      	ldr	r4, [r5, #4]
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aac4:	0719      	lsls	r1, r3, #28
 800aac6:	d42c      	bmi.n	800ab22 <__swsetup_r+0x82>
 800aac8:	06dd      	lsls	r5, r3, #27
 800aaca:	d411      	bmi.n	800aaf0 <__swsetup_r+0x50>
 800aacc:	2309      	movs	r3, #9
 800aace:	6033      	str	r3, [r6, #0]
 800aad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	e03e      	b.n	800ab5a <__swsetup_r+0xba>
 800aadc:	4b25      	ldr	r3, [pc, #148]	; (800ab74 <__swsetup_r+0xd4>)
 800aade:	429c      	cmp	r4, r3
 800aae0:	d101      	bne.n	800aae6 <__swsetup_r+0x46>
 800aae2:	68ac      	ldr	r4, [r5, #8]
 800aae4:	e7eb      	b.n	800aabe <__swsetup_r+0x1e>
 800aae6:	4b24      	ldr	r3, [pc, #144]	; (800ab78 <__swsetup_r+0xd8>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	bf08      	it	eq
 800aaec:	68ec      	ldreq	r4, [r5, #12]
 800aaee:	e7e6      	b.n	800aabe <__swsetup_r+0x1e>
 800aaf0:	0758      	lsls	r0, r3, #29
 800aaf2:	d512      	bpl.n	800ab1a <__swsetup_r+0x7a>
 800aaf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaf6:	b141      	cbz	r1, 800ab0a <__swsetup_r+0x6a>
 800aaf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aafc:	4299      	cmp	r1, r3
 800aafe:	d002      	beq.n	800ab06 <__swsetup_r+0x66>
 800ab00:	4630      	mov	r0, r6
 800ab02:	f7ff fb31 	bl	800a168 <_free_r>
 800ab06:	2300      	movs	r3, #0
 800ab08:	6363      	str	r3, [r4, #52]	; 0x34
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	2300      	movs	r3, #0
 800ab14:	6063      	str	r3, [r4, #4]
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f043 0308 	orr.w	r3, r3, #8
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	6923      	ldr	r3, [r4, #16]
 800ab24:	b94b      	cbnz	r3, 800ab3a <__swsetup_r+0x9a>
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab30:	d003      	beq.n	800ab3a <__swsetup_r+0x9a>
 800ab32:	4621      	mov	r1, r4
 800ab34:	4630      	mov	r0, r6
 800ab36:	f000 fa09 	bl	800af4c <__smakebuf_r>
 800ab3a:	89a0      	ldrh	r0, [r4, #12]
 800ab3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab40:	f010 0301 	ands.w	r3, r0, #1
 800ab44:	d00a      	beq.n	800ab5c <__swsetup_r+0xbc>
 800ab46:	2300      	movs	r3, #0
 800ab48:	60a3      	str	r3, [r4, #8]
 800ab4a:	6963      	ldr	r3, [r4, #20]
 800ab4c:	425b      	negs	r3, r3
 800ab4e:	61a3      	str	r3, [r4, #24]
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	b943      	cbnz	r3, 800ab66 <__swsetup_r+0xc6>
 800ab54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab58:	d1ba      	bne.n	800aad0 <__swsetup_r+0x30>
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
 800ab5c:	0781      	lsls	r1, r0, #30
 800ab5e:	bf58      	it	pl
 800ab60:	6963      	ldrpl	r3, [r4, #20]
 800ab62:	60a3      	str	r3, [r4, #8]
 800ab64:	e7f4      	b.n	800ab50 <__swsetup_r+0xb0>
 800ab66:	2000      	movs	r0, #0
 800ab68:	e7f7      	b.n	800ab5a <__swsetup_r+0xba>
 800ab6a:	bf00      	nop
 800ab6c:	2000001c 	.word	0x2000001c
 800ab70:	0800d18c 	.word	0x0800d18c
 800ab74:	0800d1ac 	.word	0x0800d1ac
 800ab78:	0800d16c 	.word	0x0800d16c

0800ab7c <abort>:
 800ab7c:	b508      	push	{r3, lr}
 800ab7e:	2006      	movs	r0, #6
 800ab80:	f000 fa54 	bl	800b02c <raise>
 800ab84:	2001      	movs	r0, #1
 800ab86:	f7f7 fe03 	bl	8002790 <_exit>
	...

0800ab8c <__sflush_r>:
 800ab8c:	898a      	ldrh	r2, [r1, #12]
 800ab8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab92:	4605      	mov	r5, r0
 800ab94:	0710      	lsls	r0, r2, #28
 800ab96:	460c      	mov	r4, r1
 800ab98:	d458      	bmi.n	800ac4c <__sflush_r+0xc0>
 800ab9a:	684b      	ldr	r3, [r1, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dc05      	bgt.n	800abac <__sflush_r+0x20>
 800aba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dc02      	bgt.n	800abac <__sflush_r+0x20>
 800aba6:	2000      	movs	r0, #0
 800aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abae:	2e00      	cmp	r6, #0
 800abb0:	d0f9      	beq.n	800aba6 <__sflush_r+0x1a>
 800abb2:	2300      	movs	r3, #0
 800abb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abb8:	682f      	ldr	r7, [r5, #0]
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	d032      	beq.n	800ac24 <__sflush_r+0x98>
 800abbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	075a      	lsls	r2, r3, #29
 800abc4:	d505      	bpl.n	800abd2 <__sflush_r+0x46>
 800abc6:	6863      	ldr	r3, [r4, #4]
 800abc8:	1ac0      	subs	r0, r0, r3
 800abca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abcc:	b10b      	cbz	r3, 800abd2 <__sflush_r+0x46>
 800abce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abd0:	1ac0      	subs	r0, r0, r3
 800abd2:	2300      	movs	r3, #0
 800abd4:	4602      	mov	r2, r0
 800abd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abd8:	6a21      	ldr	r1, [r4, #32]
 800abda:	4628      	mov	r0, r5
 800abdc:	47b0      	blx	r6
 800abde:	1c43      	adds	r3, r0, #1
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	d106      	bne.n	800abf2 <__sflush_r+0x66>
 800abe4:	6829      	ldr	r1, [r5, #0]
 800abe6:	291d      	cmp	r1, #29
 800abe8:	d82c      	bhi.n	800ac44 <__sflush_r+0xb8>
 800abea:	4a2a      	ldr	r2, [pc, #168]	; (800ac94 <__sflush_r+0x108>)
 800abec:	40ca      	lsrs	r2, r1
 800abee:	07d6      	lsls	r6, r2, #31
 800abf0:	d528      	bpl.n	800ac44 <__sflush_r+0xb8>
 800abf2:	2200      	movs	r2, #0
 800abf4:	6062      	str	r2, [r4, #4]
 800abf6:	04d9      	lsls	r1, r3, #19
 800abf8:	6922      	ldr	r2, [r4, #16]
 800abfa:	6022      	str	r2, [r4, #0]
 800abfc:	d504      	bpl.n	800ac08 <__sflush_r+0x7c>
 800abfe:	1c42      	adds	r2, r0, #1
 800ac00:	d101      	bne.n	800ac06 <__sflush_r+0x7a>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	b903      	cbnz	r3, 800ac08 <__sflush_r+0x7c>
 800ac06:	6560      	str	r0, [r4, #84]	; 0x54
 800ac08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac0a:	602f      	str	r7, [r5, #0]
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	d0ca      	beq.n	800aba6 <__sflush_r+0x1a>
 800ac10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac14:	4299      	cmp	r1, r3
 800ac16:	d002      	beq.n	800ac1e <__sflush_r+0x92>
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f7ff faa5 	bl	800a168 <_free_r>
 800ac1e:	2000      	movs	r0, #0
 800ac20:	6360      	str	r0, [r4, #52]	; 0x34
 800ac22:	e7c1      	b.n	800aba8 <__sflush_r+0x1c>
 800ac24:	6a21      	ldr	r1, [r4, #32]
 800ac26:	2301      	movs	r3, #1
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b0      	blx	r6
 800ac2c:	1c41      	adds	r1, r0, #1
 800ac2e:	d1c7      	bne.n	800abc0 <__sflush_r+0x34>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0c4      	beq.n	800abc0 <__sflush_r+0x34>
 800ac36:	2b1d      	cmp	r3, #29
 800ac38:	d001      	beq.n	800ac3e <__sflush_r+0xb2>
 800ac3a:	2b16      	cmp	r3, #22
 800ac3c:	d101      	bne.n	800ac42 <__sflush_r+0xb6>
 800ac3e:	602f      	str	r7, [r5, #0]
 800ac40:	e7b1      	b.n	800aba6 <__sflush_r+0x1a>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	e7ad      	b.n	800aba8 <__sflush_r+0x1c>
 800ac4c:	690f      	ldr	r7, [r1, #16]
 800ac4e:	2f00      	cmp	r7, #0
 800ac50:	d0a9      	beq.n	800aba6 <__sflush_r+0x1a>
 800ac52:	0793      	lsls	r3, r2, #30
 800ac54:	680e      	ldr	r6, [r1, #0]
 800ac56:	bf08      	it	eq
 800ac58:	694b      	ldreq	r3, [r1, #20]
 800ac5a:	600f      	str	r7, [r1, #0]
 800ac5c:	bf18      	it	ne
 800ac5e:	2300      	movne	r3, #0
 800ac60:	eba6 0807 	sub.w	r8, r6, r7
 800ac64:	608b      	str	r3, [r1, #8]
 800ac66:	f1b8 0f00 	cmp.w	r8, #0
 800ac6a:	dd9c      	ble.n	800aba6 <__sflush_r+0x1a>
 800ac6c:	6a21      	ldr	r1, [r4, #32]
 800ac6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac70:	4643      	mov	r3, r8
 800ac72:	463a      	mov	r2, r7
 800ac74:	4628      	mov	r0, r5
 800ac76:	47b0      	blx	r6
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	dc06      	bgt.n	800ac8a <__sflush_r+0xfe>
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	f04f 30ff 	mov.w	r0, #4294967295
 800ac88:	e78e      	b.n	800aba8 <__sflush_r+0x1c>
 800ac8a:	4407      	add	r7, r0
 800ac8c:	eba8 0800 	sub.w	r8, r8, r0
 800ac90:	e7e9      	b.n	800ac66 <__sflush_r+0xda>
 800ac92:	bf00      	nop
 800ac94:	20400001 	.word	0x20400001

0800ac98 <_fflush_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	690b      	ldr	r3, [r1, #16]
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	460c      	mov	r4, r1
 800aca0:	b913      	cbnz	r3, 800aca8 <_fflush_r+0x10>
 800aca2:	2500      	movs	r5, #0
 800aca4:	4628      	mov	r0, r5
 800aca6:	bd38      	pop	{r3, r4, r5, pc}
 800aca8:	b118      	cbz	r0, 800acb2 <_fflush_r+0x1a>
 800acaa:	6983      	ldr	r3, [r0, #24]
 800acac:	b90b      	cbnz	r3, 800acb2 <_fflush_r+0x1a>
 800acae:	f000 f887 	bl	800adc0 <__sinit>
 800acb2:	4b14      	ldr	r3, [pc, #80]	; (800ad04 <_fflush_r+0x6c>)
 800acb4:	429c      	cmp	r4, r3
 800acb6:	d11b      	bne.n	800acf0 <_fflush_r+0x58>
 800acb8:	686c      	ldr	r4, [r5, #4]
 800acba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d0ef      	beq.n	800aca2 <_fflush_r+0xa>
 800acc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acc4:	07d0      	lsls	r0, r2, #31
 800acc6:	d404      	bmi.n	800acd2 <_fflush_r+0x3a>
 800acc8:	0599      	lsls	r1, r3, #22
 800acca:	d402      	bmi.n	800acd2 <_fflush_r+0x3a>
 800accc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acce:	f000 f915 	bl	800aefc <__retarget_lock_acquire_recursive>
 800acd2:	4628      	mov	r0, r5
 800acd4:	4621      	mov	r1, r4
 800acd6:	f7ff ff59 	bl	800ab8c <__sflush_r>
 800acda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acdc:	07da      	lsls	r2, r3, #31
 800acde:	4605      	mov	r5, r0
 800ace0:	d4e0      	bmi.n	800aca4 <_fflush_r+0xc>
 800ace2:	89a3      	ldrh	r3, [r4, #12]
 800ace4:	059b      	lsls	r3, r3, #22
 800ace6:	d4dd      	bmi.n	800aca4 <_fflush_r+0xc>
 800ace8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acea:	f000 f908 	bl	800aefe <__retarget_lock_release_recursive>
 800acee:	e7d9      	b.n	800aca4 <_fflush_r+0xc>
 800acf0:	4b05      	ldr	r3, [pc, #20]	; (800ad08 <_fflush_r+0x70>)
 800acf2:	429c      	cmp	r4, r3
 800acf4:	d101      	bne.n	800acfa <_fflush_r+0x62>
 800acf6:	68ac      	ldr	r4, [r5, #8]
 800acf8:	e7df      	b.n	800acba <_fflush_r+0x22>
 800acfa:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <_fflush_r+0x74>)
 800acfc:	429c      	cmp	r4, r3
 800acfe:	bf08      	it	eq
 800ad00:	68ec      	ldreq	r4, [r5, #12]
 800ad02:	e7da      	b.n	800acba <_fflush_r+0x22>
 800ad04:	0800d18c 	.word	0x0800d18c
 800ad08:	0800d1ac 	.word	0x0800d1ac
 800ad0c:	0800d16c 	.word	0x0800d16c

0800ad10 <std>:
 800ad10:	2300      	movs	r3, #0
 800ad12:	b510      	push	{r4, lr}
 800ad14:	4604      	mov	r4, r0
 800ad16:	e9c0 3300 	strd	r3, r3, [r0]
 800ad1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad1e:	6083      	str	r3, [r0, #8]
 800ad20:	8181      	strh	r1, [r0, #12]
 800ad22:	6643      	str	r3, [r0, #100]	; 0x64
 800ad24:	81c2      	strh	r2, [r0, #14]
 800ad26:	6183      	str	r3, [r0, #24]
 800ad28:	4619      	mov	r1, r3
 800ad2a:	2208      	movs	r2, #8
 800ad2c:	305c      	adds	r0, #92	; 0x5c
 800ad2e:	f7fd fb55 	bl	80083dc <memset>
 800ad32:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <std+0x38>)
 800ad34:	6263      	str	r3, [r4, #36]	; 0x24
 800ad36:	4b05      	ldr	r3, [pc, #20]	; (800ad4c <std+0x3c>)
 800ad38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad3a:	4b05      	ldr	r3, [pc, #20]	; (800ad50 <std+0x40>)
 800ad3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad3e:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <std+0x44>)
 800ad40:	6224      	str	r4, [r4, #32]
 800ad42:	6323      	str	r3, [r4, #48]	; 0x30
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	bf00      	nop
 800ad48:	0800b065 	.word	0x0800b065
 800ad4c:	0800b087 	.word	0x0800b087
 800ad50:	0800b0bf 	.word	0x0800b0bf
 800ad54:	0800b0e3 	.word	0x0800b0e3

0800ad58 <_cleanup_r>:
 800ad58:	4901      	ldr	r1, [pc, #4]	; (800ad60 <_cleanup_r+0x8>)
 800ad5a:	f000 b8af 	b.w	800aebc <_fwalk_reent>
 800ad5e:	bf00      	nop
 800ad60:	0800ac99 	.word	0x0800ac99

0800ad64 <__sfmoreglue>:
 800ad64:	b570      	push	{r4, r5, r6, lr}
 800ad66:	2268      	movs	r2, #104	; 0x68
 800ad68:	1e4d      	subs	r5, r1, #1
 800ad6a:	4355      	muls	r5, r2
 800ad6c:	460e      	mov	r6, r1
 800ad6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad72:	f7ff fa65 	bl	800a240 <_malloc_r>
 800ad76:	4604      	mov	r4, r0
 800ad78:	b140      	cbz	r0, 800ad8c <__sfmoreglue+0x28>
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ad80:	300c      	adds	r0, #12
 800ad82:	60a0      	str	r0, [r4, #8]
 800ad84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad88:	f7fd fb28 	bl	80083dc <memset>
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}

0800ad90 <__sfp_lock_acquire>:
 800ad90:	4801      	ldr	r0, [pc, #4]	; (800ad98 <__sfp_lock_acquire+0x8>)
 800ad92:	f000 b8b3 	b.w	800aefc <__retarget_lock_acquire_recursive>
 800ad96:	bf00      	nop
 800ad98:	20000801 	.word	0x20000801

0800ad9c <__sfp_lock_release>:
 800ad9c:	4801      	ldr	r0, [pc, #4]	; (800ada4 <__sfp_lock_release+0x8>)
 800ad9e:	f000 b8ae 	b.w	800aefe <__retarget_lock_release_recursive>
 800ada2:	bf00      	nop
 800ada4:	20000801 	.word	0x20000801

0800ada8 <__sinit_lock_acquire>:
 800ada8:	4801      	ldr	r0, [pc, #4]	; (800adb0 <__sinit_lock_acquire+0x8>)
 800adaa:	f000 b8a7 	b.w	800aefc <__retarget_lock_acquire_recursive>
 800adae:	bf00      	nop
 800adb0:	20000802 	.word	0x20000802

0800adb4 <__sinit_lock_release>:
 800adb4:	4801      	ldr	r0, [pc, #4]	; (800adbc <__sinit_lock_release+0x8>)
 800adb6:	f000 b8a2 	b.w	800aefe <__retarget_lock_release_recursive>
 800adba:	bf00      	nop
 800adbc:	20000802 	.word	0x20000802

0800adc0 <__sinit>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	4604      	mov	r4, r0
 800adc4:	f7ff fff0 	bl	800ada8 <__sinit_lock_acquire>
 800adc8:	69a3      	ldr	r3, [r4, #24]
 800adca:	b11b      	cbz	r3, 800add4 <__sinit+0x14>
 800adcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add0:	f7ff bff0 	b.w	800adb4 <__sinit_lock_release>
 800add4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800add8:	6523      	str	r3, [r4, #80]	; 0x50
 800adda:	4b13      	ldr	r3, [pc, #76]	; (800ae28 <__sinit+0x68>)
 800addc:	4a13      	ldr	r2, [pc, #76]	; (800ae2c <__sinit+0x6c>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ade2:	42a3      	cmp	r3, r4
 800ade4:	bf04      	itt	eq
 800ade6:	2301      	moveq	r3, #1
 800ade8:	61a3      	streq	r3, [r4, #24]
 800adea:	4620      	mov	r0, r4
 800adec:	f000 f820 	bl	800ae30 <__sfp>
 800adf0:	6060      	str	r0, [r4, #4]
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 f81c 	bl	800ae30 <__sfp>
 800adf8:	60a0      	str	r0, [r4, #8]
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 f818 	bl	800ae30 <__sfp>
 800ae00:	2200      	movs	r2, #0
 800ae02:	60e0      	str	r0, [r4, #12]
 800ae04:	2104      	movs	r1, #4
 800ae06:	6860      	ldr	r0, [r4, #4]
 800ae08:	f7ff ff82 	bl	800ad10 <std>
 800ae0c:	68a0      	ldr	r0, [r4, #8]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	2109      	movs	r1, #9
 800ae12:	f7ff ff7d 	bl	800ad10 <std>
 800ae16:	68e0      	ldr	r0, [r4, #12]
 800ae18:	2202      	movs	r2, #2
 800ae1a:	2112      	movs	r1, #18
 800ae1c:	f7ff ff78 	bl	800ad10 <std>
 800ae20:	2301      	movs	r3, #1
 800ae22:	61a3      	str	r3, [r4, #24]
 800ae24:	e7d2      	b.n	800adcc <__sinit+0xc>
 800ae26:	bf00      	nop
 800ae28:	0800cdf4 	.word	0x0800cdf4
 800ae2c:	0800ad59 	.word	0x0800ad59

0800ae30 <__sfp>:
 800ae30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae32:	4607      	mov	r7, r0
 800ae34:	f7ff ffac 	bl	800ad90 <__sfp_lock_acquire>
 800ae38:	4b1e      	ldr	r3, [pc, #120]	; (800aeb4 <__sfp+0x84>)
 800ae3a:	681e      	ldr	r6, [r3, #0]
 800ae3c:	69b3      	ldr	r3, [r6, #24]
 800ae3e:	b913      	cbnz	r3, 800ae46 <__sfp+0x16>
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7ff ffbd 	bl	800adc0 <__sinit>
 800ae46:	3648      	adds	r6, #72	; 0x48
 800ae48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	d503      	bpl.n	800ae58 <__sfp+0x28>
 800ae50:	6833      	ldr	r3, [r6, #0]
 800ae52:	b30b      	cbz	r3, 800ae98 <__sfp+0x68>
 800ae54:	6836      	ldr	r6, [r6, #0]
 800ae56:	e7f7      	b.n	800ae48 <__sfp+0x18>
 800ae58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae5c:	b9d5      	cbnz	r5, 800ae94 <__sfp+0x64>
 800ae5e:	4b16      	ldr	r3, [pc, #88]	; (800aeb8 <__sfp+0x88>)
 800ae60:	60e3      	str	r3, [r4, #12]
 800ae62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae66:	6665      	str	r5, [r4, #100]	; 0x64
 800ae68:	f000 f847 	bl	800aefa <__retarget_lock_init_recursive>
 800ae6c:	f7ff ff96 	bl	800ad9c <__sfp_lock_release>
 800ae70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae78:	6025      	str	r5, [r4, #0]
 800ae7a:	61a5      	str	r5, [r4, #24]
 800ae7c:	2208      	movs	r2, #8
 800ae7e:	4629      	mov	r1, r5
 800ae80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae84:	f7fd faaa 	bl	80083dc <memset>
 800ae88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae90:	4620      	mov	r0, r4
 800ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae94:	3468      	adds	r4, #104	; 0x68
 800ae96:	e7d9      	b.n	800ae4c <__sfp+0x1c>
 800ae98:	2104      	movs	r1, #4
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	f7ff ff62 	bl	800ad64 <__sfmoreglue>
 800aea0:	4604      	mov	r4, r0
 800aea2:	6030      	str	r0, [r6, #0]
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d1d5      	bne.n	800ae54 <__sfp+0x24>
 800aea8:	f7ff ff78 	bl	800ad9c <__sfp_lock_release>
 800aeac:	230c      	movs	r3, #12
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	e7ee      	b.n	800ae90 <__sfp+0x60>
 800aeb2:	bf00      	nop
 800aeb4:	0800cdf4 	.word	0x0800cdf4
 800aeb8:	ffff0001 	.word	0xffff0001

0800aebc <_fwalk_reent>:
 800aebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec0:	4606      	mov	r6, r0
 800aec2:	4688      	mov	r8, r1
 800aec4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aec8:	2700      	movs	r7, #0
 800aeca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aece:	f1b9 0901 	subs.w	r9, r9, #1
 800aed2:	d505      	bpl.n	800aee0 <_fwalk_reent+0x24>
 800aed4:	6824      	ldr	r4, [r4, #0]
 800aed6:	2c00      	cmp	r4, #0
 800aed8:	d1f7      	bne.n	800aeca <_fwalk_reent+0xe>
 800aeda:	4638      	mov	r0, r7
 800aedc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee0:	89ab      	ldrh	r3, [r5, #12]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d907      	bls.n	800aef6 <_fwalk_reent+0x3a>
 800aee6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aeea:	3301      	adds	r3, #1
 800aeec:	d003      	beq.n	800aef6 <_fwalk_reent+0x3a>
 800aeee:	4629      	mov	r1, r5
 800aef0:	4630      	mov	r0, r6
 800aef2:	47c0      	blx	r8
 800aef4:	4307      	orrs	r7, r0
 800aef6:	3568      	adds	r5, #104	; 0x68
 800aef8:	e7e9      	b.n	800aece <_fwalk_reent+0x12>

0800aefa <__retarget_lock_init_recursive>:
 800aefa:	4770      	bx	lr

0800aefc <__retarget_lock_acquire_recursive>:
 800aefc:	4770      	bx	lr

0800aefe <__retarget_lock_release_recursive>:
 800aefe:	4770      	bx	lr

0800af00 <__swhatbuf_r>:
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	460e      	mov	r6, r1
 800af04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af08:	2900      	cmp	r1, #0
 800af0a:	b096      	sub	sp, #88	; 0x58
 800af0c:	4614      	mov	r4, r2
 800af0e:	461d      	mov	r5, r3
 800af10:	da08      	bge.n	800af24 <__swhatbuf_r+0x24>
 800af12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	602a      	str	r2, [r5, #0]
 800af1a:	061a      	lsls	r2, r3, #24
 800af1c:	d410      	bmi.n	800af40 <__swhatbuf_r+0x40>
 800af1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af22:	e00e      	b.n	800af42 <__swhatbuf_r+0x42>
 800af24:	466a      	mov	r2, sp
 800af26:	f000 f903 	bl	800b130 <_fstat_r>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	dbf1      	blt.n	800af12 <__swhatbuf_r+0x12>
 800af2e:	9a01      	ldr	r2, [sp, #4]
 800af30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af38:	425a      	negs	r2, r3
 800af3a:	415a      	adcs	r2, r3
 800af3c:	602a      	str	r2, [r5, #0]
 800af3e:	e7ee      	b.n	800af1e <__swhatbuf_r+0x1e>
 800af40:	2340      	movs	r3, #64	; 0x40
 800af42:	2000      	movs	r0, #0
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	b016      	add	sp, #88	; 0x58
 800af48:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af4c <__smakebuf_r>:
 800af4c:	898b      	ldrh	r3, [r1, #12]
 800af4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af50:	079d      	lsls	r5, r3, #30
 800af52:	4606      	mov	r6, r0
 800af54:	460c      	mov	r4, r1
 800af56:	d507      	bpl.n	800af68 <__smakebuf_r+0x1c>
 800af58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	6123      	str	r3, [r4, #16]
 800af60:	2301      	movs	r3, #1
 800af62:	6163      	str	r3, [r4, #20]
 800af64:	b002      	add	sp, #8
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	ab01      	add	r3, sp, #4
 800af6a:	466a      	mov	r2, sp
 800af6c:	f7ff ffc8 	bl	800af00 <__swhatbuf_r>
 800af70:	9900      	ldr	r1, [sp, #0]
 800af72:	4605      	mov	r5, r0
 800af74:	4630      	mov	r0, r6
 800af76:	f7ff f963 	bl	800a240 <_malloc_r>
 800af7a:	b948      	cbnz	r0, 800af90 <__smakebuf_r+0x44>
 800af7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af80:	059a      	lsls	r2, r3, #22
 800af82:	d4ef      	bmi.n	800af64 <__smakebuf_r+0x18>
 800af84:	f023 0303 	bic.w	r3, r3, #3
 800af88:	f043 0302 	orr.w	r3, r3, #2
 800af8c:	81a3      	strh	r3, [r4, #12]
 800af8e:	e7e3      	b.n	800af58 <__smakebuf_r+0xc>
 800af90:	4b0d      	ldr	r3, [pc, #52]	; (800afc8 <__smakebuf_r+0x7c>)
 800af92:	62b3      	str	r3, [r6, #40]	; 0x28
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	6020      	str	r0, [r4, #0]
 800af98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af9c:	81a3      	strh	r3, [r4, #12]
 800af9e:	9b00      	ldr	r3, [sp, #0]
 800afa0:	6163      	str	r3, [r4, #20]
 800afa2:	9b01      	ldr	r3, [sp, #4]
 800afa4:	6120      	str	r0, [r4, #16]
 800afa6:	b15b      	cbz	r3, 800afc0 <__smakebuf_r+0x74>
 800afa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afac:	4630      	mov	r0, r6
 800afae:	f000 f8d1 	bl	800b154 <_isatty_r>
 800afb2:	b128      	cbz	r0, 800afc0 <__smakebuf_r+0x74>
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	f023 0303 	bic.w	r3, r3, #3
 800afba:	f043 0301 	orr.w	r3, r3, #1
 800afbe:	81a3      	strh	r3, [r4, #12]
 800afc0:	89a0      	ldrh	r0, [r4, #12]
 800afc2:	4305      	orrs	r5, r0
 800afc4:	81a5      	strh	r5, [r4, #12]
 800afc6:	e7cd      	b.n	800af64 <__smakebuf_r+0x18>
 800afc8:	0800ad59 	.word	0x0800ad59

0800afcc <_malloc_usable_size_r>:
 800afcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afd0:	1f18      	subs	r0, r3, #4
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	bfbc      	itt	lt
 800afd6:	580b      	ldrlt	r3, [r1, r0]
 800afd8:	18c0      	addlt	r0, r0, r3
 800afda:	4770      	bx	lr

0800afdc <_raise_r>:
 800afdc:	291f      	cmp	r1, #31
 800afde:	b538      	push	{r3, r4, r5, lr}
 800afe0:	4604      	mov	r4, r0
 800afe2:	460d      	mov	r5, r1
 800afe4:	d904      	bls.n	800aff0 <_raise_r+0x14>
 800afe6:	2316      	movs	r3, #22
 800afe8:	6003      	str	r3, [r0, #0]
 800afea:	f04f 30ff 	mov.w	r0, #4294967295
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aff2:	b112      	cbz	r2, 800affa <_raise_r+0x1e>
 800aff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aff8:	b94b      	cbnz	r3, 800b00e <_raise_r+0x32>
 800affa:	4620      	mov	r0, r4
 800affc:	f000 f830 	bl	800b060 <_getpid_r>
 800b000:	462a      	mov	r2, r5
 800b002:	4601      	mov	r1, r0
 800b004:	4620      	mov	r0, r4
 800b006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b00a:	f000 b817 	b.w	800b03c <_kill_r>
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d00a      	beq.n	800b028 <_raise_r+0x4c>
 800b012:	1c59      	adds	r1, r3, #1
 800b014:	d103      	bne.n	800b01e <_raise_r+0x42>
 800b016:	2316      	movs	r3, #22
 800b018:	6003      	str	r3, [r0, #0]
 800b01a:	2001      	movs	r0, #1
 800b01c:	e7e7      	b.n	800afee <_raise_r+0x12>
 800b01e:	2400      	movs	r4, #0
 800b020:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b024:	4628      	mov	r0, r5
 800b026:	4798      	blx	r3
 800b028:	2000      	movs	r0, #0
 800b02a:	e7e0      	b.n	800afee <_raise_r+0x12>

0800b02c <raise>:
 800b02c:	4b02      	ldr	r3, [pc, #8]	; (800b038 <raise+0xc>)
 800b02e:	4601      	mov	r1, r0
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	f7ff bfd3 	b.w	800afdc <_raise_r>
 800b036:	bf00      	nop
 800b038:	2000001c 	.word	0x2000001c

0800b03c <_kill_r>:
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	4d07      	ldr	r5, [pc, #28]	; (800b05c <_kill_r+0x20>)
 800b040:	2300      	movs	r3, #0
 800b042:	4604      	mov	r4, r0
 800b044:	4608      	mov	r0, r1
 800b046:	4611      	mov	r1, r2
 800b048:	602b      	str	r3, [r5, #0]
 800b04a:	f7f7 fb91 	bl	8002770 <_kill>
 800b04e:	1c43      	adds	r3, r0, #1
 800b050:	d102      	bne.n	800b058 <_kill_r+0x1c>
 800b052:	682b      	ldr	r3, [r5, #0]
 800b054:	b103      	cbz	r3, 800b058 <_kill_r+0x1c>
 800b056:	6023      	str	r3, [r4, #0]
 800b058:	bd38      	pop	{r3, r4, r5, pc}
 800b05a:	bf00      	nop
 800b05c:	200007fc 	.word	0x200007fc

0800b060 <_getpid_r>:
 800b060:	f7f7 bb7e 	b.w	8002760 <_getpid>

0800b064 <__sread>:
 800b064:	b510      	push	{r4, lr}
 800b066:	460c      	mov	r4, r1
 800b068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06c:	f000 f894 	bl	800b198 <_read_r>
 800b070:	2800      	cmp	r0, #0
 800b072:	bfab      	itete	ge
 800b074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b076:	89a3      	ldrhlt	r3, [r4, #12]
 800b078:	181b      	addge	r3, r3, r0
 800b07a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b07e:	bfac      	ite	ge
 800b080:	6563      	strge	r3, [r4, #84]	; 0x54
 800b082:	81a3      	strhlt	r3, [r4, #12]
 800b084:	bd10      	pop	{r4, pc}

0800b086 <__swrite>:
 800b086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b08a:	461f      	mov	r7, r3
 800b08c:	898b      	ldrh	r3, [r1, #12]
 800b08e:	05db      	lsls	r3, r3, #23
 800b090:	4605      	mov	r5, r0
 800b092:	460c      	mov	r4, r1
 800b094:	4616      	mov	r6, r2
 800b096:	d505      	bpl.n	800b0a4 <__swrite+0x1e>
 800b098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b09c:	2302      	movs	r3, #2
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f000 f868 	bl	800b174 <_lseek_r>
 800b0a4:	89a3      	ldrh	r3, [r4, #12]
 800b0a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0ae:	81a3      	strh	r3, [r4, #12]
 800b0b0:	4632      	mov	r2, r6
 800b0b2:	463b      	mov	r3, r7
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ba:	f000 b817 	b.w	800b0ec <_write_r>

0800b0be <__sseek>:
 800b0be:	b510      	push	{r4, lr}
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c6:	f000 f855 	bl	800b174 <_lseek_r>
 800b0ca:	1c43      	adds	r3, r0, #1
 800b0cc:	89a3      	ldrh	r3, [r4, #12]
 800b0ce:	bf15      	itete	ne
 800b0d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0da:	81a3      	strheq	r3, [r4, #12]
 800b0dc:	bf18      	it	ne
 800b0de:	81a3      	strhne	r3, [r4, #12]
 800b0e0:	bd10      	pop	{r4, pc}

0800b0e2 <__sclose>:
 800b0e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e6:	f000 b813 	b.w	800b110 <_close_r>
	...

0800b0ec <_write_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	4d07      	ldr	r5, [pc, #28]	; (800b10c <_write_r+0x20>)
 800b0f0:	4604      	mov	r4, r0
 800b0f2:	4608      	mov	r0, r1
 800b0f4:	4611      	mov	r1, r2
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	602a      	str	r2, [r5, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	f7f7 fb6f 	bl	80027de <_write>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d102      	bne.n	800b10a <_write_r+0x1e>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	b103      	cbz	r3, 800b10a <_write_r+0x1e>
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	200007fc 	.word	0x200007fc

0800b110 <_close_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4d06      	ldr	r5, [pc, #24]	; (800b12c <_close_r+0x1c>)
 800b114:	2300      	movs	r3, #0
 800b116:	4604      	mov	r4, r0
 800b118:	4608      	mov	r0, r1
 800b11a:	602b      	str	r3, [r5, #0]
 800b11c:	f7f7 fb7b 	bl	8002816 <_close>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	d102      	bne.n	800b12a <_close_r+0x1a>
 800b124:	682b      	ldr	r3, [r5, #0]
 800b126:	b103      	cbz	r3, 800b12a <_close_r+0x1a>
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	bd38      	pop	{r3, r4, r5, pc}
 800b12c:	200007fc 	.word	0x200007fc

0800b130 <_fstat_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	4d07      	ldr	r5, [pc, #28]	; (800b150 <_fstat_r+0x20>)
 800b134:	2300      	movs	r3, #0
 800b136:	4604      	mov	r4, r0
 800b138:	4608      	mov	r0, r1
 800b13a:	4611      	mov	r1, r2
 800b13c:	602b      	str	r3, [r5, #0]
 800b13e:	f7f7 fb76 	bl	800282e <_fstat>
 800b142:	1c43      	adds	r3, r0, #1
 800b144:	d102      	bne.n	800b14c <_fstat_r+0x1c>
 800b146:	682b      	ldr	r3, [r5, #0]
 800b148:	b103      	cbz	r3, 800b14c <_fstat_r+0x1c>
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	bd38      	pop	{r3, r4, r5, pc}
 800b14e:	bf00      	nop
 800b150:	200007fc 	.word	0x200007fc

0800b154 <_isatty_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4d06      	ldr	r5, [pc, #24]	; (800b170 <_isatty_r+0x1c>)
 800b158:	2300      	movs	r3, #0
 800b15a:	4604      	mov	r4, r0
 800b15c:	4608      	mov	r0, r1
 800b15e:	602b      	str	r3, [r5, #0]
 800b160:	f7f7 fb75 	bl	800284e <_isatty>
 800b164:	1c43      	adds	r3, r0, #1
 800b166:	d102      	bne.n	800b16e <_isatty_r+0x1a>
 800b168:	682b      	ldr	r3, [r5, #0]
 800b16a:	b103      	cbz	r3, 800b16e <_isatty_r+0x1a>
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	bd38      	pop	{r3, r4, r5, pc}
 800b170:	200007fc 	.word	0x200007fc

0800b174 <_lseek_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d07      	ldr	r5, [pc, #28]	; (800b194 <_lseek_r+0x20>)
 800b178:	4604      	mov	r4, r0
 800b17a:	4608      	mov	r0, r1
 800b17c:	4611      	mov	r1, r2
 800b17e:	2200      	movs	r2, #0
 800b180:	602a      	str	r2, [r5, #0]
 800b182:	461a      	mov	r2, r3
 800b184:	f7f7 fb6e 	bl	8002864 <_lseek>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d102      	bne.n	800b192 <_lseek_r+0x1e>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	b103      	cbz	r3, 800b192 <_lseek_r+0x1e>
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	200007fc 	.word	0x200007fc

0800b198 <_read_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d07      	ldr	r5, [pc, #28]	; (800b1b8 <_read_r+0x20>)
 800b19c:	4604      	mov	r4, r0
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	602a      	str	r2, [r5, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f7f7 fafc 	bl	80027a4 <_read>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_read_r+0x1e>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_read_r+0x1e>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	200007fc 	.word	0x200007fc

0800b1bc <_init>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr

0800b1c8 <_fini>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr
